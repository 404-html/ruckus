/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    
    
    pub const _STDIO_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const FOPEN_MAX: u32 = 16;
    pub const _BITS_STDIO_H: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const COMPILER_IS_GCC: u32 = 1;
    pub const CPU_CLIPS_NEGATIVE: u32 = 0;
    pub const CPU_CLIPS_POSITIVE: u32 = 0;
    pub const CPU_IS_BIG_ENDIAN: u32 = 0;
    pub const CPU_IS_LITTLE_ENDIAN: u32 = 1;
    pub const ENABLE_EXPERIMENTAL_CODE: u32 = 0;
    pub const HAVE_ALSA: u32 = 1;
    pub const HAVE_ALSA_ASOUNDLIB_H: u32 = 1;
    pub const HAVE_BYTESWAP_H: u32 = 1;
    pub const HAVE_CALLOC: u32 = 1;
    pub const HAVE_CEIL: u32 = 1;
    pub const HAVE_DECL_S_IRGRP: u32 = 1;
    pub const HAVE_DLFCN_H: u32 = 1;
    pub const HAVE_ENDIAN_H: u32 = 1;
    pub const HAVE_EXTERNAL_XIPH_LIBS: u32 = 1;
    pub const HAVE_FLOOR: u32 = 1;
    pub const HAVE_FMOD: u32 = 1;
    pub const HAVE_FREE: u32 = 1;
    pub const HAVE_FSTAT: u32 = 1;
    pub const HAVE_FSTAT64: u32 = 1;
    pub const HAVE_FSYNC: u32 = 1;
    pub const HAVE_FTRUNCATE: u32 = 1;
    pub const HAVE_GETPAGESIZE: u32 = 1;
    pub const HAVE_GETTIMEOFDAY: u32 = 1;
    pub const HAVE_GMTIME: u32 = 1;
    pub const HAVE_GMTIME_R: u32 = 1;
    pub const HAVE_INTTYPES_H: u32 = 1;
    pub const HAVE_LOCALE_H: u32 = 1;
    pub const HAVE_LOCALTIME: u32 = 1;
    pub const HAVE_LOCALTIME_R: u32 = 1;
    pub const HAVE_LRINT: u32 = 1;
    pub const HAVE_LRINTF: u32 = 1;
    pub const HAVE_LSEEK: u32 = 1;
    pub const HAVE_LSEEK64: u32 = 1;
    pub const HAVE_MALLOC: u32 = 1;
    pub const HAVE_MEMORY_H: u32 = 1;
    pub const HAVE_MMAP: u32 = 1;
    pub const HAVE_OPEN: u32 = 1;
    pub const HAVE_PIPE: u32 = 1;
    pub const HAVE_READ: u32 = 1;
    pub const HAVE_REALLOC: u32 = 1;
    pub const HAVE_SETLOCALE: u32 = 1;
    pub const HAVE_SNDIO_H: u32 = 0;
    pub const HAVE_SNPRINTF: u32 = 1;
    pub const HAVE_SQLITE3: u32 = 1;
    pub const HAVE_STDINT_H: u32 = 1;
    pub const HAVE_STDLIB_H: u32 = 1;
    pub const HAVE_STRINGS_H: u32 = 1;
    pub const HAVE_STRING_H: u32 = 1;
    pub const HAVE_SYS_STAT_H: u32 = 1;
    pub const HAVE_SYS_TIME_H: u32 = 1;
    pub const HAVE_SYS_TYPES_H: u32 = 1;
    pub const HAVE_SYS_WAIT_H: u32 = 1;
    pub const HAVE_UNISTD_H: u32 = 1;
    pub const HAVE_VSNPRINTF: u32 = 1;
    pub const HAVE_WAITPID: u32 = 1;
    pub const HAVE_WRITE: u32 = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
    pub const OS_IS_OPENBSD: u32 = 0;
    pub const OS_IS_WIN32: u32 = 0;
    pub const PACKAGE: &'static [u8; 11usize] = b"libsndfile\0";
    pub const PACKAGE_BUGREPORT: &'static [u8; 22usize] = b"sndfile@mega-nerd.com\0";
    pub const PACKAGE_NAME: &'static [u8; 11usize] = b"libsndfile\0";
    pub const PACKAGE_STRING: &'static [u8; 22usize] = b"libsndfile 1.0.29pre1\0";
    pub const PACKAGE_TARNAME: &'static [u8; 11usize] = b"libsndfile\0";
    pub const PACKAGE_URL: &'static [u8; 37usize] = b"http://www.mega-nerd.com/libsndfile/\0";
    pub const PACKAGE_VERSION: &'static [u8; 11usize] = b"1.0.29pre1\0";
    pub const SF_COUNT_MAX: u64 = 9223372036854775807;
    pub const SIZEOF_DOUBLE: u32 = 8;
    pub const SIZEOF_FLOAT: u32 = 4;
    pub const SIZEOF_INT: u32 = 4;
    pub const SIZEOF_INT64_T: u32 = 8;
    pub const SIZEOF_LONG: u32 = 8;
    pub const SIZEOF_LONG_LONG: u32 = 8;
    pub const SIZEOF_OFF_T: u32 = 8;
    pub const SIZEOF_SF_COUNT_T: u32 = 8;
    pub const SIZEOF_SHORT: u32 = 2;
    pub const SIZEOF_SIZE_T: u32 = 8;
    pub const SIZEOF_VOIDP: u32 = 8;
    pub const SIZEOF_WCHAR_T: u32 = 4;
    pub const STDC_HEADERS: u32 = 1;
    pub const _ALL_SOURCE: u32 = 1;
    pub const _POSIX_PTHREAD_SEMANTICS: u32 = 1;
    pub const _TANDEM_SOURCE: u32 = 1;
    pub const __EXTENSIONS__: u32 = 1;
    pub const USE_WINDOWS_API: u32 = 0;
    pub const VERSION: &'static [u8; 11usize] = b"1.0.29pre1\0";
    pub const WIN32_TARGET_DLL: u32 = 0;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const HAVE_PREAD: u32 = 1;
    pub const HAVE_PWRITE: u32 = 1;
    pub const OS_IS_MACOSX: u32 = 0;
    pub const SIZEOF_OFF64_T: u32 = 0;
    pub const SIZEOF_LOFF_T: u32 = 8;
    pub const _FILE_OFFSET_BITS: u32 = 64;
    pub const HAVE_FDATASYNC: u32 = 1;
    pub const HAVE_SSIZE_T: u32 = 1;
    pub type __gnuc_va_list = root::__builtin_va_list;
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::std::os::raw::c_void,
        pub __pad5: usize,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    pub type fpos_t = root::__fpos_t;
    extern "C" {
        #[link_name = "\u{1}stdin"]
        pub static mut stdin: *mut root::FILE;
    }
    extern "C" {
        #[link_name = "\u{1}stdout"]
        pub static mut stdout: *mut root::FILE;
    }
    extern "C" {
        #[link_name = "\u{1}stderr"]
        pub static mut stderr: *mut root::FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_fscanf"]
        pub fn fscanf1(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_scanf"]
        pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_sscanf"]
        pub fn sscanf1(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vfscanf"]
        pub fn vfscanf1(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vscanf"]
        pub fn vscanf1(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__isoc99_vsscanf"]
        pub fn vsscanf1(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fgetpos(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(
            __stream: *mut root::FILE,
            __pos: *const root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(
            arg1: *mut root::FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type wchar_t = ::std::os::raw::c_int;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = f64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut root::wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(
            __s: *mut ::std::os::raw::c_char,
            __wchar: root::wchar_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(
            __pwcs: *mut root::wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn wcstombs(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const root::wchar_t,
            __n: usize,
        ) -> usize;
    }
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub type ino_t = root::__ino_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type pid_t = root::__pid_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulong;
    pub type register_t = ::std::os::raw::c_long;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub const SF_FORMAT_WAV: root::_bindgen_ty_1 = 65536;
    pub const SF_FORMAT_AIFF: root::_bindgen_ty_1 = 131072;
    pub const SF_FORMAT_AU: root::_bindgen_ty_1 = 196608;
    pub const SF_FORMAT_RAW: root::_bindgen_ty_1 = 262144;
    pub const SF_FORMAT_PAF: root::_bindgen_ty_1 = 327680;
    pub const SF_FORMAT_SVX: root::_bindgen_ty_1 = 393216;
    pub const SF_FORMAT_NIST: root::_bindgen_ty_1 = 458752;
    pub const SF_FORMAT_VOC: root::_bindgen_ty_1 = 524288;
    pub const SF_FORMAT_IRCAM: root::_bindgen_ty_1 = 655360;
    pub const SF_FORMAT_W64: root::_bindgen_ty_1 = 720896;
    pub const SF_FORMAT_MAT4: root::_bindgen_ty_1 = 786432;
    pub const SF_FORMAT_MAT5: root::_bindgen_ty_1 = 851968;
    pub const SF_FORMAT_PVF: root::_bindgen_ty_1 = 917504;
    pub const SF_FORMAT_XI: root::_bindgen_ty_1 = 983040;
    pub const SF_FORMAT_HTK: root::_bindgen_ty_1 = 1048576;
    pub const SF_FORMAT_SDS: root::_bindgen_ty_1 = 1114112;
    pub const SF_FORMAT_AVR: root::_bindgen_ty_1 = 1179648;
    pub const SF_FORMAT_WAVEX: root::_bindgen_ty_1 = 1245184;
    pub const SF_FORMAT_SD2: root::_bindgen_ty_1 = 1441792;
    pub const SF_FORMAT_FLAC: root::_bindgen_ty_1 = 1507328;
    pub const SF_FORMAT_CAF: root::_bindgen_ty_1 = 1572864;
    pub const SF_FORMAT_WVE: root::_bindgen_ty_1 = 1638400;
    pub const SF_FORMAT_OGG: root::_bindgen_ty_1 = 2097152;
    pub const SF_FORMAT_MPC2K: root::_bindgen_ty_1 = 2162688;
    pub const SF_FORMAT_RF64: root::_bindgen_ty_1 = 2228224;
    pub const SF_FORMAT_PCM_S8: root::_bindgen_ty_1 = 1;
    pub const SF_FORMAT_PCM_16: root::_bindgen_ty_1 = 2;
    pub const SF_FORMAT_PCM_24: root::_bindgen_ty_1 = 3;
    pub const SF_FORMAT_PCM_32: root::_bindgen_ty_1 = 4;
    pub const SF_FORMAT_PCM_U8: root::_bindgen_ty_1 = 5;
    pub const SF_FORMAT_FLOAT: root::_bindgen_ty_1 = 6;
    pub const SF_FORMAT_DOUBLE: root::_bindgen_ty_1 = 7;
    pub const SF_FORMAT_ULAW: root::_bindgen_ty_1 = 16;
    pub const SF_FORMAT_ALAW: root::_bindgen_ty_1 = 17;
    pub const SF_FORMAT_IMA_ADPCM: root::_bindgen_ty_1 = 18;
    pub const SF_FORMAT_MS_ADPCM: root::_bindgen_ty_1 = 19;
    pub const SF_FORMAT_GSM610: root::_bindgen_ty_1 = 32;
    pub const SF_FORMAT_VOX_ADPCM: root::_bindgen_ty_1 = 33;
    pub const SF_FORMAT_NMS_ADPCM_16: root::_bindgen_ty_1 = 34;
    pub const SF_FORMAT_NMS_ADPCM_24: root::_bindgen_ty_1 = 35;
    pub const SF_FORMAT_NMS_ADPCM_32: root::_bindgen_ty_1 = 36;
    pub const SF_FORMAT_G721_32: root::_bindgen_ty_1 = 48;
    pub const SF_FORMAT_G723_24: root::_bindgen_ty_1 = 49;
    pub const SF_FORMAT_G723_40: root::_bindgen_ty_1 = 50;
    pub const SF_FORMAT_DWVW_12: root::_bindgen_ty_1 = 64;
    pub const SF_FORMAT_DWVW_16: root::_bindgen_ty_1 = 65;
    pub const SF_FORMAT_DWVW_24: root::_bindgen_ty_1 = 66;
    pub const SF_FORMAT_DWVW_N: root::_bindgen_ty_1 = 67;
    pub const SF_FORMAT_DPCM_8: root::_bindgen_ty_1 = 80;
    pub const SF_FORMAT_DPCM_16: root::_bindgen_ty_1 = 81;
    pub const SF_FORMAT_VORBIS: root::_bindgen_ty_1 = 96;
    pub const SF_FORMAT_ALAC_16: root::_bindgen_ty_1 = 112;
    pub const SF_FORMAT_ALAC_20: root::_bindgen_ty_1 = 113;
    pub const SF_FORMAT_ALAC_24: root::_bindgen_ty_1 = 114;
    pub const SF_FORMAT_ALAC_32: root::_bindgen_ty_1 = 115;
    pub const SF_ENDIAN_FILE: root::_bindgen_ty_1 = 0;
    pub const SF_ENDIAN_LITTLE: root::_bindgen_ty_1 = 268435456;
    pub const SF_ENDIAN_BIG: root::_bindgen_ty_1 = 536870912;
    pub const SF_ENDIAN_CPU: root::_bindgen_ty_1 = 805306368;
    pub const SF_FORMAT_SUBMASK: root::_bindgen_ty_1 = 65535;
    pub const SF_FORMAT_TYPEMASK: root::_bindgen_ty_1 = 268369920;
    pub const SF_FORMAT_ENDMASK: root::_bindgen_ty_1 = 805306368;
    pub type _bindgen_ty_1 = u32;
    pub const SFC_GET_LIB_VERSION: root::_bindgen_ty_2 = 4096;
    pub const SFC_GET_LOG_INFO: root::_bindgen_ty_2 = 4097;
    pub const SFC_GET_CURRENT_SF_INFO: root::_bindgen_ty_2 = 4098;
    pub const SFC_GET_NORM_DOUBLE: root::_bindgen_ty_2 = 4112;
    pub const SFC_GET_NORM_FLOAT: root::_bindgen_ty_2 = 4113;
    pub const SFC_SET_NORM_DOUBLE: root::_bindgen_ty_2 = 4114;
    pub const SFC_SET_NORM_FLOAT: root::_bindgen_ty_2 = 4115;
    pub const SFC_SET_SCALE_FLOAT_INT_READ: root::_bindgen_ty_2 = 4116;
    pub const SFC_SET_SCALE_INT_FLOAT_WRITE: root::_bindgen_ty_2 = 4117;
    pub const SFC_GET_SIMPLE_FORMAT_COUNT: root::_bindgen_ty_2 = 4128;
    pub const SFC_GET_SIMPLE_FORMAT: root::_bindgen_ty_2 = 4129;
    pub const SFC_GET_FORMAT_INFO: root::_bindgen_ty_2 = 4136;
    pub const SFC_GET_FORMAT_MAJOR_COUNT: root::_bindgen_ty_2 = 4144;
    pub const SFC_GET_FORMAT_MAJOR: root::_bindgen_ty_2 = 4145;
    pub const SFC_GET_FORMAT_SUBTYPE_COUNT: root::_bindgen_ty_2 = 4146;
    pub const SFC_GET_FORMAT_SUBTYPE: root::_bindgen_ty_2 = 4147;
    pub const SFC_CALC_SIGNAL_MAX: root::_bindgen_ty_2 = 4160;
    pub const SFC_CALC_NORM_SIGNAL_MAX: root::_bindgen_ty_2 = 4161;
    pub const SFC_CALC_MAX_ALL_CHANNELS: root::_bindgen_ty_2 = 4162;
    pub const SFC_CALC_NORM_MAX_ALL_CHANNELS: root::_bindgen_ty_2 = 4163;
    pub const SFC_GET_SIGNAL_MAX: root::_bindgen_ty_2 = 4164;
    pub const SFC_GET_MAX_ALL_CHANNELS: root::_bindgen_ty_2 = 4165;
    pub const SFC_SET_ADD_PEAK_CHUNK: root::_bindgen_ty_2 = 4176;
    pub const SFC_UPDATE_HEADER_NOW: root::_bindgen_ty_2 = 4192;
    pub const SFC_SET_UPDATE_HEADER_AUTO: root::_bindgen_ty_2 = 4193;
    pub const SFC_FILE_TRUNCATE: root::_bindgen_ty_2 = 4224;
    pub const SFC_SET_RAW_START_OFFSET: root::_bindgen_ty_2 = 4240;
    pub const SFC_SET_DITHER_ON_WRITE: root::_bindgen_ty_2 = 4256;
    pub const SFC_SET_DITHER_ON_READ: root::_bindgen_ty_2 = 4257;
    pub const SFC_GET_DITHER_INFO_COUNT: root::_bindgen_ty_2 = 4258;
    pub const SFC_GET_DITHER_INFO: root::_bindgen_ty_2 = 4259;
    pub const SFC_GET_EMBED_FILE_INFO: root::_bindgen_ty_2 = 4272;
    pub const SFC_SET_CLIPPING: root::_bindgen_ty_2 = 4288;
    pub const SFC_GET_CLIPPING: root::_bindgen_ty_2 = 4289;
    pub const SFC_GET_CUE_COUNT: root::_bindgen_ty_2 = 4301;
    pub const SFC_GET_CUE: root::_bindgen_ty_2 = 4302;
    pub const SFC_SET_CUE: root::_bindgen_ty_2 = 4303;
    pub const SFC_GET_INSTRUMENT: root::_bindgen_ty_2 = 4304;
    pub const SFC_SET_INSTRUMENT: root::_bindgen_ty_2 = 4305;
    pub const SFC_GET_LOOP_INFO: root::_bindgen_ty_2 = 4320;
    pub const SFC_GET_BROADCAST_INFO: root::_bindgen_ty_2 = 4336;
    pub const SFC_SET_BROADCAST_INFO: root::_bindgen_ty_2 = 4337;
    pub const SFC_GET_CHANNEL_MAP_INFO: root::_bindgen_ty_2 = 4352;
    pub const SFC_SET_CHANNEL_MAP_INFO: root::_bindgen_ty_2 = 4353;
    pub const SFC_RAW_DATA_NEEDS_ENDSWAP: root::_bindgen_ty_2 = 4368;
    pub const SFC_WAVEX_SET_AMBISONIC: root::_bindgen_ty_2 = 4608;
    pub const SFC_WAVEX_GET_AMBISONIC: root::_bindgen_ty_2 = 4609;
    pub const SFC_RF64_AUTO_DOWNGRADE: root::_bindgen_ty_2 = 4624;
    pub const SFC_SET_VBR_ENCODING_QUALITY: root::_bindgen_ty_2 = 4864;
    pub const SFC_SET_COMPRESSION_LEVEL: root::_bindgen_ty_2 = 4865;
    pub const SFC_SET_CART_INFO: root::_bindgen_ty_2 = 5120;
    pub const SFC_GET_CART_INFO: root::_bindgen_ty_2 = 5121;
    pub const SFC_TEST_IEEE_FLOAT_REPLACE: root::_bindgen_ty_2 = 24577;
    pub const SFC_SET_ADD_HEADER_PAD_CHUNK: root::_bindgen_ty_2 = 4177;
    pub const SFC_SET_ADD_DITHER_ON_WRITE: root::_bindgen_ty_2 = 4208;
    pub const SFC_SET_ADD_DITHER_ON_READ: root::_bindgen_ty_2 = 4209;
    pub type _bindgen_ty_2 = u32;
    pub const SF_STR_TITLE: root::_bindgen_ty_3 = 1;
    pub const SF_STR_COPYRIGHT: root::_bindgen_ty_3 = 2;
    pub const SF_STR_SOFTWARE: root::_bindgen_ty_3 = 3;
    pub const SF_STR_ARTIST: root::_bindgen_ty_3 = 4;
    pub const SF_STR_COMMENT: root::_bindgen_ty_3 = 5;
    pub const SF_STR_DATE: root::_bindgen_ty_3 = 6;
    pub const SF_STR_ALBUM: root::_bindgen_ty_3 = 7;
    pub const SF_STR_LICENSE: root::_bindgen_ty_3 = 8;
    pub const SF_STR_TRACKNUMBER: root::_bindgen_ty_3 = 9;
    pub const SF_STR_GENRE: root::_bindgen_ty_3 = 16;
    pub type _bindgen_ty_3 = u32;
    pub const SF_FALSE: root::_bindgen_ty_4 = 0;
    pub const SF_TRUE: root::_bindgen_ty_4 = 1;
    pub const SFM_READ: root::_bindgen_ty_4 = 16;
    pub const SFM_WRITE: root::_bindgen_ty_4 = 32;
    pub const SFM_RDWR: root::_bindgen_ty_4 = 48;
    pub const SF_AMBISONIC_NONE: root::_bindgen_ty_4 = 64;
    pub const SF_AMBISONIC_B_FORMAT: root::_bindgen_ty_4 = 65;
    pub type _bindgen_ty_4 = u32;
    pub const SF_ERR_NO_ERROR: root::_bindgen_ty_5 = 0;
    pub const SF_ERR_UNRECOGNISED_FORMAT: root::_bindgen_ty_5 = 1;
    pub const SF_ERR_SYSTEM: root::_bindgen_ty_5 = 2;
    pub const SF_ERR_MALFORMED_FILE: root::_bindgen_ty_5 = 3;
    pub const SF_ERR_UNSUPPORTED_ENCODING: root::_bindgen_ty_5 = 4;
    pub type _bindgen_ty_5 = u32;
    pub const SF_CHANNEL_MAP_INVALID: root::_bindgen_ty_6 = 0;
    pub const SF_CHANNEL_MAP_MONO: root::_bindgen_ty_6 = 1;
    pub const SF_CHANNEL_MAP_LEFT: root::_bindgen_ty_6 = 2;
    pub const SF_CHANNEL_MAP_RIGHT: root::_bindgen_ty_6 = 3;
    pub const SF_CHANNEL_MAP_CENTER: root::_bindgen_ty_6 = 4;
    pub const SF_CHANNEL_MAP_FRONT_LEFT: root::_bindgen_ty_6 = 5;
    pub const SF_CHANNEL_MAP_FRONT_RIGHT: root::_bindgen_ty_6 = 6;
    pub const SF_CHANNEL_MAP_FRONT_CENTER: root::_bindgen_ty_6 = 7;
    pub const SF_CHANNEL_MAP_REAR_CENTER: root::_bindgen_ty_6 = 8;
    pub const SF_CHANNEL_MAP_REAR_LEFT: root::_bindgen_ty_6 = 9;
    pub const SF_CHANNEL_MAP_REAR_RIGHT: root::_bindgen_ty_6 = 10;
    pub const SF_CHANNEL_MAP_LFE: root::_bindgen_ty_6 = 11;
    pub const SF_CHANNEL_MAP_FRONT_LEFT_OF_CENTER: root::_bindgen_ty_6 = 12;
    pub const SF_CHANNEL_MAP_FRONT_RIGHT_OF_CENTER: root::_bindgen_ty_6 = 13;
    pub const SF_CHANNEL_MAP_SIDE_LEFT: root::_bindgen_ty_6 = 14;
    pub const SF_CHANNEL_MAP_SIDE_RIGHT: root::_bindgen_ty_6 = 15;
    pub const SF_CHANNEL_MAP_TOP_CENTER: root::_bindgen_ty_6 = 16;
    pub const SF_CHANNEL_MAP_TOP_FRONT_LEFT: root::_bindgen_ty_6 = 17;
    pub const SF_CHANNEL_MAP_TOP_FRONT_RIGHT: root::_bindgen_ty_6 = 18;
    pub const SF_CHANNEL_MAP_TOP_FRONT_CENTER: root::_bindgen_ty_6 = 19;
    pub const SF_CHANNEL_MAP_TOP_REAR_LEFT: root::_bindgen_ty_6 = 20;
    pub const SF_CHANNEL_MAP_TOP_REAR_RIGHT: root::_bindgen_ty_6 = 21;
    pub const SF_CHANNEL_MAP_TOP_REAR_CENTER: root::_bindgen_ty_6 = 22;
    pub const SF_CHANNEL_MAP_AMBISONIC_B_W: root::_bindgen_ty_6 = 23;
    pub const SF_CHANNEL_MAP_AMBISONIC_B_X: root::_bindgen_ty_6 = 24;
    pub const SF_CHANNEL_MAP_AMBISONIC_B_Y: root::_bindgen_ty_6 = 25;
    pub const SF_CHANNEL_MAP_AMBISONIC_B_Z: root::_bindgen_ty_6 = 26;
    pub const SF_CHANNEL_MAP_MAX: root::_bindgen_ty_6 = 27;
    pub type _bindgen_ty_6 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SNDFILE_tag {
        _unused: [u8; 0],
    }
    pub type SNDFILE = root::SNDFILE_tag;
    pub type sf_count_t = i64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_INFO {
        pub frames: root::sf_count_t,
        pub samplerate: ::std::os::raw::c_int,
        pub channels: ::std::os::raw::c_int,
        pub format: ::std::os::raw::c_int,
        pub sections: ::std::os::raw::c_int,
        pub seekable: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_FORMAT_INFO {
        pub format: ::std::os::raw::c_int,
        pub name: *const ::std::os::raw::c_char,
        pub extension: *const ::std::os::raw::c_char,
    }
    pub const SFD_DEFAULT_LEVEL: root::_bindgen_ty_7 = 0;
    pub const SFD_CUSTOM_LEVEL: root::_bindgen_ty_7 = 1073741824;
    pub const SFD_NO_DITHER: root::_bindgen_ty_7 = 500;
    pub const SFD_WHITE: root::_bindgen_ty_7 = 501;
    pub const SFD_TRIANGULAR_PDF: root::_bindgen_ty_7 = 502;
    pub type _bindgen_ty_7 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_DITHER_INFO {
        pub type_: ::std::os::raw::c_int,
        pub level: f64,
        pub name: *const ::std::os::raw::c_char,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_EMBED_FILE_INFO {
        pub offset: root::sf_count_t,
        pub length: root::sf_count_t,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_CUE_POINT {
        pub indx: i32,
        pub position: u32,
        pub fcc_chunk: i32,
        pub chunk_start: i32,
        pub block_start: i32,
        pub sample_offset: u32,
        pub name: [::std::os::raw::c_char; 256usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_CUES {
        pub cue_count: u32,
        pub cue_points: [root::SF_CUE_POINT; 100usize],
    }
    pub const SF_LOOP_NONE: root::_bindgen_ty_8 = 800;
    pub const SF_LOOP_FORWARD: root::_bindgen_ty_8 = 801;
    pub const SF_LOOP_BACKWARD: root::_bindgen_ty_8 = 802;
    pub const SF_LOOP_ALTERNATING: root::_bindgen_ty_8 = 803;
    pub type _bindgen_ty_8 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_INSTRUMENT {
        pub gain: ::std::os::raw::c_int,
        pub basenote: ::std::os::raw::c_char,
        pub detune: ::std::os::raw::c_char,
        pub velocity_lo: ::std::os::raw::c_char,
        pub velocity_hi: ::std::os::raw::c_char,
        pub key_lo: ::std::os::raw::c_char,
        pub key_hi: ::std::os::raw::c_char,
        pub loop_count: ::std::os::raw::c_int,
        pub loops: [root::SF_INSTRUMENT__bindgen_ty_1; 16usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_INSTRUMENT__bindgen_ty_1 {
        pub mode: ::std::os::raw::c_int,
        pub start: u32,
        pub end: u32,
        pub count: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_LOOP_INFO {
        pub time_sig_num: ::std::os::raw::c_short,
        pub time_sig_den: ::std::os::raw::c_short,
        pub loop_mode: ::std::os::raw::c_int,
        pub num_beats: ::std::os::raw::c_int,
        pub bpm: f32,
        pub root_key: ::std::os::raw::c_int,
        pub future: [::std::os::raw::c_int; 6usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_BROADCAST_INFO {
        pub description: [::std::os::raw::c_char; 256usize],
        pub originator: [::std::os::raw::c_char; 32usize],
        pub originator_reference: [::std::os::raw::c_char; 32usize],
        pub origination_date: [::std::os::raw::c_char; 10usize],
        pub origination_time: [::std::os::raw::c_char; 8usize],
        pub time_reference_low: u32,
        pub time_reference_high: u32,
        pub version: ::std::os::raw::c_short,
        pub umid: [::std::os::raw::c_char; 64usize],
        pub reserved: [::std::os::raw::c_char; 190usize],
        pub coding_history_size: u32,
        pub coding_history: [::std::os::raw::c_char; 256usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_CART_TIMER {
        pub usage: [::std::os::raw::c_char; 4usize],
        pub value: i32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_CART_INFO {
        pub version: [::std::os::raw::c_char; 4usize],
        pub title: [::std::os::raw::c_char; 64usize],
        pub artist: [::std::os::raw::c_char; 64usize],
        pub cut_id: [::std::os::raw::c_char; 64usize],
        pub client_id: [::std::os::raw::c_char; 64usize],
        pub category: [::std::os::raw::c_char; 64usize],
        pub classification: [::std::os::raw::c_char; 64usize],
        pub out_cue: [::std::os::raw::c_char; 64usize],
        pub start_date: [::std::os::raw::c_char; 10usize],
        pub start_time: [::std::os::raw::c_char; 8usize],
        pub end_date: [::std::os::raw::c_char; 10usize],
        pub end_time: [::std::os::raw::c_char; 8usize],
        pub producer_app_id: [::std::os::raw::c_char; 64usize],
        pub producer_app_version: [::std::os::raw::c_char; 64usize],
        pub user_def: [::std::os::raw::c_char; 64usize],
        pub level_reference: i32,
        pub post_timers: [root::SF_CART_TIMER; 8usize],
        pub reserved: [::std::os::raw::c_char; 276usize],
        pub url: [::std::os::raw::c_char; 1024usize],
        pub tag_text_size: u32,
        pub tag_text: [::std::os::raw::c_char; 256usize],
    }
    pub type sf_vio_get_filelen = ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> root::sf_count_t,
    >;
    pub type sf_vio_seek = ::std::option::Option<
        unsafe extern "C" fn(
            offset: root::sf_count_t,
            whence: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ) -> root::sf_count_t,
    >;
    pub type sf_vio_read = ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            count: root::sf_count_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> root::sf_count_t,
    >;
    pub type sf_vio_write = ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const ::std::os::raw::c_void,
            count: root::sf_count_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> root::sf_count_t,
    >;
    pub type sf_vio_tell = ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> root::sf_count_t,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_VIRTUAL_IO {
        pub get_filelen: root::sf_vio_get_filelen,
        pub seek: root::sf_vio_seek,
        pub read: root::sf_vio_read,
        pub write: root::sf_vio_write,
        pub tell: root::sf_vio_tell,
    }
    extern "C" {
        pub fn sf_open(
            path: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
            sfinfo: *mut root::SF_INFO,
        ) -> *mut root::SNDFILE;
    }
    extern "C" {
        pub fn sf_open_fd(
            fd: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
            sfinfo: *mut root::SF_INFO,
            close_desc: ::std::os::raw::c_int,
        ) -> *mut root::SNDFILE;
    }
    extern "C" {
        pub fn sf_open_virtual(
            sfvirtual: *mut root::SF_VIRTUAL_IO,
            mode: ::std::os::raw::c_int,
            sfinfo: *mut root::SF_INFO,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut root::SNDFILE;
    }
    extern "C" {
        pub fn sf_error(sndfile: *mut root::SNDFILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_strerror(sndfile: *mut root::SNDFILE) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn sf_error_number(errnum: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn sf_perror(sndfile: *mut root::SNDFILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_error_str(
            sndfile: *mut root::SNDFILE,
            str: *mut ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_command(
            sndfile: *mut root::SNDFILE,
            command: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            datasize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_format_check(info: *const root::SF_INFO) -> ::std::os::raw::c_int;
    }
    pub const SF_SEEK_SET: root::_bindgen_ty_9 = 0;
    pub const SF_SEEK_CUR: root::_bindgen_ty_9 = 1;
    pub const SF_SEEK_END: root::_bindgen_ty_9 = 2;
    pub type _bindgen_ty_9 = u32;
    extern "C" {
        pub fn sf_seek(
            sndfile: *mut root::SNDFILE,
            frames: root::sf_count_t,
            whence: ::std::os::raw::c_int,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_set_string(
            sndfile: *mut root::SNDFILE,
            str_type: ::std::os::raw::c_int,
            str: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_get_string(
            sndfile: *mut root::SNDFILE,
            str_type: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn sf_version_string() -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn sf_current_byterate(sndfile: *mut root::SNDFILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_read_raw(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_void,
            bytes: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_raw(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_void,
            bytes: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_readf_short(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_short,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_writef_short(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_short,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_readf_int(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_int,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_writef_int(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_int,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_readf_float(
            sndfile: *mut root::SNDFILE,
            ptr: *mut f32,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_writef_float(
            sndfile: *mut root::SNDFILE,
            ptr: *const f32,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_readf_double(
            sndfile: *mut root::SNDFILE,
            ptr: *mut f64,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_writef_double(
            sndfile: *mut root::SNDFILE,
            ptr: *const f64,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_read_short(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_short,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_short(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_short,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_read_int(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_int,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_int(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_int,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_read_float(
            sndfile: *mut root::SNDFILE,
            ptr: *mut f32,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_float(
            sndfile: *mut root::SNDFILE,
            ptr: *const f32,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_read_double(
            sndfile: *mut root::SNDFILE,
            ptr: *mut f64,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_double(
            sndfile: *mut root::SNDFILE,
            ptr: *const f64,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_close(sndfile: *mut root::SNDFILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_write_sync(sndfile: *mut root::SNDFILE);
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_CHUNK_INFO {
        pub id: [::std::os::raw::c_char; 64usize],
        pub id_size: ::std::os::raw::c_uint,
        pub datalen: ::std::os::raw::c_uint,
        pub data: *mut ::std::os::raw::c_void,
    }
    extern "C" {
        pub fn sf_set_chunk(
            sndfile: *mut root::SNDFILE,
            chunk_info: *const root::SF_CHUNK_INFO,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_CHUNK_ITERATOR {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn sf_get_chunk_iterator(
            sndfile: *mut root::SNDFILE,
            chunk_info: *const root::SF_CHUNK_INFO,
        ) -> *mut root::SF_CHUNK_ITERATOR;
    }
    extern "C" {
        pub fn sf_next_chunk_iterator(
            iterator: *mut root::SF_CHUNK_ITERATOR,
        ) -> *mut root::SF_CHUNK_ITERATOR;
    }
    extern "C" {
        pub fn sf_get_chunk_size(
            it: *const root::SF_CHUNK_ITERATOR,
            chunk_info: *mut root::SF_CHUNK_INFO,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_get_chunk_data(
            it: *const root::SF_CHUNK_ITERATOR,
            chunk_info: *mut root::SF_CHUNK_INFO,
        ) -> ::std::os::raw::c_int;
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
}
