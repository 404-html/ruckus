/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        storage: Storage,
        align: [Align; 0],
    }
    impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn new(storage: Storage) -> Self {
            Self { storage, align: [] }
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::std::mem::transmute(self)
        }
    }
    impl<T> ::std::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
    
    
    pub const _GLIBCXX_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 8;
    pub const __GLIBCXX__: u32 = 20180831;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
    pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
    pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
    pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
    pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
    pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
    pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
    pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
    pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
    pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
    pub const STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_HOSTED: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INT128: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
    pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
    pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
    pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const _MEMORY_H: u32 = 1;
    pub const _STRING_H: u32 = 1;
    pub const _STRINGS_H: u32 = 1;
    pub const _ASSERT_H: u32 = 1;
    pub const sz_VOID: u32 = 0;
    pub const sz_WORD: u32 = 4;
    pub const kindof_VOID: u32 = 0;
    pub const kindof_INT: u32 = 1;
    pub const kindof_FLOAT: u32 = 2;
    pub const kindof_COMPLEX: u32 = 3;
    pub const kindof_VEC3: u32 = 4;
    pub const kindof_VEC4: u32 = 5;
    pub const SILENCE: f64 = 0.0;
    pub const TRUE: u32 = 1;
    pub const FALSE: u32 = 0;
    pub const ONE_PI: f64 = 3.141592653589793;
    pub const TWO_PI: f64 = 6.283185307179586;
    pub const SQRT2: f64 = 1.4142135623730951;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const __cookie_io_functions_t_defined: u32 = 1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const RENAME_NOREPLACE: u32 = 1;
    pub const RENAME_EXCHANGE: u32 = 2;
    pub const RENAME_WHITEOUT: u32 = 4;
    pub const _BITS_STDIO_H: u32 = 1;
    pub const _PTHREAD_H: u32 = 1;
    pub const _SCHED_H: u32 = 1;
    pub const _BITS_SCHED_H: u32 = 1;
    pub const SCHED_OTHER: u32 = 0;
    pub const SCHED_FIFO: u32 = 1;
    pub const SCHED_RR: u32 = 2;
    pub const SCHED_BATCH: u32 = 3;
    pub const SCHED_ISO: u32 = 4;
    pub const SCHED_IDLE: u32 = 5;
    pub const SCHED_DEADLINE: u32 = 6;
    pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
    pub const CSIGNAL: u32 = 255;
    pub const CLONE_VM: u32 = 256;
    pub const CLONE_FS: u32 = 512;
    pub const CLONE_FILES: u32 = 1024;
    pub const CLONE_SIGHAND: u32 = 2048;
    pub const CLONE_PTRACE: u32 = 8192;
    pub const CLONE_VFORK: u32 = 16384;
    pub const CLONE_PARENT: u32 = 32768;
    pub const CLONE_THREAD: u32 = 65536;
    pub const CLONE_NEWNS: u32 = 131072;
    pub const CLONE_SYSVSEM: u32 = 262144;
    pub const CLONE_SETTLS: u32 = 524288;
    pub const CLONE_PARENT_SETTID: u32 = 1048576;
    pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
    pub const CLONE_DETACHED: u32 = 4194304;
    pub const CLONE_UNTRACED: u32 = 8388608;
    pub const CLONE_CHILD_SETTID: u32 = 16777216;
    pub const CLONE_NEWCGROUP: u32 = 33554432;
    pub const CLONE_NEWUTS: u32 = 67108864;
    pub const CLONE_NEWIPC: u32 = 134217728;
    pub const CLONE_NEWUSER: u32 = 268435456;
    pub const CLONE_NEWPID: u32 = 536870912;
    pub const CLONE_NEWNET: u32 = 1073741824;
    pub const CLONE_IO: u32 = 2147483648;
    pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
    pub const _BITS_CPU_SET_H: u32 = 1;
    pub const __CPU_SETSIZE: u32 = 1024;
    pub const CPU_SETSIZE: u32 = 1024;
    pub const _TIME_H: u32 = 1;
    pub const _BITS_TIME_H: u32 = 1;
    pub const CLOCK_REALTIME: u32 = 0;
    pub const CLOCK_MONOTONIC: u32 = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const CLOCK_REALTIME_COARSE: u32 = 5;
    pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const CLOCK_BOOTTIME: u32 = 7;
    pub const CLOCK_REALTIME_ALARM: u32 = 8;
    pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const CLOCK_TAI: u32 = 11;
    pub const TIMER_ABSTIME: u32 = 1;
    pub const _BITS_TIMEX_H: u32 = 1;
    pub const ADJ_OFFSET: u32 = 1;
    pub const ADJ_FREQUENCY: u32 = 2;
    pub const ADJ_MAXERROR: u32 = 4;
    pub const ADJ_ESTERROR: u32 = 8;
    pub const ADJ_STATUS: u32 = 16;
    pub const ADJ_TIMECONST: u32 = 32;
    pub const ADJ_TAI: u32 = 128;
    pub const ADJ_SETOFFSET: u32 = 256;
    pub const ADJ_MICRO: u32 = 4096;
    pub const ADJ_NANO: u32 = 8192;
    pub const ADJ_TICK: u32 = 16384;
    pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const MOD_OFFSET: u32 = 1;
    pub const MOD_FREQUENCY: u32 = 2;
    pub const MOD_MAXERROR: u32 = 4;
    pub const MOD_ESTERROR: u32 = 8;
    pub const MOD_STATUS: u32 = 16;
    pub const MOD_TIMECONST: u32 = 32;
    pub const MOD_CLKB: u32 = 16384;
    pub const MOD_CLKA: u32 = 32769;
    pub const MOD_TAI: u32 = 128;
    pub const MOD_MICRO: u32 = 4096;
    pub const MOD_NANO: u32 = 8192;
    pub const STA_PLL: u32 = 1;
    pub const STA_PPSFREQ: u32 = 2;
    pub const STA_PPSTIME: u32 = 4;
    pub const STA_FLL: u32 = 8;
    pub const STA_INS: u32 = 16;
    pub const STA_DEL: u32 = 32;
    pub const STA_UNSYNC: u32 = 64;
    pub const STA_FREQHOLD: u32 = 128;
    pub const STA_PPSSIGNAL: u32 = 256;
    pub const STA_PPSJITTER: u32 = 512;
    pub const STA_PPSWANDER: u32 = 1024;
    pub const STA_PPSERROR: u32 = 2048;
    pub const STA_CLOCKERR: u32 = 4096;
    pub const STA_NANO: u32 = 8192;
    pub const STA_MODE: u32 = 16384;
    pub const STA_CLK: u32 = 32768;
    pub const STA_RONLY: u32 = 65280;
    pub const __struct_tm_defined: u32 = 1;
    pub const __itimerspec_defined: u32 = 1;
    pub const TIME_UTC: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const PTHREAD_ONCE_INIT: u32 = 0;
    pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
    pub const _GLIBCXX_MAP: u32 = 1;
    pub const _STL_TREE_H: u32 = 1;
    pub const _STL_ALGOBASE_H: u32 = 1;
    pub const _FUNCTEXCEPT_H: u32 = 1;
    pub const _EXCEPTION_DEFINES_H: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _EXT_NUMERIC_TRAITS: u32 = 1;
    pub const _STL_PAIR_H: u32 = 1;
    pub const _MOVE_H: u32 = 1;
    pub const _CONCEPT_CHECK_H: u32 = 1;
    pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
    pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
    pub const _STL_ITERATOR_H: u32 = 1;
    pub const _PTR_TRAITS_H: u32 = 1;
    pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
    pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
    pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
    pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const _ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
    pub const _NEW_ALLOCATOR_H: u32 = 1;
    pub const __EXCEPTION_H: u32 = 1;
    pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
    pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
    pub const _HASH_BYTES_H: u32 = 1;
    pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
    pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
    pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
    pub const _MEMORYFWD_H: u32 = 1;
    pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
    pub const __cpp_lib_allocator_is_always_equal: u32 = 201411;
    pub const _STL_FUNCTION_H: u32 = 1;
    pub const __cpp_lib_transparent_operators: u32 = 201510;
    pub const _BACKWARD_BINDERS_H: u32 = 1;
    pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
    pub const _ALLOC_TRAITS_H: u32 = 1;
    pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
    pub const _ALIGNED_BUFFER_H: u32 = 1;
    pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
    pub const _STL_MAP_H: u32 = 1;
    pub const _GLIBCXX_TUPLE: u32 = 1;
    pub const _GLIBCXX_UTILITY: u32 = 1;
    pub const _STL_RELOPS_H: u32 = 1;
    pub const __cpp_lib_tuple_element_t: u32 = 201402;
    pub const __cpp_lib_tuples_by_type: u32 = 201304;
    pub const __cpp_lib_exchange_function: u32 = 201304;
    pub const _GLIBCXX_USE_MAKE_INTEGER_SEQ: u32 = 1;
    pub const __cpp_lib_integer_sequence: u32 = 201304;
    pub const _GLIBCXX_ARRAY: u32 = 1;
    pub const _GLIBCXX_STDEXCEPT: u32 = 1;
    pub const _GLIBCXX_STRING: u32 = 1;
    pub const _STRINGFWD_H: u32 = 1;
    pub const _CHAR_TRAITS_H: u32 = 1;
    pub const _GLIBCXX_POSTYPES_H: u32 = 1;
    pub const _WCHAR_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const __wint_t_defined: u32 = 1;
    pub const _WINT_T: u32 = 1;
    pub const __mbstate_t_defined: u32 = 1;
    pub const WEOF: u32 = 4294967295;
    pub const _GLIBCXX_CWCHAR: u32 = 1;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _LOCALE_FWD_H: u32 = 1;
    pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
    pub const _LOCALE_H: u32 = 1;
    pub const _BITS_LOCALE_H: u32 = 1;
    pub const __LC_CTYPE: u32 = 0;
    pub const __LC_NUMERIC: u32 = 1;
    pub const __LC_TIME: u32 = 2;
    pub const __LC_COLLATE: u32 = 3;
    pub const __LC_MONETARY: u32 = 4;
    pub const __LC_MESSAGES: u32 = 5;
    pub const __LC_ALL: u32 = 6;
    pub const __LC_PAPER: u32 = 7;
    pub const __LC_NAME: u32 = 8;
    pub const __LC_ADDRESS: u32 = 9;
    pub const __LC_TELEPHONE: u32 = 10;
    pub const __LC_MEASUREMENT: u32 = 11;
    pub const __LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE: u32 = 0;
    pub const LC_NUMERIC: u32 = 1;
    pub const LC_TIME: u32 = 2;
    pub const LC_COLLATE: u32 = 3;
    pub const LC_MONETARY: u32 = 4;
    pub const LC_MESSAGES: u32 = 5;
    pub const LC_ALL: u32 = 6;
    pub const LC_PAPER: u32 = 7;
    pub const LC_NAME: u32 = 8;
    pub const LC_ADDRESS: u32 = 9;
    pub const LC_TELEPHONE: u32 = 10;
    pub const LC_MEASUREMENT: u32 = 11;
    pub const LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE_MASK: u32 = 1;
    pub const LC_NUMERIC_MASK: u32 = 2;
    pub const LC_TIME_MASK: u32 = 4;
    pub const LC_COLLATE_MASK: u32 = 8;
    pub const LC_MONETARY_MASK: u32 = 16;
    pub const LC_MESSAGES_MASK: u32 = 32;
    pub const LC_PAPER_MASK: u32 = 128;
    pub const LC_NAME_MASK: u32 = 256;
    pub const LC_ADDRESS_MASK: u32 = 512;
    pub const LC_TELEPHONE_MASK: u32 = 1024;
    pub const LC_MEASUREMENT_MASK: u32 = 2048;
    pub const LC_IDENTIFICATION_MASK: u32 = 4096;
    pub const LC_ALL_MASK: u32 = 8127;
    pub const _GLIBCXX_CLOCALE: u32 = 1;
    pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
    pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
    pub const _GLIBCXX_IOSFWD: u32 = 1;
    pub const _CTYPE_H: u32 = 1;
    pub const _GLIBCXX_CCTYPE: u32 = 1;
    pub const _OSTREAM_INSERT_H: u32 = 1;
    pub const _CXXABI_FORCED_H: u32 = 1;
    pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
    pub const _BASIC_STRING_H: u32 = 1;
    pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 1;
    pub const __GTHREADS: u32 = 1;
    pub const __GTHREADS_CXX0X: u32 = 1;
    pub const __GTHREAD_HAS_COND: u32 = 1;
    pub const __GTHREAD_ONCE_INIT: u32 = 0;
    pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
    pub const _STRING_CONVERSIONS_H: u32 = 1;
    pub const _GLIBCXX_CSTDIO: u32 = 1;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const _FUNCTIONAL_HASH_H: u32 = 1;
    pub const __cpp_lib_string_udls: u32 = 201304;
    pub const _BASIC_STRING_TCC: u32 = 1;
    pub const _USES_ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_INVOKE_H: u32 = 1;
    pub const _STL_MULTIMAP_H: u32 = 1;
    pub const _GLIBCXX_VECTOR: u32 = 1;
    pub const _STL_CONSTRUCT_H: u32 = 1;
    pub const _STL_UNINITIALIZED_H: u32 = 1;
    pub const _STL_VECTOR_H: u32 = 1;
    pub const _STL_BVECTOR_H: u32 = 1;
    pub const _VECTOR_TCC: u32 = 1;
    pub const _GLIBCXX_QUEUE: u32 = 1;
    pub const _GLIBCXX_DEQUE: u32 = 1;
    pub const _STL_DEQUE_H: u32 = 1;
    pub const _GLIBCXX_DEQUE_BUF_SIZE: u32 = 512;
    pub const _DEQUE_TCC: u32 = 1;
    pub const _STL_HEAP_H: u32 = 1;
    pub const _STL_QUEUE_H: u32 = 1;
    pub const _GLIBCXX_FSTREAM: u32 = 1;
    pub const _GLIBCXX_ISTREAM: u32 = 1;
    pub const _GLIBCXX_IOS: u32 = 1;
    pub const _IOS_BASE_H: u32 = 1;
    pub const _LOCALE_CLASSES_H: u32 = 1;
    pub const _LOCALE_CLASSES_TCC: u32 = 1;
    pub const _GLIBCXX_SYSTEM_ERROR: u32 = 1;
    pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
    pub const _GLIBXX_STREAMBUF: u32 = 1;
    pub const _STREAMBUF_TCC: u32 = 1;
    pub const _BASIC_IOS_H: u32 = 1;
    pub const _LOCALE_FACETS_H: u32 = 1;
    pub const _WCTYPE_H: u32 = 1;
    pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_CWCTYPE: u32 = 1;
    pub const _STREAMBUF_ITERATOR_H: u32 = 1;
    pub const _GLIBCXX_NUM_FACETS: u32 = 28;
    pub const _GLIBCXX_NUM_CXX11_FACETS: u32 = 16;
    pub const _GLIBCXX_NUM_UNICODE_FACETS: u32 = 2;
    pub const _LOCALE_FACETS_TCC: u32 = 1;
    pub const _BASIC_IOS_TCC: u32 = 1;
    pub const _GLIBCXX_OSTREAM: u32 = 1;
    pub const _OSTREAM_TCC: u32 = 1;
    pub const _ISTREAM_TCC: u32 = 1;
    pub const _CODECVT_H: u32 = 1;
    pub const _GLIBCXX_BASIC_FILE_STDIO_H: u32 = 1;
    pub const _GLIBCXX_CXX_IO_H: u32 = 1;
    pub const _FSTREAM_TCC: u32 = 1;
    pub const _GLIBCXX_SSTREAM: u32 = 1;
    pub const _SSTREAM_TCC: u32 = 1;
    pub const _DIRENT_H: u32 = 1;
    pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
    pub const _BITS_POSIX1_LIM_H: u32 = 1;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_FD_SETSIZE: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX_QLIMIT: u32 = 1;
    pub const _POSIX_HIWAT: u32 = 512;
    pub const _POSIX_UIO_MAXIOV: u32 = 16;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const NR_OPEN: u32 = 1024;
    pub const NGROUPS_MAX: u32 = 65536;
    pub const ARG_MAX: u32 = 131072;
    pub const LINK_MAX: u32 = 127;
    pub const MAX_CANON: u32 = 255;
    pub const MAX_INPUT: u32 = 255;
    pub const NAME_MAX: u32 = 255;
    pub const PATH_MAX: u32 = 4096;
    pub const PIPE_BUF: u32 = 4096;
    pub const XATTR_NAME_MAX: u32 = 255;
    pub const XATTR_SIZE_MAX: u32 = 65536;
    pub const XATTR_LIST_MAX: u32 = 65536;
    pub const RTSIG_MAX: u32 = 32;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const PTHREAD_KEYS_MAX: u32 = 1024;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const AIO_PRIO_DELTA_MAX: u32 = 20;
    pub const PTHREAD_STACK_MIN: u32 = 16384;
    pub const DELAYTIMER_MAX: u32 = 2147483647;
    pub const TTY_NAME_MAX: u32 = 32;
    pub const LOGIN_NAME_MAX: u32 = 256;
    pub const HOST_NAME_MAX: u32 = 64;
    pub const MQ_PRIO_MAX: u32 = 32768;
    pub const SEM_VALUE_MAX: u32 = 2147483647;
    pub const MAXNAMLEN: u32 = 255;
    pub const CHUCK_ARRAY4_DATAKIND: u32 = 1;
    pub const CHUCK_ARRAY8_DATAKIND: u32 = 2;
    pub const CHUCK_ARRAY16_DATAKIND: u32 = 3;
    pub const CHUCK_ARRAY24_DATAKIND: u32 = 4;
    pub const CHUCK_ARRAY32_DATAKIND: u32 = 5;
    pub const CK_DLL_VERSION_MAJOR: u32 = 7;
    pub const CK_DLL_VERSION_MINOR: u32 = 0;
    pub const CK_QUERY_FUNC: &'static [u8; 9usize] = b"ck_query\0";
    pub const CK_DECLVERSION_FUNC: &'static [u8; 11usize] = b"ck_version\0";
    pub const CK_INVALID_OFFSET: u32 = 4294967295;
    pub const _DLFCN_H: u32 = 1;
    pub const RTLD_LAZY: u32 = 1;
    pub const RTLD_NOW: u32 = 2;
    pub const RTLD_BINDING_MASK: u32 = 3;
    pub const RTLD_NOLOAD: u32 = 4;
    pub const RTLD_DEEPBIND: u32 = 8;
    pub const RTLD_GLOBAL: u32 = 256;
    pub const RTLD_LOCAL: u32 = 0;
    pub const RTLD_NODELETE: u32 = 4096;
    pub const LM_ID_BASE: u32 = 0;
    pub const LM_ID_NEWLM: i32 = -1;
    pub const RT_BUFFER_SIZE: u32 = 512;
    pub const RAWWAVE_PATH: &'static [u8; 16usize] = b"../../rawwaves/\0";
    pub const _GLIBCXX_IOSTREAM: u32 = 1;
    pub const MAX_BANDED_MODES: u32 = 20;
    pub const CHUNK_THRESHOLD: u32 = 5000000;
    pub const CHUNK_SIZE: u32 = 1024;
    pub const DRUM_NUMWAVES: u32 = 11;
    pub const DRUM_POLYPHONY: u32 = 4;
    pub const MAX_FREQS: u32 = 8;
    pub const NUM_INSTR: u32 = 24;
    pub const BUFFER_SIZE: u32 = 1024;
    pub const NOPE: i32 = -32767;
    pub const YEP: u32 = 1;
    pub const SK_DBL: i32 = -32766;
    pub const SK_INT: i32 = -32765;
    pub const SK_STR: i32 = -32764;
    pub const __SK_NoteOff_: u32 = 128;
    pub const __SK_NoteOn_: u32 = 144;
    pub const __SK_PolyPressure_: u32 = 160;
    pub const __SK_ControlChange_: u32 = 176;
    pub const __SK_ProgramChange_: u32 = 192;
    pub const __SK_AfterTouch_: u32 = 208;
    pub const __SK_ChannelPressure_: u32 = 208;
    pub const __SK_PitchWheel_: u32 = 224;
    pub const __SK_PitchBend_: u32 = 224;
    pub const __SK_PitchChange_: u32 = 49;
    pub const __SK_Clock_: u32 = 248;
    pub const __SK_SongStart_: u32 = 250;
    pub const __SK_Continue_: u32 = 251;
    pub const __SK_SongStop_: u32 = 252;
    pub const __SK_ActiveSensing_: u32 = 254;
    pub const __SK_SystemReset_: u32 = 255;
    pub const __SK_Volume_: u32 = 7;
    pub const __SK_ModWheel_: u32 = 1;
    pub const __SK_Modulation_: u32 = 1;
    pub const __SK_Breath_: u32 = 2;
    pub const __SK_FootControl_: u32 = 4;
    pub const __SK_Portamento_: u32 = 65;
    pub const __SK_Balance_: u32 = 8;
    pub const __SK_Pan_: u32 = 10;
    pub const __SK_Sustain_: u32 = 64;
    pub const __SK_Damper_: u32 = 64;
    pub const __SK_Expression_: u32 = 11;
    pub const __SK_AfterTouch_Cont_: u32 = 128;
    pub const __SK_ModFrequency_: u32 = 11;
    pub const __SK_ProphesyRibbon_: u32 = 16;
    pub const __SK_ProphesyWheelUp_: u32 = 2;
    pub const __SK_ProphesyWheelDown_: u32 = 3;
    pub const __SK_ProphesyPedal_: u32 = 18;
    pub const __SK_ProphesyKnob1_: u32 = 21;
    pub const __SK_ProphesyKnob2_: u32 = 22;
    pub const __SK_NoiseLevel_: u32 = 4;
    pub const __SK_PickPosition_: u32 = 4;
    pub const __SK_StringDamping_: u32 = 11;
    pub const __SK_StringDetune_: u32 = 1;
    pub const __SK_BodySize_: u32 = 2;
    pub const __SK_BowPressure_: u32 = 2;
    pub const __SK_BowPosition_: u32 = 4;
    pub const __SK_BowBeta_: u32 = 4;
    pub const __SK_ReedStiffness_: u32 = 2;
    pub const __SK_ReedRestPos_: u32 = 4;
    pub const __SK_FluteEmbouchure_: u32 = 2;
    pub const __SK_JetDelay_: u32 = 2;
    pub const __SK_LipTension_: u32 = 2;
    pub const __SK_SlideLength_: u32 = 4;
    pub const __SK_StrikePosition_: u32 = 4;
    pub const __SK_StickHardness_: u32 = 2;
    pub const __SK_TrillDepth_: u32 = 1051;
    pub const __SK_TrillSpeed_: u32 = 1052;
    pub const __SK_StrumSpeed_: u32 = 1052;
    pub const __SK_RollSpeed_: u32 = 1052;
    pub const __SK_FilterQ_: u32 = 2;
    pub const __SK_FilterFreq_: u32 = 1062;
    pub const __SK_FilterSweepRate_: u32 = 4;
    pub const __SK_ShakerInst_: u32 = 1071;
    pub const __SK_ShakerEnergy_: u32 = 2;
    pub const __SK_ShakerDamping_: u32 = 11;
    pub const __SK_ShakerNumObjects_: u32 = 4;
    pub const __SK_Strumming_: u32 = 1090;
    pub const __SK_NotStrumming_: u32 = 1091;
    pub const __SK_Trilling_: u32 = 1092;
    pub const __SK_NotTrilling_: u32 = 1093;
    pub const __SK_Rolling_: u32 = 1090;
    pub const __SK_NotRolling_: u32 = 1091;
    pub const __SK_PlayerSkill_: u32 = 2001;
    pub const __SK_Chord_: u32 = 2002;
    pub const __SK_ChordOff_: u32 = 2003;
    pub const __SK_SINGER_FilePath_: u32 = 3000;
    pub const __SK_SINGER_Frequency_: u32 = 3001;
    pub const __SK_SINGER_NoteName_: u32 = 3002;
    pub const __SK_SINGER_Shape_: u32 = 3003;
    pub const __SK_SINGER_Glot_: u32 = 3004;
    pub const __SK_SINGER_VoicedUnVoiced_: u32 = 3005;
    pub const __SK_SINGER_Synthesize_: u32 = 3006;
    pub const __SK_SINGER_Silence_: u32 = 3007;
    pub const __SK_SINGER_VibratoAmt_: u32 = 1;
    pub const __SK_SINGER_RndVibAmt_: u32 = 3008;
    pub const __SK_SINGER_VibFreq_: u32 = 11;
    pub const __SK_MaxMsgTypes_: u32 = 128;
    pub mod std {
        
        use self::super::super::root;
        pub type nullptr_t = *const ::std::os::raw::c_void;
        pub mod __cxx11 {
            
            use self::super::super::super::root;
            pub type string = root::std::__cxx11::basic_string<::std::os::raw::c_char>;
            pub type wstring = root::std::__cxx11::basic_string<u32>;
            pub type u16string = root::std::__cxx11::basic_string<u16>;
            pub type u32string = root::std::__cxx11::basic_string<u32>;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct time_get {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct time_get_byname {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct money_get {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct money_put {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct messages {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct messages_byname {
                pub _address: u8,
            }
            #[repr(C)]
            pub struct basic_string<_CharT> {
                pub _M_dataplus: root::std::__cxx11::basic_string__Alloc_hider,
                pub _M_string_length: root::std::__cxx11::basic_string_size_type,
                pub __bindgen_anon_1: root::std::__cxx11::basic_string__bindgen_ty_2<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_string__Char_alloc_type = [u8; 0usize];
            pub type basic_string__Alloc_traits = root::__gnu_cxx::__alloc_traits;
            pub type basic_string_traits_type<_Traits> = _Traits;
            pub type basic_string_value_type = [u8; 0usize];
            pub type basic_string_allocator_type =
                root::std::__cxx11::basic_string__Char_alloc_type;
            pub type basic_string_size_type = [u8; 0usize];
            pub type basic_string_difference_type = [u8; 0usize];
            pub type basic_string_reference = [u8; 0usize];
            pub type basic_string_const_reference = [u8; 0usize];
            pub type basic_string_pointer = [u8; 0usize];
            pub type basic_string_const_pointer = [u8; 0usize];
            pub type basic_string_iterator =
                root::__gnu_cxx::__normal_iterator<root::std::__cxx11::basic_string_pointer>;
            pub type basic_string_const_iterator =
                root::__gnu_cxx::__normal_iterator<root::std::__cxx11::basic_string_const_pointer>;
            pub type basic_string_const_reverse_iterator =
                root::std::reverse_iterator<root::std::__cxx11::basic_string_const_iterator>;
            pub type basic_string_reverse_iterator =
                root::std::reverse_iterator<root::std::__cxx11::basic_string_iterator>;
            pub type basic_string___const_iterator =
                root::std::__cxx11::basic_string_const_iterator;
            #[repr(C)]
            pub struct basic_string__Alloc_hider {
                pub _M_p: root::std::__cxx11::basic_string_pointer,
            }
            pub const basic_string__S_local_capacity:
                root::std::__cxx11::basic_string__bindgen_ty_1 = 0;
            pub type basic_string__bindgen_ty_1 = i32;
            #[repr(C)]
            pub struct basic_string__bindgen_ty_2<_CharT> {
                pub _M_local_buf: root::__BindgenUnionField<*mut _CharT>,
                pub _M_allocated_capacity:
                    root::__BindgenUnionField<root::std::__cxx11::basic_string_size_type>,
                pub bindgen_union_field: u64,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct collate {
                pub _base: root::std::locale_facet,
                pub _M_c_locale_collate: root::std::__c_locale,
            }
            pub type collate_char_type<_CharT> = _CharT;
            pub type collate_string_type = root::std::__cxx11::basic_string<_CharT>;
            #[repr(C)]
            #[derive(Debug)]
            pub struct collate_byname {
                pub _base: root::std::__cxx11::collate,
            }
            pub type collate_byname_char_type<_CharT> = _CharT;
            pub type collate_byname_string_type = root::std::__cxx11::basic_string<_CharT>;
            #[repr(C)]
            #[derive(Debug)]
            pub struct numpunct<_CharT> {
                pub _base: root::std::locale_facet,
                pub _M_data: *mut root::std::__cxx11::numpunct___cache_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type numpunct_char_type<_CharT> = _CharT;
            pub type numpunct_string_type = root::std::__cxx11::basic_string<_CharT>;
            pub type numpunct___cache_type<_CharT> = root::std::__numpunct_cache<_CharT>;
            extern "C" {
                pub static mut id: root::std::locale_id;
            }
            #[repr(C)]
            #[derive(Debug)]
            pub struct numpunct_byname<_CharT> {
                pub _base: root::std::__cxx11::numpunct<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type numpunct_byname_char_type<_CharT> = _CharT;
            pub type numpunct_byname_string_type = root::std::__cxx11::basic_string<_CharT>;
            #[repr(C)]
            pub struct basic_stringbuf<_CharT> {
                pub _base: root::std::basic_streambuf<_CharT>,
                pub _M_mode: root::std::ios_base_openmode,
                pub _M_string: root::std::__cxx11::basic_stringbuf___string_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_stringbuf_char_type<_CharT> = _CharT;
            pub type basic_stringbuf_traits_type<_Traits> = _Traits;
            pub type basic_stringbuf_allocator_type<_Alloc> = _Alloc;
            pub type basic_stringbuf_int_type = [u8; 0usize];
            pub type basic_stringbuf_pos_type = [u8; 0usize];
            pub type basic_stringbuf_off_type = [u8; 0usize];
            pub type basic_stringbuf___streambuf_type<_CharT> =
                root::std::basic_streambuf<root::std::__cxx11::basic_stringbuf_char_type<_CharT>>;
            pub type basic_stringbuf___string_type<_CharT> = root::std::__cxx11::basic_string<
                root::std::__cxx11::basic_stringbuf_char_type<_CharT>,
            >;
            pub type basic_stringbuf___size_type<_CharT> =
                root::std::__cxx11::basic_stringbuf___string_type<_CharT>;
            #[repr(C)]
            pub struct basic_stringbuf___xfer_bufptrs<_CharT> {
                pub _M_to: *mut root::std::__cxx11::basic_stringbuf<_CharT>,
                pub _M_goff: [root::std::__cxx11::basic_stringbuf_off_type; 3usize],
                pub _M_poff: [root::std::__cxx11::basic_stringbuf_off_type; 3usize],
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            #[repr(C)]
            pub struct basic_istringstream<_CharT> {
                pub _base: root::std::basic_istream<_CharT>,
                pub _M_stringbuf: root::std::__cxx11::basic_istringstream___stringbuf_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_istringstream_char_type<_CharT> = _CharT;
            pub type basic_istringstream_traits_type<_Traits> = _Traits;
            pub type basic_istringstream_allocator_type<_Alloc> = _Alloc;
            pub type basic_istringstream_int_type = [u8; 0usize];
            pub type basic_istringstream_pos_type = [u8; 0usize];
            pub type basic_istringstream_off_type = [u8; 0usize];
            pub type basic_istringstream___string_type<_CharT> =
                root::std::__cxx11::basic_string<_CharT>;
            pub type basic_istringstream___stringbuf_type<_CharT> =
                root::std::__cxx11::basic_stringbuf<_CharT>;
            pub type basic_istringstream___istream_type<_CharT> =
                root::std::basic_istream<root::std::__cxx11::basic_istringstream_char_type<_CharT>>;
            #[repr(C)]
            pub struct basic_ostringstream<_CharT> {
                pub _base: root::std::basic_ostream<_CharT>,
                pub _M_stringbuf: root::std::__cxx11::basic_ostringstream___stringbuf_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_ostringstream_char_type<_CharT> = _CharT;
            pub type basic_ostringstream_traits_type<_Traits> = _Traits;
            pub type basic_ostringstream_allocator_type<_Alloc> = _Alloc;
            pub type basic_ostringstream_int_type = [u8; 0usize];
            pub type basic_ostringstream_pos_type = [u8; 0usize];
            pub type basic_ostringstream_off_type = [u8; 0usize];
            pub type basic_ostringstream___string_type<_CharT> =
                root::std::__cxx11::basic_string<_CharT>;
            pub type basic_ostringstream___stringbuf_type<_CharT> =
                root::std::__cxx11::basic_stringbuf<_CharT>;
            pub type basic_ostringstream___ostream_type<_CharT> =
                root::std::basic_ostream<root::std::__cxx11::basic_ostringstream_char_type<_CharT>>;
            #[repr(C)]
            pub struct basic_stringstream<_CharT> {
                pub _base: root::std::basic_iostream<_CharT>,
                pub _M_stringbuf: root::std::__cxx11::basic_stringstream___stringbuf_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_stringstream_char_type<_CharT> = _CharT;
            pub type basic_stringstream_traits_type<_Traits> = _Traits;
            pub type basic_stringstream_allocator_type<_Alloc> = _Alloc;
            pub type basic_stringstream_int_type = [u8; 0usize];
            pub type basic_stringstream_pos_type = [u8; 0usize];
            pub type basic_stringstream_off_type = [u8; 0usize];
            pub type basic_stringstream___string_type<_CharT> =
                root::std::__cxx11::basic_string<_CharT>;
            pub type basic_stringstream___stringbuf_type<_CharT> =
                root::std::__cxx11::basic_stringbuf<_CharT>;
            pub type basic_stringstream___iostream_type<_CharT> =
                root::std::basic_iostream<root::std::__cxx11::basic_stringstream_char_type<_CharT>>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
            pub fn __throw_bad_exception();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
            pub fn __throw_bad_alloc();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
            pub fn __throw_bad_cast();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
            pub fn __throw_bad_typeid();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
            pub fn __throw_logic_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
            pub fn __throw_domain_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
            pub fn __throw_invalid_argument(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
            pub fn __throw_length_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
            pub fn __throw_out_of_range(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
            pub fn __throw_out_of_range_fmt(arg1: *const ::std::os::raw::c_char, ...);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
            pub fn __throw_runtime_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
            pub fn __throw_range_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
            pub fn __throw_overflow_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
            pub fn __throw_underflow_error(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
            pub fn __throw_ios_failure(arg1: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_system_errori"]
            pub fn __throw_system_error(arg1: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_future_errori"]
            pub fn __throw_future_error(arg1: ::std::os::raw::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
            pub fn __throw_bad_function_call();
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __false_type {
            pub _address: u8,
        }
        pub type __truth_type___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 = 0;
        pub type __traitor__bindgen_ty_1 = i32;
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 = 0;
        pub type __are_same__bindgen_ty_1 = i32;
        pub type __are_same___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_void {
            pub _address: u8,
        }
        pub const __is_void___value: root::std::__is_void__bindgen_ty_1 = 0;
        pub type __is_void__bindgen_ty_1 = i32;
        pub type __is_void___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 = 0;
        pub type __is_integer__bindgen_ty_1 = i32;
        pub type __is_integer___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value: root::std::__is_floating__bindgen_ty_1 = 0;
        pub type __is_floating__bindgen_ty_1 = i32;
        pub type __is_floating___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_pointer {
            pub _address: u8,
        }
        pub const __is_pointer___value: root::std::__is_pointer__bindgen_ty_1 = 0;
        pub type __is_pointer__bindgen_ty_1 = i32;
        pub type __is_pointer___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 = 0;
        pub type __is_char__bindgen_ty_1 = i32;
        pub type __is_char___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 = 0;
        pub type __is_byte__bindgen_ty_1 = i32;
        pub type __is_byte___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value: root::std::__is_move_iterator__bindgen_ty_1 = 0;
        pub type __is_move_iterator__bindgen_ty_1 = i32;
        pub type __is_move_iterator___type = root::std::__false_type;
        pub type integral_constant_value_type<_Tp> = _Tp;
        pub type integral_constant_type = u8;
        extern "C" {
            pub static value: _Tp;
        }
        pub type true_type = u8;
        pub type false_type = u8;
        pub type __bool_constant = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __failure_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_void_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_void {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_integral_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_floating_point_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_array {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_lvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_rvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_object_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_function_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_function {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_null_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_null_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nullptr_t {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_member_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_referenceable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_const {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_volatile {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copyable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_final {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_known_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_array_unknown_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_destructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_nt_destructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_default_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nt_assignable_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
            pub fn __do_is_implicitly_default_constructible_impl___test() -> root::std::false_type;
        }
        impl __do_is_implicitly_default_constructible_impl {
            #[inline]
            pub unsafe fn __test() -> root::std::false_type {
                __do_is_implicitly_default_constructible_impl___test()
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_implicitly_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct rank {
            pub _base: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_same {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_base_of {
            pub _address: u8,
        }
        pub type __is_convertible_helper_type = root::std::is_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_convertible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type = root::std::remove_const;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type = root::std::add_const;
        pub type remove_const_t = root::std::remove_const;
        pub type remove_volatile_t = root::std::remove_volatile;
        pub type remove_cv_t = root::std::remove_cv;
        pub type add_const_t = root::std::add_const;
        pub type add_volatile_t = root::std::add_volatile;
        pub type add_cv_t = root::std::add_cv;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        pub type __add_lvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        pub type __add_rvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        pub type remove_reference_t = root::std::remove_reference;
        pub type add_lvalue_reference_t = root::std::add_lvalue_reference;
        pub type add_rvalue_reference_t = root::std::add_rvalue_reference;
        pub type __match_cv_qualifiers___match = u8;
        pub type __match_cv_qualifiers___type = root::std::__match_cv_qualifiers___match;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        pub type make_signed_t = root::std::make_signed;
        pub type make_unsigned_t = root::std::make_unsigned;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type<_Tp> = _Tp;
        pub type remove_extent_t = root::std::remove_extent;
        pub type remove_all_extents_t = root::std::remove_all_extents;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_pointer_helper {
            pub _address: u8,
        }
        pub type __remove_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        pub type __add_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct add_pointer {
            pub _address: u8,
        }
        pub type remove_pointer_t = root::std::remove_pointer;
        pub type add_pointer_t = root::std::add_pointer;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __aligned_storage_msa___type {
            pub __data: *mut ::std::os::raw::c_uchar,
            pub __align: root::std::__aligned_storage_msa___type__bindgen_ty_1,
            _bindgen_union_align: u64,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_storage_msa___type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union aligned_storage_type {
            pub __data: *mut ::std::os::raw::c_uchar,
            pub __align: root::std::aligned_storage_type__bindgen_ty_1,
            _bindgen_union_align: u64,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct aligned_storage_type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strictest_alignment {
            pub _address: u8,
        }
        pub type aligned_union___strictest = root::std::__strictest_alignment;
        pub type aligned_union_type = u8;
        extern "C" {
            pub static alignment_value: usize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay___remove_type = root::std::remove_reference;
        pub type decay_type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reference_wrapper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __decay_and_strip {
            pub _address: u8,
        }
        pub type __decay_and_strip___type = root::std::__strip_reference_wrapper;
        pub type _Require = u8;
        pub type conditional_type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_common_type_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_member_type_wrapper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __member_type_wrapper {
            pub _address: u8,
        }
        pub type __member_type_wrapper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __expanded_common_type_wrapper {
            pub _address: u8,
        }
        pub type __expanded_common_type_wrapper_type = root::std::common_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct underlying_type {
            pub _address: u8,
        }
        pub type underlying_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_ref {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memfun_deref {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_ref {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_memobj_deref {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_other {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_success {
            pub _address: u8,
        }
        pub type __result_of_success___invoke_type<_Tag> = _Tag;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __inv_unwrap {
            pub _address: u8,
        }
        pub type __inv_unwrap_type<_Tp> = _Tp;
        pub type __result_of_impl_type = root::std::__failure_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __result_of_other_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __invoke_result {
            pub _address: u8,
        }
        pub type aligned_storage_t = u8;
        pub type aligned_union_t = u8;
        pub type decay_t = root::std::decay;
        pub type enable_if_t = u8;
        pub type conditional_t = u8;
        pub type common_type_t = root::std::common_type;
        pub type underlying_type_t = root::std::underlying_type;
        pub type result_of_t = root::std::result_of;
        pub type __void_t = ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_value_t = root::std::false_type;
        pub type __detector_type<_Default> = _Default;
        pub type __detected_or = root::std::__detector;
        pub type __detected_or_t = root::std::__detected_or;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        pub mod __swappable_details {
            
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_swappable_impl {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __do_is_nothrow_swappable_impl {
                pub _address: u8,
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable_impl {
            pub _address: u8,
        }
        pub type __is_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_invocable_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __call_is_nothrow {
            pub _address: u8,
        }
        pub type __call_is_nothrow_ = root::std::__call_is_nothrow;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __nonesuch {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct piecewise_construct_t {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL19piecewise_construct"]
            pub static piecewise_construct: root::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __nonesuch_no_braces {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pair<_T1, _T2> {
            pub first: _T1,
            pub second: _T2,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct input_iterator_tag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct output_iterator_tag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct forward_iterator_tag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bidirectional_iterator_tag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct random_access_iterator_tag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category<_Category> = _Category;
        pub type iterator_value_type<_Tp> = _Tp;
        pub type iterator_difference_type<_Distance> = _Distance;
        pub type iterator_pointer<_Pointer> = _Pointer;
        pub type iterator_reference<_Reference> = _Reference;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        pub type _RequireInputIter = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _List_const_iterator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __undefined {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __get_first_arg {
            pub _address: u8,
        }
        pub type __get_first_arg_type = root::std::__undefined;
        pub type __get_first_arg_t = root::std::__get_first_arg;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __replace_first_arg {
            pub _address: u8,
        }
        pub type __replace_first_arg_t = root::std::__replace_first_arg;
        pub type __make_not_void = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type pointer_traits___element_type = [u8; 0usize];
        pub type pointer_traits___difference_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_traits___rebind {
            pub _address: u8,
        }
        pub type pointer_traits_pointer<_Ptr> = _Ptr;
        pub type pointer_traits_element_type = root::std::__detected_or_t;
        pub type pointer_traits_difference_type = root::std::__detected_or_t;
        pub type pointer_traits_rebind = root::std::pointer_traits___rebind;
        pub type __ptr_rebind = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct reverse_iterator<_Iterator> {
            pub current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type reverse_iterator___traits_type = root::std::iterator_traits;
        pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
        pub type reverse_iterator_difference_type = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_pointer = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_reference = root::std::reverse_iterator___traits_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct back_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type back_insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct front_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type front_insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        pub struct insert_iterator<_Container> {
            pub container: *mut _Container,
            pub iter: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type insert_iterator_container_type<_Container> = _Container;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct move_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type move_iterator___traits_type = root::std::iterator_traits;
        pub type move_iterator___base_ref = root::std::move_iterator___traits_type;
        pub type move_iterator_iterator_type<_Iterator> = _Iterator;
        pub type move_iterator_iterator_category = root::std::move_iterator___traits_type;
        pub type move_iterator_value_type = root::std::move_iterator___traits_type;
        pub type move_iterator_difference_type = root::std::move_iterator___traits_type;
        pub type move_iterator_pointer<_Iterator> = _Iterator;
        pub type move_iterator_reference = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __lc_rai {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct exception {
            pub vtable_: *const exception__bindgen_vtable,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
            pub fn exception_exception_destructor(this: *mut root::std::exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
            pub fn exception_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_exception {
            pub _base: root::std::exception,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13bad_exceptionD1Ev"]
            pub fn bad_exception_bad_exception_destructor(this: *mut root::std::bad_exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt13bad_exception4whatEv"]
            pub fn bad_exception_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        pub type terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
        pub type unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            #[link_name = "\u{1}_ZSt13set_terminatePFvvE"]
            pub fn set_terminate(
                arg1: root::std::terminate_handler,
            ) -> root::std::terminate_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt13get_terminatev"]
            pub fn get_terminate() -> root::std::terminate_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9terminatev"]
            pub fn terminate();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14set_unexpectedPFvvE"]
            pub fn set_unexpected(
                arg1: root::std::unexpected_handler,
            ) -> root::std::unexpected_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14get_unexpectedv"]
            pub fn get_unexpected() -> root::std::unexpected_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10unexpectedv"]
            pub fn unexpected();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18uncaught_exceptionv"]
            pub fn uncaught_exception() -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
            pub fn _Hash_bytes(
                __ptr: *const ::std::os::raw::c_void,
                __len: usize,
                __seed: usize,
            ) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
            pub fn _Fnv_hash_bytes(
                __ptr: *const ::std::os::raw::c_void,
                __len: usize,
                __seed: usize,
            ) -> usize;
        }
        #[repr(C)]
        pub struct type_info__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct type_info {
            pub vtable_: *const type_info__bindgen_vtable,
            pub __name: *const ::std::os::raw::c_char,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9type_infoD1Ev"]
            pub fn type_info_type_info_destructor(this: *mut root::std::type_info);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info14__is_pointer_pEv"]
            pub fn type_info___is_pointer_p(this: *mut ::std::os::raw::c_void) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info15__is_function_pEv"]
            pub fn type_info___is_function_p(this: *mut ::std::os::raw::c_void) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info10__do_catchEPKS_PPvj"]
            pub fn type_info___do_catch(
                this: *mut ::std::os::raw::c_void,
                __thr_type: *const root::std::type_info,
                __thr_obj: *mut ::std::os::raw::c_void,
                __outer: ::std::os::raw::c_uint,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv"]
            pub fn type_info___do_upcast(
                this: *mut ::std::os::raw::c_void,
                __target: *const root::__cxxabiv1::__class_type_info,
                __obj_ptr: *mut ::std::os::raw::c_void,
            ) -> bool;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_cast {
            pub _base: root::std::exception,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8bad_castD1Ev"]
            pub fn bad_cast_bad_cast_destructor(this: *mut root::std::bad_cast);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8bad_cast4whatEv"]
            pub fn bad_cast_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_typeid {
            pub _base: root::std::exception,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10bad_typeidD1Ev"]
            pub fn bad_typeid_bad_typeid_destructor(this: *mut root::std::bad_typeid);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10bad_typeid4whatEv"]
            pub fn bad_typeid_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        pub mod __exception_ptr {
            
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug)]
            pub struct exception_ptr {
                pub _M_exception_object: *mut ::std::os::raw::c_void,
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptr4swapERS0_"]
                pub fn exception_ptr_swap(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                    arg1: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv"]
                pub fn exception_ptr___cxa_exception_type(
                    this: *const root::std::__exception_ptr::exception_ptr,
                ) -> *const root::std::type_info;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1Ev"]
                pub fn exception_ptr_exception_ptr(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1ERKS0_"]
                pub fn exception_ptr_exception_ptr1(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                    arg1: *const root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrD1Ev"]
                pub fn exception_ptr_exception_ptr_destructor(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            impl exception_ptr {
                #[inline]
                pub unsafe fn swap(
                    &mut self,
                    arg1: *mut root::std::__exception_ptr::exception_ptr,
                ) {
                    exception_ptr_swap(self, arg1)
                }
                #[inline]
                pub unsafe fn __cxa_exception_type(&self) -> *const root::std::type_info {
                    exception_ptr___cxa_exception_type(self)
                }
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    exception_ptr_exception_ptr(&mut __bindgen_tmp);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(arg1: *const root::std::__exception_ptr::exception_ptr) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    exception_ptr_exception_ptr1(&mut __bindgen_tmp, arg1);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn destruct(&mut self) {
                    exception_ptr_exception_ptr_destructor(self)
                }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17current_exceptionv"]
            pub fn current_exception() -> root::std::__exception_ptr::exception_ptr;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE"]
            pub fn rethrow_exception(arg1: root::std::__exception_ptr::exception_ptr);
        }
        #[repr(C)]
        pub struct nested_exception__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct nested_exception {
            pub vtable_: *const nested_exception__bindgen_vtable,
            pub _M_ptr: root::std::__exception_ptr::exception_ptr,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16nested_exceptionD1Ev"]
            pub fn nested_exception_nested_exception_destructor(
                this: *mut root::std::nested_exception,
            );
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Nested_exception<_Except> {
            pub _base: _Except,
            pub _base_1: root::std::nested_exception,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
        }
        pub type __rethrow_if_nested_cond = u8;
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_alloc {
            pub _base: root::std::exception,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
            pub fn bad_alloc_bad_alloc_destructor(this: *mut root::std::bad_alloc);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
            pub fn bad_alloc_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct bad_array_new_length {
            pub _base: root::std::bad_alloc,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
            pub fn bad_array_new_length_bad_array_new_length_destructor(
                this: *mut root::std::bad_array_new_length,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
            pub fn bad_array_new_length_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct nothrow_t {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7nothrow"]
            pub static nothrow: root::std::nothrow_t;
        }
        pub type new_handler = ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
            pub fn set_new_handler(arg1: root::std::new_handler) -> root::std::new_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15get_new_handlerv"]
            pub fn get_new_handler() -> root::std::new_handler;
        }
        pub type __allocator_base = root::__gnu_cxx::new_allocator;
        #[repr(C)]
        #[derive(Debug)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_size_type = usize;
        pub type allocator_difference_type = isize;
        pub type allocator_pointer<_Tp> = *mut _Tp;
        pub type allocator_const_pointer<_Tp> = *const _Tp;
        pub type allocator_reference<_Tp> = *mut _Tp;
        pub type allocator_const_reference<_Tp> = *const _Tp;
        pub type allocator_value_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = root::std::allocator;
        pub type allocator_propagate_on_container_move_assignment = root::std::true_type;
        pub type allocator_is_always_equal = root::std::true_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type<_Arg> = _Arg;
        pub type unary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type<_Arg1> = _Arg1;
        pub type binary_function_second_argument_type<_Arg2> = _Arg2;
        pub type binary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_transparent {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct plus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct minus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multiplies {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct divides {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct modulus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct negate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct not_equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct greater_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct less_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct logical_not {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_xor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct bit_not {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct unary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct binary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_unary_function<_Arg, _Result> {
            pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            pub _M_ptr:
                ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
            pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Identity {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select1st {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Select2nd {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        #[repr(C)]
        pub struct binder1st<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        #[repr(C)]
        pub struct binder2nd<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __allocator_traits_base___rebind {
            pub _address: u8,
        }
        pub type __allocator_traits_base___pointer = [u8; 0usize];
        pub type __allocator_traits_base___c_pointer = [u8; 0usize];
        pub type __allocator_traits_base___v_pointer = [u8; 0usize];
        pub type __allocator_traits_base___cv_pointer = [u8; 0usize];
        pub type __allocator_traits_base___pocca = [u8; 0usize];
        pub type __allocator_traits_base___pocma = [u8; 0usize];
        pub type __allocator_traits_base___pocs = [u8; 0usize];
        pub type __allocator_traits_base___equal = [u8; 0usize];
        pub type __alloc_rebind = root::std::__allocator_traits_base;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
        pub type allocator_traits_value_type = [u8; 0usize];
        pub type allocator_traits_pointer = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Ptr {
            pub _address: u8,
        }
        pub type allocator_traits__Ptr_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Diff {
            pub _address: u8,
        }
        pub type allocator_traits__Diff_type = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits__Size {
            pub _address: u8,
        }
        pub type allocator_traits_const_pointer = [u8; 0usize];
        pub type allocator_traits_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_const_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_difference_type = [u8; 0usize];
        pub type allocator_traits_size_type = [u8; 0usize];
        pub type allocator_traits_propagate_on_container_copy_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_move_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_swap = root::std::__detected_or_t;
        pub type allocator_traits_is_always_equal = root::std::__detected_or_t;
        pub type allocator_traits_rebind_alloc = root::std::__alloc_rebind;
        pub type allocator_traits_rebind_traits = root::std::allocator_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_traits___construct_helper {
            pub _address: u8,
        }
        pub type allocator_traits___construct_helper_type<_Alloc> = _Alloc;
        pub type allocator_traits___has_construct = root::std::allocator_traits___construct_helper;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_copy_insertable_impl {
            pub _address: u8,
        }
        pub type __is_copy_insertable_impl__Traits = root::std::allocator_traits;
        pub type __is_copy_insertable_impl_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_copy_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_allocator {
            pub _base: root::std::false_type,
        }
        pub type _RequireAllocator = u8;
        pub const _Rb_tree_color__S_red: root::std::_Rb_tree_color = 0;
        pub const _Rb_tree_color__S_black: root::std::_Rb_tree_color = 1;
        pub type _Rb_tree_color = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_node_base {
            pub _M_color: root::std::_Rb_tree_color,
            pub _M_parent: root::std::_Rb_tree_node_base__Base_ptr,
            pub _M_left: root::std::_Rb_tree_node_base__Base_ptr,
            pub _M_right: root::std::_Rb_tree_node_base__Base_ptr,
        }
        pub type _Rb_tree_node_base__Base_ptr = *mut root::std::_Rb_tree_node_base;
        pub type _Rb_tree_node_base__Const_Base_ptr = *const root::std::_Rb_tree_node_base;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_key_compare<_Key_compare> {
            pub _M_key_compare: _Key_compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key_compare>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_header {
            pub _M_header: root::std::_Rb_tree_node_base,
            pub _M_node_count: usize,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_node {
            pub _base: root::std::_Rb_tree_node_base,
            pub _M_storage: root::__gnu_cxx::__aligned_membuf,
        }
        pub type _Rb_tree_node__Link_type = *mut root::std::_Rb_tree_node;
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_increment(
                __x: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_increment1(
                __x: *const root::std::_Rb_tree_node_base,
            ) -> *const root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_decrement(
                __x: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_decrement1(
                __x: *const root::std::_Rb_tree_node_base,
            ) -> *const root::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_iterator {
            pub _M_node: root::std::_Rb_tree_iterator__Base_ptr,
        }
        pub type _Rb_tree_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_iterator_reference<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_iterator_category = root::std::bidirectional_iterator_tag;
        pub type _Rb_tree_iterator_difference_type = isize;
        pub type _Rb_tree_iterator__Self = root::std::_Rb_tree_iterator;
        pub type _Rb_tree_iterator__Base_ptr = root::std::_Rb_tree_node_base__Base_ptr;
        pub type _Rb_tree_iterator__Link_type = *mut root::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree_const_iterator {
            pub _M_node: root::std::_Rb_tree_const_iterator__Base_ptr,
        }
        pub type _Rb_tree_const_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_iterator = root::std::_Rb_tree_iterator;
        pub type _Rb_tree_const_iterator_iterator_category = root::std::bidirectional_iterator_tag;
        pub type _Rb_tree_const_iterator_difference_type = isize;
        pub type _Rb_tree_const_iterator__Self = root::std::_Rb_tree_const_iterator;
        pub type _Rb_tree_const_iterator__Base_ptr = root::std::_Rb_tree_node_base__Const_Base_ptr;
        pub type _Rb_tree_const_iterator__Link_type = *const root::std::_Rb_tree_node;
        extern "C" {
            #[link_name = "\u{1}_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_"]
            pub fn _Rb_tree_insert_and_rebalance(
                __insert_left: bool,
                __x: *mut root::std::_Rb_tree_node_base,
                __p: *mut root::std::_Rb_tree_node_base,
                __header: *mut root::std::_Rb_tree_node_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_"]
            pub fn _Rb_tree_rebalance_for_erase(
                __z: *mut root::std::_Rb_tree_node_base,
                __header: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __has_is_transparent {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Rb_tree {
            pub _M_impl: u8,
        }
        pub type _Rb_tree__Node_allocator = [u8; 0usize];
        pub type _Rb_tree__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Rb_tree__Base_ptr = *mut root::std::_Rb_tree_node_base;
        pub type _Rb_tree__Const_Base_ptr = *const root::std::_Rb_tree_node_base;
        pub type _Rb_tree__Link_type = *mut root::std::_Rb_tree_node;
        pub type _Rb_tree__Const_Link_type = *const root::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug)]
        pub struct _Rb_tree__Reuse_or_alloc_node {
            pub _M_root: root::std::_Rb_tree__Base_ptr,
            pub _M_nodes: root::std::_Rb_tree__Base_ptr,
            pub _M_t: *mut root::std::_Rb_tree,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Rb_tree__Alloc_node {
            pub _M_t: *mut root::std::_Rb_tree,
        }
        pub type _Rb_tree_key_type<_Key> = _Key;
        pub type _Rb_tree_value_type<_Val> = _Val;
        pub type _Rb_tree_pointer<_Val> = *mut root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_pointer<_Val> = *const root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_reference<_Val> = *mut root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_reference<_Val> = *const root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_size_type = usize;
        pub type _Rb_tree_difference_type = isize;
        pub type _Rb_tree_allocator_type<_Alloc> = _Alloc;
        pub type _Rb_tree_reverse_iterator =
            root::std::reverse_iterator<root::std::_Rb_tree_iterator>;
        pub type _Rb_tree_const_reverse_iterator =
            root::std::reverse_iterator<root::std::_Rb_tree_const_iterator>;
        pub type _Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> =
            root::std::_Rb_tree_key_compare<_Key_compare>;
        extern "C" {
            #[link_name = "\u{1}_ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_"]
            pub fn _Rb_tree_black_count(
                __node: *const root::std::_Rb_tree_node_base,
                __root: *const root::std::_Rb_tree_node_base,
            ) -> ::std::os::raw::c_uint;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct initializer_list<_E> {
            pub _M_array: root::std::initializer_list_iterator<_E>,
            pub _M_len: root::std::initializer_list_size_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
        }
        pub type initializer_list_value_type<_E> = _E;
        pub type initializer_list_reference<_E> = *const _E;
        pub type initializer_list_const_reference<_E> = *const _E;
        pub type initializer_list_size_type = usize;
        pub type initializer_list_iterator<_E> = *const _E;
        pub type initializer_list_const_iterator<_E> = *const _E;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple_size {
            pub _address: u8,
        }
        pub type __enable_if_has_tuple_size<_Tp> = _Tp;
        pub type __tuple_element_t = u8;
        pub type tuple_element_t = u8;
        pub type _Build_index_tuple__IdxTuple = u8;
        pub type _Build_index_tuple___type = u8;
        pub type integer_sequence_value_type<_Tp> = _Tp;
        pub type make_integer_sequence = u8;
        pub type index_sequence = u8;
        pub type make_index_sequence = root::std::make_integer_sequence;
        pub type index_sequence_for = root::std::make_index_sequence;
        pub type streamoff = ::std::os::raw::c_long;
        pub type streamsize = isize;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct fpos<_StateT> {
            pub _M_off: root::std::streamoff,
            pub _M_state: _StateT,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
        }
        pub type streampos = root::std::fpos<root::mbstate_t>;
        pub type wstreampos = root::std::fpos<root::mbstate_t>;
        pub type u16streampos = root::std::fpos<root::mbstate_t>;
        pub type u32streampos = root::std::fpos<root::mbstate_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type __c_locale = root::__locale_t;
        pub type ios = root::std::basic_ios<::std::os::raw::c_char>;
        pub type streambuf = root::std::basic_streambuf<::std::os::raw::c_char>;
        pub type istream = root::std::basic_istream<::std::os::raw::c_char>;
        pub type ostream = root::std::basic_ostream<::std::os::raw::c_char>;
        pub type iostream = root::std::basic_iostream<::std::os::raw::c_char>;
        pub type stringbuf = root::std::__cxx11::basic_stringbuf<::std::os::raw::c_char>;
        pub type istringstream = root::std::__cxx11::basic_istringstream<::std::os::raw::c_char>;
        pub type ostringstream = root::std::__cxx11::basic_ostringstream<::std::os::raw::c_char>;
        pub type stringstream = root::std::__cxx11::basic_stringstream<::std::os::raw::c_char>;
        pub type filebuf = root::std::basic_filebuf<::std::os::raw::c_char>;
        pub type ifstream = root::std::basic_ifstream<::std::os::raw::c_char>;
        pub type ofstream = root::std::basic_ofstream<::std::os::raw::c_char>;
        pub type fstream = root::std::basic_fstream<::std::os::raw::c_char>;
        pub type wios = root::std::basic_ios<u32>;
        pub type wstreambuf = root::std::basic_streambuf<u32>;
        pub type wistream = root::std::basic_istream<u32>;
        pub type wostream = root::std::basic_ostream<u32>;
        pub type wiostream = root::std::basic_iostream<u32>;
        pub type wstringbuf = root::std::__cxx11::basic_stringbuf<u32>;
        pub type wistringstream = root::std::__cxx11::basic_istringstream<u32>;
        pub type wostringstream = root::std::__cxx11::basic_ostringstream<u32>;
        pub type wstringstream = root::std::__cxx11::basic_stringstream<u32>;
        pub type wfilebuf = root::std::basic_filebuf<u32>;
        pub type wifstream = root::std::basic_ifstream<u32>;
        pub type wofstream = root::std::basic_ofstream<u32>;
        pub type wfstream = root::std::basic_fstream<u32>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_put_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct valarray {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
            pub fn getline(
                __in: *mut root::std::basic_istream<::std::os::raw::c_char>,
                __str: *mut root::std::__cxx11::basic_string<::std::os::raw::c_char>,
                __delim: ::std::os::raw::c_char,
            ) -> *mut root::std::basic_istream<::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
            pub fn getline1(
                __in: *mut root::std::basic_istream<u32>,
                __str: *mut root::std::__cxx11::basic_string<u32>,
                __delim: u32,
            ) -> *mut root::std::basic_istream<u32>;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __hash_base {
            pub _address: u8,
        }
        pub type __hash_base_result_type<_Result> = _Result;
        pub type __hash_base_argument_type<_Arg> = _Arg;
        #[repr(C)]
        #[derive(Debug)]
        pub struct __poison_hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Hash_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Fnv_hash_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_fast_hash {
            pub _base: root::std::true_type,
        }
        pub mod literals {
            
            use self::super::super::super::root;
        }
        extern "C" {
            pub static npos: root::std::__cxx11::basic_string_size_type;
        }
        pub type size_type = root::size_type;
        #[repr(C)]
        pub struct __cow_string {
            pub __bindgen_anon_1: root::std::__cow_string__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __cow_string__bindgen_ty_1 {
            pub _M_p: *const ::std::os::raw::c_char,
            pub _M_bytes: [::std::os::raw::c_char; 8usize],
            _bindgen_union_align: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1Ev"]
            pub fn __cow_string___cow_string(this: *mut root::std::__cow_string);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn __cow_string___cow_string1(
                this: *mut root::std::__cow_string,
                arg1: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1EPKcm"]
            pub fn __cow_string___cow_string2(
                this: *mut root::std::__cow_string,
                arg1: *const ::std::os::raw::c_char,
                arg2: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKS_"]
            pub fn __cow_string___cow_string3(
                this: *mut root::std::__cow_string,
                arg1: *const root::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1EOS_"]
            pub fn __cow_string___cow_string4(
                this: *mut root::std::__cow_string,
                arg1: *mut root::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringD1Ev"]
            pub fn __cow_string___cow_string_destructor(this: *mut root::std::__cow_string);
        }
        impl __cow_string {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: usize) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string2(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new3(arg1: *const root::std::__cow_string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string3(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new4(arg1: *mut root::std::__cow_string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string4(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                __cow_string___cow_string_destructor(self)
            }
        }
        pub type __sso_string = root::std::__cxx11::basic_string<::std::os::raw::c_char>;
        #[repr(C)]
        pub struct logic_error {
            pub _base: root::std::exception,
            pub _M_msg: root::std::__cow_string,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn logic_error_logic_error(
                this: *mut root::std::logic_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1EPKc"]
            pub fn logic_error_logic_error1(
                this: *mut root::std::logic_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1ERKS_"]
            pub fn logic_error_logic_error2(
                this: *mut root::std::logic_error,
                arg1: *const root::std::logic_error,
            );
        }
        impl logic_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                logic_error_logic_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                logic_error_logic_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::std::logic_error) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                logic_error_logic_error2(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorD1Ev"]
            pub fn logic_error_logic_error_destructor(this: *mut root::std::logic_error);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt11logic_error4whatEv"]
            pub fn logic_error_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        pub struct domain_error {
            pub _base: root::std::logic_error,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn domain_error_domain_error(
                this: *mut root::std::domain_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorC1EPKc"]
            pub fn domain_error_domain_error1(
                this: *mut root::std::domain_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl domain_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                domain_error_domain_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                domain_error_domain_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorD1Ev"]
            pub fn domain_error_domain_error_destructor(this: *mut root::std::domain_error);
        }
        #[repr(C)]
        pub struct invalid_argument {
            pub _base: root::std::logic_error,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn invalid_argument_invalid_argument(
                this: *mut root::std::invalid_argument,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentC1EPKc"]
            pub fn invalid_argument_invalid_argument1(
                this: *mut root::std::invalid_argument,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl invalid_argument {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                invalid_argument_invalid_argument(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                invalid_argument_invalid_argument1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentD1Ev"]
            pub fn invalid_argument_invalid_argument_destructor(
                this: *mut root::std::invalid_argument,
            );
        }
        #[repr(C)]
        pub struct length_error {
            pub _base: root::std::logic_error,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn length_error_length_error(
                this: *mut root::std::length_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorC1EPKc"]
            pub fn length_error_length_error1(
                this: *mut root::std::length_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl length_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                length_error_length_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                length_error_length_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorD1Ev"]
            pub fn length_error_length_error_destructor(this: *mut root::std::length_error);
        }
        #[repr(C)]
        pub struct out_of_range {
            pub _base: root::std::logic_error,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn out_of_range_out_of_range(
                this: *mut root::std::out_of_range,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeC1EPKc"]
            pub fn out_of_range_out_of_range1(
                this: *mut root::std::out_of_range,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl out_of_range {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                out_of_range_out_of_range(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                out_of_range_out_of_range1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeD1Ev"]
            pub fn out_of_range_out_of_range_destructor(this: *mut root::std::out_of_range);
        }
        #[repr(C)]
        pub struct runtime_error {
            pub _base: root::std::exception,
            pub _M_msg: root::std::__cow_string,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn runtime_error_runtime_error(
                this: *mut root::std::runtime_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1EPKc"]
            pub fn runtime_error_runtime_error1(
                this: *mut root::std::runtime_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKS_"]
            pub fn runtime_error_runtime_error2(
                this: *mut root::std::runtime_error,
                arg1: *const root::std::runtime_error,
            );
        }
        impl runtime_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                runtime_error_runtime_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                runtime_error_runtime_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::std::runtime_error) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                runtime_error_runtime_error2(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorD1Ev"]
            pub fn runtime_error_runtime_error_destructor(this: *mut root::std::runtime_error);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt13runtime_error4whatEv"]
            pub fn runtime_error_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        #[repr(C)]
        pub struct range_error {
            pub _base: root::std::runtime_error,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn range_error_range_error(
                this: *mut root::std::range_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorC1EPKc"]
            pub fn range_error_range_error1(
                this: *mut root::std::range_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl range_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                range_error_range_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                range_error_range_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorD1Ev"]
            pub fn range_error_range_error_destructor(this: *mut root::std::range_error);
        }
        #[repr(C)]
        pub struct overflow_error {
            pub _base: root::std::runtime_error,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn overflow_error_overflow_error(
                this: *mut root::std::overflow_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorC1EPKc"]
            pub fn overflow_error_overflow_error1(
                this: *mut root::std::overflow_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl overflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                overflow_error_overflow_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                overflow_error_overflow_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorD1Ev"]
            pub fn overflow_error_overflow_error_destructor(this: *mut root::std::overflow_error);
        }
        #[repr(C)]
        pub struct underflow_error {
            pub _base: root::std::runtime_error,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn underflow_error_underflow_error(
                this: *mut root::std::underflow_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorC1EPKc"]
            pub fn underflow_error_underflow_error1(
                this: *mut root::std::underflow_error,
                arg1: *const ::std::os::raw::c_char,
            );
        }
        impl underflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                underflow_error_underflow_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                underflow_error_underflow_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorD1Ev"]
            pub fn underflow_error_underflow_error_destructor(
                this: *mut root::std::underflow_error,
            );
        }
        pub type __array_traits__Type<_Tp> = *mut _Tp;
        pub type __array_traits__Is_swappable = root::std::__is_swappable;
        pub type __array_traits__Is_nothrow_swappable = root::std::__is_nothrow_swappable;
        pub type array_value_type<_Tp> = _Tp;
        pub type array_pointer<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_pointer<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_reference<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_reference<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_iterator<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_iterator<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_size_type = usize;
        pub type array_difference_type = isize;
        pub type array_reverse_iterator<_Tp> =
            root::std::reverse_iterator<root::std::array_iterator<_Tp>>;
        pub type array_const_reverse_iterator<_Tp> =
            root::std::reverse_iterator<root::std::array_const_iterator<_Tp>>;
        pub type array__AT_Type = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __erased_type {
            pub _address: u8,
        }
        pub type __is_erased_or_convertible = root::std::__or_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct allocator_arg_t {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL13allocator_arg"]
            pub static allocator_arg: root::std::allocator_arg_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_allocator_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct uses_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc0 {
            pub _M_a: root::std::__uses_alloc0__Sink,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc0__Sink {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc1<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __uses_alloc2<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        pub type __uses_alloc_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_uses_allocator_predicate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_nothrow_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_empty_non_tuple {
            pub _address: u8,
        }
        pub type __empty_not_final = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple {
            pub _address: u8,
        }
        pub type tuple__Inherited = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct tuple__TC2 {
            pub _address: u8,
        }
        pub type tuple__TCC = u8;
        pub type tuple__TMC = u8;
        pub type tuple__TMCT = u8;
        pub type tuple__TNTC = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __do_make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __combine_tuples {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __tuple_cat_result {
            pub _address: u8,
        }
        pub type __tuple_cat_result___type = root::std::__combine_tuples;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __make_1st_indices {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __tuple_concater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Swallow_assign {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL6ignore"]
            pub static ignore: root::std::_Swallow_assign;
        }
        #[repr(C)]
        pub struct map {
            pub _M_t: root::std::map__Rep_type,
        }
        pub type map_key_type<_Key> = _Key;
        pub type map_mapped_type<_Tp> = _Tp;
        pub type map_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
        pub type map_key_compare<_Compare> = _Compare;
        pub type map_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct map_value_compare<_Compare> {
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        pub type map__Pair_alloc_type = [u8; 0usize];
        pub type map__Rep_type = root::std::_Rb_tree;
        pub type map__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type map_pointer = [u8; 0usize];
        pub type map_const_pointer = [u8; 0usize];
        pub type map_reference = [u8; 0usize];
        pub type map_const_reference = [u8; 0usize];
        pub type map_iterator = [u8; 0usize];
        pub type map_const_iterator = [u8; 0usize];
        pub type map_size_type = [u8; 0usize];
        pub type map_difference_type = [u8; 0usize];
        pub type map_reverse_iterator = [u8; 0usize];
        pub type map_const_reverse_iterator = [u8; 0usize];
        #[repr(C)]
        pub struct multimap {
            pub _M_t: root::std::multimap__Rep_type,
        }
        pub type multimap_key_type<_Key> = _Key;
        pub type multimap_mapped_type<_Tp> = _Tp;
        pub type multimap_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
        pub type multimap_key_compare<_Compare> = _Compare;
        pub type multimap_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct multimap_value_compare<_Compare> {
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        pub type multimap__Pair_alloc_type = [u8; 0usize];
        pub type multimap__Rep_type = root::std::_Rb_tree;
        pub type multimap__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type multimap_pointer = [u8; 0usize];
        pub type multimap_const_pointer = [u8; 0usize];
        pub type multimap_reference = [u8; 0usize];
        pub type multimap_const_reference = [u8; 0usize];
        pub type multimap_iterator = [u8; 0usize];
        pub type multimap_const_iterator = [u8; 0usize];
        pub type multimap_size_type = [u8; 0usize];
        pub type multimap_difference_type = [u8; 0usize];
        pub type multimap_reverse_iterator = [u8; 0usize];
        pub type multimap_const_reverse_iterator = [u8; 0usize];
        #[repr(C)]
        pub struct _Vector_base {
            pub _M_impl: root::std::_Vector_base__Vector_impl,
        }
        pub type _Vector_base__Tp_alloc_type = [u8; 0usize];
        pub type _Vector_base_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Vector_base__Vector_impl {
            pub _M_start: root::std::_Vector_base_pointer,
            pub _M_finish: root::std::_Vector_base_pointer,
            pub _M_end_of_storage: root::std::_Vector_base_pointer,
        }
        pub type _Vector_base_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        pub struct vector {
            pub _base: root::std::_Vector_base,
        }
        pub type vector__Base = root::std::_Vector_base;
        pub type vector__Tp_alloc_type = root::std::vector__Base;
        pub type vector__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type vector_value_type<_Tp> = _Tp;
        pub type vector_pointer = root::std::vector__Base;
        pub type vector_const_pointer = root::std::vector__Alloc_traits;
        pub type vector_reference = root::std::vector__Alloc_traits;
        pub type vector_const_reference = root::std::vector__Alloc_traits;
        pub type vector_iterator = root::__gnu_cxx::__normal_iterator<root::std::vector_pointer>;
        pub type vector_const_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::vector_const_pointer>;
        pub type vector_const_reverse_iterator =
            root::std::reverse_iterator<root::std::vector_const_iterator>;
        pub type vector_reverse_iterator = root::std::reverse_iterator<root::std::vector_iterator>;
        pub type vector_size_type = usize;
        pub type vector_difference_type = isize;
        pub type vector_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug)]
        pub struct vector__Temporary_value {
            pub _M_this: *mut root::std::vector,
            pub __buf: u8,
        }
        pub type _Bit_type = ::std::os::raw::c_ulong;
        pub const std__S_word_bit: root::std::_bindgen_ty_1 = 64;
        pub type _bindgen_ty_1 = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_reference {
            pub _M_p: *mut root::std::_Bit_type,
            pub _M_mask: root::std::_Bit_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_iterator_base {
            pub _M_p: *mut root::std::_Bit_type,
            pub _M_offset: ::std::os::raw::c_uint,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_iterator {
            pub _base: root::std::_Bit_iterator_base,
        }
        pub type _Bit_iterator_reference = root::std::_Bit_reference;
        pub type _Bit_iterator_pointer = *mut root::std::_Bit_reference;
        pub type _Bit_iterator_iterator = root::std::_Bit_iterator;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Bit_const_iterator {
            pub _base: root::std::_Bit_iterator_base,
        }
        pub type _Bit_const_iterator_reference = bool;
        pub type _Bit_const_iterator_const_reference = bool;
        pub type _Bit_const_iterator_pointer = *const bool;
        pub type _Bit_const_iterator_const_iterator = root::std::_Bit_const_iterator;
        #[repr(C)]
        pub struct _Bvector_base {
            pub _M_impl: root::std::_Bvector_base__Bvector_impl,
        }
        pub type _Bvector_base__Bit_alloc_type = [u8; 0usize];
        pub type _Bvector_base__Bit_alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Bvector_base__Bit_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl_data {
            pub _M_start: root::std::_Bit_iterator,
            pub _M_finish: root::std::_Bit_iterator,
            pub _M_end_of_storage: root::std::_Bvector_base__Bit_pointer,
        }
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl {
            pub _base_1: root::std::_Bvector_base__Bvector_impl_data,
        }
        pub type _Bvector_base_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Deque_iterator {
            pub _M_cur: root::std::_Deque_iterator__Elt_pointer,
            pub _M_first: root::std::_Deque_iterator__Elt_pointer,
            pub _M_last: root::std::_Deque_iterator__Elt_pointer,
            pub _M_node: root::std::_Deque_iterator__Map_pointer,
        }
        pub type _Deque_iterator___ptr_to = root::std::pointer_traits;
        pub type _Deque_iterator___iter = root::std::_Deque_iterator;
        pub type _Deque_iterator_iterator = root::std::_Deque_iterator___iter;
        pub type _Deque_iterator_const_iterator = root::std::_Deque_iterator___iter;
        pub type _Deque_iterator__Elt_pointer = root::std::_Deque_iterator___ptr_to;
        pub type _Deque_iterator__Map_pointer = root::std::_Deque_iterator___ptr_to;
        pub type _Deque_iterator_iterator_category = root::std::random_access_iterator_tag;
        pub type _Deque_iterator_value_type<_Tp> = _Tp;
        pub type _Deque_iterator_pointer<_Ptr> = _Ptr;
        pub type _Deque_iterator_reference<_Ref> = _Ref;
        pub type _Deque_iterator_size_type = usize;
        pub type _Deque_iterator_difference_type = isize;
        pub type _Deque_iterator__Self = root::std::_Deque_iterator;
        #[repr(C)]
        pub struct _Deque_base {
            pub _M_impl: root::std::_Deque_base__Deque_impl,
        }
        pub type _Deque_base__Tp_alloc_type = [u8; 0usize];
        pub type _Deque_base__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Deque_base__Ptr = [u8; 0usize];
        pub type _Deque_base__Ptr_const = [u8; 0usize];
        pub type _Deque_base__Map_alloc_type = [u8; 0usize];
        pub type _Deque_base__Map_alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Deque_base_allocator_type<_Alloc> = _Alloc;
        pub type _Deque_base_size_type = [u8; 0usize];
        pub type _Deque_base_iterator = root::std::_Deque_iterator;
        pub type _Deque_base_const_iterator = root::std::_Deque_iterator;
        pub type _Deque_base__Map_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Deque_base__Deque_impl {
            pub _M_map: root::std::_Deque_base__Map_pointer,
            pub _M_map_size: usize,
            pub _M_start: root::std::_Deque_base_iterator,
            pub _M_finish: root::std::_Deque_base_iterator,
        }
        pub const _Deque_base__S_initial_map_size: root::std::_Deque_base__bindgen_ty_1 = 0;
        pub type _Deque_base__bindgen_ty_1 = i32;
        #[repr(C)]
        pub struct deque {
            pub _base: root::std::_Deque_base,
        }
        pub type deque__Base = root::std::_Deque_base;
        pub type deque__Tp_alloc_type = root::std::deque__Base;
        pub type deque__Alloc_traits = root::std::deque__Base;
        pub type deque__Map_pointer = root::std::deque__Base;
        pub type deque_value_type<_Tp> = _Tp;
        pub type deque_pointer = root::std::deque__Alloc_traits;
        pub type deque_const_pointer = root::std::deque__Alloc_traits;
        pub type deque_reference = root::std::deque__Alloc_traits;
        pub type deque_const_reference = root::std::deque__Alloc_traits;
        pub type deque_iterator = root::std::deque__Base;
        pub type deque_const_iterator = root::std::deque__Base;
        pub type deque_const_reverse_iterator =
            root::std::reverse_iterator<root::std::deque_const_iterator>;
        pub type deque_reverse_iterator = root::std::reverse_iterator<root::std::deque_iterator>;
        pub type deque_size_type = usize;
        pub type deque_difference_type = isize;
        pub type deque_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct queue<_Sequence> {
            pub c: _Sequence,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
        }
        pub type queue__Uses = u8;
        pub type queue_value_type = [u8; 0usize];
        pub type queue_reference = [u8; 0usize];
        pub type queue_const_reference = [u8; 0usize];
        pub type queue_size_type = [u8; 0usize];
        pub type queue_container_type<_Sequence> = _Sequence;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct priority_queue<_Sequence, _Compare> {
            pub c: _Sequence,
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        pub type priority_queue__Uses = u8;
        pub type priority_queue_value_type = [u8; 0usize];
        pub type priority_queue_reference = [u8; 0usize];
        pub type priority_queue_const_reference = [u8; 0usize];
        pub type priority_queue_size_type = [u8; 0usize];
        pub type priority_queue_container_type<_Sequence> = _Sequence;
        pub type priority_queue_value_compare<_Compare> = _Compare;
        #[repr(C)]
        #[derive(Debug)]
        pub struct locale {
            pub _M_impl: *mut root::std::locale__Impl,
        }
        pub type locale_category = ::std::os::raw::c_int;
        pub const locale__S_categories_size: root::std::locale__bindgen_ty_1 = 12;
        pub type locale__bindgen_ty_1 = u32;
        pub const locale_none: root::std::locale_category = 0;
        pub const locale_ctype: root::std::locale_category = 1;
        pub const locale_numeric: root::std::locale_category = 2;
        pub const locale_collate: root::std::locale_category = 4;
        pub const locale_time: root::std::locale_category = 8;
        pub const locale_monetary: root::std::locale_category = 16;
        pub const locale_messages: root::std::locale_category = 32;
        pub const locale_all: root::std::locale_category = 63;
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale10_S_classicE"]
            pub static mut locale__S_classic: *mut root::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale9_S_globalE"]
            pub static mut locale__S_global: *mut root::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale13_S_categoriesE"]
            pub static locale__S_categories: *const *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale7_S_onceE"]
            pub static mut locale__S_once: root::__gthread_once_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale17_S_twinned_facetsE"]
            pub static mut locale__S_twinned_facets: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt6locale4nameB5cxx11Ev"]
            pub fn locale_name(this: *const root::std::locale) -> root::std::__cxx11::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale6globalERKS_"]
            pub fn locale_global(__loc: *const root::std::locale) -> root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale7classicEv"]
            pub fn locale_classic() -> *const root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1Ev"]
            pub fn locale_locale(this: *mut root::std::locale);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_"]
            pub fn locale_locale1(this: *mut root::std::locale, __other: *const root::std::locale);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1EPKc"]
            pub fn locale_locale2(this: *mut root::std::locale, __s: *const ::std::os::raw::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_PKci"]
            pub fn locale_locale3(
                this: *mut root::std::locale,
                __base: *const root::std::locale,
                __s: *const ::std::os::raw::c_char,
                __cat: root::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_S1_i"]
            pub fn locale_locale4(
                this: *mut root::std::locale,
                __base: *const root::std::locale,
                __add: *const root::std::locale,
                __cat: root::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeD1Ev"]
            pub fn locale_locale_destructor(this: *mut root::std::locale);
        }
        impl locale {
            #[inline]
            pub unsafe fn name(&self) -> root::std::__cxx11::string {
                locale_name(self)
            }
            #[inline]
            pub unsafe fn global(__loc: *const root::std::locale) -> root::std::locale {
                locale_global(__loc)
            }
            #[inline]
            pub unsafe fn classic() -> *const root::std::locale {
                locale_classic()
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(__other: *const root::std::locale) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale1(&mut __bindgen_tmp, __other);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(__s: *const ::std::os::raw::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale2(&mut __bindgen_tmp, __s);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new3(
                __base: *const root::std::locale,
                __s: *const ::std::os::raw::c_char,
                __cat: root::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale3(&mut __bindgen_tmp, __base, __s, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new4(
                __base: *const root::std::locale,
                __add: *const root::std::locale,
                __cat: root::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale4(&mut __bindgen_tmp, __base, __add, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                locale_locale_destructor(self)
            }
        }
        #[repr(C)]
        pub struct locale_facet__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct locale_facet {
            pub vtable_: *const locale_facet__bindgen_vtable,
            pub _M_refcount: root::_Atomic_word,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct locale_facet___shim {
            _unused: [u8; 0],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet11_S_c_localeE"]
            pub static mut locale_facet__S_c_locale: root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet9_S_c_nameE"]
            pub static mut locale_facet__S_c_name: [::std::os::raw::c_char; 2usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet7_S_onceE"]
            pub static mut locale_facet__S_once: root::__gthread_once_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet18_S_create_c_localeERP15__locale_structPKcS2_"]
            pub fn locale_facet__S_create_c_locale(
                __cloc: *mut root::std::__c_locale,
                __s: *const ::std::os::raw::c_char,
                __old: root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet17_S_clone_c_localeERP15__locale_struct"]
            pub fn locale_facet__S_clone_c_locale(
                __cloc: *mut root::std::__c_locale,
            ) -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet19_S_destroy_c_localeERP15__locale_struct"]
            pub fn locale_facet__S_destroy_c_locale(__cloc: *mut root::std::__c_locale);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet20_S_lc_ctype_c_localeEP15__locale_structPKc"]
            pub fn locale_facet__S_lc_ctype_c_locale(
                __cloc: root::std::__c_locale,
                __s: *const ::std::os::raw::c_char,
            ) -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet15_S_get_c_localeEv"]
            pub fn locale_facet__S_get_c_locale() -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet13_S_get_c_nameEv"]
            pub fn locale_facet__S_get_c_name() -> *const ::std::os::raw::c_char;
        }
        impl locale_facet {
            #[inline]
            pub unsafe fn _S_create_c_locale(
                __cloc: *mut root::std::__c_locale,
                __s: *const ::std::os::raw::c_char,
                __old: root::std::__c_locale,
            ) {
                locale_facet__S_create_c_locale(__cloc, __s, __old)
            }
            #[inline]
            pub unsafe fn _S_clone_c_locale(
                __cloc: *mut root::std::__c_locale,
            ) -> root::std::__c_locale {
                locale_facet__S_clone_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_destroy_c_locale(__cloc: *mut root::std::__c_locale) {
                locale_facet__S_destroy_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_lc_ctype_c_locale(
                __cloc: root::std::__c_locale,
                __s: *const ::std::os::raw::c_char,
            ) -> root::std::__c_locale {
                locale_facet__S_lc_ctype_c_locale(__cloc, __s)
            }
            #[inline]
            pub unsafe fn _S_get_c_locale() -> root::std::__c_locale {
                locale_facet__S_get_c_locale()
            }
            #[inline]
            pub unsafe fn _S_get_c_name() -> *const ::std::os::raw::c_char {
                locale_facet__S_get_c_name()
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facetD1Ev"]
            pub fn locale_facet_facet_destructor(this: *mut root::std::locale_facet);
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct locale_id {
            pub _M_index: usize,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale2id11_S_refcountE"]
            pub static mut locale_id__S_refcount: root::_Atomic_word;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt6locale2id5_M_idEv"]
            pub fn locale_id__M_id(this: *const root::std::locale_id) -> usize;
        }
        impl locale_id {
            #[inline]
            pub unsafe fn _M_id(&self) -> usize {
                locale_id__M_id(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct locale__Impl {
            pub _M_refcount: root::_Atomic_word,
            pub _M_facets: *mut *const root::std::locale_facet,
            pub _M_facets_size: usize,
            pub _M_caches: *mut *const root::std::locale_facet,
            pub _M_names: *mut ::std::os::raw::c_char,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl11_S_id_ctypeE"]
            pub static mut locale__Impl__S_id_ctype: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_numericE"]
            pub static mut locale__Impl__S_id_numeric: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_collateE"]
            pub static mut locale__Impl__S_id_collate: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl10_S_id_timeE"]
            pub static mut locale__Impl__S_id_time: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_monetaryE"]
            pub static mut locale__Impl__S_id_monetary: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_messagesE"]
            pub static mut locale__Impl__S_id_messages: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl19_S_facet_categoriesE"]
            pub static mut locale__Impl__S_facet_categories:
                [*const *const root::std::locale_id; 0usize];
        }
        pub type collate_char_type<_CharT> = _CharT;
        pub type collate_string_type = root::std::__cxx11::basic_string<_CharT>;
        extern "C" {
            pub static mut id: root::std::locale_id;
        }
        pub type collate_byname_char_type<_CharT> = _CharT;
        pub type collate_byname_string_type = root::std::__cxx11::basic_string<_CharT>;
        pub const errc_address_family_not_supported: root::std::errc = 97;
        pub const errc_address_in_use: root::std::errc = 98;
        pub const errc_address_not_available: root::std::errc = 99;
        pub const errc_already_connected: root::std::errc = 106;
        pub const errc_argument_list_too_long: root::std::errc = 7;
        pub const errc_argument_out_of_domain: root::std::errc = 33;
        pub const errc_bad_address: root::std::errc = 14;
        pub const errc_bad_file_descriptor: root::std::errc = 9;
        pub const errc_bad_message: root::std::errc = 74;
        pub const errc_broken_pipe: root::std::errc = 32;
        pub const errc_connection_aborted: root::std::errc = 103;
        pub const errc_connection_already_in_progress: root::std::errc = 114;
        pub const errc_connection_refused: root::std::errc = 111;
        pub const errc_connection_reset: root::std::errc = 104;
        pub const errc_cross_device_link: root::std::errc = 18;
        pub const errc_destination_address_required: root::std::errc = 89;
        pub const errc_device_or_resource_busy: root::std::errc = 16;
        pub const errc_directory_not_empty: root::std::errc = 39;
        pub const errc_executable_format_error: root::std::errc = 8;
        pub const errc_file_exists: root::std::errc = 17;
        pub const errc_file_too_large: root::std::errc = 27;
        pub const errc_filename_too_long: root::std::errc = 36;
        pub const errc_function_not_supported: root::std::errc = 38;
        pub const errc_host_unreachable: root::std::errc = 113;
        pub const errc_identifier_removed: root::std::errc = 43;
        pub const errc_illegal_byte_sequence: root::std::errc = 84;
        pub const errc_inappropriate_io_control_operation: root::std::errc = 25;
        pub const errc_interrupted: root::std::errc = 4;
        pub const errc_invalid_argument: root::std::errc = 22;
        pub const errc_invalid_seek: root::std::errc = 29;
        pub const errc_io_error: root::std::errc = 5;
        pub const errc_is_a_directory: root::std::errc = 21;
        pub const errc_message_size: root::std::errc = 90;
        pub const errc_network_down: root::std::errc = 100;
        pub const errc_network_reset: root::std::errc = 102;
        pub const errc_network_unreachable: root::std::errc = 101;
        pub const errc_no_buffer_space: root::std::errc = 105;
        pub const errc_no_child_process: root::std::errc = 10;
        pub const errc_no_link: root::std::errc = 67;
        pub const errc_no_lock_available: root::std::errc = 37;
        pub const errc_no_message_available: root::std::errc = 61;
        pub const errc_no_message: root::std::errc = 42;
        pub const errc_no_protocol_option: root::std::errc = 92;
        pub const errc_no_space_on_device: root::std::errc = 28;
        pub const errc_no_stream_resources: root::std::errc = 63;
        pub const errc_no_such_device_or_address: root::std::errc = 6;
        pub const errc_no_such_device: root::std::errc = 19;
        pub const errc_no_such_file_or_directory: root::std::errc = 2;
        pub const errc_no_such_process: root::std::errc = 3;
        pub const errc_not_a_directory: root::std::errc = 20;
        pub const errc_not_a_socket: root::std::errc = 88;
        pub const errc_not_a_stream: root::std::errc = 60;
        pub const errc_not_connected: root::std::errc = 107;
        pub const errc_not_enough_memory: root::std::errc = 12;
        pub const errc_not_supported: root::std::errc = 95;
        pub const errc_operation_canceled: root::std::errc = 125;
        pub const errc_operation_in_progress: root::std::errc = 115;
        pub const errc_operation_not_permitted: root::std::errc = 1;
        pub const errc_operation_not_supported: root::std::errc = 95;
        pub const errc_operation_would_block: root::std::errc = 11;
        pub const errc_owner_dead: root::std::errc = 130;
        pub const errc_permission_denied: root::std::errc = 13;
        pub const errc_protocol_error: root::std::errc = 71;
        pub const errc_protocol_not_supported: root::std::errc = 93;
        pub const errc_read_only_file_system: root::std::errc = 30;
        pub const errc_resource_deadlock_would_occur: root::std::errc = 35;
        pub const errc_resource_unavailable_try_again: root::std::errc = 11;
        pub const errc_result_out_of_range: root::std::errc = 34;
        pub const errc_state_not_recoverable: root::std::errc = 131;
        pub const errc_stream_timeout: root::std::errc = 62;
        pub const errc_text_file_busy: root::std::errc = 26;
        pub const errc_timed_out: root::std::errc = 110;
        pub const errc_too_many_files_open_in_system: root::std::errc = 23;
        pub const errc_too_many_files_open: root::std::errc = 24;
        pub const errc_too_many_links: root::std::errc = 31;
        pub const errc_too_many_symbolic_link_levels: root::std::errc = 40;
        pub const errc_value_too_large: root::std::errc = 75;
        pub const errc_wrong_protocol_type: root::std::errc = 91;
        pub type errc = i32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_error_code_enum {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_error_condition_enum {
            pub _base: root::std::false_type,
        }
        pub mod _V2 {
            
            use self::super::super::super::root;
            #[repr(C)]
            pub struct error_category__bindgen_vtable(::std::os::raw::c_void);
            #[repr(C)]
            #[derive(Debug)]
            pub struct error_category {
                pub vtable_: *const error_category__bindgen_vtable,
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt3_V214error_categoryD1Ev"]
                pub fn error_category_error_category_destructor(
                    this: *mut root::std::_V2::error_category,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt3_V214error_category23default_error_conditionEi"]
                pub fn error_category_default_error_condition(
                    this: *mut ::std::os::raw::c_void,
                    __i: ::std::os::raw::c_int,
                ) -> root::std::error_condition;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition"]
                pub fn error_category_equivalent(
                    this: *mut ::std::os::raw::c_void,
                    __i: ::std::os::raw::c_int,
                    __cond: *const root::std::error_condition,
                ) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentERKSt10error_codei"]
                pub fn error_category_equivalent1(
                    this: *mut ::std::os::raw::c_void,
                    __code: *const root::std::error_code,
                    __i: ::std::os::raw::c_int,
                ) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt3_V215system_categoryEv"]
                pub fn system_category() -> *const root::std::_V2::error_category;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt3_V216generic_categoryEv"]
                pub fn generic_category() -> *const root::std::_V2::error_category;
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15make_error_codeSt4errc"]
            pub fn make_error_code(arg1: root::std::errc) -> root::std::error_code;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct error_code {
            pub _M_value: ::std::os::raw::c_int,
            pub _M_cat: *const root::std::_V2::error_category,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10error_code23default_error_conditionEv"]
            pub fn error_code_default_error_condition(
                this: *const root::std::error_code,
            ) -> root::std::error_condition;
        }
        impl error_code {
            #[inline]
            pub unsafe fn default_error_condition(&self) -> root::std::error_condition {
                error_code_default_error_condition(self)
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20make_error_conditionSt4errc"]
            pub fn make_error_condition(arg1: root::std::errc) -> root::std::error_condition;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct error_condition {
            pub _M_value: ::std::os::raw::c_int,
            pub _M_cat: *const root::std::_V2::error_category,
        }
        #[repr(C)]
        pub struct system_error {
            pub _base: root::std::runtime_error,
            pub _M_code: root::std::error_code,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorD1Ev"]
            pub fn system_error_system_error_destructor(this: *mut root::std::system_error);
        }
        pub const _Ios_Fmtflags__S_boolalpha: root::std::_Ios_Fmtflags = 1;
        pub const _Ios_Fmtflags__S_dec: root::std::_Ios_Fmtflags = 2;
        pub const _Ios_Fmtflags__S_fixed: root::std::_Ios_Fmtflags = 4;
        pub const _Ios_Fmtflags__S_hex: root::std::_Ios_Fmtflags = 8;
        pub const _Ios_Fmtflags__S_internal: root::std::_Ios_Fmtflags = 16;
        pub const _Ios_Fmtflags__S_left: root::std::_Ios_Fmtflags = 32;
        pub const _Ios_Fmtflags__S_oct: root::std::_Ios_Fmtflags = 64;
        pub const _Ios_Fmtflags__S_right: root::std::_Ios_Fmtflags = 128;
        pub const _Ios_Fmtflags__S_scientific: root::std::_Ios_Fmtflags = 256;
        pub const _Ios_Fmtflags__S_showbase: root::std::_Ios_Fmtflags = 512;
        pub const _Ios_Fmtflags__S_showpoint: root::std::_Ios_Fmtflags = 1024;
        pub const _Ios_Fmtflags__S_showpos: root::std::_Ios_Fmtflags = 2048;
        pub const _Ios_Fmtflags__S_skipws: root::std::_Ios_Fmtflags = 4096;
        pub const _Ios_Fmtflags__S_unitbuf: root::std::_Ios_Fmtflags = 8192;
        pub const _Ios_Fmtflags__S_uppercase: root::std::_Ios_Fmtflags = 16384;
        pub const _Ios_Fmtflags__S_adjustfield: root::std::_Ios_Fmtflags = 176;
        pub const _Ios_Fmtflags__S_basefield: root::std::_Ios_Fmtflags = 74;
        pub const _Ios_Fmtflags__S_floatfield: root::std::_Ios_Fmtflags = 260;
        pub const _Ios_Fmtflags__S_ios_fmtflags_end: root::std::_Ios_Fmtflags = 65536;
        pub const _Ios_Fmtflags__S_ios_fmtflags_max: root::std::_Ios_Fmtflags = 2147483647;
        pub const _Ios_Fmtflags__S_ios_fmtflags_min: root::std::_Ios_Fmtflags = -2147483648;
        pub type _Ios_Fmtflags = i32;
        pub const _Ios_Openmode__S_app: root::std::_Ios_Openmode = 1;
        pub const _Ios_Openmode__S_ate: root::std::_Ios_Openmode = 2;
        pub const _Ios_Openmode__S_bin: root::std::_Ios_Openmode = 4;
        pub const _Ios_Openmode__S_in: root::std::_Ios_Openmode = 8;
        pub const _Ios_Openmode__S_out: root::std::_Ios_Openmode = 16;
        pub const _Ios_Openmode__S_trunc: root::std::_Ios_Openmode = 32;
        pub const _Ios_Openmode__S_ios_openmode_end: root::std::_Ios_Openmode = 65536;
        pub const _Ios_Openmode__S_ios_openmode_max: root::std::_Ios_Openmode = 2147483647;
        pub const _Ios_Openmode__S_ios_openmode_min: root::std::_Ios_Openmode = -2147483648;
        pub type _Ios_Openmode = i32;
        pub const _Ios_Iostate__S_goodbit: root::std::_Ios_Iostate = 0;
        pub const _Ios_Iostate__S_badbit: root::std::_Ios_Iostate = 1;
        pub const _Ios_Iostate__S_eofbit: root::std::_Ios_Iostate = 2;
        pub const _Ios_Iostate__S_failbit: root::std::_Ios_Iostate = 4;
        pub const _Ios_Iostate__S_ios_iostate_end: root::std::_Ios_Iostate = 65536;
        pub const _Ios_Iostate__S_ios_iostate_max: root::std::_Ios_Iostate = 2147483647;
        pub const _Ios_Iostate__S_ios_iostate_min: root::std::_Ios_Iostate = -2147483648;
        pub type _Ios_Iostate = i32;
        pub const _Ios_Seekdir__S_beg: root::std::_Ios_Seekdir = 0;
        pub const _Ios_Seekdir__S_cur: root::std::_Ios_Seekdir = 1;
        pub const _Ios_Seekdir__S_end: root::std::_Ios_Seekdir = 2;
        pub const _Ios_Seekdir__S_ios_seekdir_end: root::std::_Ios_Seekdir = 65536;
        pub type _Ios_Seekdir = u32;
        pub const io_errc_stream: root::std::io_errc = 1;
        pub type io_errc = i32;
        extern "C" {
            #[link_name = "\u{1}_ZSt17iostream_categoryv"]
            pub fn iostream_category() -> *const root::std::_V2::error_category;
        }
        #[repr(C)]
        pub struct ios_base__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct ios_base {
            pub vtable_: *const ios_base__bindgen_vtable,
            pub _M_precision: root::std::streamsize,
            pub _M_width: root::std::streamsize,
            pub _M_flags: root::std::ios_base_fmtflags,
            pub _M_exception: root::std::ios_base_iostate,
            pub _M_streambuf_state: root::std::ios_base_iostate,
            pub _M_callbacks: *mut root::std::ios_base__Callback_list,
            pub _M_word_zero: root::std::ios_base__Words,
            pub _M_local_word: [root::std::ios_base__Words; 8usize],
            pub _M_word_size: ::std::os::raw::c_int,
            pub _M_word: *mut root::std::ios_base__Words,
            pub _M_ios_locale: root::std::locale,
        }
        #[repr(C)]
        pub struct ios_base_failure {
            pub _base: root::std::system_error,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ios_base_failure_failure(
                this: *mut root::std::ios_base_failure,
                __str: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10error_code"]
            pub fn ios_base_failure_failure1(
                this: *mut root::std::ios_base_failure,
                arg1: *const root::std::__cxx11::string,
                arg2: *const root::std::error_code,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1EPKcRKSt10error_code"]
            pub fn ios_base_failure_failure2(
                this: *mut root::std::ios_base_failure,
                arg1: *const ::std::os::raw::c_char,
                arg2: *const root::std::error_code,
            );
        }
        impl ios_base_failure {
            #[inline]
            pub unsafe fn new(__str: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_failure_failure(&mut __bindgen_tmp, __str);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(
                arg1: *const root::std::__cxx11::string,
                arg2: *const root::std::error_code,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_failure_failure1(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const root::std::error_code,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_failure_failure2(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
        }
        pub use self::super::super::root::std::_Ios_Fmtflags as ios_base_fmtflags;
        pub use self::super::super::root::std::_Ios_Iostate as ios_base_iostate;
        pub use self::super::super::root::std::_Ios_Openmode as ios_base_openmode;
        pub use self::super::super::root::std::_Ios_Seekdir as ios_base_seekdir;
        pub type ios_base_io_state = ::std::os::raw::c_int;
        pub type ios_base_open_mode = ::std::os::raw::c_int;
        pub type ios_base_seek_dir = ::std::os::raw::c_int;
        pub type ios_base_streampos = root::std::streampos;
        pub type ios_base_streamoff = root::std::streamoff;
        pub const ios_base_event_erase_event: root::std::ios_base_event = 0;
        pub const ios_base_event_imbue_event: root::std::ios_base_event = 1;
        pub const ios_base_event_copyfmt_event: root::std::ios_base_event = 2;
        pub type ios_base_event = u32;
        pub type ios_base_event_callback = ::std::option::Option<
            unsafe extern "C" fn(
                __e: root::std::ios_base_event,
                __b: *mut root::std::ios_base,
                __i: ::std::os::raw::c_int,
            ),
        >;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ios_base__Callback_list {
            pub _M_next: *mut root::std::ios_base__Callback_list,
            pub _M_fn: root::std::ios_base_event_callback,
            pub _M_index: ::std::os::raw::c_int,
            pub _M_refcount: root::_Atomic_word,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ios_base__Words {
            pub _M_pword: *mut ::std::os::raw::c_void,
            pub _M_iword: ::std::os::raw::c_long,
        }
        pub const ios_base__S_local_word_size: root::std::ios_base__bindgen_ty_1 = 8;
        pub type ios_base__bindgen_ty_1 = u32;
        #[repr(C)]
        #[derive(Debug)]
        pub struct ios_base_Init {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4Init11_S_refcountE"]
            pub static mut ios_base_Init__S_refcount: root::_Atomic_word;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4Init20_S_synced_with_stdioE"]
            pub static mut ios_base_Init__S_synced_with_stdio: bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4InitC1Ev"]
            pub fn ios_base_Init_Init(this: *mut root::std::ios_base_Init);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4InitD1Ev"]
            pub fn ios_base_Init_Init_destructor(this: *mut root::std::ios_base_Init);
        }
        impl ios_base_Init {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_Init_Init(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                ios_base_Init_Init_destructor(self)
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9boolalphaE"]
            pub static ios_base_boolalpha: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3decE"]
            pub static ios_base_dec: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5fixedE"]
            pub static ios_base_fixed: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3hexE"]
            pub static ios_base_hex: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base8internalE"]
            pub static ios_base_internal: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4leftE"]
            pub static ios_base_left: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3octE"]
            pub static ios_base_oct: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5rightE"]
            pub static ios_base_right: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base10scientificE"]
            pub static ios_base_scientific: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base8showbaseE"]
            pub static ios_base_showbase: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9showpointE"]
            pub static ios_base_showpoint: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7showposE"]
            pub static ios_base_showpos: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6skipwsE"]
            pub static ios_base_skipws: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7unitbufE"]
            pub static ios_base_unitbuf: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9uppercaseE"]
            pub static ios_base_uppercase: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base11adjustfieldE"]
            pub static ios_base_adjustfield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9basefieldE"]
            pub static ios_base_basefield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base10floatfieldE"]
            pub static ios_base_floatfield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6badbitE"]
            pub static ios_base_badbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6eofbitE"]
            pub static ios_base_eofbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failbitE"]
            pub static ios_base_failbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7goodbitE"]
            pub static ios_base_goodbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3appE"]
            pub static ios_base_app: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3ateE"]
            pub static ios_base_ate: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6binaryE"]
            pub static ios_base_binary: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base2inE"]
            pub static ios_base_in: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3outE"]
            pub static ios_base_out: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5truncE"]
            pub static ios_base_trunc: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3begE"]
            pub static ios_base_beg: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3curE"]
            pub static ios_base_cur: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3endE"]
            pub static ios_base_end: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi"]
            pub fn ios_base_register_callback(
                this: *mut root::std::ios_base,
                __fn: root::std::ios_base_event_callback,
                __index: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base17_M_call_callbacksENS_5eventE"]
            pub fn ios_base__M_call_callbacks(
                this: *mut root::std::ios_base,
                __ev: root::std::ios_base_event,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base20_M_dispose_callbacksEv"]
            pub fn ios_base__M_dispose_callbacks(this: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base13_M_grow_wordsEib"]
            pub fn ios_base__M_grow_words(
                this: *mut root::std::ios_base,
                __index: ::std::os::raw::c_int,
                __iword: bool,
            ) -> *mut root::std::ios_base__Words;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_initEv"]
            pub fn ios_base__M_init(this: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base15sync_with_stdioEb"]
            pub fn ios_base_sync_with_stdio(__sync: bool) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5imbueERKSt6locale"]
            pub fn ios_base_imbue(
                this: *mut root::std::ios_base,
                __loc: *const root::std::locale,
            ) -> root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6xallocEv"]
            pub fn ios_base_xalloc() -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_moveERS_"]
            pub fn ios_base__M_move(this: *mut root::std::ios_base, arg1: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_swapERS_"]
            pub fn ios_base__M_swap(
                this: *mut root::std::ios_base,
                __rhs: *mut root::std::ios_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_baseC1Ev"]
            pub fn ios_base_ios_base(this: *mut root::std::ios_base);
        }
        impl ios_base {
            #[inline]
            pub unsafe fn register_callback(
                &mut self,
                __fn: root::std::ios_base_event_callback,
                __index: ::std::os::raw::c_int,
            ) {
                ios_base_register_callback(self, __fn, __index)
            }
            #[inline]
            pub unsafe fn _M_call_callbacks(&mut self, __ev: root::std::ios_base_event) {
                ios_base__M_call_callbacks(self, __ev)
            }
            #[inline]
            pub unsafe fn _M_dispose_callbacks(&mut self) {
                ios_base__M_dispose_callbacks(self)
            }
            #[inline]
            pub unsafe fn _M_grow_words(
                &mut self,
                __index: ::std::os::raw::c_int,
                __iword: bool,
            ) -> *mut root::std::ios_base__Words {
                ios_base__M_grow_words(self, __index, __iword)
            }
            #[inline]
            pub unsafe fn _M_init(&mut self) {
                ios_base__M_init(self)
            }
            #[inline]
            pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
                ios_base_sync_with_stdio(__sync)
            }
            #[inline]
            pub unsafe fn imbue(&mut self, __loc: *const root::std::locale) -> root::std::locale {
                ios_base_imbue(self, __loc)
            }
            #[inline]
            pub unsafe fn xalloc() -> ::std::os::raw::c_int {
                ios_base_xalloc()
            }
            #[inline]
            pub unsafe fn _M_move(&mut self, arg1: *mut root::std::ios_base) {
                ios_base__M_move(self, arg1)
            }
            #[inline]
            pub unsafe fn _M_swap(&mut self, __rhs: *mut root::std::ios_base) {
                ios_base__M_swap(self, __rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_ios_base(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11D1Ev"]
            pub fn ios_base_failure_failure_destructor(this: *mut root::std::ios_base_failure);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8ios_base7failureB5cxx114whatEv"]
            pub fn ios_base_failure_what(
                this: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_baseD1Ev"]
            pub fn ios_base_ios_base_destructor(this: *mut root::std::ios_base);
        }
        #[repr(C)]
        pub struct basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_streambuf<_CharT> {
            pub vtable_: *const basic_streambuf__bindgen_vtable,
            pub _M_in_beg: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_in_cur: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_in_end: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_beg: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_cur: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_end: *mut root::std::basic_streambuf_char_type<_CharT>,
            pub _M_buf_locale: root::std::locale,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_streambuf_char_type<_CharT> = _CharT;
        pub type basic_streambuf_traits_type<_Traits> = _Traits;
        pub type basic_streambuf_int_type = [u8; 0usize];
        pub type basic_streambuf_pos_type = [u8; 0usize];
        pub type basic_streambuf_off_type = [u8; 0usize];
        pub type basic_streambuf___streambuf_type<_CharT> =
            root::std::basic_streambuf<root::std::basic_streambuf_char_type<_CharT>>;
        extern "C" {
            #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIcSt11char_traitsIcEElPSt15basic_streambufIT_T0_ES6_Rb"]
            pub fn __copy_streambufs_eof(
                __sbin: *mut root::std::basic_streambuf<::std::os::raw::c_char>,
                __sbout: *mut root::std::basic_streambuf<::std::os::raw::c_char>,
                __ineof: *mut bool,
            ) -> root::std::streamsize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIwSt11char_traitsIwEElPSt15basic_streambufIT_T0_ES6_Rb"]
            pub fn __copy_streambufs_eof1(
                __sbin: *mut root::std::basic_streambuf<u32>,
                __sbout: *mut root::std::basic_streambuf<u32>,
                __ineof: *mut bool,
            ) -> root::std::streamsize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ctype_base {
            pub _address: u8,
        }
        pub type ctype_base___to_type = *const ::std::os::raw::c_int;
        pub type ctype_base_mask = ::std::os::raw::c_ushort;
        pub const ctype_base_upper: root::std::ctype_base_mask = 256;
        pub const ctype_base_lower: root::std::ctype_base_mask = 512;
        pub const ctype_base_alpha: root::std::ctype_base_mask = 1024;
        pub const ctype_base_digit: root::std::ctype_base_mask = 2048;
        pub const ctype_base_xdigit: root::std::ctype_base_mask = 4096;
        pub const ctype_base_space: root::std::ctype_base_mask = 8192;
        pub const ctype_base_print: root::std::ctype_base_mask = 16384;
        pub const ctype_base_graph: root::std::ctype_base_mask = 3076;
        pub const ctype_base_cntrl: root::std::ctype_base_mask = 2;
        pub const ctype_base_punct: root::std::ctype_base_mask = 4;
        pub const ctype_base_alnum: root::std::ctype_base_mask = 3072;
        pub const ctype_base_blank: root::std::ctype_base_mask = 1;
        #[repr(C)]
        pub struct istreambuf_iterator<_CharT> {
            pub _M_sbuf: *mut root::std::istreambuf_iterator_streambuf_type<_CharT>,
            pub _M_c: root::std::istreambuf_iterator_int_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type istreambuf_iterator_char_type<_CharT> = _CharT;
        pub type istreambuf_iterator_traits_type<_Traits> = _Traits;
        pub type istreambuf_iterator_int_type = [u8; 0usize];
        pub type istreambuf_iterator_streambuf_type<_CharT> = root::std::basic_streambuf<_CharT>;
        pub type istreambuf_iterator_istream_type<_CharT> = root::std::basic_istream<_CharT>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ostreambuf_iterator<_CharT> {
            pub _M_sbuf: *mut root::std::ostreambuf_iterator_streambuf_type<_CharT>,
            pub _M_failed: bool,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type ostreambuf_iterator_char_type<_CharT> = _CharT;
        pub type ostreambuf_iterator_traits_type<_Traits> = _Traits;
        pub type ostreambuf_iterator_streambuf_type<_CharT> = root::std::basic_streambuf<_CharT>;
        pub type ostreambuf_iterator_ostream_type<_CharT> = root::std::basic_ostream<_CharT>;
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut f32,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v1(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut f64,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v2(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut f64,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __pad {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct __ctype_abstract_base {
            pub _base: root::std::locale_facet,
        }
        pub type __ctype_abstract_base_char_type<_CharT> = _CharT;
        #[repr(C)]
        #[derive(Debug)]
        pub struct ctype {
            pub _base: root::std::__ctype_abstract_base,
        }
        pub type ctype_char_type<_CharT> = _CharT;
        pub type ctype_mask = root::std::__ctype_abstract_base;
        #[repr(C)]
        #[derive(Debug)]
        pub struct ctype_byname {
            pub _base: root::std::ctype,
        }
        pub type ctype_byname_mask = root::std::ctype;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __num_base {
            pub _address: u8,
        }
        pub const __num_base__S_ominus: root::std::__num_base__bindgen_ty_1 = 0;
        pub const __num_base__S_oplus: root::std::__num_base__bindgen_ty_1 = 1;
        pub const __num_base__S_ox: root::std::__num_base__bindgen_ty_1 = 2;
        pub const __num_base__S_oX: root::std::__num_base__bindgen_ty_1 = 3;
        pub const __num_base__S_odigits: root::std::__num_base__bindgen_ty_1 = 4;
        pub const __num_base__S_odigits_end: root::std::__num_base__bindgen_ty_1 = 20;
        pub const __num_base__S_oudigits: root::std::__num_base__bindgen_ty_1 = 20;
        pub const __num_base__S_oudigits_end: root::std::__num_base__bindgen_ty_1 = 36;
        pub const __num_base__S_oe: root::std::__num_base__bindgen_ty_1 = 18;
        pub const __num_base__S_oE: root::std::__num_base__bindgen_ty_1 = 34;
        pub const __num_base__S_oend: root::std::__num_base__bindgen_ty_1 = 36;
        pub type __num_base__bindgen_ty_1 = u32;
        pub const __num_base__S_iminus: root::std::__num_base__bindgen_ty_2 = 0;
        pub const __num_base__S_iplus: root::std::__num_base__bindgen_ty_2 = 1;
        pub const __num_base__S_ix: root::std::__num_base__bindgen_ty_2 = 2;
        pub const __num_base__S_iX: root::std::__num_base__bindgen_ty_2 = 3;
        pub const __num_base__S_izero: root::std::__num_base__bindgen_ty_2 = 4;
        pub const __num_base__S_ie: root::std::__num_base__bindgen_ty_2 = 18;
        pub const __num_base__S_iE: root::std::__num_base__bindgen_ty_2 = 24;
        pub const __num_base__S_iend: root::std::__num_base__bindgen_ty_2 = 26;
        pub type __num_base__bindgen_ty_2 = u32;
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base12_S_atoms_outE"]
            pub static mut __num_base__S_atoms_out: *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base11_S_atoms_inE"]
            pub static mut __num_base__S_atoms_in: *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base15_S_format_floatERKSt8ios_basePcc"]
            pub fn __num_base__S_format_float(
                __io: *const root::std::ios_base,
                __fptr: *mut ::std::os::raw::c_char,
                __mod: ::std::os::raw::c_char,
            );
        }
        impl __num_base {
            #[inline]
            pub unsafe fn _S_format_float(
                __io: *const root::std::ios_base,
                __fptr: *mut ::std::os::raw::c_char,
                __mod: ::std::os::raw::c_char,
            ) {
                __num_base__S_format_float(__io, __fptr, __mod)
            }
        }
        #[repr(C)]
        pub struct __numpunct_cache<_CharT> {
            pub _base: root::std::locale_facet,
            pub _M_grouping: *const ::std::os::raw::c_char,
            pub _M_grouping_size: usize,
            pub _M_use_grouping: bool,
            pub _M_truename: *const _CharT,
            pub _M_truename_size: usize,
            pub _M_falsename: *const _CharT,
            pub _M_falsename_size: usize,
            pub _M_decimal_point: _CharT,
            pub _M_thousands_sep: _CharT,
            pub _M_atoms_out: [_CharT; 36usize],
            pub _M_atoms_in: [_CharT; 26usize],
            pub _M_allocated: bool,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct num_get {
            pub _base: root::std::locale_facet,
        }
        pub type num_get_char_type<_CharT> = _CharT;
        pub type num_get_iter_type<_InIter> = _InIter;
        #[repr(C)]
        #[derive(Debug)]
        pub struct num_put {
            pub _base: root::std::locale_facet,
        }
        pub type num_put_char_type<_CharT> = _CharT;
        pub type num_put_iter_type<_OutIter> = _OutIter;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __use_cache {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17__verify_groupingPKcmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn __verify_grouping(
                __grouping: *const ::std::os::raw::c_char,
                __grouping_size: usize,
                __grouping_tmp: *const root::std::__cxx11::string,
            ) -> bool;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_ios<_CharT> {
            pub _base: root::std::ios_base,
            pub _M_tie: *mut root::std::basic_ostream<_CharT>,
            pub _M_fill: root::std::basic_ios_char_type<_CharT>,
            pub _M_fill_init: bool,
            pub _M_streambuf: *mut root::std::basic_streambuf<_CharT>,
            pub _M_ctype: *const root::std::basic_ios___ctype_type,
            pub _M_num_put: *const root::std::basic_ios___num_put_type,
            pub _M_num_get: *const root::std::basic_ios___num_get_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ios_char_type<_CharT> = _CharT;
        pub type basic_ios_int_type = [u8; 0usize];
        pub type basic_ios_pos_type = [u8; 0usize];
        pub type basic_ios_off_type = [u8; 0usize];
        pub type basic_ios_traits_type<_Traits> = _Traits;
        pub type basic_ios___ctype_type = root::std::ctype;
        pub type basic_ios___num_put_type = root::std::num_put;
        pub type basic_ios___num_get_type = root::std::num_get;
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_ostream<_CharT> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ostream_char_type<_CharT> = _CharT;
        pub type basic_ostream_int_type = [u8; 0usize];
        pub type basic_ostream_pos_type = [u8; 0usize];
        pub type basic_ostream_off_type = [u8; 0usize];
        pub type basic_ostream_traits_type<_Traits> = _Traits;
        pub type basic_ostream___streambuf_type<_CharT> = root::std::basic_streambuf<_CharT>;
        pub type basic_ostream___ios_type<_CharT> = root::std::basic_ios<_CharT>;
        pub type basic_ostream___ostream_type<_CharT> = root::std::basic_ostream<_CharT>;
        pub type basic_ostream___num_put_type = root::std::num_put;
        pub type basic_ostream___ctype_type = root::std::ctype;
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_ostream_sentry {
            pub _M_ok: bool,
            pub _M_os: *mut root::std::basic_ostream<_CharT>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_convertible_to_basic_ostream_impl {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_ostream_impl___ostream_type = ::std::os::raw::c_void;
        pub type __do_is_convertible_to_basic_ostream_impl = root::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_convertible_to_basic_ostream {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_ostream_type = root::std::__not_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_insertable {
            pub _base: root::std::false_type,
        }
        pub type __rvalue_ostream_type = root::std::__is_convertible_to_basic_ostream;
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_istream<_CharT> {
            pub _M_gcount: root::std::streamsize,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_istream_char_type<_CharT> = _CharT;
        pub type basic_istream_int_type = [u8; 0usize];
        pub type basic_istream_pos_type = [u8; 0usize];
        pub type basic_istream_off_type = [u8; 0usize];
        pub type basic_istream_traits_type<_Traits> = _Traits;
        pub type basic_istream___streambuf_type<_CharT> = root::std::basic_streambuf<_CharT>;
        pub type basic_istream___ios_type<_CharT> = root::std::basic_ios<_CharT>;
        pub type basic_istream___istream_type<_CharT> = root::std::basic_istream<_CharT>;
        pub type basic_istream___num_get_type = root::std::num_get;
        pub type basic_istream___ctype_type = root::std::ctype;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct basic_istream_sentry {
            pub _M_ok: bool,
        }
        pub type basic_istream_sentry_traits_type = _Traits;
        pub type basic_istream_sentry___streambuf_type = root::std::basic_streambuf<_CharT>;
        pub type basic_istream_sentry___istream_type = root::std::basic_istream<_CharT>;
        pub type basic_istream_sentry___ctype_type = root::std::basic_istream___ctype_type;
        pub type basic_istream_sentry___int_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug)]
        pub struct basic_iostream<_CharT> {
            pub _base: root::std::basic_istream<_CharT>,
            pub _base_1: root::std::basic_ostream<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_iostream_char_type<_CharT> = _CharT;
        pub type basic_iostream_int_type = [u8; 0usize];
        pub type basic_iostream_pos_type = [u8; 0usize];
        pub type basic_iostream_off_type = [u8; 0usize];
        pub type basic_iostream_traits_type<_Traits> = _Traits;
        pub type basic_iostream___istream_type<_CharT> = root::std::basic_istream<_CharT>;
        pub type basic_iostream___ostream_type<_CharT> = root::std::basic_ostream<_CharT>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_convertible_to_basic_istream_impl {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_istream_impl___istream_type = ::std::os::raw::c_void;
        pub type __do_is_convertible_to_basic_istream_impl = root::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_convertible_to_basic_istream {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_istream_type = root::std::__not_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_extractable {
            pub _base: root::std::false_type,
        }
        pub type __rvalue_istream_type = root::std::__is_convertible_to_basic_istream;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct codecvt_base {
            pub _address: u8,
        }
        pub const codecvt_base_result_ok: root::std::codecvt_base_result = 0;
        pub const codecvt_base_result_partial: root::std::codecvt_base_result = 1;
        pub const codecvt_base_result_error: root::std::codecvt_base_result = 2;
        pub const codecvt_base_result_noconv: root::std::codecvt_base_result = 3;
        pub type codecvt_base_result = u32;
        #[repr(C)]
        #[derive(Debug)]
        pub struct __codecvt_abstract_base {
            pub _base: root::std::locale_facet,
        }
        pub use self::super::super::root::std::codecvt_base_result as __codecvt_abstract_base_result;
        pub type __codecvt_abstract_base_intern_type<_InternT> = _InternT;
        pub type __codecvt_abstract_base_extern_type<_ExternT> = _ExternT;
        pub type __codecvt_abstract_base_state_type<_StateT> = _StateT;
        #[repr(C)]
        #[derive(Debug)]
        pub struct codecvt {
            pub _base: root::std::__codecvt_abstract_base,
            pub _M_c_locale_codecvt: root::std::__c_locale,
        }
        pub use self::super::super::root::std::codecvt_base_result as codecvt_result;
        pub type codecvt_intern_type<_InternT> = _InternT;
        pub type codecvt_extern_type<_ExternT> = _ExternT;
        pub type codecvt_state_type<_StateT> = _StateT;
        #[repr(C)]
        #[derive(Debug)]
        pub struct codecvt_byname {
            pub _base: root::std::codecvt,
        }
        pub type __c_lock = root::__gthread_mutex_t;
        pub type __c_file = root::FILE;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __basic_file {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct basic_filebuf<_CharT> {
            pub _base: root::std::basic_streambuf<_CharT>,
            pub _M_lock: root::std::__c_lock,
            pub _M_file: root::std::basic_filebuf___file_type,
            pub _M_mode: root::std::ios_base_openmode,
            pub _M_state_beg: root::std::basic_filebuf___state_type,
            pub _M_state_cur: root::std::basic_filebuf___state_type,
            pub _M_state_last: root::std::basic_filebuf___state_type,
            pub _M_buf: *mut root::std::basic_filebuf_char_type<_CharT>,
            pub _M_buf_size: usize,
            pub _M_buf_allocated: bool,
            pub _M_reading: bool,
            pub _M_writing: bool,
            pub _M_pback: root::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_cur_save: *mut root::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_end_save: *mut root::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_init: bool,
            pub _M_codecvt: *const root::std::basic_filebuf___codecvt_type,
            pub _M_ext_buf: *mut ::std::os::raw::c_char,
            pub _M_ext_buf_size: root::std::streamsize,
            pub _M_ext_next: *const ::std::os::raw::c_char,
            pub _M_ext_end: *mut ::std::os::raw::c_char,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_filebuf___chk_state = root::std::__and_;
        pub type basic_filebuf_char_type<_CharT> = _CharT;
        pub type basic_filebuf_traits_type<_Traits> = _Traits;
        pub type basic_filebuf_int_type = [u8; 0usize];
        pub type basic_filebuf_pos_type = [u8; 0usize];
        pub type basic_filebuf_off_type = [u8; 0usize];
        pub type basic_filebuf___streambuf_type<_CharT> =
            root::std::basic_streambuf<root::std::basic_filebuf_char_type<_CharT>>;
        pub type basic_filebuf___filebuf_type<_CharT> =
            root::std::basic_filebuf<root::std::basic_filebuf_char_type<_CharT>>;
        pub type basic_filebuf___file_type = root::std::__basic_file;
        pub type basic_filebuf___state_type = [u8; 0usize];
        pub type basic_filebuf___codecvt_type = root::std::codecvt;
        #[repr(C)]
        pub struct basic_ifstream<_CharT> {
            pub _base: root::std::basic_istream<_CharT>,
            pub _M_filebuf: root::std::basic_ifstream___filebuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ifstream_char_type<_CharT> = _CharT;
        pub type basic_ifstream_traits_type<_Traits> = _Traits;
        pub type basic_ifstream_int_type = [u8; 0usize];
        pub type basic_ifstream_pos_type = [u8; 0usize];
        pub type basic_ifstream_off_type = [u8; 0usize];
        pub type basic_ifstream___filebuf_type<_CharT> =
            root::std::basic_filebuf<root::std::basic_ifstream_char_type<_CharT>>;
        pub type basic_ifstream___istream_type<_CharT> =
            root::std::basic_istream<root::std::basic_ifstream_char_type<_CharT>>;
        #[repr(C)]
        pub struct basic_ofstream<_CharT> {
            pub _base: root::std::basic_ostream<_CharT>,
            pub _M_filebuf: root::std::basic_ofstream___filebuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ofstream_char_type<_CharT> = _CharT;
        pub type basic_ofstream_traits_type<_Traits> = _Traits;
        pub type basic_ofstream_int_type = [u8; 0usize];
        pub type basic_ofstream_pos_type = [u8; 0usize];
        pub type basic_ofstream_off_type = [u8; 0usize];
        pub type basic_ofstream___filebuf_type<_CharT> =
            root::std::basic_filebuf<root::std::basic_ofstream_char_type<_CharT>>;
        pub type basic_ofstream___ostream_type<_CharT> =
            root::std::basic_ostream<root::std::basic_ofstream_char_type<_CharT>>;
        #[repr(C)]
        pub struct basic_fstream<_CharT> {
            pub _base: root::std::basic_iostream<_CharT>,
            pub _M_filebuf: root::std::basic_fstream___filebuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_fstream_char_type<_CharT> = _CharT;
        pub type basic_fstream_traits_type<_Traits> = _Traits;
        pub type basic_fstream_int_type = [u8; 0usize];
        pub type basic_fstream_pos_type = [u8; 0usize];
        pub type basic_fstream_off_type = [u8; 0usize];
        pub type basic_fstream___filebuf_type<_CharT> =
            root::std::basic_filebuf<root::std::basic_fstream_char_type<_CharT>>;
        pub type basic_fstream___ios_type<_CharT> =
            root::std::basic_ios<root::std::basic_fstream_char_type<_CharT>>;
        pub type basic_fstream___iostream_type<_CharT> =
            root::std::basic_iostream<root::std::basic_fstream_char_type<_CharT>>;
        extern "C" {
            #[link_name = "\u{1}_ZSt3cin"]
            pub static mut cin: root::std::istream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4cout"]
            pub static mut cout: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4cerr"]
            pub static mut cerr: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4clog"]
            pub static mut clog: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4wcin"]
            pub static mut wcin: root::std::wistream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wcout"]
            pub static mut wcout: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wcerr"]
            pub static mut wcerr: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wclog"]
            pub static mut wclog: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL8__ioinit"]
            pub static mut __ioinit: root::std::ios_base_Init;
        }
    }
    pub mod __gnu_cxx {
        
        use self::super::super::root;
        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = root::__gnu_cxx::__add_unsigned___if_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = root::__gnu_cxx::__remove_unsigned___if_type;
        pub type __promote___type = f64;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_2 {
            pub _address: u8,
        }
        pub type __promote_2___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_3 {
            pub _address: u8,
        }
        pub type __promote_3___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __promote_4 {
            pub _address: u8,
        }
        pub type __promote_4___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        extern "C" {
            pub static __min: _Value;
        }
        extern "C" {
            pub static __max: _Value;
        }
        extern "C" {
            pub static __is_signed: bool;
        }
        extern "C" {
            pub static __digits: ::std::os::raw::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        extern "C" {
            pub static __max_digits10: ::std::os::raw::c_int;
        }
        extern "C" {
            pub static __digits10: ::std::os::raw::c_int;
        }
        extern "C" {
            pub static __max_exponent10: ::std::os::raw::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __normal_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type __normal_iterator___traits_type = root::std::iterator_traits;
        pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
        pub type __normal_iterator_iterator_category =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_value_type = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_difference_type =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_reference = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_pointer = root::__gnu_cxx::__normal_iterator___traits_type;
        pub mod __ops {
            
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_less_iter {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_less_val {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_less_iter {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equal_to_iter {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equal_to_val {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_val<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Val_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_val<_Value> {
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_equals_iter<_Iterator1> {
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_pred<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_val<_Compare, _Value> {
                pub _M_comp: _Compare,
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
                pub _M_comp: _Compare,
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Iter_negate<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
            pub fn __verbose_terminate_handler();
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct new_allocator {
            pub _address: u8,
        }
        pub type new_allocator_size_type = usize;
        pub type new_allocator_difference_type = isize;
        pub type new_allocator_pointer<_Tp> = *mut _Tp;
        pub type new_allocator_const_pointer<_Tp> = *const _Tp;
        pub type new_allocator_reference<_Tp> = *mut _Tp;
        pub type new_allocator_const_reference<_Tp> = *const _Tp;
        pub type new_allocator_value_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct new_allocator_rebind {
            pub _address: u8,
        }
        pub type new_allocator_rebind_other = root::__gnu_cxx::new_allocator;
        pub type new_allocator_propagate_on_container_move_assignment = root::std::true_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits {
            pub _address: u8,
        }
        pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
        pub type __alloc_traits__Base_type = root::std::allocator_traits;
        pub type __alloc_traits_value_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_const_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_size_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_difference_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_reference = *mut root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits_const_reference = *const root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits___is_custom_pointer = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __alloc_traits_rebind {
            pub _address: u8,
        }
        pub type __alloc_traits_rebind_other = root::__gnu_cxx::__alloc_traits__Base_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_membuf {
            pub _M_storage: *mut ::std::os::raw::c_uchar,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_membuf__Tp2<_Tp> {
            pub _M_t: _Tp,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __aligned_buffer {
            pub _M_storage: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct _Char_types {
            pub _address: u8,
        }
        pub type _Char_types_int_type = ::std::os::raw::c_ulong;
        pub type _Char_types_pos_type = root::std::streampos;
        pub type _Char_types_off_type = root::std::streamoff;
        pub type _Char_types_state_type = root::mbstate_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type char_traits_char_type<_CharT> = _CharT;
        pub type char_traits_int_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_pos_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_off_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_state_type = root::__gnu_cxx::_Char_types;
        extern "C" {
            pub fn __uselocale(arg1: root::locale_t) -> root::locale_t;
        }
    }
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = f64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof32(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strfromd(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: f32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfroml(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32x,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64x,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::std::os::raw::c_ushort,
        pub __ctype_tolower: *const ::std::os::raw::c_int,
        pub __ctype_toupper: *const ::std::os::raw::c_int,
        pub __names: [*const ::std::os::raw::c_char; 13usize],
    }
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    extern "C" {
        pub fn strtol_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtod_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type pid_t = root::__pid_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type useconds_t = root::__useconds_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::std::os::raw::c_ulong;
    pub type ushort = ::std::os::raw::c_ushort;
    pub type uint = ::std::os::raw::c_uint;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulong;
    pub type register_t = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::std::os::raw::c_ulong; 16usize],
    }
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    pub type __fd_mask = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    pub type fd_mask = root::__fd_mask;
    extern "C" {
        pub fn select(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::std::os::raw::c_uint,
        pub __writers: ::std::os::raw::c_uint,
        pub __wrphase_futex: ::std::os::raw::c_uint,
        pub __writers_futex: ::std::os::raw::c_uint,
        pub __pad3: ::std::os::raw::c_uint,
        pub __pad4: ::std::os::raw::c_uint,
        pub __cur_writer: ::std::os::raw::c_int,
        pub __shared: ::std::os::raw::c_int,
        pub __rwelision: ::std::os::raw::c_schar,
        pub __pad1: [::std::os::raw::c_uchar; 7usize],
        pub __pad2: ::std::os::raw::c_ulong,
        pub __flags: ::std::os::raw::c_uint,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_short,
        pub __elision: ::std::os::raw::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __bindgen_anon_1: root::__pthread_cond_s__bindgen_ty_1,
        pub __bindgen_anon_2: root::__pthread_cond_s__bindgen_ty_2,
        pub __g_refs: [::std::os::raw::c_uint; 2usize],
        pub __g_size: [::std::os::raw::c_uint; 2usize],
        pub __g1_orig_size: ::std::os::raw::c_uint,
        pub __wrefs: ::std::os::raw::c_uint,
        pub __g_signals: [::std::os::raw::c_uint; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_1 {
        pub __wseq: ::std::os::raw::c_ulonglong,
        pub __wseq32: root::__pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_2 {
        pub __g1_start: ::std::os::raw::c_ulonglong,
        pub __g1_start32: root::__pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    pub type pthread_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    pub type pthread_key_t = ::std::os::raw::c_uint;
    pub type pthread_once_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::std::os::raw::c_char; 40usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 5usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::std::os::raw::c_char; 48usize],
        pub __align: ::std::os::raw::c_longlong,
        _bindgen_union_align: [u64; 6usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::std::os::raw::c_char; 8usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: u64,
    }
    pub type pthread_spinlock_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::std::os::raw::c_char; 32usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 4usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    extern "C" {
        pub fn random() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srandom(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn initstate(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::std::os::raw::c_int,
        pub rand_deg: ::std::os::raw::c_int,
        pub rand_sep: ::std::os::raw::c_int,
        pub end_ptr: *mut i32,
    }
    extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srandom_r(
            __seed: ::std::os::raw::c_uint,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn initstate_r(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::std::os::raw::c_char,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    }
    extern "C" {
        pub fn lrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn mrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srand48(__seedval: ::std::os::raw::c_long);
    }
    extern "C" {
        pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [::std::os::raw::c_ushort; 3usize],
        pub __old_x: [::std::os::raw::c_ushort; 3usize],
        pub __c: ::std::os::raw::c_ushort,
        pub __init: ::std::os::raw::c_ushort,
        pub __a: ::std::os::raw::c_ulonglong,
    }
    extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand48_r(
            __seedval: ::std::os::raw::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lcong48_r(
            __param: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut ::std::os::raw::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn on_exit(
            __func: ::std::option::Option<
                unsafe extern "C" fn(
                    __status: ::std::os::raw::c_int,
                    __arg: *mut ::std::os::raw::c_void,
                ),
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setenv(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __replace: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearenv() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkostemp(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemp64(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn realpath(
            __name: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn qsort_r(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qecvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qfcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qgcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qecvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qfcvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    extern "C" {
        pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getsubopt(
            __optionp: *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __valuep: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ptsname_r(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpt() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getloadavg(
            __loadavg: *mut f64,
            __nelem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memmove(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memccpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn rawmemchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memrchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcoll(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn strcoll_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm_l(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
            __l: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strndup(
            __string: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strchrnul(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcspn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> usize;
    }
    extern "C" {
        pub fn strspn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> usize;
    }
    extern "C" {
        pub fn strpbrk(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strstr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcasestr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn memmem(
            __haystack: *const ::std::os::raw::c_void,
            __haystacklen: usize,
            __needle: *const ::std::os::raw::c_void,
            __needlelen: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn __mempcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn mempcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
    }
    extern "C" {
        pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
    }
    extern "C" {
        pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strerror_r(
            __errnum: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strerror_l(
            __errnum: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn bcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bcopy(
            __src: *const ::std::os::raw::c_void,
            __dest: *mut ::std::os::raw::c_void,
            __n: usize,
        );
    }
    extern "C" {
        pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
    }
    extern "C" {
        pub fn index(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn rindex(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcasecmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncasecmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcasecmp_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncasecmp_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
    }
    extern "C" {
        pub fn strsep(
            __stringp: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __stpcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn stpcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __stpncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn stpncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strverscmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize)
            -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn basename(__filename: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __assert_fail(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert_perror_fail(
            __errnum: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_int,
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct t_CKCOMPLEX {
        pub re: f64,
        pub im: f64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct t_CKPOLAR {
        pub modulus: f64,
        pub phase: f64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct t_CKVEC3 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct t_CKVEC4 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
        pub w: f64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct t_CKVECTOR {
        pub N: ::std::os::raw::c_ulong,
        pub values: *mut f64,
    }
    pub type c_str = *mut ::std::os::raw::c_char;
    pub type c_constr = *const ::std::os::raw::c_char;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct t_CKCOMPLEX_SAMPLE {
        pub re: f32,
        pub im: f32,
    }
    pub type __gnuc_va_list = root::__builtin_va_list;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::std::os::raw::c_void,
        pub __pad5: usize,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    pub type cookie_read_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_write_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *const ::std::os::raw::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_seek_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __pos: *mut root::__off64_t,
            __w: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
    pub type cookie_close_function_t = ::std::option::Option<
        unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::cookie_read_function_t,
        pub write: root::cookie_write_function_t,
        pub seek: root::cookie_seek_function_t,
        pub close: root::cookie_close_function_t,
    }
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    pub type va_list = root::__gnuc_va_list;
    pub type fpos_t = root::__fpos_t;
    pub type fpos64_t = root::__fpos64_t;
    extern "C" {
        #[link_name = "\u{1}stdin"]
        pub static mut stdin: *mut root::FILE;
    }
    extern "C" {
        #[link_name = "\u{1}stdout"]
        pub static mut stdout: *mut root::FILE;
    }
    extern "C" {
        #[link_name = "\u{1}stderr"]
        pub static mut stderr: *mut root::FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn renameat(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn renameat2(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tempnam(
            __dir: *const ::std::os::raw::c_char,
            __pfx: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcloseall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fdopen(
            __fd: ::std::os::raw::c_int,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut ::std::os::raw::c_void,
            __modes: *const ::std::os::raw::c_char,
            __io_funcs: root::cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fmemopen(
            __s: *mut ::std::os::raw::c_void,
            __len: usize,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn open_memstream(
            __bufloc: *mut ::std::os::raw::c_char,
            __sizeloc: *mut usize,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setbuffer(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        );
    }
    extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vasprintf(
            __ptr: *mut ::std::os::raw::c_char,
            __f: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __asprintf(
            __ptr: *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn asprintf(
            __ptr: *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vdprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fgets_unlocked(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __getdelim(
            __lineptr: *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getdelim(
            __lineptr: *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getline(
            __lineptr: *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fputs_unlocked(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    extern "C" {
        pub fn fgetpos(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(
            __stream: *mut root::FILE,
            __pos: *const root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    extern "C" {
        pub fn fgetpos64(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos64(
            __stream: *mut root::FILE,
            __pos: *const root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "\u{1}sys_nerr"]
        pub static mut sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}sys_errlist"]
        pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_sys_nerr"]
        pub static mut _sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_sys_errlist"]
        pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fileno_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn popen(
            __command: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            __args: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(
            arg1: *mut root::FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FastCircularBuffer {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CircularBuffer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sched_param {
        pub sched_priority: ::std::os::raw::c_int,
    }
    extern "C" {
        pub fn clone(
            __fn: ::std::option::Option<
                unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
            >,
            __child_stack: *mut ::std::os::raw::c_void,
            __flags: ::std::os::raw::c_int,
            __arg: *mut ::std::os::raw::c_void,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getcpu() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setns(
            __fd: ::std::os::raw::c_int,
            __nstype: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type __cpu_mask = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct cpu_set_t {
        pub __bits: [root::__cpu_mask; 16usize],
    }
    extern "C" {
        pub fn __sched_cpucount(
            __setsize: usize,
            __setp: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __sched_cpualloc(__count: usize) -> *mut root::cpu_set_t;
    }
    extern "C" {
        pub fn __sched_cpufree(__set: *mut root::cpu_set_t);
    }
    extern "C" {
        pub fn sched_setparam(
            __pid: root::__pid_t,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getparam(
            __pid: root::__pid_t,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_setscheduler(
            __pid: root::__pid_t,
            __policy: ::std::os::raw::c_int,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getscheduler(__pid: root::__pid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_rr_get_interval(
            __pid: root::__pid_t,
            __t: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_setaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timex {
        pub modes: ::std::os::raw::c_uint,
        pub offset: root::__syscall_slong_t,
        pub freq: root::__syscall_slong_t,
        pub maxerror: root::__syscall_slong_t,
        pub esterror: root::__syscall_slong_t,
        pub status: ::std::os::raw::c_int,
        pub constant: root::__syscall_slong_t,
        pub precision: root::__syscall_slong_t,
        pub tolerance: root::__syscall_slong_t,
        pub time: root::timeval,
        pub tick: root::__syscall_slong_t,
        pub ppsfreq: root::__syscall_slong_t,
        pub jitter: root::__syscall_slong_t,
        pub shift: ::std::os::raw::c_int,
        pub stabil: root::__syscall_slong_t,
        pub jitcnt: root::__syscall_slong_t,
        pub calcnt: root::__syscall_slong_t,
        pub errcnt: root::__syscall_slong_t,
        pub stbcnt: root::__syscall_slong_t,
        pub tai: ::std::os::raw::c_int,
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 44usize], u8>,
    }
    impl timex {
        #[inline]
        pub fn new_bitfield_1() -> root::__BindgenBitfieldUnit<[u8; 44usize], u8> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 44usize], u8> =
                Default::default();
            __bindgen_bitfield_unit
        }
    }
    extern "C" {
        pub fn clock_adjtime(
            __clock_id: root::__clockid_t,
            __utx: *mut root::timex,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tm {
        pub tm_sec: ::std::os::raw::c_int,
        pub tm_min: ::std::os::raw::c_int,
        pub tm_hour: ::std::os::raw::c_int,
        pub tm_mday: ::std::os::raw::c_int,
        pub tm_mon: ::std::os::raw::c_int,
        pub tm_year: ::std::os::raw::c_int,
        pub tm_wday: ::std::os::raw::c_int,
        pub tm_yday: ::std::os::raw::c_int,
        pub tm_isdst: ::std::os::raw::c_int,
        pub tm_gmtoff: ::std::os::raw::c_long,
        pub tm_zone: *const ::std::os::raw::c_char,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct itimerspec {
        pub it_interval: root::timespec,
        pub it_value: root::timespec,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigevent {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn clock() -> root::clock_t;
    }
    extern "C" {
        pub fn time(__timer: *mut root::time_t) -> root::time_t;
    }
    extern "C" {
        pub fn difftime(__time1: root::time_t, __time0: root::time_t) -> f64;
    }
    extern "C" {
        pub fn mktime(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn strftime(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: usize,
            __format: *const ::std::os::raw::c_char,
            __tp: *const root::tm,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __tp: *mut root::tm,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strftime_l(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: usize,
            __format: *const ::std::os::raw::c_char,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime_l(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __tp: *mut root::tm,
            __loc: root::locale_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gmtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn gmtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn asctime(__tp: *const root::tm) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime(__timer: *const root::time_t) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn asctime_r(
            __tp: *const root::tm,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime_r(
            __timer: *const root::time_t,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}__tzname"]
        pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        #[link_name = "\u{1}__daylight"]
        pub static mut __daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__timezone"]
        pub static mut __timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}tzname"]
        pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        pub fn tzset();
    }
    extern "C" {
        #[link_name = "\u{1}daylight"]
        pub static mut daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}timezone"]
        pub static mut timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn stime(__when: *const root::time_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timegm(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn timelocal(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nanosleep(
            __requested_time: *const root::timespec,
            __remaining: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getres(
            __clock_id: root::clockid_t,
            __res: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_gettime(
            __clock_id: root::clockid_t,
            __tp: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_settime(
            __clock_id: root::clockid_t,
            __tp: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_nanosleep(
            __clock_id: root::clockid_t,
            __flags: ::std::os::raw::c_int,
            __req: *const root::timespec,
            __rem: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getcpuclockid(
            __pid: root::pid_t,
            __clock_id: *mut root::clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_create(
            __clock_id: root::clockid_t,
            __evp: *mut root::sigevent,
            __timerid: *mut root::timer_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_delete(__timerid: root::timer_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_settime(
            __timerid: root::timer_t,
            __flags: ::std::os::raw::c_int,
            __value: *const root::itimerspec,
            __ovalue: *mut root::itimerspec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_gettime(
            __timerid: root::timer_t,
            __value: *mut root::itimerspec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_getoverrun(__timerid: root::timer_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timespec_get(
            __ts: *mut root::timespec,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}getdate_err"]
        pub static mut getdate_err: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut root::tm;
    }
    extern "C" {
        pub fn getdate_r(
            __string: *const ::std::os::raw::c_char,
            __resbufp: *mut root::tm,
        ) -> ::std::os::raw::c_int;
    }
    pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
    pub const PTHREAD_CREATE_JOINABLE: root::_bindgen_ty_1 = 0;
    pub const PTHREAD_CREATE_DETACHED: root::_bindgen_ty_1 = 1;
    pub type _bindgen_ty_1 = u32;
    pub const PTHREAD_MUTEX_TIMED_NP: root::_bindgen_ty_2 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE_NP: root::_bindgen_ty_2 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK_NP: root::_bindgen_ty_2 = 2;
    pub const PTHREAD_MUTEX_ADAPTIVE_NP: root::_bindgen_ty_2 = 3;
    pub const PTHREAD_MUTEX_NORMAL: root::_bindgen_ty_2 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE: root::_bindgen_ty_2 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK: root::_bindgen_ty_2 = 2;
    pub const PTHREAD_MUTEX_DEFAULT: root::_bindgen_ty_2 = 0;
    pub const PTHREAD_MUTEX_FAST_NP: root::_bindgen_ty_2 = 0;
    pub type _bindgen_ty_2 = u32;
    pub const PTHREAD_MUTEX_STALLED: root::_bindgen_ty_3 = 0;
    pub const PTHREAD_MUTEX_STALLED_NP: root::_bindgen_ty_3 = 0;
    pub const PTHREAD_MUTEX_ROBUST: root::_bindgen_ty_3 = 1;
    pub const PTHREAD_MUTEX_ROBUST_NP: root::_bindgen_ty_3 = 1;
    pub type _bindgen_ty_3 = u32;
    pub const PTHREAD_PRIO_NONE: root::_bindgen_ty_4 = 0;
    pub const PTHREAD_PRIO_INHERIT: root::_bindgen_ty_4 = 1;
    pub const PTHREAD_PRIO_PROTECT: root::_bindgen_ty_4 = 2;
    pub type _bindgen_ty_4 = u32;
    pub const PTHREAD_RWLOCK_PREFER_READER_NP: root::_bindgen_ty_5 = 0;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: root::_bindgen_ty_5 = 1;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: root::_bindgen_ty_5 = 2;
    pub const PTHREAD_RWLOCK_DEFAULT_NP: root::_bindgen_ty_5 = 0;
    pub type _bindgen_ty_5 = u32;
    pub const PTHREAD_INHERIT_SCHED: root::_bindgen_ty_6 = 0;
    pub const PTHREAD_EXPLICIT_SCHED: root::_bindgen_ty_6 = 1;
    pub type _bindgen_ty_6 = u32;
    pub const PTHREAD_SCOPE_SYSTEM: root::_bindgen_ty_7 = 0;
    pub const PTHREAD_SCOPE_PROCESS: root::_bindgen_ty_7 = 1;
    pub type _bindgen_ty_7 = u32;
    pub const PTHREAD_PROCESS_PRIVATE: root::_bindgen_ty_8 = 0;
    pub const PTHREAD_PROCESS_SHARED: root::_bindgen_ty_8 = 1;
    pub type _bindgen_ty_8 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _pthread_cleanup_buffer {
        pub __routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __arg: *mut ::std::os::raw::c_void,
        pub __canceltype: ::std::os::raw::c_int,
        pub __prev: *mut root::_pthread_cleanup_buffer,
    }
    pub const PTHREAD_CANCEL_ENABLE: root::_bindgen_ty_9 = 0;
    pub const PTHREAD_CANCEL_DISABLE: root::_bindgen_ty_9 = 1;
    pub type _bindgen_ty_9 = u32;
    pub const PTHREAD_CANCEL_DEFERRED: root::_bindgen_ty_10 = 0;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: root::_bindgen_ty_10 = 1;
    pub type _bindgen_ty_10 = u32;
    extern "C" {
        pub fn pthread_create(
            __newthread: *mut root::pthread_t,
            __attr: *const root::pthread_attr_t,
            __start_routine: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn pthread_join(
            __th: root::pthread_t,
            __thread_return: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_tryjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_timedjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut ::std::os::raw::c_void,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_detach(__th: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_self() -> root::pthread_t;
    }
    extern "C" {
        pub fn pthread_equal(
            __thread1: root::pthread_t,
            __thread2: root::pthread_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_init(__attr: *mut root::pthread_attr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_destroy(__attr: *mut root::pthread_attr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getdetachstate(
            __attr: *const root::pthread_attr_t,
            __detachstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setdetachstate(
            __attr: *mut root::pthread_attr_t,
            __detachstate: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getguardsize(
            __attr: *const root::pthread_attr_t,
            __guardsize: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setguardsize(
            __attr: *mut root::pthread_attr_t,
            __guardsize: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedparam(
            __attr: *const root::pthread_attr_t,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedparam(
            __attr: *mut root::pthread_attr_t,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedpolicy(
            __attr: *const root::pthread_attr_t,
            __policy: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedpolicy(
            __attr: *mut root::pthread_attr_t,
            __policy: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getinheritsched(
            __attr: *const root::pthread_attr_t,
            __inherit: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setinheritsched(
            __attr: *mut root::pthread_attr_t,
            __inherit: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getscope(
            __attr: *const root::pthread_attr_t,
            __scope: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setscope(
            __attr: *mut root::pthread_attr_t,
            __scope: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstackaddr(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstackaddr(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstacksize(
            __attr: *const root::pthread_attr_t,
            __stacksize: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstacksize(
            __attr: *mut root::pthread_attr_t,
            __stacksize: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstack(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
            __stacksize: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstack(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
            __stacksize: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setaffinity_np(
            __attr: *mut root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getaffinity_np(
            __attr: *const root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_default_np(
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setattr_default_np(
            __attr: *const root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_np(
            __th: root::pthread_t,
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedparam(
            __target_thread: root::pthread_t,
            __policy: ::std::os::raw::c_int,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getschedparam(
            __target_thread: root::pthread_t,
            __policy: *mut ::std::os::raw::c_int,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedprio(
            __target_thread: root::pthread_t,
            __prio: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getname_np(
            __target_thread: root::pthread_t,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setname_np(
            __target_thread: root::pthread_t,
            __name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_once(
            __once_control: *mut root::pthread_once_t,
            __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcancelstate(
            __state: ::std::os::raw::c_int,
            __oldstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcanceltype(
            __type: ::std::os::raw::c_int,
            __oldtype: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cancel(__th: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_testcancel();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_unwind_buf_t {
        pub __cancel_jmp_buf: [root::__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
        pub __pad: [*mut ::std::os::raw::c_void; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
        pub __cancel_jmp_buf: root::__jmp_buf,
        pub __mask_was_saved: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cleanup_frame {
        pub __cancel_routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct __pthread_cleanup_class {
        pub __cancel_routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn __sigsetjmp(
            __env: *mut root::__jmp_buf_tag,
            __savemask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_init(
            __mutex: *mut root::pthread_mutex_t,
            __mutexattr: *const root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_destroy(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_trylock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_lock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_timedlock(
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_unlock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_getprioceiling(
            __mutex: *const root::pthread_mutex_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_setprioceiling(
            __mutex: *mut root::pthread_mutex_t,
            __prioceiling: ::std::os::raw::c_int,
            __old_ceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent_np(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_init(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_destroy(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getpshared(
            __attr: *const root::pthread_mutexattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setpshared(
            __attr: *mut root::pthread_mutexattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_gettype(
            __attr: *const root::pthread_mutexattr_t,
            __kind: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_settype(
            __attr: *mut root::pthread_mutexattr_t,
            __kind: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            __attr: *const root::pthread_mutexattr_t,
            __protocol: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            __attr: *mut root::pthread_mutexattr_t,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            __attr: *const root::pthread_mutexattr_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            __attr: *mut root::pthread_mutexattr_t,
            __prioceiling: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust_np(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust_np(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_init(
            __rwlock: *mut root::pthread_rwlock_t,
            __attr: *const root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_destroy(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_rdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_tryrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_wrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_trywrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_unlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_init(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_destroy(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            __attr: *const root::pthread_rwlockattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            __attr: *mut root::pthread_rwlockattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getkind_np(
            __attr: *const root::pthread_rwlockattr_t,
            __pref: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setkind_np(
            __attr: *mut root::pthread_rwlockattr_t,
            __pref: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_init(
            __cond: *mut root::pthread_cond_t,
            __cond_attr: *const root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_destroy(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_signal(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_broadcast(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_wait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_timedwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_init(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_destroy(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getpshared(
            __attr: *const root::pthread_condattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setpshared(
            __attr: *mut root::pthread_condattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getclock(
            __attr: *const root::pthread_condattr_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setclock(
            __attr: *mut root::pthread_condattr_t,
            __clock_id: root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_init(
            __lock: *mut root::pthread_spinlock_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_destroy(__lock: *mut root::pthread_spinlock_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_lock(__lock: *mut root::pthread_spinlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_trylock(__lock: *mut root::pthread_spinlock_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_unlock(__lock: *mut root::pthread_spinlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_init(
            __barrier: *mut root::pthread_barrier_t,
            __attr: *const root::pthread_barrierattr_t,
            __count: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_destroy(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_wait(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_init(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_destroy(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_getpshared(
            __attr: *const root::pthread_barrierattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_setpshared(
            __attr: *mut root::pthread_barrierattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_create(
            __key: *mut root::pthread_key_t,
            __destr_function: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_delete(__key: root::pthread_key_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getspecific(__key: root::pthread_key_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn pthread_setspecific(
            __key: root::pthread_key_t,
            __pointer: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getcpuclockid(
            __thread_id: root::pthread_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_atfork(
            __prepare: ::std::option::Option<unsafe extern "C" fn()>,
            __parent: ::std::option::Option<unsafe extern "C" fn()>,
            __child: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    pub type THREAD_HANDLE = root::pthread_t;
    pub type THREAD_RETURN = *mut ::std::os::raw::c_void;
    pub type THREAD_FUNCTION = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >;
    pub type MUTEX = root::pthread_mutex_t;
    #[repr(C)]
    #[derive(Debug)]
    pub struct XThread {
        pub thread: root::THREAD_HANDLE,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThread5startEPFPvS0_ES0_"]
        pub fn XThread_start(
            this: *mut root::XThread,
            routine: root::THREAD_FUNCTION,
            ptr: *mut ::std::os::raw::c_void,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThread4waitElb"]
        pub fn XThread_wait(
            this: *mut root::XThread,
            milliseconds: ::std::os::raw::c_long,
            cancel: bool,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThread4testEv"]
        pub fn XThread_test();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThreadC1Ev"]
        pub fn XThread_XThread(this: *mut root::XThread);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThreadD1Ev"]
        pub fn XThread_XThread_destructor(this: *mut root::XThread);
    }
    impl XThread {
        #[inline]
        pub unsafe fn start(
            &mut self,
            routine: root::THREAD_FUNCTION,
            ptr: *mut ::std::os::raw::c_void,
        ) -> bool {
            XThread_start(self, routine, ptr)
        }
        #[inline]
        pub unsafe fn wait(&mut self, milliseconds: ::std::os::raw::c_long, cancel: bool) -> bool {
            XThread_wait(self, milliseconds, cancel)
        }
        #[inline]
        pub unsafe fn test() {
            XThread_test()
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XThread_XThread(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            XThread_XThread_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct XThreadUtil {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11XThreadUtil12our_priorityE"]
        pub static mut XThreadUtil_our_priority: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11XThreadUtil12set_priorityEml"]
        pub fn XThreadUtil_set_priority(
            tid: root::pthread_t,
            priority: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11XThreadUtil12set_priorityEl"]
        pub fn XThreadUtil_set_priority1(
            priority: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    impl XThreadUtil {
        #[inline]
        pub unsafe fn set_priority(
            tid: root::pthread_t,
            priority: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong {
            XThreadUtil_set_priority(tid, priority)
        }
        #[inline]
        pub unsafe fn set_priority1(priority: ::std::os::raw::c_long) -> ::std::os::raw::c_ulong {
            XThreadUtil_set_priority1(priority)
        }
    }
    #[repr(C)]
    pub struct XMutex {
        pub mutex: root::MUTEX,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6XMutex7acquireEv"]
        pub fn XMutex_acquire(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6XMutex7releaseEv"]
        pub fn XMutex_release(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6XMutexC1Ev"]
        pub fn XMutex_XMutex(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6XMutexD1Ev"]
        pub fn XMutex_XMutex_destructor(this: *mut root::XMutex);
    }
    impl XMutex {
        #[inline]
        pub unsafe fn acquire(&mut self) {
            XMutex_acquire(self)
        }
        #[inline]
        pub unsafe fn release(&mut self) {
            XMutex_release(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XMutex_XMutex(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            XMutex_XMutex_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct XWriteThread {
        pub m_thread_exit: ::std::os::raw::c_ulong,
        pub m_thread: root::XThread,
        pub m_data_buffer: *mut root::FastCircularBuffer,
        pub m_bytes_in_buffer: usize,
        pub m_thread_buffer: *mut ::std::os::raw::c_uchar,
        pub m_stream: *mut root::FILE,
        pub m_msg_buffer: *mut root::CircularBuffer,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct XWriteThread_Message {
        pub operation: root::XWriteThread_Message__bindgen_ty_1,
        pub file: *mut root::FILE,
        pub __bindgen_anon_1: root::XWriteThread_Message__bindgen_ty_2,
    }
    pub const XWriteThread_Message_WRITE: root::XWriteThread_Message__bindgen_ty_1 = 0;
    pub const XWriteThread_Message_SEEK: root::XWriteThread_Message__bindgen_ty_1 = 1;
    pub const XWriteThread_Message_FLUSH: root::XWriteThread_Message__bindgen_ty_1 = 2;
    pub const XWriteThread_Message_CLOSE: root::XWriteThread_Message__bindgen_ty_1 = 3;
    pub const XWriteThread_Message_SHUTDOWN: root::XWriteThread_Message__bindgen_ty_1 = 4;
    pub type XWriteThread_Message__bindgen_ty_1 = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union XWriteThread_Message__bindgen_ty_2 {
        pub write: root::XWriteThread_Message__bindgen_ty_2__bindgen_ty_1,
        pub seek: root::XWriteThread_Message__bindgen_ty_2__bindgen_ty_2,
        _bindgen_union_align: [u64; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct XWriteThread_Message__bindgen_ty_2__bindgen_ty_1 {
        pub data_size: usize,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct XWriteThread_Message__bindgen_ty_2__bindgen_ty_2 {
        pub offset: ::std::os::raw::c_long,
        pub whence: ::std::os::raw::c_int,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread20PRODUCER_BUFFER_SIZEE"]
        pub static XWriteThread_PRODUCER_BUFFER_SIZE: usize;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread20o_defaultWriteThreadE"]
        pub static mut XWriteThread_o_defaultWriteThread: *mut root::XWriteThread;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread6sharedEv"]
        pub fn XWriteThread_shared() -> *mut root::XWriteThread;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread6fwriteEPKvmmP8_IO_FILE"]
        pub fn XWriteThread_fwrite(
            this: *mut root::XWriteThread,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread5fseekEP8_IO_FILEli"]
        pub fn XWriteThread_fseek(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
            offset: ::std::os::raw::c_long,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread6fflushEP8_IO_FILE"]
        pub fn XWriteThread_fflush(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread6fcloseEP8_IO_FILE"]
        pub fn XWriteThread_fclose(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread8shutdownEv"]
        pub fn XWriteThread_shutdown(this: *mut root::XWriteThread);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThreadC1Emm"]
        pub fn XWriteThread_XWriteThread(
            this: *mut root::XWriteThread,
            data_buffer_size: usize,
            msg_buffer_size: usize,
        );
    }
    impl XWriteThread {
        #[inline]
        pub unsafe fn shared() -> *mut root::XWriteThread {
            XWriteThread_shared()
        }
        #[inline]
        pub unsafe fn fwrite(
            &mut self,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize {
            XWriteThread_fwrite(self, ptr, size, nitems, stream)
        }
        #[inline]
        pub unsafe fn fseek(
            &mut self,
            stream: *mut root::FILE,
            offset: ::std::os::raw::c_long,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int {
            XWriteThread_fseek(self, stream, offset, whence)
        }
        #[inline]
        pub unsafe fn fflush(&mut self, stream: *mut root::FILE) -> ::std::os::raw::c_int {
            XWriteThread_fflush(self, stream)
        }
        #[inline]
        pub unsafe fn fclose(&mut self, stream: *mut root::FILE) -> ::std::os::raw::c_int {
            XWriteThread_fclose(self, stream)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) {
            XWriteThread_shutdown(self)
        }
        #[inline]
        pub unsafe fn new(data_buffer_size: usize, msg_buffer_size: usize) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XWriteThread_XWriteThread(&mut __bindgen_tmp, data_buffer_size, msg_buffer_size);
            __bindgen_tmp
        }
    }
    pub mod __gnu_debug {
        
        use self::super::super::root;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __max_align_ll: ::std::os::raw::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __max_align_ld: f64,
    }
    pub mod __cxxabiv1 {
        
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __cxa_refcounted_exception {
            _unused: [u8; 0],
        }
        extern "C" {
            pub fn __cxa_allocate_exception(arg1: usize) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            pub fn __cxa_free_exception(arg1: *mut ::std::os::raw::c_void);
        }
        extern "C" {
            pub fn __cxa_init_primary_exception(
                object: *mut ::std::os::raw::c_void,
                tinfo: *mut root::std::type_info,
                dest: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
                >,
            ) -> *mut root::__cxxabiv1::__cxa_refcounted_exception;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __class_type_info {
            _unused: [u8; 0],
        }
        #[repr(C)]
        pub struct __forced_unwind__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug)]
        pub struct __forced_unwind {
            pub vtable_: *const __forced_unwind__bindgen_vtable,
        }
    }
    pub type wint_t = ::std::os::raw::c_uint;
    pub type mbstate_t = root::__mbstate_t;
    extern "C" {
        pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsncasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __n: usize,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcscoll_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsxfrm_l(
            __s1: *mut u32,
            __s2: *const u32,
            __n: usize,
            __loc: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsdup(__s: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcslen(__s: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
    }
    extern "C" {
        pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn btowc(__c: ::std::os::raw::c_int) -> root::wint_t;
    }
    extern "C" {
        pub fn wctob(__c: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbsinit(__ps: *const root::mbstate_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbrtowc(
            __pwc: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
            __p: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcrtomb(
            __s: *mut ::std::os::raw::c_char,
            __wc: u32,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn __mbrlen(
            __s: *const ::std::os::raw::c_char,
            __n: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn mbrlen(
            __s: *const ::std::os::raw::c_char,
            __n: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn mbsrtowcs(
            __dst: *mut u32,
            __src: *mut *const ::std::os::raw::c_char,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsrtombs(
            __dst: *mut ::std::os::raw::c_char,
            __src: *mut *const u32,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn mbsnrtowcs(
            __dst: *mut u32,
            __src: *mut *const ::std::os::raw::c_char,
            __nmc: usize,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsnrtombs(
            __dst: *mut ::std::os::raw::c_char,
            __src: *mut *const u32,
            __nwc: usize,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcswidth(__s: *const u32, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcstod(__nptr: *const u32, __endptr: *mut u32) -> f64;
    }
    extern "C" {
        pub fn wcstof(__nptr: *const u32, __endptr: *mut u32) -> f32;
    }
    extern "C" {
        pub fn wcstold(__nptr: *const u32, __endptr: *mut u32) -> f64;
    }
    extern "C" {
        pub fn wcstof32(__nptr: *const u32, __endptr: *mut u32) -> root::_Float32;
    }
    extern "C" {
        pub fn wcstof64(__nptr: *const u32, __endptr: *mut u32) -> root::_Float64;
    }
    extern "C" {
        pub fn wcstof32x(__nptr: *const u32, __endptr: *mut u32) -> root::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x(__nptr: *const u32, __endptr: *mut u32) -> root::_Float64x;
    }
    extern "C" {
        pub fn wcstol(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn wcstoul(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn wcstoll(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstoull(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstoq(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstouq(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstol_l(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn wcstoul_l(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn wcstoll_l(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn wcstoull_l(
            __nptr: *const u32,
            __endptr: *mut u32,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn wcstod_l(__nptr: *const u32, __endptr: *mut u32, __loc: root::locale_t) -> f64;
    }
    extern "C" {
        pub fn wcstof_l(__nptr: *const u32, __endptr: *mut u32, __loc: root::locale_t) -> f32;
    }
    extern "C" {
        pub fn wcstold_l(__nptr: *const u32, __endptr: *mut u32, __loc: root::locale_t)
            -> f64;
    }
    extern "C" {
        pub fn wcstof32_l(
            __nptr: *const u32,
            __endptr: *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn wcstof64_l(
            __nptr: *const u32,
            __endptr: *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn wcstof32x_l(
            __nptr: *const u32,
            __endptr: *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x_l(
            __nptr: *const u32,
            __endptr: *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn open_wmemstream(__bufloc: *mut u32, __sizeloc: *mut usize)
            -> *mut root::__FILE;
    }
    extern "C" {
        pub fn fwide(
            __fp: *mut root::__FILE,
            __mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fwprintf(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn swprintf(
            __s: *mut u32,
            __n: usize,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfwprintf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vwprintf(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vswprintf(
            __s: *mut u32,
            __n: usize,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fwscanf(
            __stream: *mut root::__FILE,
            __format: *const u32,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfwscanf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vwscanf(
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vswscanf(
            __s: *const u32,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar() -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar(__wc: u32) -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws(
            __ws: *mut u32,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn fputws(__ws: *const u32, __stream: *mut root::__FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetwc(__wc: root::wint_t, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar_unlocked() -> root::wint_t;
    }
    extern "C" {
        pub fn fgetwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc_unlocked(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwc_unlocked(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar_unlocked(__wc: u32) -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws_unlocked(
            __ws: *mut u32,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn fputws_unlocked(
            __ws: *const u32,
            __stream: *mut root::__FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcsftime(
            __s: *mut u32,
            __maxsize: usize,
            __format: *const u32,
            __tp: *const root::tm,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsftime_l(
            __s: *mut u32,
            __maxsize: usize,
            __format: *const u32,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> usize;
    }
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lconv {
        pub decimal_point: *mut ::std::os::raw::c_char,
        pub thousands_sep: *mut ::std::os::raw::c_char,
        pub grouping: *mut ::std::os::raw::c_char,
        pub int_curr_symbol: *mut ::std::os::raw::c_char,
        pub currency_symbol: *mut ::std::os::raw::c_char,
        pub mon_decimal_point: *mut ::std::os::raw::c_char,
        pub mon_thousands_sep: *mut ::std::os::raw::c_char,
        pub mon_grouping: *mut ::std::os::raw::c_char,
        pub positive_sign: *mut ::std::os::raw::c_char,
        pub negative_sign: *mut ::std::os::raw::c_char,
        pub int_frac_digits: ::std::os::raw::c_char,
        pub frac_digits: ::std::os::raw::c_char,
        pub p_cs_precedes: ::std::os::raw::c_char,
        pub p_sep_by_space: ::std::os::raw::c_char,
        pub n_cs_precedes: ::std::os::raw::c_char,
        pub n_sep_by_space: ::std::os::raw::c_char,
        pub p_sign_posn: ::std::os::raw::c_char,
        pub n_sign_posn: ::std::os::raw::c_char,
        pub int_p_cs_precedes: ::std::os::raw::c_char,
        pub int_p_sep_by_space: ::std::os::raw::c_char,
        pub int_n_cs_precedes: ::std::os::raw::c_char,
        pub int_n_sep_by_space: ::std::os::raw::c_char,
        pub int_p_sign_posn: ::std::os::raw::c_char,
        pub int_n_sign_posn: ::std::os::raw::c_char,
    }
    extern "C" {
        pub fn setlocale(
            __category: ::std::os::raw::c_int,
            __locale: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn localeconv() -> *mut root::lconv;
    }
    extern "C" {
        pub fn newlocale(
            __category_mask: ::std::os::raw::c_int,
            __locale: *const ::std::os::raw::c_char,
            __base: root::locale_t,
        ) -> root::locale_t;
    }
    extern "C" {
        pub fn duplocale(__dataset: root::locale_t) -> root::locale_t;
    }
    extern "C" {
        pub fn freelocale(__dataset: root::locale_t);
    }
    extern "C" {
        pub fn uselocale(__dataset: root::locale_t) -> root::locale_t;
    }
    pub const _ISupper: root::_bindgen_ty_42 = 256;
    pub const _ISlower: root::_bindgen_ty_42 = 512;
    pub const _ISalpha: root::_bindgen_ty_42 = 1024;
    pub const _ISdigit: root::_bindgen_ty_42 = 2048;
    pub const _ISxdigit: root::_bindgen_ty_42 = 4096;
    pub const _ISspace: root::_bindgen_ty_42 = 8192;
    pub const _ISprint: root::_bindgen_ty_42 = 16384;
    pub const _ISgraph: root::_bindgen_ty_42 = 32768;
    pub const _ISblank: root::_bindgen_ty_42 = 1;
    pub const _IScntrl: root::_bindgen_ty_42 = 2;
    pub const _ISpunct: root::_bindgen_ty_42 = 4;
    pub const _ISalnum: root::_bindgen_ty_42 = 8;
    pub type _bindgen_ty_42 = u32;
    extern "C" {
        pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn __ctype_tolower_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn __ctype_toupper_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isctype(
            __c: ::std::os::raw::c_int,
            __mask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalnum_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __tolower_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower_l(__c: ::std::os::raw::c_int, __l: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __toupper_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper_l(__c: ::std::os::raw::c_int, __l: root::locale_t) -> ::std::os::raw::c_int;
    }
    pub type __gthread_t = root::pthread_t;
    pub type __gthread_key_t = root::pthread_key_t;
    pub type __gthread_once_t = root::pthread_once_t;
    pub type __gthread_mutex_t = root::pthread_mutex_t;
    pub type __gthread_recursive_mutex_t = root::pthread_mutex_t;
    pub type __gthread_cond_t = root::pthread_cond_t;
    pub type __gthread_time_t = root::timespec;
    pub type _Atomic_word = ::std::os::raw::c_int;
    extern "C" {
        pub fn __errno_location() -> *mut ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}program_invocation_name"]
        pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}program_invocation_short_name"]
        pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
    }
    pub type error_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ChucK {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Compiler {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Env {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ck_socket_ {
        _unused: [u8; 0],
    }
    pub type ck_socket = *mut root::ck_socket_;
    #[repr(C)]
    pub struct Chuck_Carrier {
        pub chuck: *mut root::ChucK,
        pub compiler: *mut root::Chuck_Compiler,
        pub env: *mut root::Chuck_Env,
        pub vm: *mut root::Chuck_VM,
        pub chout: *mut root::Chuck_IO_Chout,
        pub cherr: *mut root::Chuck_IO_Cherr,
        pub otf_socket: root::ck_socket,
        pub otf_port: ::std::os::raw::c_long,
        pub otf_thread: root::pthread_t,
        pub stk_writeThread: *mut root::XWriteThread,
        pub stk_wvOutMap: root::std::map,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Carrier19hintIsRealtimeAudioEv"]
        pub fn Chuck_Carrier_hintIsRealtimeAudio(
            this: *mut root::Chuck_Carrier,
        ) -> ::std::os::raw::c_ulong;
    }
    impl Chuck_Carrier {
        #[inline]
        pub unsafe fn hintIsRealtimeAudio(&mut self) -> ::std::os::raw::c_ulong {
            Chuck_Carrier_hintIsRealtimeAudio(self)
        }
    }
    pub type wctype_t = ::std::os::raw::c_ulong;
    pub const __ISwupper: root::_bindgen_ty_45 = 0;
    pub const __ISwlower: root::_bindgen_ty_45 = 1;
    pub const __ISwalpha: root::_bindgen_ty_45 = 2;
    pub const __ISwdigit: root::_bindgen_ty_45 = 3;
    pub const __ISwxdigit: root::_bindgen_ty_45 = 4;
    pub const __ISwspace: root::_bindgen_ty_45 = 5;
    pub const __ISwprint: root::_bindgen_ty_45 = 6;
    pub const __ISwgraph: root::_bindgen_ty_45 = 7;
    pub const __ISwblank: root::_bindgen_ty_45 = 8;
    pub const __ISwcntrl: root::_bindgen_ty_45 = 9;
    pub const __ISwpunct: root::_bindgen_ty_45 = 10;
    pub const __ISwalnum: root::_bindgen_ty_45 = 11;
    pub const _ISwupper: root::_bindgen_ty_45 = 16777216;
    pub const _ISwlower: root::_bindgen_ty_45 = 33554432;
    pub const _ISwalpha: root::_bindgen_ty_45 = 67108864;
    pub const _ISwdigit: root::_bindgen_ty_45 = 134217728;
    pub const _ISwxdigit: root::_bindgen_ty_45 = 268435456;
    pub const _ISwspace: root::_bindgen_ty_45 = 536870912;
    pub const _ISwprint: root::_bindgen_ty_45 = 1073741824;
    pub const _ISwgraph: root::_bindgen_ty_45 = -2147483648;
    pub const _ISwblank: root::_bindgen_ty_45 = 65536;
    pub const _ISwcntrl: root::_bindgen_ty_45 = 131072;
    pub const _ISwpunct: root::_bindgen_ty_45 = 262144;
    pub const _ISwalnum: root::_bindgen_ty_45 = 524288;
    pub type _bindgen_ty_45 = i32;
    extern "C" {
        pub fn iswalnum(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswalpha(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswcntrl(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswdigit(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswgraph(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswlower(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswprint(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswpunct(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswspace(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswupper(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswxdigit(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswblank(__wc: root::wint_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctype(__property: *const ::std::os::raw::c_char) -> root::wctype_t;
    }
    extern "C" {
        pub fn iswctype(__wc: root::wint_t, __desc: root::wctype_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn towlower(__wc: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn towupper(__wc: root::wint_t) -> root::wint_t;
    }
    pub type wctrans_t = *const root::__int32_t;
    extern "C" {
        pub fn wctrans(__property: *const ::std::os::raw::c_char) -> root::wctrans_t;
    }
    extern "C" {
        pub fn towctrans(__wc: root::wint_t, __desc: root::wctrans_t) -> root::wint_t;
    }
    extern "C" {
        pub fn iswalnum_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswalpha_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswcntrl_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswdigit_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswgraph_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswlower_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswprint_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswpunct_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswspace_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswupper_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswxdigit_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iswblank_l(__wc: root::wint_t, __locale: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctype_l(
            __property: *const ::std::os::raw::c_char,
            __locale: root::locale_t,
        ) -> root::wctype_t;
    }
    extern "C" {
        pub fn iswctype_l(
            __wc: root::wint_t,
            __desc: root::wctype_t,
            __locale: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn towlower_l(__wc: root::wint_t, __locale: root::locale_t) -> root::wint_t;
    }
    extern "C" {
        pub fn towupper_l(__wc: root::wint_t, __locale: root::locale_t) -> root::wint_t;
    }
    extern "C" {
        pub fn wctrans_l(
            __property: *const ::std::os::raw::c_char,
            __locale: root::locale_t,
        ) -> root::wctrans_t;
    }
    extern "C" {
        pub fn towctrans_l(
            __wc: root::wint_t,
            __desc: root::wctrans_t,
            __locale: root::locale_t,
        ) -> root::wint_t;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct dirent {
        pub d_ino: root::__ino_t,
        pub d_off: root::__off_t,
        pub d_reclen: ::std::os::raw::c_ushort,
        pub d_type: ::std::os::raw::c_uchar,
        pub d_name: [::std::os::raw::c_char; 256usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct dirent64 {
        pub d_ino: root::__ino64_t,
        pub d_off: root::__off64_t,
        pub d_reclen: ::std::os::raw::c_ushort,
        pub d_type: ::std::os::raw::c_uchar,
        pub d_name: [::std::os::raw::c_char; 256usize],
    }
    pub const DT_UNKNOWN: root::_bindgen_ty_46 = 0;
    pub const DT_FIFO: root::_bindgen_ty_46 = 1;
    pub const DT_CHR: root::_bindgen_ty_46 = 2;
    pub const DT_DIR: root::_bindgen_ty_46 = 4;
    pub const DT_BLK: root::_bindgen_ty_46 = 6;
    pub const DT_REG: root::_bindgen_ty_46 = 8;
    pub const DT_LNK: root::_bindgen_ty_46 = 10;
    pub const DT_SOCK: root::_bindgen_ty_46 = 12;
    pub const DT_WHT: root::_bindgen_ty_46 = 14;
    pub type _bindgen_ty_46 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __dirstream {
        _unused: [u8; 0],
    }
    pub type DIR = root::__dirstream;
    extern "C" {
        pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut root::DIR;
    }
    extern "C" {
        pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut root::DIR;
    }
    extern "C" {
        pub fn closedir(__dirp: *mut root::DIR) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn readdir(__dirp: *mut root::DIR) -> *mut root::dirent;
    }
    extern "C" {
        pub fn readdir64(__dirp: *mut root::DIR) -> *mut root::dirent64;
    }
    extern "C" {
        pub fn readdir_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent,
            __result: *mut root::dirent,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn readdir64_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent64,
            __result: *mut root::dirent64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rewinddir(__dirp: *mut root::DIR);
    }
    extern "C" {
        pub fn seekdir(__dirp: *mut root::DIR, __pos: ::std::os::raw::c_long);
    }
    extern "C" {
        pub fn telldir(__dirp: *mut root::DIR) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn dirfd(__dirp: *mut root::DIR) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scandir(
            __dir: *const ::std::os::raw::c_char,
            __namelist: *mut root::dirent,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::std::os::raw::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scandir64(
            __dir: *const ::std::os::raw::c_char,
            __namelist: *mut root::dirent64,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::std::os::raw::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scandirat(
            __dfd: ::std::os::raw::c_int,
            __dir: *const ::std::os::raw::c_char,
            __namelist: *mut root::dirent,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> ::std::os::raw::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scandirat64(
            __dfd: ::std::os::raw::c_int,
            __dir: *const ::std::os::raw::c_char,
            __namelist: *mut root::dirent64,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> ::std::os::raw::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn alphasort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn alphasort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdirentries(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: usize,
            __basep: *mut root::__off_t,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getdirentries64(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: usize,
            __basep: *mut root::__off64_t,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn versionsort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn versionsort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Type {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Value {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Func {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Namespace {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Context {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM_Code {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM_Shred {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CBufferSimple {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct Chuck_VM_Object__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug)]
    pub struct Chuck_VM_Object {
        pub vtable_: *const Chuck_VM_Object__bindgen_vtable,
        pub m_ref_count: ::std::os::raw::c_ulong,
        pub m_pooled: ::std::os::raw::c_ulong,
        pub m_locked: ::std::os::raw::c_ulong,
        pub m_v_ref: *mut root::std::vector,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object19our_locks_in_effectE"]
        pub static mut Chuck_VM_Object_our_locks_in_effect: ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object8lock_allEv"]
        pub fn Chuck_VM_Object_lock_all();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object10unlock_allEv"]
        pub fn Chuck_VM_Object_unlock_all();
    }
    impl Chuck_VM_Object {
        #[inline]
        pub unsafe fn lock_all() {
            Chuck_VM_Object_lock_all()
        }
        #[inline]
        pub unsafe fn unlock_all() {
            Chuck_VM_Object_unlock_all()
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object7add_refEv"]
        pub fn Chuck_VM_Object_add_ref(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object7releaseEv"]
        pub fn Chuck_VM_Object_release(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object4lockEv"]
        pub fn Chuck_VM_Object_lock(this: *mut ::std::os::raw::c_void);
    }
    #[repr(C)]
    pub struct Chuck_VTable {
        pub funcs: root::std::vector,
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Chuck_Object {
        pub _base: root::Chuck_VM_Object,
        pub vtable: *mut root::Chuck_VTable,
        pub type_ref: *mut root::Chuck_Type,
        pub size: ::std::os::raw::c_ulong,
        pub data: *mut ::std::os::raw::c_uchar,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_ObjectC1Ev"]
        pub fn Chuck_Object_Chuck_Object(this: *mut root::Chuck_Object);
    }
    impl Chuck_Object {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Object_Chuck_Object(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_ObjectD1Ev"]
        pub fn Chuck_Object_Chuck_Object_destructor(this: *mut root::Chuck_Object);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Chuck_Array {
        pub _base: root::Chuck_Object,
        pub m_array_type: *mut root::Chuck_Type,
    }
    #[repr(C)]
    pub struct Chuck_Array4 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
        pub m_is_obj: ::std::os::raw::c_ulong,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44addrEl"]
        pub fn Chuck_Array4_addr(
            this: *mut root::Chuck_Array4,
            i: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array4_addr1(
            this: *mut root::Chuck_Array4,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array43getElPm"]
        pub fn Chuck_Array4_get(
            this: *mut root::Chuck_Array4,
            i: ::std::os::raw::c_long,
            val: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array43getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPm"]
        pub fn Chuck_Array4_get1(
            this: *mut root::Chuck_Array4,
            key: *const root::std::__cxx11::string,
            val: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array43setElm"]
        pub fn Chuck_Array4_set(
            this: *mut root::Chuck_Array4,
            i: ::std::os::raw::c_long,
            val: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array43setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm"]
        pub fn Chuck_Array4_set1(
            this: *mut root::Chuck_Array4,
            key: *const root::std::__cxx11::string,
            val: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array49push_backEm"]
        pub fn Chuck_Array4_push_back(
            this: *mut root::Chuck_Array4,
            val: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array48pop_backEv"]
        pub fn Chuck_Array4_pop_back(this: *mut root::Chuck_Array4) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK12Chuck_Array44backEPm"]
        pub fn Chuck_Array4_back(
            this: *const root::Chuck_Array4,
            val: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44zeroEmm"]
        pub fn Chuck_Array4_zero(
            this: *mut root::Chuck_Array4,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array4C1Eml"]
        pub fn Chuck_Array4_Chuck_Array4(
            this: *mut root::Chuck_Array4,
            is_obj: ::std::os::raw::c_ulong,
            capacity: ::std::os::raw::c_long,
        );
    }
    impl Chuck_Array4 {
        #[inline]
        pub unsafe fn addr(&mut self, i: ::std::os::raw::c_long) -> ::std::os::raw::c_ulong {
            Chuck_Array4_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(
            &mut self,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong {
            Chuck_Array4_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            i: ::std::os::raw::c_long,
            val: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long {
            Chuck_Array4_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long {
            Chuck_Array4_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(
            &mut self,
            i: ::std::os::raw::c_long,
            val: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long {
            Chuck_Array4_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long {
            Chuck_Array4_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: ::std::os::raw::c_ulong) -> ::std::os::raw::c_long {
            Chuck_Array4_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> ::std::os::raw::c_long {
            Chuck_Array4_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut ::std::os::raw::c_ulong) -> ::std::os::raw::c_long {
            Chuck_Array4_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(
            &mut self,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        ) {
            Chuck_Array4_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(
            is_obj: ::std::os::raw::c_ulong,
            capacity: ::std::os::raw::c_long,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array4_Chuck_Array4(&mut __bindgen_tmp, is_obj, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array4D1Ev"]
        pub fn Chuck_Array4_Chuck_Array4_destructor(this: *mut root::Chuck_Array4);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array45clearEv"]
        pub fn Chuck_Array4_clear(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array48set_sizeEl"]
        pub fn Chuck_Array4_set_size(
            this: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array412set_capacityEl"]
        pub fn Chuck_Array4_set_capacity(
            this: *mut ::std::os::raw::c_void,
            capacity: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array4_find(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array45eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array4_erase(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array8 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84addrEl"]
        pub fn Chuck_Array8_addr(
            this: *mut root::Chuck_Array8,
            i: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array8_addr1(
            this: *mut root::Chuck_Array8,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array83getElPd"]
        pub fn Chuck_Array8_get(
            this: *mut root::Chuck_Array8,
            i: ::std::os::raw::c_long,
            val: *mut f64,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array83getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPd"]
        pub fn Chuck_Array8_get1(
            this: *mut root::Chuck_Array8,
            key: *const root::std::__cxx11::string,
            val: *mut f64,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array83setEld"]
        pub fn Chuck_Array8_set(
            this: *mut root::Chuck_Array8,
            i: ::std::os::raw::c_long,
            val: f64,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array83setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd"]
        pub fn Chuck_Array8_set1(
            this: *mut root::Chuck_Array8,
            key: *const root::std::__cxx11::string,
            val: f64,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array89push_backEd"]
        pub fn Chuck_Array8_push_back(
            this: *mut root::Chuck_Array8,
            val: f64,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array88pop_backEv"]
        pub fn Chuck_Array8_pop_back(this: *mut root::Chuck_Array8) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK12Chuck_Array84backEPd"]
        pub fn Chuck_Array8_back(
            this: *const root::Chuck_Array8,
            val: *mut f64,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84zeroEmm"]
        pub fn Chuck_Array8_zero(
            this: *mut root::Chuck_Array8,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array8C1El"]
        pub fn Chuck_Array8_Chuck_Array8(
            this: *mut root::Chuck_Array8,
            capacity: ::std::os::raw::c_long,
        );
    }
    impl Chuck_Array8 {
        #[inline]
        pub unsafe fn addr(&mut self, i: ::std::os::raw::c_long) -> ::std::os::raw::c_ulong {
            Chuck_Array8_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(
            &mut self,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong {
            Chuck_Array8_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            i: ::std::os::raw::c_long,
            val: *mut f64,
        ) -> ::std::os::raw::c_long {
            Chuck_Array8_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut f64,
        ) -> ::std::os::raw::c_long {
            Chuck_Array8_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(
            &mut self,
            i: ::std::os::raw::c_long,
            val: f64,
        ) -> ::std::os::raw::c_long {
            Chuck_Array8_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: f64,
        ) -> ::std::os::raw::c_long {
            Chuck_Array8_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: f64) -> ::std::os::raw::c_long {
            Chuck_Array8_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> ::std::os::raw::c_long {
            Chuck_Array8_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut f64) -> ::std::os::raw::c_long {
            Chuck_Array8_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(
            &mut self,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        ) {
            Chuck_Array8_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: ::std::os::raw::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array8_Chuck_Array8(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array8D1Ev"]
        pub fn Chuck_Array8_Chuck_Array8_destructor(this: *mut root::Chuck_Array8);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array85clearEv"]
        pub fn Chuck_Array8_clear(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array88set_sizeEl"]
        pub fn Chuck_Array8_set_size(
            this: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array812set_capacityEl"]
        pub fn Chuck_Array8_set_capacity(
            this: *mut ::std::os::raw::c_void,
            capacity: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array8_find(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array85eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array8_erase(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array16 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164addrEl"]
        pub fn Chuck_Array16_addr(
            this: *mut root::Chuck_Array16,
            i: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array16_addr1(
            this: *mut root::Chuck_Array16,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array163getElP11t_CKCOMPLEX"]
        pub fn Chuck_Array16_get(
            this: *mut root::Chuck_Array16,
            i: ::std::os::raw::c_long,
            val: *mut root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array163getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11t_CKCOMPLEX"]
        pub fn Chuck_Array16_get1(
            this: *mut root::Chuck_Array16,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array163setElRK11t_CKCOMPLEX"]
        pub fn Chuck_Array16_set(
            this: *mut root::Chuck_Array16,
            i: ::std::os::raw::c_long,
            val: *const root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array163setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK11t_CKCOMPLEX"]
        pub fn Chuck_Array16_set1(
            this: *mut root::Chuck_Array16,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array169push_backERK11t_CKCOMPLEX"]
        pub fn Chuck_Array16_push_back(
            this: *mut root::Chuck_Array16,
            val: *const root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array168pop_backEv"]
        pub fn Chuck_Array16_pop_back(this: *mut root::Chuck_Array16) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK13Chuck_Array164backEP11t_CKCOMPLEX"]
        pub fn Chuck_Array16_back(
            this: *const root::Chuck_Array16,
            val: *mut root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164zeroEmm"]
        pub fn Chuck_Array16_zero(
            this: *mut root::Chuck_Array16,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array16C1El"]
        pub fn Chuck_Array16_Chuck_Array16(
            this: *mut root::Chuck_Array16,
            capacity: ::std::os::raw::c_long,
        );
    }
    impl Chuck_Array16 {
        #[inline]
        pub unsafe fn addr(&mut self, i: ::std::os::raw::c_long) -> ::std::os::raw::c_ulong {
            Chuck_Array16_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(
            &mut self,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong {
            Chuck_Array16_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            i: ::std::os::raw::c_long,
            val: *mut root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long {
            Chuck_Array16_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long {
            Chuck_Array16_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(
            &mut self,
            i: ::std::os::raw::c_long,
            val: *const root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long {
            Chuck_Array16_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long {
            Chuck_Array16_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(
            &mut self,
            val: *const root::t_CKCOMPLEX,
        ) -> ::std::os::raw::c_long {
            Chuck_Array16_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> ::std::os::raw::c_long {
            Chuck_Array16_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut root::t_CKCOMPLEX) -> ::std::os::raw::c_long {
            Chuck_Array16_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(
            &mut self,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        ) {
            Chuck_Array16_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: ::std::os::raw::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array16_Chuck_Array16(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array16D1Ev"]
        pub fn Chuck_Array16_Chuck_Array16_destructor(this: *mut root::Chuck_Array16);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array165clearEv"]
        pub fn Chuck_Array16_clear(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array168set_sizeEl"]
        pub fn Chuck_Array16_set_size(
            this: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array1612set_capacityEl"]
        pub fn Chuck_Array16_set_capacity(
            this: *mut ::std::os::raw::c_void,
            capacity: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array16_find(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array165eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array16_erase(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array24 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244addrEl"]
        pub fn Chuck_Array24_addr(
            this: *mut root::Chuck_Array24,
            i: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array24_addr1(
            this: *mut root::Chuck_Array24,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array243getElP8t_CKVEC3"]
        pub fn Chuck_Array24_get(
            this: *mut root::Chuck_Array24,
            i: ::std::os::raw::c_long,
            val: *mut root::t_CKVEC3,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array243getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8t_CKVEC3"]
        pub fn Chuck_Array24_get1(
            this: *mut root::Chuck_Array24,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKVEC3,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array243setElRK8t_CKVEC3"]
        pub fn Chuck_Array24_set(
            this: *mut root::Chuck_Array24,
            i: ::std::os::raw::c_long,
            val: *const root::t_CKVEC3,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array243setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8t_CKVEC3"]
        pub fn Chuck_Array24_set1(
            this: *mut root::Chuck_Array24,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKVEC3,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array249push_backERK8t_CKVEC3"]
        pub fn Chuck_Array24_push_back(
            this: *mut root::Chuck_Array24,
            val: *const root::t_CKVEC3,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array248pop_backEv"]
        pub fn Chuck_Array24_pop_back(this: *mut root::Chuck_Array24) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK13Chuck_Array244backEP8t_CKVEC3"]
        pub fn Chuck_Array24_back(
            this: *const root::Chuck_Array24,
            val: *mut root::t_CKVEC3,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244zeroEmm"]
        pub fn Chuck_Array24_zero(
            this: *mut root::Chuck_Array24,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array24C1El"]
        pub fn Chuck_Array24_Chuck_Array24(
            this: *mut root::Chuck_Array24,
            capacity: ::std::os::raw::c_long,
        );
    }
    impl Chuck_Array24 {
        #[inline]
        pub unsafe fn addr(&mut self, i: ::std::os::raw::c_long) -> ::std::os::raw::c_ulong {
            Chuck_Array24_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(
            &mut self,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong {
            Chuck_Array24_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            i: ::std::os::raw::c_long,
            val: *mut root::t_CKVEC3,
        ) -> ::std::os::raw::c_long {
            Chuck_Array24_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKVEC3,
        ) -> ::std::os::raw::c_long {
            Chuck_Array24_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(
            &mut self,
            i: ::std::os::raw::c_long,
            val: *const root::t_CKVEC3,
        ) -> ::std::os::raw::c_long {
            Chuck_Array24_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKVEC3,
        ) -> ::std::os::raw::c_long {
            Chuck_Array24_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: *const root::t_CKVEC3) -> ::std::os::raw::c_long {
            Chuck_Array24_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> ::std::os::raw::c_long {
            Chuck_Array24_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut root::t_CKVEC3) -> ::std::os::raw::c_long {
            Chuck_Array24_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(
            &mut self,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        ) {
            Chuck_Array24_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: ::std::os::raw::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array24_Chuck_Array24(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array24D1Ev"]
        pub fn Chuck_Array24_Chuck_Array24_destructor(this: *mut root::Chuck_Array24);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array245clearEv"]
        pub fn Chuck_Array24_clear(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array248set_sizeEl"]
        pub fn Chuck_Array24_set_size(
            this: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array2412set_capacityEl"]
        pub fn Chuck_Array24_set_capacity(
            this: *mut ::std::os::raw::c_void,
            capacity: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array24_find(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array245eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array24_erase(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array32 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324addrEl"]
        pub fn Chuck_Array32_addr(
            this: *mut root::Chuck_Array32,
            i: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array32_addr1(
            this: *mut root::Chuck_Array32,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array323getElP8t_CKVEC4"]
        pub fn Chuck_Array32_get(
            this: *mut root::Chuck_Array32,
            i: ::std::os::raw::c_long,
            val: *mut root::t_CKVEC4,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array323getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8t_CKVEC4"]
        pub fn Chuck_Array32_get1(
            this: *mut root::Chuck_Array32,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKVEC4,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array323setElRK8t_CKVEC4"]
        pub fn Chuck_Array32_set(
            this: *mut root::Chuck_Array32,
            i: ::std::os::raw::c_long,
            val: *const root::t_CKVEC4,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array323setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8t_CKVEC4"]
        pub fn Chuck_Array32_set1(
            this: *mut root::Chuck_Array32,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKVEC4,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array329push_backERK8t_CKVEC4"]
        pub fn Chuck_Array32_push_back(
            this: *mut root::Chuck_Array32,
            val: *const root::t_CKVEC4,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array328pop_backEv"]
        pub fn Chuck_Array32_pop_back(this: *mut root::Chuck_Array32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK13Chuck_Array324backEP8t_CKVEC4"]
        pub fn Chuck_Array32_back(
            this: *const root::Chuck_Array32,
            val: *mut root::t_CKVEC4,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324zeroEmm"]
        pub fn Chuck_Array32_zero(
            this: *mut root::Chuck_Array32,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array32C1El"]
        pub fn Chuck_Array32_Chuck_Array32(
            this: *mut root::Chuck_Array32,
            capacity: ::std::os::raw::c_long,
        );
    }
    impl Chuck_Array32 {
        #[inline]
        pub unsafe fn addr(&mut self, i: ::std::os::raw::c_long) -> ::std::os::raw::c_ulong {
            Chuck_Array32_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(
            &mut self,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong {
            Chuck_Array32_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            i: ::std::os::raw::c_long,
            val: *mut root::t_CKVEC4,
        ) -> ::std::os::raw::c_long {
            Chuck_Array32_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKVEC4,
        ) -> ::std::os::raw::c_long {
            Chuck_Array32_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(
            &mut self,
            i: ::std::os::raw::c_long,
            val: *const root::t_CKVEC4,
        ) -> ::std::os::raw::c_long {
            Chuck_Array32_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKVEC4,
        ) -> ::std::os::raw::c_long {
            Chuck_Array32_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: *const root::t_CKVEC4) -> ::std::os::raw::c_long {
            Chuck_Array32_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> ::std::os::raw::c_long {
            Chuck_Array32_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut root::t_CKVEC4) -> ::std::os::raw::c_long {
            Chuck_Array32_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(
            &mut self,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        ) {
            Chuck_Array32_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: ::std::os::raw::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array32_Chuck_Array32(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array32D1Ev"]
        pub fn Chuck_Array32_Chuck_Array32_destructor(this: *mut root::Chuck_Array32);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array325clearEv"]
        pub fn Chuck_Array32_clear(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array328set_sizeEl"]
        pub fn Chuck_Array32_set_size(
            this: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array3212set_capacityEl"]
        pub fn Chuck_Array32_set_capacity(
            this: *mut ::std::os::raw::c_void,
            capacity: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array32_find(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array325eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array32_erase(
            this: *mut ::std::os::raw::c_void,
            key: *const root::std::__cxx11::string,
        ) -> ::std::os::raw::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Event {
        pub _base: root::Chuck_Object,
        pub m_queue: root::std::queue<root::std::deque>,
        pub m_queue_lock: root::XMutex,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event12our_can_waitE"]
        pub static mut Chuck_Event_our_can_wait: ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event6signalEv"]
        pub fn Chuck_Event_signal(this: *mut root::Chuck_Event);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event9broadcastEv"]
        pub fn Chuck_Event_broadcast(this: *mut root::Chuck_Event);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event4waitEP14Chuck_VM_ShredP8Chuck_VM"]
        pub fn Chuck_Event_wait(
            this: *mut root::Chuck_Event,
            shred: *mut root::Chuck_VM_Shred,
            vm: *mut root::Chuck_VM,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event6removeEP14Chuck_VM_Shred"]
        pub fn Chuck_Event_remove(
            this: *mut root::Chuck_Event,
            shred: *mut root::Chuck_VM_Shred,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event15queue_broadcastEP13CBufferSimple"]
        pub fn Chuck_Event_queue_broadcast(
            this: *mut root::Chuck_Event,
            event_buffer: *mut root::CBufferSimple,
        );
    }
    impl Chuck_Event {
        #[inline]
        pub unsafe fn signal(&mut self) {
            Chuck_Event_signal(self)
        }
        #[inline]
        pub unsafe fn broadcast(&mut self) {
            Chuck_Event_broadcast(self)
        }
        #[inline]
        pub unsafe fn wait(&mut self, shred: *mut root::Chuck_VM_Shred, vm: *mut root::Chuck_VM) {
            Chuck_Event_wait(self, shred, vm)
        }
        #[inline]
        pub unsafe fn remove(
            &mut self,
            shred: *mut root::Chuck_VM_Shred,
        ) -> ::std::os::raw::c_ulong {
            Chuck_Event_remove(self, shred)
        }
        #[inline]
        pub unsafe fn queue_broadcast(&mut self, event_buffer: *mut root::CBufferSimple) {
            Chuck_Event_queue_broadcast(self, event_buffer)
        }
    }
    #[repr(C)]
    pub struct Chuck_String {
        pub _base: root::Chuck_Object,
        pub m_charptr: *const ::std::os::raw::c_char,
        pub m_str: root::std::__cxx11::string,
    }
    #[repr(C)]
    pub struct Chuck_IO {
        pub _base: root::Chuck_Event,
        pub m_asyncEvent: *mut root::Chuck_Event,
        pub m_thread: *mut root::XThread,
    }
    #[repr(C)]
    pub struct Chuck_IO_async_args {
        pub fileio_obj: *mut root::Chuck_IO_File,
        pub RETURN: *mut ::std::os::raw::c_void,
        pub intArg: ::std::os::raw::c_long,
        pub floatArg: f64,
        pub stringArg: root::std::__cxx11::string,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO5INT32E"]
        pub static Chuck_IO_INT32: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO5INT16E"]
        pub static Chuck_IO_INT16: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO4INT8E"]
        pub static Chuck_IO_INT8: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO9MODE_SYNCE"]
        pub static Chuck_IO_MODE_SYNC: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO10MODE_ASYNCE"]
        pub static Chuck_IO_MODE_ASYNC: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IOC2Ev"]
        pub fn Chuck_IO_Chuck_IO(this: *mut root::Chuck_IO);
    }
    impl Chuck_IO {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_IO_Chuck_IO(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IOD1Ev"]
        pub fn Chuck_IO_Chuck_IO_destructor(this: *mut root::Chuck_IO);
    }
    #[repr(C)]
    pub struct Chuck_IO_File {
        pub _base: root::Chuck_IO,
        pub m_flags: ::std::os::raw::c_long,
        pub m_iomode: ::std::os::raw::c_long,
        pub m_io: root::std::fstream,
        pub m_dir: *mut root::DIR,
        pub m_dir_start: ::std::os::raw::c_long,
        pub m_path: root::std::__cxx11::string,
        pub m_vmRef: *mut root::Chuck_VM,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File15FLAG_READ_WRITEE"]
        pub static Chuck_IO_File_FLAG_READ_WRITE: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File13FLAG_READONLYE"]
        pub static Chuck_IO_File_FLAG_READONLY: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File14FLAG_WRITEONLYE"]
        pub static Chuck_IO_File_FLAG_WRITEONLY: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File11FLAG_APPENDE"]
        pub static Chuck_IO_File_FLAG_APPEND: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File10TYPE_ASCIIE"]
        pub static Chuck_IO_File_TYPE_ASCII: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File11TYPE_BINARYE"]
        pub static Chuck_IO_File_TYPE_BINARY: ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File15writeStr_threadEPv"]
        pub fn Chuck_IO_File_writeStr_thread(
            data: *mut ::std::os::raw::c_void,
        ) -> root::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File15writeInt_threadEPv"]
        pub fn Chuck_IO_File_writeInt_thread(
            data: *mut ::std::os::raw::c_void,
        ) -> root::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File17writeFloat_threadEPv"]
        pub fn Chuck_IO_File_writeFloat_thread(
            data: *mut ::std::os::raw::c_void,
        ) -> root::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_FileC1EP8Chuck_VM"]
        pub fn Chuck_IO_File_Chuck_IO_File(this: *mut root::Chuck_IO_File, vm: *mut root::Chuck_VM);
    }
    impl Chuck_IO_File {
        #[inline]
        pub unsafe fn writeStr_thread(data: *mut ::std::os::raw::c_void) -> root::THREAD_RETURN {
            Chuck_IO_File_writeStr_thread(data)
        }
        #[inline]
        pub unsafe fn writeInt_thread(data: *mut ::std::os::raw::c_void) -> root::THREAD_RETURN {
            Chuck_IO_File_writeInt_thread(data)
        }
        #[inline]
        pub unsafe fn writeFloat_thread(data: *mut ::std::os::raw::c_void) -> root::THREAD_RETURN {
            Chuck_IO_File_writeFloat_thread(data)
        }
        #[inline]
        pub unsafe fn new(vm: *mut root::Chuck_VM) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_IO_File_Chuck_IO_File(&mut __bindgen_tmp, vm);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_FileD1Ev"]
        pub fn Chuck_IO_File_Chuck_IO_File_destructor(this: *mut root::Chuck_IO_File);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4openERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn Chuck_IO_File_open(
            this: *mut ::std::os::raw::c_void,
            path: *const root::std::__cxx11::string,
            flags: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4goodEv"]
        pub fn Chuck_IO_File_good(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5closeEv"]
        pub fn Chuck_IO_File_close(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5flushEv"]
        pub fn Chuck_IO_File_flush(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4modeEv"]
        pub fn Chuck_IO_File_mode(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4modeEl"]
        pub fn Chuck_IO_File_mode1(this: *mut ::std::os::raw::c_void, flag: ::std::os::raw::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4sizeEv"]
        pub fn Chuck_IO_File_size(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4seekEl"]
        pub fn Chuck_IO_File_seek(this: *mut ::std::os::raw::c_void, pos: ::std::os::raw::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4tellEv"]
        pub fn Chuck_IO_File_tell(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5isDirEv"]
        pub fn Chuck_IO_File_isDir(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File7dirListEv"]
        pub fn Chuck_IO_File_dirList(this: *mut ::std::os::raw::c_void) -> *mut root::Chuck_Array4;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File8readLineEv"]
        pub fn Chuck_IO_File_readLine(this: *mut ::std::os::raw::c_void)
            -> *mut root::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File7readIntEl"]
        pub fn Chuck_IO_File_readInt(
            this: *mut ::std::os::raw::c_void,
            flags: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File9readFloatEv"]
        pub fn Chuck_IO_File_readFloat(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File10readStringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_File_readString(
            this: *mut ::std::os::raw::c_void,
            str: *mut root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File3eofEv"]
        pub fn Chuck_IO_File_eof(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5writeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_File_write(
            this: *mut ::std::os::raw::c_void,
            val: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5writeEl"]
        pub fn Chuck_IO_File_write1(this: *mut ::std::os::raw::c_void, val: ::std::os::raw::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5writeEll"]
        pub fn Chuck_IO_File_write2(
            this: *mut ::std::os::raw::c_void,
            val: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5writeEd"]
        pub fn Chuck_IO_File_write3(this: *mut ::std::os::raw::c_void, val: f64);
    }
    #[repr(C)]
    pub struct Chuck_IO_Chout {
        pub _base: root::Chuck_IO,
        pub m_callback:
            ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
        pub m_buffer: root::std::stringstream,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout19set_output_callbackEPFvPKcE"]
        pub fn Chuck_IO_Chout_set_output_callback(
            this: *mut root::Chuck_IO_Chout,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_ChoutC1EP13Chuck_Carrier"]
        pub fn Chuck_IO_Chout_Chuck_IO_Chout(
            this: *mut root::Chuck_IO_Chout,
            carrier: *mut root::Chuck_Carrier,
        );
    }
    impl Chuck_IO_Chout {
        #[inline]
        pub unsafe fn set_output_callback(
            &mut self,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
        ) {
            Chuck_IO_Chout_set_output_callback(self, fp)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut root::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_IO_Chout_Chuck_IO_Chout(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_ChoutD1Ev"]
        pub fn Chuck_IO_Chout_Chuck_IO_Chout_destructor(this: *mut root::Chuck_IO_Chout);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout4goodEv"]
        pub fn Chuck_IO_Chout_good(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5closeEv"]
        pub fn Chuck_IO_Chout_close(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5flushEv"]
        pub fn Chuck_IO_Chout_flush(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout4modeEv"]
        pub fn Chuck_IO_Chout_mode(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout4modeEl"]
        pub fn Chuck_IO_Chout_mode1(
            this: *mut ::std::os::raw::c_void,
            flag: ::std::os::raw::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout8readLineEv"]
        pub fn Chuck_IO_Chout_readLine(
            this: *mut ::std::os::raw::c_void,
        ) -> *mut root::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout7readIntEl"]
        pub fn Chuck_IO_Chout_readInt(
            this: *mut ::std::os::raw::c_void,
            flags: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout9readFloatEv"]
        pub fn Chuck_IO_Chout_readFloat(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout10readStringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_Chout_readString(
            this: *mut ::std::os::raw::c_void,
            str: *mut root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout3eofEv"]
        pub fn Chuck_IO_Chout_eof(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5writeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_Chout_write(
            this: *mut ::std::os::raw::c_void,
            val: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5writeEl"]
        pub fn Chuck_IO_Chout_write1(
            this: *mut ::std::os::raw::c_void,
            val: ::std::os::raw::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5writeEll"]
        pub fn Chuck_IO_Chout_write2(
            this: *mut ::std::os::raw::c_void,
            val: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5writeEd"]
        pub fn Chuck_IO_Chout_write3(this: *mut ::std::os::raw::c_void, val: f64);
    }
    #[repr(C)]
    pub struct Chuck_IO_Cherr {
        pub _base: root::Chuck_IO,
        pub m_callback:
            ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
        pub m_buffer: root::std::stringstream,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr19set_output_callbackEPFvPKcE"]
        pub fn Chuck_IO_Cherr_set_output_callback(
            this: *mut root::Chuck_IO_Cherr,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_CherrC1EP13Chuck_Carrier"]
        pub fn Chuck_IO_Cherr_Chuck_IO_Cherr(
            this: *mut root::Chuck_IO_Cherr,
            carrier: *mut root::Chuck_Carrier,
        );
    }
    impl Chuck_IO_Cherr {
        #[inline]
        pub unsafe fn set_output_callback(
            &mut self,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
        ) {
            Chuck_IO_Cherr_set_output_callback(self, fp)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut root::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_IO_Cherr_Chuck_IO_Cherr(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_CherrD1Ev"]
        pub fn Chuck_IO_Cherr_Chuck_IO_Cherr_destructor(this: *mut root::Chuck_IO_Cherr);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr4goodEv"]
        pub fn Chuck_IO_Cherr_good(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5closeEv"]
        pub fn Chuck_IO_Cherr_close(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5flushEv"]
        pub fn Chuck_IO_Cherr_flush(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr4modeEv"]
        pub fn Chuck_IO_Cherr_mode(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr4modeEl"]
        pub fn Chuck_IO_Cherr_mode1(
            this: *mut ::std::os::raw::c_void,
            flag: ::std::os::raw::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr8readLineEv"]
        pub fn Chuck_IO_Cherr_readLine(
            this: *mut ::std::os::raw::c_void,
        ) -> *mut root::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr7readIntEl"]
        pub fn Chuck_IO_Cherr_readInt(
            this: *mut ::std::os::raw::c_void,
            flags: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr9readFloatEv"]
        pub fn Chuck_IO_Cherr_readFloat(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr10readStringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_Cherr_readString(
            this: *mut ::std::os::raw::c_void,
            str: *mut root::std::__cxx11::string,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr3eofEv"]
        pub fn Chuck_IO_Cherr_eof(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5writeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_Cherr_write(
            this: *mut ::std::os::raw::c_void,
            val: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5writeEl"]
        pub fn Chuck_IO_Cherr_write1(
            this: *mut ::std::os::raw::c_void,
            val: ::std::os::raw::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5writeEll"]
        pub fn Chuck_IO_Cherr_write2(
            this: *mut ::std::os::raw::c_void,
            val: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5writeEd"]
        pub fn Chuck_IO_Cherr_write3(this: *mut ::std::os::raw::c_void, val: f64);
    }
    extern "C" {
        #[link_name = "\u{1}g_default_chugin_path"]
        pub static mut g_default_chugin_path: [::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}g_chugin_path_envvar"]
        pub static mut g_chugin_path_envvar: [::std::os::raw::c_char; 0usize];
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_UGen {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_UAna {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_UAnaBlobProxy {
        _unused: [u8; 0],
    }
    pub mod Chuck_DL_Api {
        
        use self::super::super::root;
        pub type Object = *mut ::std::os::raw::c_void;
        pub type Type = *mut ::std::os::raw::c_void;
        pub type String = *mut ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Api {
            pub vm: *mut root::Chuck_DL_Api::Api_VMApi,
            pub object: *mut root::Chuck_DL_Api::Api_ObjectApi,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Api_VMApi {
            pub get_srate: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    arg2: *mut root::Chuck_VM_Shred,
                ) -> ::std::os::raw::c_ulong,
            >,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN12Chuck_DL_Api3Api5VMApiC1Ev"]
            pub fn Api_VMApi_VMApi(this: *mut root::Chuck_DL_Api::Api_VMApi);
        }
        impl Api_VMApi {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                Api_VMApi_VMApi(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Api_ObjectApi {
            pub get_type: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    arg2: *mut root::Chuck_VM_Shred,
                    name: *mut root::std::__cxx11::string,
                ) -> root::Chuck_DL_Api::Type,
            >,
            pub create: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    arg2: *mut root::Chuck_VM_Shred,
                    type_: root::Chuck_DL_Api::Type,
                ) -> root::Chuck_DL_Api::Object,
            >,
            pub create_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    arg2: *mut root::Chuck_VM_Shred,
                    value: *mut root::std::__cxx11::string,
                ) -> root::Chuck_DL_Api::String,
            >,
            pub get_mvar_int: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut ::std::os::raw::c_long,
                ) -> ::std::os::raw::c_ulong,
            >,
            pub get_mvar_float: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut f64,
                ) -> ::std::os::raw::c_ulong,
            >,
            pub get_mvar_dur: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut f64,
                ) -> ::std::os::raw::c_ulong,
            >,
            pub get_mvar_time: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut f64,
                ) -> ::std::os::raw::c_ulong,
            >,
            pub get_mvar_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut root::Chuck_DL_Api::String,
                ) -> ::std::os::raw::c_ulong,
            >,
            pub get_mvar_object: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut root::Chuck_DL_Api::Object,
                ) -> ::std::os::raw::c_ulong,
            >,
            pub set_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    string: root::Chuck_DL_Api::String,
                    value: *mut root::std::__cxx11::string,
                ) -> ::std::os::raw::c_ulong,
            >,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN12Chuck_DL_Api3Api9ObjectApiC1Ev"]
            pub fn Api_ObjectApi_ObjectApi(this: *mut root::Chuck_DL_Api::Api_ObjectApi);
        }
        impl Api_ObjectApi {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                Api_ObjectApi_ObjectApi(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZN12Chuck_DL_Api3Api5g_apiE"]
            pub static mut Api_g_api: root::Chuck_DL_Api::Api;
        }
    }
    pub type CK_DL_API = *const root::Chuck_DL_Api::Api;
    pub type f_ck_declversion =
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>;
    pub type f_ck_query = ::std::option::Option<
        unsafe extern "C" fn(QUERY: *mut root::Chuck_DL_Query) -> ::std::os::raw::c_ulong,
    >;
    pub type f_alloc = ::std::option::Option<
        unsafe extern "C" fn(
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ) -> *mut root::Chuck_Object,
    >;
    pub type f_ctor = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            ARGS: *mut ::std::os::raw::c_void,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_dtor = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_mfun = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            ARGS: *mut ::std::os::raw::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_sfun = ::std::option::Option<
        unsafe extern "C" fn(
            ARGS: *mut ::std::os::raw::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_tick = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            in_: f32,
            out: *mut f32,
            API: root::CK_DL_API,
        ) -> ::std::os::raw::c_ulong,
    >;
    pub type f_tickf = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            in_: *mut f32,
            out: *mut f32,
            nframes: ::std::os::raw::c_ulong,
            API: root::CK_DL_API,
        ) -> ::std::os::raw::c_ulong,
    >;
    pub type f_ctrl = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            ARGS: *mut ::std::os::raw::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_cget = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            ARGS: *mut ::std::os::raw::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_pmsg = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            MSG: *const ::std::os::raw::c_char,
            ARGS: *mut ::std::os::raw::c_void,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ) -> ::std::os::raw::c_ulong,
    >;
    pub type f_tock = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            UANA: *mut root::Chuck_UAna,
            BLOB: *mut root::Chuck_UAnaBlobProxy,
            API: root::CK_DL_API,
        ) -> ::std::os::raw::c_ulong,
    >;
    pub type f_mainthreadhook = ::std::option::Option<
        unsafe extern "C" fn(bindle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong,
    >;
    pub type f_mainthreadquit = ::std::option::Option<
        unsafe extern "C" fn(bindle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong,
    >;
    pub type f_setname = ::std::option::Option<
        unsafe extern "C" fn(query: *mut root::Chuck_DL_Query, name: *const ::std::os::raw::c_char),
    >;
    pub type f_begin_class = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            name: *const ::std::os::raw::c_char,
            parent: *const ::std::os::raw::c_char,
        ),
    >;
    pub type f_add_ctor = ::std::option::Option<
        unsafe extern "C" fn(query: *mut root::Chuck_DL_Query, ctor: root::f_ctor),
    >;
    pub type f_add_dtor = ::std::option::Option<
        unsafe extern "C" fn(query: *mut root::Chuck_DL_Query, dtor: root::f_dtor),
    >;
    pub type f_add_mfun = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            mfun: root::f_mfun,
            type_: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ),
    >;
    pub type f_add_sfun = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            sfun: root::f_sfun,
            type_: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ),
    >;
    pub type f_add_mvar = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            type_: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            is_const: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
    >;
    pub type f_add_svar = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            type_: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            is_const: ::std::os::raw::c_ulong,
            static_addr: *mut ::std::os::raw::c_void,
        ),
    >;
    pub type f_add_arg = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            type_: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ),
    >;
    pub type f_add_ugen_func = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            tick: root::f_tick,
            pmsg: root::f_pmsg,
            num_in: ::std::os::raw::c_ulong,
            num_out: ::std::os::raw::c_ulong,
        ),
    >;
    pub type f_add_ugen_funcf = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            tickf: root::f_tickf,
            pmsg: root::f_pmsg,
            num_in: ::std::os::raw::c_ulong,
            num_out: ::std::os::raw::c_ulong,
        ),
    >;
    pub type f_add_ugen_funcf_auto_num_channels = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            tickf: root::f_tickf,
            psmg: root::f_pmsg,
        ),
    >;
    pub type f_add_ugen_ctrl = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            ctrl: root::f_ctrl,
            cget: root::f_cget,
            type_: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ),
    >;
    pub type f_end_class = ::std::option::Option<
        unsafe extern "C" fn(query: *mut root::Chuck_DL_Query) -> ::std::os::raw::c_ulong,
    >;
    pub type f_doc_class = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            doc: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
    >;
    pub type f_add_example = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            ex: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
    >;
    pub type f_doc_func = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            doc: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
    >;
    pub type f_doc_var = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            doc: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
    >;
    #[repr(C)]
    pub struct Chuck_DL_Query {
        pub m_carrier: *mut root::Chuck_Carrier,
        pub setname: root::f_setname,
        pub begin_class: root::f_begin_class,
        pub add_ctor: root::f_add_ctor,
        pub add_dtor: root::f_add_dtor,
        pub add_mfun: root::f_add_mfun,
        pub add_sfun: root::f_add_sfun,
        pub add_mvar: root::f_add_mvar,
        pub add_svar: root::f_add_svar,
        pub add_arg: root::f_add_arg,
        pub add_ugen_func: root::f_add_ugen_func,
        pub add_ugen_funcf: root::f_add_ugen_funcf,
        pub add_ugen_funcf_auto_num_channels: root::f_add_ugen_funcf_auto_num_channels,
        pub add_ugen_ctrl: root::f_add_ugen_ctrl,
        pub end_class: root::f_end_class,
        pub last_var: *mut root::Chuck_DL_Value,
        pub doc_class: root::f_doc_class,
        pub doc_func: root::f_doc_func,
        pub doc_var: root::f_doc_var,
        pub add_ex: root::f_add_example,
        pub dll_ref: *mut root::Chuck_DLL,
        pub reserved: *mut ::std::os::raw::c_void,
        pub srate: ::std::os::raw::c_ulong,
        pub linepos: ::std::os::raw::c_int,
        pub dll_name: root::std::__cxx11::string,
        pub curr_class: *mut root::Chuck_DL_Class,
        pub curr_func: *mut root::Chuck_DL_Func,
        pub name: root::std::__cxx11::string,
        pub classes: root::std::vector,
        pub stack: root::std::vector,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_Query5clearEv"]
        pub fn Chuck_DL_Query_clear(this: *mut root::Chuck_DL_Query);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_QueryC1EP13Chuck_Carrier"]
        pub fn Chuck_DL_Query_Chuck_DL_Query(
            this: *mut root::Chuck_DL_Query,
            carrier: *mut root::Chuck_Carrier,
        );
    }
    impl Chuck_DL_Query {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Chuck_DL_Query_clear(self)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut root::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DL_Query_Chuck_DL_Query(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Class {
        pub name: root::std::__cxx11::string,
        pub parent: root::std::__cxx11::string,
        pub ctors: root::std::vector,
        pub dtor: *mut root::Chuck_DL_Func,
        pub mfuns: root::std::vector,
        pub sfuns: root::std::vector,
        pub mvars: root::std::vector,
        pub svars: root::std::vector,
        pub ugen_tick: root::f_tick,
        pub ugen_tickf: root::f_tickf,
        pub ugen_pmsg: root::f_pmsg,
        pub ugen_ctrl: root::std::vector,
        pub uana_tock: root::f_tock,
        pub classes: root::std::vector,
        pub current_mvar_offset: ::std::os::raw::c_ulong,
        pub ugen_num_in: ::std::os::raw::c_ulong,
        pub ugen_num_out: ::std::os::raw::c_ulong,
        pub doc: root::std::__cxx11::string,
        pub examples: root::std::vector,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_ClassD1Ev"]
        pub fn Chuck_DL_Class_Chuck_DL_Class_destructor(this: *mut root::Chuck_DL_Class);
    }
    impl Chuck_DL_Class {
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_DL_Class_Chuck_DL_Class_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Value {
        pub name: root::std::__cxx11::string,
        pub type_: root::std::__cxx11::string,
        pub is_const: ::std::os::raw::c_ulong,
        pub static_addr: *mut ::std::os::raw::c_void,
        pub doc: root::std::__cxx11::string,
    }
    #[repr(C)]
    pub struct Chuck_DL_Func {
        pub name: root::std::__cxx11::string,
        pub type_: root::std::__cxx11::string,
        pub __bindgen_anon_1: root::Chuck_DL_Func__bindgen_ty_1,
        pub args: root::std::vector,
        pub doc: root::std::__cxx11::string,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_DL_Func__bindgen_ty_1 {
        pub ctor: root::f_ctor,
        pub dtor: root::f_dtor,
        pub mfun: root::f_mfun,
        pub sfun: root::f_sfun,
        pub addr: ::std::os::raw::c_ulong,
        _bindgen_union_align: u64,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_DL_FuncD1Ev"]
        pub fn Chuck_DL_Func_Chuck_DL_Func_destructor(this: *mut root::Chuck_DL_Func);
    }
    impl Chuck_DL_Func {
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_DL_Func_Chuck_DL_Func_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Ctrl {
        pub name: root::std::__cxx11::string,
        pub type_: root::std::__cxx11::string,
        pub types: root::std::vector,
        pub ctrl: root::f_ctrl,
        pub cget: root::f_cget,
    }
    extern "C" {
        #[link_name = "\u{1}_Z13make_new_mfunPKcS0_PFvP12Chuck_ObjectPvP15Chuck_DL_ReturnP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEE"]
        pub fn make_new_mfun(
            t: *const ::std::os::raw::c_char,
            n: *const ::std::os::raw::c_char,
            mfun: root::f_mfun,
        ) -> *mut root::Chuck_DL_Func;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13make_new_sfunPKcS0_PFvPvP15Chuck_DL_ReturnP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEE"]
        pub fn make_new_sfun(
            t: *const ::std::os::raw::c_char,
            n: *const ::std::os::raw::c_char,
            sfun: root::f_sfun,
        ) -> *mut root::Chuck_DL_Func;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12make_new_argPKcS0_"]
        pub fn make_new_arg(
            t: *const ::std::os::raw::c_char,
            n: *const ::std::os::raw::c_char,
        ) -> *mut root::Chuck_DL_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13make_new_mvarPKcS0_m"]
        pub fn make_new_mvar(
            t: *const ::std::os::raw::c_char,
            n: *const ::std::os::raw::c_char,
            c: ::std::os::raw::c_ulong,
        ) -> *mut root::Chuck_DL_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13make_new_svarPKcS0_mPv"]
        pub fn make_new_svar(
            t: *const ::std::os::raw::c_char,
            n: *const ::std::os::raw::c_char,
            c: ::std::os::raw::c_ulong,
            a: *mut ::std::os::raw::c_void,
        ) -> *mut root::Chuck_DL_Value;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_DL_Return {
        pub v_int: ::std::os::raw::c_long,
        pub v_uint: ::std::os::raw::c_ulong,
        pub v_float: f64,
        pub v_dur: f64,
        pub v_time: f64,
        pub v_complex: root::t_CKCOMPLEX,
        pub v_polar: root::t_CKPOLAR,
        pub v_vec3: root::t_CKVEC3,
        pub v_vec4: root::t_CKVEC4,
        pub v_object: *mut root::Chuck_Object,
        pub v_string: *mut root::Chuck_String,
        _bindgen_union_align: [u64; 4usize],
    }
    #[repr(C)]
    pub struct Chuck_DLL {
        pub _base: root::Chuck_VM_Object,
        pub m_handle: *mut ::std::os::raw::c_void,
        pub m_last_error: root::std::__cxx11::string,
        pub m_filename: root::std::__cxx11::string,
        pub m_id: root::std::__cxx11::string,
        pub m_func: root::std::__cxx11::string,
        pub m_done_query: ::std::os::raw::c_ulong,
        pub m_version_func: root::f_ck_declversion,
        pub m_query_func: root::f_ck_query,
        pub m_query: root::Chuck_DL_Query,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL4loadEPKcS1_m"]
        pub fn Chuck_DLL_load(
            this: *mut root::Chuck_DLL,
            filename: *const ::std::os::raw::c_char,
            func: *const ::std::os::raw::c_char,
            lazy: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL4loadEPFmP14Chuck_DL_QueryEm"]
        pub fn Chuck_DLL_load1(
            this: *mut root::Chuck_DLL,
            query_func: root::f_ck_query,
            lazy: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL8get_addrEPKc"]
        pub fn Chuck_DLL_get_addr(
            this: *mut root::Chuck_DLL,
            symbol: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK9Chuck_DLL10last_errorEv"]
        pub fn Chuck_DLL_last_error(this: *const root::Chuck_DLL) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL6unloadEv"]
        pub fn Chuck_DLL_unload(this: *mut root::Chuck_DLL) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL5queryEv"]
        pub fn Chuck_DLL_query(this: *mut root::Chuck_DLL) -> *const root::Chuck_DL_Query;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK9Chuck_DLL4goodEv"]
        pub fn Chuck_DLL_good(this: *const root::Chuck_DLL) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK9Chuck_DLL4nameEv"]
        pub fn Chuck_DLL_name(this: *const root::Chuck_DLL) -> *const ::std::os::raw::c_char;
    }
    impl Chuck_DLL {
        #[inline]
        pub unsafe fn load(
            &mut self,
            filename: *const ::std::os::raw::c_char,
            func: *const ::std::os::raw::c_char,
            lazy: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong {
            Chuck_DLL_load(self, filename, func, lazy)
        }
        #[inline]
        pub unsafe fn load1(
            &mut self,
            query_func: root::f_ck_query,
            lazy: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong {
            Chuck_DLL_load1(self, query_func, lazy)
        }
        #[inline]
        pub unsafe fn get_addr(
            &mut self,
            symbol: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void {
            Chuck_DLL_get_addr(self, symbol)
        }
        #[inline]
        pub unsafe fn last_error(&self) -> *const ::std::os::raw::c_char {
            Chuck_DLL_last_error(self)
        }
        #[inline]
        pub unsafe fn unload(&mut self) -> ::std::os::raw::c_ulong {
            Chuck_DLL_unload(self)
        }
        #[inline]
        pub unsafe fn query(&mut self) -> *const root::Chuck_DL_Query {
            Chuck_DLL_query(self)
        }
        #[inline]
        pub unsafe fn good(&self) -> ::std::os::raw::c_ulong {
            Chuck_DLL_good(self)
        }
        #[inline]
        pub unsafe fn name(&self) -> *const ::std::os::raw::c_char {
            Chuck_DLL_name(self)
        }
    }
    extern "C" {
        pub fn _dl_mcount_wrapper_check(__selfpc: *mut ::std::os::raw::c_void);
    }
    pub type Lmid_t = ::std::os::raw::c_long;
    extern "C" {
        pub fn dlopen(
            __file: *const ::std::os::raw::c_char,
            __mode: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dlsym(
            __handle: *mut ::std::os::raw::c_void,
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn dlmopen(
            __nsid: root::Lmid_t,
            __file: *const ::std::os::raw::c_char,
            __mode: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn dlvsym(
            __handle: *mut ::std::os::raw::c_void,
            __name: *const ::std::os::raw::c_char,
            __version: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn dlerror() -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_info {
        pub dli_fname: *const ::std::os::raw::c_char,
        pub dli_fbase: *mut ::std::os::raw::c_void,
        pub dli_sname: *const ::std::os::raw::c_char,
        pub dli_saddr: *mut ::std::os::raw::c_void,
    }
    extern "C" {
        pub fn dladdr(
            __address: *const ::std::os::raw::c_void,
            __info: *mut root::Dl_info,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dladdr1(
            __address: *const ::std::os::raw::c_void,
            __info: *mut root::Dl_info,
            __extra_info: *mut ::std::os::raw::c_void,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub const RTLD_DL_SYMENT: root::_bindgen_ty_47 = 1;
    pub const RTLD_DL_LINKMAP: root::_bindgen_ty_47 = 2;
    pub type _bindgen_ty_47 = u32;
    extern "C" {
        pub fn dlinfo(
            __handle: *mut ::std::os::raw::c_void,
            __request: ::std::os::raw::c_int,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    pub const RTLD_DI_LMID: root::_bindgen_ty_48 = 1;
    pub const RTLD_DI_LINKMAP: root::_bindgen_ty_48 = 2;
    pub const RTLD_DI_CONFIGADDR: root::_bindgen_ty_48 = 3;
    pub const RTLD_DI_SERINFO: root::_bindgen_ty_48 = 4;
    pub const RTLD_DI_SERINFOSIZE: root::_bindgen_ty_48 = 5;
    pub const RTLD_DI_ORIGIN: root::_bindgen_ty_48 = 6;
    pub const RTLD_DI_PROFILENAME: root::_bindgen_ty_48 = 7;
    pub const RTLD_DI_PROFILEOUT: root::_bindgen_ty_48 = 8;
    pub const RTLD_DI_TLS_MODID: root::_bindgen_ty_48 = 9;
    pub const RTLD_DI_TLS_DATA: root::_bindgen_ty_48 = 10;
    pub const RTLD_DI_MAX: root::_bindgen_ty_48 = 10;
    pub type _bindgen_ty_48 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_serpath {
        pub dls_name: *mut ::std::os::raw::c_char,
        pub dls_flags: ::std::os::raw::c_uint,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_serinfo {
        pub dls_size: usize,
        pub dls_cnt: ::std::os::raw::c_uint,
        pub dls_serpath: [root::Dl_serpath; 1usize],
    }
    extern "C" {
        pub fn stk_query(QUERY: *mut root::Chuck_DL_Query) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10stk_detachP13Chuck_Carrier"]
        pub fn stk_detach(carrier: *mut root::Chuck_Carrier) -> ::std::os::raw::c_ulong;
    }
    #[repr(C)]
    pub struct StkError__bindgen_vtable(::std::os::raw::c_void);
    #[doc = "! STK error handling class."]
    #[doc = "*!"]
    #[doc = "This is a fairly abstract exception handling class.  There could"]
    #[doc = "be sub-classes to take care of more specific error conditions ... or"]
    #[doc = "not."]
    #[doc = "*/"]
    #[repr(C)]
    pub struct StkError {
        pub vtable_: *const StkError__bindgen_vtable,
        pub message: [::std::os::raw::c_char; 256usize],
        pub type_: root::StkError_TYPE,
    }
    pub const StkError_TYPE_WARNING: root::StkError_TYPE = 0;
    pub const StkError_TYPE_DEBUG_WARNING: root::StkError_TYPE = 1;
    pub const StkError_TYPE_FUNCTION_ARGUMENT: root::StkError_TYPE = 2;
    pub const StkError_TYPE_FILE_NOT_FOUND: root::StkError_TYPE = 3;
    pub const StkError_TYPE_FILE_UNKNOWN_FORMAT: root::StkError_TYPE = 4;
    pub const StkError_TYPE_FILE_ERROR: root::StkError_TYPE = 5;
    pub const StkError_TYPE_PROCESS_THREAD: root::StkError_TYPE = 6;
    pub const StkError_TYPE_PROCESS_SOCKET: root::StkError_TYPE = 7;
    pub const StkError_TYPE_PROCESS_SOCKET_IPADDR: root::StkError_TYPE = 8;
    pub const StkError_TYPE_AUDIO_SYSTEM: root::StkError_TYPE = 9;
    pub const StkError_TYPE_MIDI_SYSTEM: root::StkError_TYPE = 10;
    pub const StkError_TYPE_UNSPECIFIED: root::StkError_TYPE = 11;
    pub type StkError_TYPE = u32;
    extern "C" {
        #[doc = "! The constructor."]
        #[link_name = "\u{1}_ZN8StkErrorC1EPKcNS_4TYPEE"]
        pub fn StkError_StkError(
            this: *mut root::StkError,
            p: *const ::std::os::raw::c_char,
            tipe: root::StkError_TYPE,
        );
    }
    impl StkError {
        #[inline]
        pub unsafe fn new(p: *const ::std::os::raw::c_char, tipe: root::StkError_TYPE) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            StkError_StkError(&mut __bindgen_tmp, p, tipe);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! The destructor."]
        #[link_name = "\u{1}_ZN8StkErrorD1Ev"]
        pub fn StkError_StkError_destructor(this: *mut root::StkError);
    }
    extern "C" {
        #[doc = "! Prints \"thrown\" error message to stdout."]
        #[link_name = "\u{1}_ZN8StkError12printMessageEv"]
        pub fn StkError_printMessage(this: *mut ::std::os::raw::c_void);
    }
    #[repr(C)]
    pub struct Stk__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug)]
    pub struct Stk {
        pub vtable_: *const Stk__bindgen_vtable,
    }
    pub type Stk_STK_FORMAT = ::std::os::raw::c_ulong;
    extern "C" {
        #[link_name = "\u{1}_ZN3Stk9STK_SINT8E"]
        pub static Stk_STK_SINT8: root::Stk_STK_FORMAT;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN3Stk10STK_SINT16E"]
        pub static Stk_STK_SINT16: root::Stk_STK_FORMAT;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN3Stk10STK_SINT32E"]
        pub static Stk_STK_SINT32: root::Stk_STK_FORMAT;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN3Stk10MY_FLOAT32E"]
        pub static Stk_MY_FLOAT32: root::Stk_STK_FORMAT;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN3Stk10MY_FLOAT64E"]
        pub static Stk_MY_FLOAT64: root::Stk_STK_FORMAT;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN3Stk5srateE"]
        pub static mut Stk_srate: f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN3Stk11rawwavepathB5cxx11E"]
        pub static mut Stk_rawwavepath: root::std::__cxx11::string;
    }
    extern "C" {
        #[doc = "! Static method which returns the current STK sample rate."]
        #[link_name = "\u{1}_ZN3Stk10sampleRateEv"]
        pub fn Stk_sampleRate() -> f64;
    }
    extern "C" {
        #[doc = "! Static method which sets the STK sample rate."]
        #[doc = "*!"]
        #[doc = "The sample rate set using this method is queried by all STK"]
        #[doc = "classes which depend on its value.  It is initialized to the"]
        #[doc = "default SRATE set in Stk.h.  Many STK classes use the sample rate"]
        #[doc = "during instantiation.  Therefore, if you wish to use a rate which"]
        #[doc = "is different from the default rate, it is imperative that it be"]
        #[doc = "set \\e BEFORE STK objects are instantiated."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN3Stk13setSampleRateEd"]
        pub fn Stk_setSampleRate(newRate: f64);
    }
    extern "C" {
        #[doc = "! Static method which returns the current rawwave path."]
        #[link_name = "\u{1}_ZN3Stk11rawwavePathB5cxx11Ev"]
        pub fn Stk_rawwavePath() -> root::std::__cxx11::string;
    }
    extern "C" {
        #[doc = "! Static method which sets the STK rawwave path."]
        #[link_name = "\u{1}_ZN3Stk14setRawwavePathENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Stk_setRawwavePath(newPath: root::std::__cxx11::string);
    }
    extern "C" {
        #[doc = "! Static method which byte-swaps a 16-bit data type."]
        #[link_name = "\u{1}_ZN3Stk6swap16EPh"]
        pub fn Stk_swap16(ptr: *mut ::std::os::raw::c_uchar);
    }
    extern "C" {
        #[doc = "! Static method which byte-swaps a 32-bit data type."]
        #[link_name = "\u{1}_ZN3Stk6swap32EPh"]
        pub fn Stk_swap32(ptr: *mut ::std::os::raw::c_uchar);
    }
    extern "C" {
        #[doc = "! Static method which byte-swaps a 64-bit data type."]
        #[link_name = "\u{1}_ZN3Stk6swap64EPh"]
        pub fn Stk_swap64(ptr: *mut ::std::os::raw::c_uchar);
    }
    extern "C" {
        #[doc = "! Static cross-platform method to sleep for a number of milliseconds."]
        #[link_name = "\u{1}_ZN3Stk5sleepEm"]
        pub fn Stk_sleep(milliseconds: ::std::os::raw::c_ulong);
    }
    extern "C" {
        #[doc = "! Function for error reporting and handling."]
        #[link_name = "\u{1}_ZN3Stk11handleErrorEPKcN8StkError4TYPEE"]
        pub fn Stk_handleError(message: *const ::std::os::raw::c_char, type_: root::StkError_TYPE);
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN3StkC1Ev"]
        pub fn Stk_Stk(this: *mut root::Stk);
    }
    impl Stk {
        #[inline]
        pub unsafe fn sampleRate() -> f64 {
            Stk_sampleRate()
        }
        #[inline]
        pub unsafe fn setSampleRate(newRate: f64) {
            Stk_setSampleRate(newRate)
        }
        #[inline]
        pub unsafe fn rawwavePath() -> root::std::__cxx11::string {
            Stk_rawwavePath()
        }
        #[inline]
        pub unsafe fn setRawwavePath(newPath: root::std::__cxx11::string) {
            Stk_setRawwavePath(newPath)
        }
        #[inline]
        pub unsafe fn swap16(ptr: *mut ::std::os::raw::c_uchar) {
            Stk_swap16(ptr)
        }
        #[inline]
        pub unsafe fn swap32(ptr: *mut ::std::os::raw::c_uchar) {
            Stk_swap32(ptr)
        }
        #[inline]
        pub unsafe fn swap64(ptr: *mut ::std::os::raw::c_uchar) {
            Stk_swap64(ptr)
        }
        #[inline]
        pub unsafe fn sleep(milliseconds: ::std::os::raw::c_ulong) {
            Stk_sleep(milliseconds)
        }
        #[inline]
        pub unsafe fn handleError(
            message: *const ::std::os::raw::c_char,
            type_: root::StkError_TYPE,
        ) {
            Stk_handleError(message, type_)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Stk_Stk(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN3StkD1Ev"]
        pub fn Stk_Stk_destructor(this: *mut root::Stk);
    }
    pub type SINT16 = ::std::os::raw::c_short;
    pub type SINT32 = ::std::os::raw::c_int;
    pub type FLOAT32 = f32;
    pub type FLOAT64 = f64;
    #[repr(C)]
    #[derive(Debug)]
    pub struct Envelope {
        pub _base: root::Stk,
        pub value: f64,
        pub target: f64,
        pub rate: f64,
        pub m_target: f64,
        pub m_time: f64,
        pub state: ::std::os::raw::c_int,
    }
    extern "C" {
        #[doc = "! Set the \\e rate."]
        #[link_name = "\u{1}_ZN8Envelope7setRateEd"]
        pub fn Envelope_setRate(this: *mut root::Envelope, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the \\e rate based on a time duration."]
        #[link_name = "\u{1}_ZN8Envelope7setTimeEd"]
        pub fn Envelope_setTime(this: *mut root::Envelope, aTime: f64);
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK8Envelope7lastOutEv"]
        pub fn Envelope_lastOut(this: *const root::Envelope) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN8EnvelopeC1Ev"]
        pub fn Envelope_Envelope(this: *mut root::Envelope);
    }
    impl Envelope {
        #[inline]
        pub unsafe fn setRate(&mut self, aRate: f64) {
            Envelope_setRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setTime(&mut self, aTime: f64) {
            Envelope_setTime(self, aTime)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Envelope_lastOut(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Envelope_Envelope(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8EnvelopeD1Ev"]
        pub fn Envelope_Envelope_destructor(this: *mut root::Envelope);
    }
    extern "C" {
        #[doc = "! Set target = 1."]
        #[link_name = "\u{1}_ZN8Envelope5keyOnEv"]
        pub fn Envelope_keyOn(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[doc = "! Set target = 0."]
        #[link_name = "\u{1}_ZN8Envelope6keyOffEv"]
        pub fn Envelope_keyOff(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[doc = "! Set the target value."]
        #[link_name = "\u{1}_ZN8Envelope9setTargetEd"]
        pub fn Envelope_setTarget(this: *mut ::std::os::raw::c_void, aTarget: f64);
    }
    extern "C" {
        #[doc = "! Set current and target values to \\e aValue."]
        #[link_name = "\u{1}_ZN8Envelope8setValueEd"]
        pub fn Envelope_setValue(this: *mut ::std::os::raw::c_void, aValue: f64);
    }
    extern "C" {
        #[doc = "! Return the current envelope \\e state (0 = at target, 1 otherwise)."]
        #[link_name = "\u{1}_ZNK8Envelope8getStateEv"]
        pub fn Envelope_getState(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Return one envelope output value."]
        #[link_name = "\u{1}_ZN8Envelope4tickEv"]
        pub fn Envelope_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return \\e vectorSize envelope outputs in \\e vector."]
        #[link_name = "\u{1}_ZN8Envelope4tickEPdj"]
        pub fn Envelope_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ADSR {
        pub _base: root::Envelope,
        pub attackRate: f64,
        pub decayRate: f64,
        pub sustainLevel: f64,
        pub releaseRate: f64,
        pub m_decayTime: f64,
        pub m_releaseTime: f64,
    }
    pub const ADSR_ATTACK: root::ADSR__bindgen_ty_1 = 0;
    pub const ADSR_DECAY: root::ADSR__bindgen_ty_1 = 1;
    pub const ADSR_SUSTAIN: root::ADSR__bindgen_ty_1 = 2;
    pub const ADSR_RELEASE: root::ADSR__bindgen_ty_1 = 3;
    pub const ADSR_DONE: root::ADSR__bindgen_ty_1 = 4;
    #[doc = "! Envelope states."]
    pub type ADSR__bindgen_ty_1 = u32;
    extern "C" {
        #[doc = "! Set the attack rate."]
        #[link_name = "\u{1}_ZN4ADSR13setAttackRateEd"]
        pub fn ADSR_setAttackRate(this: *mut root::ADSR, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the decay rate."]
        #[link_name = "\u{1}_ZN4ADSR12setDecayRateEd"]
        pub fn ADSR_setDecayRate(this: *mut root::ADSR, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the sustain level."]
        #[link_name = "\u{1}_ZN4ADSR15setSustainLevelEd"]
        pub fn ADSR_setSustainLevel(this: *mut root::ADSR, aLevel: f64);
    }
    extern "C" {
        #[doc = "! Set the release rate."]
        #[link_name = "\u{1}_ZN4ADSR14setReleaseRateEd"]
        pub fn ADSR_setReleaseRate(this: *mut root::ADSR, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the attack rate based on a time duration."]
        #[link_name = "\u{1}_ZN4ADSR13setAttackTimeEd"]
        pub fn ADSR_setAttackTime(this: *mut root::ADSR, aTime: f64);
    }
    extern "C" {
        #[doc = "! Set the decay rate based on a time duration."]
        #[link_name = "\u{1}_ZN4ADSR12setDecayTimeEd"]
        pub fn ADSR_setDecayTime(this: *mut root::ADSR, aTime: f64);
    }
    extern "C" {
        #[doc = "! Set the release rate based on a time duration."]
        #[link_name = "\u{1}_ZN4ADSR14setReleaseTimeEd"]
        pub fn ADSR_setReleaseTime(this: *mut root::ADSR, aTime: f64);
    }
    extern "C" {
        #[doc = "! Set sustain level and attack, decay, and release state rates based on time durations."]
        #[link_name = "\u{1}_ZN4ADSR11setAllTimesEdddd"]
        pub fn ADSR_setAllTimes(
            this: *mut root::ADSR,
            aTime: f64,
            dTime: f64,
            sLevel: f64,
            rTime: f64,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4ADSR13getAttackTimeEv"]
        pub fn ADSR_getAttackTime(this: *mut root::ADSR) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4ADSR12getDecayTimeEv"]
        pub fn ADSR_getDecayTime(this: *mut root::ADSR) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4ADSR14getReleaseTimeEv"]
        pub fn ADSR_getReleaseTime(this: *mut root::ADSR) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN4ADSRC1Ev"]
        pub fn ADSR_ADSR(this: *mut root::ADSR);
    }
    impl ADSR {
        #[inline]
        pub unsafe fn setAttackRate(&mut self, aRate: f64) {
            ADSR_setAttackRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setDecayRate(&mut self, aRate: f64) {
            ADSR_setDecayRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setSustainLevel(&mut self, aLevel: f64) {
            ADSR_setSustainLevel(self, aLevel)
        }
        #[inline]
        pub unsafe fn setReleaseRate(&mut self, aRate: f64) {
            ADSR_setReleaseRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setAttackTime(&mut self, aTime: f64) {
            ADSR_setAttackTime(self, aTime)
        }
        #[inline]
        pub unsafe fn setDecayTime(&mut self, aTime: f64) {
            ADSR_setDecayTime(self, aTime)
        }
        #[inline]
        pub unsafe fn setReleaseTime(&mut self, aTime: f64) {
            ADSR_setReleaseTime(self, aTime)
        }
        #[inline]
        pub unsafe fn setAllTimes(&mut self, aTime: f64, dTime: f64, sLevel: f64, rTime: f64) {
            ADSR_setAllTimes(self, aTime, dTime, sLevel, rTime)
        }
        #[inline]
        pub unsafe fn getAttackTime(&mut self) -> f64 {
            ADSR_getAttackTime(self)
        }
        #[inline]
        pub unsafe fn getDecayTime(&mut self) -> f64 {
            ADSR_getDecayTime(self)
        }
        #[inline]
        pub unsafe fn getReleaseTime(&mut self) -> f64 {
            ADSR_getReleaseTime(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ADSR_ADSR(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN4ADSRD1Ev"]
        pub fn ADSR_ADSR_destructor(this: *mut root::ADSR);
    }
    extern "C" {
        #[doc = "! Set target = 1, state = \\e ADSR::ATTACK."]
        #[link_name = "\u{1}_ZN4ADSR5keyOnEv"]
        pub fn ADSR_keyOn(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[doc = "! Set target = 0, state = \\e ADSR::RELEASE."]
        #[link_name = "\u{1}_ZN4ADSR6keyOffEv"]
        pub fn ADSR_keyOff(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[doc = "! Set the target value."]
        #[link_name = "\u{1}_ZN4ADSR9setTargetEd"]
        pub fn ADSR_setTarget(this: *mut ::std::os::raw::c_void, aTarget: f64);
    }
    extern "C" {
        #[doc = "! Return the current envelope \\e state (ATTACK, DECAY, SUSTAIN, RELEASE, DONE)."]
        #[link_name = "\u{1}_ZNK4ADSR8getStateEv"]
        pub fn ADSR_getState(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Set to state = ADSR::SUSTAIN with current and target values of \\e aValue."]
        #[link_name = "\u{1}_ZN4ADSR8setValueEd"]
        pub fn ADSR_setValue(this: *mut ::std::os::raw::c_void, aValue: f64);
    }
    extern "C" {
        #[doc = "! Return one envelope output value."]
        #[link_name = "\u{1}_ZN4ADSR4tickEv"]
        pub fn ADSR_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return \\e vectorSize envelope outputs in \\e vector."]
        #[link_name = "\u{1}_ZN4ADSR4tickEPdj"]
        pub fn ADSR_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Instrmnt {
        pub _base: root::Stk,
        pub m_frequency: f64,
        pub lastOutput: f64,
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK8Instrmnt7lastOutEv"]
        pub fn Instrmnt_lastOut(this: *const root::Instrmnt) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last left output value."]
        #[link_name = "\u{1}_ZNK8Instrmnt11lastOutLeftEv"]
        pub fn Instrmnt_lastOutLeft(this: *const root::Instrmnt) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last right output value."]
        #[link_name = "\u{1}_ZNK8Instrmnt12lastOutRightEv"]
        pub fn Instrmnt_lastOutRight(this: *const root::Instrmnt) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN8InstrmntC2Ev"]
        pub fn Instrmnt_Instrmnt(this: *mut root::Instrmnt);
    }
    impl Instrmnt {
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Instrmnt_lastOut(self)
        }
        #[inline]
        pub unsafe fn lastOutLeft(&self) -> f64 {
            Instrmnt_lastOutLeft(self)
        }
        #[inline]
        pub unsafe fn lastOutRight(&self) -> f64 {
            Instrmnt_lastOutRight(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Instrmnt_Instrmnt(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8InstrmntD1Ev"]
        pub fn Instrmnt_Instrmnt_destructor(this: *mut root::Instrmnt);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8Instrmnt12setFrequencyEd"]
        pub fn Instrmnt_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Computer \\e vectorSize outputs and return them in \\e vector."]
        #[link_name = "\u{1}_ZN8Instrmnt4tickEPdj"]
        pub fn Instrmnt_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8Instrmnt13controlChangeEid"]
        pub fn Instrmnt_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct FilterStk {
        pub _base: root::Stk,
        pub gain: f64,
        pub nB: ::std::os::raw::c_int,
        pub nA: ::std::os::raw::c_int,
        pub b: *mut f64,
        pub a: *mut f64,
        pub outputs: *mut f64,
        pub inputs: *mut f64,
    }
    extern "C" {
        #[doc = "! Clears all internal states of the filter."]
        #[link_name = "\u{1}_ZN9FilterStk5clearEv"]
        pub fn FilterStk_clear(this: *mut root::FilterStk);
    }
    extern "C" {
        #[doc = "! Set filter coefficients."]
        #[doc = "*!"]
        #[doc = "An StkError can be thrown if either \\e nb or \\e na is less than"]
        #[doc = "one, or if the a[0] coefficient is equal to zero.  If a[0] is not"]
        #[doc = "equal to 1, the filter coeffcients are normalized by a[0]."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9FilterStk15setCoefficientsEiPdiS0_"]
        pub fn FilterStk_setCoefficients(
            this: *mut root::FilterStk,
            nb: ::std::os::raw::c_int,
            bCoefficients: *mut f64,
            na: ::std::os::raw::c_int,
            aCoefficients: *mut f64,
        );
    }
    extern "C" {
        #[doc = "! Set numerator coefficients."]
        #[doc = "*!"]
        #[doc = "An StkError can be thrown if \\e nb is less than one.  Any"]
        #[doc = "previously set denominator coefficients are left unaffected."]
        #[doc = "Note that the default constructor sets the single denominator"]
        #[doc = "coefficient a[0] to 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9FilterStk12setNumeratorEiPd"]
        pub fn FilterStk_setNumerator(
            this: *mut root::FilterStk,
            nb: ::std::os::raw::c_int,
            bCoefficients: *mut f64,
        );
    }
    extern "C" {
        #[doc = "! Set denominator coefficients."]
        #[doc = "*!"]
        #[doc = "An StkError can be thrown if \\e na is less than one or if the"]
        #[doc = "a[0] coefficient is equal to zero.  Previously set numerator"]
        #[doc = "coefficients are unaffected unless a[0] is not equal to 1, in"]
        #[doc = "which case all coeffcients are normalized by a[0].  Note that the"]
        #[doc = "default constructor sets the single numerator coefficient b[0]"]
        #[doc = "to 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9FilterStk14setDenominatorEiPd"]
        pub fn FilterStk_setDenominator(
            this: *mut root::FilterStk,
            na: ::std::os::raw::c_int,
            aCoefficients: *mut f64,
        );
    }
    extern "C" {
        #[doc = "! Default constructor creates a zero-order pass-through \"filter\"."]
        #[link_name = "\u{1}_ZN9FilterStkC1Ev"]
        pub fn FilterStk_FilterStk(this: *mut root::FilterStk);
    }
    extern "C" {
        #[doc = "! Overloaded constructor which takes filter coefficients."]
        #[doc = "*!"]
        #[doc = "An StkError can be thrown if either \\e nb or \\e na is less than"]
        #[doc = "one, or if the a[0] coefficient is equal to zero."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9FilterStkC1EiPdiS0_"]
        pub fn FilterStk_FilterStk1(
            this: *mut root::FilterStk,
            nb: ::std::os::raw::c_int,
            bCoefficients: *mut f64,
            na: ::std::os::raw::c_int,
            aCoefficients: *mut f64,
        );
    }
    impl FilterStk {
        #[inline]
        pub unsafe fn clear(&mut self) {
            FilterStk_clear(self)
        }
        #[inline]
        pub unsafe fn setCoefficients(
            &mut self,
            nb: ::std::os::raw::c_int,
            bCoefficients: *mut f64,
            na: ::std::os::raw::c_int,
            aCoefficients: *mut f64,
        ) {
            FilterStk_setCoefficients(self, nb, bCoefficients, na, aCoefficients)
        }
        #[inline]
        pub unsafe fn setNumerator(&mut self, nb: ::std::os::raw::c_int, bCoefficients: *mut f64) {
            FilterStk_setNumerator(self, nb, bCoefficients)
        }
        #[inline]
        pub unsafe fn setDenominator(
            &mut self,
            na: ::std::os::raw::c_int,
            aCoefficients: *mut f64,
        ) {
            FilterStk_setDenominator(self, na, aCoefficients)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FilterStk_FilterStk(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            nb: ::std::os::raw::c_int,
            bCoefficients: *mut f64,
            na: ::std::os::raw::c_int,
            aCoefficients: *mut f64,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FilterStk_FilterStk1(&mut __bindgen_tmp, nb, bCoefficients, na, aCoefficients);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN9FilterStkD1Ev"]
        pub fn FilterStk_FilterStk_destructor(this: *mut root::FilterStk);
    }
    extern "C" {
        #[doc = "! Set the filter gain."]
        #[doc = "*!"]
        #[doc = "The gain is applied at the filter input and does not affect the"]
        #[doc = "coefficient values.  The default gain value is 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9FilterStk7setGainEd"]
        pub fn FilterStk_setGain(this: *mut ::std::os::raw::c_void, theGain: f64);
    }
    extern "C" {
        #[doc = "! Return the current filter gain."]
        #[link_name = "\u{1}_ZNK9FilterStk7getGainEv"]
        pub fn FilterStk_getGain(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK9FilterStk7lastOutEv"]
        pub fn FilterStk_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Input one sample to the filter and return one output."]
        #[link_name = "\u{1}_ZN9FilterStk4tickEd"]
        pub fn FilterStk_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN9FilterStk4tickEPdj"]
        pub fn FilterStk_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Delay {
        pub _base: root::FilterStk,
        pub inPoint: ::std::os::raw::c_long,
        pub outPoint: ::std::os::raw::c_long,
        pub length: ::std::os::raw::c_long,
        pub delay: f64,
    }
    extern "C" {
        #[doc = "! Clears the internal state of the delay line."]
        #[link_name = "\u{1}_ZN5Delay5clearEv"]
        pub fn Delay_clear(this: *mut root::Delay);
    }
    extern "C" {
        #[doc = "! Set the delay-line length."]
        #[doc = "*!"]
        #[doc = "The valid range for \\e theDelay is from 0 to the maximum delay-line length."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5Delay8setDelayEl"]
        pub fn Delay_setDelay(this: *mut root::Delay, theDelay: ::std::os::raw::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5Delay3setEll"]
        pub fn Delay_set(
            this: *mut root::Delay,
            delay: ::std::os::raw::c_long,
            max: ::std::os::raw::c_long,
        );
    }
    extern "C" {
        #[doc = "! Return the current delay-line length."]
        #[link_name = "\u{1}_ZNK5Delay8getDelayEv"]
        pub fn Delay_getDelay(this: *const root::Delay) -> f64;
    }
    extern "C" {
        #[doc = "! Calculate and return the signal energy in the delay-line."]
        #[link_name = "\u{1}_ZNK5Delay6energyEv"]
        pub fn Delay_energy(this: *const root::Delay) -> f64;
    }
    extern "C" {
        #[doc = "! Return the value at \\e tapDelay samples from the delay-line input."]
        #[doc = "*!"]
        #[doc = "The tap point is determined modulo the delay-line length and is"]
        #[doc = "relative to the last input value (i.e., a tapDelay of zero returns"]
        #[doc = "the last input value)."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZNK5Delay10contentsAtEm"]
        pub fn Delay_contentsAt(this: *const root::Delay, tapDelay: ::std::os::raw::c_ulong)
            -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor creates a delay-line with maximum length of 4095 samples and zero delay."]
        #[link_name = "\u{1}_ZN5DelayC1Ev"]
        pub fn Delay_Delay(this: *mut root::Delay);
    }
    extern "C" {
        #[doc = "! Overloaded constructor which specifies the current and maximum delay-line lengths."]
        #[link_name = "\u{1}_ZN5DelayC1Ell"]
        pub fn Delay_Delay1(
            this: *mut root::Delay,
            theDelay: ::std::os::raw::c_long,
            maxDelay: ::std::os::raw::c_long,
        );
    }
    impl Delay {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Delay_clear(self)
        }
        #[inline]
        pub unsafe fn setDelay(&mut self, theDelay: ::std::os::raw::c_long) {
            Delay_setDelay(self, theDelay)
        }
        #[inline]
        pub unsafe fn set(&mut self, delay: ::std::os::raw::c_long, max: ::std::os::raw::c_long) {
            Delay_set(self, delay, max)
        }
        #[inline]
        pub unsafe fn getDelay(&self) -> f64 {
            Delay_getDelay(self)
        }
        #[inline]
        pub unsafe fn energy(&self) -> f64 {
            Delay_energy(self)
        }
        #[inline]
        pub unsafe fn contentsAt(&self, tapDelay: ::std::os::raw::c_ulong) -> f64 {
            Delay_contentsAt(self, tapDelay)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Delay_Delay(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            theDelay: ::std::os::raw::c_long,
            maxDelay: ::std::os::raw::c_long,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Delay_Delay1(&mut __bindgen_tmp, theDelay, maxDelay);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5DelayD1Ev"]
        pub fn Delay_Delay_destructor(this: *mut root::Delay);
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK5Delay7lastOutEv"]
        pub fn Delay_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return the value which will be output by the next call to tick()."]
        #[doc = "*!"]
        #[doc = "This method is valid only for delay settings greater than zero!"]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZNK5Delay7nextOutEv"]
        pub fn Delay_nextOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Input one sample to the delay-line and return one output."]
        #[link_name = "\u{1}_ZN5Delay4tickEd"]
        pub fn Delay_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the delay-line and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN5Delay4tickEPdj"]
        pub fn Delay_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct DelayL {
        pub _base: root::Delay,
        pub alpha: f64,
        pub omAlpha: f64,
        pub nextOutput: f64,
        pub doNextOut: bool,
    }
    extern "C" {
        #[doc = "! Set the delay-line length."]
        #[doc = "*!"]
        #[doc = "The valid range for \\e theDelay is from 0 to the maximum delay-line length."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6DelayL8setDelayEd"]
        pub fn DelayL_setDelay(this: *mut root::DelayL, theDelay: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6DelayL3setEdl"]
        pub fn DelayL_set(this: *mut root::DelayL, delay: f64, max: ::std::os::raw::c_long);
    }
    extern "C" {
        #[doc = "! Return the value which will be output by the next call to tick()."]
        #[doc = "*!"]
        #[doc = "This method is valid only for delay settings greater than zero!"]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6DelayL7nextOutEv"]
        pub fn DelayL_nextOut(this: *mut root::DelayL) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor creates a delay-line with maximum length of 4095 samples and zero delay."]
        #[link_name = "\u{1}_ZN6DelayLC1Ev"]
        pub fn DelayL_DelayL(this: *mut root::DelayL);
    }
    extern "C" {
        #[doc = "! Overloaded constructor which specifies the current and maximum delay-line lengths."]
        #[link_name = "\u{1}_ZN6DelayLC1Edl"]
        pub fn DelayL_DelayL1(
            this: *mut root::DelayL,
            theDelay: f64,
            maxDelay: ::std::os::raw::c_long,
        );
    }
    impl DelayL {
        #[inline]
        pub unsafe fn setDelay(&mut self, theDelay: f64) {
            DelayL_setDelay(self, theDelay)
        }
        #[inline]
        pub unsafe fn set(&mut self, delay: f64, max: ::std::os::raw::c_long) {
            DelayL_set(self, delay, max)
        }
        #[inline]
        pub unsafe fn nextOut(&mut self) -> f64 {
            DelayL_nextOut(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            DelayL_DelayL(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(theDelay: f64, maxDelay: ::std::os::raw::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            DelayL_DelayL1(&mut __bindgen_tmp, theDelay, maxDelay);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6DelayLD1Ev"]
        pub fn DelayL_DelayL_destructor(this: *mut root::DelayL);
    }
    extern "C" {
        #[doc = "! Input one sample to the delay-line and return one output."]
        #[link_name = "\u{1}_ZN6DelayL4tickEd"]
        pub fn DelayL_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct BowTabl {
        pub _base: root::Stk,
        pub offSet: f64,
        pub slope: f64,
        pub lastOutput: f64,
    }
    extern "C" {
        #[doc = "! Set the table offset value."]
        #[doc = "*!"]
        #[doc = "The table offset is a bias which controls the"]
        #[doc = "symmetry of the friction.  If you want the"]
        #[doc = "friction to vary with direction, use a non-zero"]
        #[doc = "value for the offset.  The default value is zero."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7BowTabl9setOffsetEd"]
        pub fn BowTabl_setOffset(this: *mut root::BowTabl, aValue: f64);
    }
    extern "C" {
        #[doc = "! Set the table slope value."]
        #[doc = "*!"]
        #[doc = "The table slope controls the width of the friction"]
        #[doc = "pulse, which is related to bow force."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7BowTabl8setSlopeEd"]
        pub fn BowTabl_setSlope(this: *mut root::BowTabl, aValue: f64);
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK7BowTabl7lastOutEv"]
        pub fn BowTabl_lastOut(this: *const root::BowTabl) -> f64;
    }
    extern "C" {
        #[doc = "! Return the function value for \\e input."]
        #[doc = "*!"]
        #[doc = "The function input represents differential"]
        #[doc = "string-to-bow velocity."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7BowTabl4tickEd"]
        pub fn BowTabl_tick(this: *mut root::BowTabl, input: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Take \\e vectorSize inputs and return the corresponding function values in \\e vector."]
        #[link_name = "\u{1}_ZN7BowTabl4tickEPdj"]
        pub fn BowTabl_tick1(
            this: *mut root::BowTabl,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN7BowTablC1Ev"]
        pub fn BowTabl_BowTabl(this: *mut root::BowTabl);
    }
    impl BowTabl {
        #[inline]
        pub unsafe fn setOffset(&mut self, aValue: f64) {
            BowTabl_setOffset(self, aValue)
        }
        #[inline]
        pub unsafe fn setSlope(&mut self, aValue: f64) {
            BowTabl_setSlope(self, aValue)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            BowTabl_lastOut(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self, input: f64) -> f64 {
            BowTabl_tick(self, input)
        }
        #[inline]
        pub unsafe fn tick1(
            &mut self,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64 {
            BowTabl_tick1(self, vector, vectorSize)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            BowTabl_BowTabl(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7BowTablD1Ev"]
        pub fn BowTabl_BowTabl_destructor(this: *mut root::BowTabl);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct BiQuad {
        pub _base: root::FilterStk,
    }
    extern "C" {
        #[doc = "! Clears all internal states of the filter."]
        #[link_name = "\u{1}_ZN6BiQuad5clearEv"]
        pub fn BiQuad_clear(this: *mut root::BiQuad);
    }
    extern "C" {
        #[doc = "! Set the b[0] coefficient value."]
        #[link_name = "\u{1}_ZN6BiQuad5setB0Ed"]
        pub fn BiQuad_setB0(this: *mut root::BiQuad, b0: f64);
    }
    extern "C" {
        #[doc = "! Set the b[1] coefficient value."]
        #[link_name = "\u{1}_ZN6BiQuad5setB1Ed"]
        pub fn BiQuad_setB1(this: *mut root::BiQuad, b1: f64);
    }
    extern "C" {
        #[doc = "! Set the b[2] coefficient value."]
        #[link_name = "\u{1}_ZN6BiQuad5setB2Ed"]
        pub fn BiQuad_setB2(this: *mut root::BiQuad, b2: f64);
    }
    extern "C" {
        #[doc = "! Set the a[1] coefficient value."]
        #[link_name = "\u{1}_ZN6BiQuad5setA1Ed"]
        pub fn BiQuad_setA1(this: *mut root::BiQuad, a1: f64);
    }
    extern "C" {
        #[doc = "! Set the a[2] coefficient value."]
        #[link_name = "\u{1}_ZN6BiQuad5setA2Ed"]
        pub fn BiQuad_setA2(this: *mut root::BiQuad, a2: f64);
    }
    extern "C" {
        #[doc = "! Sets the filter coefficients for a resonance at \\e frequency (in Hz)."]
        #[doc = "*!"]
        #[doc = "This method determines the filter coefficients corresponding to"]
        #[doc = "two complex-conjugate poles with the given \\e frequency (in Hz)"]
        #[doc = "and \\e radius from the z-plane origin.  If \\e normalize is true,"]
        #[doc = "the filter zeros are placed at z = 1, z = -1, and the coefficients"]
        #[doc = "are then normalized to produce a constant unity peak gain"]
        #[doc = "(independent of the filter \\e gain parameter).  The resulting"]
        #[doc = "filter frequency response has a resonance at the given \\e"]
        #[doc = "frequency.  The closer the poles are to the unit-circle (\\e radius"]
        #[doc = "close to one), the narrower the resulting resonance width."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6BiQuad12setResonanceEddb"]
        pub fn BiQuad_setResonance(
            this: *mut root::BiQuad,
            frequency: f64,
            radius: f64,
            normalize: bool,
        );
    }
    extern "C" {
        #[doc = "! Set the filter coefficients for a notch at \\e frequency (in Hz)."]
        #[doc = "*!"]
        #[doc = "This method determines the filter coefficients corresponding to"]
        #[doc = "two complex-conjugate zeros with the given \\e frequency (in Hz)"]
        #[doc = "and \\e radius from the z-plane origin.  No filter normalization"]
        #[doc = "is attempted."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6BiQuad8setNotchEdd"]
        pub fn BiQuad_setNotch(this: *mut root::BiQuad, frequency: f64, radius: f64);
    }
    extern "C" {
        #[doc = "! Sets the filter zeroes for equal resonance gain."]
        #[doc = "*!"]
        #[doc = "When using the filter as a resonator, zeroes places at z = 1, z"]
        #[doc = "= -1 will result in a constant gain at resonance of 1 / (1 - R),"]
        #[doc = "where R is the pole radius setting."]
        #[doc = ""]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6BiQuad18setEqualGainZeroesEv"]
        pub fn BiQuad_setEqualGainZeroes(this: *mut root::BiQuad);
    }
    extern "C" {
        #[doc = "! Default constructor creates a second-order pass-through filter."]
        #[link_name = "\u{1}_ZN6BiQuadC1Ev"]
        pub fn BiQuad_BiQuad(this: *mut root::BiQuad);
    }
    impl BiQuad {
        #[inline]
        pub unsafe fn clear(&mut self) {
            BiQuad_clear(self)
        }
        #[inline]
        pub unsafe fn setB0(&mut self, b0: f64) {
            BiQuad_setB0(self, b0)
        }
        #[inline]
        pub unsafe fn setB1(&mut self, b1: f64) {
            BiQuad_setB1(self, b1)
        }
        #[inline]
        pub unsafe fn setB2(&mut self, b2: f64) {
            BiQuad_setB2(self, b2)
        }
        #[inline]
        pub unsafe fn setA1(&mut self, a1: f64) {
            BiQuad_setA1(self, a1)
        }
        #[inline]
        pub unsafe fn setA2(&mut self, a2: f64) {
            BiQuad_setA2(self, a2)
        }
        #[inline]
        pub unsafe fn setResonance(&mut self, frequency: f64, radius: f64, normalize: bool) {
            BiQuad_setResonance(self, frequency, radius, normalize)
        }
        #[inline]
        pub unsafe fn setNotch(&mut self, frequency: f64, radius: f64) {
            BiQuad_setNotch(self, frequency, radius)
        }
        #[inline]
        pub unsafe fn setEqualGainZeroes(&mut self) {
            BiQuad_setEqualGainZeroes(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            BiQuad_BiQuad(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6BiQuadD1Ev"]
        pub fn BiQuad_BiQuad_destructor(this: *mut root::BiQuad);
    }
    extern "C" {
        #[doc = "! Set the filter gain."]
        #[doc = "*!"]
        #[doc = "The gain is applied at the filter input and does not affect the"]
        #[doc = "coefficient values.  The default gain value is 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6BiQuad7setGainEd"]
        pub fn BiQuad_setGain(this: *mut ::std::os::raw::c_void, theGain: f64);
    }
    extern "C" {
        #[doc = "! Return the current filter gain."]
        #[link_name = "\u{1}_ZNK6BiQuad7getGainEv"]
        pub fn BiQuad_getGain(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK6BiQuad7lastOutEv"]
        pub fn BiQuad_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Input one sample to the filter and return one output."]
        #[link_name = "\u{1}_ZN6BiQuad4tickEd"]
        pub fn BiQuad_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN6BiQuad4tickEPdj"]
        pub fn BiQuad_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct BandedWG {
        pub _base: root::Instrmnt,
        pub m_rate: f64,
        pub m_preset: ::std::os::raw::c_long,
        pub m_bowPressure: f64,
        pub m_bowMotion: f64,
        pub m_modesGain: f64,
        pub m_strikePosition: f64,
        pub doPluck: bool,
        pub trackVelocity: bool,
        pub nModes: ::std::os::raw::c_int,
        pub presetModes: ::std::os::raw::c_int,
        pub bowTabl: *mut root::BowTabl,
        pub adsr: *mut root::ADSR,
        pub bandpass: *mut root::BiQuad,
        pub delay: *mut root::DelayL,
        pub maxVelocity: f64,
        pub modes: [f64; 20usize],
        pub freakency: f64,
        pub baseGain: f64,
        pub gains: [f64; 20usize],
        pub basegains: [f64; 20usize],
        pub excitation: [f64; 20usize],
        pub integrationConstant: f64,
        pub velocityInput: f64,
        pub bowVelocity: f64,
        pub bowTarget: f64,
        pub bowPosition: f64,
        pub strikeAmp: f64,
        pub strikePosition: ::std::os::raw::c_int,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8BandedWG5clearEv"]
        pub fn BandedWG_clear(this: *mut root::BandedWG);
    }
    extern "C" {
        #[doc = "! Set strike position (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8BandedWG17setStrikePositionEd"]
        pub fn BandedWG_setStrikePosition(this: *mut root::BandedWG, position: f64);
    }
    extern "C" {
        #[doc = "! Select a preset."]
        #[link_name = "\u{1}_ZN8BandedWG9setPresetEi"]
        pub fn BandedWG_setPreset(this: *mut root::BandedWG, preset: ::std::os::raw::c_int);
    }
    extern "C" {
        #[doc = "! Apply bow velocity/pressure to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN8BandedWG11startBowingEdd"]
        pub fn BandedWG_startBowing(this: *mut root::BandedWG, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease bow velocity/breath pressure with given rate of decrease."]
        #[link_name = "\u{1}_ZN8BandedWG10stopBowingEd"]
        pub fn BandedWG_stopBowing(this: *mut root::BandedWG, rate: f64);
    }
    extern "C" {
        #[doc = "! Pluck the instrument with given amplitude."]
        #[link_name = "\u{1}_ZN8BandedWG5pluckEd"]
        pub fn BandedWG_pluck(this: *mut root::BandedWG, amp: f64);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8BandedWGC1Ev"]
        pub fn BandedWG_BandedWG(this: *mut root::BandedWG);
    }
    impl BandedWG {
        #[inline]
        pub unsafe fn clear(&mut self) {
            BandedWG_clear(self)
        }
        #[inline]
        pub unsafe fn setStrikePosition(&mut self, position: f64) {
            BandedWG_setStrikePosition(self, position)
        }
        #[inline]
        pub unsafe fn setPreset(&mut self, preset: ::std::os::raw::c_int) {
            BandedWG_setPreset(self, preset)
        }
        #[inline]
        pub unsafe fn startBowing(&mut self, amplitude: f64, rate: f64) {
            BandedWG_startBowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBowing(&mut self, rate: f64) {
            BandedWG_stopBowing(self, rate)
        }
        #[inline]
        pub unsafe fn pluck(&mut self, amp: f64) {
            BandedWG_pluck(self, amp)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            BandedWG_BandedWG(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8BandedWGD1Ev"]
        pub fn BandedWG_BandedWG_destructor(this: *mut root::BandedWG);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8BandedWG12setFrequencyEd"]
        pub fn BandedWG_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8BandedWG6noteOnEdd"]
        pub fn BandedWG_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8BandedWG7noteOffEd"]
        pub fn BandedWG_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8BandedWG4tickEv"]
        pub fn BandedWG_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8BandedWG13controlChangeEid"]
        pub fn BandedWG_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    pub struct WvIn {
        pub _base: root::Stk,
        pub msg: [::std::os::raw::c_char; 256usize],
        pub str_filename: root::Chuck_String,
        pub fd: *mut root::FILE,
        pub data: *mut f64,
        pub lastOutput: *mut f64,
        pub chunking: bool,
        pub finished: bool,
        pub interpolate: bool,
        pub byteswap: bool,
        pub fileSize: ::std::os::raw::c_ulong,
        pub bufferSize: ::std::os::raw::c_ulong,
        pub dataOffset: ::std::os::raw::c_ulong,
        pub channels: ::std::os::raw::c_uint,
        pub chunkPointer: ::std::os::raw::c_long,
        pub dataType: root::Stk_STK_FORMAT,
        pub fileRate: f64,
        pub gain: f64,
        pub time: f64,
        pub rate: f64,
        pub m_loaded: bool,
    }
    extern "C" {
        #[doc = "! If a file is open, close it."]
        #[link_name = "\u{1}_ZN4WvIn9closeFileEv"]
        pub fn WvIn_closeFile(this: *mut root::WvIn);
    }
    extern "C" {
        #[doc = "! Clear outputs and reset time (file pointer) to zero."]
        #[link_name = "\u{1}_ZN4WvIn5resetEv"]
        pub fn WvIn_reset(this: *mut root::WvIn);
    }
    extern "C" {
        #[doc = "! Normalize data to a maximum of +-1.0."]
        #[doc = "*!"]
        #[doc = "For large, incrementally loaded files with integer data types,"]
        #[doc = "normalization is computed relative to the data type maximum."]
        #[doc = "No normalization is performed for incrementally loaded files"]
        #[doc = "with floating-point data types."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn9normalizeEv"]
        pub fn WvIn_normalize(this: *mut root::WvIn);
    }
    extern "C" {
        #[doc = "! Normalize data to a maximum of \\e +-peak."]
        #[doc = "*!"]
        #[doc = "For large, incrementally loaded files with integer data types,"]
        #[doc = "normalization is computed relative to the data type maximum"]
        #[doc = "(\\e peak/maximum).  For incrementally loaded files with floating-"]
        #[doc = "point data types, direct scaling by \\e peak is performed."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn9normalizeEd"]
        pub fn WvIn_normalize1(this: *mut root::WvIn, peak: f64);
    }
    extern "C" {
        #[doc = "! Return the file size in sample frames."]
        #[link_name = "\u{1}_ZNK4WvIn7getSizeEv"]
        pub fn WvIn_getSize(this: *const root::WvIn) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[doc = "! Return the number of audio channels in the file."]
        #[link_name = "\u{1}_ZNK4WvIn11getChannelsEv"]
        pub fn WvIn_getChannels(this: *const root::WvIn) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        #[doc = "! Return the input file sample rate in Hz (not the data read rate)."]
        #[doc = "*!"]
        #[doc = "WAV, SND, and AIF formatted files specify a sample rate in"]
        #[doc = "their headers.  STK RAW files have a sample rate of 22050 Hz"]
        #[doc = "by definition.  MAT-files are assumed to have a rate of 44100 Hz."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZNK4WvIn11getFileRateEv"]
        pub fn WvIn_getFileRate(this: *const root::WvIn) -> f64;
    }
    extern "C" {
        #[doc = "! Query whether reading is complete."]
        #[link_name = "\u{1}_ZNK4WvIn10isFinishedEv"]
        pub fn WvIn_isFinished(this: *const root::WvIn) -> bool;
    }
    extern "C" {
        #[doc = "! Set the data read rate in samples.  The rate can be negative."]
        #[doc = "*!"]
        #[doc = "If the rate value is negative, the data is read in reverse order."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn7setRateEd"]
        pub fn WvIn_setRate(this: *mut root::WvIn, aRate: f64);
    }
    extern "C" {
        #[doc = "! Turn linear interpolation on/off."]
        #[doc = "*!"]
        #[doc = "Interpolation is automatically off when the read rate is"]
        #[doc = "an integer value.  If interpolation is turned off for a"]
        #[doc = "fractional rate, the time index is truncated to an integer"]
        #[doc = "value."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn14setInterpolateEb"]
        pub fn WvIn_setInterpolate(this: *mut root::WvIn, doInterpolate: bool);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4WvIn4initEv"]
        pub fn WvIn_init(this: *mut root::WvIn);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4WvIn10getRawInfoEPKc"]
        pub fn WvIn_getRawInfo(
            this: *mut root::WvIn,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4WvIn10getWavInfoEPKc"]
        pub fn WvIn_getWavInfo(
            this: *mut root::WvIn,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4WvIn10getSndInfoEPKc"]
        pub fn WvIn_getSndInfo(
            this: *mut root::WvIn,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4WvIn10getAifInfoEPKc"]
        pub fn WvIn_getAifInfo(
            this: *mut root::WvIn,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4WvIn10getMatInfoEPKc"]
        pub fn WvIn_getMatInfo(
            this: *mut root::WvIn,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN4WvInC1Ev"]
        pub fn WvIn_WvIn(this: *mut root::WvIn);
    }
    extern "C" {
        #[doc = "! Overloaded constructor for file input."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if the file is not found, its format is"]
        #[doc = "unknown, or a read error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvInC1EPKcbbb"]
        pub fn WvIn_WvIn1(
            this: *mut root::WvIn,
            fileName: *const ::std::os::raw::c_char,
            raw: bool,
            doNormalize: bool,
            generate: bool,
        );
    }
    impl WvIn {
        #[inline]
        pub unsafe fn closeFile(&mut self) {
            WvIn_closeFile(self)
        }
        #[inline]
        pub unsafe fn reset(&mut self) {
            WvIn_reset(self)
        }
        #[inline]
        pub unsafe fn normalize(&mut self) {
            WvIn_normalize(self)
        }
        #[inline]
        pub unsafe fn normalize1(&mut self, peak: f64) {
            WvIn_normalize1(self, peak)
        }
        #[inline]
        pub unsafe fn getSize(&self) -> ::std::os::raw::c_ulong {
            WvIn_getSize(self)
        }
        #[inline]
        pub unsafe fn getChannels(&self) -> ::std::os::raw::c_uint {
            WvIn_getChannels(self)
        }
        #[inline]
        pub unsafe fn getFileRate(&self) -> f64 {
            WvIn_getFileRate(self)
        }
        #[inline]
        pub unsafe fn isFinished(&self) -> bool {
            WvIn_isFinished(self)
        }
        #[inline]
        pub unsafe fn setRate(&mut self, aRate: f64) {
            WvIn_setRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setInterpolate(&mut self, doInterpolate: bool) {
            WvIn_setInterpolate(self, doInterpolate)
        }
        #[inline]
        pub unsafe fn init(&mut self) {
            WvIn_init(self)
        }
        #[inline]
        pub unsafe fn getRawInfo(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvIn_getRawInfo(self, fileName)
        }
        #[inline]
        pub unsafe fn getWavInfo(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvIn_getWavInfo(self, fileName)
        }
        #[inline]
        pub unsafe fn getSndInfo(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvIn_getSndInfo(self, fileName)
        }
        #[inline]
        pub unsafe fn getAifInfo(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvIn_getAifInfo(self, fileName)
        }
        #[inline]
        pub unsafe fn getMatInfo(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvIn_getMatInfo(self, fileName)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            WvIn_WvIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            fileName: *const ::std::os::raw::c_char,
            raw: bool,
            doNormalize: bool,
            generate: bool,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            WvIn_WvIn1(&mut __bindgen_tmp, fileName, raw, doNormalize, generate);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN4WvInD1Ev"]
        pub fn WvIn_WvIn_destructor(this: *mut root::WvIn);
    }
    extern "C" {
        #[doc = "! Open the specified file and load its data."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if the file is not found, its format is"]
        #[doc = "unknown, or a read error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn8openFileEPKcbbb"]
        pub fn WvIn_openFile(
            this: *mut ::std::os::raw::c_void,
            fileName: *const ::std::os::raw::c_char,
            raw: bool,
            doNormalize: bool,
            generate: bool,
        );
    }
    extern "C" {
        #[doc = "! Increment the read pointer by \\e aTime samples."]
        #[link_name = "\u{1}_ZN4WvIn7addTimeEd"]
        pub fn WvIn_addTime(this: *mut ::std::os::raw::c_void, aTime: f64);
    }
    extern "C" {
        #[doc = "! Return the average across the last output sample frame."]
        #[link_name = "\u{1}_ZNK4WvIn7lastOutEv"]
        pub fn WvIn_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Read out the average across one sample frame of data."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if a file is read incrementally and a read error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn4tickEv"]
        pub fn WvIn_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Read out vectorSize averaged sample frames of data in \\e vector."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if a file is read incrementally and a read error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn4tickEPdj"]
        pub fn WvIn_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Return a pointer to the last output sample frame."]
        #[link_name = "\u{1}_ZNK4WvIn9lastFrameEv"]
        pub fn WvIn_lastFrame(this: *mut ::std::os::raw::c_void) -> *const f64;
    }
    extern "C" {
        #[doc = "! Return a pointer to the next sample frame of data."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if a file is read incrementally and a read error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn9tickFrameEv"]
        pub fn WvIn_tickFrame(this: *mut ::std::os::raw::c_void) -> *const f64;
    }
    extern "C" {
        #[doc = "! Read out sample \\e frames of data to \\e frameVector."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if a file is read incrementally and a read error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4WvIn9tickFrameEPdj"]
        pub fn WvIn_tickFrame1(
            this: *mut ::std::os::raw::c_void,
            frameVector: *mut f64,
            frames: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4WvIn8readDataEm"]
        pub fn WvIn_readData(this: *mut ::std::os::raw::c_void, index: ::std::os::raw::c_ulong);
    }
    #[repr(C)]
    pub struct WaveLoop {
        pub _base: root::WvIn,
        pub phaseOffset: f64,
        pub m_freq: f64,
    }
    extern "C" {
        #[doc = "! Set the data interpolation rate based on a looping frequency."]
        #[doc = "*!"]
        #[doc = "This function determines the interpolation rate based on the file"]
        #[doc = "size and the current Stk::sampleRate.  The \\e aFrequency value"]
        #[doc = "corresponds to file cycles per second.  The frequency can be"]
        #[doc = "negative, in which case the loop is read in reverse order."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8WaveLoop12setFrequencyEd"]
        pub fn WaveLoop_setFrequency(this: *mut root::WaveLoop, aFrequency: f64);
    }
    extern "C" {
        #[doc = "! Increment current read pointer by \\e anAngle, relative to a looping frequency."]
        #[doc = "*!"]
        #[doc = "This function increments the read pointer based on the file"]
        #[doc = "size and the current Stk::sampleRate.  The \\e anAngle value"]
        #[doc = "is a multiple of file size."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8WaveLoop8addPhaseEd"]
        pub fn WaveLoop_addPhase(this: *mut root::WaveLoop, anAngle: f64);
    }
    extern "C" {
        #[doc = "! Add a phase offset to the current read pointer."]
        #[doc = "*!"]
        #[doc = "This function determines a time offset based on the file"]
        #[doc = "size and the current Stk::sampleRate.  The \\e anAngle value"]
        #[doc = "is a multiple of file size."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8WaveLoop14addPhaseOffsetEd"]
        pub fn WaveLoop_addPhaseOffset(this: *mut root::WaveLoop, anAngle: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8WaveLoopC1Ev"]
        pub fn WaveLoop_WaveLoop(this: *mut root::WaveLoop);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8WaveLoopC1EPKcbb"]
        pub fn WaveLoop_WaveLoop1(
            this: *mut root::WaveLoop,
            fileName: *const ::std::os::raw::c_char,
            raw: bool,
            generate: bool,
        );
    }
    impl WaveLoop {
        #[inline]
        pub unsafe fn setFrequency(&mut self, aFrequency: f64) {
            WaveLoop_setFrequency(self, aFrequency)
        }
        #[inline]
        pub unsafe fn addPhase(&mut self, anAngle: f64) {
            WaveLoop_addPhase(self, anAngle)
        }
        #[inline]
        pub unsafe fn addPhaseOffset(&mut self, anAngle: f64) {
            WaveLoop_addPhaseOffset(self, anAngle)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            WaveLoop_WaveLoop(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            fileName: *const ::std::os::raw::c_char,
            raw: bool,
            generate: bool,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            WaveLoop_WaveLoop1(&mut __bindgen_tmp, fileName, raw, generate);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8WaveLoop8openFileEPKcbb"]
        pub fn WaveLoop_openFile(
            this: *mut ::std::os::raw::c_void,
            fileName: *const ::std::os::raw::c_char,
            raw: bool,
            n: bool,
        );
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8WaveLoopD1Ev"]
        pub fn WaveLoop_WaveLoop_destructor(this: *mut root::WaveLoop);
    }
    extern "C" {
        #[doc = "! Increment the read pointer by \\e aTime samples, modulo file size."]
        #[link_name = "\u{1}_ZN8WaveLoop7addTimeEd"]
        pub fn WaveLoop_addTime(this: *mut ::std::os::raw::c_void, aTime: f64);
    }
    extern "C" {
        #[doc = "! Return a pointer to the next sample frame of data."]
        #[link_name = "\u{1}_ZN8WaveLoop9tickFrameEv"]
        pub fn WaveLoop_tickFrame(this: *mut ::std::os::raw::c_void) -> *const f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8WaveLoop8readDataEm"]
        pub fn WaveLoop_readData(this: *mut ::std::os::raw::c_void, index: ::std::os::raw::c_ulong);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct TwoZero {
        pub _base: root::FilterStk,
        pub m_notchFreq: f64,
        pub m_notchRad: f64,
    }
    extern "C" {
        #[doc = "! Clears the internal states of the filter."]
        #[link_name = "\u{1}_ZN7TwoZero5clearEv"]
        pub fn TwoZero_clear(this: *mut root::TwoZero);
    }
    extern "C" {
        #[doc = "! Set the b[0] coefficient value."]
        #[link_name = "\u{1}_ZN7TwoZero5setB0Ed"]
        pub fn TwoZero_setB0(this: *mut root::TwoZero, b0: f64);
    }
    extern "C" {
        #[doc = "! Set the b[1] coefficient value."]
        #[link_name = "\u{1}_ZN7TwoZero5setB1Ed"]
        pub fn TwoZero_setB1(this: *mut root::TwoZero, b1: f64);
    }
    extern "C" {
        #[doc = "! Set the b[2] coefficient value."]
        #[link_name = "\u{1}_ZN7TwoZero5setB2Ed"]
        pub fn TwoZero_setB2(this: *mut root::TwoZero, b2: f64);
    }
    extern "C" {
        #[doc = "! Sets the filter coefficients for a \"notch\" at \\e frequency (in Hz)."]
        #[doc = "*!"]
        #[doc = "This method determines the filter coefficients corresponding to"]
        #[doc = "two complex-conjugate zeros with the given \\e frequency (in Hz)"]
        #[doc = "and \\e radius from the z-plane origin.  The coefficients are then"]
        #[doc = "normalized to produce a maximum filter gain of one (independent of"]
        #[doc = "the filter \\e gain parameter).  The resulting filter frequency"]
        #[doc = "response has a \"notch\" or anti-resonance at the given \\e"]
        #[doc = "frequency.  The closer the zeros are to the unit-circle (\\e radius"]
        #[doc = "close to or equal to one), the narrower the resulting notch width."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7TwoZero8setNotchEdd"]
        pub fn TwoZero_setNotch(this: *mut root::TwoZero, frequency: f64, radius: f64);
    }
    extern "C" {
        #[doc = "! Default constructor creates a second-order pass-through filter."]
        #[link_name = "\u{1}_ZN7TwoZeroC1Ev"]
        pub fn TwoZero_TwoZero(this: *mut root::TwoZero);
    }
    impl TwoZero {
        #[inline]
        pub unsafe fn clear(&mut self) {
            TwoZero_clear(self)
        }
        #[inline]
        pub unsafe fn setB0(&mut self, b0: f64) {
            TwoZero_setB0(self, b0)
        }
        #[inline]
        pub unsafe fn setB1(&mut self, b1: f64) {
            TwoZero_setB1(self, b1)
        }
        #[inline]
        pub unsafe fn setB2(&mut self, b2: f64) {
            TwoZero_setB2(self, b2)
        }
        #[inline]
        pub unsafe fn setNotch(&mut self, frequency: f64, radius: f64) {
            TwoZero_setNotch(self, frequency, radius)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            TwoZero_TwoZero(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7TwoZeroD1Ev"]
        pub fn TwoZero_TwoZero_destructor(this: *mut root::TwoZero);
    }
    extern "C" {
        #[doc = "! Set the filter gain."]
        #[doc = "*!"]
        #[doc = "The gain is applied at the filter input and does not affect the"]
        #[doc = "coefficient values.  The default gain value is 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7TwoZero7setGainEd"]
        pub fn TwoZero_setGain(this: *mut ::std::os::raw::c_void, theGain: f64);
    }
    extern "C" {
        #[doc = "! Return the current filter gain."]
        #[link_name = "\u{1}_ZNK7TwoZero7getGainEv"]
        pub fn TwoZero_getGain(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK7TwoZero7lastOutEv"]
        pub fn TwoZero_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Input one sample to the filter and return one output."]
        #[link_name = "\u{1}_ZN7TwoZero4tickEd"]
        pub fn TwoZero_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN7TwoZero4tickEPdj"]
        pub fn TwoZero_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    pub struct FM {
        pub _base: root::Instrmnt,
        pub adsr: *mut root::ADSR,
        pub waves: *mut root::WaveLoop,
        pub vibrato: *mut root::WaveLoop,
        pub twozero: *mut root::TwoZero,
        pub nOperators: ::std::os::raw::c_int,
        pub baseFrequency: f64,
        pub ratios: *mut f64,
        pub gains: *mut f64,
        pub modDepth: f64,
        pub control1: f64,
        pub control2: f64,
        pub __FM_gains: [f64; 100usize],
        pub __FM_susLevels: [f64; 16usize],
        pub __FM_attTimes: [f64; 32usize],
    }
    extern "C" {
        #[doc = "! Reset and clear all wave and envelope states."]
        #[link_name = "\u{1}_ZN2FM5clearEv"]
        pub fn FM_clear(this: *mut root::FM);
    }
    extern "C" {
        #[doc = "! Load the rawwave filenames in waves."]
        #[link_name = "\u{1}_ZN2FM9loadWavesEPPKc"]
        pub fn FM_loadWaves(this: *mut root::FM, filenames: *mut *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[doc = "! Set the frequency ratio for the specified wave."]
        #[link_name = "\u{1}_ZN2FM8setRatioEid"]
        pub fn FM_setRatio(this: *mut root::FM, waveIndex: ::std::os::raw::c_int, ratio: f64);
    }
    extern "C" {
        #[doc = "! Set the gain for the specified wave."]
        #[link_name = "\u{1}_ZN2FM7setGainEid"]
        pub fn FM_setGain(this: *mut root::FM, waveIndex: ::std::os::raw::c_int, gain: f64);
    }
    extern "C" {
        #[doc = "! Set the modulation speed in Hz."]
        #[link_name = "\u{1}_ZN2FM18setModulationSpeedEd"]
        pub fn FM_setModulationSpeed(this: *mut root::FM, mSpeed: f64);
    }
    extern "C" {
        #[doc = "! Set the modulation depth."]
        #[link_name = "\u{1}_ZN2FM18setModulationDepthEd"]
        pub fn FM_setModulationDepth(this: *mut root::FM, mDepth: f64);
    }
    extern "C" {
        #[doc = "! Set the value of control1."]
        #[link_name = "\u{1}_ZN2FM11setControl1Ed"]
        pub fn FM_setControl1(this: *mut root::FM, cVal: f64);
    }
    extern "C" {
        #[doc = "! Set the value of control1."]
        #[link_name = "\u{1}_ZN2FM11setControl2Ed"]
        pub fn FM_setControl2(this: *mut root::FM, cVal: f64);
    }
    extern "C" {
        #[doc = "! Start envelopes toward \"on\" targets."]
        #[link_name = "\u{1}_ZN2FM5keyOnEv"]
        pub fn FM_keyOn(this: *mut root::FM);
    }
    extern "C" {
        #[doc = "! Start envelopes toward \"off\" targets."]
        #[link_name = "\u{1}_ZN2FM6keyOffEv"]
        pub fn FM_keyOff(this: *mut root::FM);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the number of wave/envelope operators to control."]
        #[link_name = "\u{1}_ZN2FMC2Ei"]
        pub fn FM_FM(this: *mut root::FM, operators: ::std::os::raw::c_int);
    }
    impl FM {
        #[inline]
        pub unsafe fn clear(&mut self) {
            FM_clear(self)
        }
        #[inline]
        pub unsafe fn loadWaves(&mut self, filenames: *mut *const ::std::os::raw::c_char) {
            FM_loadWaves(self, filenames)
        }
        #[inline]
        pub unsafe fn setRatio(&mut self, waveIndex: ::std::os::raw::c_int, ratio: f64) {
            FM_setRatio(self, waveIndex, ratio)
        }
        #[inline]
        pub unsafe fn setGain(&mut self, waveIndex: ::std::os::raw::c_int, gain: f64) {
            FM_setGain(self, waveIndex, gain)
        }
        #[inline]
        pub unsafe fn setModulationSpeed(&mut self, mSpeed: f64) {
            FM_setModulationSpeed(self, mSpeed)
        }
        #[inline]
        pub unsafe fn setModulationDepth(&mut self, mDepth: f64) {
            FM_setModulationDepth(self, mDepth)
        }
        #[inline]
        pub unsafe fn setControl1(&mut self, cVal: f64) {
            FM_setControl1(self, cVal)
        }
        #[inline]
        pub unsafe fn setControl2(&mut self, cVal: f64) {
            FM_setControl2(self, cVal)
        }
        #[inline]
        pub unsafe fn keyOn(&mut self) {
            FM_keyOn(self)
        }
        #[inline]
        pub unsafe fn keyOff(&mut self) {
            FM_keyOff(self)
        }
        #[inline]
        pub unsafe fn new(operators: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FM_FM(&mut __bindgen_tmp, operators);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN2FMD1Ev"]
        pub fn FM_FM_destructor(this: *mut root::FM);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN2FM12setFrequencyEd"]
        pub fn FM_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN2FM7noteOffEd"]
        pub fn FM_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN2FM13controlChangeEid"]
        pub fn FM_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    pub struct BeeThree {
        pub _base: root::FM,
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8BeeThreeC1Ev"]
        pub fn BeeThree_BeeThree(this: *mut root::BeeThree);
    }
    impl BeeThree {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            BeeThree_BeeThree(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8BeeThreeD1Ev"]
        pub fn BeeThree_BeeThree_destructor(this: *mut root::BeeThree);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8BeeThree6noteOnEdd"]
        pub fn BeeThree_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8BeeThree4tickEv"]
        pub fn BeeThree_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct JetTabl {
        pub _base: root::Stk,
        pub lastOutput: f64,
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK7JetTabl7lastOutEv"]
        pub fn JetTabl_lastOut(this: *const root::JetTabl) -> f64;
    }
    extern "C" {
        #[doc = "! Return the function value for \\e input."]
        #[link_name = "\u{1}_ZN7JetTabl4tickEd"]
        pub fn JetTabl_tick(this: *mut root::JetTabl, input: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Take \\e vectorSize inputs and return the corresponding function values in \\e vector."]
        #[link_name = "\u{1}_ZN7JetTabl4tickEPdj"]
        pub fn JetTabl_tick1(
            this: *mut root::JetTabl,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN7JetTablC1Ev"]
        pub fn JetTabl_JetTabl(this: *mut root::JetTabl);
    }
    impl JetTabl {
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            JetTabl_lastOut(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self, input: f64) -> f64 {
            JetTabl_tick(self, input)
        }
        #[inline]
        pub unsafe fn tick1(
            &mut self,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64 {
            JetTabl_tick1(self, vector, vectorSize)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            JetTabl_JetTabl(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7JetTablD1Ev"]
        pub fn JetTabl_JetTabl_destructor(this: *mut root::JetTabl);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct PoleZero {
        pub _base: root::FilterStk,
    }
    extern "C" {
        #[doc = "! Clears the internal states of the filter."]
        #[link_name = "\u{1}_ZN8PoleZero5clearEv"]
        pub fn PoleZero_clear(this: *mut root::PoleZero);
    }
    extern "C" {
        #[doc = "! Set the b[0] coefficient value."]
        #[link_name = "\u{1}_ZN8PoleZero5setB0Ed"]
        pub fn PoleZero_setB0(this: *mut root::PoleZero, b0: f64);
    }
    extern "C" {
        #[doc = "! Set the b[1] coefficient value."]
        #[link_name = "\u{1}_ZN8PoleZero5setB1Ed"]
        pub fn PoleZero_setB1(this: *mut root::PoleZero, b1: f64);
    }
    extern "C" {
        #[doc = "! Set the a[1] coefficient value."]
        #[link_name = "\u{1}_ZN8PoleZero5setA1Ed"]
        pub fn PoleZero_setA1(this: *mut root::PoleZero, a1: f64);
    }
    extern "C" {
        #[doc = "! Set the filter for allpass behavior using \\e coefficient."]
        #[doc = "*!"]
        #[doc = "This method uses \\e coefficient to create an allpass filter,"]
        #[doc = "which has unity gain at all frequencies.  Note that the \\e"]
        #[doc = "coefficient magnitude must be less than one to maintain stability."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8PoleZero10setAllpassEd"]
        pub fn PoleZero_setAllpass(this: *mut root::PoleZero, coefficient: f64);
    }
    extern "C" {
        #[doc = "! Create a DC blocking filter with the given pole position in the z-plane."]
        #[doc = "*!"]
        #[doc = "This method sets the given pole position, together with a zero"]
        #[doc = "at z=1, to create a DC blocking filter.  \\e thePole should be"]
        #[doc = "close to one to minimize low-frequency attenuation."]
        #[doc = ""]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8PoleZero12setBlockZeroEd"]
        pub fn PoleZero_setBlockZero(this: *mut root::PoleZero, thePole: f64);
    }
    extern "C" {
        #[doc = "! Default constructor creates a first-order pass-through filter."]
        #[link_name = "\u{1}_ZN8PoleZeroC1Ev"]
        pub fn PoleZero_PoleZero(this: *mut root::PoleZero);
    }
    impl PoleZero {
        #[inline]
        pub unsafe fn clear(&mut self) {
            PoleZero_clear(self)
        }
        #[inline]
        pub unsafe fn setB0(&mut self, b0: f64) {
            PoleZero_setB0(self, b0)
        }
        #[inline]
        pub unsafe fn setB1(&mut self, b1: f64) {
            PoleZero_setB1(self, b1)
        }
        #[inline]
        pub unsafe fn setA1(&mut self, a1: f64) {
            PoleZero_setA1(self, a1)
        }
        #[inline]
        pub unsafe fn setAllpass(&mut self, coefficient: f64) {
            PoleZero_setAllpass(self, coefficient)
        }
        #[inline]
        pub unsafe fn setBlockZero(&mut self, thePole: f64) {
            PoleZero_setBlockZero(self, thePole)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PoleZero_PoleZero(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8PoleZeroD1Ev"]
        pub fn PoleZero_PoleZero_destructor(this: *mut root::PoleZero);
    }
    extern "C" {
        #[doc = "! Set the filter gain."]
        #[doc = "*!"]
        #[doc = "The gain is applied at the filter input and does not affect the"]
        #[doc = "coefficient values.  The default gain value is 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8PoleZero7setGainEd"]
        pub fn PoleZero_setGain(this: *mut ::std::os::raw::c_void, theGain: f64);
    }
    extern "C" {
        #[doc = "! Return the current filter gain."]
        #[link_name = "\u{1}_ZNK8PoleZero7getGainEv"]
        pub fn PoleZero_getGain(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK8PoleZero7lastOutEv"]
        pub fn PoleZero_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Input one sample to the filter and return one output."]
        #[link_name = "\u{1}_ZN8PoleZero4tickEd"]
        pub fn PoleZero_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN8PoleZero4tickEPdj"]
        pub fn PoleZero_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Noise {
        pub _base: root::Stk,
        pub lastOutput: f64,
    }
    extern "C" {
        #[doc = "! Seed the random number generator with a specific seed value."]
        #[doc = "*!"]
        #[doc = "If no seed is provided or the seed value is zero, the random"]
        #[doc = "number generator is seeded with the current system time."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5Noise7setSeedEj"]
        pub fn Noise_setSeed(this: *mut root::Noise, seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        #[doc = "! Return the last computed value."]
        #[link_name = "\u{1}_ZNK5Noise7lastOutEv"]
        pub fn Noise_lastOut(this: *const root::Noise) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor which seeds the random number generator with the system time."]
        #[link_name = "\u{1}_ZN5NoiseC1Ev"]
        pub fn Noise_Noise(this: *mut root::Noise);
    }
    extern "C" {
        #[doc = "! Constructor which seeds the random number generator with a given seed."]
        #[doc = "*!"]
        #[doc = "If the seed value is zero, the random number generator is"]
        #[doc = "seeded with the system time."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5NoiseC1Ej"]
        pub fn Noise_Noise1(this: *mut root::Noise, seed: ::std::os::raw::c_uint);
    }
    impl Noise {
        #[inline]
        pub unsafe fn setSeed(&mut self, seed: ::std::os::raw::c_uint) {
            Noise_setSeed(self, seed)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Noise_lastOut(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Noise_Noise(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(seed: ::std::os::raw::c_uint) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Noise_Noise1(&mut __bindgen_tmp, seed);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5NoiseD1Ev"]
        pub fn Noise_Noise_destructor(this: *mut root::Noise);
    }
    extern "C" {
        #[doc = "! Return a random number between -1.0 and 1.0 using rand()."]
        #[link_name = "\u{1}_ZN5Noise4tickEv"]
        pub fn Noise_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return \\e vectorSize random numbers between -1.0 and 1.0 in \\e vector."]
        #[link_name = "\u{1}_ZN5Noise4tickEPdj"]
        pub fn Noise_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct BlowBotl {
        pub _base: root::Instrmnt,
        pub m_rate: f64,
        pub m_noiseGain: f64,
        pub m_vibratoFreq: f64,
        pub m_vibratoGain: f64,
        pub m_volume: f64,
        pub jetTable: *mut root::JetTabl,
        pub resonator: *mut root::BiQuad,
        pub dcBlock: *mut root::PoleZero,
        pub noise: *mut root::Noise,
        pub adsr: *mut root::ADSR,
        pub vibrato: *mut root::WaveLoop,
        pub maxPressure: f64,
        pub noiseGain: f64,
        pub vibratoGain: f64,
        pub outputGain: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8BlowBotl5clearEv"]
        pub fn BlowBotl_clear(this: *mut root::BlowBotl);
    }
    extern "C" {
        #[doc = "! Apply breath velocity to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN8BlowBotl12startBlowingEdd"]
        pub fn BlowBotl_startBlowing(this: *mut root::BlowBotl, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease breath velocity with given rate of decrease."]
        #[link_name = "\u{1}_ZN8BlowBotl11stopBlowingEd"]
        pub fn BlowBotl_stopBlowing(this: *mut root::BlowBotl, rate: f64);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8BlowBotlC1Ev"]
        pub fn BlowBotl_BlowBotl(this: *mut root::BlowBotl);
    }
    impl BlowBotl {
        #[inline]
        pub unsafe fn clear(&mut self) {
            BlowBotl_clear(self)
        }
        #[inline]
        pub unsafe fn startBlowing(&mut self, amplitude: f64, rate: f64) {
            BlowBotl_startBlowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBlowing(&mut self, rate: f64) {
            BlowBotl_stopBlowing(self, rate)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            BlowBotl_BlowBotl(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8BlowBotlD1Ev"]
        pub fn BlowBotl_BlowBotl_destructor(this: *mut root::BlowBotl);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8BlowBotl12setFrequencyEd"]
        pub fn BlowBotl_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8BlowBotl6noteOnEdd"]
        pub fn BlowBotl_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8BlowBotl7noteOffEd"]
        pub fn BlowBotl_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8BlowBotl4tickEv"]
        pub fn BlowBotl_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8BlowBotl13controlChangeEid"]
        pub fn BlowBotl_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ReedTabl {
        pub _base: root::Stk,
        pub offSet: f64,
        pub slope: f64,
        pub lastOutput: f64,
    }
    extern "C" {
        #[doc = "! Set the table offset value."]
        #[doc = "*!"]
        #[doc = "The table offset roughly corresponds to the size"]
        #[doc = "of the initial reed tip opening (a greater offset"]
        #[doc = "represents a smaller opening)."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8ReedTabl9setOffsetEd"]
        pub fn ReedTabl_setOffset(this: *mut root::ReedTabl, aValue: f64);
    }
    extern "C" {
        #[doc = "! Set the table slope value."]
        #[doc = "*!"]
        #[doc = "The table slope roughly corresponds to the reed"]
        #[doc = "stiffness (a greater slope represents a harder"]
        #[doc = "reed)."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8ReedTabl8setSlopeEd"]
        pub fn ReedTabl_setSlope(this: *mut root::ReedTabl, aValue: f64);
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK8ReedTabl7lastOutEv"]
        pub fn ReedTabl_lastOut(this: *const root::ReedTabl) -> f64;
    }
    extern "C" {
        #[doc = "! Return the function value for \\e input."]
        #[doc = "*!"]
        #[doc = "The function input represents the differential"]
        #[doc = "pressure across the reeds."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8ReedTabl4tickEd"]
        pub fn ReedTabl_tick(this: *mut root::ReedTabl, input: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Take \\e vectorSize inputs and return the corresponding function values in \\e vector."]
        #[link_name = "\u{1}_ZN8ReedTabl4tickEPdj"]
        pub fn ReedTabl_tick1(
            this: *mut root::ReedTabl,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN8ReedTablC1Ev"]
        pub fn ReedTabl_ReedTabl(this: *mut root::ReedTabl);
    }
    impl ReedTabl {
        #[inline]
        pub unsafe fn setOffset(&mut self, aValue: f64) {
            ReedTabl_setOffset(self, aValue)
        }
        #[inline]
        pub unsafe fn setSlope(&mut self, aValue: f64) {
            ReedTabl_setSlope(self, aValue)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            ReedTabl_lastOut(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self, input: f64) -> f64 {
            ReedTabl_tick(self, input)
        }
        #[inline]
        pub unsafe fn tick1(
            &mut self,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64 {
            ReedTabl_tick1(self, vector, vectorSize)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ReedTabl_ReedTabl(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8ReedTablD1Ev"]
        pub fn ReedTabl_ReedTabl_destructor(this: *mut root::ReedTabl);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct OneZero {
        pub _base: root::FilterStk,
    }
    extern "C" {
        #[doc = "! Clears the internal state of the filter."]
        #[link_name = "\u{1}_ZN7OneZero5clearEv"]
        pub fn OneZero_clear(this: *mut root::OneZero);
    }
    extern "C" {
        #[doc = "! Set the b[0] coefficient value."]
        #[link_name = "\u{1}_ZN7OneZero5setB0Ed"]
        pub fn OneZero_setB0(this: *mut root::OneZero, b0: f64);
    }
    extern "C" {
        #[doc = "! Set the b[1] coefficient value."]
        #[link_name = "\u{1}_ZN7OneZero5setB1Ed"]
        pub fn OneZero_setB1(this: *mut root::OneZero, b1: f64);
    }
    extern "C" {
        #[doc = "! Set the zero position in the z-plane."]
        #[doc = "*!"]
        #[doc = "This method sets the zero position along the real-axis of the"]
        #[doc = "z-plane and normalizes the coefficients for a maximum gain of one."]
        #[doc = "A positive zero value produces a high-pass filter, while a"]
        #[doc = "negative zero value produces a low-pass filter.  This method does"]
        #[doc = "not affect the filter \\e gain value."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7OneZero7setZeroEd"]
        pub fn OneZero_setZero(this: *mut root::OneZero, theZero: f64);
    }
    extern "C" {
        #[doc = "! Default constructor creates a first-order low-pass filter."]
        #[link_name = "\u{1}_ZN7OneZeroC1Ev"]
        pub fn OneZero_OneZero(this: *mut root::OneZero);
    }
    extern "C" {
        #[doc = "! Overloaded constructor which sets the zero position during instantiation."]
        #[link_name = "\u{1}_ZN7OneZeroC1Ed"]
        pub fn OneZero_OneZero1(this: *mut root::OneZero, theZero: f64);
    }
    impl OneZero {
        #[inline]
        pub unsafe fn clear(&mut self) {
            OneZero_clear(self)
        }
        #[inline]
        pub unsafe fn setB0(&mut self, b0: f64) {
            OneZero_setB0(self, b0)
        }
        #[inline]
        pub unsafe fn setB1(&mut self, b1: f64) {
            OneZero_setB1(self, b1)
        }
        #[inline]
        pub unsafe fn setZero(&mut self, theZero: f64) {
            OneZero_setZero(self, theZero)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            OneZero_OneZero(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(theZero: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            OneZero_OneZero1(&mut __bindgen_tmp, theZero);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7OneZeroD1Ev"]
        pub fn OneZero_OneZero_destructor(this: *mut root::OneZero);
    }
    extern "C" {
        #[doc = "! Set the filter gain."]
        #[doc = "*!"]
        #[doc = "The gain is applied at the filter input and does not affect the"]
        #[doc = "coefficient values.  The default gain value is 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7OneZero7setGainEd"]
        pub fn OneZero_setGain(this: *mut ::std::os::raw::c_void, theGain: f64);
    }
    extern "C" {
        #[doc = "! Return the current filter gain."]
        #[link_name = "\u{1}_ZNK7OneZero7getGainEv"]
        pub fn OneZero_getGain(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK7OneZero7lastOutEv"]
        pub fn OneZero_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Input one sample to the filter and return one output."]
        #[link_name = "\u{1}_ZN7OneZero4tickEd"]
        pub fn OneZero_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN7OneZero4tickEPdj"]
        pub fn OneZero_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct BlowHole {
        pub _base: root::Instrmnt,
        pub m_reed: f64,
        pub m_noiseGain: f64,
        pub m_tonehole: f64,
        pub m_vent: f64,
        pub m_pressure: f64,
        pub m_rate: f64,
        pub delays: [*mut root::DelayL; 3usize],
        pub reedTable: *mut root::ReedTabl,
        pub filter: *mut root::OneZero,
        pub tonehole: *mut root::PoleZero,
        pub vent: *mut root::PoleZero,
        pub envelope: *mut root::Envelope,
        pub noise: *mut root::Noise,
        pub vibrato: *mut root::WaveLoop,
        pub length: ::std::os::raw::c_long,
        pub scatter: f64,
        pub th_coeff: f64,
        pub r_th: f64,
        pub rh_coeff: f64,
        pub rh_gain: f64,
        pub outputGain: f64,
        pub noiseGain: f64,
        pub vibratoGain: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8BlowHole5clearEv"]
        pub fn BlowHole_clear(this: *mut root::BlowHole);
    }
    extern "C" {
        #[doc = "! Set the tonehole state (0.0 = closed, 1.0 = fully open)."]
        #[link_name = "\u{1}_ZN8BlowHole11setToneholeEd"]
        pub fn BlowHole_setTonehole(this: *mut root::BlowHole, newValue: f64);
    }
    extern "C" {
        #[doc = "! Set the register hole state (0.0 = closed, 1.0 = fully open)."]
        #[link_name = "\u{1}_ZN8BlowHole7setVentEd"]
        pub fn BlowHole_setVent(this: *mut root::BlowHole, newValue: f64);
    }
    extern "C" {
        #[doc = "! Apply breath pressure to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN8BlowHole12startBlowingEdd"]
        pub fn BlowHole_startBlowing(this: *mut root::BlowHole, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease breath pressure with given rate of decrease."]
        #[link_name = "\u{1}_ZN8BlowHole11stopBlowingEd"]
        pub fn BlowHole_stopBlowing(this: *mut root::BlowHole, rate: f64);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8BlowHoleC1Ed"]
        pub fn BlowHole_BlowHole(this: *mut root::BlowHole, lowestFrequency: f64);
    }
    impl BlowHole {
        #[inline]
        pub unsafe fn clear(&mut self) {
            BlowHole_clear(self)
        }
        #[inline]
        pub unsafe fn setTonehole(&mut self, newValue: f64) {
            BlowHole_setTonehole(self, newValue)
        }
        #[inline]
        pub unsafe fn setVent(&mut self, newValue: f64) {
            BlowHole_setVent(self, newValue)
        }
        #[inline]
        pub unsafe fn startBlowing(&mut self, amplitude: f64, rate: f64) {
            BlowHole_startBlowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBlowing(&mut self, rate: f64) {
            BlowHole_stopBlowing(self, rate)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            BlowHole_BlowHole(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8BlowHoleD1Ev"]
        pub fn BlowHole_BlowHole_destructor(this: *mut root::BlowHole);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8BlowHole12setFrequencyEd"]
        pub fn BlowHole_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8BlowHole6noteOnEdd"]
        pub fn BlowHole_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8BlowHole7noteOffEd"]
        pub fn BlowHole_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8BlowHole4tickEv"]
        pub fn BlowHole_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8BlowHole13controlChangeEid"]
        pub fn BlowHole_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct OnePole {
        pub _base: root::FilterStk,
    }
    extern "C" {
        #[doc = "! Clears the internal state of the filter."]
        #[link_name = "\u{1}_ZN7OnePole5clearEv"]
        pub fn OnePole_clear(this: *mut root::OnePole);
    }
    extern "C" {
        #[doc = "! Set the b[0] coefficient value."]
        #[link_name = "\u{1}_ZN7OnePole5setB0Ed"]
        pub fn OnePole_setB0(this: *mut root::OnePole, b0: f64);
    }
    extern "C" {
        #[doc = "! Set the a[1] coefficient value."]
        #[link_name = "\u{1}_ZN7OnePole5setA1Ed"]
        pub fn OnePole_setA1(this: *mut root::OnePole, a1: f64);
    }
    extern "C" {
        #[doc = "! Set the pole position in the z-plane."]
        #[doc = "*!"]
        #[doc = "This method sets the pole position along the real-axis of the"]
        #[doc = "z-plane and normalizes the coefficients for a maximum gain of one."]
        #[doc = "A positive pole value produces a low-pass filter, while a negative"]
        #[doc = "pole value produces a high-pass filter.  This method does not"]
        #[doc = "affect the filter \\e gain value."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7OnePole7setPoleEd"]
        pub fn OnePole_setPole(this: *mut root::OnePole, thePole: f64);
    }
    extern "C" {
        #[doc = "! Default constructor creates a first-order low-pass filter."]
        #[link_name = "\u{1}_ZN7OnePoleC1Ev"]
        pub fn OnePole_OnePole(this: *mut root::OnePole);
    }
    extern "C" {
        #[doc = "! Overloaded constructor which sets the pole position during instantiation."]
        #[link_name = "\u{1}_ZN7OnePoleC1Ed"]
        pub fn OnePole_OnePole1(this: *mut root::OnePole, thePole: f64);
    }
    impl OnePole {
        #[inline]
        pub unsafe fn clear(&mut self) {
            OnePole_clear(self)
        }
        #[inline]
        pub unsafe fn setB0(&mut self, b0: f64) {
            OnePole_setB0(self, b0)
        }
        #[inline]
        pub unsafe fn setA1(&mut self, a1: f64) {
            OnePole_setA1(self, a1)
        }
        #[inline]
        pub unsafe fn setPole(&mut self, thePole: f64) {
            OnePole_setPole(self, thePole)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            OnePole_OnePole(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(thePole: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            OnePole_OnePole1(&mut __bindgen_tmp, thePole);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7OnePoleD1Ev"]
        pub fn OnePole_OnePole_destructor(this: *mut root::OnePole);
    }
    extern "C" {
        #[doc = "! Set the filter gain."]
        #[doc = "*!"]
        #[doc = "The gain is applied at the filter input and does not affect the"]
        #[doc = "coefficient values.  The default gain value is 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7OnePole7setGainEd"]
        pub fn OnePole_setGain(this: *mut ::std::os::raw::c_void, theGain: f64);
    }
    extern "C" {
        #[doc = "! Return the current filter gain."]
        #[link_name = "\u{1}_ZNK7OnePole7getGainEv"]
        pub fn OnePole_getGain(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK7OnePole7lastOutEv"]
        pub fn OnePole_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Input one sample to the filter and return one output."]
        #[link_name = "\u{1}_ZN7OnePole4tickEd"]
        pub fn OnePole_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN7OnePole4tickEPdj"]
        pub fn OnePole_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Bowed {
        pub _base: root::Instrmnt,
        pub m_bowPressure: f64,
        pub m_bowPosition: f64,
        pub m_vibratoFreq: f64,
        pub m_vibratoGain: f64,
        pub m_volume: f64,
        pub m_rate: f64,
        pub neckDelay: *mut root::DelayL,
        pub bridgeDelay: *mut root::DelayL,
        pub bowTable: *mut root::BowTabl,
        pub stringFilter: *mut root::OnePole,
        pub bodyFilter: *mut root::BiQuad,
        pub vibrato: *mut root::WaveLoop,
        pub adsr: *mut root::ADSR,
        pub maxVelocity: f64,
        pub baseDelay: f64,
        pub vibratoGain: f64,
        pub betaRatio: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN5Bowed5clearEv"]
        pub fn Bowed_clear(this: *mut root::Bowed);
    }
    extern "C" {
        #[doc = "! Set vibrato gain."]
        #[link_name = "\u{1}_ZN5Bowed10setVibratoEd"]
        pub fn Bowed_setVibrato(this: *mut root::Bowed, gain: f64);
    }
    extern "C" {
        #[doc = "! Apply breath pressure to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN5Bowed11startBowingEdd"]
        pub fn Bowed_startBowing(this: *mut root::Bowed, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease breath pressure with given rate of decrease."]
        #[link_name = "\u{1}_ZN5Bowed10stopBowingEd"]
        pub fn Bowed_stopBowing(this: *mut root::Bowed, rate: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN5BowedC1Ed"]
        pub fn Bowed_Bowed(this: *mut root::Bowed, lowestFrequency: f64);
    }
    impl Bowed {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Bowed_clear(self)
        }
        #[inline]
        pub unsafe fn setVibrato(&mut self, gain: f64) {
            Bowed_setVibrato(self, gain)
        }
        #[inline]
        pub unsafe fn startBowing(&mut self, amplitude: f64, rate: f64) {
            Bowed_startBowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBowing(&mut self, rate: f64) {
            Bowed_stopBowing(self, rate)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Bowed_Bowed(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5BowedD1Ev"]
        pub fn Bowed_Bowed_destructor(this: *mut root::Bowed);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN5Bowed12setFrequencyEd"]
        pub fn Bowed_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN5Bowed6noteOnEdd"]
        pub fn Bowed_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN5Bowed7noteOffEd"]
        pub fn Bowed_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN5Bowed4tickEv"]
        pub fn Bowed_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN5Bowed13controlChangeEid"]
        pub fn Bowed_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct DelayA {
        pub _base: root::Delay,
        pub alpha: f64,
        pub coeff: f64,
        pub apInput: f64,
        pub nextOutput: f64,
        pub doNextOut: bool,
    }
    extern "C" {
        #[doc = "! Clears the internal state of the delay line."]
        #[link_name = "\u{1}_ZN6DelayA5clearEv"]
        pub fn DelayA_clear(this: *mut root::DelayA);
    }
    extern "C" {
        #[doc = "! Set the delay-line length"]
        #[doc = "*!"]
        #[doc = "The valid range for \\e theDelay is from 0.5 to the maximum delay-line length."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6DelayA8setDelayEd"]
        pub fn DelayA_setDelay(this: *mut root::DelayA, theDelay: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6DelayA3setEdl"]
        pub fn DelayA_set(this: *mut root::DelayA, delay: f64, max: ::std::os::raw::c_long);
    }
    extern "C" {
        #[doc = "! Return the value which will be output by the next call to tick()."]
        #[doc = "*!"]
        #[doc = "This method is valid only for delay settings greater than zero!"]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6DelayA7nextOutEv"]
        pub fn DelayA_nextOut(this: *mut root::DelayA) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor creates a delay-line with maximum length of 4095 samples and zero delay."]
        #[link_name = "\u{1}_ZN6DelayAC1Ev"]
        pub fn DelayA_DelayA(this: *mut root::DelayA);
    }
    extern "C" {
        #[doc = "! Overloaded constructor which specifies the current and maximum delay-line lengths."]
        #[link_name = "\u{1}_ZN6DelayAC1Edl"]
        pub fn DelayA_DelayA1(
            this: *mut root::DelayA,
            theDelay: f64,
            maxDelay: ::std::os::raw::c_long,
        );
    }
    impl DelayA {
        #[inline]
        pub unsafe fn clear(&mut self) {
            DelayA_clear(self)
        }
        #[inline]
        pub unsafe fn setDelay(&mut self, theDelay: f64) {
            DelayA_setDelay(self, theDelay)
        }
        #[inline]
        pub unsafe fn set(&mut self, delay: f64, max: ::std::os::raw::c_long) {
            DelayA_set(self, delay, max)
        }
        #[inline]
        pub unsafe fn nextOut(&mut self) -> f64 {
            DelayA_nextOut(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            DelayA_DelayA(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(theDelay: f64, maxDelay: ::std::os::raw::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            DelayA_DelayA1(&mut __bindgen_tmp, theDelay, maxDelay);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6DelayAD1Ev"]
        pub fn DelayA_DelayA_destructor(this: *mut root::DelayA);
    }
    extern "C" {
        #[doc = "! Input one sample to the delay-line and return one output."]
        #[link_name = "\u{1}_ZN6DelayA4tickEd"]
        pub fn DelayA_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Brass {
        pub _base: root::Instrmnt,
        pub m_rate: f64,
        pub m_lip: f64,
        pub m_slide: f64,
        pub m_vibratoFreq: f64,
        pub m_vibratoGain: f64,
        pub m_volume: f64,
        pub delayLine: *mut root::DelayA,
        pub lipFilter: *mut root::BiQuad,
        pub dcBlock: *mut root::PoleZero,
        pub adsr: *mut root::ADSR,
        pub vibrato: *mut root::WaveLoop,
        pub length: ::std::os::raw::c_long,
        pub lipTarget: f64,
        pub slideTarget: f64,
        pub vibratoGain: f64,
        pub maxPressure: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN5Brass5clearEv"]
        pub fn Brass_clear(this: *mut root::Brass);
    }
    extern "C" {
        #[doc = "! Set the lips frequency."]
        #[link_name = "\u{1}_ZN5Brass6setLipEd"]
        pub fn Brass_setLip(this: *mut root::Brass, frequency: f64);
    }
    extern "C" {
        #[doc = "! Apply breath pressure to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN5Brass12startBlowingEdd"]
        pub fn Brass_startBlowing(this: *mut root::Brass, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease breath pressure with given rate of decrease."]
        #[link_name = "\u{1}_ZN5Brass11stopBlowingEd"]
        pub fn Brass_stopBlowing(this: *mut root::Brass, rate: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN5BrassC1Ed"]
        pub fn Brass_Brass(this: *mut root::Brass, lowestFrequency: f64);
    }
    impl Brass {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Brass_clear(self)
        }
        #[inline]
        pub unsafe fn setLip(&mut self, frequency: f64) {
            Brass_setLip(self, frequency)
        }
        #[inline]
        pub unsafe fn startBlowing(&mut self, amplitude: f64, rate: f64) {
            Brass_startBlowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBlowing(&mut self, rate: f64) {
            Brass_stopBlowing(self, rate)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Brass_Brass(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5BrassD1Ev"]
        pub fn Brass_Brass_destructor(this: *mut root::Brass);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN5Brass12setFrequencyEd"]
        pub fn Brass_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN5Brass6noteOnEdd"]
        pub fn Brass_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN5Brass7noteOffEd"]
        pub fn Brass_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN5Brass4tickEv"]
        pub fn Brass_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN5Brass13controlChangeEid"]
        pub fn Brass_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Chorus {
        pub _base: root::Stk,
        pub delayLine: [*mut root::DelayL; 2usize],
        pub mods: [*mut root::WaveLoop; 2usize],
        pub baseLength: f64,
        pub modDepth: f64,
        pub lastOutput: [f64; 2usize],
        pub effectMix: f64,
    }
    extern "C" {
        #[doc = "! Set baseDelay and modDepth"]
        #[link_name = "\u{1}_ZN6Chorus3setEdd"]
        pub fn Chorus_set(this: *mut root::Chorus, baseDelay: f64, depth: f64);
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN6Chorus5clearEv"]
        pub fn Chorus_clear(this: *mut root::Chorus);
    }
    extern "C" {
        #[doc = "! Set base delay"]
        #[link_name = "\u{1}_ZN6Chorus8setDelayEd"]
        pub fn Chorus_setDelay(this: *mut root::Chorus, baseDelay: f64);
    }
    extern "C" {
        #[doc = "! Set modulation depth."]
        #[link_name = "\u{1}_ZN6Chorus11setModDepthEd"]
        pub fn Chorus_setModDepth(this: *mut root::Chorus, depth: f64);
    }
    extern "C" {
        #[doc = "! Set modulation frequency."]
        #[link_name = "\u{1}_ZN6Chorus15setModFrequencyEd"]
        pub fn Chorus_setModFrequency(this: *mut root::Chorus, frequency: f64);
    }
    extern "C" {
        #[doc = "! Set the mixture of input and processed levels in the output (0.0 = input only, 1.0 = processed only)."]
        #[link_name = "\u{1}_ZN6Chorus12setEffectMixEd"]
        pub fn Chorus_setEffectMix(this: *mut root::Chorus, mix: f64);
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK6Chorus7lastOutEv"]
        pub fn Chorus_lastOut(this: *const root::Chorus) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last left output value."]
        #[link_name = "\u{1}_ZNK6Chorus11lastOutLeftEv"]
        pub fn Chorus_lastOutLeft(this: *const root::Chorus) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last right output value."]
        #[link_name = "\u{1}_ZNK6Chorus12lastOutRightEv"]
        pub fn Chorus_lastOutRight(this: *const root::Chorus) -> f64;
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN6Chorus4tickEd"]
        pub fn Chorus_tick(this: *mut root::Chorus, input: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Take \\e vectorSize inputs, compute the same number of outputs and return them in \\e vector."]
        #[link_name = "\u{1}_ZN6Chorus4tickEPdj"]
        pub fn Chorus_tick1(
            this: *mut root::Chorus,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Class constructor, taking the longest desired delay length."]
        #[link_name = "\u{1}_ZN6ChorusC1Ed"]
        pub fn Chorus_Chorus(this: *mut root::Chorus, baseDelay: f64);
    }
    impl Chorus {
        #[inline]
        pub unsafe fn set(&mut self, baseDelay: f64, depth: f64) {
            Chorus_set(self, baseDelay, depth)
        }
        #[inline]
        pub unsafe fn clear(&mut self) {
            Chorus_clear(self)
        }
        #[inline]
        pub unsafe fn setDelay(&mut self, baseDelay: f64) {
            Chorus_setDelay(self, baseDelay)
        }
        #[inline]
        pub unsafe fn setModDepth(&mut self, depth: f64) {
            Chorus_setModDepth(self, depth)
        }
        #[inline]
        pub unsafe fn setModFrequency(&mut self, frequency: f64) {
            Chorus_setModFrequency(self, frequency)
        }
        #[inline]
        pub unsafe fn setEffectMix(&mut self, mix: f64) {
            Chorus_setEffectMix(self, mix)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Chorus_lastOut(self)
        }
        #[inline]
        pub unsafe fn lastOutLeft(&self) -> f64 {
            Chorus_lastOutLeft(self)
        }
        #[inline]
        pub unsafe fn lastOutRight(&self) -> f64 {
            Chorus_lastOutRight(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self, input: f64) -> f64 {
            Chorus_tick(self, input)
        }
        #[inline]
        pub unsafe fn tick1(
            &mut self,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64 {
            Chorus_tick1(self, vector, vectorSize)
        }
        #[inline]
        pub unsafe fn new(baseDelay: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chorus_Chorus(&mut __bindgen_tmp, baseDelay);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6ChorusD1Ev"]
        pub fn Chorus_Chorus_destructor(this: *mut root::Chorus);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Clarinet {
        pub _base: root::Instrmnt,
        pub m_reed: f64,
        pub m_noiseGain: f64,
        pub m_vibratoFreq: f64,
        pub m_vibratoGain: f64,
        pub m_volume: f64,
        pub m_rate: f64,
        pub delayLine: *mut root::DelayL,
        pub reedTable: *mut root::ReedTabl,
        pub filter: *mut root::OneZero,
        pub envelope: *mut root::Envelope,
        pub noise: *mut root::Noise,
        pub vibrato: *mut root::WaveLoop,
        pub length: ::std::os::raw::c_long,
        pub outputGain: f64,
        pub noiseGain: f64,
        pub vibratoGain: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8Clarinet5clearEv"]
        pub fn Clarinet_clear(this: *mut root::Clarinet);
    }
    extern "C" {
        #[doc = "! Apply breath pressure to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN8Clarinet12startBlowingEdd"]
        pub fn Clarinet_startBlowing(this: *mut root::Clarinet, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease breath pressure with given rate of decrease."]
        #[link_name = "\u{1}_ZN8Clarinet11stopBlowingEd"]
        pub fn Clarinet_stopBlowing(this: *mut root::Clarinet, rate: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN8ClarinetC1Ed"]
        pub fn Clarinet_Clarinet(this: *mut root::Clarinet, lowestFrequency: f64);
    }
    impl Clarinet {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Clarinet_clear(self)
        }
        #[inline]
        pub unsafe fn startBlowing(&mut self, amplitude: f64, rate: f64) {
            Clarinet_startBlowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBlowing(&mut self, rate: f64) {
            Clarinet_stopBlowing(self, rate)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Clarinet_Clarinet(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8ClarinetD1Ev"]
        pub fn Clarinet_Clarinet_destructor(this: *mut root::Clarinet);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8Clarinet12setFrequencyEd"]
        pub fn Clarinet_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8Clarinet6noteOnEdd"]
        pub fn Clarinet_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8Clarinet7noteOffEd"]
        pub fn Clarinet_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8Clarinet4tickEv"]
        pub fn Clarinet_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8Clarinet13controlChangeEid"]
        pub fn Clarinet_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Drummer {
        pub _base: root::Instrmnt,
        pub waves: [*mut root::WvIn; 4usize],
        pub filters: [*mut root::OnePole; 4usize],
        pub sounding: [::std::os::raw::c_int; 4usize],
        pub nSounding: ::std::os::raw::c_int,
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN7DrummerC1Ev"]
        pub fn Drummer_Drummer(this: *mut root::Drummer);
    }
    impl Drummer {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Drummer_Drummer(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7DrummerD1Ev"]
        pub fn Drummer_Drummer_destructor(this: *mut root::Drummer);
    }
    extern "C" {
        #[doc = "! Start a note with the given drum type and amplitude."]
        #[doc = "*!"]
        #[doc = "Use general MIDI drum instrument numbers, converted to"]
        #[doc = "frequency values as if MIDI note numbers, to select a"]
        #[doc = "particular instrument."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7Drummer6noteOnEdd"]
        pub fn Drummer_noteOn(this: *mut ::std::os::raw::c_void, instrument: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN7Drummer7noteOffEd"]
        pub fn Drummer_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN7Drummer4tickEv"]
        pub fn Drummer_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Echo {
        pub _base: root::Stk,
        pub delayLine: *mut root::Delay,
        pub length: ::std::os::raw::c_long,
        pub lastOutput: f64,
        pub effectMix: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN4Echo5clearEv"]
        pub fn Echo_clear(this: *mut root::Echo);
    }
    extern "C" {
        #[doc = "! Set the delay line length in samples."]
        #[link_name = "\u{1}_ZN4Echo8setDelayEd"]
        pub fn Echo_setDelay(this: *mut root::Echo, delay: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4Echo3setEd"]
        pub fn Echo_set(this: *mut root::Echo, max: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4Echo8getDelayEv"]
        pub fn Echo_getDelay(this: *mut root::Echo) -> f64;
    }
    extern "C" {
        #[doc = "! Set the mixture of input and processed levels in the output (0.0 = input only, 1.0 = processed only)."]
        #[link_name = "\u{1}_ZN4Echo12setEffectMixEd"]
        pub fn Echo_setEffectMix(this: *mut root::Echo, mix: f64);
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK4Echo7lastOutEv"]
        pub fn Echo_lastOut(this: *const root::Echo) -> f64;
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN4Echo4tickEd"]
        pub fn Echo_tick(this: *mut root::Echo, input: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN4Echo4tickEPdj"]
        pub fn Echo_tick1(
            this: *mut root::Echo,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Class constructor, taking the longest desired delay length."]
        #[link_name = "\u{1}_ZN4EchoC1Ed"]
        pub fn Echo_Echo(this: *mut root::Echo, longestDelay: f64);
    }
    impl Echo {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Echo_clear(self)
        }
        #[inline]
        pub unsafe fn setDelay(&mut self, delay: f64) {
            Echo_setDelay(self, delay)
        }
        #[inline]
        pub unsafe fn set(&mut self, max: f64) {
            Echo_set(self, max)
        }
        #[inline]
        pub unsafe fn getDelay(&mut self) -> f64 {
            Echo_getDelay(self)
        }
        #[inline]
        pub unsafe fn setEffectMix(&mut self, mix: f64) {
            Echo_setEffectMix(self, mix)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Echo_lastOut(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self, input: f64) -> f64 {
            Echo_tick(self, input)
        }
        #[inline]
        pub unsafe fn tick1(
            &mut self,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64 {
            Echo_tick1(self, vector, vectorSize)
        }
        #[inline]
        pub unsafe fn new(longestDelay: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Echo_Echo(&mut __bindgen_tmp, longestDelay);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN4EchoD1Ev"]
        pub fn Echo_Echo_destructor(this: *mut root::Echo);
    }
    #[repr(C)]
    pub struct FMVoices {
        pub _base: root::FM,
        pub currentVowel: ::std::os::raw::c_int,
        pub tilt: [f64; 3usize],
        pub mods: [f64; 3usize],
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8FMVoicesC1Ev"]
        pub fn FMVoices_FMVoices(this: *mut root::FMVoices);
    }
    impl FMVoices {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FMVoices_FMVoices(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8FMVoicesD1Ev"]
        pub fn FMVoices_FMVoices_destructor(this: *mut root::FMVoices);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8FMVoices12setFrequencyEd"]
        pub fn FMVoices_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8FMVoices6noteOnEdd"]
        pub fn FMVoices_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8FMVoices4tickEv"]
        pub fn FMVoices_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8FMVoices13controlChangeEid"]
        pub fn FMVoices_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Flute {
        pub _base: root::Instrmnt,
        pub m_jetDelay: f64,
        pub m_jetReflection: f64,
        pub m_endReflection: f64,
        pub m_noiseGain: f64,
        pub m_vibratoFreq: f64,
        pub m_vibratoGain: f64,
        pub m_pressure: f64,
        pub m_rate: f64,
        pub jetDelay: *mut root::DelayL,
        pub boreDelay: *mut root::DelayL,
        pub jetTable: *mut root::JetTabl,
        pub filter: *mut root::OnePole,
        pub dcBlock: *mut root::PoleZero,
        pub noise: *mut root::Noise,
        pub adsr: *mut root::ADSR,
        pub vibrato: *mut root::WaveLoop,
        pub length: ::std::os::raw::c_long,
        pub lastFrequency: f64,
        pub maxPressure: f64,
        pub jetReflection: f64,
        pub endReflection: f64,
        pub noiseGain: f64,
        pub vibratoGain: f64,
        pub outputGain: f64,
        pub jetRatio: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN5Flute5clearEv"]
        pub fn Flute_clear(this: *mut root::Flute);
    }
    extern "C" {
        #[doc = "! Set the reflection coefficient for the jet delay (-1.0 - 1.0)."]
        #[link_name = "\u{1}_ZN5Flute16setJetReflectionEd"]
        pub fn Flute_setJetReflection(this: *mut root::Flute, coefficient: f64);
    }
    extern "C" {
        #[doc = "! Set the reflection coefficient for the air column delay (-1.0 - 1.0)."]
        #[link_name = "\u{1}_ZN5Flute16setEndReflectionEd"]
        pub fn Flute_setEndReflection(this: *mut root::Flute, coefficient: f64);
    }
    extern "C" {
        #[doc = "! Set the length of the jet delay in terms of a ratio of jet delay to air column delay lengths."]
        #[link_name = "\u{1}_ZN5Flute11setJetDelayEd"]
        pub fn Flute_setJetDelay(this: *mut root::Flute, aRatio: f64);
    }
    extern "C" {
        #[doc = "! Apply breath velocity to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN5Flute12startBlowingEdd"]
        pub fn Flute_startBlowing(this: *mut root::Flute, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease breath velocity with given rate of decrease."]
        #[link_name = "\u{1}_ZN5Flute11stopBlowingEd"]
        pub fn Flute_stopBlowing(this: *mut root::Flute, rate: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN5FluteC1Ed"]
        pub fn Flute_Flute(this: *mut root::Flute, lowestFrequency: f64);
    }
    impl Flute {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Flute_clear(self)
        }
        #[inline]
        pub unsafe fn setJetReflection(&mut self, coefficient: f64) {
            Flute_setJetReflection(self, coefficient)
        }
        #[inline]
        pub unsafe fn setEndReflection(&mut self, coefficient: f64) {
            Flute_setEndReflection(self, coefficient)
        }
        #[inline]
        pub unsafe fn setJetDelay(&mut self, aRatio: f64) {
            Flute_setJetDelay(self, aRatio)
        }
        #[inline]
        pub unsafe fn startBlowing(&mut self, amplitude: f64, rate: f64) {
            Flute_startBlowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBlowing(&mut self, rate: f64) {
            Flute_stopBlowing(self, rate)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Flute_Flute(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5FluteD1Ev"]
        pub fn Flute_Flute_destructor(this: *mut root::Flute);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN5Flute12setFrequencyEd"]
        pub fn Flute_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN5Flute6noteOnEdd"]
        pub fn Flute_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN5Flute7noteOffEd"]
        pub fn Flute_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN5Flute4tickEv"]
        pub fn Flute_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN5Flute13controlChangeEid"]
        pub fn Flute_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct FormSwep {
        pub _base: root::BiQuad,
        pub dirty: bool,
        pub frequency: f64,
        pub radius: f64,
        pub startFrequency: f64,
        pub startRadius: f64,
        pub startGain: f64,
        pub targetFrequency: f64,
        pub targetRadius: f64,
        pub targetGain: f64,
        pub deltaFrequency: f64,
        pub deltaRadius: f64,
        pub deltaGain: f64,
        pub sweepState: f64,
        pub sweepRate: f64,
    }
    extern "C" {
        #[doc = "! Sets the filter coefficients for a resonance at \\e frequency (in Hz)."]
        #[doc = "*!"]
        #[doc = "This method determines the filter coefficients corresponding to"]
        #[doc = "two complex-conjugate poles with the given \\e frequency (in Hz)"]
        #[doc = "and \\e radius from the z-plane origin.  The filter zeros are"]
        #[doc = "placed at z = 1, z = -1, and the coefficients are then normalized to"]
        #[doc = "produce a constant unity gain (independent of the filter \\e gain"]
        #[doc = "parameter).  The resulting filter frequency response has a"]
        #[doc = "resonance at the given \\e frequency.  The closer the poles are to"]
        #[doc = "the unit-circle (\\e radius close to one), the narrower the"]
        #[doc = "resulting resonance width."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8FormSwep12setResonanceEdd"]
        pub fn FormSwep_setResonance(this: *mut root::FormSwep, aFrequency: f64, aRadius: f64);
    }
    extern "C" {
        #[doc = "! Set both the current and target resonance parameters."]
        #[link_name = "\u{1}_ZN8FormSwep9setStatesEddd"]
        pub fn FormSwep_setStates(
            this: *mut root::FormSwep,
            aFrequency: f64,
            aRadius: f64,
            aGain: f64,
        );
    }
    extern "C" {
        #[doc = "! Set target resonance parameters."]
        #[link_name = "\u{1}_ZN8FormSwep10setTargetsEddd"]
        pub fn FormSwep_setTargets(
            this: *mut root::FormSwep,
            aFrequency: f64,
            aRadius: f64,
            aGain: f64,
        );
    }
    extern "C" {
        #[doc = "! Set the sweep rate (between 0.0 - 1.0)."]
        #[doc = "*!"]
        #[doc = "The formant parameters are varied in increments of the"]
        #[doc = "sweep rate between their current and target values."]
        #[doc = "A sweep rate of 1.0 will produce an immediate change in"]
        #[doc = "resonance parameters from their current values to the"]
        #[doc = "target values.  A sweep rate of 0.0 will produce no"]
        #[doc = "change in resonance parameters."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8FormSwep12setSweepRateEd"]
        pub fn FormSwep_setSweepRate(this: *mut root::FormSwep, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the sweep rate in terms of a time value in seconds."]
        #[doc = "*!"]
        #[doc = "This method adjusts the sweep rate based on a"]
        #[doc = "given time for the formant parameters to reach"]
        #[doc = "their target values."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8FormSwep12setSweepTimeEd"]
        pub fn FormSwep_setSweepTime(this: *mut root::FormSwep, aTime: f64);
    }
    extern "C" {
        #[doc = "! Default constructor creates a second-order pass-through filter."]
        #[link_name = "\u{1}_ZN8FormSwepC1Ev"]
        pub fn FormSwep_FormSwep(this: *mut root::FormSwep);
    }
    impl FormSwep {
        #[inline]
        pub unsafe fn setResonance(&mut self, aFrequency: f64, aRadius: f64) {
            FormSwep_setResonance(self, aFrequency, aRadius)
        }
        #[inline]
        pub unsafe fn setStates(&mut self, aFrequency: f64, aRadius: f64, aGain: f64) {
            FormSwep_setStates(self, aFrequency, aRadius, aGain)
        }
        #[inline]
        pub unsafe fn setTargets(&mut self, aFrequency: f64, aRadius: f64, aGain: f64) {
            FormSwep_setTargets(self, aFrequency, aRadius, aGain)
        }
        #[inline]
        pub unsafe fn setSweepRate(&mut self, aRate: f64) {
            FormSwep_setSweepRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setSweepTime(&mut self, aTime: f64) {
            FormSwep_setSweepTime(self, aTime)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FormSwep_FormSwep(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8FormSwepD1Ev"]
        pub fn FormSwep_FormSwep_destructor(this: *mut root::FormSwep);
    }
    extern "C" {
        #[doc = "! Input one sample to the filter and return one output."]
        #[link_name = "\u{1}_ZN8FormSwep4tickEd"]
        pub fn FormSwep_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN8FormSwep4tickEPdj"]
        pub fn FormSwep_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    pub struct HevyMetl {
        pub _base: root::FM,
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8HevyMetlC1Ev"]
        pub fn HevyMetl_HevyMetl(this: *mut root::HevyMetl);
    }
    impl HevyMetl {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            HevyMetl_HevyMetl(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8HevyMetlD1Ev"]
        pub fn HevyMetl_HevyMetl_destructor(this: *mut root::HevyMetl);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8HevyMetl6noteOnEdd"]
        pub fn HevyMetl_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8HevyMetl4tickEv"]
        pub fn HevyMetl_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Reverb {
        pub _base: root::Stk,
        pub lastOutput: [f64; 2usize],
        pub effectMix: f64,
    }
    extern "C" {
        #[doc = "! Set the mixture of input and \"reverberated\" levels in the output (0.0 = input only, 1.0 = reverb only)."]
        #[link_name = "\u{1}_ZN6Reverb12setEffectMixEd"]
        pub fn Reverb_setEffectMix(this: *mut root::Reverb, mix: f64);
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK6Reverb7lastOutEv"]
        pub fn Reverb_lastOut(this: *const root::Reverb) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last left output value."]
        #[link_name = "\u{1}_ZNK6Reverb11lastOutLeftEv"]
        pub fn Reverb_lastOutLeft(this: *const root::Reverb) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last right output value."]
        #[link_name = "\u{1}_ZNK6Reverb12lastOutRightEv"]
        pub fn Reverb_lastOutRight(this: *const root::Reverb) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6Reverb7isPrimeEi"]
        pub fn Reverb_isPrime(this: *mut root::Reverb, number: ::std::os::raw::c_int) -> bool;
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN6ReverbC2Ev"]
        pub fn Reverb_Reverb(this: *mut root::Reverb);
    }
    impl Reverb {
        #[inline]
        pub unsafe fn setEffectMix(&mut self, mix: f64) {
            Reverb_setEffectMix(self, mix)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Reverb_lastOut(self)
        }
        #[inline]
        pub unsafe fn lastOutLeft(&self) -> f64 {
            Reverb_lastOutLeft(self)
        }
        #[inline]
        pub unsafe fn lastOutRight(&self) -> f64 {
            Reverb_lastOutRight(self)
        }
        #[inline]
        pub unsafe fn isPrime(&mut self, number: ::std::os::raw::c_int) -> bool {
            Reverb_isPrime(self, number)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Reverb_Reverb(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6ReverbD1Ev"]
        pub fn Reverb_Reverb_destructor(this: *mut root::Reverb);
    }
    extern "C" {
        #[doc = "! Take \\e vectorSize inputs, compute the same number of outputs and return them in \\e vector."]
        #[link_name = "\u{1}_ZN6Reverb4tickEPdj"]
        pub fn Reverb_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct JCRev {
        pub _base: root::Reverb,
        pub allpassDelays: [*mut root::Delay; 3usize],
        pub combDelays: [*mut root::Delay; 4usize],
        pub outLeftDelay: *mut root::Delay,
        pub outRightDelay: *mut root::Delay,
        pub allpassCoefficient: f64,
        pub combCoefficient: [f64; 4usize],
    }
    extern "C" {
        #[doc = "! Class constructor taking a T60 decay time argument."]
        #[link_name = "\u{1}_ZN5JCRevC1Ed"]
        pub fn JCRev_JCRev(this: *mut root::JCRev, T60: f64);
    }
    impl JCRev {
        #[inline]
        pub unsafe fn new(T60: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            JCRev_JCRev(&mut __bindgen_tmp, T60);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5JCRevD1Ev"]
        pub fn JCRev_JCRev_destructor(this: *mut root::JCRev);
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN5JCRev5clearEv"]
        pub fn JCRev_clear(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN5JCRev4tickEd"]
        pub fn JCRev_tick(this: *mut ::std::os::raw::c_void, input: f64) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct PluckTwo {
        pub _base: root::Instrmnt,
        pub delayLine: *mut root::DelayA,
        pub delayLine2: *mut root::DelayA,
        pub combDelay: *mut root::DelayL,
        pub filter: *mut root::OneZero,
        pub filter2: *mut root::OneZero,
        pub length: ::std::os::raw::c_long,
        pub loopGain: f64,
        pub baseLoopGain: f64,
        pub lastFrequency: f64,
        pub lastLength: f64,
        pub detuning: f64,
        pub pluckAmplitude: f64,
        pub pluckPosition: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8PluckTwo5clearEv"]
        pub fn PluckTwo_clear(this: *mut root::PluckTwo);
    }
    extern "C" {
        #[doc = "! Detune the two strings by the given factor.  A value of 1.0 produces unison strings."]
        #[link_name = "\u{1}_ZN8PluckTwo9setDetuneEd"]
        pub fn PluckTwo_setDetune(this: *mut root::PluckTwo, detune: f64);
    }
    extern "C" {
        #[doc = "! Efficient combined setting of frequency and detuning."]
        #[link_name = "\u{1}_ZN8PluckTwo16setFreqAndDetuneEdd"]
        pub fn PluckTwo_setFreqAndDetune(this: *mut root::PluckTwo, frequency: f64, detune: f64);
    }
    extern "C" {
        #[doc = "! Set the pluck or \"excitation\" position along the string (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8PluckTwo16setPluckPositionEd"]
        pub fn PluckTwo_setPluckPosition(this: *mut root::PluckTwo, position: f64);
    }
    extern "C" {
        #[doc = "! Set the base loop gain."]
        #[doc = "*!"]
        #[doc = "The actual loop gain is set according to the frequency."]
        #[doc = "Because of high-frequency loop filter roll-off, higher"]
        #[doc = "frequency settings have greater loop gains."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8PluckTwo15setBaseLoopGainEd"]
        pub fn PluckTwo_setBaseLoopGain(this: *mut root::PluckTwo, aGain: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN8PluckTwoC2Ed"]
        pub fn PluckTwo_PluckTwo(this: *mut root::PluckTwo, lowestFrequency: f64);
    }
    impl PluckTwo {
        #[inline]
        pub unsafe fn clear(&mut self) {
            PluckTwo_clear(self)
        }
        #[inline]
        pub unsafe fn setDetune(&mut self, detune: f64) {
            PluckTwo_setDetune(self, detune)
        }
        #[inline]
        pub unsafe fn setFreqAndDetune(&mut self, frequency: f64, detune: f64) {
            PluckTwo_setFreqAndDetune(self, frequency, detune)
        }
        #[inline]
        pub unsafe fn setPluckPosition(&mut self, position: f64) {
            PluckTwo_setPluckPosition(self, position)
        }
        #[inline]
        pub unsafe fn setBaseLoopGain(&mut self, aGain: f64) {
            PluckTwo_setBaseLoopGain(self, aGain)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PluckTwo_PluckTwo(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8PluckTwoD1Ev"]
        pub fn PluckTwo_PluckTwo_destructor(this: *mut root::PluckTwo);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8PluckTwo12setFrequencyEd"]
        pub fn PluckTwo_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8PluckTwo7noteOffEd"]
        pub fn PluckTwo_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Mandolin {
        pub _base: root::PluckTwo,
        pub soundfile: [*mut root::WvIn; 12usize],
        pub directBody: f64,
        pub mic: ::std::os::raw::c_int,
        pub dampTime: ::std::os::raw::c_long,
        pub waveDone: bool,
        pub m_bodySize: f64,
    }
    extern "C" {
        #[doc = "! Pluck the strings with the given amplitude (0.0 - 1.0) using the current frequency."]
        #[link_name = "\u{1}_ZN8Mandolin5pluckEd"]
        pub fn Mandolin_pluck(this: *mut root::Mandolin, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Pluck the strings with the given amplitude (0.0 - 1.0) and position (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8Mandolin5pluckEdd"]
        pub fn Mandolin_pluck1(this: *mut root::Mandolin, amplitude: f64, position: f64);
    }
    extern "C" {
        #[doc = "! Set the body size (a value of 1.0 produces the \"default\" size)."]
        #[link_name = "\u{1}_ZN8Mandolin11setBodySizeEd"]
        pub fn Mandolin_setBodySize(this: *mut root::Mandolin, size: f64);
    }
    extern "C" {
        #[doc = "! Set the body impulse response"]
        #[link_name = "\u{1}_ZN8Mandolin9setBodyIREPKcb"]
        pub fn Mandolin_setBodyIR(
            this: *mut root::Mandolin,
            path: *const ::std::os::raw::c_char,
            isRaw: bool,
        ) -> bool;
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN8MandolinC1Ed"]
        pub fn Mandolin_Mandolin(this: *mut root::Mandolin, lowestFrequency: f64);
    }
    impl Mandolin {
        #[inline]
        pub unsafe fn pluck(&mut self, amplitude: f64) {
            Mandolin_pluck(self, amplitude)
        }
        #[inline]
        pub unsafe fn pluck1(&mut self, amplitude: f64, position: f64) {
            Mandolin_pluck1(self, amplitude, position)
        }
        #[inline]
        pub unsafe fn setBodySize(&mut self, size: f64) {
            Mandolin_setBodySize(self, size)
        }
        #[inline]
        pub unsafe fn setBodyIR(
            &mut self,
            path: *const ::std::os::raw::c_char,
            isRaw: bool,
        ) -> bool {
            Mandolin_setBodyIR(self, path, isRaw)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Mandolin_Mandolin(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8MandolinD1Ev"]
        pub fn Mandolin_Mandolin_destructor(this: *mut root::Mandolin);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8Mandolin6noteOnEdd"]
        pub fn Mandolin_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8Mandolin4tickEv"]
        pub fn Mandolin_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8Mandolin13controlChangeEid"]
        pub fn Mandolin_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Mesh2D {
        pub _base: root::Instrmnt,
        pub NX: ::std::os::raw::c_short,
        pub NY: ::std::os::raw::c_short,
        pub xInput: ::std::os::raw::c_short,
        pub yInput: ::std::os::raw::c_short,
        pub filterX: [*mut root::OnePole; 12usize],
        pub filterY: [*mut root::OnePole; 12usize],
        pub v: [[f64; 11usize]; 11usize],
        pub vxp: [[f64; 12usize]; 12usize],
        pub vxm: [[f64; 12usize]; 12usize],
        pub vyp: [[f64; 12usize]; 12usize],
        pub vym: [[f64; 12usize]; 12usize],
        pub vxp1: [[f64; 12usize]; 12usize],
        pub vxm1: [[f64; 12usize]; 12usize],
        pub vyp1: [[f64; 12usize]; 12usize],
        pub vym1: [[f64; 12usize]; 12usize],
        pub counter: ::std::os::raw::c_int,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN6Mesh2D5clearEv"]
        pub fn Mesh2D_clear(this: *mut root::Mesh2D);
    }
    extern "C" {
        #[doc = "! Set the x dimension size in samples."]
        #[link_name = "\u{1}_ZN6Mesh2D5setNXEs"]
        pub fn Mesh2D_setNX(this: *mut root::Mesh2D, lenX: ::std::os::raw::c_short);
    }
    extern "C" {
        #[doc = "! Set the y dimension size in samples."]
        #[link_name = "\u{1}_ZN6Mesh2D5setNYEs"]
        pub fn Mesh2D_setNY(this: *mut root::Mesh2D, lenY: ::std::os::raw::c_short);
    }
    extern "C" {
        #[doc = "! Set the x, y input position on a 0.0 - 1.0 scale."]
        #[link_name = "\u{1}_ZN6Mesh2D16setInputPositionEdd"]
        pub fn Mesh2D_setInputPosition(this: *mut root::Mesh2D, xFactor: f64, yFactor: f64);
    }
    extern "C" {
        #[doc = "! Set the loss filters gains (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN6Mesh2D8setDecayEd"]
        pub fn Mesh2D_setDecay(this: *mut root::Mesh2D, decayFactor: f64);
    }
    extern "C" {
        #[doc = "! Calculate and return the signal energy stored in the mesh."]
        #[link_name = "\u{1}_ZN6Mesh2D6energyEv"]
        pub fn Mesh2D_energy(this: *mut root::Mesh2D) -> f64;
    }
    extern "C" {
        #[doc = "! Input a sample to the mesh and compute one output sample."]
        #[link_name = "\u{1}_ZN6Mesh2D4tickEd"]
        pub fn Mesh2D_tick1(this: *mut root::Mesh2D, input: f64) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6Mesh2D5tick0Ev"]
        pub fn Mesh2D_tick0(this: *mut root::Mesh2D) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6Mesh2D5tick1Ev"]
        pub fn Mesh2D_tick11(this: *mut root::Mesh2D) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6Mesh2D9clearMeshEv"]
        pub fn Mesh2D_clearMesh(this: *mut root::Mesh2D);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the x and y dimensions in samples."]
        #[link_name = "\u{1}_ZN6Mesh2DC1Ess"]
        pub fn Mesh2D_Mesh2D(
            this: *mut root::Mesh2D,
            nX: ::std::os::raw::c_short,
            nY: ::std::os::raw::c_short,
        );
    }
    impl Mesh2D {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Mesh2D_clear(self)
        }
        #[inline]
        pub unsafe fn setNX(&mut self, lenX: ::std::os::raw::c_short) {
            Mesh2D_setNX(self, lenX)
        }
        #[inline]
        pub unsafe fn setNY(&mut self, lenY: ::std::os::raw::c_short) {
            Mesh2D_setNY(self, lenY)
        }
        #[inline]
        pub unsafe fn setInputPosition(&mut self, xFactor: f64, yFactor: f64) {
            Mesh2D_setInputPosition(self, xFactor, yFactor)
        }
        #[inline]
        pub unsafe fn setDecay(&mut self, decayFactor: f64) {
            Mesh2D_setDecay(self, decayFactor)
        }
        #[inline]
        pub unsafe fn energy(&mut self) -> f64 {
            Mesh2D_energy(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self, input: f64) -> f64 {
            Mesh2D_tick1(self, input)
        }
        #[inline]
        pub unsafe fn tick0(&mut self) -> f64 {
            Mesh2D_tick0(self)
        }
        #[inline]
        pub unsafe fn tick1(&mut self) -> f64 {
            Mesh2D_tick1(self)
        }
        #[inline]
        pub unsafe fn clearMesh(&mut self) {
            Mesh2D_clearMesh(self)
        }
        #[inline]
        pub unsafe fn new(nX: ::std::os::raw::c_short, nY: ::std::os::raw::c_short) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Mesh2D_Mesh2D(&mut __bindgen_tmp, nX, nY);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6Mesh2DD1Ev"]
        pub fn Mesh2D_Mesh2D_destructor(this: *mut root::Mesh2D);
    }
    extern "C" {
        #[doc = "! Impulse the mesh with the given amplitude (frequency ignored)."]
        #[link_name = "\u{1}_ZN6Mesh2D6noteOnEdd"]
        pub fn Mesh2D_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay) ... currently ignored."]
        #[link_name = "\u{1}_ZN6Mesh2D7noteOffEd"]
        pub fn Mesh2D_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample, without adding energy to the mesh."]
        #[link_name = "\u{1}_ZN6Mesh2D4tickEv"]
        pub fn Mesh2D_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN6Mesh2D13controlChangeEid"]
        pub fn Mesh2D_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Modal {
        pub _base: root::Instrmnt,
        pub m_vibratoGain: f64,
        pub m_vibratoFreq: f64,
        pub m_volume: f64,
        pub envelope: *mut root::Envelope,
        pub wave: *mut root::WvIn,
        pub filters: *mut root::BiQuad,
        pub onepole: *mut root::OnePole,
        pub vibrato: *mut root::WaveLoop,
        pub nModes: ::std::os::raw::c_int,
        pub vibratoGain: f64,
        pub masterGain: f64,
        pub directGain: f64,
        pub stickHardness: f64,
        pub strikePosition: f64,
        pub baseFrequency: f64,
        pub ratios: *mut f64,
        pub radii: *mut f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN5Modal5clearEv"]
        pub fn Modal_clear(this: *mut root::Modal);
    }
    extern "C" {
        #[doc = "! Set the ratio and radius for a specified mode filter."]
        #[link_name = "\u{1}_ZN5Modal17setRatioAndRadiusEidd"]
        pub fn Modal_setRatioAndRadius(
            this: *mut root::Modal,
            modeIndex: ::std::os::raw::c_int,
            ratio: f64,
            radius: f64,
        );
    }
    extern "C" {
        #[doc = "! Set the master gain."]
        #[link_name = "\u{1}_ZN5Modal13setMasterGainEd"]
        pub fn Modal_setMasterGain(this: *mut root::Modal, aGain: f64);
    }
    extern "C" {
        #[doc = "! Set the direct gain."]
        #[link_name = "\u{1}_ZN5Modal13setDirectGainEd"]
        pub fn Modal_setDirectGain(this: *mut root::Modal, aGain: f64);
    }
    extern "C" {
        #[doc = "! Set the gain for a specified mode filter."]
        #[link_name = "\u{1}_ZN5Modal11setModeGainEid"]
        pub fn Modal_setModeGain(
            this: *mut root::Modal,
            modeIndex: ::std::os::raw::c_int,
            gain: f64,
        );
    }
    extern "C" {
        #[doc = "! Damp modes with a given decay factor (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN5Modal4dampEd"]
        pub fn Modal_damp(this: *mut root::Modal, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the desired number of modes to create."]
        #[link_name = "\u{1}_ZN5ModalC2Ei"]
        pub fn Modal_Modal(this: *mut root::Modal, modes: ::std::os::raw::c_int);
    }
    impl Modal {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Modal_clear(self)
        }
        #[inline]
        pub unsafe fn setRatioAndRadius(
            &mut self,
            modeIndex: ::std::os::raw::c_int,
            ratio: f64,
            radius: f64,
        ) {
            Modal_setRatioAndRadius(self, modeIndex, ratio, radius)
        }
        #[inline]
        pub unsafe fn setMasterGain(&mut self, aGain: f64) {
            Modal_setMasterGain(self, aGain)
        }
        #[inline]
        pub unsafe fn setDirectGain(&mut self, aGain: f64) {
            Modal_setDirectGain(self, aGain)
        }
        #[inline]
        pub unsafe fn setModeGain(&mut self, modeIndex: ::std::os::raw::c_int, gain: f64) {
            Modal_setModeGain(self, modeIndex, gain)
        }
        #[inline]
        pub unsafe fn damp(&mut self, amplitude: f64) {
            Modal_damp(self, amplitude)
        }
        #[inline]
        pub unsafe fn new(modes: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Modal_Modal(&mut __bindgen_tmp, modes);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5ModalD1Ev"]
        pub fn Modal_Modal_destructor(this: *mut root::Modal);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN5Modal12setFrequencyEd"]
        pub fn Modal_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Initiate a strike with the given amplitude (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN5Modal6strikeEd"]
        pub fn Modal_strike(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN5Modal6noteOnEdd"]
        pub fn Modal_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN5Modal7noteOffEd"]
        pub fn Modal_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN5Modal4tickEv"]
        pub fn Modal_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ModalBar {
        pub _base: root::Modal,
    }
    extern "C" {
        #[doc = "! Set stick hardness (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8ModalBar16setStickHardnessEd"]
        pub fn ModalBar_setStickHardness(this: *mut root::ModalBar, hardness: f64);
    }
    extern "C" {
        #[doc = "! Set stick position (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8ModalBar17setStrikePositionEd"]
        pub fn ModalBar_setStrikePosition(this: *mut root::ModalBar, position: f64);
    }
    extern "C" {
        #[doc = "! Select a bar preset (currently modulo 9)."]
        #[link_name = "\u{1}_ZN8ModalBar9setPresetEi"]
        pub fn ModalBar_setPreset(this: *mut root::ModalBar, preset: ::std::os::raw::c_int);
    }
    extern "C" {
        #[doc = "! Set the modulation (vibrato) depth."]
        #[link_name = "\u{1}_ZN8ModalBar18setModulationDepthEd"]
        pub fn ModalBar_setModulationDepth(this: *mut root::ModalBar, mDepth: f64);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8ModalBarC1Ev"]
        pub fn ModalBar_ModalBar(this: *mut root::ModalBar);
    }
    impl ModalBar {
        #[inline]
        pub unsafe fn setStickHardness(&mut self, hardness: f64) {
            ModalBar_setStickHardness(self, hardness)
        }
        #[inline]
        pub unsafe fn setStrikePosition(&mut self, position: f64) {
            ModalBar_setStrikePosition(self, position)
        }
        #[inline]
        pub unsafe fn setPreset(&mut self, preset: ::std::os::raw::c_int) {
            ModalBar_setPreset(self, preset)
        }
        #[inline]
        pub unsafe fn setModulationDepth(&mut self, mDepth: f64) {
            ModalBar_setModulationDepth(self, mDepth)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ModalBar_ModalBar(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8ModalBarD1Ev"]
        pub fn ModalBar_ModalBar_destructor(this: *mut root::ModalBar);
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8ModalBar13controlChangeEid"]
        pub fn ModalBar_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct SubNoise {
        pub _base: root::Noise,
        pub counter: ::std::os::raw::c_int,
        pub rate: ::std::os::raw::c_int,
    }
    extern "C" {
        #[doc = "! Return the current sub-sampling rate."]
        #[link_name = "\u{1}_ZNK8SubNoise7subRateEv"]
        pub fn SubNoise_subRate(this: *const root::SubNoise) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Set the sub-sampling rate."]
        #[link_name = "\u{1}_ZN8SubNoise7setRateEi"]
        pub fn SubNoise_setRate(this: *mut root::SubNoise, subRate: ::std::os::raw::c_int);
    }
    extern "C" {
        #[doc = "! Default constructor sets sub-sample rate to 16."]
        #[link_name = "\u{1}_ZN8SubNoiseC1Ei"]
        pub fn SubNoise_SubNoise(this: *mut root::SubNoise, subRate: ::std::os::raw::c_int);
    }
    impl SubNoise {
        #[inline]
        pub unsafe fn subRate(&self) -> ::std::os::raw::c_int {
            SubNoise_subRate(self)
        }
        #[inline]
        pub unsafe fn setRate(&mut self, subRate: ::std::os::raw::c_int) {
            SubNoise_setRate(self, subRate)
        }
        #[inline]
        pub unsafe fn new(subRate: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SubNoise_SubNoise(&mut __bindgen_tmp, subRate);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8SubNoiseD1Ev"]
        pub fn SubNoise_SubNoise_destructor(this: *mut root::SubNoise);
    }
    extern "C" {
        #[doc = "! Return a sub-sampled random number between -1.0 and 1.0."]
        #[link_name = "\u{1}_ZN8SubNoise4tickEv"]
        pub fn SubNoise_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Modulate {
        pub _base: root::Stk,
        pub vibrato: *mut root::WaveLoop,
        pub noise: *mut root::SubNoise,
        pub filter: *mut root::OnePole,
        pub vibratoGain: f64,
        pub randomGain: f64,
        pub lastOutput: f64,
    }
    extern "C" {
        #[doc = "! Reset internal state."]
        #[link_name = "\u{1}_ZN8Modulate5resetEv"]
        pub fn Modulate_reset(this: *mut root::Modulate);
    }
    extern "C" {
        #[doc = "! Set the periodic (vibrato) rate or frequency in Hz."]
        #[link_name = "\u{1}_ZN8Modulate14setVibratoRateEd"]
        pub fn Modulate_setVibratoRate(this: *mut root::Modulate, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the periodic (vibrato) gain."]
        #[link_name = "\u{1}_ZN8Modulate14setVibratoGainEd"]
        pub fn Modulate_setVibratoGain(this: *mut root::Modulate, aGain: f64);
    }
    extern "C" {
        #[doc = "! Set the random modulation gain."]
        #[link_name = "\u{1}_ZN8Modulate13setRandomGainEd"]
        pub fn Modulate_setRandomGain(this: *mut root::Modulate, aGain: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8Modulate4tickEv"]
        pub fn Modulate_tick(this: *mut root::Modulate) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK8Modulate7lastOutEv"]
        pub fn Modulate_lastOut(this: *const root::Modulate) -> f64;
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8ModulateC1Ev"]
        pub fn Modulate_Modulate(this: *mut root::Modulate);
    }
    impl Modulate {
        #[inline]
        pub unsafe fn reset(&mut self) {
            Modulate_reset(self)
        }
        #[inline]
        pub unsafe fn setVibratoRate(&mut self, aRate: f64) {
            Modulate_setVibratoRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setVibratoGain(&mut self, aGain: f64) {
            Modulate_setVibratoGain(self, aGain)
        }
        #[inline]
        pub unsafe fn setRandomGain(&mut self, aGain: f64) {
            Modulate_setRandomGain(self, aGain)
        }
        #[inline]
        pub unsafe fn tick(&mut self) -> f64 {
            Modulate_tick(self)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Modulate_lastOut(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Modulate_Modulate(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8ModulateD1Ev"]
        pub fn Modulate_Modulate_destructor(this: *mut root::Modulate);
    }
    extern "C" {
        #[doc = "! Return \\e vectorSize outputs in \\e vector."]
        #[link_name = "\u{1}_ZN8Modulate4tickEPdj"]
        pub fn Modulate_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Sampler {
        pub _base: root::Instrmnt,
        pub adsr: *mut root::ADSR,
        pub attacks: [*mut root::WvIn; 5usize],
        pub loops: [*mut root::WaveLoop; 5usize],
        pub filter: *mut root::OnePole,
        pub baseFrequency: f64,
        pub attackRatios: [f64; 5usize],
        pub loopRatios: [f64; 5usize],
        pub attackGain: f64,
        pub loopGain: f64,
        pub whichOne: ::std::os::raw::c_int,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN7Sampler5clearEv"]
        pub fn Sampler_clear(this: *mut root::Sampler);
    }
    extern "C" {
        #[doc = "! Initiate the envelopes with a key-on event and reset the attack waves."]
        #[link_name = "\u{1}_ZN7Sampler5keyOnEv"]
        pub fn Sampler_keyOn(this: *mut root::Sampler);
    }
    extern "C" {
        #[doc = "! Signal a key-off event to the envelopes."]
        #[link_name = "\u{1}_ZN7Sampler6keyOffEv"]
        pub fn Sampler_keyOff(this: *mut root::Sampler);
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN7SamplerC2Ev"]
        pub fn Sampler_Sampler(this: *mut root::Sampler);
    }
    impl Sampler {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Sampler_clear(self)
        }
        #[inline]
        pub unsafe fn keyOn(&mut self) {
            Sampler_keyOn(self)
        }
        #[inline]
        pub unsafe fn keyOff(&mut self) {
            Sampler_keyOff(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Sampler_Sampler(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7SamplerD1Ev"]
        pub fn Sampler_Sampler_destructor(this: *mut root::Sampler);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN7Sampler7noteOffEd"]
        pub fn Sampler_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN7Sampler4tickEv"]
        pub fn Sampler_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Moog {
        pub _base: root::Sampler,
        pub m_vibratoFreq: f64,
        pub m_vibratoGain: f64,
        pub m_volume: f64,
        pub filters: [*mut root::FormSwep; 2usize],
        pub modDepth: f64,
        pub filterQ: f64,
        pub filterRate: f64,
    }
    extern "C" {
        #[doc = "! Set the modulation (vibrato) speed in Hz."]
        #[link_name = "\u{1}_ZN4Moog18setModulationSpeedEd"]
        pub fn Moog_setModulationSpeed(this: *mut root::Moog, mSpeed: f64);
    }
    extern "C" {
        #[doc = "! Set the modulation (vibrato) depth."]
        #[link_name = "\u{1}_ZN4Moog18setModulationDepthEd"]
        pub fn Moog_setModulationDepth(this: *mut root::Moog, mDepth: f64);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN4MoogC1Ev"]
        pub fn Moog_Moog(this: *mut root::Moog);
    }
    impl Moog {
        #[inline]
        pub unsafe fn setModulationSpeed(&mut self, mSpeed: f64) {
            Moog_setModulationSpeed(self, mSpeed)
        }
        #[inline]
        pub unsafe fn setModulationDepth(&mut self, mDepth: f64) {
            Moog_setModulationDepth(self, mDepth)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Moog_Moog(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN4MoogD1Ev"]
        pub fn Moog_Moog_destructor(this: *mut root::Moog);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN4Moog12setFrequencyEd"]
        pub fn Moog_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN4Moog6noteOnEdd"]
        pub fn Moog_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4Moog6noteOnEd"]
        pub fn Moog_noteOn1(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN4Moog4tickEv"]
        pub fn Moog_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN4Moog13controlChangeEid"]
        pub fn Moog_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct NRev {
        pub _base: root::Reverb,
        pub allpassDelays: [*mut root::Delay; 8usize],
        pub combDelays: [*mut root::Delay; 6usize],
        pub allpassCoefficient: f64,
        pub combCoefficient: [f64; 6usize],
        pub lowpassState: f64,
    }
    extern "C" {
        #[doc = "! Class constructor taking a T60 decay time argument."]
        #[link_name = "\u{1}_ZN4NRevC1Ed"]
        pub fn NRev_NRev(this: *mut root::NRev, T60: f64);
    }
    impl NRev {
        #[inline]
        pub unsafe fn new(T60: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            NRev_NRev(&mut __bindgen_tmp, T60);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN4NRevD1Ev"]
        pub fn NRev_NRev_destructor(this: *mut root::NRev);
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN4NRev5clearEv"]
        pub fn NRev_clear(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN4NRev4tickEd"]
        pub fn NRev_tick(this: *mut ::std::os::raw::c_void, input: f64) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct PRCRev {
        pub _base: root::Reverb,
        pub allpassDelays: [*mut root::Delay; 2usize],
        pub combDelays: [*mut root::Delay; 2usize],
        pub allpassCoefficient: f64,
        pub combCoefficient: [f64; 2usize],
    }
    extern "C" {
        #[doc = "! Class constructor taking a T60 decay time argument."]
        #[link_name = "\u{1}_ZN6PRCRevC1Ed"]
        pub fn PRCRev_PRCRev(this: *mut root::PRCRev, T60: f64);
    }
    impl PRCRev {
        #[inline]
        pub unsafe fn new(T60: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PRCRev_PRCRev(&mut __bindgen_tmp, T60);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6PRCRevD1Ev"]
        pub fn PRCRev_PRCRev_destructor(this: *mut root::PRCRev);
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN6PRCRev5clearEv"]
        pub fn PRCRev_clear(this: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN6PRCRev4tickEd"]
        pub fn PRCRev_tick(this: *mut ::std::os::raw::c_void, input: f64) -> f64;
    }
    #[repr(C)]
    pub struct PercFlut {
        pub _base: root::FM,
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8PercFlutC1Ev"]
        pub fn PercFlut_PercFlut(this: *mut root::PercFlut);
    }
    impl PercFlut {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PercFlut_PercFlut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8PercFlutD1Ev"]
        pub fn PercFlut_PercFlut_destructor(this: *mut root::PercFlut);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8PercFlut12setFrequencyEd"]
        pub fn PercFlut_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8PercFlut6noteOnEdd"]
        pub fn PercFlut_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8PercFlut4tickEv"]
        pub fn PercFlut_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Phonemes {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Phonemes12phonemeNamesE"]
        pub static mut Phonemes_phonemeNames: [[::std::os::raw::c_char; 4usize]; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Phonemes12phonemeGainsE"]
        pub static mut Phonemes_phonemeGains: [[f64; 2usize]; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Phonemes17phonemeParametersE"]
        pub static mut Phonemes_phonemeParameters: [[[f64; 3usize]; 4usize]; 0usize];
    }
    extern "C" {
        #[doc = "! Returns the phoneme name for the given index (0-31)."]
        #[link_name = "\u{1}_ZN8Phonemes4nameEj"]
        pub fn Phonemes_name(index: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[doc = "! Returns the voiced component gain for the given phoneme index (0-31)."]
        #[link_name = "\u{1}_ZN8Phonemes9voiceGainEj"]
        pub fn Phonemes_voiceGain(index: ::std::os::raw::c_uint) -> f64;
    }
    extern "C" {
        #[doc = "! Returns the unvoiced component gain for the given phoneme index (0-31)."]
        #[link_name = "\u{1}_ZN8Phonemes9noiseGainEj"]
        pub fn Phonemes_noiseGain(index: ::std::os::raw::c_uint) -> f64;
    }
    extern "C" {
        #[doc = "! Returns the formant frequency for the given phoneme index (0-31) and partial (0-3)."]
        #[link_name = "\u{1}_ZN8Phonemes16formantFrequencyEjj"]
        pub fn Phonemes_formantFrequency(
            index: ::std::os::raw::c_uint,
            partial: ::std::os::raw::c_uint,
        ) -> f64;
    }
    extern "C" {
        #[doc = "! Returns the formant radius for the given phoneme index (0-31) and partial (0-3)."]
        #[link_name = "\u{1}_ZN8Phonemes13formantRadiusEjj"]
        pub fn Phonemes_formantRadius(
            index: ::std::os::raw::c_uint,
            partial: ::std::os::raw::c_uint,
        ) -> f64;
    }
    extern "C" {
        #[doc = "! Returns the formant gain for the given phoneme index (0-31) and partial (0-3)."]
        #[link_name = "\u{1}_ZN8Phonemes11formantGainEjj"]
        pub fn Phonemes_formantGain(
            index: ::std::os::raw::c_uint,
            partial: ::std::os::raw::c_uint,
        ) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8PhonemesC1Ev"]
        pub fn Phonemes_Phonemes(this: *mut root::Phonemes);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8PhonemesD1Ev"]
        pub fn Phonemes_Phonemes_destructor(this: *mut root::Phonemes);
    }
    impl Phonemes {
        #[inline]
        pub unsafe fn name(index: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char {
            Phonemes_name(index)
        }
        #[inline]
        pub unsafe fn voiceGain(index: ::std::os::raw::c_uint) -> f64 {
            Phonemes_voiceGain(index)
        }
        #[inline]
        pub unsafe fn noiseGain(index: ::std::os::raw::c_uint) -> f64 {
            Phonemes_noiseGain(index)
        }
        #[inline]
        pub unsafe fn formantFrequency(
            index: ::std::os::raw::c_uint,
            partial: ::std::os::raw::c_uint,
        ) -> f64 {
            Phonemes_formantFrequency(index, partial)
        }
        #[inline]
        pub unsafe fn formantRadius(
            index: ::std::os::raw::c_uint,
            partial: ::std::os::raw::c_uint,
        ) -> f64 {
            Phonemes_formantRadius(index, partial)
        }
        #[inline]
        pub unsafe fn formantGain(
            index: ::std::os::raw::c_uint,
            partial: ::std::os::raw::c_uint,
        ) -> f64 {
            Phonemes_formantGain(index, partial)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Phonemes_Phonemes(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Phonemes_Phonemes_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct PitShift {
        pub _base: root::Stk,
        pub m_vibratoGain: f64,
        pub m_vibratoFreq: f64,
        pub m_volume: f64,
        pub delayLine: [*mut root::DelayL; 2usize],
        pub lastOutput: f64,
        pub delay: [f64; 2usize],
        pub env: [f64; 2usize],
        pub effectMix: f64,
        pub rate: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8PitShift5clearEv"]
        pub fn PitShift_clear(this: *mut root::PitShift);
    }
    extern "C" {
        #[doc = "! Set the pitch shift factor (1.0 produces no shift)."]
        #[link_name = "\u{1}_ZN8PitShift8setShiftEd"]
        pub fn PitShift_setShift(this: *mut root::PitShift, shift: f64);
    }
    extern "C" {
        #[doc = "! Set the mixture of input and processed levels in the output (0.0 = input only, 1.0 = processed only)."]
        #[link_name = "\u{1}_ZN8PitShift12setEffectMixEd"]
        pub fn PitShift_setEffectMix(this: *mut root::PitShift, mix: f64);
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK8PitShift7lastOutEv"]
        pub fn PitShift_lastOut(this: *const root::PitShift) -> f64;
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8PitShift4tickEd"]
        pub fn PitShift_tick(this: *mut root::PitShift, input: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN8PitShift4tickEPdj"]
        pub fn PitShift_tick1(
            this: *mut root::PitShift,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8PitShiftC1Ev"]
        pub fn PitShift_PitShift(this: *mut root::PitShift);
    }
    impl PitShift {
        #[inline]
        pub unsafe fn clear(&mut self) {
            PitShift_clear(self)
        }
        #[inline]
        pub unsafe fn setShift(&mut self, shift: f64) {
            PitShift_setShift(self, shift)
        }
        #[inline]
        pub unsafe fn setEffectMix(&mut self, mix: f64) {
            PitShift_setEffectMix(self, mix)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            PitShift_lastOut(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self, input: f64) -> f64 {
            PitShift_tick(self, input)
        }
        #[inline]
        pub unsafe fn tick1(
            &mut self,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64 {
            PitShift_tick1(self, vector, vectorSize)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            PitShift_PitShift(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8PitShiftD1Ev"]
        pub fn PitShift_PitShift_destructor(this: *mut root::PitShift);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Plucked {
        pub _base: root::Instrmnt,
        pub delayLine: *mut root::DelayA,
        pub loopFilter: *mut root::OneZero,
        pub pickFilter: *mut root::OnePole,
        pub noise: *mut root::Noise,
        pub length: ::std::os::raw::c_long,
        pub loopGain: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN7Plucked5clearEv"]
        pub fn Plucked_clear(this: *mut root::Plucked);
    }
    extern "C" {
        #[doc = "! Pluck the string with the given amplitude using the current frequency."]
        #[link_name = "\u{1}_ZN7Plucked5pluckEd"]
        pub fn Plucked_pluck(this: *mut root::Plucked, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN7PluckedC1Ed"]
        pub fn Plucked_Plucked(this: *mut root::Plucked, lowestFrequency: f64);
    }
    impl Plucked {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Plucked_clear(self)
        }
        #[inline]
        pub unsafe fn pluck(&mut self, amplitude: f64) {
            Plucked_pluck(self, amplitude)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Plucked_Plucked(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7PluckedD1Ev"]
        pub fn Plucked_Plucked_destructor(this: *mut root::Plucked);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN7Plucked12setFrequencyEd"]
        pub fn Plucked_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN7Plucked6noteOnEdd"]
        pub fn Plucked_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN7Plucked7noteOffEd"]
        pub fn Plucked_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN7Plucked4tickEv"]
        pub fn Plucked_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Resonate {
        pub _base: root::Instrmnt,
        pub adsr: *mut root::ADSR,
        pub filter: *mut root::BiQuad,
        pub noise: *mut root::Noise,
        pub poleFrequency: f64,
        pub poleRadius: f64,
        pub zeroFrequency: f64,
        pub zeroRadius: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8Resonate5clearEv"]
        pub fn Resonate_clear(this: *mut root::Resonate);
    }
    extern "C" {
        #[doc = "! Set the filter for a resonance at the given frequency (Hz) and radius."]
        #[link_name = "\u{1}_ZN8Resonate12setResonanceEdd"]
        pub fn Resonate_setResonance(this: *mut root::Resonate, frequency: f64, radius: f64);
    }
    extern "C" {
        #[doc = "! Set the filter for a notch at the given frequency (Hz) and radius."]
        #[link_name = "\u{1}_ZN8Resonate8setNotchEdd"]
        pub fn Resonate_setNotch(this: *mut root::Resonate, frequency: f64, radius: f64);
    }
    extern "C" {
        #[doc = "! Set the filter zero coefficients for contant resonance gain."]
        #[link_name = "\u{1}_ZN8Resonate18setEqualGainZeroesEv"]
        pub fn Resonate_setEqualGainZeroes(this: *mut root::Resonate);
    }
    extern "C" {
        #[doc = "! Initiate the envelope with a key-on event."]
        #[link_name = "\u{1}_ZN8Resonate5keyOnEv"]
        pub fn Resonate_keyOn(this: *mut root::Resonate);
    }
    extern "C" {
        #[doc = "! Signal a key-off event to the envelope."]
        #[link_name = "\u{1}_ZN8Resonate6keyOffEv"]
        pub fn Resonate_keyOff(this: *mut root::Resonate);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8ResonateC1Ev"]
        pub fn Resonate_Resonate(this: *mut root::Resonate);
    }
    impl Resonate {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Resonate_clear(self)
        }
        #[inline]
        pub unsafe fn setResonance(&mut self, frequency: f64, radius: f64) {
            Resonate_setResonance(self, frequency, radius)
        }
        #[inline]
        pub unsafe fn setNotch(&mut self, frequency: f64, radius: f64) {
            Resonate_setNotch(self, frequency, radius)
        }
        #[inline]
        pub unsafe fn setEqualGainZeroes(&mut self) {
            Resonate_setEqualGainZeroes(self)
        }
        #[inline]
        pub unsafe fn keyOn(&mut self) {
            Resonate_keyOn(self)
        }
        #[inline]
        pub unsafe fn keyOff(&mut self) {
            Resonate_keyOff(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Resonate_Resonate(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8ResonateD1Ev"]
        pub fn Resonate_Resonate_destructor(this: *mut root::Resonate);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8Resonate6noteOnEdd"]
        pub fn Resonate_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8Resonate7noteOffEd"]
        pub fn Resonate_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8Resonate4tickEv"]
        pub fn Resonate_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8Resonate13controlChangeEid"]
        pub fn Resonate_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    pub struct Rhodey {
        pub _base: root::FM,
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN6RhodeyC1Ev"]
        pub fn Rhodey_Rhodey(this: *mut root::Rhodey);
    }
    impl Rhodey {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Rhodey_Rhodey(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6RhodeyD1Ev"]
        pub fn Rhodey_Rhodey_destructor(this: *mut root::Rhodey);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN6Rhodey12setFrequencyEd"]
        pub fn Rhodey_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN6Rhodey6noteOnEdd"]
        pub fn Rhodey_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN6Rhodey4tickEv"]
        pub fn Rhodey_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    pub struct SKINI {
        pub _base: root::Stk,
        pub myFile: *mut root::FILE,
        pub messageType: ::std::os::raw::c_long,
        pub msgTypeString: [::std::os::raw::c_char; 64usize],
        pub channel: ::std::os::raw::c_long,
        pub deltaTime: f64,
        pub byteTwo: f64,
        pub byteThree: f64,
        pub byteTwoInt: ::std::os::raw::c_long,
        pub byteThreeInt: ::std::os::raw::c_long,
        pub remainderString: [::std::os::raw::c_char; 1024usize],
        pub whatString: [::std::os::raw::c_char; 1024usize],
    }
    extern "C" {
        #[doc = "! Attempt to parse the given string, returning the message type."]
        #[doc = "*!"]
        #[doc = "A type value equal to zero indicates an invalid message."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5SKINI9parseThisEPc"]
        pub fn SKINI_parseThis(
            this: *mut root::SKINI,
            aString: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = "! Parse the next message (if a file is loaded) and return the message type."]
        #[doc = "*!"]
        #[doc = "A negative value is returned when the file end is reached."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5SKINI11nextMessageEv"]
        pub fn SKINI_nextMessage(this: *mut root::SKINI) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = "! Return the current message type."]
        #[link_name = "\u{1}_ZNK5SKINI7getTypeEv"]
        pub fn SKINI_getType(this: *const root::SKINI) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = "! Return the current message channel value."]
        #[link_name = "\u{1}_ZNK5SKINI10getChannelEv"]
        pub fn SKINI_getChannel(this: *const root::SKINI) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = "! Return the current message delta time value (in seconds)."]
        #[link_name = "\u{1}_ZNK5SKINI8getDeltaEv"]
        pub fn SKINI_getDelta(this: *const root::SKINI) -> f64;
    }
    extern "C" {
        #[doc = "! Return the current message byte two value."]
        #[link_name = "\u{1}_ZNK5SKINI10getByteTwoEv"]
        pub fn SKINI_getByteTwo(this: *const root::SKINI) -> f64;
    }
    extern "C" {
        #[doc = "! Return the current message byte three value."]
        #[link_name = "\u{1}_ZNK5SKINI12getByteThreeEv"]
        pub fn SKINI_getByteThree(this: *const root::SKINI) -> f64;
    }
    extern "C" {
        #[doc = "! Return the current message byte two value (integer)."]
        #[link_name = "\u{1}_ZNK5SKINI13getByteTwoIntEv"]
        pub fn SKINI_getByteTwoInt(this: *const root::SKINI) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = "! Return the current message byte three value (integer)."]
        #[link_name = "\u{1}_ZNK5SKINI15getByteThreeIntEv"]
        pub fn SKINI_getByteThreeInt(this: *const root::SKINI) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = "! Return remainder string after parsing."]
        #[link_name = "\u{1}_ZN5SKINI18getRemainderStringEv"]
        pub fn SKINI_getRemainderString(this: *mut root::SKINI) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[doc = "! Return the message type as a string."]
        #[link_name = "\u{1}_ZN5SKINI20getMessageTypeStringEv"]
        pub fn SKINI_getMessageTypeString(this: *mut root::SKINI) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[doc = "! Return the SKINI type string for the given type value."]
        #[link_name = "\u{1}_ZN5SKINI13whatsThisTypeEl"]
        pub fn SKINI_whatsThisType(
            this: *mut root::SKINI,
            type_: ::std::os::raw::c_long,
        ) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[doc = "! Return the SKINI controller string for the given controller number."]
        #[link_name = "\u{1}_ZN5SKINI19whatsThisControllerEl"]
        pub fn SKINI_whatsThisController(
            this: *mut root::SKINI,
            number: ::std::os::raw::c_long,
        ) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[doc = "! Default constructor used for parsing messages received externally."]
        #[link_name = "\u{1}_ZN5SKINIC1Ev"]
        pub fn SKINI_SKINI(this: *mut root::SKINI);
    }
    extern "C" {
        #[doc = "! Overloaded constructor taking a SKINI formatted scorefile."]
        #[link_name = "\u{1}_ZN5SKINIC1EPc"]
        pub fn SKINI_SKINI1(this: *mut root::SKINI, fileName: *mut ::std::os::raw::c_char);
    }
    impl SKINI {
        #[inline]
        pub unsafe fn parseThis(
            &mut self,
            aString: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_long {
            SKINI_parseThis(self, aString)
        }
        #[inline]
        pub unsafe fn nextMessage(&mut self) -> ::std::os::raw::c_long {
            SKINI_nextMessage(self)
        }
        #[inline]
        pub unsafe fn getType(&self) -> ::std::os::raw::c_long {
            SKINI_getType(self)
        }
        #[inline]
        pub unsafe fn getChannel(&self) -> ::std::os::raw::c_long {
            SKINI_getChannel(self)
        }
        #[inline]
        pub unsafe fn getDelta(&self) -> f64 {
            SKINI_getDelta(self)
        }
        #[inline]
        pub unsafe fn getByteTwo(&self) -> f64 {
            SKINI_getByteTwo(self)
        }
        #[inline]
        pub unsafe fn getByteThree(&self) -> f64 {
            SKINI_getByteThree(self)
        }
        #[inline]
        pub unsafe fn getByteTwoInt(&self) -> ::std::os::raw::c_long {
            SKINI_getByteTwoInt(self)
        }
        #[inline]
        pub unsafe fn getByteThreeInt(&self) -> ::std::os::raw::c_long {
            SKINI_getByteThreeInt(self)
        }
        #[inline]
        pub unsafe fn getRemainderString(&mut self) -> *const ::std::os::raw::c_char {
            SKINI_getRemainderString(self)
        }
        #[inline]
        pub unsafe fn getMessageTypeString(&mut self) -> *const ::std::os::raw::c_char {
            SKINI_getMessageTypeString(self)
        }
        #[inline]
        pub unsafe fn whatsThisType(
            &mut self,
            type_: ::std::os::raw::c_long,
        ) -> *const ::std::os::raw::c_char {
            SKINI_whatsThisType(self, type_)
        }
        #[inline]
        pub unsafe fn whatsThisController(
            &mut self,
            number: ::std::os::raw::c_long,
        ) -> *const ::std::os::raw::c_char {
            SKINI_whatsThisController(self, number)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SKINI_SKINI(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(fileName: *mut ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SKINI_SKINI1(&mut __bindgen_tmp, fileName);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor"]
        #[link_name = "\u{1}_ZN5SKINID1Ev"]
        pub fn SKINI_SKINI_destructor(this: *mut root::SKINI);
    }
    extern "C" {
        #[link_name = "\u{1}_ZL10Midi2Pitch"]
        pub static mut Midi2Pitch: [f64; 129usize];
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Saxofony {
        pub _base: root::Instrmnt,
        pub m_rate: f64,
        pub m_stiffness: f64,
        pub m_aperture: f64,
        pub m_noiseGain: f64,
        pub m_vibratoGain: f64,
        pub m_pressure: f64,
        pub delays: [*mut root::DelayL; 2usize],
        pub reedTable: *mut root::ReedTabl,
        pub filter: *mut root::OneZero,
        pub envelope: *mut root::Envelope,
        pub noise: *mut root::Noise,
        pub vibrato: *mut root::WaveLoop,
        pub length: ::std::os::raw::c_long,
        pub outputGain: f64,
        pub noiseGain: f64,
        pub vibratoGain: f64,
        pub position: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8Saxofony5clearEv"]
        pub fn Saxofony_clear(this: *mut root::Saxofony);
    }
    extern "C" {
        #[doc = "! Set the \"blowing\" position between the air column terminations (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8Saxofony15setBlowPositionEd"]
        pub fn Saxofony_setBlowPosition(this: *mut root::Saxofony, aPosition: f64);
    }
    extern "C" {
        #[doc = "! Apply breath pressure to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN8Saxofony12startBlowingEdd"]
        pub fn Saxofony_startBlowing(this: *mut root::Saxofony, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease breath pressure with given rate of decrease."]
        #[link_name = "\u{1}_ZN8Saxofony11stopBlowingEd"]
        pub fn Saxofony_stopBlowing(this: *mut root::Saxofony, rate: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN8SaxofonyC1Ed"]
        pub fn Saxofony_Saxofony(this: *mut root::Saxofony, lowestFrequency: f64);
    }
    impl Saxofony {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Saxofony_clear(self)
        }
        #[inline]
        pub unsafe fn setBlowPosition(&mut self, aPosition: f64) {
            Saxofony_setBlowPosition(self, aPosition)
        }
        #[inline]
        pub unsafe fn startBlowing(&mut self, amplitude: f64, rate: f64) {
            Saxofony_startBlowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBlowing(&mut self, rate: f64) {
            Saxofony_stopBlowing(self, rate)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Saxofony_Saxofony(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8SaxofonyD1Ev"]
        pub fn Saxofony_Saxofony_destructor(this: *mut root::Saxofony);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8Saxofony12setFrequencyEd"]
        pub fn Saxofony_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8Saxofony6noteOnEdd"]
        pub fn Saxofony_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8Saxofony7noteOffEd"]
        pub fn Saxofony_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8Saxofony4tickEv"]
        pub fn Saxofony_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8Saxofony13controlChangeEid"]
        pub fn Saxofony_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Shakers {
        pub _base: root::Instrmnt,
        pub m_noteNum: ::std::os::raw::c_int,
        pub freq: f64,
        pub m_energy: f64,
        pub m_decay: f64,
        pub m_objects: f64,
        pub instType: ::std::os::raw::c_int,
        pub ratchetPos: ::std::os::raw::c_int,
        pub lastRatchetPos: ::std::os::raw::c_int,
        pub shakeEnergy: f64,
        pub inputs: [f64; 8usize],
        pub outputs: [[f64; 2usize]; 8usize],
        pub coeffs: [[f64; 2usize]; 8usize],
        pub sndLevel: f64,
        pub baseGain: f64,
        pub gains: [f64; 8usize],
        pub nFreqs: ::std::os::raw::c_int,
        pub t_center_freqs: [f64; 8usize],
        pub center_freqs: [f64; 8usize],
        pub resons: [f64; 8usize],
        pub freq_rand: [f64; 8usize],
        pub freqalloc: [::std::os::raw::c_int; 8usize],
        pub soundDecay: f64,
        pub systemDecay: f64,
        pub nObjects: f64,
        pub collLikely: f64,
        pub totalEnergy: f64,
        pub ratchet: f64,
        pub ratchetDelta: f64,
        pub finalZ: [f64; 3usize],
        pub finalZCoeffs: [f64; 3usize],
        pub defObjs: [f64; 24usize],
        pub defDecays: [f64; 24usize],
        pub decayScale: [f64; 24usize],
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers9setupNameEPc"]
        pub fn Shakers_setupName(
            this: *mut root::Shakers,
            instr: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers8setupNumEi"]
        pub fn Shakers_setupNum(
            this: *mut root::Shakers,
            inst: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers15setFreqAndResonEidd"]
        pub fn Shakers_setFreqAndReson(
            this: *mut root::Shakers,
            which: ::std::os::raw::c_int,
            freq: f64,
            reson: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers9setDecaysEdd"]
        pub fn Shakers_setDecays(this: *mut root::Shakers, sndDecay: f64, sysDecay: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers10setFinalZsEddd"]
        pub fn Shakers_setFinalZs(this: *mut root::Shakers, z0: f64, z1: f64, z2: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers10wuter_tickEv"]
        pub fn Shakers_wuter_tick(this: *mut root::Shakers) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers10tbamb_tickEv"]
        pub fn Shakers_tbamb_tick(this: *mut root::Shakers) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers12ratchet_tickEv"]
        pub fn Shakers_ratchet_tick(this: *mut root::Shakers) -> f64;
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN7ShakersC1Ev"]
        pub fn Shakers_Shakers(this: *mut root::Shakers);
    }
    impl Shakers {
        #[inline]
        pub unsafe fn setupName(
            &mut self,
            instr: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int {
            Shakers_setupName(self, instr)
        }
        #[inline]
        pub unsafe fn setupNum(&mut self, inst: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
            Shakers_setupNum(self, inst)
        }
        #[inline]
        pub unsafe fn setFreqAndReson(
            &mut self,
            which: ::std::os::raw::c_int,
            freq: f64,
            reson: f64,
        ) -> ::std::os::raw::c_int {
            Shakers_setFreqAndReson(self, which, freq, reson)
        }
        #[inline]
        pub unsafe fn setDecays(&mut self, sndDecay: f64, sysDecay: f64) {
            Shakers_setDecays(self, sndDecay, sysDecay)
        }
        #[inline]
        pub unsafe fn setFinalZs(&mut self, z0: f64, z1: f64, z2: f64) {
            Shakers_setFinalZs(self, z0, z1, z2)
        }
        #[inline]
        pub unsafe fn wuter_tick(&mut self) -> f64 {
            Shakers_wuter_tick(self)
        }
        #[inline]
        pub unsafe fn tbamb_tick(&mut self) -> f64 {
            Shakers_tbamb_tick(self)
        }
        #[inline]
        pub unsafe fn ratchet_tick(&mut self) -> f64 {
            Shakers_ratchet_tick(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Shakers_Shakers(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7ShakersD1Ev"]
        pub fn Shakers_Shakers_destructor(this: *mut root::Shakers);
    }
    extern "C" {
        #[doc = "! Start a note with the given instrument and amplitude."]
        #[doc = "*!"]
        #[doc = "Use the instrument numbers above, converted to frequency values"]
        #[doc = "as if MIDI note numbers, to select a particular instrument."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7Shakers9ck_noteOnEd"]
        pub fn Shakers_ck_noteOn(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Shakers6noteOnEdd"]
        pub fn Shakers_noteOn(this: *mut ::std::os::raw::c_void, instrument: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN7Shakers7noteOffEd"]
        pub fn Shakers_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN7Shakers4tickEv"]
        pub fn Shakers_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN7Shakers13controlChangeEid"]
        pub fn Shakers_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Simple {
        pub _base: root::Instrmnt,
        pub adsr: *mut root::ADSR,
        pub loop_: *mut root::WaveLoop,
        pub filter: *mut root::OnePole,
        pub biquad: *mut root::BiQuad,
        pub noise: *mut root::Noise,
        pub baseFrequency: f64,
        pub loopGain: f64,
    }
    extern "C" {
        #[doc = "! Clear internal states."]
        #[link_name = "\u{1}_ZN6Simple5clearEv"]
        pub fn Simple_clear(this: *mut root::Simple);
    }
    extern "C" {
        #[doc = "! Start envelope toward \"on\" target."]
        #[link_name = "\u{1}_ZN6Simple5keyOnEv"]
        pub fn Simple_keyOn(this: *mut root::Simple);
    }
    extern "C" {
        #[doc = "! Start envelope toward \"off\" target."]
        #[link_name = "\u{1}_ZN6Simple6keyOffEv"]
        pub fn Simple_keyOff(this: *mut root::Simple);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN6SimpleC1Ev"]
        pub fn Simple_Simple(this: *mut root::Simple);
    }
    impl Simple {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Simple_clear(self)
        }
        #[inline]
        pub unsafe fn keyOn(&mut self) {
            Simple_keyOn(self)
        }
        #[inline]
        pub unsafe fn keyOff(&mut self) {
            Simple_keyOff(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Simple_Simple(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6SimpleD1Ev"]
        pub fn Simple_Simple_destructor(this: *mut root::Simple);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN6Simple12setFrequencyEd"]
        pub fn Simple_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN6Simple6noteOnEdd"]
        pub fn Simple_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN6Simple7noteOffEd"]
        pub fn Simple_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN6Simple4tickEv"]
        pub fn Simple_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN6Simple13controlChangeEid"]
        pub fn Simple_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct SingWave {
        pub _base: root::Stk,
        pub wave: *mut root::WaveLoop,
        pub modulator: *mut root::Modulate,
        pub envelope: *mut root::Envelope,
        pub pitchEnvelope: *mut root::Envelope,
        pub rate: f64,
        pub sweepRate: f64,
        pub lastOutput: f64,
        pub m_freq: f64,
    }
    extern "C" {
        #[doc = "! Reset file to beginning."]
        #[link_name = "\u{1}_ZN8SingWave5resetEv"]
        pub fn SingWave_reset(this: *mut root::SingWave);
    }
    extern "C" {
        #[doc = "! Normalize the file to a maximum of +-1.0."]
        #[link_name = "\u{1}_ZN8SingWave9normalizeEv"]
        pub fn SingWave_normalize(this: *mut root::SingWave);
    }
    extern "C" {
        #[doc = "! Normalize the file to a maximum of \\e +- peak."]
        #[link_name = "\u{1}_ZN8SingWave9normalizeEd"]
        pub fn SingWave_normalize1(this: *mut root::SingWave, peak: f64);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8SingWave12setFrequencyEd"]
        pub fn SingWave_setFrequency(this: *mut root::SingWave, frequency: f64);
    }
    extern "C" {
        #[doc = "! Set the vibrato frequency in Hz."]
        #[link_name = "\u{1}_ZN8SingWave14setVibratoRateEd"]
        pub fn SingWave_setVibratoRate(this: *mut root::SingWave, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the vibrato gain."]
        #[link_name = "\u{1}_ZN8SingWave14setVibratoGainEd"]
        pub fn SingWave_setVibratoGain(this: *mut root::SingWave, gain: f64);
    }
    extern "C" {
        #[doc = "! Set the random-ness amount."]
        #[link_name = "\u{1}_ZN8SingWave13setRandomGainEd"]
        pub fn SingWave_setRandomGain(this: *mut root::SingWave, gain: f64);
    }
    extern "C" {
        #[doc = "! Set the sweep rate."]
        #[link_name = "\u{1}_ZN8SingWave12setSweepRateEd"]
        pub fn SingWave_setSweepRate(this: *mut root::SingWave, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the gain rate."]
        #[link_name = "\u{1}_ZN8SingWave11setGainRateEd"]
        pub fn SingWave_setGainRate(this: *mut root::SingWave, aRate: f64);
    }
    extern "C" {
        #[doc = "! Set the gain target value."]
        #[link_name = "\u{1}_ZN8SingWave13setGainTargetEd"]
        pub fn SingWave_setGainTarget(this: *mut root::SingWave, target: f64);
    }
    extern "C" {
        #[doc = "! Start a note."]
        #[link_name = "\u{1}_ZN8SingWave6noteOnEv"]
        pub fn SingWave_noteOn(this: *mut root::SingWave);
    }
    extern "C" {
        #[doc = "! Stop a note."]
        #[link_name = "\u{1}_ZN8SingWave7noteOffEv"]
        pub fn SingWave_noteOff(this: *mut root::SingWave);
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZN8SingWave7lastOutEv"]
        pub fn SingWave_lastOut(this: *mut root::SingWave) -> f64;
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8SingWave4tickEv"]
        pub fn SingWave_tick(this: *mut root::SingWave) -> f64;
    }
    extern "C" {
        #[doc = "! Class constructor taking filename argument."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if the file is not found, its format is"]
        #[doc = "unknown, or a read error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8SingWaveC1EPKcb"]
        pub fn SingWave_SingWave(
            this: *mut root::SingWave,
            fileName: *const ::std::os::raw::c_char,
            raw: bool,
        );
    }
    impl SingWave {
        #[inline]
        pub unsafe fn reset(&mut self) {
            SingWave_reset(self)
        }
        #[inline]
        pub unsafe fn normalize(&mut self) {
            SingWave_normalize(self)
        }
        #[inline]
        pub unsafe fn normalize1(&mut self, peak: f64) {
            SingWave_normalize1(self, peak)
        }
        #[inline]
        pub unsafe fn setFrequency(&mut self, frequency: f64) {
            SingWave_setFrequency(self, frequency)
        }
        #[inline]
        pub unsafe fn setVibratoRate(&mut self, aRate: f64) {
            SingWave_setVibratoRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setVibratoGain(&mut self, gain: f64) {
            SingWave_setVibratoGain(self, gain)
        }
        #[inline]
        pub unsafe fn setRandomGain(&mut self, gain: f64) {
            SingWave_setRandomGain(self, gain)
        }
        #[inline]
        pub unsafe fn setSweepRate(&mut self, aRate: f64) {
            SingWave_setSweepRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setGainRate(&mut self, aRate: f64) {
            SingWave_setGainRate(self, aRate)
        }
        #[inline]
        pub unsafe fn setGainTarget(&mut self, target: f64) {
            SingWave_setGainTarget(self, target)
        }
        #[inline]
        pub unsafe fn noteOn(&mut self) {
            SingWave_noteOn(self)
        }
        #[inline]
        pub unsafe fn noteOff(&mut self) {
            SingWave_noteOff(self)
        }
        #[inline]
        pub unsafe fn lastOut(&mut self) -> f64 {
            SingWave_lastOut(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self) -> f64 {
            SingWave_tick(self)
        }
        #[inline]
        pub unsafe fn new(fileName: *const ::std::os::raw::c_char, raw: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SingWave_SingWave(&mut __bindgen_tmp, fileName, raw);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8SingWaveD1Ev"]
        pub fn SingWave_SingWave_destructor(this: *mut root::SingWave);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Sitar {
        pub _base: root::Instrmnt,
        pub delayLine: *mut root::DelayA,
        pub loopFilter: *mut root::OneZero,
        pub noise: *mut root::Noise,
        pub envelope: *mut root::ADSR,
        pub length: ::std::os::raw::c_long,
        pub loopGain: f64,
        pub amGain: f64,
        pub delay: f64,
        pub targetDelay: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN5Sitar5clearEv"]
        pub fn Sitar_clear(this: *mut root::Sitar);
    }
    extern "C" {
        #[doc = "! Pluck the string with the given amplitude using the current frequency."]
        #[link_name = "\u{1}_ZN5Sitar5pluckEd"]
        pub fn Sitar_pluck(this: *mut root::Sitar, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN5SitarC1Ed"]
        pub fn Sitar_Sitar(this: *mut root::Sitar, lowestFrequency: f64);
    }
    impl Sitar {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Sitar_clear(self)
        }
        #[inline]
        pub unsafe fn pluck(&mut self, amplitude: f64) {
            Sitar_pluck(self, amplitude)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Sitar_Sitar(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5SitarD1Ev"]
        pub fn Sitar_Sitar_destructor(this: *mut root::Sitar);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN5Sitar12setFrequencyEd"]
        pub fn Sitar_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN5Sitar6noteOnEdd"]
        pub fn Sitar_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN5Sitar7noteOffEd"]
        pub fn Sitar_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN5Sitar4tickEv"]
        pub fn Sitar_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    pub struct Socket {
        pub _base: root::Stk,
        pub msg: [::std::os::raw::c_char; 256usize],
        pub soket: ::std::os::raw::c_int,
        pub poort: ::std::os::raw::c_int,
        pub server: bool,
    }
    extern "C" {
        #[doc = "! Connect a socket client to the specified host and port and returns the resulting socket descriptor."]
        #[doc = "*!"]
        #[doc = "This method is valid for socket clients only.  If it is called for"]
        #[doc = "a socket server, -1 is returned.  If the socket client is already"]
        #[doc = "connected, that connection is terminated and a new connection is"]
        #[doc = "attempted.  Server connections are made using the accept() method."]
        #[doc = "An StkError will be thrown if a socket error occurs during"]
        #[doc = "instantiation. \\sa accept"]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Socket7connectEiPKc"]
        pub fn Socket_connect(
            this: *mut root::Socket,
            port: ::std::os::raw::c_int,
            hostname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Close this socket."]
        #[link_name = "\u{1}_ZN6Socket5closeEv"]
        pub fn Socket_close(this: *mut root::Socket);
    }
    extern "C" {
        #[doc = "! Return the server/client socket descriptor."]
        #[link_name = "\u{1}_ZNK6Socket6socketEv"]
        pub fn Socket_socket(this: *const root::Socket) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Return the server/client port number."]
        #[link_name = "\u{1}_ZNK6Socket4portEv"]
        pub fn Socket_port(this: *const root::Socket) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! If this is a socket server, extract the first pending connection request from the queue and create a new connection, returning the descriptor for the accepted socket."]
        #[doc = "*!"]
        #[doc = "If no connection requests are pending and the socket has not"]
        #[doc = "been set non-blocking, this function will block until a connection"]
        #[doc = "is present.  If an error occurs or this is a socket client, -1 is"]
        #[doc = "returned."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Socket6acceptEv"]
        pub fn Socket_accept(this: *mut root::Socket) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! If enable = false, the socket is set to non-blocking mode.  When first created, sockets are by default in blocking mode."]
        #[link_name = "\u{1}_ZN6Socket11setBlockingEib"]
        pub fn Socket_setBlocking(socket: ::std::os::raw::c_int, enable: bool);
    }
    extern "C" {
        #[doc = "! Close the socket with the given descriptor."]
        #[link_name = "\u{1}_ZN6Socket5closeEi"]
        pub fn Socket_close1(socket: ::std::os::raw::c_int);
    }
    extern "C" {
        #[doc = "! Returns TRUE is the socket descriptor is valid."]
        #[link_name = "\u{1}_ZN6Socket7isValidEi"]
        pub fn Socket_isValid(socket: ::std::os::raw::c_int) -> bool;
    }
    extern "C" {
        #[doc = "! Write a buffer over the socket connection.  Returns the number of bytes written or -1 if an error occurs."]
        #[link_name = "\u{1}_ZN6Socket11writeBufferEPKvli"]
        pub fn Socket_writeBuffer(
            this: *mut root::Socket,
            buffer: *const ::std::os::raw::c_void,
            bufferSize: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Write a buffer via the specified socket.  Returns the number of bytes written or -1 if an error occurs."]
        #[link_name = "\u{1}_ZN6Socket11writeBufferEiPKvli"]
        pub fn Socket_writeBuffer1(
            socket: ::std::os::raw::c_int,
            buffer: *const ::std::os::raw::c_void,
            bufferSize: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Read a buffer from the socket connection, up to length \\e bufferSize.  Returns the number of bytes read or -1 if an error occurs."]
        #[link_name = "\u{1}_ZN6Socket10readBufferEPvli"]
        pub fn Socket_readBuffer(
            this: *mut root::Socket,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Read a buffer via the specified socket.  Returns the number of bytes read or -1 if an error occurs."]
        #[link_name = "\u{1}_ZN6Socket10readBufferEiPvli"]
        pub fn Socket_readBuffer1(
            socket: ::std::os::raw::c_int,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = "! Default constructor which creates a local socket server on port 2006 (or the specified port number)."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if a socket error occurs during instantiation."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6SocketC1Ei"]
        pub fn Socket_Socket(this: *mut root::Socket, port: ::std::os::raw::c_int);
    }
    extern "C" {
        #[doc = "! Class constructor which creates a socket client connection to the specified host and port."]
        #[doc = "*!"]
        #[doc = "An StkError will be thrown if a socket error occurs during instantiation."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6SocketC1EiPKc"]
        pub fn Socket_Socket1(
            this: *mut root::Socket,
            port: ::std::os::raw::c_int,
            hostname: *const ::std::os::raw::c_char,
        );
    }
    impl Socket {
        #[inline]
        pub unsafe fn connect(
            &mut self,
            port: ::std::os::raw::c_int,
            hostname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int {
            Socket_connect(self, port, hostname)
        }
        #[inline]
        pub unsafe fn close(&mut self) {
            Socket_close(self)
        }
        #[inline]
        pub unsafe fn socket(&self) -> ::std::os::raw::c_int {
            Socket_socket(self)
        }
        #[inline]
        pub unsafe fn port(&self) -> ::std::os::raw::c_int {
            Socket_port(self)
        }
        #[inline]
        pub unsafe fn accept(&mut self) -> ::std::os::raw::c_int {
            Socket_accept(self)
        }
        #[inline]
        pub unsafe fn setBlocking(socket: ::std::os::raw::c_int, enable: bool) {
            Socket_setBlocking(socket, enable)
        }
        #[inline]
        pub unsafe fn close1(socket: ::std::os::raw::c_int) {
            Socket_close1(socket)
        }
        #[inline]
        pub unsafe fn isValid(socket: ::std::os::raw::c_int) -> bool {
            Socket_isValid(socket)
        }
        #[inline]
        pub unsafe fn writeBuffer(
            &mut self,
            buffer: *const ::std::os::raw::c_void,
            bufferSize: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int {
            Socket_writeBuffer(self, buffer, bufferSize, flags)
        }
        #[inline]
        pub unsafe fn writeBuffer1(
            socket: ::std::os::raw::c_int,
            buffer: *const ::std::os::raw::c_void,
            bufferSize: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int {
            Socket_writeBuffer1(socket, buffer, bufferSize, flags)
        }
        #[inline]
        pub unsafe fn readBuffer(
            &mut self,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int {
            Socket_readBuffer(self, buffer, bufferSize, flags)
        }
        #[inline]
        pub unsafe fn readBuffer1(
            socket: ::std::os::raw::c_int,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int {
            Socket_readBuffer1(socket, buffer, bufferSize, flags)
        }
        #[inline]
        pub unsafe fn new(port: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Socket_Socket(&mut __bindgen_tmp, port);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            port: ::std::os::raw::c_int,
            hostname: *const ::std::os::raw::c_char,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Socket_Socket1(&mut __bindgen_tmp, port, hostname);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! The class destructor closes the socket instance, breaking any existing connections."]
        #[link_name = "\u{1}_ZN6SocketD1Ev"]
        pub fn Socket_Socket_destructor(this: *mut root::Socket);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Vector3D {
        pub myX: f64,
        pub myY: f64,
        pub myZ: f64,
    }
    extern "C" {
        #[doc = "! Get the current X value."]
        #[link_name = "\u{1}_ZN8Vector3D4getXEv"]
        pub fn Vector3D_getX(this: *mut root::Vector3D) -> f64;
    }
    extern "C" {
        #[doc = "! Get the current Y value."]
        #[link_name = "\u{1}_ZN8Vector3D4getYEv"]
        pub fn Vector3D_getY(this: *mut root::Vector3D) -> f64;
    }
    extern "C" {
        #[doc = "! Get the current Z value."]
        #[link_name = "\u{1}_ZN8Vector3D4getZEv"]
        pub fn Vector3D_getZ(this: *mut root::Vector3D) -> f64;
    }
    extern "C" {
        #[doc = "! Calculate the vector length."]
        #[link_name = "\u{1}_ZN8Vector3D9getLengthEv"]
        pub fn Vector3D_getLength(this: *mut root::Vector3D) -> f64;
    }
    extern "C" {
        #[doc = "! Set the X, Y, and Z values simultaniously."]
        #[link_name = "\u{1}_ZN8Vector3D6setXYZEddd"]
        pub fn Vector3D_setXYZ(this: *mut root::Vector3D, anX: f64, aY: f64, aZ: f64);
    }
    extern "C" {
        #[doc = "! Set the X value."]
        #[link_name = "\u{1}_ZN8Vector3D4setXEd"]
        pub fn Vector3D_setX(this: *mut root::Vector3D, aval: f64);
    }
    extern "C" {
        #[doc = "! Set the Y value."]
        #[link_name = "\u{1}_ZN8Vector3D4setYEd"]
        pub fn Vector3D_setY(this: *mut root::Vector3D, aval: f64);
    }
    extern "C" {
        #[doc = "! Set the Z value."]
        #[link_name = "\u{1}_ZN8Vector3D4setZEd"]
        pub fn Vector3D_setZ(this: *mut root::Vector3D, aval: f64);
    }
    extern "C" {
        #[doc = "! Default constructor taking optional initial X, Y, and Z values."]
        #[link_name = "\u{1}_ZN8Vector3DC1Eddd"]
        pub fn Vector3D_Vector3D(this: *mut root::Vector3D, initX: f64, initY: f64, initZ: f64);
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8Vector3DD1Ev"]
        pub fn Vector3D_Vector3D_destructor(this: *mut root::Vector3D);
    }
    impl Vector3D {
        #[inline]
        pub unsafe fn getX(&mut self) -> f64 {
            Vector3D_getX(self)
        }
        #[inline]
        pub unsafe fn getY(&mut self) -> f64 {
            Vector3D_getY(self)
        }
        #[inline]
        pub unsafe fn getZ(&mut self) -> f64 {
            Vector3D_getZ(self)
        }
        #[inline]
        pub unsafe fn getLength(&mut self) -> f64 {
            Vector3D_getLength(self)
        }
        #[inline]
        pub unsafe fn setXYZ(&mut self, anX: f64, aY: f64, aZ: f64) {
            Vector3D_setXYZ(self, anX, aY, aZ)
        }
        #[inline]
        pub unsafe fn setX(&mut self, aval: f64) {
            Vector3D_setX(self, aval)
        }
        #[inline]
        pub unsafe fn setY(&mut self, aval: f64) {
            Vector3D_setY(self, aval)
        }
        #[inline]
        pub unsafe fn setZ(&mut self, aval: f64) {
            Vector3D_setZ(self, aval)
        }
        #[inline]
        pub unsafe fn new(initX: f64, initY: f64, initZ: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Vector3D_Vector3D(&mut __bindgen_tmp, initX, initY, initZ);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Vector3D_Vector3D_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Sphere {
        pub myPosition: *mut root::Vector3D,
        pub myVelocity: *mut root::Vector3D,
        pub workingVector: root::Vector3D,
        pub myRadius: f64,
        pub myMass: f64,
    }
    extern "C" {
        #[doc = "! Set the 3D center position of the sphere."]
        #[link_name = "\u{1}_ZN6Sphere11setPositionEddd"]
        pub fn Sphere_setPosition(this: *mut root::Sphere, anX: f64, aY: f64, aZ: f64);
    }
    extern "C" {
        #[doc = "! Set the 3D velocity of the sphere."]
        #[link_name = "\u{1}_ZN6Sphere11setVelocityEddd"]
        pub fn Sphere_setVelocity(this: *mut root::Sphere, anX: f64, aY: f64, aZ: f64);
    }
    extern "C" {
        #[doc = "! Set the radius of the sphere."]
        #[link_name = "\u{1}_ZN6Sphere9setRadiusEd"]
        pub fn Sphere_setRadius(this: *mut root::Sphere, aRadius: f64);
    }
    extern "C" {
        #[doc = "! Set the mass of the sphere."]
        #[link_name = "\u{1}_ZN6Sphere7setMassEd"]
        pub fn Sphere_setMass(this: *mut root::Sphere, aMass: f64);
    }
    extern "C" {
        #[doc = "! Get the current position of the sphere as a 3D vector."]
        #[link_name = "\u{1}_ZN6Sphere11getPositionEv"]
        pub fn Sphere_getPosition(this: *mut root::Sphere) -> *mut root::Vector3D;
    }
    extern "C" {
        #[doc = "! Get the relative position of the given point to the sphere as a 3D vector."]
        #[link_name = "\u{1}_ZN6Sphere19getRelativePositionEP8Vector3D"]
        pub fn Sphere_getRelativePosition(
            this: *mut root::Sphere,
            aPosition: *mut root::Vector3D,
        ) -> *mut root::Vector3D;
    }
    extern "C" {
        #[doc = "! Set the velcoity of the sphere as a 3D vector."]
        #[link_name = "\u{1}_ZN6Sphere11getVelocityEP8Vector3D"]
        pub fn Sphere_getVelocity(this: *mut root::Sphere, aVelocity: *mut root::Vector3D) -> f64;
    }
    extern "C" {
        #[doc = "! Returns the distance from the sphere boundary to the given position (< 0 if inside)."]
        #[link_name = "\u{1}_ZN6Sphere8isInsideEP8Vector3D"]
        pub fn Sphere_isInside(this: *mut root::Sphere, aPosition: *mut root::Vector3D) -> f64;
    }
    extern "C" {
        #[doc = "! Get the current sphere radius."]
        #[link_name = "\u{1}_ZN6Sphere9getRadiusEv"]
        pub fn Sphere_getRadius(this: *mut root::Sphere) -> f64;
    }
    extern "C" {
        #[doc = "! Get the current sphere mass."]
        #[link_name = "\u{1}_ZN6Sphere7getMassEv"]
        pub fn Sphere_getMass(this: *mut root::Sphere) -> f64;
    }
    extern "C" {
        #[doc = "! Increase the current sphere velocity by the given 3D components."]
        #[link_name = "\u{1}_ZN6Sphere11addVelocityEddd"]
        pub fn Sphere_addVelocity(this: *mut root::Sphere, anX: f64, aY: f64, aZ: f64);
    }
    extern "C" {
        #[doc = "! Move the sphere for the given time increment."]
        #[link_name = "\u{1}_ZN6Sphere4tickEd"]
        pub fn Sphere_tick(this: *mut root::Sphere, timeIncrement: f64);
    }
    extern "C" {
        #[doc = "! Constructor taking an initial radius value."]
        #[link_name = "\u{1}_ZN6SphereC1Ed"]
        pub fn Sphere_Sphere(this: *mut root::Sphere, initRadius: f64);
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6SphereD1Ev"]
        pub fn Sphere_Sphere_destructor(this: *mut root::Sphere);
    }
    impl Sphere {
        #[inline]
        pub unsafe fn setPosition(&mut self, anX: f64, aY: f64, aZ: f64) {
            Sphere_setPosition(self, anX, aY, aZ)
        }
        #[inline]
        pub unsafe fn setVelocity(&mut self, anX: f64, aY: f64, aZ: f64) {
            Sphere_setVelocity(self, anX, aY, aZ)
        }
        #[inline]
        pub unsafe fn setRadius(&mut self, aRadius: f64) {
            Sphere_setRadius(self, aRadius)
        }
        #[inline]
        pub unsafe fn setMass(&mut self, aMass: f64) {
            Sphere_setMass(self, aMass)
        }
        #[inline]
        pub unsafe fn getPosition(&mut self) -> *mut root::Vector3D {
            Sphere_getPosition(self)
        }
        #[inline]
        pub unsafe fn getRelativePosition(
            &mut self,
            aPosition: *mut root::Vector3D,
        ) -> *mut root::Vector3D {
            Sphere_getRelativePosition(self, aPosition)
        }
        #[inline]
        pub unsafe fn getVelocity(&mut self, aVelocity: *mut root::Vector3D) -> f64 {
            Sphere_getVelocity(self, aVelocity)
        }
        #[inline]
        pub unsafe fn isInside(&mut self, aPosition: *mut root::Vector3D) -> f64 {
            Sphere_isInside(self, aPosition)
        }
        #[inline]
        pub unsafe fn getRadius(&mut self) -> f64 {
            Sphere_getRadius(self)
        }
        #[inline]
        pub unsafe fn getMass(&mut self) -> f64 {
            Sphere_getMass(self)
        }
        #[inline]
        pub unsafe fn addVelocity(&mut self, anX: f64, aY: f64, aZ: f64) {
            Sphere_addVelocity(self, anX, aY, aZ)
        }
        #[inline]
        pub unsafe fn tick(&mut self, timeIncrement: f64) {
            Sphere_tick(self, timeIncrement)
        }
        #[inline]
        pub unsafe fn new(initRadius: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Sphere_Sphere(&mut __bindgen_tmp, initRadius);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Sphere_Sphere_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct StifKarp {
        pub _base: root::Instrmnt,
        pub m_sustain: f64,
        pub delayLine: *mut root::DelayA,
        pub combDelay: *mut root::DelayL,
        pub filter: *mut root::OneZero,
        pub noise: *mut root::Noise,
        pub biQuad: [*mut root::BiQuad; 4usize],
        pub length: ::std::os::raw::c_long,
        pub loopGain: f64,
        pub baseLoopGain: f64,
        pub lastFrequency: f64,
        pub lastLength: f64,
        pub stretching: f64,
        pub pluckAmplitude: f64,
        pub pickupPosition: f64,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8StifKarp5clearEv"]
        pub fn StifKarp_clear(this: *mut root::StifKarp);
    }
    extern "C" {
        #[doc = "! Set the stretch \"factor\" of the string (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8StifKarp10setStretchEd"]
        pub fn StifKarp_setStretch(this: *mut root::StifKarp, stretch: f64);
    }
    extern "C" {
        #[doc = "! Set the pluck or \"excitation\" position along the string (0.0 - 1.0)."]
        #[link_name = "\u{1}_ZN8StifKarp17setPickupPositionEd"]
        pub fn StifKarp_setPickupPosition(this: *mut root::StifKarp, position: f64);
    }
    extern "C" {
        #[doc = "! Set the base loop gain."]
        #[doc = "*!"]
        #[doc = "The actual loop gain is set according to the frequency."]
        #[doc = "Because of high-frequency loop filter roll-off, higher"]
        #[doc = "frequency settings have greater loop gains."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8StifKarp15setBaseLoopGainEd"]
        pub fn StifKarp_setBaseLoopGain(this: *mut root::StifKarp, aGain: f64);
    }
    extern "C" {
        #[doc = "! Pluck the string with the given amplitude using the current frequency."]
        #[link_name = "\u{1}_ZN8StifKarp5pluckEd"]
        pub fn StifKarp_pluck(this: *mut root::StifKarp, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN8StifKarpC1Ed"]
        pub fn StifKarp_StifKarp(this: *mut root::StifKarp, lowestFrequency: f64);
    }
    impl StifKarp {
        #[inline]
        pub unsafe fn clear(&mut self) {
            StifKarp_clear(self)
        }
        #[inline]
        pub unsafe fn setStretch(&mut self, stretch: f64) {
            StifKarp_setStretch(self, stretch)
        }
        #[inline]
        pub unsafe fn setPickupPosition(&mut self, position: f64) {
            StifKarp_setPickupPosition(self, position)
        }
        #[inline]
        pub unsafe fn setBaseLoopGain(&mut self, aGain: f64) {
            StifKarp_setBaseLoopGain(self, aGain)
        }
        #[inline]
        pub unsafe fn pluck(&mut self, amplitude: f64) {
            StifKarp_pluck(self, amplitude)
        }
        #[inline]
        pub unsafe fn new(lowestFrequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            StifKarp_StifKarp(&mut __bindgen_tmp, lowestFrequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8StifKarpD1Ev"]
        pub fn StifKarp_StifKarp_destructor(this: *mut root::StifKarp);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8StifKarp12setFrequencyEd"]
        pub fn StifKarp_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8StifKarp6noteOnEdd"]
        pub fn StifKarp_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8StifKarp7noteOffEd"]
        pub fn StifKarp_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8StifKarp4tickEv"]
        pub fn StifKarp_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8StifKarp13controlChangeEid"]
        pub fn StifKarp_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Table {
        pub _base: root::Stk,
        pub length: ::std::os::raw::c_long,
        pub data: *mut f64,
        pub lastOutput: f64,
    }
    extern "C" {
        #[doc = "! Return the number of elements in the table."]
        #[link_name = "\u{1}_ZNK5Table9getLengthEv"]
        pub fn Table_getLength(this: *const root::Table) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK5Table7lastOutEv"]
        pub fn Table_lastOut(this: *const root::Table) -> f64;
    }
    extern "C" {
        #[doc = "! Return the table value at position \\e index."]
        #[doc = "*!"]
        #[doc = "Linear interpolation is performed if \\e index is"]
        #[doc = "fractional."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5Table4tickEd"]
        pub fn Table_tick(this: *mut root::Table, index: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Take \\e vectorSize index positions and return the corresponding table values in \\e vector."]
        #[link_name = "\u{1}_ZN5Table4tickEPdj"]
        pub fn Table_tick1(
            this: *mut root::Table,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Constructor loads the data from \\e fileName."]
        #[link_name = "\u{1}_ZN5TableC1EPc"]
        pub fn Table_Table(this: *mut root::Table, fileName: *mut ::std::os::raw::c_char);
    }
    impl Table {
        #[inline]
        pub unsafe fn getLength(&self) -> ::std::os::raw::c_long {
            Table_getLength(self)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Table_lastOut(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self, index: f64) -> f64 {
            Table_tick(self, index)
        }
        #[inline]
        pub unsafe fn tick1(
            &mut self,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64 {
            Table_tick1(self, vector, vectorSize)
        }
        #[inline]
        pub unsafe fn new(fileName: *mut ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Table_Table(&mut __bindgen_tmp, fileName);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5TableD1Ev"]
        pub fn Table_Table_destructor(this: *mut root::Table);
    }
    #[repr(C)]
    pub struct WvOut {
        pub _base: root::Stk,
        pub msg: [::std::os::raw::c_char; 256usize],
        pub fd: *mut root::FILE,
        pub data: *mut f64,
        pub fileType: root::WvOut_FILE_TYPE,
        pub dataType: root::Stk_STK_FORMAT,
        pub byteswap: bool,
        pub channels: ::std::os::raw::c_uint,
        pub counter: ::std::os::raw::c_ulong,
        pub totalCount: ::std::os::raw::c_ulong,
        pub str_filename: root::Chuck_String,
        pub start: ::std::os::raw::c_ulong,
        pub autoPrefix: root::Chuck_String,
        pub flush: ::std::os::raw::c_ulong,
        pub fileGain: f64,
        pub asyncIO: ::std::os::raw::c_ulong,
        pub asyncWriteThread: *mut root::XWriteThread,
    }
    pub type WvOut_FILE_TYPE = ::std::os::raw::c_ulong;
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut9WVOUT_RAWE"]
        pub static WvOut_WVOUT_RAW: root::WvOut_FILE_TYPE;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut9WVOUT_WAVE"]
        pub static WvOut_WVOUT_WAV: root::WvOut_FILE_TYPE;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut9WVOUT_SNDE"]
        pub static WvOut_WVOUT_SND: root::WvOut_FILE_TYPE;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut9WVOUT_AIFE"]
        pub static WvOut_WVOUT_AIF: root::WvOut_FILE_TYPE;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut9WVOUT_MATE"]
        pub static WvOut_WVOUT_MAT: root::WvOut_FILE_TYPE;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut6fwriteEPKvmmP8_IO_FILE"]
        pub fn WvOut_fwrite(
            this: *mut root::WvOut,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut5fseekEP8_IO_FILEli"]
        pub fn WvOut_fseek(
            this: *mut root::WvOut,
            stream: *mut root::FILE,
            offset: ::std::os::raw::c_long,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut6fflushEP8_IO_FILE"]
        pub fn WvOut_fflush(
            this: *mut root::WvOut,
            stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut6fcloseEP8_IO_FILE"]
        pub fn WvOut_fclose(
            this: *mut root::WvOut,
            stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut5freadEPvmmP8_IO_FILE"]
        pub fn WvOut_fread(
            this: *mut root::WvOut,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        #[doc = "! Create a file of the specified type and name and output samples to it in the given data format."]
        #[doc = "*!"]
        #[doc = "An StkError is thrown for invalid argument values or if an error occurs when initializing the output file."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5WvOut8openFileEPKcjmm"]
        pub fn WvOut_openFile(
            this: *mut root::WvOut,
            fileName: *const ::std::os::raw::c_char,
            nChannels: ::std::os::raw::c_uint,
            type_: root::WvOut_FILE_TYPE,
            arg1: root::Stk_STK_FORMAT,
        );
    }
    extern "C" {
        #[doc = "! If a file is open, write out samples in the queue and then close it."]
        #[link_name = "\u{1}_ZN5WvOut9closeFileEv"]
        pub fn WvOut_closeFile(this: *mut root::WvOut);
    }
    extern "C" {
        #[doc = "! Return the number of sample frames output."]
        #[link_name = "\u{1}_ZNK5WvOut9getFramesEv"]
        pub fn WvOut_getFrames(this: *const root::WvOut) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[doc = "! Return the number of seconds of data output."]
        #[link_name = "\u{1}_ZNK5WvOut7getTimeEv"]
        pub fn WvOut_getTime(this: *const root::WvOut) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut4initEv"]
        pub fn WvOut_init(this: *mut root::WvOut);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut10setRawFileEPKc"]
        pub fn WvOut_setRawFile(
            this: *mut root::WvOut,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut10setWavFileEPKc"]
        pub fn WvOut_setWavFile(
            this: *mut root::WvOut,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut12closeWavFileEv"]
        pub fn WvOut_closeWavFile(this: *mut root::WvOut);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut10setSndFileEPKc"]
        pub fn WvOut_setSndFile(
            this: *mut root::WvOut,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut12closeSndFileEv"]
        pub fn WvOut_closeSndFile(this: *mut root::WvOut);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut10setAifFileEPKc"]
        pub fn WvOut_setAifFile(
            this: *mut root::WvOut,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut12closeAifFileEv"]
        pub fn WvOut_closeAifFile(this: *mut root::WvOut);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut10setMatFileEPKc"]
        pub fn WvOut_setMatFile(
            this: *mut root::WvOut,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut12closeMatFileEv"]
        pub fn WvOut_closeMatFile(this: *mut root::WvOut);
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[link_name = "\u{1}_ZN5WvOutC1Ev"]
        pub fn WvOut_WvOut(this: *mut root::WvOut);
    }
    extern "C" {
        #[doc = "! Overloaded constructor used to specify a file name, type, and data format with this object."]
        #[doc = "*!"]
        #[doc = "An StkError is thrown for invalid argument values or if an error occurs when initializing the output file."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5WvOutC1EPKcjmm"]
        pub fn WvOut_WvOut1(
            this: *mut root::WvOut,
            fileName: *const ::std::os::raw::c_char,
            nChannels: ::std::os::raw::c_uint,
            type_: root::WvOut_FILE_TYPE,
            format: root::Stk_STK_FORMAT,
        );
    }
    impl WvOut {
        #[inline]
        pub unsafe fn fwrite(
            &mut self,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize {
            WvOut_fwrite(self, ptr, size, nitems, stream)
        }
        #[inline]
        pub unsafe fn fseek(
            &mut self,
            stream: *mut root::FILE,
            offset: ::std::os::raw::c_long,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int {
            WvOut_fseek(self, stream, offset, whence)
        }
        #[inline]
        pub unsafe fn fflush(&mut self, stream: *mut root::FILE) -> ::std::os::raw::c_int {
            WvOut_fflush(self, stream)
        }
        #[inline]
        pub unsafe fn fclose(&mut self, stream: *mut root::FILE) -> ::std::os::raw::c_int {
            WvOut_fclose(self, stream)
        }
        #[inline]
        pub unsafe fn fread(
            &mut self,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize {
            WvOut_fread(self, ptr, size, nitems, stream)
        }
        #[inline]
        pub unsafe fn openFile(
            &mut self,
            fileName: *const ::std::os::raw::c_char,
            nChannels: ::std::os::raw::c_uint,
            type_: root::WvOut_FILE_TYPE,
            arg1: root::Stk_STK_FORMAT,
        ) {
            WvOut_openFile(self, fileName, nChannels, type_, arg1)
        }
        #[inline]
        pub unsafe fn closeFile(&mut self) {
            WvOut_closeFile(self)
        }
        #[inline]
        pub unsafe fn getFrames(&self) -> ::std::os::raw::c_ulong {
            WvOut_getFrames(self)
        }
        #[inline]
        pub unsafe fn getTime(&self) -> f64 {
            WvOut_getTime(self)
        }
        #[inline]
        pub unsafe fn init(&mut self) {
            WvOut_init(self)
        }
        #[inline]
        pub unsafe fn setRawFile(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvOut_setRawFile(self, fileName)
        }
        #[inline]
        pub unsafe fn setWavFile(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvOut_setWavFile(self, fileName)
        }
        #[inline]
        pub unsafe fn closeWavFile(&mut self) {
            WvOut_closeWavFile(self)
        }
        #[inline]
        pub unsafe fn setSndFile(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvOut_setSndFile(self, fileName)
        }
        #[inline]
        pub unsafe fn closeSndFile(&mut self) {
            WvOut_closeSndFile(self)
        }
        #[inline]
        pub unsafe fn setAifFile(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvOut_setAifFile(self, fileName)
        }
        #[inline]
        pub unsafe fn closeAifFile(&mut self) {
            WvOut_closeAifFile(self)
        }
        #[inline]
        pub unsafe fn setMatFile(&mut self, fileName: *const ::std::os::raw::c_char) -> bool {
            WvOut_setMatFile(self, fileName)
        }
        #[inline]
        pub unsafe fn closeMatFile(&mut self) {
            WvOut_closeMatFile(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            WvOut_WvOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            fileName: *const ::std::os::raw::c_char,
            nChannels: ::std::os::raw::c_uint,
            type_: root::WvOut_FILE_TYPE,
            format: root::Stk_STK_FORMAT,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            WvOut_WvOut1(&mut __bindgen_tmp, fileName, nChannels, type_, format);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN5WvOutD1Ev"]
        pub fn WvOut_WvOut_destructor(this: *mut root::WvOut);
    }
    extern "C" {
        #[doc = "! Output a single sample to all channels in a sample frame."]
        #[doc = "*!"]
        #[doc = "An StkError is thrown if a file write error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5WvOut4tickEd"]
        pub fn WvOut_tick(this: *mut ::std::os::raw::c_void, sample: f64);
    }
    extern "C" {
        #[doc = "! Output each sample in \\e vector to all channels in \\e vectorSize sample frames."]
        #[doc = "*!"]
        #[doc = "An StkError is thrown if a file write error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5WvOut4tickEPKdj"]
        pub fn WvOut_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *const f64,
            vectorSize: ::std::os::raw::c_uint,
        );
    }
    extern "C" {
        #[doc = "! Output the \\e frameVector of sample frames of the given length."]
        #[doc = "*!"]
        #[doc = "An StkError is thrown if a file write error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN5WvOut9tickFrameEPKdj"]
        pub fn WvOut_tickFrame(
            this: *mut ::std::os::raw::c_void,
            frameVector: *const f64,
            frames: ::std::os::raw::c_uint,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5WvOut9writeDataEm"]
        pub fn WvOut_writeData(this: *mut ::std::os::raw::c_void, frames: ::std::os::raw::c_ulong);
    }
    #[repr(C)]
    pub struct TubeBell {
        pub _base: root::FM,
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN8TubeBellC1Ev"]
        pub fn TubeBell_TubeBell(this: *mut root::TubeBell);
    }
    impl TubeBell {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            TubeBell_TubeBell(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8TubeBellD1Ev"]
        pub fn TubeBell_TubeBell_destructor(this: *mut root::TubeBell);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8TubeBell6noteOnEdd"]
        pub fn TubeBell_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8TubeBell4tickEv"]
        pub fn TubeBell_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct TwoPole {
        pub _base: root::FilterStk,
        pub m_resNorm: bool,
        pub m_resFreq: f64,
        pub m_resRad: f64,
    }
    extern "C" {
        #[doc = "! Clears the internal states of the filter."]
        #[link_name = "\u{1}_ZN7TwoPole5clearEv"]
        pub fn TwoPole_clear(this: *mut root::TwoPole);
    }
    extern "C" {
        #[doc = "! Set the b[0] coefficient value."]
        #[link_name = "\u{1}_ZN7TwoPole5setB0Ed"]
        pub fn TwoPole_setB0(this: *mut root::TwoPole, b0: f64);
    }
    extern "C" {
        #[doc = "! Set the a[1] coefficient value."]
        #[link_name = "\u{1}_ZN7TwoPole5setA1Ed"]
        pub fn TwoPole_setA1(this: *mut root::TwoPole, a1: f64);
    }
    extern "C" {
        #[doc = "! Set the a[2] coefficient value."]
        #[link_name = "\u{1}_ZN7TwoPole5setA2Ed"]
        pub fn TwoPole_setA2(this: *mut root::TwoPole, a2: f64);
    }
    extern "C" {
        #[doc = "! Sets the filter coefficients for a resonance at \\e frequency (in Hz)."]
        #[doc = "*!"]
        #[doc = "This method determines the filter coefficients corresponding to"]
        #[doc = "two complex-conjugate poles with the given \\e frequency (in Hz)"]
        #[doc = "and \\e radius from the z-plane origin.  If \\e normalize is true,"]
        #[doc = "the coefficients are then normalized to produce unity gain at \\e"]
        #[doc = "frequency (the actual maximum filter gain tends to be slightly"]
        #[doc = "greater than unity when \\e radius is not close to one).  The"]
        #[doc = "resulting filter frequency response has a resonance at the given"]
        #[doc = "\\e frequency.  The closer the poles are to the unit-circle (\\e"]
        #[doc = "radius close to one), the narrower the resulting resonance width."]
        #[doc = "An unstable filter will result for \\e radius >= 1.0.  For a better"]
        #[doc = "resonance filter, use a BiQuad filter. \\sa BiQuad filter class"]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7TwoPole12setResonanceEddb"]
        pub fn TwoPole_setResonance(
            this: *mut root::TwoPole,
            frequency: f64,
            radius: f64,
            normalize: bool,
        );
    }
    extern "C" {
        #[doc = "! Default constructor creates a second-order pass-through filter."]
        #[link_name = "\u{1}_ZN7TwoPoleC1Ev"]
        pub fn TwoPole_TwoPole(this: *mut root::TwoPole);
    }
    impl TwoPole {
        #[inline]
        pub unsafe fn clear(&mut self) {
            TwoPole_clear(self)
        }
        #[inline]
        pub unsafe fn setB0(&mut self, b0: f64) {
            TwoPole_setB0(self, b0)
        }
        #[inline]
        pub unsafe fn setA1(&mut self, a1: f64) {
            TwoPole_setA1(self, a1)
        }
        #[inline]
        pub unsafe fn setA2(&mut self, a2: f64) {
            TwoPole_setA2(self, a2)
        }
        #[inline]
        pub unsafe fn setResonance(&mut self, frequency: f64, radius: f64, normalize: bool) {
            TwoPole_setResonance(self, frequency, radius, normalize)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            TwoPole_TwoPole(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7TwoPoleD1Ev"]
        pub fn TwoPole_TwoPole_destructor(this: *mut root::TwoPole);
    }
    extern "C" {
        #[doc = "! Set the filter gain."]
        #[doc = "*!"]
        #[doc = "The gain is applied at the filter input and does not affect the"]
        #[doc = "coefficient values.  The default gain value is 1.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7TwoPole7setGainEd"]
        pub fn TwoPole_setGain(this: *mut ::std::os::raw::c_void, theGain: f64);
    }
    extern "C" {
        #[doc = "! Return the current filter gain."]
        #[link_name = "\u{1}_ZNK7TwoPole7getGainEv"]
        pub fn TwoPole_getGain(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last computed output value."]
        #[link_name = "\u{1}_ZNK7TwoPole7lastOutEv"]
        pub fn TwoPole_lastOut(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Input one sample to the filter and return one output."]
        #[link_name = "\u{1}_ZN7TwoPole4tickEd"]
        pub fn TwoPole_tick(this: *mut ::std::os::raw::c_void, sample: f64) -> f64;
    }
    extern "C" {
        #[doc = "! Input \\e vectorSize samples to the filter and return an equal number of outputs in \\e vector."]
        #[link_name = "\u{1}_ZN7TwoPole4tickEPdj"]
        pub fn TwoPole_tick1(
            this: *mut ::std::os::raw::c_void,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    #[repr(C)]
    pub struct VoicForm {
        pub _base: root::Instrmnt,
        pub m_phonemeNum: ::std::os::raw::c_int,
        pub voiced: *mut root::SingWave,
        pub noise: *mut root::Noise,
        pub noiseEnv: *mut root::Envelope,
        pub filters: [*mut root::FormSwep; 4usize],
        pub onepole: *mut root::OnePole,
        pub onezero: *mut root::OneZero,
        pub str_phoneme: root::Chuck_String,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN8VoicForm5clearEv"]
        pub fn VoicForm_clear(this: *mut root::VoicForm);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for the given phoneme.  Returns FALSE if phoneme not found."]
        #[link_name = "\u{1}_ZN8VoicForm10setPhonemeEPKc"]
        pub fn VoicForm_setPhoneme(
            this: *mut root::VoicForm,
            phoneme: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[doc = "! Set the voiced component gain."]
        #[link_name = "\u{1}_ZN8VoicForm9setVoicedEd"]
        pub fn VoicForm_setVoiced(this: *mut root::VoicForm, vGain: f64);
    }
    extern "C" {
        #[doc = "! Set the unvoiced component gain."]
        #[link_name = "\u{1}_ZN8VoicForm11setUnVoicedEd"]
        pub fn VoicForm_setUnVoiced(this: *mut root::VoicForm, nGain: f64);
    }
    extern "C" {
        #[doc = "! Set the sweep rate for a particular formant filter (0-3)."]
        #[link_name = "\u{1}_ZN8VoicForm18setFilterSweepRateEid"]
        pub fn VoicForm_setFilterSweepRate(
            this: *mut root::VoicForm,
            whichOne: ::std::os::raw::c_int,
            rate: f64,
        );
    }
    extern "C" {
        #[doc = "! Set voiced component pitch sweep rate."]
        #[link_name = "\u{1}_ZN8VoicForm17setPitchSweepRateEd"]
        pub fn VoicForm_setPitchSweepRate(this: *mut root::VoicForm, rate: f64);
    }
    extern "C" {
        #[doc = "! Start the voice."]
        #[link_name = "\u{1}_ZN8VoicForm5speakEv"]
        pub fn VoicForm_speak(this: *mut root::VoicForm);
    }
    extern "C" {
        #[doc = "! Stop the voice."]
        #[link_name = "\u{1}_ZN8VoicForm5quietEv"]
        pub fn VoicForm_quiet(this: *mut root::VoicForm);
    }
    extern "C" {
        #[doc = "! start at current frequency.."]
        #[link_name = "\u{1}_ZN8VoicForm6noteOnEd"]
        pub fn VoicForm_noteOn1(this: *mut root::VoicForm, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Class constructor, taking the lowest desired playing frequency."]
        #[link_name = "\u{1}_ZN8VoicFormC1Ev"]
        pub fn VoicForm_VoicForm(this: *mut root::VoicForm);
    }
    impl VoicForm {
        #[inline]
        pub unsafe fn clear(&mut self) {
            VoicForm_clear(self)
        }
        #[inline]
        pub unsafe fn setPhoneme(&mut self, phoneme: *const ::std::os::raw::c_char) -> bool {
            VoicForm_setPhoneme(self, phoneme)
        }
        #[inline]
        pub unsafe fn setVoiced(&mut self, vGain: f64) {
            VoicForm_setVoiced(self, vGain)
        }
        #[inline]
        pub unsafe fn setUnVoiced(&mut self, nGain: f64) {
            VoicForm_setUnVoiced(self, nGain)
        }
        #[inline]
        pub unsafe fn setFilterSweepRate(&mut self, whichOne: ::std::os::raw::c_int, rate: f64) {
            VoicForm_setFilterSweepRate(self, whichOne, rate)
        }
        #[inline]
        pub unsafe fn setPitchSweepRate(&mut self, rate: f64) {
            VoicForm_setPitchSweepRate(self, rate)
        }
        #[inline]
        pub unsafe fn speak(&mut self) {
            VoicForm_speak(self)
        }
        #[inline]
        pub unsafe fn quiet(&mut self) {
            VoicForm_quiet(self)
        }
        #[inline]
        pub unsafe fn noteOn(&mut self, amplitude: f64) {
            VoicForm_noteOn1(self, amplitude)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            VoicForm_VoicForm(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN8VoicFormD1Ev"]
        pub fn VoicForm_VoicForm_destructor(this: *mut root::VoicForm);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN8VoicForm12setFrequencyEd"]
        pub fn VoicForm_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN8VoicForm6noteOnEdd"]
        pub fn VoicForm_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN8VoicForm7noteOffEd"]
        pub fn VoicForm_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN8VoicForm4tickEv"]
        pub fn VoicForm_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN8VoicForm13controlChangeEid"]
        pub fn VoicForm_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Voicer {
        pub _base: root::Stk,
        pub nVoices: ::std::os::raw::c_int,
        pub maxVoices: ::std::os::raw::c_int,
        pub voices: *mut root::Voicer_Voice,
        pub tags: ::std::os::raw::c_long,
        pub muteTime: ::std::os::raw::c_int,
        pub lastOutput: f64,
        pub lastOutputLeft: f64,
        pub lastOutputRight: f64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Voicer_Voice {
        pub instrument: *mut root::Instrmnt,
        pub tag: ::std::os::raw::c_long,
        pub noteNumber: f64,
        pub frequency: f64,
        pub sounding: ::std::os::raw::c_int,
        pub channel: ::std::os::raw::c_int,
    }
    extern "C" {
        #[doc = "! Add an instrument with an optional channel number to the voice manager."]
        #[doc = "*!"]
        #[doc = "A set of instruments can be grouped by channel number and"]
        #[doc = "controlled via the functions which take a channel number argument."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Voicer13addInstrumentEP8Instrmnti"]
        pub fn Voicer_addInstrument(
            this: *mut root::Voicer,
            instrument: *mut root::Instrmnt,
            channel: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[doc = "! Remove the given instrument pointer from the voice manager\'s control."]
        #[doc = "*!"]
        #[doc = "It is important that any instruments which are to be deleted by"]
        #[doc = "the user while the voice manager is running be first removed from"]
        #[doc = "the manager\'s control via this function!!"]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Voicer16removeInstrumentEP8Instrmnt"]
        pub fn Voicer_removeInstrument(this: *mut root::Voicer, instrument: *mut root::Instrmnt);
    }
    extern "C" {
        #[doc = "! Initiate a noteOn event with the given note number and amplitude and return a unique note tag."]
        #[doc = "*!"]
        #[doc = "Send the noteOn message to the first available unused voice."]
        #[doc = "If all voices are sounding, the oldest voice is interrupted and"]
        #[doc = "sent the noteOn message.  If the optional channel argument is"]
        #[doc = "non-zero, only voices on that channel are used.  If no voices are"]
        #[doc = "found for a specified non-zero channel value, the function returns"]
        #[doc = "-1.  The amplitude value should be in the range 0.0 - 128.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Voicer6noteOnEddi"]
        pub fn Voicer_noteOn(
            this: *mut root::Voicer,
            noteNumber: f64,
            amplitude: f64,
            channel: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        #[doc = "! Send a noteOff to all voices having the given noteNumber and optional channel (default channel = 0)."]
        #[doc = "*!"]
        #[doc = "The amplitude value should be in the range 0.0 - 128.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Voicer7noteOffEddi"]
        pub fn Voicer_noteOff(
            this: *mut root::Voicer,
            noteNumber: f64,
            amplitude: f64,
            channel: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[doc = "! Send a noteOff to the voice with the given note tag."]
        #[doc = "*!"]
        #[doc = "The amplitude value should be in the range 0.0 - 128.0."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Voicer7noteOffEld"]
        pub fn Voicer_noteOff1(
            this: *mut root::Voicer,
            tag: ::std::os::raw::c_long,
            amplitude: f64,
        );
    }
    extern "C" {
        #[doc = "! Send a frequency update message to all voices assigned to the optional channel argument (default channel = 0)."]
        #[doc = "*!"]
        #[doc = "The \\e noteNumber argument corresponds to a MIDI note number, though it is a floating-point value and can range beyond the normal 0-127 range."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Voicer12setFrequencyEdi"]
        pub fn Voicer_setFrequency(
            this: *mut root::Voicer,
            noteNumber: f64,
            channel: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[doc = "! Send a frequency update message to the voice with the given note tag."]
        #[doc = "*!"]
        #[doc = "The \\e noteNumber argument corresponds to a MIDI note number, though it is a floating-point value and can range beyond the normal 0-127 range."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN6Voicer12setFrequencyEld"]
        pub fn Voicer_setFrequency1(
            this: *mut root::Voicer,
            tag: ::std::os::raw::c_long,
            noteNumber: f64,
        );
    }
    extern "C" {
        #[doc = "! Send a pitchBend message to all voices assigned to the optional channel argument (default channel = 0)."]
        #[link_name = "\u{1}_ZN6Voicer9pitchBendEdi"]
        pub fn Voicer_pitchBend(
            this: *mut root::Voicer,
            value: f64,
            channel: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[doc = "! Send a pitchBend message to the voice with the given note tag."]
        #[link_name = "\u{1}_ZN6Voicer9pitchBendEld"]
        pub fn Voicer_pitchBend1(this: *mut root::Voicer, tag: ::std::os::raw::c_long, value: f64);
    }
    extern "C" {
        #[doc = "! Send a controlChange to all instruments assigned to the optional channel argument (default channel = 0)."]
        #[link_name = "\u{1}_ZN6Voicer13controlChangeEidi"]
        pub fn Voicer_controlChange(
            this: *mut root::Voicer,
            number: ::std::os::raw::c_int,
            value: f64,
            channel: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[doc = "! Send a controlChange to the voice with the given note tag."]
        #[link_name = "\u{1}_ZN6Voicer13controlChangeElid"]
        pub fn Voicer_controlChange1(
            this: *mut root::Voicer,
            tag: ::std::os::raw::c_long,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    extern "C" {
        #[doc = "! Send a noteOff message to all existing voices."]
        #[link_name = "\u{1}_ZN6Voicer7silenceEv"]
        pub fn Voicer_silence(this: *mut root::Voicer);
    }
    extern "C" {
        #[doc = "! Mix the output for all sounding voices."]
        #[link_name = "\u{1}_ZN6Voicer4tickEv"]
        pub fn Voicer_tick(this: *mut root::Voicer) -> f64;
    }
    extern "C" {
        #[doc = "! Compute \\e vectorSize output mixes and return them in \\e vector."]
        #[link_name = "\u{1}_ZN6Voicer4tickEPdj"]
        pub fn Voicer_tick1(
            this: *mut root::Voicer,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64;
    }
    extern "C" {
        #[doc = "! Return the last output value."]
        #[link_name = "\u{1}_ZNK6Voicer7lastOutEv"]
        pub fn Voicer_lastOut(this: *const root::Voicer) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last left output value."]
        #[link_name = "\u{1}_ZNK6Voicer11lastOutLeftEv"]
        pub fn Voicer_lastOutLeft(this: *const root::Voicer) -> f64;
    }
    extern "C" {
        #[doc = "! Return the last right output value."]
        #[link_name = "\u{1}_ZNK6Voicer12lastOutRightEv"]
        pub fn Voicer_lastOutRight(this: *const root::Voicer) -> f64;
    }
    extern "C" {
        #[doc = "! Class constructor taking the maximum number of instruments to control and an optional note decay time (in seconds)."]
        #[link_name = "\u{1}_ZN6VoicerC1Eid"]
        pub fn Voicer_Voicer(
            this: *mut root::Voicer,
            maxInstruments: ::std::os::raw::c_int,
            decayTime: f64,
        );
    }
    impl Voicer {
        #[inline]
        pub unsafe fn addInstrument(
            &mut self,
            instrument: *mut root::Instrmnt,
            channel: ::std::os::raw::c_int,
        ) {
            Voicer_addInstrument(self, instrument, channel)
        }
        #[inline]
        pub unsafe fn removeInstrument(&mut self, instrument: *mut root::Instrmnt) {
            Voicer_removeInstrument(self, instrument)
        }
        #[inline]
        pub unsafe fn noteOn(
            &mut self,
            noteNumber: f64,
            amplitude: f64,
            channel: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long {
            Voicer_noteOn(self, noteNumber, amplitude, channel)
        }
        #[inline]
        pub unsafe fn noteOff(
            &mut self,
            noteNumber: f64,
            amplitude: f64,
            channel: ::std::os::raw::c_int,
        ) {
            Voicer_noteOff(self, noteNumber, amplitude, channel)
        }
        #[inline]
        pub unsafe fn noteOff1(&mut self, tag: ::std::os::raw::c_long, amplitude: f64) {
            Voicer_noteOff1(self, tag, amplitude)
        }
        #[inline]
        pub unsafe fn setFrequency(&mut self, noteNumber: f64, channel: ::std::os::raw::c_int) {
            Voicer_setFrequency(self, noteNumber, channel)
        }
        #[inline]
        pub unsafe fn setFrequency1(&mut self, tag: ::std::os::raw::c_long, noteNumber: f64) {
            Voicer_setFrequency1(self, tag, noteNumber)
        }
        #[inline]
        pub unsafe fn pitchBend(&mut self, value: f64, channel: ::std::os::raw::c_int) {
            Voicer_pitchBend(self, value, channel)
        }
        #[inline]
        pub unsafe fn pitchBend1(&mut self, tag: ::std::os::raw::c_long, value: f64) {
            Voicer_pitchBend1(self, tag, value)
        }
        #[inline]
        pub unsafe fn controlChange(
            &mut self,
            number: ::std::os::raw::c_int,
            value: f64,
            channel: ::std::os::raw::c_int,
        ) {
            Voicer_controlChange(self, number, value, channel)
        }
        #[inline]
        pub unsafe fn controlChange1(
            &mut self,
            tag: ::std::os::raw::c_long,
            number: ::std::os::raw::c_int,
            value: f64,
        ) {
            Voicer_controlChange1(self, tag, number, value)
        }
        #[inline]
        pub unsafe fn silence(&mut self) {
            Voicer_silence(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self) -> f64 {
            Voicer_tick(self)
        }
        #[inline]
        pub unsafe fn tick1(
            &mut self,
            vector: *mut f64,
            vectorSize: ::std::os::raw::c_uint,
        ) -> *mut f64 {
            Voicer_tick1(self, vector, vectorSize)
        }
        #[inline]
        pub unsafe fn lastOut(&self) -> f64 {
            Voicer_lastOut(self)
        }
        #[inline]
        pub unsafe fn lastOutLeft(&self) -> f64 {
            Voicer_lastOutLeft(self)
        }
        #[inline]
        pub unsafe fn lastOutRight(&self) -> f64 {
            Voicer_lastOutRight(self)
        }
        #[inline]
        pub unsafe fn new(maxInstruments: ::std::os::raw::c_int, decayTime: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Voicer_Voicer(&mut __bindgen_tmp, maxInstruments, decayTime);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6VoicerD1Ev"]
        pub fn Voicer_Voicer_destructor(this: *mut root::Voicer);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Whistle {
        pub _base: root::Instrmnt,
        pub tempVectorP: *mut root::Vector3D,
        pub tempVector: *mut root::Vector3D,
        pub onepole: root::OnePole,
        pub noise: root::Noise,
        pub envelope: root::Envelope,
        pub can: *mut root::Sphere,
        pub pea: *mut root::Sphere,
        pub bumper: *mut root::Sphere,
        pub sine: *mut root::WaveLoop,
        pub baseFrequency: f64,
        pub maxPressure: f64,
        pub noiseGain: f64,
        pub fippleFreqMod: f64,
        pub fippleGainMod: f64,
        pub blowFreqMod: f64,
        pub tickSize: f64,
        pub canLoss: f64,
        pub subSample: ::std::os::raw::c_int,
        pub subSampCount: ::std::os::raw::c_int,
    }
    extern "C" {
        #[doc = "! Reset and clear all internal state."]
        #[link_name = "\u{1}_ZN7Whistle5clearEv"]
        pub fn Whistle_clear(this: *mut root::Whistle);
    }
    extern "C" {
        #[doc = "! Apply breath velocity to instrument with given amplitude and rate of increase."]
        #[link_name = "\u{1}_ZN7Whistle12startBlowingEdd"]
        pub fn Whistle_startBlowing(this: *mut root::Whistle, amplitude: f64, rate: f64);
    }
    extern "C" {
        #[doc = "! Decrease breath velocity with given rate of decrease."]
        #[link_name = "\u{1}_ZN7Whistle11stopBlowingEd"]
        pub fn Whistle_stopBlowing(this: *mut root::Whistle, rate: f64);
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN7WhistleC1Ev"]
        pub fn Whistle_Whistle(this: *mut root::Whistle);
    }
    impl Whistle {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Whistle_clear(self)
        }
        #[inline]
        pub unsafe fn startBlowing(&mut self, amplitude: f64, rate: f64) {
            Whistle_startBlowing(self, amplitude, rate)
        }
        #[inline]
        pub unsafe fn stopBlowing(&mut self, rate: f64) {
            Whistle_stopBlowing(self, rate)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Whistle_Whistle(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7WhistleD1Ev"]
        pub fn Whistle_Whistle_destructor(this: *mut root::Whistle);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN7Whistle12setFrequencyEd"]
        pub fn Whistle_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN7Whistle6noteOnEdd"]
        pub fn Whistle_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Stop a note with the given amplitude (speed of decay)."]
        #[link_name = "\u{1}_ZN7Whistle7noteOffEd"]
        pub fn Whistle_noteOff(this: *mut ::std::os::raw::c_void, amplitude: f64);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN7Whistle4tickEv"]
        pub fn Whistle_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    extern "C" {
        #[doc = "! Perform the control change specified by \\e number and \\e value (0.0 - 128.0)."]
        #[link_name = "\u{1}_ZN7Whistle13controlChangeEid"]
        pub fn Whistle_controlChange(
            this: *mut ::std::os::raw::c_void,
            number: ::std::os::raw::c_int,
            value: f64,
        );
    }
    #[repr(C)]
    pub struct Wurley {
        pub _base: root::FM,
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN6WurleyC1Ev"]
        pub fn Wurley_Wurley(this: *mut root::Wurley);
    }
    impl Wurley {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Wurley_Wurley(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN6WurleyD1Ev"]
        pub fn Wurley_Wurley_destructor(this: *mut root::Wurley);
    }
    extern "C" {
        #[doc = "! Set instrument parameters for a particular frequency."]
        #[link_name = "\u{1}_ZN6Wurley12setFrequencyEd"]
        pub fn Wurley_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Start a note with the given frequency and amplitude."]
        #[link_name = "\u{1}_ZN6Wurley6noteOnEdd"]
        pub fn Wurley_noteOn(this: *mut ::std::os::raw::c_void, frequency: f64, amplitude: f64);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6Wurley13controlChangeEid"]
        pub fn Wurley_controlChange(
            this: *mut ::std::os::raw::c_void,
            which: ::std::os::raw::c_int,
            value: f64,
        );
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN6Wurley4tickEv"]
        pub fn Wurley_tick(this: *mut ::std::os::raw::c_void) -> f64;
    }
    #[repr(C)]
    pub struct BLT__bindgen_vtable(::std::os::raw::c_void);
    #[doc = "\\brief STK band-limited impulse train class."]
    #[doc = ""]
    #[doc = "This class generates a band-limited impulse train using a"]
    #[doc = "closed-form algorithm reported by Stilson and Smith in \"Alias-Free"]
    #[doc = "Digital Synthesis of Classic Analog Waveforms\", 1996.  The user"]
    #[doc = "can specify both the fundamental frequency of the impulse train"]
    #[doc = "and the number of harmonics contained in the resulting signal."]
    #[doc = ""]
    #[doc = "The signal is normalized so that the peak value is +/-1.0."]
    #[doc = ""]
    #[doc = "If nHarmonics is 0, then the signal will contain all harmonics up"]
    #[doc = "to half the sample rate.  Note, however, that this setting may"]
    #[doc = "produce aliasing in the signal when the frequency is changing (no"]
    #[doc = "automatic modification of the number of harmonics is performed by"]
    #[doc = "the setFrequency() function)."]
    #[doc = ""]
    #[doc = "Original code by Robin Davies, 2005."]
    #[doc = "Revisions by Gary Scavone for STK, 2005."]
    #[repr(C)]
    #[derive(Debug)]
    pub struct BLT {
        pub vtable_: *const BLT__bindgen_vtable,
        pub m_phase: f64,
        pub m_freq: f64,
        pub m_harmonics: ::std::os::raw::c_long,
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct Blit {
        pub _base: root::BLT,
        pub nHarmonics_: ::std::os::raw::c_uint,
        pub m_: ::std::os::raw::c_uint,
        pub rate_: f64,
        pub phase_: f64,
        pub p_: f64,
    }
    extern "C" {
        #[doc = "! Resets the oscillator state and phase to 0."]
        #[link_name = "\u{1}_ZN4Blit5resetEv"]
        pub fn Blit_reset(this: *mut root::Blit);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN4Blit4tickEv"]
        pub fn Blit_tick(this: *mut root::Blit) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4Blit15updateHarmonicsEv"]
        pub fn Blit_updateHarmonics(this: *mut root::Blit);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN4Blit13computeSampleEv"]
        pub fn Blit_computeSample(this: *mut root::Blit) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor that initializes BLIT frequency to 220 Hz."]
        #[link_name = "\u{1}_ZN4BlitC1Ed"]
        pub fn Blit_Blit(this: *mut root::Blit, frequency: f64);
    }
    impl Blit {
        #[inline]
        pub unsafe fn reset(&mut self) {
            Blit_reset(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self) -> f64 {
            Blit_tick(self)
        }
        #[inline]
        pub unsafe fn updateHarmonics(&mut self) {
            Blit_updateHarmonics(self)
        }
        #[inline]
        pub unsafe fn computeSample(&mut self) -> f64 {
            Blit_computeSample(self)
        }
        #[inline]
        pub unsafe fn new(frequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Blit_Blit(&mut __bindgen_tmp, frequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN4BlitD1Ev"]
        pub fn Blit_Blit_destructor(this: *mut root::Blit);
    }
    extern "C" {
        #[doc = "! Set the impulse train rate in terms of a frequency in Hz."]
        #[link_name = "\u{1}_ZN4Blit12setFrequencyEd"]
        pub fn Blit_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Set the number of harmonics generated in the signal."]
        #[doc = "*!"]
        #[doc = "This function sets the number of harmonics contained in the"]
        #[doc = "resulting signal.  It is equivalent to (2 * M) + 1 in the BLIT"]
        #[doc = "algorithm.  The default value of 0 sets the algorithm for maximum"]
        #[doc = "harmonic content (harmonics up to half the sample rate).  This"]
        #[doc = "parameter is not checked against the current sample rate and"]
        #[doc = "fundamental frequency.  Thus, aliasing can result if one or more"]
        #[doc = "harmonics for a given fundamental frequency exceeds fs / 2.  This"]
        #[doc = "behavior was chosen over the potentially more problematic solution"]
        #[doc = "of automatically modifying the M parameter, which can produce"]
        #[doc = "audible clicks in the signal."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN4Blit12setHarmonicsEj"]
        pub fn Blit_setHarmonics(
            this: *mut ::std::os::raw::c_void,
            nHarmonics: ::std::os::raw::c_uint,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct BlitSaw {
        pub _base: root::BLT,
        pub nHarmonics_: ::std::os::raw::c_uint,
        pub m_: ::std::os::raw::c_uint,
        pub rate_: f64,
        pub phase_: f64,
        pub p_: f64,
        pub C2_: f64,
        pub a_: f64,
        pub state_: f64,
    }
    extern "C" {
        #[doc = "! Resets the oscillator state and phase to 0."]
        #[link_name = "\u{1}_ZN7BlitSaw5resetEv"]
        pub fn BlitSaw_reset(this: *mut root::BlitSaw);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN7BlitSaw4tickEv"]
        pub fn BlitSaw_tick(this: *mut root::BlitSaw) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7BlitSaw15updateHarmonicsEv"]
        pub fn BlitSaw_updateHarmonics(this: *mut root::BlitSaw);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7BlitSaw13computeSampleEv"]
        pub fn BlitSaw_computeSample(this: *mut root::BlitSaw) -> f64;
    }
    extern "C" {
        #[doc = "! Class constructor."]
        #[link_name = "\u{1}_ZN7BlitSawC1Ed"]
        pub fn BlitSaw_BlitSaw(this: *mut root::BlitSaw, frequency: f64);
    }
    impl BlitSaw {
        #[inline]
        pub unsafe fn reset(&mut self) {
            BlitSaw_reset(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self) -> f64 {
            BlitSaw_tick(self)
        }
        #[inline]
        pub unsafe fn updateHarmonics(&mut self) {
            BlitSaw_updateHarmonics(self)
        }
        #[inline]
        pub unsafe fn computeSample(&mut self) -> f64 {
            BlitSaw_computeSample(self)
        }
        #[inline]
        pub unsafe fn new(frequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            BlitSaw_BlitSaw(&mut __bindgen_tmp, frequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN7BlitSawD1Ev"]
        pub fn BlitSaw_BlitSaw_destructor(this: *mut root::BlitSaw);
    }
    extern "C" {
        #[doc = "! Set the sawtooth oscillator rate in terms of a frequency in Hz."]
        #[link_name = "\u{1}_ZN7BlitSaw12setFrequencyEd"]
        pub fn BlitSaw_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Set the number of harmonics generated in the signal."]
        #[doc = "*!"]
        #[doc = "This function sets the number of harmonics contained in the"]
        #[doc = "resulting signal.  It is equivalent to (2 * M) + 1 in the BLIT"]
        #[doc = "algorithm.  The default value of 0 sets the algorithm for maximum"]
        #[doc = "harmonic content (harmonics up to half the sample rate).  This"]
        #[doc = "parameter is not checked against the current sample rate and"]
        #[doc = "fundamental frequency.  Thus, aliasing can result if one or more"]
        #[doc = "harmonics for a given fundamental frequency exceeds fs / 2.  This"]
        #[doc = "behavior was chosen over the potentially more problematic solution"]
        #[doc = "of automatically modifying the M parameter, which can produce"]
        #[doc = "audible clicks in the signal."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN7BlitSaw12setHarmonicsEj"]
        pub fn BlitSaw_setHarmonics(
            this: *mut ::std::os::raw::c_void,
            nHarmonics: ::std::os::raw::c_uint,
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct BlitSquare {
        pub _base: root::BLT,
        pub nHarmonics_: ::std::os::raw::c_uint,
        pub m_: ::std::os::raw::c_uint,
        pub rate_: f64,
        pub phase_: f64,
        pub a_: f64,
        pub p_: f64,
        pub offset_: f64,
        pub m_boutput: f64,
        pub m_output: f64,
        pub dcbState_: f64,
    }
    extern "C" {
        #[doc = "! Resets the oscillator state and phase to 0."]
        #[link_name = "\u{1}_ZN10BlitSquare5resetEv"]
        pub fn BlitSquare_reset(this: *mut root::BlitSquare);
    }
    extern "C" {
        #[doc = "! Compute one output sample."]
        #[link_name = "\u{1}_ZN10BlitSquare4tickEv"]
        pub fn BlitSquare_tick(this: *mut root::BlitSquare) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10BlitSquare15updateHarmonicsEv"]
        pub fn BlitSquare_updateHarmonics(this: *mut root::BlitSquare);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10BlitSquare13computeSampleEv"]
        pub fn BlitSquare_computeSample(this: *mut root::BlitSquare) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor that initializes BLIT frequency to 220 Hz."]
        #[link_name = "\u{1}_ZN10BlitSquareC1Ed"]
        pub fn BlitSquare_BlitSquare(this: *mut root::BlitSquare, frequency: f64);
    }
    impl BlitSquare {
        #[inline]
        pub unsafe fn reset(&mut self) {
            BlitSquare_reset(self)
        }
        #[inline]
        pub unsafe fn tick(&mut self) -> f64 {
            BlitSquare_tick(self)
        }
        #[inline]
        pub unsafe fn updateHarmonics(&mut self) {
            BlitSquare_updateHarmonics(self)
        }
        #[inline]
        pub unsafe fn computeSample(&mut self) -> f64 {
            BlitSquare_computeSample(self)
        }
        #[inline]
        pub unsafe fn new(frequency: f64) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            BlitSquare_BlitSquare(&mut __bindgen_tmp, frequency);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! Class destructor."]
        #[link_name = "\u{1}_ZN10BlitSquareD1Ev"]
        pub fn BlitSquare_BlitSquare_destructor(this: *mut root::BlitSquare);
    }
    extern "C" {
        #[doc = "! Set the impulse train rate in terms of a frequency in Hz."]
        #[link_name = "\u{1}_ZN10BlitSquare12setFrequencyEd"]
        pub fn BlitSquare_setFrequency(this: *mut ::std::os::raw::c_void, frequency: f64);
    }
    extern "C" {
        #[doc = "! Set the number of harmonics generated in the signal."]
        #[doc = "*!"]
        #[doc = "This function sets the number of harmonics contained in the"]
        #[doc = "resulting signal.  It is equivalent to (2 * M) + 1 in the BLIT"]
        #[doc = "algorithm.  The default value of 0 sets the algorithm for maximum"]
        #[doc = "harmonic content (harmonics up to half the sample rate).  This"]
        #[doc = "parameter is not checked against the current sample rate and"]
        #[doc = "fundamental frequency.  Thus, aliasing can result if one or more"]
        #[doc = "harmonics for a given fundamental frequency exceeds fs / 2.  This"]
        #[doc = "behavior was chosen over the potentially more problematic solution"]
        #[doc = "of automatically modifying the M parameter, which can produce"]
        #[doc = "audible clicks in the signal."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN10BlitSquare12setHarmonicsEj"]
        pub fn BlitSquare_setHarmonics(
            this: *mut ::std::os::raw::c_void,
            nHarmonics: ::std::os::raw::c_uint,
        );
    }
    pub mod stk {
        
        use self::super::super::root;
        #[doc = "\\brief A standard MIDI file reading/parsing class."]
        #[doc = ""]
        #[doc = "This class can be used to read events from a standard MIDI file."]
        #[doc = "Event bytes are copied to a C++ vector and must be subsequently"]
        #[doc = "interpreted by the user.  The function getNextMidiEvent() skips"]
        #[doc = "meta and sysex events, returning only MIDI channel messages."]
        #[doc = "Event delta-times are returned in the form of \"ticks\" and a"]
        #[doc = "function is provided to determine the current \"seconds per tick\"."]
        #[doc = "Tempo changes are internally tracked by the class and reflected in"]
        #[doc = "the values returned by the function getTickSeconds()."]
        #[doc = ""]
        #[doc = "by Gary P. Scavone, 2003 - 2010."]
        #[repr(C)]
        pub struct MidiFileIn {
            pub _base: root::Stk,
            pub file_: root::std::ifstream,
            pub nTracks_: ::std::os::raw::c_uint,
            pub format_: ::std::os::raw::c_int,
            pub division_: ::std::os::raw::c_int,
            pub usingTimeCode_: bool,
            pub tickSeconds_: root::std::vector,
            pub trackPointers_: root::std::vector,
            pub trackOffsets_: root::std::vector,
            pub trackLengths_: root::std::vector,
            pub trackStatus_: root::std::vector,
            pub tempoEvents_: root::std::vector,
            pub trackCounters_: root::std::vector,
            pub trackTempoIndex_: root::std::vector,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MidiFileIn_TempoChange {
            pub count: ::std::os::raw::c_ulong,
            pub tickSeconds: f64,
        }
        extern "C" {
            #[doc = "! Move the specified track event reader to the beginning of its track."]
            #[doc = "*!"]
            #[doc = "The relevant track tempo value is reset as well.  If an invalid"]
            #[doc = "track number is specified, an StkError exception will be thrown."]
            #[doc = "*/"]
            #[link_name = "\u{1}_ZN3stk10MidiFileIn11rewindTrackEj"]
            pub fn MidiFileIn_rewindTrack(
                this: *mut root::stk::MidiFileIn,
                track: ::std::os::raw::c_uint,
            );
        }
        extern "C" {
            #[doc = "! Get the current value, in seconds, of delta-time ticks for the specified track."]
            #[doc = "*!"]
            #[doc = "This value can change as events are read (via \"Set Tempo\""]
            #[doc = "Meta-Events).  Therefore, one should call this function after"]
            #[doc = "every call to getNextEvent() or getNextMidiEvent().  If an"]
            #[doc = "invalid track number is specified, an StkError exception will be"]
            #[doc = "thrown."]
            #[doc = "*/"]
            #[link_name = "\u{1}_ZN3stk10MidiFileIn14getTickSecondsEj"]
            pub fn MidiFileIn_getTickSeconds(
                this: *mut root::stk::MidiFileIn,
                track: ::std::os::raw::c_uint,
            ) -> f64;
        }
        extern "C" {
            #[doc = "! Fill the user-provided vector with the next event in the specified track and return the event delta-time in ticks."]
            #[doc = "*!"]
            #[doc = "MIDI File events consist of a delta time and a sequence of event"]
            #[doc = "bytes.  This function returns the delta-time value and writes"]
            #[doc = "the subsequent event bytes directly to the event vector.  The"]
            #[doc = "user must parse the event bytes in accordance with the MIDI File"]
            #[doc = "Specification.  All returned MIDI channel events are complete"]
            #[doc = "... a status byte is provided even when running status is used"]
            #[doc = "in the file.  If the track has reached its end, no bytes will be"]
            #[doc = "written and the event vector size will be zero.  If an invalid"]
            #[doc = "track number is specified or an error occurs while reading the"]
            #[doc = "file, an StkError exception will be thrown."]
            #[doc = "*/"]
            #[link_name = "\u{1}_ZN3stk10MidiFileIn12getNextEventEPSt6vectorIhSaIhEEj"]
            pub fn MidiFileIn_getNextEvent(
                this: *mut root::stk::MidiFileIn,
                event: *mut root::std::vector,
                track: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_ulong;
        }
        extern "C" {
            #[doc = "! Fill the user-provided vector with the next MIDI channel event in the specified track and return the event delta time in ticks."]
            #[doc = "*!"]
            #[doc = "All returned MIDI events are complete ... a status byte is"]
            #[doc = "provided even when running status is used in the file.  Meta and"]
            #[doc = "sysex events in the track are skipped though \"Set Tempo\" events"]
            #[doc = "are properly parsed for use by the getTickSeconds() function."]
            #[doc = "If the track has reached its end, no bytes will be written and"]
            #[doc = "the event vector size will be zero.  If an invalid track number"]
            #[doc = "is specified or an error occurs while reading the file, an"]
            #[doc = "StkError exception will be thrown."]
            #[doc = "*/"]
            #[link_name = "\u{1}_ZN3stk10MidiFileIn16getNextMidiEventEPSt6vectorIhSaIhEEj"]
            pub fn MidiFileIn_getNextMidiEvent(
                this: *mut root::stk::MidiFileIn,
                midiEvent: *mut root::std::vector,
                track: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_ulong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3stk10MidiFileIn18readVariableLengthEPm"]
            pub fn MidiFileIn_readVariableLength(
                this: *mut root::stk::MidiFileIn,
                value: *mut ::std::os::raw::c_ulong,
            ) -> bool;
        }
        extern "C" {
            #[doc = "! Default constructor."]
            #[doc = "*!"]
            #[doc = "If an error occurs while opening or parsing the file header, an"]
            #[doc = "StkError exception will be thrown."]
            #[doc = "*/"]
            #[link_name = "\u{1}_ZN3stk10MidiFileInC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn MidiFileIn_MidiFileIn(
                this: *mut root::stk::MidiFileIn,
                fileName: root::std::__cxx11::string,
            );
        }
        impl MidiFileIn {
            #[inline]
            pub unsafe fn rewindTrack(&mut self, track: ::std::os::raw::c_uint) {
                MidiFileIn_rewindTrack(self, track)
            }
            #[inline]
            pub unsafe fn getTickSeconds(&mut self, track: ::std::os::raw::c_uint) -> f64 {
                MidiFileIn_getTickSeconds(self, track)
            }
            #[inline]
            pub unsafe fn getNextEvent(
                &mut self,
                event: *mut root::std::vector,
                track: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_ulong {
                MidiFileIn_getNextEvent(self, event, track)
            }
            #[inline]
            pub unsafe fn getNextMidiEvent(
                &mut self,
                midiEvent: *mut root::std::vector,
                track: ::std::os::raw::c_uint,
            ) -> ::std::os::raw::c_ulong {
                MidiFileIn_getNextMidiEvent(self, midiEvent, track)
            }
            #[inline]
            pub unsafe fn readVariableLength(
                &mut self,
                value: *mut ::std::os::raw::c_ulong,
            ) -> bool {
                MidiFileIn_readVariableLength(self, value)
            }
            #[inline]
            pub unsafe fn new(fileName: root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                MidiFileIn_MidiFileIn(&mut __bindgen_tmp, fileName);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[doc = "! Class destructor."]
            #[link_name = "\u{1}_ZN3stk10MidiFileInD1Ev"]
            pub fn MidiFileIn_MidiFileIn_destructor(this: *mut root::stk::MidiFileIn);
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_31 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_32 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_33 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_34 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_35 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_36 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_37 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_38 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_39 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_40 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_41 {
        pub _address: u8,
    }
    pub type size_type = root::size_type;
    //pub type size_type = usize;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_43 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_44 {
        pub _address: u8,
    }
    //pub type size_type = usize;
    pub type iterator = root::std::_Bit_iterator;
    pub type char_type = ::std::os::raw::c_char;
    pub type int_type = root::int_type;
    pub type int_type = ::std::os::raw::c_int;
    //pub type char_type = u32;
    pub type int_type = root::int_type;
    pub type int_type = root::wint_t;
}
