/* automatically generated by rust-bindgen */

pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MEMORY_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const sz_VOID: u32 = 0;
pub const sz_WORD: u32 = 4;
pub const kindof_VOID: u32 = 0;
pub const kindof_INT: u32 = 1;
pub const kindof_FLOAT: u32 = 2;
pub const kindof_COMPLEX: u32 = 3;
pub const kindof_VEC3: u32 = 4;
pub const kindof_VEC4: u32 = 5;
pub const SILENCE: f64 = 0.0;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const ONE_PI: f64 = 3.141592653589793;
pub const TWO_PI: f64 = 6.283185307179586;
pub const SQRT2: f64 = 1.4142135623730951;
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_CKCOMPLEX {
    pub re: f64,
    pub im: f64,
}
#[test]
fn bindgen_test_layout_t_CKCOMPLEX() {
    assert_eq!(
        ::std::mem::size_of::<t_CKCOMPLEX>(),
        16usize,
        concat!("Size of: ", stringify!(t_CKCOMPLEX))
    );
    assert_eq!(
        ::std::mem::align_of::<t_CKCOMPLEX>(),
        8usize,
        concat!("Alignment of ", stringify!(t_CKCOMPLEX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKCOMPLEX),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).im as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKCOMPLEX),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_CKPOLAR {
    pub modulus: f64,
    pub phase: f64,
}
#[test]
fn bindgen_test_layout_t_CKPOLAR() {
    assert_eq!(
        ::std::mem::size_of::<t_CKPOLAR>(),
        16usize,
        concat!("Size of: ", stringify!(t_CKPOLAR))
    );
    assert_eq!(
        ::std::mem::align_of::<t_CKPOLAR>(),
        8usize,
        concat!("Alignment of ", stringify!(t_CKPOLAR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).modulus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKPOLAR),
            "::",
            stringify!(modulus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).phase as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKPOLAR),
            "::",
            stringify!(phase)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_CKVEC3 {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_t_CKVEC3() {
    assert_eq!(
        ::std::mem::size_of::<t_CKVEC3>(),
        24usize,
        concat!("Size of: ", stringify!(t_CKVEC3))
    );
    assert_eq!(
        ::std::mem::align_of::<t_CKVEC3>(),
        8usize,
        concat!("Alignment of ", stringify!(t_CKVEC3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVEC3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVEC3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVEC3),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_CKVEC4 {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub w: f64,
}
#[test]
fn bindgen_test_layout_t_CKVEC4() {
    assert_eq!(
        ::std::mem::size_of::<t_CKVEC4>(),
        32usize,
        concat!("Size of: ", stringify!(t_CKVEC4))
    );
    assert_eq!(
        ::std::mem::align_of::<t_CKVEC4>(),
        8usize,
        concat!("Alignment of ", stringify!(t_CKVEC4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVEC4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVEC4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVEC4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).w as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVEC4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_CKVECTOR {
    pub N: ::std::os::raw::c_ulong,
    pub values: *mut f64,
}
#[test]
fn bindgen_test_layout_t_CKVECTOR() {
    assert_eq!(
        ::std::mem::size_of::<t_CKVECTOR>(),
        16usize,
        concat!("Size of: ", stringify!(t_CKVECTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<t_CKVECTOR>(),
        8usize,
        concat!("Alignment of ", stringify!(t_CKVECTOR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).N as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVECTOR),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).values as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKVECTOR),
            "::",
            stringify!(values)
        )
    );
}
pub type c_str = *mut ::std::os::raw::c_char;
pub type c_constr = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_CKCOMPLEX_SAMPLE {
    pub re: f32,
    pub im: f32,
}
#[test]
fn bindgen_test_layout_t_CKCOMPLEX_SAMPLE() {
    assert_eq!(
        ::std::mem::size_of::<t_CKCOMPLEX_SAMPLE>(),
        8usize,
        concat!("Size of: ", stringify!(t_CKCOMPLEX_SAMPLE))
    );
    assert_eq!(
        ::std::mem::align_of::<t_CKCOMPLEX_SAMPLE>(),
        4usize,
        concat!("Alignment of ", stringify!(t_CKCOMPLEX_SAMPLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKCOMPLEX_SAMPLE),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).im as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_CKCOMPLEX_SAMPLE),
            "::",
            stringify!(im)
        )
    );
}
pub type U_boolList = *mut U_boolList_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct U_boolList_ {
    pub head: ::std::os::raw::c_ulong,
    pub tail: U_boolList,
}
#[test]
fn bindgen_test_layout_U_boolList_() {
    assert_eq!(
        ::std::mem::size_of::<U_boolList_>(),
        16usize,
        concat!("Size of: ", stringify!(U_boolList_))
    );
    assert_eq!(
        ::std::mem::align_of::<U_boolList_>(),
        8usize,
        concat!("Alignment of ", stringify!(U_boolList_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<U_boolList_>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(U_boolList_),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<U_boolList_>())).tail as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(U_boolList_),
            "::",
            stringify!(tail)
        )
    );
}
extern "C" {
    pub fn checked_malloc(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cc_str(arg1: *mut ::std::os::raw::c_char) -> c_str;
}
extern "C" {
    pub fn U_BoolList(head: ::std::os::raw::c_ulong, tail: U_boolList) -> U_boolList;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S_Symbol_ {
    _unused: [u8; 0],
}
pub type S_Symbol = *mut S_Symbol_;
extern "C" {
    pub fn insert_symbol(arg1: c_constr) -> S_Symbol;
}
extern "C" {
    pub fn S_name(arg1: S_Symbol) -> c_str;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAB_table_ {
    _unused: [u8; 0],
}
pub type S_table = *mut TAB_table_;
extern "C" {
    pub fn S_empty() -> S_table;
}
extern "C" {
    pub fn S_empty2(size: ::std::os::raw::c_uint) -> S_table;
}
extern "C" {
    pub fn S_enter(t: S_table, sym: S_Symbol, value: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn S_enter2(t: S_table, str: c_constr, value: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn S_look(t: S_table, sym: S_Symbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn S_look2(t: S_table, str: c_constr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn S_beginScope(t: S_table);
}
extern "C" {
    pub fn S_endScope(t: S_table);
}
extern "C" {
    pub fn S_pop(t: S_table);
}
pub type a_Pos = ::std::os::raw::c_int;
pub const ae_Operator_ae_op_plus: ae_Operator = 0;
pub const ae_Operator_ae_op_minus: ae_Operator = 1;
pub const ae_Operator_ae_op_times: ae_Operator = 2;
pub const ae_Operator_ae_op_divide: ae_Operator = 3;
pub const ae_Operator_ae_op_eq: ae_Operator = 4;
pub const ae_Operator_ae_op_neq: ae_Operator = 5;
pub const ae_Operator_ae_op_lt: ae_Operator = 6;
pub const ae_Operator_ae_op_le: ae_Operator = 7;
pub const ae_Operator_ae_op_gt: ae_Operator = 8;
pub const ae_Operator_ae_op_ge: ae_Operator = 9;
pub const ae_Operator_ae_op_and: ae_Operator = 10;
pub const ae_Operator_ae_op_or: ae_Operator = 11;
pub const ae_Operator_ae_op_s_or: ae_Operator = 12;
pub const ae_Operator_ae_op_s_and: ae_Operator = 13;
pub const ae_Operator_ae_op_shift_left: ae_Operator = 14;
pub const ae_Operator_ae_op_shift_right: ae_Operator = 15;
pub const ae_Operator_ae_op_percent: ae_Operator = 16;
pub const ae_Operator_ae_op_s_xor: ae_Operator = 17;
pub const ae_Operator_ae_op_chuck: ae_Operator = 18;
pub const ae_Operator_ae_op_plus_chuck: ae_Operator = 19;
pub const ae_Operator_ae_op_minus_chuck: ae_Operator = 20;
pub const ae_Operator_ae_op_times_chuck: ae_Operator = 21;
pub const ae_Operator_ae_op_divide_chuck: ae_Operator = 22;
pub const ae_Operator_ae_op_s_and_chuck: ae_Operator = 23;
pub const ae_Operator_ae_op_s_or_chuck: ae_Operator = 24;
pub const ae_Operator_ae_op_s_xor_chuck: ae_Operator = 25;
pub const ae_Operator_ae_op_shift_right_chuck: ae_Operator = 26;
pub const ae_Operator_ae_op_shift_left_chuck: ae_Operator = 27;
pub const ae_Operator_ae_op_percent_chuck: ae_Operator = 28;
pub const ae_Operator_ae_op_s_chuck: ae_Operator = 29;
pub const ae_Operator_ae_op_plusplus: ae_Operator = 30;
pub const ae_Operator_ae_op_minusminus: ae_Operator = 31;
pub const ae_Operator_ae_op_tilda: ae_Operator = 32;
pub const ae_Operator_ae_op_exclamation: ae_Operator = 33;
pub const ae_Operator_ae_op_at_chuck: ae_Operator = 34;
pub const ae_Operator_ae_op_unchuck: ae_Operator = 35;
pub const ae_Operator_ae_op_upchuck: ae_Operator = 36;
pub const ae_Operator_ae_op_spork: ae_Operator = 37;
pub const ae_Operator_ae_op_typeof: ae_Operator = 38;
pub const ae_Operator_ae_op_sizeof: ae_Operator = 39;
pub const ae_Operator_ae_op_new: ae_Operator = 40;
pub const ae_Operator_ae_op_arrow_left: ae_Operator = 41;
pub const ae_Operator_ae_op_arrow_right: ae_Operator = 42;
pub type ae_Operator = u32;
extern "C" {
    pub fn op2str(op: ae_Operator) -> *const ::std::os::raw::c_char;
}
pub const ae_Keyword_ae_key_this: ae_Keyword = 0;
pub const ae_Keyword_ae_key_me: ae_Keyword = 1;
pub const ae_Keyword_ae_key_func: ae_Keyword = 2;
pub const ae_Keyword_ae_key_public: ae_Keyword = 3;
pub const ae_Keyword_ae_key_protected: ae_Keyword = 4;
pub const ae_Keyword_ae_key_private: ae_Keyword = 5;
pub const ae_Keyword_ae_key_static: ae_Keyword = 6;
pub const ae_Keyword_ae_key_instance: ae_Keyword = 7;
pub const ae_Keyword_ae_key_abstract: ae_Keyword = 8;
pub type ae_Keyword = u32;
pub type a_Program = *mut a_Program_;
pub type a_Section = *mut a_Section_;
pub type a_Stmt_List = *mut a_Stmt_List_;
pub type a_Class_Def = *mut a_Class_Def_;
pub type a_Func_Def = *mut a_Func_Def_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Code_Segment_ {
    _unused: [u8; 0],
}
pub type a_Code_Segment = *mut a_Code_Segment_;
pub type a_Stmt = *mut a_Stmt_;
pub type a_Exp = *mut a_Exp_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Chuck_ {
    _unused: [u8; 0],
}
pub type a_Exp_Chuck = *mut a_Exp_Chuck_;
pub type a_Exp_Binary = *mut a_Exp_Binary_;
pub type a_Exp_Cast = *mut a_Exp_Cast_;
pub type a_Exp_Unary = *mut a_Exp_Unary_;
pub type a_Exp_Postfix = *mut a_Exp_Postfix_;
pub type a_Exp_Primary = *mut a_Exp_Primary_;
pub type a_Exp_Dur = *mut a_Exp_Dur_;
pub type a_Exp_Array = *mut a_Exp_Array_;
pub type a_Exp_Func_Call = *mut a_Exp_Func_Call_;
pub type a_Exp_Dot_Member = *mut a_Exp_Dot_Member_;
pub type a_Exp_If = *mut a_Exp_If_;
pub type a_Exp_Decl = *mut a_Exp_Decl_;
pub type a_Exp_Hack = *mut a_Exp_Hack_;
pub type a_Stmt_Code = *mut a_Stmt_Code_;
pub type a_Stmt_If = *mut a_Stmt_If_;
pub type a_Stmt_While = *mut a_Stmt_While_;
pub type a_Stmt_Until = *mut a_Stmt_Until_;
pub type a_Stmt_For = *mut a_Stmt_For_;
pub type a_Stmt_Loop = *mut a_Stmt_Loop_;
pub type a_Stmt_Switch = *mut a_Stmt_Switch_;
pub type a_Stmt_Break = *mut a_Stmt_Break_;
pub type a_Stmt_Continue = *mut a_Stmt_Continue_;
pub type a_Stmt_Return = *mut a_Stmt_Return_;
pub type a_Stmt_Case = *mut a_Stmt_Case_;
pub type a_Stmt_GotoLabel = *mut a_Stmt_GotoLabel_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Decl_ {
    _unused: [u8; 0],
}
pub type a_Decl = *mut a_Decl_;
pub type a_Var_Decl = *mut a_Var_Decl_;
pub type a_Var_Decl_List = *mut a_Var_Decl_List_;
pub type a_Type_Decl = *mut a_Type_Decl_;
pub type a_Arg_List = *mut a_Arg_List_;
pub type a_Id_List = *mut a_Id_List_;
pub type a_Class_Ext = *mut a_Class_Ext_;
pub type a_Class_Body = *mut a_Class_Body_;
pub type a_Array_Sub = *mut a_Array_Sub_;
pub type a_Complex = *mut a_Complex_;
pub type a_Polar = *mut a_Polar_;
pub type a_Vec = *mut a_Vec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_Type {
    _unused: [u8; 0],
}
pub type t_CKTYPE = *mut Chuck_Type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_Value {
    _unused: [u8; 0],
}
pub type t_CKVALUE = *mut Chuck_Value;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_Func {
    _unused: [u8; 0],
}
pub type t_CKFUNC = *mut Chuck_Func;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_Namespace {
    _unused: [u8; 0],
}
pub type t_CKNSPC = *mut Chuck_Namespace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_VM_Code {
    _unused: [u8; 0],
}
pub type t_CKVMCODE = *mut Chuck_VM_Code;
extern "C" {
    pub fn new_program(section: a_Section, pos: ::std::os::raw::c_int) -> a_Program;
}
extern "C" {
    pub fn prepend_program(
        section: a_Section,
        program: a_Program,
        pos: ::std::os::raw::c_int,
    ) -> a_Program;
}
extern "C" {
    pub fn new_section_stmt(stmt_list: a_Stmt_List, pos: ::std::os::raw::c_int) -> a_Section;
}
extern "C" {
    pub fn new_section_func_def(func_def: a_Func_Def, pos: ::std::os::raw::c_int) -> a_Section;
}
extern "C" {
    pub fn new_section_class_def(class_def: a_Class_Def, pos: ::std::os::raw::c_int) -> a_Section;
}
extern "C" {
    pub fn new_stmt_list(stmt: a_Stmt, pos: ::std::os::raw::c_int) -> a_Stmt_List;
}
extern "C" {
    pub fn prepend_stmt_list(
        stmt: a_Stmt,
        stmt_list: a_Stmt_List,
        pos: ::std::os::raw::c_int,
    ) -> a_Stmt_List;
}
extern "C" {
    pub fn new_stmt_from_expression(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_code(code: a_Stmt_List, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_while(cond: a_Exp, body: a_Stmt, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_do_while(cond: a_Exp, body: a_Stmt, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_until(cond: a_Exp, body: a_Stmt, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_do_until(cond: a_Exp, body: a_Stmt, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_for(
        c1: a_Stmt,
        c2: a_Stmt,
        c3: a_Exp,
        body: a_Stmt,
        pos: ::std::os::raw::c_int,
    ) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_loop(cond: a_Exp, body: a_Stmt, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_if(
        cond: a_Exp,
        if_body: a_Stmt,
        else_body: a_Stmt,
        pos: ::std::os::raw::c_int,
    ) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_switch(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_break(pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_continue(pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_return(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_label(xid: c_str, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn new_stmt_from_case(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Stmt;
}
extern "C" {
    pub fn prepend_expression(exp: a_Exp, list: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_binary(
        lhs: a_Exp,
        oper: ae_Operator,
        rhs: a_Exp,
        pos: ::std::os::raw::c_int,
    ) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_unary(oper: ae_Operator, exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_unary2(
        oper: ae_Operator,
        type_: a_Type_Decl,
        array: a_Array_Sub,
        pos: ::std::os::raw::c_int,
    ) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_unary3(
        oper: ae_Operator,
        code: a_Stmt,
        pos: ::std::os::raw::c_int,
    ) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_cast(type_: a_Type_Decl, exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_array(
        base: a_Exp,
        indices: a_Array_Sub,
        pos: ::std::os::raw::c_int,
    ) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_array_lit(exp_list: a_Array_Sub, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_func_call(base: a_Exp, args: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_member_dot(base: a_Exp, member: c_str, pos: ::std::os::raw::c_int)
        -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_postfix(base: a_Exp, op: ae_Operator, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_dur(base: a_Exp, unit: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_id(xid: c_str, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_int(num: ::std::os::raw::c_long, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_uint(num: ::std::os::raw::c_ulong, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_float(num: f64, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_str(str: c_str, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_char(chr: c_str, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_if(
        cond: a_Exp,
        lhs: a_Exp,
        rhs: a_Exp,
        pos: ::std::os::raw::c_int,
    ) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_complex(arg1: a_Complex, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_polar(arg1: a_Polar, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_vec(arg1: a_Vec, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_decl_external(
        type_decl: a_Type_Decl,
        var_decl_list: a_Var_Decl_List,
        is_static: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    ) -> a_Exp;
}
extern "C" {
    pub fn new_exp_decl_global(
        type_decl: a_Type_Decl,
        var_decl_list: a_Var_Decl_List,
        is_static: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    ) -> a_Exp;
}
extern "C" {
    pub fn new_exp_decl(
        type_decl: a_Type_Decl,
        var_decl_list: a_Var_Decl_List,
        is_static: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    ) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_hack(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_exp_from_nil(pos: ::std::os::raw::c_int) -> a_Exp;
}
extern "C" {
    pub fn new_var_decl_list(var_decl: a_Var_Decl, pos: ::std::os::raw::c_int) -> a_Var_Decl_List;
}
extern "C" {
    pub fn prepend_var_decl_list(
        var_decl: a_Var_Decl,
        list: a_Var_Decl_List,
        pos: ::std::os::raw::c_int,
    ) -> a_Var_Decl_List;
}
extern "C" {
    pub fn new_var_decl(
        xid: c_constr,
        array: a_Array_Sub,
        pos: ::std::os::raw::c_int,
    ) -> a_Var_Decl;
}
extern "C" {
    pub fn new_type_decl(
        xid: a_Id_List,
        ref_: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    ) -> a_Type_Decl;
}
extern "C" {
    pub fn add_type_decl_array(
        type_decl: a_Type_Decl,
        array: a_Array_Sub,
        pos: ::std::os::raw::c_int,
    ) -> a_Type_Decl;
}
extern "C" {
    pub fn new_arg_list(
        type_decl: a_Type_Decl,
        var_decl: a_Var_Decl,
        pos: ::std::os::raw::c_int,
    ) -> a_Arg_List;
}
extern "C" {
    pub fn prepend_arg_list(
        type_decl: a_Type_Decl,
        var_decl: a_Var_Decl,
        arg_list: a_Arg_List,
        pos: ::std::os::raw::c_int,
    ) -> a_Arg_List;
}
extern "C" {
    pub fn new_array_sub(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Array_Sub;
}
extern "C" {
    pub fn prepend_array_sub(
        array: a_Array_Sub,
        exp: a_Exp,
        pos: ::std::os::raw::c_int,
    ) -> a_Array_Sub;
}
extern "C" {
    pub fn new_complex(re: a_Exp, pos: ::std::os::raw::c_int) -> a_Complex;
}
extern "C" {
    pub fn new_polar(mod_: a_Exp, pos: ::std::os::raw::c_int) -> a_Polar;
}
extern "C" {
    pub fn new_vec(e: a_Exp, pos: ::std::os::raw::c_int) -> a_Vec;
}
extern "C" {
    pub fn new_class_def(
        class_decl: ae_Keyword,
        xid: a_Id_List,
        ext: a_Class_Ext,
        body: a_Class_Body,
        pos: ::std::os::raw::c_int,
    ) -> a_Class_Def;
}
extern "C" {
    pub fn new_class_body(section: a_Section, pos: ::std::os::raw::c_int) -> a_Class_Body;
}
extern "C" {
    pub fn prepend_class_body(
        section: a_Section,
        body: a_Class_Body,
        pos: ::std::os::raw::c_int,
    ) -> a_Class_Body;
}
extern "C" {
    pub fn new_class_ext(
        extend_id: a_Id_List,
        impl_list: a_Id_List,
        pos: ::std::os::raw::c_int,
    ) -> a_Class_Ext;
}
extern "C" {
    pub fn new_iface_def(
        class_decl: ae_Keyword,
        xid: a_Id_List,
        ext: a_Class_Ext,
        body: a_Class_Body,
        pos: ::std::os::raw::c_int,
    ) -> a_Class_Def;
}
extern "C" {
    pub fn new_id_list(xid: c_constr, pos: ::std::os::raw::c_int) -> a_Id_List;
}
extern "C" {
    pub fn prepend_id_list(xid: c_constr, list: a_Id_List, pos: ::std::os::raw::c_int)
        -> a_Id_List;
}
extern "C" {
    pub fn clean_exp(exp: a_Exp);
}
extern "C" {
    pub fn new_func_def(
        func_decl: ae_Keyword,
        static_decl: ae_Keyword,
        type_decl: a_Type_Decl,
        name: c_str,
        arg_list: a_Arg_List,
        code: a_Stmt,
        pos: ::std::os::raw::c_int,
    ) -> a_Func_Def;
}
extern "C" {
    pub fn delete_id_list(x: a_Id_List);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Binary_ {
    pub lhs: a_Exp,
    pub op: ae_Operator,
    pub rhs: a_Exp,
    pub ck_func: t_CKFUNC,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Binary_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Binary_>(),
        48usize,
        concat!("Size of: ", stringify!(a_Exp_Binary_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Binary_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Binary_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).lhs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Binary_),
            "::",
            stringify!(lhs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).op as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Binary_),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).rhs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Binary_),
            "::",
            stringify!(rhs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).ck_func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Binary_),
            "::",
            stringify!(ck_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).linepos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Binary_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).self_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Binary_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Cast_ {
    pub type_: a_Type_Decl,
    pub exp: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Cast_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Cast_>(),
        32usize,
        concat!("Size of: ", stringify!(a_Exp_Cast_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Cast_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Cast_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Cast_),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).exp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Cast_),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Cast_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).self_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Cast_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Unary_ {
    pub op: ae_Operator,
    pub exp: a_Exp,
    pub type_: a_Type_Decl,
    pub array: a_Array_Sub,
    pub code: a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Unary_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Unary_>(),
        56usize,
        concat!("Size of: ", stringify!(a_Exp_Unary_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Unary_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Unary_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Unary_),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).exp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Unary_),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Unary_),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).array as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Unary_),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).code as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Unary_),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).linepos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Unary_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).self_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Unary_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Postfix_ {
    pub exp: a_Exp,
    pub op: ae_Operator,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Postfix_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Postfix_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Exp_Postfix_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Postfix_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Postfix_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).exp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Postfix_),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).op as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Postfix_),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).linepos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Postfix_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).self_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Postfix_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Dur_ {
    pub base: a_Exp,
    pub unit: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Dur_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Dur_>(),
        32usize,
        concat!("Size of: ", stringify!(a_Exp_Dur_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Dur_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Dur_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dur_),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).unit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dur_),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dur_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).self_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dur_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Array_ {
    pub base: a_Exp,
    pub indices: a_Array_Sub,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Array_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Array_>(),
        32usize,
        concat!("Size of: ", stringify!(a_Exp_Array_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Array_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Array_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Array_),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).indices as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Array_),
            "::",
            stringify!(indices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Array_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).self_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Array_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Func_Call_ {
    pub func: a_Exp,
    pub args: a_Exp,
    pub ret_type: t_CKTYPE,
    pub ck_func: t_CKFUNC,
    pub ck_vm_code: t_CKVMCODE,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Func_Call_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Func_Call_>(),
        56usize,
        concat!("Size of: ", stringify!(a_Exp_Func_Call_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Func_Call_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Func_Call_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Func_Call_),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Func_Call_),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ret_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Func_Call_),
            "::",
            stringify!(ret_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Func_Call_),
            "::",
            stringify!(ck_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_vm_code as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Func_Call_),
            "::",
            stringify!(ck_vm_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).linepos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Func_Call_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).self_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Func_Call_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Dot_Member_ {
    pub base: a_Exp,
    pub t_base: t_CKTYPE,
    pub xid: S_Symbol,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Dot_Member_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Dot_Member_>(),
        40usize,
        concat!("Size of: ", stringify!(a_Exp_Dot_Member_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Dot_Member_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Dot_Member_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dot_Member_),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).t_base as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dot_Member_),
            "::",
            stringify!(t_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).xid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dot_Member_),
            "::",
            stringify!(xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).linepos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dot_Member_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).self_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Dot_Member_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_If_ {
    pub cond: a_Exp,
    pub if_exp: a_Exp,
    pub else_exp: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_If_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_If_>(),
        40usize,
        concat!("Size of: ", stringify!(a_Exp_If_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_If_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_If_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).cond as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_If_),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).if_exp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_If_),
            "::",
            stringify!(if_exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).else_exp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_If_),
            "::",
            stringify!(else_exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).linepos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_If_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).self_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_If_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Decl_ {
    pub type_: a_Type_Decl,
    pub var_decl_list: a_Var_Decl_List,
    pub num_var_decls: ::std::os::raw::c_int,
    pub is_static: ::std::os::raw::c_int,
    pub is_global: ::std::os::raw::c_int,
    pub ck_type: t_CKTYPE,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Decl_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Decl_>(),
        56usize,
        concat!("Size of: ", stringify!(a_Exp_Decl_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Decl_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Decl_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Decl_),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).var_decl_list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Decl_),
            "::",
            stringify!(var_decl_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).num_var_decls as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Decl_),
            "::",
            stringify!(num_var_decls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_static as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Decl_),
            "::",
            stringify!(is_static)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_global as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Decl_),
            "::",
            stringify!(is_global)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).ck_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Decl_),
            "::",
            stringify!(ck_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).linepos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Decl_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).self_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Decl_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Hack_ {
    pub exp: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Exp_Hack_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Hack_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Exp_Hack_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Hack_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Hack_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).exp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Hack_),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).linepos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Hack_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).self_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Hack_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Var_Decl_List_ {
    pub var_decl: a_Var_Decl,
    pub next: a_Var_Decl_List,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Var_Decl_List_() {
    assert_eq!(
        ::std::mem::size_of::<a_Var_Decl_List_>(),
        32usize,
        concat!("Size of: ", stringify!(a_Var_Decl_List_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Var_Decl_List_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Var_Decl_List_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).var_decl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_List_),
            "::",
            stringify!(var_decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_List_),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_List_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).self_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_List_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Var_Decl_ {
    pub xid: S_Symbol,
    pub var_decl: a_Var_Decl,
    pub array: a_Array_Sub,
    pub value: t_CKVALUE,
    pub addr: *mut ::std::os::raw::c_void,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Var_Decl_() {
    assert_eq!(
        ::std::mem::size_of::<a_Var_Decl_>(),
        56usize,
        concat!("Size of: ", stringify!(a_Var_Decl_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Var_Decl_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Var_Decl_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).xid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_),
            "::",
            stringify!(xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).var_decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_),
            "::",
            stringify!(var_decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).array as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).addr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).linepos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).self_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Var_Decl_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Type_Decl_ {
    pub xid: a_Id_List,
    pub array: a_Array_Sub,
    pub ref_: ::std::os::raw::c_int,
    pub linepos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Type_Decl_() {
    assert_eq!(
        ::std::mem::size_of::<a_Type_Decl_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Type_Decl_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Type_Decl_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Type_Decl_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).xid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Type_Decl_),
            "::",
            stringify!(xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).array as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Type_Decl_),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).ref_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Type_Decl_),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).linepos as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Type_Decl_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Array_Sub_ {
    pub depth: ::std::os::raw::c_ulong,
    pub exp_list: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
    pub err_num: ::std::os::raw::c_int,
    pub err_pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Array_Sub_() {
    assert_eq!(
        ::std::mem::size_of::<a_Array_Sub_>(),
        40usize,
        concat!("Size of: ", stringify!(a_Array_Sub_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Array_Sub_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Array_Sub_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).depth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Array_Sub_),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).exp_list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Array_Sub_),
            "::",
            stringify!(exp_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Array_Sub_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).self_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Array_Sub_),
            "::",
            stringify!(self_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_num as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Array_Sub_),
            "::",
            stringify!(err_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_pos as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Array_Sub_),
            "::",
            stringify!(err_pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Arg_List_ {
    pub type_decl: a_Type_Decl,
    pub var_decl: a_Var_Decl,
    pub type_: t_CKTYPE,
    pub next: a_Arg_List,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Arg_List_() {
    assert_eq!(
        ::std::mem::size_of::<a_Arg_List_>(),
        48usize,
        concat!("Size of: ", stringify!(a_Arg_List_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Arg_List_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Arg_List_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_decl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Arg_List_),
            "::",
            stringify!(type_decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).var_decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Arg_List_),
            "::",
            stringify!(var_decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Arg_List_),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Arg_List_),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).linepos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Arg_List_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).self_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Arg_List_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Complex_ {
    pub re: a_Exp,
    pub im: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Complex_() {
    assert_eq!(
        ::std::mem::size_of::<a_Complex_>(),
        32usize,
        concat!("Size of: ", stringify!(a_Complex_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Complex_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Complex_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Complex_>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Complex_),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Complex_>())).im as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Complex_),
            "::",
            stringify!(im)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Complex_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Complex_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Complex_>())).self_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Complex_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Polar_ {
    pub mod_: a_Exp,
    pub phase: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Polar_() {
    assert_eq!(
        ::std::mem::size_of::<a_Polar_>(),
        32usize,
        concat!("Size of: ", stringify!(a_Polar_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Polar_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Polar_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Polar_>())).mod_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Polar_),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Polar_>())).phase as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Polar_),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Polar_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Polar_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Polar_>())).self_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Polar_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Vec_ {
    pub args: a_Exp,
    pub numdims: ::std::os::raw::c_int,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[test]
fn bindgen_test_layout_a_Vec_() {
    assert_eq!(
        ::std::mem::size_of::<a_Vec_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Vec_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Vec_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Vec_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Vec_>())).args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Vec_),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Vec_>())).numdims as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Vec_),
            "::",
            stringify!(numdims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Vec_>())).linepos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Vec_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Vec_>())).self_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Vec_),
            "::",
            stringify!(self_)
        )
    );
}
pub const ae_Exp_Primary_Type_ae_primary_var: ae_Exp_Primary_Type = 0;
pub const ae_Exp_Primary_Type_ae_primary_num: ae_Exp_Primary_Type = 1;
pub const ae_Exp_Primary_Type_ae_primary_float: ae_Exp_Primary_Type = 2;
pub const ae_Exp_Primary_Type_ae_primary_str: ae_Exp_Primary_Type = 3;
pub const ae_Exp_Primary_Type_ae_primary_array: ae_Exp_Primary_Type = 4;
pub const ae_Exp_Primary_Type_ae_primary_exp: ae_Exp_Primary_Type = 5;
pub const ae_Exp_Primary_Type_ae_primary_hack: ae_Exp_Primary_Type = 6;
pub const ae_Exp_Primary_Type_ae_primary_complex: ae_Exp_Primary_Type = 7;
pub const ae_Exp_Primary_Type_ae_primary_polar: ae_Exp_Primary_Type = 8;
pub const ae_Exp_Primary_Type_ae_primary_vec: ae_Exp_Primary_Type = 9;
pub const ae_Exp_Primary_Type_ae_primary_char: ae_Exp_Primary_Type = 10;
pub const ae_Exp_Primary_Type_ae_primary_nil: ae_Exp_Primary_Type = 11;
pub type ae_Exp_Primary_Type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct a_Exp_Primary_ {
    pub s_type: ae_Exp_Primary_Type,
    pub value: t_CKVALUE,
    pub __bindgen_anon_1: a_Exp_Primary___bindgen_ty_1,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Exp,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union a_Exp_Primary___bindgen_ty_1 {
    pub var: S_Symbol,
    pub num: ::std::os::raw::c_long,
    pub fnum: f64,
    pub str: c_str,
    pub chr: c_str,
    pub array: a_Array_Sub,
    pub exp: a_Exp,
    pub complex: a_Complex,
    pub polar: a_Polar,
    pub vec: a_Vec,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_a_Exp_Primary___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Primary___bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(a_Exp_Primary___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Primary___bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Primary___bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).var as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).fnum as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(fnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).str as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).chr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(chr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).array as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).exp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).complex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(complex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).polar as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(polar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).vec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary___bindgen_ty_1),
            "::",
            stringify!(vec)
        )
    );
}
#[test]
fn bindgen_test_layout_a_Exp_Primary_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_Primary_>(),
        40usize,
        concat!("Size of: ", stringify!(a_Exp_Primary_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_Primary_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_Primary_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).s_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary_),
            "::",
            stringify!(s_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary_),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).linepos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).self_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_Primary_),
            "::",
            stringify!(self_)
        )
    );
}
pub const ae_Exp_Type_ae_exp_binary: ae_Exp_Type = 0;
pub const ae_Exp_Type_ae_exp_unary: ae_Exp_Type = 1;
pub const ae_Exp_Type_ae_exp_cast: ae_Exp_Type = 2;
pub const ae_Exp_Type_ae_exp_postfix: ae_Exp_Type = 3;
pub const ae_Exp_Type_ae_exp_dur: ae_Exp_Type = 4;
pub const ae_Exp_Type_ae_exp_primary: ae_Exp_Type = 5;
pub const ae_Exp_Type_ae_exp_array: ae_Exp_Type = 6;
pub const ae_Exp_Type_ae_exp_func_call: ae_Exp_Type = 7;
pub const ae_Exp_Type_ae_exp_dot_member: ae_Exp_Type = 8;
pub const ae_Exp_Type_ae_exp_if: ae_Exp_Type = 9;
pub const ae_Exp_Type_ae_exp_decl: ae_Exp_Type = 10;
pub type ae_Exp_Type = u32;
pub const ae_Exp_Meta_ae_meta_value: ae_Exp_Meta = 0;
pub const ae_Exp_Meta_ae_meta_var: ae_Exp_Meta = 1;
pub type ae_Exp_Meta = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct a_Exp_ {
    pub s_type: ae_Exp_Type,
    pub s_meta: ae_Exp_Meta,
    pub type_: t_CKTYPE,
    pub owner: t_CKNSPC,
    pub next: a_Exp,
    pub group_size: ::std::os::raw::c_ulong,
    pub cast_to: t_CKTYPE,
    pub emit_var: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: a_Exp___bindgen_ty_1,
    pub linepos: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union a_Exp___bindgen_ty_1 {
    pub binary: a_Exp_Binary_,
    pub unary: a_Exp_Unary_,
    pub cast: a_Exp_Cast_,
    pub postfix: a_Exp_Postfix_,
    pub dur: a_Exp_Dur_,
    pub primary: a_Exp_Primary_,
    pub array: a_Exp_Array_,
    pub func_call: a_Exp_Func_Call_,
    pub dot_member: a_Exp_Dot_Member_,
    pub exp_if: a_Exp_If_,
    pub decl: a_Exp_Decl_,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_a_Exp___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp___bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(a_Exp___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp___bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp___bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).binary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).unary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(unary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).cast as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(cast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).postfix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(postfix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(dur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).primary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(primary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).func_call as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(func_call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dot_member as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(dot_member)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).exp_if as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(exp_if)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).decl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp___bindgen_ty_1),
            "::",
            stringify!(decl)
        )
    );
}
#[test]
fn bindgen_test_layout_a_Exp_() {
    assert_eq!(
        ::std::mem::size_of::<a_Exp_>(),
        120usize,
        concat!("Size of: ", stringify!(a_Exp_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Exp_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Exp_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(s_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_meta as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(s_meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).owner as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).group_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(group_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).cast_to as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(cast_to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).emit_var as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(emit_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Exp_>())).linepos as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Exp_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_While_ {
    pub is_do: ::std::os::raw::c_int,
    pub cond: a_Exp,
    pub body: a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_While_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_While_>(),
        40usize,
        concat!("Size of: ", stringify!(a_Stmt_While_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_While_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_While_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).is_do as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_While_),
            "::",
            stringify!(is_do)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).cond as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_While_),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).body as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_While_),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).linepos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_While_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).self_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_While_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_Until_ {
    pub is_do: ::std::os::raw::c_int,
    pub cond: a_Exp,
    pub body: a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_Until_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_Until_>(),
        40usize,
        concat!("Size of: ", stringify!(a_Stmt_Until_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_Until_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_Until_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).is_do as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Until_),
            "::",
            stringify!(is_do)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).cond as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Until_),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).body as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Until_),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).linepos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Until_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).self_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Until_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_For_ {
    pub c1: a_Stmt,
    pub c2: a_Stmt,
    pub c3: a_Exp,
    pub body: a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_For_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_For_>(),
        48usize,
        concat!("Size of: ", stringify!(a_Stmt_For_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_For_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_For_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_For_),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_For_),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_For_),
            "::",
            stringify!(c3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_For_),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).linepos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_For_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).self_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_For_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_Loop_ {
    pub cond: a_Exp,
    pub body: a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_Loop_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_Loop_>(),
        32usize,
        concat!("Size of: ", stringify!(a_Stmt_Loop_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_Loop_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_Loop_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).cond as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Loop_),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Loop_),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Loop_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).self_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Loop_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_Code_ {
    pub stmt_list: a_Stmt_List,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_Code_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_Code_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Stmt_Code_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_Code_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_Code_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).stmt_list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Code_),
            "::",
            stringify!(stmt_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).linepos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Code_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).self_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Code_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_If_ {
    pub cond: a_Exp,
    pub if_body: a_Stmt,
    pub else_body: a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_If_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_If_>(),
        40usize,
        concat!("Size of: ", stringify!(a_Stmt_If_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_If_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_If_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).cond as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_If_),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).if_body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_If_),
            "::",
            stringify!(if_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).else_body as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_If_),
            "::",
            stringify!(else_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).linepos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_If_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).self_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_If_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_Switch_ {
    pub val: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_Switch_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_Switch_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Stmt_Switch_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_Switch_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_Switch_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Switch_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).linepos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Switch_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).self_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Switch_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_Break_ {
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_Break_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_Break_>(),
        16usize,
        concat!("Size of: ", stringify!(a_Stmt_Break_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_Break_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_Break_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).linepos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Break_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).self_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Break_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_Continue_ {
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_Continue_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_Continue_>(),
        16usize,
        concat!("Size of: ", stringify!(a_Stmt_Continue_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_Continue_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_Continue_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).linepos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Continue_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).self_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Continue_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_Return_ {
    pub val: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_Return_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_Return_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Stmt_Return_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_Return_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_Return_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Return_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).linepos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Return_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).self_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Return_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_Case_ {
    pub exp: a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_Case_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_Case_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Stmt_Case_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_Case_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_Case_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).exp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Case_),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).linepos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Case_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).self_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_Case_),
            "::",
            stringify!(self_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_GotoLabel_ {
    pub name: S_Symbol,
    pub linepos: ::std::os::raw::c_int,
    pub self_: a_Stmt,
}
#[test]
fn bindgen_test_layout_a_Stmt_GotoLabel_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_GotoLabel_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Stmt_GotoLabel_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_GotoLabel_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_GotoLabel_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_GotoLabel_),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).linepos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_GotoLabel_),
            "::",
            stringify!(linepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).self_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_GotoLabel_),
            "::",
            stringify!(self_)
        )
    );
}
pub const ae_Stmt_Type_ae_stmt_exp: ae_Stmt_Type = 0;
pub const ae_Stmt_Type_ae_stmt_while: ae_Stmt_Type = 1;
pub const ae_Stmt_Type_ae_stmt_until: ae_Stmt_Type = 2;
pub const ae_Stmt_Type_ae_stmt_for: ae_Stmt_Type = 3;
pub const ae_Stmt_Type_ae_stmt_loop: ae_Stmt_Type = 4;
pub const ae_Stmt_Type_ae_stmt_if: ae_Stmt_Type = 5;
pub const ae_Stmt_Type_ae_stmt_code: ae_Stmt_Type = 6;
pub const ae_Stmt_Type_ae_stmt_switch: ae_Stmt_Type = 7;
pub const ae_Stmt_Type_ae_stmt_break: ae_Stmt_Type = 8;
pub const ae_Stmt_Type_ae_stmt_continue: ae_Stmt_Type = 9;
pub const ae_Stmt_Type_ae_stmt_return: ae_Stmt_Type = 10;
pub const ae_Stmt_Type_ae_stmt_case: ae_Stmt_Type = 11;
pub const ae_Stmt_Type_ae_stmt_gotolabel: ae_Stmt_Type = 12;
pub type ae_Stmt_Type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct a_Stmt_ {
    pub s_type: ae_Stmt_Type,
    pub skip: ::std::os::raw::c_int,
    pub __bindgen_anon_1: a_Stmt___bindgen_ty_1,
    pub linepos: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union a_Stmt___bindgen_ty_1 {
    pub stmt_exp: a_Exp,
    pub stmt_code: a_Stmt_Code_,
    pub stmt_while: a_Stmt_While_,
    pub stmt_until: a_Stmt_Until_,
    pub stmt_loop: a_Stmt_Loop_,
    pub stmt_for: a_Stmt_For_,
    pub stmt_if: a_Stmt_If_,
    pub stmt_switch: a_Stmt_Switch_,
    pub stmt_break: a_Stmt_Break_,
    pub stmt_continue: a_Stmt_Continue_,
    pub stmt_return: a_Stmt_Return_,
    pub stmt_case: a_Stmt_Case_,
    pub stmt_gotolabel: a_Stmt_GotoLabel_,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_a_Stmt___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt___bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(a_Stmt___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt___bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt___bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_exp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_while as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_while)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_until as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_until)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_loop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_loop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_for as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_for)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_if as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_if)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_switch as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_break as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_break)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_continue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_continue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_return as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_return)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_case as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_case)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_gotolabel as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt___bindgen_ty_1),
            "::",
            stringify!(stmt_gotolabel)
        )
    );
}
#[test]
fn bindgen_test_layout_a_Stmt_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_>(),
        64usize,
        concat!("Size of: ", stringify!(a_Stmt_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_>())).s_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_),
            "::",
            stringify!(s_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_>())).skip as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_>())).linepos as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Stmt_List_ {
    pub stmt: a_Stmt,
    pub next: a_Stmt_List,
    pub linepos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Stmt_List_() {
    assert_eq!(
        ::std::mem::size_of::<a_Stmt_List_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Stmt_List_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Stmt_List_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Stmt_List_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).stmt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_List_),
            "::",
            stringify!(stmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_List_),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Stmt_List_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Class_Def_ {
    pub decl: ae_Keyword,
    pub name: a_Id_List,
    pub ext: a_Class_Ext,
    pub body: a_Class_Body,
    pub type_: t_CKTYPE,
    pub iface: ::std::os::raw::c_int,
    pub home: t_CKNSPC,
    pub linepos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Class_Def_() {
    assert_eq!(
        ::std::mem::size_of::<a_Class_Def_>(),
        64usize,
        concat!("Size of: ", stringify!(a_Class_Def_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Class_Def_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Class_Def_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).decl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Def_),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Def_),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).ext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Def_),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Def_),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Def_),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).iface as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Def_),
            "::",
            stringify!(iface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).home as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Def_),
            "::",
            stringify!(home)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).linepos as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Def_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Class_Ext_ {
    pub extend_id: a_Id_List,
    pub impl_list: a_Id_List,
    pub linepos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Class_Ext_() {
    assert_eq!(
        ::std::mem::size_of::<a_Class_Ext_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Class_Ext_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Class_Ext_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Class_Ext_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).extend_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Ext_),
            "::",
            stringify!(extend_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).impl_list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Ext_),
            "::",
            stringify!(impl_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Ext_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Class_Body_ {
    pub section: a_Section,
    pub next: a_Class_Body,
    pub linepos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Class_Body_() {
    assert_eq!(
        ::std::mem::size_of::<a_Class_Body_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Class_Body_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Class_Body_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Class_Body_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).section as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Body_),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Body_),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Class_Body_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Id_List_ {
    pub xid: S_Symbol,
    pub next: a_Id_List,
    pub linepos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Id_List_() {
    assert_eq!(
        ::std::mem::size_of::<a_Id_List_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Id_List_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Id_List_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Id_List_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Id_List_>())).xid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Id_List_),
            "::",
            stringify!(xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Id_List_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Id_List_),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Id_List_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Id_List_),
            "::",
            stringify!(linepos)
        )
    );
}
pub const ae_Func_Type_ae_func_user: ae_Func_Type = 0;
pub const ae_Func_Type_ae_func_builtin: ae_Func_Type = 1;
pub type ae_Func_Type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Func_Def_ {
    pub func_decl: ae_Keyword,
    pub static_decl: ae_Keyword,
    pub type_decl: a_Type_Decl,
    pub ret_type: t_CKTYPE,
    pub name: S_Symbol,
    pub arg_list: a_Arg_List,
    pub code: a_Stmt,
    pub ck_func: t_CKFUNC,
    pub global: ::std::os::raw::c_uint,
    pub s_type: ::std::os::raw::c_uint,
    pub stack_depth: ::std::os::raw::c_uint,
    pub dl_func_ptr: *mut ::std::os::raw::c_void,
    pub linepos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Func_Def_() {
    assert_eq!(
        ::std::mem::size_of::<a_Func_Def_>(),
        88usize,
        concat!("Size of: ", stringify!(a_Func_Def_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Func_Def_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Func_Def_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).func_decl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(func_decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).static_decl as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(static_decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).type_decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(type_decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ret_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(ret_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).arg_list as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(arg_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).code as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ck_func as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(ck_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).global as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(global)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).s_type as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(s_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).stack_depth as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(stack_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).dl_func_ptr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(dl_func_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).linepos as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Func_Def_),
            "::",
            stringify!(linepos)
        )
    );
}
pub const ae_Section_Type_ae_section_stmt: ae_Section_Type = 0;
pub const ae_Section_Type_ae_section_func: ae_Section_Type = 1;
pub const ae_Section_Type_ae_section_class: ae_Section_Type = 2;
pub type ae_Section_Type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct a_Section_ {
    pub s_type: ae_Section_Type,
    pub __bindgen_anon_1: a_Section___bindgen_ty_1,
    pub linepos: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union a_Section___bindgen_ty_1 {
    pub stmt_list: a_Stmt_List,
    pub class_def: a_Class_Def,
    pub func_def: a_Func_Def,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_a_Section___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<a_Section___bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(a_Section___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Section___bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Section___bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).stmt_list as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Section___bindgen_ty_1),
            "::",
            stringify!(stmt_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).class_def as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Section___bindgen_ty_1),
            "::",
            stringify!(class_def)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).func_def as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Section___bindgen_ty_1),
            "::",
            stringify!(func_def)
        )
    );
}
#[test]
fn bindgen_test_layout_a_Section_() {
    assert_eq!(
        ::std::mem::size_of::<a_Section_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Section_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Section_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Section_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Section_>())).s_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Section_),
            "::",
            stringify!(s_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Section_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Section_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Program_ {
    pub section: a_Section,
    pub next: a_Program,
    pub linepos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_Program_() {
    assert_eq!(
        ::std::mem::size_of::<a_Program_>(),
        24usize,
        concat!("Size of: ", stringify!(a_Program_))
    );
    assert_eq!(
        ::std::mem::align_of::<a_Program_>(),
        8usize,
        concat!("Alignment of ", stringify!(a_Program_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Program_>())).section as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Program_),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Program_>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Program_),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<a_Program_>())).linepos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(a_Program_),
            "::",
            stringify!(linepos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
