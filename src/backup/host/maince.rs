/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        storage: Storage,
        align: [Align; 0],
    }
    impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn new(storage: Storage) -> Self {
            Self { storage, align: [] }
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[repr(C)]
    #[derive(Default)]
    pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
    impl<T> __IncompleteArrayField<T> {
        #[inline]
        pub fn new() -> Self {
            __IncompleteArrayField(::std::marker::PhantomData, [])
        }
        #[inline]
        pub unsafe fn as_ptr(&self) -> *const T {
            transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
            transmute(self)
        }
        #[inline]
        pub unsafe fn as_slice(&self, len: usize) -> &[T] {
            ::std::slice::from_raw_parts(self.as_ptr(), len)
        }
        #[inline]
        pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
            ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
        }
    }
    impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__IncompleteArrayField")
        }
    }
    impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            transmute(self)
        }
    }
    impl<T> Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> Hash for __BindgenUnionField<T> {
        fn hash<H: Hasher>(&self, _state: &mut H) {}
    }
    impl<T> PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> Eq for __BindgenUnionField<T> {}

    pub const __llvm__: u32 = 1;
    pub const __clang__: u32 = 1;
    pub const __clang_major__: u32 = 8;
    pub const __clang_minor__: u32 = 0;
    pub const __clang_patchlevel__: u32 = 0;
    pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __GNUC_MINOR__: u32 = 2;
    pub const __GNUC_PATCHLEVEL__: u32 = 1;
    pub const __GNUC__: u32 = 4;
    pub const __GXX_ABI_VERSION: u32 = 1002;
    pub const __ATOMIC_RELAXED: u32 = 0;
    pub const __ATOMIC_CONSUME: u32 = 1;
    pub const __ATOMIC_ACQUIRE: u32 = 2;
    pub const __ATOMIC_RELEASE: u32 = 3;
    pub const __ATOMIC_ACQ_REL: u32 = 4;
    pub const __ATOMIC_SEQ_CST: u32 = 5;
    pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
    pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
    pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
    pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
    pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
    pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
    pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __STRICT_ANSI__: u32 = 1;
    pub const __GXX_EXPERIMENTAL_CXX0X__: u32 = 1;
    pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
    pub const __cpp_rtti: u32 = 199711;
    pub const __cpp_exceptions: u32 = 199711;
    pub const __cpp_unicode_characters: u32 = 200704;
    pub const __cpp_raw_strings: u32 = 200710;
    pub const __cpp_unicode_literals: u32 = 200710;
    pub const __cpp_user_defined_literals: u32 = 200809;
    pub const __cpp_lambdas: u32 = 200907;
    pub const __cpp_constexpr: u32 = 201603;
    pub const __cpp_range_based_for: u32 = 201603;
    pub const __cpp_static_assert: u32 = 201411;
    pub const __cpp_decltype: u32 = 200707;
    pub const __cpp_attributes: u32 = 200809;
    pub const __cpp_rvalue_references: u32 = 200610;
    pub const __cpp_variadic_templates: u32 = 200704;
    pub const __cpp_initializer_lists: u32 = 200806;
    pub const __cpp_delegating_constructors: u32 = 200604;
    pub const __cpp_nsdmi: u32 = 200809;
    pub const __cpp_inheriting_constructors: u32 = 201511;
    pub const __cpp_ref_qualifiers: u32 = 200710;
    pub const __cpp_alias_templates: u32 = 200704;
    pub const __cpp_threadsafe_static_init: u32 = 200806;
    pub const __cpp_binary_literals: u32 = 201304;
    pub const __cpp_digit_separators: u32 = 201309;
    pub const __cpp_init_captures: u32 = 201304;
    pub const __cpp_generic_lambdas: u32 = 201304;
    pub const __cpp_decltype_auto: u32 = 201304;
    pub const __cpp_return_type_deduction: u32 = 201304;
    pub const __cpp_aggregate_nsdmi: u32 = 201304;
    pub const __cpp_variable_templates: u32 = 201304;
    pub const __cpp_hex_float: u32 = 201603;
    pub const __cpp_inline_variables: u32 = 201606;
    pub const __cpp_noexcept_function_type: u32 = 201510;
    pub const __cpp_capture_star_this: u32 = 201603;
    pub const __cpp_if_constexpr: u32 = 201606;
    pub const __cpp_deduction_guides: u32 = 201703;
    pub const __cpp_template_auto: u32 = 201606;
    pub const __cpp_namespace_attributes: u32 = 201411;
    pub const __cpp_enumerator_attributes: u32 = 201411;
    pub const __cpp_nested_namespace_definitions: u32 = 201411;
    pub const __cpp_variadic_using: u32 = 201611;
    pub const __cpp_aggregate_bases: u32 = 201603;
    pub const __cpp_structured_bindings: u32 = 201606;
    pub const __cpp_nontype_template_args: u32 = 201411;
    pub const __cpp_fold_expressions: u32 = 201603;
    pub const __cpp_guaranteed_copy_elision: u32 = 201606;
    pub const __cpp_nontype_template_parameter_auto: u32 = 201606;
    pub const __cpp_aligned_new: u32 = 201606;
    pub const __CONSTANT_CFSTRINGS__: u32 = 1;
    pub const __EXCEPTIONS: u32 = 1;
    pub const __GXX_RTTI: u32 = 1;
    pub const __DEPRECATED: u32 = 1;
    pub const __GNUG__: u32 = 4;
    pub const __GXX_WEAK__: u32 = 1;
    pub const __OPTIMIZE__: u32 = 1;
    pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
    pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
    pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
    pub const __BYTE_ORDER__: u32 = 1234;
    pub const __LITTLE_ENDIAN__: u32 = 1;
    pub const _LP64: u32 = 1;
    pub const __LP64__: u32 = 1;
    pub const __CHAR_BIT__: u32 = 8;
    pub const __SCHAR_MAX__: u32 = 127;
    pub const __SHRT_MAX__: u32 = 32767;
    pub const __INT_MAX__: u32 = 2147483647;
    pub const __LONG_MAX__: u64 = 9223372036854775807;
    pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
    pub const __WCHAR_MAX__: u32 = 2147483647;
    pub const __WINT_MAX__: u32 = 4294967295;
    pub const __INTMAX_MAX__: u64 = 9223372036854775807;
    pub const __SIZE_MAX__: i32 = -1;
    pub const __UINTMAX_MAX__: i32 = -1;
    pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
    pub const __INTPTR_MAX__: u64 = 9223372036854775807;
    pub const __UINTPTR_MAX__: i32 = -1;
    pub const __SIZEOF_DOUBLE__: u32 = 8;
    pub const __SIZEOF_FLOAT__: u32 = 4;
    pub const __SIZEOF_INT__: u32 = 4;
    pub const __SIZEOF_LONG__: u32 = 8;
    pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
    pub const __SIZEOF_LONG_LONG__: u32 = 8;
    pub const __SIZEOF_POINTER__: u32 = 8;
    pub const __SIZEOF_SHORT__: u32 = 2;
    pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
    pub const __SIZEOF_SIZE_T__: u32 = 8;
    pub const __SIZEOF_WCHAR_T__: u32 = 4;
    pub const __SIZEOF_WINT_T__: u32 = 4;
    pub const __SIZEOF_INT128__: u32 = 16;
    pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INTMAX_WIDTH__: u32 = 64;
    pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __PTRDIFF_WIDTH__: u32 = 64;
    pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __INTPTR_WIDTH__: u32 = 64;
    pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __SIZE_WIDTH__: u32 = 64;
    pub const __WCHAR_WIDTH__: u32 = 32;
    pub const __WINT_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
    pub const __UINTMAX_WIDTH__: u32 = 64;
    pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINTPTR_WIDTH__: u32 = 64;
    pub const __FLT16_HAS_DENORM__: u32 = 1;
    pub const __FLT16_DIG__: u32 = 3;
    pub const __FLT16_DECIMAL_DIG__: u32 = 5;
    pub const __FLT16_HAS_INFINITY__: u32 = 1;
    pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT16_MANT_DIG__: u32 = 11;
    pub const __FLT16_MAX_10_EXP__: u32 = 4;
    pub const __FLT16_MAX_EXP__: u32 = 15;
    pub const __FLT16_MIN_10_EXP__: i32 = -13;
    pub const __FLT16_MIN_EXP__: i32 = -14;
    pub const __FLT_HAS_DENORM__: u32 = 1;
    pub const __FLT_DIG__: u32 = 6;
    pub const __FLT_DECIMAL_DIG__: u32 = 9;
    pub const __FLT_HAS_INFINITY__: u32 = 1;
    pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT_MANT_DIG__: u32 = 24;
    pub const __FLT_MAX_10_EXP__: u32 = 38;
    pub const __FLT_MAX_EXP__: u32 = 128;
    pub const __FLT_MIN_10_EXP__: i32 = -37;
    pub const __FLT_MIN_EXP__: i32 = -125;
    pub const __DBL_HAS_DENORM__: u32 = 1;
    pub const __DBL_DIG__: u32 = 15;
    pub const __DBL_DECIMAL_DIG__: u32 = 17;
    pub const __DBL_HAS_INFINITY__: u32 = 1;
    pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __DBL_MANT_DIG__: u32 = 53;
    pub const __DBL_MAX_10_EXP__: u32 = 308;
    pub const __DBL_MAX_EXP__: u32 = 1024;
    pub const __DBL_MIN_10_EXP__: i32 = -307;
    pub const __DBL_MIN_EXP__: i32 = -1021;
    pub const __LDBL_HAS_DENORM__: u32 = 1;
    pub const __LDBL_DIG__: u32 = 18;
    pub const __LDBL_DECIMAL_DIG__: u32 = 21;
    pub const __LDBL_HAS_INFINITY__: u32 = 1;
    pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __LDBL_MANT_DIG__: u32 = 64;
    pub const __LDBL_MAX_10_EXP__: u32 = 4932;
    pub const __LDBL_MAX_EXP__: u32 = 16384;
    pub const __LDBL_MIN_10_EXP__: i32 = -4931;
    pub const __LDBL_MIN_EXP__: i32 = -16381;
    pub const __POINTER_WIDTH__: u32 = 64;
    pub const __BIGGEST_ALIGNMENT__: u32 = 16;
    pub const __WINT_UNSIGNED__: u32 = 1;
    pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __UINT8_MAX__: u32 = 255;
    pub const __INT8_MAX__: u32 = 127;
    pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __UINT16_MAX__: u32 = 65535;
    pub const __INT16_MAX__: u32 = 32767;
    pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __UINT32_MAX__: u32 = 4294967295;
    pub const __INT32_MAX__: u32 = 2147483647;
    pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINT64_MAX__: i32 = -1;
    pub const __INT64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST8_MAX__: u32 = 127;
    pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_LEAST8_MAX__: u32 = 255;
    pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_LEAST16_MAX__: u32 = 32767;
    pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_LEAST16_MAX__: u32 = 65535;
    pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_LEAST32_MAX__: u32 = 2147483647;
    pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
    pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_LEAST64_MAX__: i32 = -1;
    pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INT_FAST8_MAX__: u32 = 127;
    pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_FAST8_MAX__: u32 = 255;
    pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_FAST16_MAX__: u32 = 32767;
    pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_FAST16_MAX__: u32 = 65535;
    pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_FAST32_MAX__: u32 = 2147483647;
    pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_FAST32_MAX__: u32 = 4294967295;
    pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_FAST64_MAX__: i32 = -1;
    pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __FINITE_MATH_ONLY__: u32 = 0;
    pub const __GNUC_GNU_INLINE__: u32 = 1;
    pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
    pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __PIC__: u32 = 2;
    pub const __pic__: u32 = 2;
    pub const __FLT_EVAL_METHOD__: u32 = 0;
    pub const __FLT_RADIX__: u32 = 2;
    pub const __DECIMAL_DIG__: u32 = 21;
    pub const __SSP_STRONG__: u32 = 2;
    pub const __code_model_small_: u32 = 1;
    pub const __amd64__: u32 = 1;
    pub const __amd64: u32 = 1;
    pub const __x86_64: u32 = 1;
    pub const __x86_64__: u32 = 1;
    pub const __bdver2: u32 = 1;
    pub const __bdver2__: u32 = 1;
    pub const __tune_bdver2__: u32 = 1;
    pub const __NO_MATH_INLINES: u32 = 1;
    pub const __AES__: u32 = 1;
    pub const __PCLMUL__: u32 = 1;
    pub const __LZCNT__: u32 = 1;
    pub const __BMI__: u32 = 1;
    pub const __POPCNT__: u32 = 1;
    pub const __PRFCHW__: u32 = 1;
    pub const __TBM__: u32 = 1;
    pub const __LWP__: u32 = 1;
    pub const __XOP__: u32 = 1;
    pub const __FMA4__: u32 = 1;
    pub const __SSE4A__: u32 = 1;
    pub const __FMA__: u32 = 1;
    pub const __F16C__: u32 = 1;
    pub const __FXSR__: u32 = 1;
    pub const __XSAVE__: u32 = 1;
    pub const __AVX__: u32 = 1;
    pub const __SSE4_2__: u32 = 1;
    pub const __SSE4_1__: u32 = 1;
    pub const __SSSE3__: u32 = 1;
    pub const __SSE3__: u32 = 1;
    pub const __SSE2__: u32 = 1;
    pub const __SSE2_MATH__: u32 = 1;
    pub const __SSE__: u32 = 1;
    pub const __SSE_MATH__: u32 = 1;
    pub const __MMX__: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
    pub const __SIZEOF_FLOAT128__: u32 = 16;
    pub const __unix: u32 = 1;
    pub const __unix__: u32 = 1;
    pub const __linux: u32 = 1;
    pub const __linux__: u32 = 1;
    pub const __gnu_linux__: u32 = 1;
    pub const __ELF__: u32 = 1;
    pub const _GNU_SOURCE: u32 = 1;
    pub const __FLOAT128__: u32 = 1;
    pub const __STDC__: u32 = 1;
    pub const __STDC_HOSTED__: u32 = 1;
    pub const __cplusplus: u32 = 201703;
    pub const __STDCPP_DEFAULT_NEW_ALIGNMENT__: u32 = 16;
    pub const __STDC_UTF_16__: u32 = 1;
    pub const __STDC_UTF_32__: u32 = 1;
    pub const HAVE_CONFIG_H: u32 = 1;
    pub const HAVE_POLL: u32 = 1;
    pub const HAVE_LIBPTHREAD: u32 = 1;
    pub const ENABLE_THREADS: u32 = 1;
    pub const __PLATFORM_LINUX__: u32 = 1;
    pub const __LINUX_ALSA__: u32 = 1;
    pub const __UNIX_JACK__: u32 = 1;
    pub const USE_ALSA: u32 = 1;
    pub const USE_DLTRICK_ALSA: u32 = 1;
    pub const USE_OSS: u32 = 1;
    pub const _GLIBCXX_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 8;
    pub const __GLIBCXX__: u32 = 20181127;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_USE_WEAK_REF: u32 = 1;
    pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
    pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
    pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
    pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
    pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
    pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
    pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
    pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
    pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
    pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
    pub const STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_HOSTED: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INT128: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
    pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
    pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
    pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const _MEMORY_H: u32 = 1;
    pub const _STRING_H: u32 = 1;
    pub const _STRINGS_H: u32 = 1;
    pub const _ASSERT_H: u32 = 1;
    pub const sz_VOID: u32 = 0;
    pub const sz_WORD: u32 = 4;
    pub const kindof_VOID: u32 = 0;
    pub const kindof_INT: u32 = 1;
    pub const kindof_FLOAT: u32 = 2;
    pub const kindof_COMPLEX: u32 = 3;
    pub const kindof_VEC3: u32 = 4;
    pub const kindof_VEC4: u32 = 5;
    pub const SILENCE: f64 = 0.0;
    pub const TRUE: u32 = 1;
    pub const FALSE: u32 = 0;
    pub const ONE_PI: f64 = 3.141592653589793;
    pub const TWO_PI: f64 = 6.283185307179586;
    pub const SQRT2: f64 = 1.4142135623730951;
    pub const __CHUCK_STAT_TRACK__: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const __cookie_io_functions_t_defined: u32 = 1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const RENAME_NOREPLACE: u32 = 1;
    pub const RENAME_EXCHANGE: u32 = 2;
    pub const RENAME_WHITEOUT: u32 = 4;
    pub const _BITS_STDIO_H: u32 = 1;
    pub const _GLIBCXX_STRING: u32 = 1;
    pub const _STRINGFWD_H: u32 = 1;
    pub const _MEMORYFWD_H: u32 = 1;
    pub const _CHAR_TRAITS_H: u32 = 1;
    pub const _STL_ALGOBASE_H: u32 = 1;
    pub const _FUNCTEXCEPT_H: u32 = 1;
    pub const _EXCEPTION_DEFINES_H: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _EXT_NUMERIC_TRAITS: u32 = 1;
    pub const _STL_PAIR_H: u32 = 1;
    pub const _MOVE_H: u32 = 1;
    pub const _CONCEPT_CHECK_H: u32 = 1;
    pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_bool_constant: u32 = 201505;
    pub const __cpp_lib_logical_traits: u32 = 201510;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const __cpp_lib_void_t: u32 = 201411;
    pub const __cpp_lib_is_swappable: u32 = 201603;
    pub const __cpp_lib_is_invocable: u32 = 201703;
    pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
    pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
    pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
    pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
    pub const __cpp_lib_is_aggregate: u32 = 201703;
    pub const __cpp_lib_addressof_constexpr: u32 = 201603;
    pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
    pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
    pub const _STL_ITERATOR_H: u32 = 1;
    pub const _PTR_TRAITS_H: u32 = 1;
    pub const __cpp_lib_array_constexpr: u32 = 201603;
    pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
    pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
    pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
    pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const _GLIBCXX_POSTYPES_H: u32 = 1;
    pub const _WCHAR_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const __WCHAR_MAX: u32 = 2147483647;
    pub const __WCHAR_MIN: i32 = -2147483648;
    pub const __wint_t_defined: u32 = 1;
    pub const _WINT_T: u32 = 1;
    pub const __mbstate_t_defined: u32 = 1;
    pub const WCHAR_MIN: i32 = -2147483648;
    pub const WCHAR_MAX: u32 = 2147483647;
    pub const WEOF: u32 = 4294967295;
    pub const _GLIBCXX_CWCHAR: u32 = 1;
    pub const __cpp_lib_constexpr_char_traits: u32 = 201611;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
    pub const _NEW_ALLOCATOR_H: u32 = 1;
    pub const __EXCEPTION_H: u32 = 1;
    pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
    pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
    pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
    pub const _HASH_BYTES_H: u32 = 1;
    pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
    pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
    pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
    pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
    pub const __cpp_lib_launder: u32 = 201606;
    pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
    pub const __cpp_lib_allocator_is_always_equal: u32 = 201411;
    pub const _LOCALE_FWD_H: u32 = 1;
    pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
    pub const _LOCALE_H: u32 = 1;
    pub const _BITS_LOCALE_H: u32 = 1;
    pub const __LC_CTYPE: u32 = 0;
    pub const __LC_NUMERIC: u32 = 1;
    pub const __LC_TIME: u32 = 2;
    pub const __LC_COLLATE: u32 = 3;
    pub const __LC_MONETARY: u32 = 4;
    pub const __LC_MESSAGES: u32 = 5;
    pub const __LC_ALL: u32 = 6;
    pub const __LC_PAPER: u32 = 7;
    pub const __LC_NAME: u32 = 8;
    pub const __LC_ADDRESS: u32 = 9;
    pub const __LC_TELEPHONE: u32 = 10;
    pub const __LC_MEASUREMENT: u32 = 11;
    pub const __LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE: u32 = 0;
    pub const LC_NUMERIC: u32 = 1;
    pub const LC_TIME: u32 = 2;
    pub const LC_COLLATE: u32 = 3;
    pub const LC_MONETARY: u32 = 4;
    pub const LC_MESSAGES: u32 = 5;
    pub const LC_ALL: u32 = 6;
    pub const LC_PAPER: u32 = 7;
    pub const LC_NAME: u32 = 8;
    pub const LC_ADDRESS: u32 = 9;
    pub const LC_TELEPHONE: u32 = 10;
    pub const LC_MEASUREMENT: u32 = 11;
    pub const LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE_MASK: u32 = 1;
    pub const LC_NUMERIC_MASK: u32 = 2;
    pub const LC_TIME_MASK: u32 = 4;
    pub const LC_COLLATE_MASK: u32 = 8;
    pub const LC_MONETARY_MASK: u32 = 16;
    pub const LC_MESSAGES_MASK: u32 = 32;
    pub const LC_PAPER_MASK: u32 = 128;
    pub const LC_NAME_MASK: u32 = 256;
    pub const LC_ADDRESS_MASK: u32 = 512;
    pub const LC_TELEPHONE_MASK: u32 = 1024;
    pub const LC_MEASUREMENT_MASK: u32 = 2048;
    pub const LC_IDENTIFICATION_MASK: u32 = 4096;
    pub const LC_ALL_MASK: u32 = 8127;
    pub const _GLIBCXX_CLOCALE: u32 = 1;
    pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
    pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
    pub const _GLIBCXX_IOSFWD: u32 = 1;
    pub const _CTYPE_H: u32 = 1;
    pub const _GLIBCXX_CCTYPE: u32 = 1;
    pub const _OSTREAM_INSERT_H: u32 = 1;
    pub const _CXXABI_FORCED_H: u32 = 1;
    pub const _STL_FUNCTION_H: u32 = 1;
    pub const __cpp_lib_transparent_operators: u32 = 201510;
    pub const _BACKWARD_BINDERS_H: u32 = 1;
    pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
    pub const __cpp_lib_nonmember_container_access: u32 = 201411;
    pub const _BASIC_STRING_H: u32 = 1;
    pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 1;
    pub const __GTHREADS: u32 = 1;
    pub const __GTHREADS_CXX0X: u32 = 1;
    pub const _PTHREAD_H: u32 = 1;
    pub const _SCHED_H: u32 = 1;
    pub const _BITS_SCHED_H: u32 = 1;
    pub const SCHED_OTHER: u32 = 0;
    pub const SCHED_FIFO: u32 = 1;
    pub const SCHED_RR: u32 = 2;
    pub const SCHED_BATCH: u32 = 3;
    pub const SCHED_ISO: u32 = 4;
    pub const SCHED_IDLE: u32 = 5;
    pub const SCHED_DEADLINE: u32 = 6;
    pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
    pub const CSIGNAL: u32 = 255;
    pub const CLONE_VM: u32 = 256;
    pub const CLONE_FS: u32 = 512;
    pub const CLONE_FILES: u32 = 1024;
    pub const CLONE_SIGHAND: u32 = 2048;
    pub const CLONE_PTRACE: u32 = 8192;
    pub const CLONE_VFORK: u32 = 16384;
    pub const CLONE_PARENT: u32 = 32768;
    pub const CLONE_THREAD: u32 = 65536;
    pub const CLONE_NEWNS: u32 = 131072;
    pub const CLONE_SYSVSEM: u32 = 262144;
    pub const CLONE_SETTLS: u32 = 524288;
    pub const CLONE_PARENT_SETTID: u32 = 1048576;
    pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
    pub const CLONE_DETACHED: u32 = 4194304;
    pub const CLONE_UNTRACED: u32 = 8388608;
    pub const CLONE_CHILD_SETTID: u32 = 16777216;
    pub const CLONE_NEWCGROUP: u32 = 33554432;
    pub const CLONE_NEWUTS: u32 = 67108864;
    pub const CLONE_NEWIPC: u32 = 134217728;
    pub const CLONE_NEWUSER: u32 = 268435456;
    pub const CLONE_NEWPID: u32 = 536870912;
    pub const CLONE_NEWNET: u32 = 1073741824;
    pub const CLONE_IO: u32 = 2147483648;
    pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
    pub const _BITS_CPU_SET_H: u32 = 1;
    pub const __CPU_SETSIZE: u32 = 1024;
    pub const CPU_SETSIZE: u32 = 1024;
    pub const _TIME_H: u32 = 1;
    pub const _BITS_TIME_H: u32 = 1;
    pub const CLOCK_REALTIME: u32 = 0;
    pub const CLOCK_MONOTONIC: u32 = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const CLOCK_REALTIME_COARSE: u32 = 5;
    pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const CLOCK_BOOTTIME: u32 = 7;
    pub const CLOCK_REALTIME_ALARM: u32 = 8;
    pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const CLOCK_TAI: u32 = 11;
    pub const TIMER_ABSTIME: u32 = 1;
    pub const _BITS_TIMEX_H: u32 = 1;
    pub const ADJ_OFFSET: u32 = 1;
    pub const ADJ_FREQUENCY: u32 = 2;
    pub const ADJ_MAXERROR: u32 = 4;
    pub const ADJ_ESTERROR: u32 = 8;
    pub const ADJ_STATUS: u32 = 16;
    pub const ADJ_TIMECONST: u32 = 32;
    pub const ADJ_TAI: u32 = 128;
    pub const ADJ_SETOFFSET: u32 = 256;
    pub const ADJ_MICRO: u32 = 4096;
    pub const ADJ_NANO: u32 = 8192;
    pub const ADJ_TICK: u32 = 16384;
    pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const MOD_OFFSET: u32 = 1;
    pub const MOD_FREQUENCY: u32 = 2;
    pub const MOD_MAXERROR: u32 = 4;
    pub const MOD_ESTERROR: u32 = 8;
    pub const MOD_STATUS: u32 = 16;
    pub const MOD_TIMECONST: u32 = 32;
    pub const MOD_CLKB: u32 = 16384;
    pub const MOD_CLKA: u32 = 32769;
    pub const MOD_TAI: u32 = 128;
    pub const MOD_MICRO: u32 = 4096;
    pub const MOD_NANO: u32 = 8192;
    pub const STA_PLL: u32 = 1;
    pub const STA_PPSFREQ: u32 = 2;
    pub const STA_PPSTIME: u32 = 4;
    pub const STA_FLL: u32 = 8;
    pub const STA_INS: u32 = 16;
    pub const STA_DEL: u32 = 32;
    pub const STA_UNSYNC: u32 = 64;
    pub const STA_FREQHOLD: u32 = 128;
    pub const STA_PPSSIGNAL: u32 = 256;
    pub const STA_PPSJITTER: u32 = 512;
    pub const STA_PPSWANDER: u32 = 1024;
    pub const STA_PPSERROR: u32 = 2048;
    pub const STA_CLOCKERR: u32 = 4096;
    pub const STA_NANO: u32 = 8192;
    pub const STA_MODE: u32 = 16384;
    pub const STA_CLK: u32 = 32768;
    pub const STA_RONLY: u32 = 65280;
    pub const __struct_tm_defined: u32 = 1;
    pub const __itimerspec_defined: u32 = 1;
    pub const TIME_UTC: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const PTHREAD_ONCE_INIT: u32 = 0;
    pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
    pub const __GTHREAD_HAS_COND: u32 = 1;
    pub const __GTHREAD_ONCE_INIT: u32 = 0;
    pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
    pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
    pub const _ALLOC_TRAITS_H: u32 = 1;
    pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
    pub const _GLIBCXX_STRING_VIEW: u32 = 1;
    pub const _GLIBCXX_NUMERIC_LIMITS: u32 = 1;
    pub const _FUNCTIONAL_HASH_H: u32 = 1;
    pub const __cpp_lib_string_view: u32 = 201603;
    pub const _GLIBCXX_STRING_VIEW_TCC: u32 = 1;
    pub const _STRING_CONVERSIONS_H: u32 = 1;
    pub const _GLIBCXX_CSTDIO: u32 = 1;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const __cpp_lib_string_udls: u32 = 201304;
    pub const _BASIC_STRING_TCC: u32 = 1;
    pub const _GLIBCXX_VECTOR: u32 = 1;
    pub const _STL_CONSTRUCT_H: u32 = 1;
    pub const _STL_UNINITIALIZED_H: u32 = 1;
    pub const _GLIBCXX_UTILITY: u32 = 1;
    pub const _STL_RELOPS_H: u32 = 1;
    pub const __cpp_lib_tuple_element_t: u32 = 201402;
    pub const __cpp_lib_tuples_by_type: u32 = 201304;
    pub const __cpp_lib_exchange_function: u32 = 201304;
    pub const _GLIBCXX_USE_MAKE_INTEGER_SEQ: u32 = 1;
    pub const __cpp_lib_integer_sequence: u32 = 201304;
    pub const __cpp_lib_as_const: u32 = 201510;
    pub const _STL_VECTOR_H: u32 = 1;
    pub const _STL_BVECTOR_H: u32 = 1;
    pub const _VECTOR_TCC: u32 = 1;
    pub const _GLIBCXX_MAP: u32 = 1;
    pub const _STL_TREE_H: u32 = 1;
    pub const _ALIGNED_BUFFER_H: u32 = 1;
    pub const _NODE_HANDLE: u32 = 1;
    pub const __cpp_lib_node_extract: u32 = 201606;
    pub const _GLIBCXX_OPTIONAL: u32 = 1;
    pub const _GLIBCXX_STDEXCEPT: u32 = 1;
    pub const _ENABLE_SPECIAL_MEMBERS_H: u32 = 1;
    pub const __cpp_lib_optional: u32 = 201603;
    pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
    pub const _STL_MAP_H: u32 = 1;
    pub const _GLIBCXX_TUPLE: u32 = 1;
    pub const _GLIBCXX_ARRAY: u32 = 1;
    pub const _USES_ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_INVOKE_H: u32 = 1;
    pub const __cpp_lib_apply: u32 = 201603;
    pub const __cpp_lib_make_from_tuple: u32 = 201606;
    pub const __cpp_lib_map_try_emplace: u32 = 201411;
    pub const __cpp_lib_map_insertion: u32 = 201411;
    pub const _STL_MULTIMAP_H: u32 = 1;
    pub const _GLIBCXX_QUEUE: u32 = 1;
    pub const _GLIBCXX_DEQUE: u32 = 1;
    pub const _STL_DEQUE_H: u32 = 1;
    pub const _GLIBCXX_DEQUE_BUF_SIZE: u32 = 512;
    pub const _DEQUE_TCC: u32 = 1;
    pub const _STL_HEAP_H: u32 = 1;
    pub const _STL_QUEUE_H: u32 = 1;
    pub const _GLIBCXX_FSTREAM: u32 = 1;
    pub const _GLIBCXX_ISTREAM: u32 = 1;
    pub const _GLIBCXX_IOS: u32 = 1;
    pub const _IOS_BASE_H: u32 = 1;
    pub const _LOCALE_CLASSES_H: u32 = 1;
    pub const _LOCALE_CLASSES_TCC: u32 = 1;
    pub const _GLIBCXX_SYSTEM_ERROR: u32 = 1;
    pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
    pub const _GLIBXX_STREAMBUF: u32 = 1;
    pub const _STREAMBUF_TCC: u32 = 1;
    pub const _BASIC_IOS_H: u32 = 1;
    pub const _LOCALE_FACETS_H: u32 = 1;
    pub const _WCTYPE_H: u32 = 1;
    pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_CWCTYPE: u32 = 1;
    pub const _STREAMBUF_ITERATOR_H: u32 = 1;
    pub const _GLIBCXX_NUM_FACETS: u32 = 28;
    pub const _GLIBCXX_NUM_CXX11_FACETS: u32 = 16;
    pub const _GLIBCXX_NUM_UNICODE_FACETS: u32 = 2;
    pub const _LOCALE_FACETS_TCC: u32 = 1;
    pub const _BASIC_IOS_TCC: u32 = 1;
    pub const _GLIBCXX_OSTREAM: u32 = 1;
    pub const _OSTREAM_TCC: u32 = 1;
    pub const _ISTREAM_TCC: u32 = 1;
    pub const _CODECVT_H: u32 = 1;
    pub const _GLIBCXX_BASIC_FILE_STDIO_H: u32 = 1;
    pub const _GLIBCXX_CXX_IO_H: u32 = 1;
    pub const _FSTREAM_TCC: u32 = 1;
    pub const _GLIBCXX_SSTREAM: u32 = 1;
    pub const _SSTREAM_TCC: u32 = 1;
    pub const _DIRENT_H: u32 = 1;
    pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
    pub const _BITS_POSIX1_LIM_H: u32 = 1;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_FD_SETSIZE: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX_QLIMIT: u32 = 1;
    pub const _POSIX_HIWAT: u32 = 512;
    pub const _POSIX_UIO_MAXIOV: u32 = 16;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const NR_OPEN: u32 = 1024;
    pub const NGROUPS_MAX: u32 = 65536;
    pub const ARG_MAX: u32 = 131072;
    pub const LINK_MAX: u32 = 127;
    pub const MAX_CANON: u32 = 255;
    pub const MAX_INPUT: u32 = 255;
    pub const NAME_MAX: u32 = 255;
    pub const PATH_MAX: u32 = 4096;
    pub const PIPE_BUF: u32 = 4096;
    pub const XATTR_NAME_MAX: u32 = 255;
    pub const XATTR_SIZE_MAX: u32 = 65536;
    pub const XATTR_LIST_MAX: u32 = 65536;
    pub const RTSIG_MAX: u32 = 32;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const PTHREAD_KEYS_MAX: u32 = 1024;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const AIO_PRIO_DELTA_MAX: u32 = 20;
    pub const PTHREAD_STACK_MIN: u32 = 16384;
    pub const DELAYTIMER_MAX: u32 = 2147483647;
    pub const TTY_NAME_MAX: u32 = 32;
    pub const LOGIN_NAME_MAX: u32 = 256;
    pub const HOST_NAME_MAX: u32 = 64;
    pub const MQ_PRIO_MAX: u32 = 32768;
    pub const SEM_VALUE_MAX: u32 = 2147483647;
    pub const MAXNAMLEN: u32 = 255;
    pub const CHUCK_ARRAY4_DATAKIND: u32 = 1;
    pub const CHUCK_ARRAY8_DATAKIND: u32 = 2;
    pub const CHUCK_ARRAY16_DATAKIND: u32 = 3;
    pub const CHUCK_ARRAY24_DATAKIND: u32 = 4;
    pub const CHUCK_ARRAY32_DATAKIND: u32 = 5;
    pub const CK_DLL_VERSION_MAJOR: u32 = 7;
    pub const CK_DLL_VERSION_MINOR: u32 = 0;
    pub const CK_QUERY_FUNC: &'static [u8; 9usize] = b"ck_query\0";
    pub const CK_DECLVERSION_FUNC: &'static [u8; 11usize] = b"ck_version\0";
    pub const CK_INVALID_OFFSET: u32 = 4294967295;
    pub const _DLFCN_H: u32 = 1;
    pub const RTLD_LAZY: u32 = 1;
    pub const RTLD_NOW: u32 = 2;
    pub const RTLD_BINDING_MASK: u32 = 3;
    pub const RTLD_NOLOAD: u32 = 4;
    pub const RTLD_DEEPBIND: u32 = 8;
    pub const RTLD_GLOBAL: u32 = 256;
    pub const RTLD_LOCAL: u32 = 0;
    pub const RTLD_NODELETE: u32 = 4096;
    pub const LM_ID_BASE: u32 = 0;
    pub const LM_ID_NEWLM: i32 = -1;
    pub const CK_LOG_CRAZY: u32 = 10;
    pub const CK_LOG_FINEST: u32 = 9;
    pub const CK_LOG_FINER: u32 = 8;
    pub const CK_LOG_FINE: u32 = 7;
    pub const CK_LOG_CONFIG: u32 = 6;
    pub const CK_LOG_INFO: u32 = 5;
    pub const CK_LOG_WARNING: u32 = 4;
    pub const CK_LOG_SEVERE: u32 = 3;
    pub const CK_LOG_SYSTEM: u32 = 2;
    pub const CK_LOG_CORE: u32 = 1;
    pub const CK_LOG_NONE: u32 = 0;
    pub const UGEN_OP_PASS: i32 = -1;
    pub const UGEN_OP_STOP: u32 = 0;
    pub const UGEN_OP_TICK: u32 = 1;
    pub const _GLIBCXX_IOSTREAM: u32 = 1;
    pub const _GLIBCXX_LIST: u32 = 1;
    pub const _STL_LIST_H: u32 = 1;
    pub const _ALLOCATED_PTR_H: u32 = 1;
    pub const _LIST_TCC: u32 = 1;
    pub const CK_DEBUG_MEMORY_MGMT: u32 = 0;
    pub const CVM_MEM_STACK_SIZE: u32 = 65536;
    pub const CVM_REG_STACK_SIZE: u32 = 16384;
    pub const _SYS_SOCKET_H: u32 = 1;
    pub const __iovec_defined: u32 = 1;
    pub const PF_UNSPEC: u32 = 0;
    pub const PF_LOCAL: u32 = 1;
    pub const PF_UNIX: u32 = 1;
    pub const PF_FILE: u32 = 1;
    pub const PF_INET: u32 = 2;
    pub const PF_AX25: u32 = 3;
    pub const PF_IPX: u32 = 4;
    pub const PF_APPLETALK: u32 = 5;
    pub const PF_NETROM: u32 = 6;
    pub const PF_BRIDGE: u32 = 7;
    pub const PF_ATMPVC: u32 = 8;
    pub const PF_X25: u32 = 9;
    pub const PF_INET6: u32 = 10;
    pub const PF_ROSE: u32 = 11;
    pub const PF_DECnet: u32 = 12;
    pub const PF_NETBEUI: u32 = 13;
    pub const PF_SECURITY: u32 = 14;
    pub const PF_KEY: u32 = 15;
    pub const PF_NETLINK: u32 = 16;
    pub const PF_ROUTE: u32 = 16;
    pub const PF_PACKET: u32 = 17;
    pub const PF_ASH: u32 = 18;
    pub const PF_ECONET: u32 = 19;
    pub const PF_ATMSVC: u32 = 20;
    pub const PF_RDS: u32 = 21;
    pub const PF_SNA: u32 = 22;
    pub const PF_IRDA: u32 = 23;
    pub const PF_PPPOX: u32 = 24;
    pub const PF_WANPIPE: u32 = 25;
    pub const PF_LLC: u32 = 26;
    pub const PF_IB: u32 = 27;
    pub const PF_MPLS: u32 = 28;
    pub const PF_CAN: u32 = 29;
    pub const PF_TIPC: u32 = 30;
    pub const PF_BLUETOOTH: u32 = 31;
    pub const PF_IUCV: u32 = 32;
    pub const PF_RXRPC: u32 = 33;
    pub const PF_ISDN: u32 = 34;
    pub const PF_PHONET: u32 = 35;
    pub const PF_IEEE802154: u32 = 36;
    pub const PF_CAIF: u32 = 37;
    pub const PF_ALG: u32 = 38;
    pub const PF_NFC: u32 = 39;
    pub const PF_VSOCK: u32 = 40;
    pub const PF_KCM: u32 = 41;
    pub const PF_QIPCRTR: u32 = 42;
    pub const PF_SMC: u32 = 43;
    pub const PF_MAX: u32 = 44;
    pub const AF_UNSPEC: u32 = 0;
    pub const AF_LOCAL: u32 = 1;
    pub const AF_UNIX: u32 = 1;
    pub const AF_FILE: u32 = 1;
    pub const AF_INET: u32 = 2;
    pub const AF_AX25: u32 = 3;
    pub const AF_IPX: u32 = 4;
    pub const AF_APPLETALK: u32 = 5;
    pub const AF_NETROM: u32 = 6;
    pub const AF_BRIDGE: u32 = 7;
    pub const AF_ATMPVC: u32 = 8;
    pub const AF_X25: u32 = 9;
    pub const AF_INET6: u32 = 10;
    pub const AF_ROSE: u32 = 11;
    pub const AF_DECnet: u32 = 12;
    pub const AF_NETBEUI: u32 = 13;
    pub const AF_SECURITY: u32 = 14;
    pub const AF_KEY: u32 = 15;
    pub const AF_NETLINK: u32 = 16;
    pub const AF_ROUTE: u32 = 16;
    pub const AF_PACKET: u32 = 17;
    pub const AF_ASH: u32 = 18;
    pub const AF_ECONET: u32 = 19;
    pub const AF_ATMSVC: u32 = 20;
    pub const AF_RDS: u32 = 21;
    pub const AF_SNA: u32 = 22;
    pub const AF_IRDA: u32 = 23;
    pub const AF_PPPOX: u32 = 24;
    pub const AF_WANPIPE: u32 = 25;
    pub const AF_LLC: u32 = 26;
    pub const AF_IB: u32 = 27;
    pub const AF_MPLS: u32 = 28;
    pub const AF_CAN: u32 = 29;
    pub const AF_TIPC: u32 = 30;
    pub const AF_BLUETOOTH: u32 = 31;
    pub const AF_IUCV: u32 = 32;
    pub const AF_RXRPC: u32 = 33;
    pub const AF_ISDN: u32 = 34;
    pub const AF_PHONET: u32 = 35;
    pub const AF_IEEE802154: u32 = 36;
    pub const AF_CAIF: u32 = 37;
    pub const AF_ALG: u32 = 38;
    pub const AF_NFC: u32 = 39;
    pub const AF_VSOCK: u32 = 40;
    pub const AF_KCM: u32 = 41;
    pub const AF_QIPCRTR: u32 = 42;
    pub const AF_SMC: u32 = 43;
    pub const AF_MAX: u32 = 44;
    pub const SOL_RAW: u32 = 255;
    pub const SOL_DECNET: u32 = 261;
    pub const SOL_X25: u32 = 262;
    pub const SOL_PACKET: u32 = 263;
    pub const SOL_ATM: u32 = 264;
    pub const SOL_AAL: u32 = 265;
    pub const SOL_IRDA: u32 = 266;
    pub const SOL_NETBEUI: u32 = 267;
    pub const SOL_LLC: u32 = 268;
    pub const SOL_DCCP: u32 = 269;
    pub const SOL_NETLINK: u32 = 270;
    pub const SOL_TIPC: u32 = 271;
    pub const SOL_RXRPC: u32 = 272;
    pub const SOL_PPPOL2TP: u32 = 273;
    pub const SOL_BLUETOOTH: u32 = 274;
    pub const SOL_PNPIPE: u32 = 275;
    pub const SOL_RDS: u32 = 276;
    pub const SOL_IUCV: u32 = 277;
    pub const SOL_CAIF: u32 = 278;
    pub const SOL_ALG: u32 = 279;
    pub const SOL_NFC: u32 = 280;
    pub const SOL_KCM: u32 = 281;
    pub const SOL_TLS: u32 = 282;
    pub const SOMAXCONN: u32 = 128;
    pub const _BITS_SOCKADDR_H: u32 = 1;
    pub const _SS_SIZE: u32 = 128;
    pub const FIOSETOWN: u32 = 35073;
    pub const SIOCSPGRP: u32 = 35074;
    pub const FIOGETOWN: u32 = 35075;
    pub const SIOCGPGRP: u32 = 35076;
    pub const SIOCATMARK: u32 = 35077;
    pub const SIOCGSTAMP: u32 = 35078;
    pub const SIOCGSTAMPNS: u32 = 35079;
    pub const SOL_SOCKET: u32 = 1;
    pub const SO_DEBUG: u32 = 1;
    pub const SO_REUSEADDR: u32 = 2;
    pub const SO_TYPE: u32 = 3;
    pub const SO_ERROR: u32 = 4;
    pub const SO_DONTROUTE: u32 = 5;
    pub const SO_BROADCAST: u32 = 6;
    pub const SO_SNDBUF: u32 = 7;
    pub const SO_RCVBUF: u32 = 8;
    pub const SO_SNDBUFFORCE: u32 = 32;
    pub const SO_RCVBUFFORCE: u32 = 33;
    pub const SO_KEEPALIVE: u32 = 9;
    pub const SO_OOBINLINE: u32 = 10;
    pub const SO_NO_CHECK: u32 = 11;
    pub const SO_PRIORITY: u32 = 12;
    pub const SO_LINGER: u32 = 13;
    pub const SO_BSDCOMPAT: u32 = 14;
    pub const SO_REUSEPORT: u32 = 15;
    pub const SO_PASSCRED: u32 = 16;
    pub const SO_PEERCRED: u32 = 17;
    pub const SO_RCVLOWAT: u32 = 18;
    pub const SO_SNDLOWAT: u32 = 19;
    pub const SO_RCVTIMEO: u32 = 20;
    pub const SO_SNDTIMEO: u32 = 21;
    pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
    pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
    pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
    pub const SO_BINDTODEVICE: u32 = 25;
    pub const SO_ATTACH_FILTER: u32 = 26;
    pub const SO_DETACH_FILTER: u32 = 27;
    pub const SO_GET_FILTER: u32 = 26;
    pub const SO_PEERNAME: u32 = 28;
    pub const SO_TIMESTAMP: u32 = 29;
    pub const SCM_TIMESTAMP: u32 = 29;
    pub const SO_ACCEPTCONN: u32 = 30;
    pub const SO_PEERSEC: u32 = 31;
    pub const SO_PASSSEC: u32 = 34;
    pub const SO_TIMESTAMPNS: u32 = 35;
    pub const SCM_TIMESTAMPNS: u32 = 35;
    pub const SO_MARK: u32 = 36;
    pub const SO_TIMESTAMPING: u32 = 37;
    pub const SCM_TIMESTAMPING: u32 = 37;
    pub const SO_PROTOCOL: u32 = 38;
    pub const SO_DOMAIN: u32 = 39;
    pub const SO_RXQ_OVFL: u32 = 40;
    pub const SO_WIFI_STATUS: u32 = 41;
    pub const SCM_WIFI_STATUS: u32 = 41;
    pub const SO_PEEK_OFF: u32 = 42;
    pub const SO_NOFCS: u32 = 43;
    pub const SO_LOCK_FILTER: u32 = 44;
    pub const SO_SELECT_ERR_QUEUE: u32 = 45;
    pub const SO_BUSY_POLL: u32 = 46;
    pub const SO_MAX_PACING_RATE: u32 = 47;
    pub const SO_BPF_EXTENSIONS: u32 = 48;
    pub const SO_INCOMING_CPU: u32 = 49;
    pub const SO_ATTACH_BPF: u32 = 50;
    pub const SO_DETACH_BPF: u32 = 27;
    pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
    pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
    pub const SO_CNX_ADVICE: u32 = 53;
    pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
    pub const SO_MEMINFO: u32 = 55;
    pub const SO_INCOMING_NAPI_ID: u32 = 56;
    pub const SO_COOKIE: u32 = 57;
    pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
    pub const SO_PEERGROUPS: u32 = 59;
    pub const SO_ZEROCOPY: u32 = 60;
    pub const __osockaddr_defined: u32 = 1;
    pub const _NETINET_IN_H: u32 = 1;
    pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
    pub const IP_OPTIONS: u32 = 4;
    pub const IP_HDRINCL: u32 = 3;
    pub const IP_TOS: u32 = 1;
    pub const IP_TTL: u32 = 2;
    pub const IP_RECVOPTS: u32 = 6;
    pub const IP_RETOPTS: u32 = 7;
    pub const IP_MULTICAST_IF: u32 = 32;
    pub const IP_MULTICAST_TTL: u32 = 33;
    pub const IP_MULTICAST_LOOP: u32 = 34;
    pub const IP_ADD_MEMBERSHIP: u32 = 35;
    pub const IP_DROP_MEMBERSHIP: u32 = 36;
    pub const IP_UNBLOCK_SOURCE: u32 = 37;
    pub const IP_BLOCK_SOURCE: u32 = 38;
    pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
    pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
    pub const IP_MSFILTER: u32 = 41;
    pub const MCAST_JOIN_GROUP: u32 = 42;
    pub const MCAST_BLOCK_SOURCE: u32 = 43;
    pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
    pub const MCAST_LEAVE_GROUP: u32 = 45;
    pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
    pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
    pub const MCAST_MSFILTER: u32 = 48;
    pub const IP_MULTICAST_ALL: u32 = 49;
    pub const IP_UNICAST_IF: u32 = 50;
    pub const MCAST_EXCLUDE: u32 = 0;
    pub const MCAST_INCLUDE: u32 = 1;
    pub const IP_ROUTER_ALERT: u32 = 5;
    pub const IP_PKTINFO: u32 = 8;
    pub const IP_PKTOPTIONS: u32 = 9;
    pub const IP_PMTUDISC: u32 = 10;
    pub const IP_MTU_DISCOVER: u32 = 10;
    pub const IP_RECVERR: u32 = 11;
    pub const IP_RECVTTL: u32 = 12;
    pub const IP_RECVTOS: u32 = 13;
    pub const IP_MTU: u32 = 14;
    pub const IP_FREEBIND: u32 = 15;
    pub const IP_IPSEC_POLICY: u32 = 16;
    pub const IP_XFRM_POLICY: u32 = 17;
    pub const IP_PASSSEC: u32 = 18;
    pub const IP_TRANSPARENT: u32 = 19;
    pub const IP_ORIGDSTADDR: u32 = 20;
    pub const IP_RECVORIGDSTADDR: u32 = 20;
    pub const IP_MINTTL: u32 = 21;
    pub const IP_NODEFRAG: u32 = 22;
    pub const IP_CHECKSUM: u32 = 23;
    pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
    pub const IP_RECVFRAGSIZE: u32 = 25;
    pub const IP_PMTUDISC_DONT: u32 = 0;
    pub const IP_PMTUDISC_WANT: u32 = 1;
    pub const IP_PMTUDISC_DO: u32 = 2;
    pub const IP_PMTUDISC_PROBE: u32 = 3;
    pub const IP_PMTUDISC_INTERFACE: u32 = 4;
    pub const IP_PMTUDISC_OMIT: u32 = 5;
    pub const SOL_IP: u32 = 0;
    pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
    pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
    pub const IP_MAX_MEMBERSHIPS: u32 = 20;
    pub const IPV6_ADDRFORM: u32 = 1;
    pub const IPV6_2292PKTINFO: u32 = 2;
    pub const IPV6_2292HOPOPTS: u32 = 3;
    pub const IPV6_2292DSTOPTS: u32 = 4;
    pub const IPV6_2292RTHDR: u32 = 5;
    pub const IPV6_2292PKTOPTIONS: u32 = 6;
    pub const IPV6_CHECKSUM: u32 = 7;
    pub const IPV6_2292HOPLIMIT: u32 = 8;
    pub const IPV6_NEXTHOP: u32 = 9;
    pub const IPV6_AUTHHDR: u32 = 10;
    pub const IPV6_UNICAST_HOPS: u32 = 16;
    pub const IPV6_MULTICAST_IF: u32 = 17;
    pub const IPV6_MULTICAST_HOPS: u32 = 18;
    pub const IPV6_MULTICAST_LOOP: u32 = 19;
    pub const IPV6_JOIN_GROUP: u32 = 20;
    pub const IPV6_LEAVE_GROUP: u32 = 21;
    pub const IPV6_ROUTER_ALERT: u32 = 22;
    pub const IPV6_MTU_DISCOVER: u32 = 23;
    pub const IPV6_MTU: u32 = 24;
    pub const IPV6_RECVERR: u32 = 25;
    pub const IPV6_V6ONLY: u32 = 26;
    pub const IPV6_JOIN_ANYCAST: u32 = 27;
    pub const IPV6_LEAVE_ANYCAST: u32 = 28;
    pub const IPV6_IPSEC_POLICY: u32 = 34;
    pub const IPV6_XFRM_POLICY: u32 = 35;
    pub const IPV6_HDRINCL: u32 = 36;
    pub const IPV6_RECVPKTINFO: u32 = 49;
    pub const IPV6_PKTINFO: u32 = 50;
    pub const IPV6_RECVHOPLIMIT: u32 = 51;
    pub const IPV6_HOPLIMIT: u32 = 52;
    pub const IPV6_RECVHOPOPTS: u32 = 53;
    pub const IPV6_HOPOPTS: u32 = 54;
    pub const IPV6_RTHDRDSTOPTS: u32 = 55;
    pub const IPV6_RECVRTHDR: u32 = 56;
    pub const IPV6_RTHDR: u32 = 57;
    pub const IPV6_RECVDSTOPTS: u32 = 58;
    pub const IPV6_DSTOPTS: u32 = 59;
    pub const IPV6_RECVPATHMTU: u32 = 60;
    pub const IPV6_PATHMTU: u32 = 61;
    pub const IPV6_DONTFRAG: u32 = 62;
    pub const IPV6_RECVTCLASS: u32 = 66;
    pub const IPV6_TCLASS: u32 = 67;
    pub const IPV6_AUTOFLOWLABEL: u32 = 70;
    pub const IPV6_ADDR_PREFERENCES: u32 = 72;
    pub const IPV6_MINHOPCOUNT: u32 = 73;
    pub const IPV6_ORIGDSTADDR: u32 = 74;
    pub const IPV6_RECVORIGDSTADDR: u32 = 74;
    pub const IPV6_TRANSPARENT: u32 = 75;
    pub const IPV6_UNICAST_IF: u32 = 76;
    pub const IPV6_RECVFRAGSIZE: u32 = 77;
    pub const IPV6_FREEBIND: u32 = 78;
    pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
    pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
    pub const IPV6_RXHOPOPTS: u32 = 54;
    pub const IPV6_RXDSTOPTS: u32 = 59;
    pub const IPV6_PMTUDISC_DONT: u32 = 0;
    pub const IPV6_PMTUDISC_WANT: u32 = 1;
    pub const IPV6_PMTUDISC_DO: u32 = 2;
    pub const IPV6_PMTUDISC_PROBE: u32 = 3;
    pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
    pub const IPV6_PMTUDISC_OMIT: u32 = 5;
    pub const SOL_IPV6: u32 = 41;
    pub const SOL_ICMPV6: u32 = 58;
    pub const IPV6_RTHDR_LOOSE: u32 = 0;
    pub const IPV6_RTHDR_STRICT: u32 = 1;
    pub const IPV6_RTHDR_TYPE_0: u32 = 0;
    pub const IN_CLASSA_NET: u32 = 4278190080;
    pub const IN_CLASSA_NSHIFT: u32 = 24;
    pub const IN_CLASSA_HOST: u32 = 16777215;
    pub const IN_CLASSA_MAX: u32 = 128;
    pub const IN_CLASSB_NET: u32 = 4294901760;
    pub const IN_CLASSB_NSHIFT: u32 = 16;
    pub const IN_CLASSB_HOST: u32 = 65535;
    pub const IN_CLASSB_MAX: u32 = 65536;
    pub const IN_CLASSC_NET: u32 = 4294967040;
    pub const IN_CLASSC_NSHIFT: u32 = 8;
    pub const IN_CLASSC_HOST: u32 = 255;
    pub const IN_LOOPBACKNET: u32 = 127;
    pub const INET_ADDRSTRLEN: u32 = 16;
    pub const INET6_ADDRSTRLEN: u32 = 46;
    pub const NET_HEADER: u32 = 2358036680;
    pub const NET_BUFFER_SIZE: u32 = 512;
    pub const NET_ERROR: u32 = 4294967295;
    pub const CK_RANDOM_MAX: u32 = 2147483647;
    pub const CK_MAX_HID_DEVICES: u32 = 1024;
    pub const MIDI_NOTEON: u32 = 144;
    pub const MIDI_NOTEOFF: u32 = 128;
    pub const MIDI_POLYPRESS: u32 = 160;
    pub const MIDI_CTRLCHANGE: u32 = 176;
    pub const MIDI_PROGCHANGE: u32 = 192;
    pub const MIDI_CHANPRESS: u32 = 208;
    pub const MIDI_PITCHBEND: u32 = 224;
    pub const MIDI_ALLNOTESOFF: u32 = 123;
    pub const CHUCK_PARAM_SAMPLE_RATE: &'static [u8; 12usize] = b"SAMPLE_RATE\0";
    pub const CHUCK_PARAM_INPUT_CHANNELS: &'static [u8; 15usize] = b"INPUT_CHANNELS\0";
    pub const CHUCK_PARAM_OUTPUT_CHANNELS: &'static [u8; 16usize] = b"OUTPUT_CHANNELS\0";
    pub const CHUCK_PARAM_VM_ADAPTIVE: &'static [u8; 12usize] = b"VM_ADAPTIVE\0";
    pub const CHUCK_PARAM_VM_HALT: &'static [u8; 8usize] = b"VM_HALT\0";
    pub const CHUCK_PARAM_OTF_ENABLE: &'static [u8; 11usize] = b"OTF_ENABLE\0";
    pub const CHUCK_PARAM_OTF_PORT: &'static [u8; 9usize] = b"OTF_PORT\0";
    pub const CHUCK_PARAM_DUMP_INSTRUCTIONS: &'static [u8; 18usize] = b"DUMP_INSTRUCTIONS\0";
    pub const CHUCK_PARAM_AUTO_DEPEND: &'static [u8; 12usize] = b"AUTO_DEPEND\0";
    pub const CHUCK_PARAM_DEPRECATE_LEVEL: &'static [u8; 16usize] = b"DEPRECATE_LEVEL\0";
    pub const CHUCK_PARAM_WORKING_DIRECTORY: &'static [u8; 18usize] = b"WORKING_DIRECTORY\0";
    pub const CHUCK_PARAM_CHUGIN_ENABLE: &'static [u8; 14usize] = b"CHUGIN_ENABLE\0";
    pub const CHUCK_PARAM_CHUGIN_DIRECTORY: &'static [u8; 17usize] = b"CHUGIN_DIRECTORY\0";
    pub const CHUCK_PARAM_USER_CHUGINS: &'static [u8; 13usize] = b"USER_CHUGINS\0";
    pub const CHUCK_PARAM_USER_CHUGIN_DIRECTORIES: &'static [u8; 24usize] =
        b"USER_CHUGIN_DIRECTORIES\0";
    pub const CHUCK_PARAM_HINT_IS_REALTIME_AUDIO: &'static [u8; 23usize] =
        b"HINT_IS_REALTIME_AUDIO\0";
    pub const CHUCK_PARAM_LOG_LEVEL: &'static [u8; 10usize] = b"LOG_LEVEL\0";
    pub const NUM_CHANNELS_DEFAULT: u32 = 2;
    pub const NUM_BUFFERS_DEFAULT: u32 = 8;
    pub const DEVICE_NUM_OUT_DEFAULT: u32 = 0;
    pub const DEVICE_NUM_IN_DEFAULT: u32 = 0;
    pub const SAMPLE_RATE_DEFAULT: u32 = 48000;
    pub const BUFFER_SIZE_DEFAULT: u32 = 256;
    pub const _GLIBCXX_MATH_H: u32 = 1;
    pub const _MATH_H: u32 = 1;
    pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
    pub const __GLIBC_FLT_EVAL_METHOD: u32 = 0;
    pub const __FP_LOGB0_IS_MIN: u32 = 1;
    pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
    pub const FP_ILOGB0: i32 = -2147483648;
    pub const FP_ILOGBNAN: i32 = -2147483648;
    pub const __FP_LONG_MAX: u64 = 9223372036854775807;
    pub const FP_LLOGB0: i64 = -9223372036854775808;
    pub const FP_LLOGBNAN: i64 = -9223372036854775808;
    pub const FP_INT_UPWARD: u32 = 0;
    pub const FP_INT_DOWNWARD: u32 = 1;
    pub const FP_INT_TOWARDZERO: u32 = 2;
    pub const FP_INT_TONEARESTFROMZERO: u32 = 3;
    pub const FP_INT_TONEAREST: u32 = 4;
    pub const __MATH_DECLARING_DOUBLE: u32 = 1;
    pub const __MATH_DECLARING_FLOATN: u32 = 0;
    pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
    pub const FP_NAN: u32 = 0;
    pub const FP_INFINITE: u32 = 1;
    pub const FP_ZERO: u32 = 2;
    pub const FP_SUBNORMAL: u32 = 3;
    pub const FP_NORMAL: u32 = 4;
    pub const MATH_ERRNO: u32 = 1;
    pub const MATH_ERREXCEPT: u32 = 2;
    pub const math_errhandling: u32 = 3;
    pub const M_E: f64 = 2.718281828459045;
    pub const M_LOG2E: f64 = 1.4426950408889634;
    pub const M_LOG10E: f64 = 0.4342944819032518;
    pub const M_LN2: f64 = 0.6931471805599453;
    pub const M_LN10: f64 = 2.302585092994046;
    pub const M_PI: f64 = 3.141592653589793;
    pub const M_PI_2: f64 = 1.5707963267948966;
    pub const M_PI_4: f64 = 0.7853981633974483;
    pub const M_1_PI: f64 = 0.3183098861837907;
    pub const M_2_PI: f64 = 0.6366197723675814;
    pub const M_2_SQRTPI: f64 = 1.1283791670955126;
    pub const M_SQRT2: f64 = 1.4142135623730951;
    pub const M_SQRT1_2: f64 = 0.7071067811865476;
    pub const M_El: f64 = 2.718281828459045;
    pub const M_LOG2El: f64 = 1.4426950408889634;
    pub const M_LOG10El: f64 = 0.4342944819032518;
    pub const M_LN2l: f64 = 0.6931471805599453;
    pub const M_LN10l: f64 = 2.302585092994046;
    pub const M_PIl: f64 = 3.141592653589793;
    pub const M_PI_2l: f64 = 1.5707963267948966;
    pub const M_PI_4l: f64 = 0.7853981633974483;
    pub const M_1_PIl: f64 = 0.3183098861837907;
    pub const M_2_PIl: f64 = 0.6366197723675814;
    pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
    pub const M_SQRT2l: f64 = 1.4142135623730951;
    pub const M_SQRT1_2l: f64 = 0.7071067811865476;
    pub const _GLIBCXX_CMATH: u32 = 1;
    pub const __cpp_lib_hypot: u32 = 201603;
    pub const _GLIBCXX_BITS_SPECFUN_H: u32 = 1;
    pub const __STDCPP_MATH_SPEC_FUNCS__: u32 = 201003;
    pub const __cpp_lib_math_special_functions: u32 = 201603;
    pub const _GLIBCXX_TR1_GAMMA_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_SPECIAL_FUNCTION_UTIL_H: u32 = 1;
    pub const _GLIBCXX_TR1_BESSEL_FUNCTION_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_BETA_FUNCTION_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_ELL_INTEGRAL_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_EXP_INTEGRAL_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_HYPERGEOMETRIC_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_LEGENDRE_FUNCTION_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_MODIFIED_BESSEL_FUNC_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_POLY_HERMITE_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_POLY_LAGUERRE_TCC: u32 = 1;
    pub const _GLIBCXX_TR1_RIEMANN_ZETA_TCC: u32 = 1;
    pub const _BITS_SIGNUM_H: u32 = 1;
    pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
    pub const SIGINT: u32 = 2;
    pub const SIGILL: u32 = 4;
    pub const SIGABRT: u32 = 6;
    pub const SIGFPE: u32 = 8;
    pub const SIGSEGV: u32 = 11;
    pub const SIGTERM: u32 = 15;
    pub const SIGHUP: u32 = 1;
    pub const SIGQUIT: u32 = 3;
    pub const SIGTRAP: u32 = 5;
    pub const SIGKILL: u32 = 9;
    pub const SIGBUS: u32 = 10;
    pub const SIGSYS: u32 = 12;
    pub const SIGPIPE: u32 = 13;
    pub const SIGALRM: u32 = 14;
    pub const SIGURG: u32 = 16;
    pub const SIGSTOP: u32 = 17;
    pub const SIGTSTP: u32 = 18;
    pub const SIGCONT: u32 = 19;
    pub const SIGCHLD: u32 = 20;
    pub const SIGTTIN: u32 = 21;
    pub const SIGTTOU: u32 = 22;
    pub const SIGPOLL: u32 = 23;
    pub const SIGXCPU: u32 = 24;
    pub const SIGXFSZ: u32 = 25;
    pub const SIGVTALRM: u32 = 26;
    pub const SIGPROF: u32 = 27;
    pub const SIGUSR1: u32 = 30;
    pub const SIGUSR2: u32 = 31;
    pub const SIGWINCH: u32 = 28;
    pub const SIGIO: u32 = 23;
    pub const SIGIOT: u32 = 6;
    pub const SIGCLD: u32 = 20;
    pub const __SIGRTMIN: u32 = 32;
    pub const __SIGRTMAX: u32 = 32;
    pub const _NSIG: u32 = 33;
    pub const SIGSTKFLT: u32 = 16;
    pub const SIGPWR: u32 = 30;
    pub const __sig_atomic_t_defined: u32 = 1;
    pub const __siginfo_t_defined: u32 = 1;
    pub const __SI_MAX_SIZE: u32 = 128;
    pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
    pub const __SI_ERRNO_THEN_CODE: u32 = 1;
    pub const __SI_HAVE_SIGSYS: u32 = 1;
    pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
    pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
    pub const _BITS_SIGINFO_CONSTS_ARCH_H: u32 = 1;
    pub const __sigevent_t_defined: u32 = 1;
    pub const __SIGEV_MAX_SIZE: u32 = 64;
    pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
    pub const NSIG: u32 = 33;
    pub const _BITS_SIGACTION_H: u32 = 1;
    pub const SA_NOCLDSTOP: u32 = 1;
    pub const SA_NOCLDWAIT: u32 = 2;
    pub const SA_SIGINFO: u32 = 4;
    pub const SA_ONSTACK: u32 = 134217728;
    pub const SA_RESTART: u32 = 268435456;
    pub const SA_NODEFER: u32 = 1073741824;
    pub const SA_RESETHAND: u32 = 2147483648;
    pub const SA_INTERRUPT: u32 = 536870912;
    pub const SA_NOMASK: u32 = 1073741824;
    pub const SA_ONESHOT: u32 = 2147483648;
    pub const SA_STACK: u32 = 134217728;
    pub const SIG_BLOCK: u32 = 0;
    pub const SIG_UNBLOCK: u32 = 1;
    pub const SIG_SETMASK: u32 = 2;
    pub const _BITS_SIGCONTEXT_H: u32 = 1;
    pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
    pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
    pub const __stack_t_defined: u32 = 1;
    pub const _SYS_UCONTEXT_H: u32 = 1;
    pub const __NGREG: u32 = 23;
    pub const NGREG: u32 = 23;
    pub const _BITS_SIGSTACK_H: u32 = 1;
    pub const MINSIGSTKSZ: u32 = 2048;
    pub const SIGSTKSZ: u32 = 8192;
    pub const _BITS_SS_FLAGS_H: u32 = 1;
    pub const __sigstack_defined: u32 = 1;
    pub const _BITS_SIGTHREAD_H: u32 = 1;
    pub const _UNISTD_H: u32 = 1;
    pub const _POSIX_VERSION: u32 = 200809;
    pub const __POSIX2_THIS_VERSION: u32 = 200809;
    pub const _POSIX2_VERSION: u32 = 200809;
    pub const _POSIX2_C_VERSION: u32 = 200809;
    pub const _POSIX2_C_BIND: u32 = 200809;
    pub const _POSIX2_C_DEV: u32 = 200809;
    pub const _POSIX2_SW_DEV: u32 = 200809;
    pub const _POSIX2_LOCALEDEF: u32 = 200809;
    pub const _XOPEN_VERSION: u32 = 700;
    pub const _XOPEN_XCU_VERSION: u32 = 4;
    pub const _XOPEN_XPG2: u32 = 1;
    pub const _XOPEN_XPG3: u32 = 1;
    pub const _XOPEN_XPG4: u32 = 1;
    pub const _XOPEN_UNIX: u32 = 1;
    pub const _XOPEN_ENH_I18N: u32 = 1;
    pub const _XOPEN_LEGACY: u32 = 1;
    pub const _BITS_POSIX_OPT_H: u32 = 1;
    pub const _POSIX_JOB_CONTROL: u32 = 1;
    pub const _POSIX_SAVED_IDS: u32 = 1;
    pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
    pub const _POSIX_FSYNC: u32 = 200809;
    pub const _POSIX_MAPPED_FILES: u32 = 200809;
    pub const _POSIX_MEMLOCK: u32 = 200809;
    pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
    pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
    pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
    pub const _POSIX_VDISABLE: u8 = 0u8;
    pub const _POSIX_NO_TRUNC: u32 = 1;
    pub const _XOPEN_REALTIME: u32 = 1;
    pub const _XOPEN_REALTIME_THREADS: u32 = 1;
    pub const _XOPEN_SHM: u32 = 1;
    pub const _POSIX_THREADS: u32 = 200809;
    pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
    pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
    pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
    pub const _POSIX_SEMAPHORES: u32 = 200809;
    pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
    pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
    pub const _POSIX_ASYNC_IO: u32 = 1;
    pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
    pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
    pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
    pub const _LFS_LARGEFILE: u32 = 1;
    pub const _LFS64_LARGEFILE: u32 = 1;
    pub const _LFS64_STDIO: u32 = 1;
    pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
    pub const _POSIX_CPUTIME: u32 = 0;
    pub const _POSIX_THREAD_CPUTIME: u32 = 0;
    pub const _POSIX_REGEXP: u32 = 1;
    pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
    pub const _POSIX_SHELL: u32 = 1;
    pub const _POSIX_TIMEOUTS: u32 = 200809;
    pub const _POSIX_SPIN_LOCKS: u32 = 200809;
    pub const _POSIX_SPAWN: u32 = 200809;
    pub const _POSIX_TIMERS: u32 = 200809;
    pub const _POSIX_BARRIERS: u32 = 200809;
    pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
    pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
    pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
    pub const _POSIX_ADVISORY_INFO: u32 = 200809;
    pub const _POSIX_IPV6: u32 = 200809;
    pub const _POSIX_RAW_SOCKETS: u32 = 200809;
    pub const _POSIX2_CHAR_TERM: u32 = 200809;
    pub const _POSIX_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_TRACE: i32 = -1;
    pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
    pub const _POSIX_TRACE_INHERIT: i32 = -1;
    pub const _POSIX_TRACE_LOG: i32 = -1;
    pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
    pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
    pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V7_LP64_OFF64: u32 = 1;
    pub const _POSIX_V6_LP64_OFF64: u32 = 1;
    pub const _XBS5_LP64_OFF64: u32 = 1;
    pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
    pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
    pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
        b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
    pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
    pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
    pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
    pub const STDIN_FILENO: u32 = 0;
    pub const STDOUT_FILENO: u32 = 1;
    pub const STDERR_FILENO: u32 = 2;
    pub const R_OK: u32 = 4;
    pub const W_OK: u32 = 2;
    pub const X_OK: u32 = 1;
    pub const F_OK: u32 = 0;
    pub const L_SET: u32 = 0;
    pub const L_INCR: u32 = 1;
    pub const L_XTND: u32 = 2;
    pub const _GETOPT_POSIX_H: u32 = 1;
    pub const _GETOPT_CORE_H: u32 = 1;
    pub const F_ULOCK: u32 = 0;
    pub const F_LOCK: u32 = 1;
    pub const F_TLOCK: u32 = 2;
    pub const F_TEST: u32 = 3;
    pub mod std {

        pub type nullptr_t = *const c_void;
        pub mod __cxx11 {

            pub type string = self::std::__cxx11::basic_string<c_char>;
            pub type wstring = self::std::__cxx11::basic_string<u32>;
            pub type u16string = self::std::__cxx11::basic_string<u16>;
            pub type u32string = self::std::__cxx11::basic_string<u32>;
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct time_get {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct time_get_byname {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct money_get {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct money_put {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct messages {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct messages_byname {
                pub _address: u8,
            }
            #[repr(C)]
            pub struct basic_string<_CharT> {
                pub _M_dataplus: self::std::__cxx11::basic_string__Alloc_hider,
                pub _M_string_length: self::std::__cxx11::basic_string_size_type,
                pub __bindgen_anon_1: self::std::__cxx11::basic_string__bindgen_ty_2<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_string__Char_alloc_type = [u8; 0usize];
            pub type basic_string__Alloc_traits = self::__gnu_cxx::__alloc_traits;
            pub type basic_string_traits_type<_Traits> = _Traits;
            pub type basic_string_value_type = [u8; 0usize];
            pub type basic_string_allocator_type =
                self::std::__cxx11::basic_string__Char_alloc_type;
            pub type basic_string_size_type = [u8; 0usize];
            pub type basic_string_difference_type = [u8; 0usize];
            pub type basic_string_reference = [u8; 0usize];
            pub type basic_string_const_reference = [u8; 0usize];
            pub type basic_string_pointer = [u8; 0usize];
            pub type basic_string_const_pointer = [u8; 0usize];
            pub type basic_string_iterator =
                self::__gnu_cxx::__normal_iterator<root::std::__cxx11::basic_string_pointer>;
            pub type basic_string_const_iterator =
                self::__gnu_cxx::__normal_iterator<root::std::__cxx11::basic_string_const_pointer>;
            pub type basic_string_const_reverse_iterator =
                self::std::reverse_iterator<root::std::__cxx11::basic_string_const_iterator>;
            pub type basic_string_reverse_iterator =
                self::std::reverse_iterator<root::std::__cxx11::basic_string_iterator>;
            pub type basic_string___const_iterator =
                self::std::__cxx11::basic_string_const_iterator;
            pub type basic_string___sv_type<_CharT> = self::std::basic_string_view<_CharT>;
            pub type basic_string__If_sv = self::std::enable_if_t;
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct basic_string___sv_wrapper<_CharT> {
                pub _M_sv: self::std::__cxx11::basic_string___sv_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            impl<_CharT> Default for basic_string___sv_wrapper<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            pub struct basic_string__Alloc_hider {
                pub _M_p: self::std::__cxx11::basic_string_pointer,
            }
            impl Default for basic_string__Alloc_hider {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl ::std::fmt::Debug for basic_string__Alloc_hider {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "basic_string__Alloc_hider {{  }}")
                }
            }
            impl PartialEq for basic_string__Alloc_hider {
                fn eq(&self, other: &basic_string__Alloc_hider) -> bool {
                    self._M_p == other._M_p
                }
            }
            pub const basic_string__S_local_capacity:
                self::std::__cxx11::basic_string__bindgen_ty_1 = 0;
            pub type basic_string__bindgen_ty_1 = i32;
            #[repr(C)]
            pub struct basic_string__bindgen_ty_2<_CharT> {
                pub _M_local_buf: self::__BindgenUnionField<*mut _CharT>,
                pub _M_allocated_capacity:
                    self::__BindgenUnionField<root::std::__cxx11::basic_string_size_type>,
                pub bindgen_union_field: u64,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            impl<_CharT> Default for basic_string__bindgen_ty_2<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl<_CharT> ::std::fmt::Debug for basic_string__bindgen_ty_2<_CharT> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "basic_string__bindgen_ty_2 {{ union }}")
                }
            }
            impl<_CharT> Default for basic_string<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl<_CharT> ::std::fmt::Debug for basic_string<_CharT> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_string {{ _M_dataplus: {:?}, __bindgen_anon_1: {:?} }}",
                        self._M_dataplus, self.__bindgen_anon_1
                    )
                }
            }
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct collate {
                pub _base: self::std::locale_facet,
                pub _M_c_locale_collate: self::std::__c_locale,
            }
            pub type collate_char_type<_CharT> = _CharT;
            pub type collate_string_type = self::std::__cxx11::basic_string<_CharT>;
            impl Default for collate {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct collate_byname {
                pub _base: self::std::__cxx11::collate,
            }
            pub type collate_byname_char_type<_CharT> = _CharT;
            pub type collate_byname_string_type = self::std::__cxx11::basic_string<_CharT>;
            impl Default for collate_byname {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct numpunct<_CharT> {
                pub _base: self::std::locale_facet,
                pub _M_data: *mut self::std::__cxx11::numpunct___cache_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type numpunct_char_type<_CharT> = _CharT;
            pub type numpunct_string_type = self::std::__cxx11::basic_string<_CharT>;
            pub type numpunct___cache_type<_CharT> = self::std::__numpunct_cache<_CharT>;
            impl<_CharT> Default for numpunct<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            extern "C" {
                pub static mut id: self::std::locale_id;
            }
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct numpunct_byname<_CharT> {
                pub _base: self::std::__cxx11::numpunct<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type numpunct_byname_char_type<_CharT> = _CharT;
            pub type numpunct_byname_string_type = self::std::__cxx11::basic_string<_CharT>;
            impl<_CharT> Default for numpunct_byname<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            pub struct basic_stringbuf<_CharT> {
                pub _base: self::std::basic_streambuf<_CharT>,
                pub _M_mode: self::std::ios_base_openmode,
                pub _M_string: self::std::__cxx11::basic_stringbuf___string_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_stringbuf_char_type<_CharT> = _CharT;
            pub type basic_stringbuf_traits_type<_Traits> = _Traits;
            pub type basic_stringbuf_allocator_type<_Alloc> = _Alloc;
            pub type basic_stringbuf_int_type = [u8; 0usize];
            pub type basic_stringbuf_pos_type = [u8; 0usize];
            pub type basic_stringbuf_off_type = [u8; 0usize];
            pub type basic_stringbuf___streambuf_type<_CharT> =
                self::std::basic_streambuf<root::std::__cxx11::basic_stringbuf_char_type<_CharT>>;
            pub type basic_stringbuf___string_type<_CharT> = self::std::__cxx11::basic_string<
                self::std::__cxx11::basic_stringbuf_char_type<_CharT>,
            >;
            pub type basic_stringbuf___size_type<_CharT> =
                self::std::__cxx11::basic_stringbuf___string_type<_CharT>;
            #[repr(C)]
            pub struct basic_stringbuf___xfer_bufptrs<_CharT> {
                pub _M_to: *mut self::std::__cxx11::basic_stringbuf<_CharT>,
                pub _M_goff: [self::std::__cxx11::basic_stringbuf_off_type; 3usize],
                pub _M_poff: [self::std::__cxx11::basic_stringbuf_off_type; 3usize],
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            impl<_CharT> Default for basic_stringbuf___xfer_bufptrs<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl<_CharT> ::std::fmt::Debug for basic_stringbuf___xfer_bufptrs<_CharT> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write ! ( f , "basic_stringbuf___xfer_bufptrs {{ _M_to: {:?}, _M_goff: {:?}, _M_poff: {:?} }}" , self . _M_to , self . _M_goff , self . _M_poff )
                }
            }
            impl<_CharT> Default for basic_stringbuf<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl<_CharT> ::std::fmt::Debug for basic_stringbuf<_CharT> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_stringbuf {{ _M_mode: {:?}, _M_string: {:?} }}",
                        self._M_mode, self._M_string
                    )
                }
            }
            #[repr(C)]
            pub struct basic_istringstream<_CharT> {
                pub _base: self::std::basic_istream<_CharT>,
                pub _M_stringbuf: self::std::__cxx11::basic_istringstream___stringbuf_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_istringstream_char_type<_CharT> = _CharT;
            pub type basic_istringstream_traits_type<_Traits> = _Traits;
            pub type basic_istringstream_allocator_type<_Alloc> = _Alloc;
            pub type basic_istringstream_int_type = [u8; 0usize];
            pub type basic_istringstream_pos_type = [u8; 0usize];
            pub type basic_istringstream_off_type = [u8; 0usize];
            pub type basic_istringstream___string_type<_CharT> =
                self::std::__cxx11::basic_string<_CharT>;
            pub type basic_istringstream___stringbuf_type<_CharT> =
                self::std::__cxx11::basic_stringbuf<_CharT>;
            pub type basic_istringstream___istream_type<_CharT> =
                self::std::basic_istream<root::std::__cxx11::basic_istringstream_char_type<_CharT>>;
            impl<_CharT> Default for basic_istringstream<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl<_CharT> ::std::fmt::Debug for basic_istringstream<_CharT> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_istringstream {{ _M_stringbuf: {:?} }}",
                        self._M_stringbuf
                    )
                }
            }
            #[repr(C)]
            pub struct basic_ostringstream<_CharT> {
                pub _base: self::std::basic_ostream<_CharT>,
                pub _M_stringbuf: self::std::__cxx11::basic_ostringstream___stringbuf_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_ostringstream_char_type<_CharT> = _CharT;
            pub type basic_ostringstream_traits_type<_Traits> = _Traits;
            pub type basic_ostringstream_allocator_type<_Alloc> = _Alloc;
            pub type basic_ostringstream_int_type = [u8; 0usize];
            pub type basic_ostringstream_pos_type = [u8; 0usize];
            pub type basic_ostringstream_off_type = [u8; 0usize];
            pub type basic_ostringstream___string_type<_CharT> =
                self::std::__cxx11::basic_string<_CharT>;
            pub type basic_ostringstream___stringbuf_type<_CharT> =
                self::std::__cxx11::basic_stringbuf<_CharT>;
            pub type basic_ostringstream___ostream_type<_CharT> =
                self::std::basic_ostream<root::std::__cxx11::basic_ostringstream_char_type<_CharT>>;
            impl<_CharT> Default for basic_ostringstream<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl<_CharT> ::std::fmt::Debug for basic_ostringstream<_CharT> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_ostringstream {{ _M_stringbuf: {:?} }}",
                        self._M_stringbuf
                    )
                }
            }
            #[repr(C)]
            pub struct basic_stringstream<_CharT> {
                pub _base: self::std::basic_iostream<_CharT>,
                pub _M_stringbuf: self::std::__cxx11::basic_stringstream___stringbuf_type<_CharT>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
            }
            pub type basic_stringstream_char_type<_CharT> = _CharT;
            pub type basic_stringstream_traits_type<_Traits> = _Traits;
            pub type basic_stringstream_allocator_type<_Alloc> = _Alloc;
            pub type basic_stringstream_int_type = [u8; 0usize];
            pub type basic_stringstream_pos_type = [u8; 0usize];
            pub type basic_stringstream_off_type = [u8; 0usize];
            pub type basic_stringstream___string_type<_CharT> =
                self::std::__cxx11::basic_string<_CharT>;
            pub type basic_stringstream___stringbuf_type<_CharT> =
                self::std::__cxx11::basic_stringbuf<_CharT>;
            pub type basic_stringstream___iostream_type<_CharT> =
                self::std::basic_iostream<root::std::__cxx11::basic_stringstream_char_type<_CharT>>;
            impl<_CharT> Default for basic_stringstream<_CharT> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl<_CharT> ::std::fmt::Debug for basic_stringstream<_CharT> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_stringstream {{ _M_stringbuf: {:?} }}",
                        self._M_stringbuf
                    )
                }
            }
            #[repr(C)]
            pub struct _List_base {
                pub _M_impl: self::std::__cxx11::_List_base__List_impl,
            }
            pub type _List_base__Tp_alloc_type = [u8; 0usize];
            pub type _List_base__Tp_alloc_traits = self::__gnu_cxx::__alloc_traits;
            pub type _List_base__Node_alloc_type = [u8; 0usize];
            pub type _List_base__Node_alloc_traits = self::__gnu_cxx::__alloc_traits;
            #[repr(C)]
            pub struct _List_base__List_impl {
                pub _M_node: self::std::__detail::_List_node_header,
            }
            impl Default for _List_base__List_impl {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl ::std::fmt::Debug for _List_base__List_impl {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "_List_base__List_impl {{ _M_node: {:?} }}", self._M_node)
                }
            }
            impl PartialEq for _List_base__List_impl {
                fn eq(&self, other: &_List_base__List_impl) -> bool {
                    self._M_node == other._M_node
                }
            }
            pub type _List_base_allocator_type<_Alloc> = _Alloc;
            impl Default for _List_base {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl ::std::fmt::Debug for _List_base {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "_List_base {{ _M_impl: {:?} }}", self._M_impl)
                }
            }
            impl PartialEq for _List_base {
                fn eq(&self, other: &_List_base) -> bool {
                    self._M_impl == other._M_impl
                }
            }
            #[repr(C)]
            pub struct list {
                pub _base: self::std::__cxx11::_List_base,
            }
            pub type list__Base = self::std::__cxx11::_List_base;
            pub type list__Tp_alloc_type = self::std::__cxx11::list__Base;
            pub type list__Tp_alloc_traits = self::std::__cxx11::list__Base;
            pub type list__Node_alloc_type = self::std::__cxx11::list__Base;
            pub type list__Node_alloc_traits = self::std::__cxx11::list__Base;
            pub type list_value_type<_Tp> = _Tp;
            pub type list_pointer = self::std::__cxx11::list__Tp_alloc_traits;
            pub type list_const_pointer = self::std::__cxx11::list__Tp_alloc_traits;
            pub type list_reference = self::std::__cxx11::list__Tp_alloc_traits;
            pub type list_const_reference = self::std::__cxx11::list__Tp_alloc_traits;
            pub type list_iterator = self::std::_List_iterator;
            pub type list_const_iterator = self::std::_List_const_iterator;
            pub type list_const_reverse_iterator =
                self::std::reverse_iterator<root::std::__cxx11::list_const_iterator>;
            pub type list_reverse_iterator =
                self::std::reverse_iterator<root::std::__cxx11::list_iterator>;
            pub type list_size_type = usize;
            pub type list_difference_type = isize;
            pub type list_allocator_type<_Alloc> = _Alloc;
            pub type list__Node = self::std::_List_node;
            impl Default for list {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl ::std::fmt::Debug for list {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "list {{  }}")
                }
            }
            impl PartialEq for list {
                fn eq(&self, other: &list) -> bool {
                    self._base == other._base
                }
            }
        }
        extern "C" {
            pub fn __throw_bad_exception();
        }
        extern "C" {
            pub fn __throw_bad_alloc();
        }
        extern "C" {
            pub fn __throw_bad_cast();
        }
        extern "C" {
            pub fn __throw_bad_typeid();
        }
        extern "C" {
            pub fn __throw_logic_error(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_domain_error(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_invalid_argument(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_length_error(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_out_of_range(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_out_of_range_fmt(arg1: *const c_char, ...);
        }
        extern "C" {
            pub fn __throw_runtime_error(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_range_error(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_overflow_error(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_underflow_error(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_ios_failure(arg1: *const c_char);
        }
        extern "C" {
            pub fn __throw_system_error(arg1: c_int);
        }
        extern "C" {
            pub fn __throw_future_error(arg1: c_int);
        }
        extern "C" {
            pub fn __throw_bad_function_call();
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___true_type() {
            assert_eq!(
                size_of::<__true_type>(),
                1usize,
                concat!("Size of: ", stringify!(__true_type))
            );
            assert_eq!(
                align_of::<__true_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__true_type))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __false_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___false_type() {
            assert_eq!(
                size_of::<__false_type>(),
                1usize,
                concat!("Size of: ", stringify!(__false_type))
            );
            assert_eq!(
                align_of::<__false_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__false_type))
            );
        }
        pub type __truth_type___type = self::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: self::std::__traitor__bindgen_ty_1 = 0;
        pub type __traitor__bindgen_ty_1 = i32;
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: self::std::__are_same__bindgen_ty_1 = 0;
        pub type __are_same__bindgen_ty_1 = i32;
        pub type __are_same___type = self::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_void {
            pub _address: u8,
        }
        pub const __is_void___value: self::std::__is_void__bindgen_ty_1 = 0;
        pub type __is_void__bindgen_ty_1 = i32;
        pub type __is_void___type = self::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_void_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_void>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_void)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_void>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_void)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: self::std::__is_integer__bindgen_ty_1 = 0;
        pub type __is_integer__bindgen_ty_1 = i32;
        pub type __is_integer___type = self::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_integer_open0_bool__close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_signed_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char16_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char32_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value: self::std::__is_floating__bindgen_ty_1 = 0;
        pub type __is_floating__bindgen_ty_1 = i32;
        pub type __is_floating___type = self::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_floating_open0_float_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_open0_double_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_open0_long_double_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_pointer {
            pub _address: u8,
        }
        pub const __is_pointer___value: self::std::__is_pointer__bindgen_ty_1 = 0;
        pub type __is_pointer__bindgen_ty_1 = i32;
        pub type __is_pointer___type = self::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        impl Default for __is_arithmetic {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_scalar {
            pub _address: u8,
        }
        impl Default for __is_scalar {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: self::std::__is_char__bindgen_ty_1 = 0;
        pub type __is_char__bindgen_ty_1 = i32;
        pub type __is_char___type = self::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_char_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_char_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: self::std::__is_byte__bindgen_ty_1 = 0;
        pub type __is_byte__bindgen_ty_1 = i32;
        pub type __is_byte___type = self::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_byte_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_byte_open0_signed_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_byte_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        pub type byte = u8;
        #[test]
        fn __bindgen_test_layout___is_byte_open0_byte_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value: self::std::__is_move_iterator__bindgen_ty_1 = 0;
        pub type __is_move_iterator__bindgen_ty_1 = i32;
        pub type __is_move_iterator___type = self::std::__false_type;
        pub type integral_constant_value_type<_Tp> = _Tp;
        pub type integral_constant_type = u8;
        extern "C" {
            pub static value: _Tp;
        }
        pub type true_type = u8;
        pub type false_type = u8;
        pub type __bool_constant = u8;
        pub type bool_constant = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___or__open0_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__or_>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__or_)
                )
            );
            assert_eq!(
                align_of::<root::std::__or_>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__or_)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___and__open0_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__and_>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__and_)
                )
            );
            assert_eq!(
                align_of::<root::std::__and_>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__and_)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct conjunction {
            pub _address: u8,
        }
        impl Default for conjunction {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct disjunction {
            pub _address: u8,
        }
        impl Default for disjunction {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct negation {
            pub _address: u8,
        }
        impl Default for negation {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __failure_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___failure_type() {
            assert_eq!(
                size_of::<__failure_type>(),
                1usize,
                concat!("Size of: ", stringify!(__failure_type))
            );
            assert_eq!(
                align_of::<__failure_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__failure_type))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_void_helper {
            pub _base: self::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_void_helper_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_void_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_void_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_void_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_void_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_void {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_integral_helper {
            pub _base: self::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_bool__close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_signed_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char16_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char32_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_floating_point_helper {
            pub _base: self::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_float_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_double_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_long_double_close0_instantiation()
        {
            assert_eq!(
                size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_array {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_pointer_helper {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_lvalue_reference {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_rvalue_reference {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_member_object_pointer_helper {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_member_function_pointer_helper {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_function {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_null_pointer_helper {
            pub _base: self::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_null_pointer_helper_open0_nullptr_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__is_null_pointer_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_null_pointer_helper)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_null_pointer_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_null_pointer_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_null_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nullptr_t {
            pub _address: u8,
        }
        impl Default for __is_nullptr_t {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_member_pointer_helper {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_referenceable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_const {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_volatile {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_copyable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_final {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_array_known_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_array_unknown_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_destructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_destructible_impl() {
            assert_eq!(
                size_of::<__do_is_destructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_destructible_impl))
            );
            assert_eq!(
                align_of::<__do_is_destructible_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_is_destructible_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_nt_destructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_nt_destructible_impl() {
            assert_eq!(
                size_of::<__do_is_nt_destructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_nt_destructible_impl))
            );
            assert_eq!(
                align_of::<__do_is_nt_destructible_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_is_nt_destructible_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_default_constructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_default_constructible_impl() {
            assert_eq!(
                size_of::<__do_is_default_constructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_default_constructible_impl))
            );
            assert_eq!(
                align_of::<__do_is_default_constructible_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__do_is_default_constructible_impl)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_assignable_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_implicitly_default_constructible_impl() {
            assert_eq!(
                size_of::<__do_is_implicitly_default_constructible_impl>(),
                1usize,
                concat!(
                    "Size of: ",
                    stringify!(__do_is_implicitly_default_constructible_impl)
                )
            );
            assert_eq!(
                align_of::<__do_is_implicitly_default_constructible_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__do_is_implicitly_default_constructible_impl)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}__test"]
            pub fn __do_is_implicitly_default_constructible_impl___test() -> self::std::false_type;
        }
        impl __do_is_implicitly_default_constructible_impl {
            #[inline]
            pub unsafe fn __test() -> self::std::false_type {
                __do_is_implicitly_default_constructible_impl___test()
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_implicitly_default_constructible_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_implicitly_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct rank {
            pub _base: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_same {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_base_of {
            pub _address: u8,
        }
        pub type __is_convertible_helper_type = self::std::is_void;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_convertible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type = self::std::remove_const;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type = self::std::add_const;
        pub type remove_const_t = self::std::remove_const;
        pub type remove_volatile_t = self::std::remove_volatile;
        pub type remove_cv_t = self::std::remove_cv;
        pub type add_const_t = self::std::add_const;
        pub type add_volatile_t = self::std::add_volatile;
        pub type add_cv_t = self::std::add_cv;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        pub type __add_lvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        pub type __add_rvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        pub type remove_reference_t = self::std::remove_reference;
        pub type add_lvalue_reference_t = self::std::add_lvalue_reference;
        pub type add_rvalue_reference_t = self::std::add_rvalue_reference;
        pub type __match_cv_qualifiers___match = u8;
        pub type __match_cv_qualifiers___type = self::std::__match_cv_qualifiers___match;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type<_Tp> = _Tp;
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_signed_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type<_Tp> = _Tp;
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        pub type make_signed_t = self::std::make_signed;
        pub type make_unsigned_t = self::std::make_unsigned;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type<_Tp> = _Tp;
        pub type remove_extent_t = self::std::remove_extent;
        pub type remove_all_extents_t = self::std::remove_all_extents;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __remove_pointer_helper {
            pub _address: u8,
        }
        pub type __remove_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        impl Default for remove_pointer {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type __add_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_pointer {
            pub _address: u8,
        }
        pub type remove_pointer_t = self::std::remove_pointer;
        pub type add_pointer_t = self::std::add_pointer;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __aligned_storage_msa___type {
            pub __data: *mut c_uchar,
            pub __align: self::std::__aligned_storage_msa___type__bindgen_ty_1,
            _bindgen_union_align: u64,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __aligned_storage_msa___type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___aligned_storage_msa___type() {
            assert_eq!(
                size_of::<__aligned_storage_msa___type>(),
                8usize,
                concat!("Size of: ", stringify!(__aligned_storage_msa___type))
            );
            assert_eq!(
                align_of::<__aligned_storage_msa___type>(),
                8usize,
                concat!("Alignment of ", stringify!(__aligned_storage_msa___type))
            );
        }
        impl Default for __aligned_storage_msa___type {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for __aligned_storage_msa___type {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "__aligned_storage_msa___type {{ union }}")
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union aligned_storage_type {
            pub __data: *mut c_uchar,
            pub __align: self::std::aligned_storage_type__bindgen_ty_1,
            _bindgen_union_align: u64,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct aligned_storage_type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_aligned_storage_type() {
            assert_eq!(
                size_of::<aligned_storage_type>(),
                8usize,
                concat!("Size of: ", stringify!(aligned_storage_type))
            );
            assert_eq!(
                align_of::<aligned_storage_type>(),
                8usize,
                concat!("Alignment of ", stringify!(aligned_storage_type))
            );
        }
        impl Default for aligned_storage_type {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for aligned_storage_type {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "aligned_storage_type {{ union }}")
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __strictest_alignment {
            pub _address: u8,
        }
        pub type aligned_union___strictest = self::std::__strictest_alignment;
        pub type aligned_union_type = u8;
        extern "C" {
            pub static alignment_value: usize;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay___remove_type = self::std::remove_reference;
        pub type decay_type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct reference_wrapper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __decay_and_strip {
            pub _address: u8,
        }
        pub type __decay_and_strip___type = self::std::__strip_reference_wrapper;
        pub type _Require = u8;
        pub type conditional_type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_common_type_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_common_type_impl() {
            assert_eq!(
                size_of::<__do_common_type_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_common_type_impl))
            );
            assert_eq!(
                align_of::<__do_common_type_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_common_type_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_member_type_wrapper {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_member_type_wrapper() {
            assert_eq!(
                size_of::<__do_member_type_wrapper>(),
                1usize,
                concat!("Size of: ", stringify!(__do_member_type_wrapper))
            );
            assert_eq!(
                align_of::<__do_member_type_wrapper>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_member_type_wrapper))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __member_type_wrapper {
            pub _address: u8,
        }
        pub type __member_type_wrapper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __expanded_common_type_wrapper {
            pub _address: u8,
        }
        pub type __expanded_common_type_wrapper_type = self::std::common_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct underlying_type {
            pub _address: u8,
        }
        pub type underlying_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char16_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char16_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char32_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char32_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_memfun_ref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memfun_ref() {
            assert_eq!(
                size_of::<__invoke_memfun_ref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memfun_ref))
            );
            assert_eq!(
                align_of::<__invoke_memfun_ref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memfun_ref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_memfun_deref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memfun_deref() {
            assert_eq!(
                size_of::<__invoke_memfun_deref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memfun_deref))
            );
            assert_eq!(
                align_of::<__invoke_memfun_deref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memfun_deref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_memobj_ref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memobj_ref() {
            assert_eq!(
                size_of::<__invoke_memobj_ref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memobj_ref))
            );
            assert_eq!(
                align_of::<__invoke_memobj_ref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memobj_ref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_memobj_deref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memobj_deref() {
            assert_eq!(
                size_of::<__invoke_memobj_deref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memobj_deref))
            );
            assert_eq!(
                align_of::<__invoke_memobj_deref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memobj_deref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_other {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_other() {
            assert_eq!(
                size_of::<__invoke_other>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_other))
            );
            assert_eq!(
                align_of::<__invoke_other>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_other))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_success {
            pub _address: u8,
        }
        pub type __result_of_success___invoke_type<_Tag> = _Tag;
        impl Default for __result_of_success {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun_ref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memfun_ref_impl() {
            assert_eq!(
                size_of::<__result_of_memfun_ref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memfun_ref_impl))
            );
            assert_eq!(
                align_of::<__result_of_memfun_ref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memfun_ref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun_deref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memfun_deref_impl() {
            assert_eq!(
                size_of::<__result_of_memfun_deref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memfun_deref_impl))
            );
            assert_eq!(
                align_of::<__result_of_memfun_deref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memfun_deref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj_ref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memobj_ref_impl() {
            assert_eq!(
                size_of::<__result_of_memobj_ref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memobj_ref_impl))
            );
            assert_eq!(
                align_of::<__result_of_memobj_ref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memobj_ref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj_deref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memobj_deref_impl() {
            assert_eq!(
                size_of::<__result_of_memobj_deref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memobj_deref_impl))
            );
            assert_eq!(
                align_of::<__result_of_memobj_deref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memobj_deref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __inv_unwrap {
            pub _address: u8,
        }
        pub type __inv_unwrap_type<_Tp> = _Tp;
        pub type __result_of_impl_type = self::std::__failure_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_other_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_other_impl() {
            assert_eq!(
                size_of::<__result_of_other_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_other_impl))
            );
            assert_eq!(
                align_of::<__result_of_other_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_other_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_result {
            pub _address: u8,
        }
        pub type aligned_storage_t = u8;
        pub type aligned_union_t = u8;
        pub type decay_t = self::std::decay;
        pub type enable_if_t = u8;
        pub type conditional_t = u8;
        pub type common_type_t = self::std::common_type;
        pub type underlying_type_t = self::std::underlying_type;
        pub type result_of_t = self::std::result_of;
        pub type __enable_if_t = u8;
        pub type __void_t = c_void;
        pub type void_t = c_void;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_value_t = self::std::false_type;
        pub type __detector_type<_Default> = _Default;
        pub type __detected_or = self::std::__detector;
        pub type __detected_or_t = self::std::__detected_or;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_tuple_like_impl {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        pub mod __swappable_details {

            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct __do_is_swappable_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_swappable_impl() {
                assert_eq!(
                    size_of::<__do_is_swappable_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_swappable_impl))
                );
                assert_eq!(
                    align_of::<__do_is_swappable_impl>(),
                    1usize,
                    concat!("Alignment of ", stringify!(__do_is_swappable_impl))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct __do_is_nothrow_swappable_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_nothrow_swappable_impl() {
                assert_eq!(
                    size_of::<__do_is_nothrow_swappable_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_nothrow_swappable_impl))
                );
                assert_eq!(
                    align_of::<__do_is_nothrow_swappable_impl>(),
                    1usize,
                    concat!("Alignment of ", stringify!(__do_is_nothrow_swappable_impl))
                );
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_swappable_impl {
            pub _address: u8,
        }
        pub type __is_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_swappable_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_swappable {
            pub _address: u8,
        }
        pub mod __swappable_with_details {

            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct __do_is_swappable_with_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_swappable_with_impl() {
                assert_eq!(
                    size_of::<__do_is_swappable_with_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_swappable_with_impl))
                );
                assert_eq!(
                    align_of::<__do_is_swappable_with_impl>(),
                    1usize,
                    concat!("Alignment of ", stringify!(__do_is_swappable_with_impl))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct __do_is_nothrow_swappable_with_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_nothrow_swappable_with_impl() {
                assert_eq!(
                    size_of::<__do_is_nothrow_swappable_with_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_nothrow_swappable_with_impl))
                );
                assert_eq!(
                    align_of::<__do_is_nothrow_swappable_with_impl>(),
                    1usize,
                    concat!(
                        "Alignment of ",
                        stringify!(__do_is_nothrow_swappable_with_impl)
                    )
                );
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_swappable_with_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_swappable_with {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_swappable_with {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_invocable_impl {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __call_is_nothrow {
            pub _address: u8,
        }
        pub type __call_is_nothrow_ = self::std::__call_is_nothrow;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __nonesuch {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___nonesuch() {
            assert_eq!(
                size_of::<__nonesuch>(),
                1usize,
                concat!("Size of: ", stringify!(__nonesuch))
            );
            assert_eq!(
                align_of::<__nonesuch>(),
                1usize,
                concat!("Alignment of ", stringify!(__nonesuch))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct invoke_result {
            pub _address: u8,
        }
        impl Default for invoke_result {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type invoke_result_t = self::std::invoke_result;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_invocable_r {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_invocable_impl {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_invocable_r {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct has_unique_object_representations {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_aggregate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct piecewise_construct_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_piecewise_construct_t() {
            assert_eq!(
                size_of::<piecewise_construct_t>(),
                1usize,
                concat!("Size of: ", stringify!(piecewise_construct_t))
            );
            assert_eq!(
                align_of::<piecewise_construct_t>(),
                1usize,
                concat!("Alignment of ", stringify!(piecewise_construct_t))
            );
        }
        extern "C" {
            pub static piecewise_construct: self::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __nonesuch_no_braces {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___nonesuch_no_braces() {
            assert_eq!(
                size_of::<__nonesuch_no_braces>(),
                1usize,
                concat!("Size of: ", stringify!(__nonesuch_no_braces))
            );
            assert_eq!(
                align_of::<__nonesuch_no_braces>(),
                1usize,
                concat!("Alignment of ", stringify!(__nonesuch_no_braces))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __pair_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pair<_T1, _T2> {
            pub first: _T1,
            pub second: _T2,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        impl<_T1, _T2> Default for pair<_T1, _T2> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct input_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_input_iterator_tag() {
            assert_eq!(
                size_of::<input_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(input_iterator_tag))
            );
            assert_eq!(
                align_of::<input_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(input_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct output_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_output_iterator_tag() {
            assert_eq!(
                size_of::<output_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(output_iterator_tag))
            );
            assert_eq!(
                align_of::<output_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(output_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct forward_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_forward_iterator_tag() {
            assert_eq!(
                size_of::<forward_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(forward_iterator_tag))
            );
            assert_eq!(
                align_of::<forward_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(forward_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bidirectional_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_bidirectional_iterator_tag() {
            assert_eq!(
                size_of::<bidirectional_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(bidirectional_iterator_tag))
            );
            assert_eq!(
                align_of::<bidirectional_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(bidirectional_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct random_access_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_random_access_iterator_tag() {
            assert_eq!(
                size_of::<random_access_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(random_access_iterator_tag))
            );
            assert_eq!(
                align_of::<random_access_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(random_access_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category<_Category> = _Category;
        pub type iterator_value_type<_Tp> = _Tp;
        pub type iterator_difference_type<_Distance> = _Distance;
        pub type iterator_pointer<_Pointer> = _Pointer;
        pub type iterator_reference<_Reference> = _Reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        pub type _RequireInputIter = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __undefined {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __get_first_arg {
            pub _address: u8,
        }
        pub type __get_first_arg_type = self::std::__undefined;
        pub type __get_first_arg_t = self::std::__get_first_arg;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __replace_first_arg {
            pub _address: u8,
        }
        pub type __replace_first_arg_t = self::std::__replace_first_arg;
        pub type __make_not_void = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type pointer_traits___element_type = [u8; 0usize];
        pub type pointer_traits___difference_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pointer_traits___rebind {
            pub _address: u8,
        }
        impl Default for pointer_traits___rebind {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type pointer_traits_pointer<_Ptr> = _Ptr;
        pub type pointer_traits_element_type = self::std::__detected_or_t;
        pub type pointer_traits_difference_type = self::std::__detected_or_t;
        pub type pointer_traits_rebind = self::std::pointer_traits___rebind;
        pub type __ptr_rebind = self::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct reverse_iterator<_Iterator> {
            pub current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type reverse_iterator___traits_type = self::std::iterator_traits;
        pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
        pub type reverse_iterator_difference_type = self::std::reverse_iterator___traits_type;
        pub type reverse_iterator_pointer = self::std::reverse_iterator___traits_type;
        pub type reverse_iterator_reference = self::std::reverse_iterator___traits_type;
        impl<_Iterator> Default for reverse_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct back_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type back_insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for back_insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct front_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type front_insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for front_insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        pub struct insert_iterator<_Container> {
            pub container: *mut _Container,
            pub iter: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_Container> ::std::fmt::Debug for insert_iterator<_Container> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "insert_iterator {{ container: {:?} }}", self.container)
            }
        }
        impl<_Container> PartialEq for insert_iterator<_Container>
        where
            _Container: PartialEq,
        {
            fn eq(&self, other: &insert_iterator<_Container>) -> bool {
                self.container == other.container && self.iter == other.iter
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct move_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type move_iterator___traits_type = self::std::iterator_traits;
        pub type move_iterator___base_ref = self::std::move_iterator___traits_type;
        pub type move_iterator_iterator_type<_Iterator> = _Iterator;
        pub type move_iterator_iterator_category = self::std::move_iterator___traits_type;
        pub type move_iterator_value_type = self::std::move_iterator___traits_type;
        pub type move_iterator_difference_type = self::std::move_iterator___traits_type;
        pub type move_iterator_pointer<_Iterator> = _Iterator;
        pub type move_iterator_reference = u8;
        impl<_Iterator> Default for move_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type __iter_key_t = self::std::remove_const_t;
        pub type __iter_val_t = self::std::iterator_traits;
        pub type __iter_to_alloc_t =
            self::std::pair<root::std::add_const_t, self::std::__iter_val_t>;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __lc_rai {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__lc_rai>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__lc_rai)
                )
            );
            assert_eq!(
                align_of::<root::std::__lc_rai>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__lc_rai)
                )
            );
        }
        pub type streamoff = c_long;
        pub type streamsize = isize;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct fpos<_StateT> {
            pub _M_off: self::std::streamoff,
            pub _M_state: _StateT,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
        }
        impl<_StateT> Default for fpos<_StateT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type streampos = self::std::fpos<root::mbstate_t>;
        pub type wstreampos = self::std::fpos<root::mbstate_t>;
        pub type u16streampos = self::std::fpos<root::mbstate_t>;
        pub type u32streampos = self::std::fpos<root::mbstate_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct char_traits {
            pub _address: u8,
        }
        impl Default for char_traits {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[repr(C)]
        pub struct exception__bindgen_vtable(c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct exception {
            pub vtable_: *const exception__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout_exception() {
            assert_eq!(
                size_of::<exception>(),
                8usize,
                concat!("Size of: ", stringify!(exception))
            );
            assert_eq!(
                align_of::<exception>(),
                8usize,
                concat!("Alignment of ", stringify!(exception))
            );
        }
        impl Default for exception {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}exception_destructor"]
            pub fn exception_exception_destructor(this: *mut self::std::exception);
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn exception_what(this: *mut c_void) -> *const c_char;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_exception {
            pub _base: self::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_exception() {
            assert_eq!(
                size_of::<bad_exception>(),
                8usize,
                concat!("Size of: ", stringify!(bad_exception))
            );
            assert_eq!(
                align_of::<bad_exception>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_exception))
            );
        }
        impl Default for bad_exception {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}bad_exception_destructor"]
            pub fn bad_exception_bad_exception_destructor(this: *mut self::std::bad_exception);
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn bad_exception_what(this: *mut c_void) -> *const c_char;
        }
        pub type terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
        pub type unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            pub fn set_terminate(
                arg1: self::std::terminate_handler,
            ) -> self::std::terminate_handler;
        }
        extern "C" {
            pub fn get_terminate() -> self::std::terminate_handler;
        }
        extern "C" {
            pub fn terminate();
        }
        extern "C" {
            pub fn set_unexpected(
                arg1: self::std::unexpected_handler,
            ) -> self::std::unexpected_handler;
        }
        extern "C" {
            pub fn get_unexpected() -> self::std::unexpected_handler;
        }
        extern "C" {
            pub fn unexpected();
        }
        extern "C" {
            pub fn uncaught_exception() -> bool;
        }
        extern "C" {
            pub fn uncaught_exceptions() -> c_int;
        }
        extern "C" {
            pub fn _Hash_bytes(__ptr: *const c_void, __len: usize, __seed: usize) -> usize;
        }
        extern "C" {
            pub fn _Fnv_hash_bytes(__ptr: *const c_void, __len: usize, __seed: usize) -> usize;
        }
        #[repr(C)]
        pub struct type_info__bindgen_vtable(c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct type_info {
            pub vtable_: *const type_info__bindgen_vtable,
            pub __name: *const c_char,
        }
        #[test]
        fn bindgen_test_layout_type_info() {
            assert_eq!(
                size_of::<type_info>(),
                16usize,
                concat!("Size of: ", stringify!(type_info))
            );
            assert_eq!(
                align_of::<type_info>(),
                8usize,
                concat!("Alignment of ", stringify!(type_info))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<type_info>())).__name as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(type_info),
                    "::",
                    stringify!(__name)
                )
            );
        }
        impl Default for type_info {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}type_info_destructor"]
            pub fn type_info_type_info_destructor(this: *mut self::std::type_info);
        }
        extern "C" {
            #[link_name = "\u{1}__is_pointer_p"]
            pub fn type_info___is_pointer_p(this: *mut c_void) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__is_function_p"]
            pub fn type_info___is_function_p(this: *mut c_void) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__do_catch"]
            pub fn type_info___do_catch(
                this: *mut c_void,
                __thr_type: *const self::std::type_info,
                __thr_obj: *mut *mut c_void,
                __outer: c_uint,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__do_upcast"]
            pub fn type_info___do_upcast(
                this: *mut c_void,
                __target: *const self::__cxxabiv1::__class_type_info,
                __obj_ptr: *mut *mut c_void,
            ) -> bool;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_cast {
            pub _base: self::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_cast() {
            assert_eq!(
                size_of::<bad_cast>(),
                8usize,
                concat!("Size of: ", stringify!(bad_cast))
            );
            assert_eq!(
                align_of::<bad_cast>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_cast))
            );
        }
        impl Default for bad_cast {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}bad_cast_destructor"]
            pub fn bad_cast_bad_cast_destructor(this: *mut self::std::bad_cast);
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn bad_cast_what(this: *mut c_void) -> *const c_char;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_typeid {
            pub _base: self::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_typeid() {
            assert_eq!(
                size_of::<bad_typeid>(),
                8usize,
                concat!("Size of: ", stringify!(bad_typeid))
            );
            assert_eq!(
                align_of::<bad_typeid>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_typeid))
            );
        }
        impl Default for bad_typeid {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}bad_typeid_destructor"]
            pub fn bad_typeid_bad_typeid_destructor(this: *mut self::std::bad_typeid);
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn bad_typeid_what(this: *mut c_void) -> *const c_char;
        }
        pub mod __exception_ptr {

            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct exception_ptr {
                pub _M_exception_object: *mut c_void,
            }
            #[test]
            fn bindgen_test_layout_exception_ptr() {
                assert_eq!(
                    size_of::<exception_ptr>(),
                    8usize,
                    concat!("Size of: ", stringify!(exception_ptr))
                );
                assert_eq!(
                    align_of::<exception_ptr>(),
                    8usize,
                    concat!("Alignment of ", stringify!(exception_ptr))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<exception_ptr>()))._M_exception_object as *const _
                            as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(exception_ptr),
                        "::",
                        stringify!(_M_exception_object)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}swap"]
                pub fn exception_ptr_swap(
                    this: *mut self::std::__exception_ptr::exception_ptr,
                    arg1: *mut self::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}__cxa_exception_type"]
                pub fn exception_ptr___cxa_exception_type(
                    this: *const self::std::__exception_ptr::exception_ptr,
                ) -> *const self::std::type_info;
            }
            extern "C" {
                #[link_name = "\u{1}exception_ptr"]
                pub fn exception_ptr_exception_ptr(
                    this: *mut self::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}exception_ptr"]
                pub fn exception_ptr_exception_ptr1(
                    this: *mut self::std::__exception_ptr::exception_ptr,
                    arg1: *const self::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}exception_ptr_destructor"]
                pub fn exception_ptr_exception_ptr_destructor(
                    this: *mut self::std::__exception_ptr::exception_ptr,
                );
            }
            impl Default for exception_ptr {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl exception_ptr {
                #[inline]
                pub unsafe fn swap(
                    &mut self,
                    arg1: *mut self::std::__exception_ptr::exception_ptr,
                ) {
                    exception_ptr_swap(self, arg1)
                }
                #[inline]
                pub unsafe fn __cxa_exception_type(&self) -> *const self::std::type_info {
                    exception_ptr___cxa_exception_type(self)
                }
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = uninitialized();
                    exception_ptr_exception_ptr(&mut __bindgen_tmp);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(arg1: *const self::std::__exception_ptr::exception_ptr) -> Self {
                    let mut __bindgen_tmp = uninitialized();
                    exception_ptr_exception_ptr1(&mut __bindgen_tmp, arg1);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn destruct(&mut self) {
                    exception_ptr_exception_ptr_destructor(self)
                }
            }
        }
        extern "C" {
            pub fn current_exception() -> self::std::__exception_ptr::exception_ptr;
        }
        extern "C" {
            pub fn rethrow_exception(arg1: self::std::__exception_ptr::exception_ptr);
        }
        #[repr(C)]
        pub struct nested_exception__bindgen_vtable(c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct nested_exception {
            pub vtable_: *const nested_exception__bindgen_vtable,
            pub _M_ptr: self::std::__exception_ptr::exception_ptr,
        }
        #[test]
        fn bindgen_test_layout_nested_exception() {
            assert_eq!(
                size_of::<nested_exception>(),
                16usize,
                concat!("Size of: ", stringify!(nested_exception))
            );
            assert_eq!(
                align_of::<nested_exception>(),
                8usize,
                concat!("Alignment of ", stringify!(nested_exception))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<nested_exception>()))._M_ptr as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(nested_exception),
                    "::",
                    stringify!(_M_ptr)
                )
            );
        }
        impl Default for nested_exception {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}nested_exception_destructor"]
            pub fn nested_exception_nested_exception_destructor(
                this: *mut self::std::nested_exception,
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Nested_exception<_Except> {
            pub _base: _Except,
            pub _base_1: self::std::nested_exception,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
        }
        impl<_Except> Default for _Nested_exception<_Except> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type __rethrow_if_nested_cond = u8;
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_alloc {
            pub _base: self::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_alloc() {
            assert_eq!(
                size_of::<bad_alloc>(),
                8usize,
                concat!("Size of: ", stringify!(bad_alloc))
            );
            assert_eq!(
                align_of::<bad_alloc>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_alloc))
            );
        }
        impl Default for bad_alloc {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}bad_alloc_destructor"]
            pub fn bad_alloc_bad_alloc_destructor(this: *mut self::std::bad_alloc);
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn bad_alloc_what(this: *mut c_void) -> *const c_char;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_array_new_length {
            pub _base: self::std::bad_alloc,
        }
        #[test]
        fn bindgen_test_layout_bad_array_new_length() {
            assert_eq!(
                size_of::<bad_array_new_length>(),
                8usize,
                concat!("Size of: ", stringify!(bad_array_new_length))
            );
            assert_eq!(
                align_of::<bad_array_new_length>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_array_new_length))
            );
        }
        impl Default for bad_array_new_length {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}bad_array_new_length_destructor"]
            pub fn bad_array_new_length_bad_array_new_length_destructor(
                this: *mut self::std::bad_array_new_length,
            );
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn bad_array_new_length_what(this: *mut c_void) -> *const c_char;
        }
        pub type align_val_t = u64;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct nothrow_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_nothrow_t() {
            assert_eq!(
                size_of::<nothrow_t>(),
                1usize,
                concat!("Size of: ", stringify!(nothrow_t))
            );
            assert_eq!(
                align_of::<nothrow_t>(),
                1usize,
                concat!("Alignment of ", stringify!(nothrow_t))
            );
        }
        extern "C" {
            pub static nothrow: self::std::nothrow_t;
        }
        pub type new_handler = ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            pub fn set_new_handler(arg1: self::std::new_handler) -> self::std::new_handler;
        }
        extern "C" {
            pub fn get_new_handler() -> self::std::new_handler;
        }
        pub type __allocator_base = self::__gnu_cxx::new_allocator;
        #[test]
        fn __bindgen_test_layout_allocator_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_size_type = usize;
        pub type allocator_difference_type = isize;
        pub type allocator_pointer<_Tp> = *mut _Tp;
        pub type allocator_const_pointer<_Tp> = *const _Tp;
        pub type allocator_reference<_Tp> = *mut _Tp;
        pub type allocator_const_reference<_Tp> = *const _Tp;
        pub type allocator_value_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = self::std::allocator;
        pub type allocator_propagate_on_container_move_assignment = self::std::true_type;
        pub type allocator_is_always_equal = self::std::true_type;
        impl Default for allocator {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        pub type __c_locale = self::__locale_t;
        pub type ios = self::std::basic_ios<c_char>;
        pub type streambuf = self::std::basic_streambuf<c_char>;
        pub type istream = self::std::basic_istream<c_char>;
        pub type ostream = self::std::basic_ostream<c_char>;
        pub type iostream = self::std::basic_iostream<c_char>;
        pub type stringbuf = self::std::__cxx11::basic_stringbuf<c_char>;
        pub type istringstream = self::std::__cxx11::basic_istringstream<c_char>;
        pub type ostringstream = self::std::__cxx11::basic_ostringstream<c_char>;
        pub type stringstream = self::std::__cxx11::basic_stringstream<c_char>;
        pub type filebuf = self::std::basic_filebuf<c_char>;
        pub type ifstream = self::std::basic_ifstream<c_char>;
        pub type ofstream = self::std::basic_ofstream<c_char>;
        pub type fstream = self::std::basic_fstream<c_char>;
        pub type wios = self::std::basic_ios<u32>;
        pub type wstreambuf = self::std::basic_streambuf<u32>;
        pub type wistream = self::std::basic_istream<u32>;
        pub type wostream = self::std::basic_ostream<u32>;
        pub type wiostream = self::std::basic_iostream<u32>;
        pub type wstringbuf = self::std::__cxx11::basic_stringbuf<u32>;
        pub type wistringstream = self::std::__cxx11::basic_istringstream<u32>;
        pub type wostringstream = self::std::__cxx11::basic_ostringstream<u32>;
        pub type wstringstream = self::std::__cxx11::basic_stringstream<u32>;
        pub type wfilebuf = self::std::basic_filebuf<u32>;
        pub type wifstream = self::std::basic_ifstream<u32>;
        pub type wofstream = self::std::basic_ofstream<u32>;
        pub type wfstream = self::std::basic_fstream<u32>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct time_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct time_put_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type<_Arg> = _Arg;
        pub type unary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type<_Arg1> = _Arg1;
        pub type binary_function_second_argument_type<_Arg2> = _Arg2;
        pub type binary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __is_transparent {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct plus {
            pub _address: u8,
        }
        impl Default for plus {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct minus {
            pub _address: u8,
        }
        impl Default for minus {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct multiplies {
            pub _address: u8,
        }
        impl Default for multiplies {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct divides {
            pub _address: u8,
        }
        impl Default for divides {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct modulus {
            pub _address: u8,
        }
        impl Default for modulus {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct negate {
            pub _address: u8,
        }
        impl Default for negate {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_plus_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::plus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::plus)
                )
            );
            assert_eq!(
                align_of::<root::std::plus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::plus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_minus_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::minus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::minus)
                )
            );
            assert_eq!(
                align_of::<root::std::minus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::minus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_multiplies_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::multiplies>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::multiplies)
                )
            );
            assert_eq!(
                align_of::<root::std::multiplies>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::multiplies)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_divides_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::divides>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::divides)
                )
            );
            assert_eq!(
                align_of::<root::std::divides>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::divides)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_modulus_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::modulus>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::modulus)
                )
            );
            assert_eq!(
                align_of::<root::std::modulus>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::modulus)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_negate_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::negate>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::negate)
                )
            );
            assert_eq!(
                align_of::<root::std::negate>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::negate)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct not_equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct greater_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct less_equal {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_equal_to_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::equal_to>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::equal_to)
                )
            );
            assert_eq!(
                align_of::<root::std::equal_to>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::equal_to)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_not_equal_to_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::not_equal_to>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::not_equal_to)
                )
            );
            assert_eq!(
                align_of::<root::std::not_equal_to>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::not_equal_to)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_greater_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::greater>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::greater)
                )
            );
            assert_eq!(
                align_of::<root::std::greater>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::greater)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_less_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::less>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::less)
                )
            );
            assert_eq!(
                align_of::<root::std::less>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::less)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_greater_equal_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::greater_equal>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::greater_equal)
                )
            );
            assert_eq!(
                align_of::<root::std::greater_equal>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::greater_equal)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_less_equal_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::less_equal>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::less_equal)
                )
            );
            assert_eq!(
                align_of::<root::std::less_equal>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::less_equal)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct logical_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct logical_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct logical_not {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_logical_and_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::logical_and>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_and)
                )
            );
            assert_eq!(
                align_of::<root::std::logical_and>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_and)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_logical_or_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::logical_or>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_or)
                )
            );
            assert_eq!(
                align_of::<root::std::logical_or>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_or)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_logical_not_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::logical_not>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::logical_not)
                )
            );
            assert_eq!(
                align_of::<root::std::logical_not>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::logical_not)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bit_and {
            pub _address: u8,
        }
        impl Default for bit_and {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bit_or {
            pub _address: u8,
        }
        impl Default for bit_or {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bit_xor {
            pub _address: u8,
        }
        impl Default for bit_xor {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bit_not {
            pub _address: u8,
        }
        impl Default for bit_not {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_bit_and_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::bit_and>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_and)
                )
            );
            assert_eq!(
                align_of::<root::std::bit_and>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_and)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_or_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::bit_or>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_or)
                )
            );
            assert_eq!(
                align_of::<root::std::bit_or>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_or)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_xor_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::bit_xor>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_xor)
                )
            );
            assert_eq!(
                align_of::<root::std::bit_xor>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_xor)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_bit_not_open0_void_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::bit_not>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::bit_not)
                )
            );
            assert_eq!(
                align_of::<root::std::bit_not>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::bit_not)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct unary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for unary_negate<_Predicate> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct binary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for binary_negate<_Predicate> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pointer_to_unary_function<_Arg, _Result> {
            pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        impl<_Arg, _Result> Default for pointer_to_unary_function<_Arg, _Result> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            pub _M_ptr:
                ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
            pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        impl<_Arg1, _Arg2, _Result> Default for pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Identity {
            pub _address: u8,
        }
        impl Default for _Identity {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Select1st {
            pub _address: u8,
        }
        impl Default for _Select1st {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Select2nd {
            pub _address: u8,
        }
        impl Default for _Select2nd {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for mem_fun_t<_Ret> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct const_mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for const_mem_fun_t<_Ret> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for mem_fun_ref_t<_Ret> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct const_mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for const_mem_fun_ref_t<_Ret> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct mem_fun1_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for mem_fun1_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct const_mem_fun1_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for const_mem_fun1_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for mem_fun1_ref_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for const_mem_fun1_ref_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        pub struct binder1st<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        impl<_Operation> Default for binder1st<_Operation> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_Operation> ::std::fmt::Debug for binder1st<_Operation> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "binder1st {{ op: Non-debuggable generic }}")
            }
        }
        impl<_Operation> PartialEq for binder1st<_Operation>
        where
            _Operation: PartialEq,
        {
            fn eq(&self, other: &binder1st<_Operation>) -> bool {
                self.op == other.op && self.value == other.value
            }
        }
        #[repr(C)]
        pub struct binder2nd<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        impl<_Operation> Default for binder2nd<_Operation> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_Operation> ::std::fmt::Debug for binder2nd<_Operation> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "binder2nd {{ op: Non-debuggable generic }}")
            }
        }
        impl<_Operation> PartialEq for binder2nd<_Operation>
        where
            _Operation: PartialEq,
        {
            fn eq(&self, other: &binder2nd<_Operation>) -> bool {
                self.op == other.op && self.value == other.value
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct initializer_list<_E> {
            pub _M_array: self::std::initializer_list_iterator<_E>,
            pub _M_len: self::std::initializer_list_size_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
        }
        pub type initializer_list_value_type<_E> = _E;
        pub type initializer_list_reference<_E> = *const _E;
        pub type initializer_list_const_reference<_E> = *const _E;
        pub type initializer_list_size_type = usize;
        pub type initializer_list_iterator<_E> = *const _E;
        pub type initializer_list_const_iterator<_E> = *const _E;
        impl<_E> Default for initializer_list<_E> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct valarray {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __allocator_traits_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __allocator_traits_base___rebind {
            pub _address: u8,
        }
        impl Default for __allocator_traits_base___rebind {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type __allocator_traits_base___pointer = [u8; 0usize];
        pub type __allocator_traits_base___c_pointer = [u8; 0usize];
        pub type __allocator_traits_base___v_pointer = [u8; 0usize];
        pub type __allocator_traits_base___cv_pointer = [u8; 0usize];
        pub type __allocator_traits_base___pocca = [u8; 0usize];
        pub type __allocator_traits_base___pocma = [u8; 0usize];
        pub type __allocator_traits_base___pocs = [u8; 0usize];
        pub type __allocator_traits_base___equal = [u8; 0usize];
        #[test]
        fn bindgen_test_layout___allocator_traits_base() {
            assert_eq!(
                size_of::<__allocator_traits_base>(),
                1usize,
                concat!("Size of: ", stringify!(__allocator_traits_base))
            );
            assert_eq!(
                align_of::<__allocator_traits_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__allocator_traits_base))
            );
        }
        pub type __alloc_rebind = self::std::__allocator_traits_base;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
        pub type allocator_traits_value_type = [u8; 0usize];
        pub type allocator_traits_pointer = self::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits__Ptr {
            pub _address: u8,
        }
        pub type allocator_traits__Ptr_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits__Diff {
            pub _address: u8,
        }
        pub type allocator_traits__Diff_type = self::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits__Size {
            pub _address: u8,
        }
        impl Default for allocator_traits__Size {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type allocator_traits_const_pointer = [u8; 0usize];
        pub type allocator_traits_void_pointer = self::std::allocator_traits__Ptr;
        pub type allocator_traits_const_void_pointer = self::std::allocator_traits__Ptr;
        pub type allocator_traits_difference_type = [u8; 0usize];
        pub type allocator_traits_size_type = [u8; 0usize];
        pub type allocator_traits_propagate_on_container_copy_assignment =
            self::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_move_assignment =
            self::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_swap = self::std::__detected_or_t;
        pub type allocator_traits_is_always_equal = self::std::__detected_or_t;
        pub type allocator_traits_rebind_alloc = self::std::__alloc_rebind;
        pub type allocator_traits_rebind_traits = self::std::allocator_traits;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits___construct_helper {
            pub _address: u8,
        }
        pub type allocator_traits___construct_helper_type<_Alloc> = _Alloc;
        pub type allocator_traits___has_construct = self::std::allocator_traits___construct_helper;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_copy_insertable_impl {
            pub _address: u8,
        }
        pub type __is_copy_insertable_impl__Traits = self::std::allocator_traits;
        pub type __is_copy_insertable_impl_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_copy_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_allocator {
            pub _base: self::std::false_type,
        }
        pub type _RequireAllocator = u8;
        pub const float_round_style_round_indeterminate: self::std::float_round_style = -1;
        pub const float_round_style_round_toward_zero: self::std::float_round_style = 0;
        pub const float_round_style_round_to_nearest: self::std::float_round_style = 1;
        pub const float_round_style_round_toward_infinity: self::std::float_round_style = 2;
        pub const float_round_style_round_toward_neg_infinity: self::std::float_round_style = 3;
        pub type float_round_style = i32;
        pub const float_denorm_style_denorm_indeterminate: self::std::float_denorm_style = -1;
        pub const float_denorm_style_denorm_absent: self::std::float_denorm_style = 0;
        pub const float_denorm_style_denorm_present: self::std::float_denorm_style = 1;
        pub type float_denorm_style = i32;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __numeric_limits_base {
            pub _address: u8,
        }
        pub const __numeric_limits_base_is_specialized: bool = false;
        pub const __numeric_limits_base_digits: c_int = 0;
        pub const __numeric_limits_base_digits10: c_int = 0;
        pub const __numeric_limits_base_max_digits10: c_int = 0;
        pub const __numeric_limits_base_is_signed: bool = false;
        pub const __numeric_limits_base_is_integer: bool = false;
        pub const __numeric_limits_base_is_exact: bool = false;
        pub const __numeric_limits_base_radix: c_int = 0;
        pub const __numeric_limits_base_min_exponent: c_int = 0;
        pub const __numeric_limits_base_min_exponent10: c_int = 0;
        pub const __numeric_limits_base_max_exponent: c_int = 0;
        pub const __numeric_limits_base_max_exponent10: c_int = 0;
        pub const __numeric_limits_base_has_infinity: bool = false;
        pub const __numeric_limits_base_has_quiet_NaN: bool = false;
        pub const __numeric_limits_base_has_signaling_NaN: bool = false;
        extern "C" {
            #[link_name = "\u{1}has_denorm"]
            pub static __numeric_limits_base_has_denorm: self::std::float_denorm_style;
        }
        pub const __numeric_limits_base_has_denorm_loss: bool = false;
        pub const __numeric_limits_base_is_iec559: bool = false;
        pub const __numeric_limits_base_is_bounded: bool = false;
        pub const __numeric_limits_base_is_modulo: bool = false;
        pub const __numeric_limits_base_traps: bool = false;
        pub const __numeric_limits_base_tinyness_before: bool = false;
        extern "C" {
            #[link_name = "\u{1}round_style"]
            pub static __numeric_limits_base_round_style: self::std::float_round_style;
        }
        #[test]
        fn bindgen_test_layout___numeric_limits_base() {
            assert_eq!(
                size_of::<__numeric_limits_base>(),
                1usize,
                concat!("Size of: ", stringify!(__numeric_limits_base))
            );
            assert_eq!(
                align_of::<__numeric_limits_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__numeric_limits_base))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct numeric_limits {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_bool__close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_signed_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_char16_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_char32_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_float_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_double_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numeric_limits_open0_long_double_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
            assert_eq!(
                align_of::<root::std::numeric_limits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::numeric_limits)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __hash_base {
            pub _address: u8,
        }
        pub type __hash_base_result_type<_Result> = _Result;
        pub type __hash_base_argument_type<_Arg> = _Arg;
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __poison_hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct hash {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_bool__close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_signed_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char16_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char32_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Hash_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Hash_impl() {
            assert_eq!(
                size_of::<_Hash_impl>(),
                1usize,
                concat!("Size of: ", stringify!(_Hash_impl))
            );
            assert_eq!(
                align_of::<_Hash_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(_Hash_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Fnv_hash_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Fnv_hash_impl() {
            assert_eq!(
                size_of::<_Fnv_hash_impl>(),
                1usize,
                concat!("Size of: ", stringify!(_Fnv_hash_impl))
            );
            assert_eq!(
                align_of::<_Fnv_hash_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(_Fnv_hash_impl))
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_float_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_double_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_fast_hash {
            pub _base: self::std::true_type,
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_long_double_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_string_view<_CharT> {
            pub _M_len: usize,
            pub _M_str: *const _CharT,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_string_view_traits_type<_Traits> = _Traits;
        pub type basic_string_view_value_type<_CharT> = _CharT;
        pub type basic_string_view_pointer<_CharT> = *const _CharT;
        pub type basic_string_view_const_pointer<_CharT> = *const _CharT;
        pub type basic_string_view_reference<_CharT> = *const _CharT;
        pub type basic_string_view_const_reference<_CharT> = *const _CharT;
        pub type basic_string_view_const_iterator<_CharT> = *const _CharT;
        pub type basic_string_view_iterator<_CharT> =
            self::std::basic_string_view_const_iterator<_CharT>;
        pub type basic_string_view_const_reverse_iterator<_CharT> =
            self::std::reverse_iterator<root::std::basic_string_view_const_iterator<_CharT>>;
        pub type basic_string_view_reverse_iterator<_CharT> =
            self::std::basic_string_view_const_reverse_iterator<_CharT>;
        pub type basic_string_view_size_type = usize;
        pub type basic_string_view_difference_type = isize;
        impl<_CharT> Default for basic_string_view<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub mod __detail {

            pub type __idt = self::std::common_type_t;
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _List_node_base {
                pub _M_next: *mut self::std::__detail::_List_node_base,
                pub _M_prev: *mut self::std::__detail::_List_node_base,
            }
            #[test]
            fn bindgen_test_layout__List_node_base() {
                assert_eq!(
                    size_of::<_List_node_base>(),
                    16usize,
                    concat!("Size of: ", stringify!(_List_node_base))
                );
                assert_eq!(
                    align_of::<_List_node_base>(),
                    8usize,
                    concat!("Alignment of ", stringify!(_List_node_base))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<_List_node_base>()))._M_next as *const _ as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(_List_node_base),
                        "::",
                        stringify!(_M_next)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<_List_node_base>()))._M_prev as *const _ as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(_List_node_base),
                        "::",
                        stringify!(_M_prev)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}swap"]
                pub fn _List_node_base_swap(
                    __x: *mut self::std::__detail::_List_node_base,
                    __y: *mut self::std::__detail::_List_node_base,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_M_transfer"]
                pub fn _List_node_base__M_transfer(
                    this: *mut self::std::__detail::_List_node_base,
                    __first: *mut self::std::__detail::_List_node_base,
                    __last: *mut self::std::__detail::_List_node_base,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_M_reverse"]
                pub fn _List_node_base__M_reverse(this: *mut self::std::__detail::_List_node_base);
            }
            extern "C" {
                #[link_name = "\u{1}_M_hook"]
                pub fn _List_node_base__M_hook(
                    this: *mut self::std::__detail::_List_node_base,
                    __position: *mut self::std::__detail::_List_node_base,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_M_unhook"]
                pub fn _List_node_base__M_unhook(this: *mut self::std::__detail::_List_node_base);
            }
            impl Default for _List_node_base {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            impl _List_node_base {
                #[inline]
                pub unsafe fn swap(
                    __x: *mut self::std::__detail::_List_node_base,
                    __y: *mut self::std::__detail::_List_node_base,
                ) {
                    _List_node_base_swap(__x, __y)
                }
                #[inline]
                pub unsafe fn _M_transfer(
                    &mut self,
                    __first: *mut self::std::__detail::_List_node_base,
                    __last: *mut self::std::__detail::_List_node_base,
                ) {
                    _List_node_base__M_transfer(self, __first, __last)
                }
                #[inline]
                pub unsafe fn _M_reverse(&mut self) {
                    _List_node_base__M_reverse(self)
                }
                #[inline]
                pub unsafe fn _M_hook(
                    &mut self,
                    __position: *mut self::std::__detail::_List_node_base,
                ) {
                    _List_node_base__M_hook(self, __position)
                }
                #[inline]
                pub unsafe fn _M_unhook(&mut self) {
                    _List_node_base__M_unhook(self)
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _List_node_header {
                pub _base: self::std::__detail::_List_node_base,
                pub _M_size: usize,
            }
            #[test]
            fn bindgen_test_layout__List_node_header() {
                assert_eq!(
                    size_of::<_List_node_header>(),
                    24usize,
                    concat!("Size of: ", stringify!(_List_node_header))
                );
                assert_eq!(
                    align_of::<_List_node_header>(),
                    8usize,
                    concat!("Alignment of ", stringify!(_List_node_header))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<_List_node_header>()))._M_size as *const _ as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(_List_node_header),
                        "::",
                        stringify!(_M_size)
                    )
                );
            }
            impl Default for _List_node_header {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct __floating_point_constant {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct __numeric_constants {
                pub _address: u8,
            }
        }
        pub type string_view = self::std::basic_string_view<c_char>;
        pub type wstring_view = self::std::basic_string_view<u32>;
        pub type u16string_view = self::std::basic_string_view<u16>;
        pub type u32string_view = self::std::basic_string_view<u32>;
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char_char_traits_open3_char_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_view_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_wchar_t_char_traits_open3_wchar_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char16_t_char_traits_open2_char16_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char16_t_char_traits_open3_char16_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char32_t_char_traits_open2_char32_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char32_t_char_traits_open3_char32_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        pub mod literals {}
        extern "C" {
            pub fn getline(
                __in: *mut self::std::basic_istream<c_char>,
                __str: *mut self::std::__cxx11::basic_string<c_char>,
                __delim: c_char,
            ) -> *mut self::std::basic_istream<c_char>;
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_wchar_t_char_traits_open3_wchar_t_close3_allocator_open3_wchar_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char16_t_char_traits_open3_char16_t_close3_allocator_open3_char16_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char32_t_char_traits_open3_char32_t_close3_allocator_open3_char32_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        extern "C" {
            pub static npos: self::std::__cxx11::basic_string_size_type;
        }

        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct tuple_size {
            pub _address: u8,
        }
        pub type __enable_if_has_tuple_size<_Tp> = _Tp;
        pub type __tuple_element_t = u8;
        pub type tuple_element_t = u8;
        pub type _Build_index_tuple__IdxTuple = u8;
        pub type _Build_index_tuple___type = u8;
        pub type integer_sequence_value_type<_Tp> = _Tp;
        pub type make_integer_sequence = u8;
        pub type index_sequence = u8;
        pub type make_index_sequence = self::std::make_integer_sequence;
        pub type index_sequence_for = self::std::make_index_sequence;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct in_place_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_in_place_t() {
            assert_eq!(
                size_of::<in_place_t>(),
                1usize,
                concat!("Size of: ", stringify!(in_place_t))
            );
            assert_eq!(
                align_of::<in_place_t>(),
                1usize,
                concat!("Alignment of ", stringify!(in_place_t))
            );
        }
        extern "C" {
            pub static in_place: self::std::in_place_t;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct in_place_type_t {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_in_place_type_impl {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_in_place_type {
            pub _base: self::std::__is_in_place_type_impl,
        }
        impl Default for __is_in_place_type {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        pub struct _Vector_base {
            pub _M_impl: self::std::_Vector_base__Vector_impl,
        }
        pub type _Vector_base__Tp_alloc_type = [u8; 0usize];
        pub type _Vector_base_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Vector_base__Vector_impl {
            pub _M_start: self::std::_Vector_base_pointer,
            pub _M_finish: self::std::_Vector_base_pointer,
            pub _M_end_of_storage: self::std::_Vector_base_pointer,
        }
        impl Default for _Vector_base__Vector_impl {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Vector_base__Vector_impl {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Vector_base__Vector_impl {{  }}")
            }
        }
        impl PartialEq for _Vector_base__Vector_impl {
            fn eq(&self, other: &_Vector_base__Vector_impl) -> bool {
                self._M_start == other._M_start
                    && self._M_finish == other._M_finish
                    && self._M_end_of_storage == other._M_end_of_storage
            }
        }
        pub type _Vector_base_allocator_type<_Alloc> = _Alloc;
        impl Default for _Vector_base {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Vector_base {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Vector_base {{ _M_impl: {:?} }}", self._M_impl)
            }
        }
        impl PartialEq for _Vector_base {
            fn eq(&self, other: &_Vector_base) -> bool {
                self._M_impl == other._M_impl
            }
        }
        #[repr(C)]
        pub struct vector {
            pub _base: self::std::_Vector_base,
        }
        pub type vector__Base = self::std::_Vector_base;
        pub type vector__Tp_alloc_type = self::std::vector__Base;
        pub type vector__Alloc_traits = self::__gnu_cxx::__alloc_traits;
        pub type vector_value_type<_Tp> = _Tp;
        pub type vector_pointer = self::std::vector__Base;
        pub type vector_const_pointer = self::std::vector__Alloc_traits;
        pub type vector_reference = self::std::vector__Alloc_traits;
        pub type vector_const_reference = self::std::vector__Alloc_traits;
        pub type vector_iterator = self::__gnu_cxx::__normal_iterator<root::std::vector_pointer>;
        pub type vector_const_iterator =
            self::__gnu_cxx::__normal_iterator<root::std::vector_const_pointer>;
        pub type vector_const_reverse_iterator =
            self::std::reverse_iterator<root::std::vector_const_iterator>;
        pub type vector_reverse_iterator = self::std::reverse_iterator<root::std::vector_iterator>;
        pub type vector_size_type = usize;
        pub type vector_difference_type = isize;
        pub type vector_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct vector__Temporary_value {
            pub _M_this: *mut self::std::vector,
            pub __buf: u8,
        }
        impl Default for vector__Temporary_value {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl Default for vector {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for vector {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "vector {{  }}")
            }
        }
        impl PartialEq for vector {
            fn eq(&self, other: &vector) -> bool {
                self._base == other._base
            }
        }
        pub type _Bit_type = c_ulong;
        pub const std__S_word_bit: self::std::_bindgen_ty_1 = 64;
        pub type _bindgen_ty_1 = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Bit_reference {
            pub _M_p: *mut self::std::_Bit_type,
            pub _M_mask: self::std::_Bit_type,
        }
        #[test]
        fn bindgen_test_layout__Bit_reference() {
            assert_eq!(
                size_of::<_Bit_reference>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_reference))
            );
            assert_eq!(
                align_of::<_Bit_reference>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_reference))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<_Bit_reference>()))._M_p as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_reference),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<_Bit_reference>()))._M_mask as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_reference),
                    "::",
                    stringify!(_M_mask)
                )
            );
        }
        impl Default for _Bit_reference {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Bit_iterator_base {
            pub _M_p: *mut self::std::_Bit_type,
            pub _M_offset: c_uint,
        }
        #[test]
        fn bindgen_test_layout__Bit_iterator_base() {
            assert_eq!(
                size_of::<_Bit_iterator_base>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_iterator_base))
            );
            assert_eq!(
                align_of::<_Bit_iterator_base>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_iterator_base))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_p as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_iterator_base),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_offset as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_iterator_base),
                    "::",
                    stringify!(_M_offset)
                )
            );
        }
        impl Default for _Bit_iterator_base {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Bit_iterator {
            pub _base: self::std::_Bit_iterator_base,
        }
        pub type _Bit_iterator_reference = self::std::_Bit_reference;
        pub type _Bit_iterator_pointer = *mut self::std::_Bit_reference;
        pub type _Bit_iterator_iterator = self::std::_Bit_iterator;
        #[test]
        fn bindgen_test_layout__Bit_iterator() {
            assert_eq!(
                size_of::<_Bit_iterator>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_iterator))
            );
            assert_eq!(
                align_of::<_Bit_iterator>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_iterator))
            );
        }
        impl Default for _Bit_iterator {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Bit_const_iterator {
            pub _base: self::std::_Bit_iterator_base,
        }
        pub type _Bit_const_iterator_reference = bool;
        pub type _Bit_const_iterator_const_reference = bool;
        pub type _Bit_const_iterator_pointer = *const bool;
        pub type _Bit_const_iterator_const_iterator = self::std::_Bit_const_iterator;
        #[test]
        fn bindgen_test_layout__Bit_const_iterator() {
            assert_eq!(
                size_of::<_Bit_const_iterator>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_const_iterator))
            );
            assert_eq!(
                align_of::<_Bit_const_iterator>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_const_iterator))
            );
        }
        impl Default for _Bit_const_iterator {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        pub struct _Bvector_base {
            pub _M_impl: self::std::_Bvector_base__Bvector_impl,
        }
        pub type _Bvector_base__Bit_alloc_type = [u8; 0usize];
        pub type _Bvector_base__Bit_alloc_traits = self::__gnu_cxx::__alloc_traits;
        pub type _Bvector_base__Bit_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl_data {
            pub _M_start: self::std::_Bit_iterator,
            pub _M_finish: self::std::_Bit_iterator,
            pub _M_end_of_storage: self::std::_Bvector_base__Bit_pointer,
        }
        impl Default for _Bvector_base__Bvector_impl_data {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Bvector_base__Bvector_impl_data {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "_Bvector_base__Bvector_impl_data {{ _M_start: {:?}, _M_finish: {:?} }}",
                    self._M_start, self._M_finish
                )
            }
        }
        impl PartialEq for _Bvector_base__Bvector_impl_data {
            fn eq(&self, other: &_Bvector_base__Bvector_impl_data) -> bool {
                self._M_start == other._M_start
                    && self._M_finish == other._M_finish
                    && self._M_end_of_storage == other._M_end_of_storage
            }
        }
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl {
            pub _base_1: self::std::_Bvector_base__Bvector_impl_data,
        }
        impl Default for _Bvector_base__Bvector_impl {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Bvector_base__Bvector_impl {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Bvector_base__Bvector_impl {{  }}")
            }
        }
        impl PartialEq for _Bvector_base__Bvector_impl {
            fn eq(&self, other: &_Bvector_base__Bvector_impl) -> bool {
                self._base_1 == other._base_1
            }
        }
        pub type _Bvector_base_allocator_type<_Alloc> = _Alloc;
        impl Default for _Bvector_base {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Bvector_base {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Bvector_base {{ _M_impl: {:?} }}", self._M_impl)
            }
        }
        impl PartialEq for _Bvector_base {
            fn eq(&self, other: &_Bvector_base) -> bool {
                self._M_impl == other._M_impl
            }
        }
        #[repr(C)]
        pub struct __cow_string {
            pub __bindgen_anon_1: self::std::__cow_string__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __cow_string__bindgen_ty_1 {
            pub _M_p: *const c_char,
            pub _M_bytes: [c_char; 8usize],
            _bindgen_union_align: u64,
        }
        #[test]
        fn bindgen_test_layout___cow_string__bindgen_ty_1() {
            assert_eq!(
                size_of::<__cow_string__bindgen_ty_1>(),
                8usize,
                concat!("Size of: ", stringify!(__cow_string__bindgen_ty_1))
            );
            assert_eq!(
                align_of::<__cow_string__bindgen_ty_1>(),
                8usize,
                concat!("Alignment of ", stringify!(__cow_string__bindgen_ty_1))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_p as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cow_string__bindgen_ty_1),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_bytes as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cow_string__bindgen_ty_1),
                    "::",
                    stringify!(_M_bytes)
                )
            );
        }
        impl Default for __cow_string__bindgen_ty_1 {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for __cow_string__bindgen_ty_1 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "__cow_string__bindgen_ty_1 {{ union }}")
            }
        }
        #[test]
        fn bindgen_test_layout___cow_string() {
            assert_eq!(
                size_of::<__cow_string>(),
                8usize,
                concat!("Size of: ", stringify!(__cow_string))
            );
            assert_eq!(
                align_of::<__cow_string>(),
                8usize,
                concat!("Alignment of ", stringify!(__cow_string))
            );
        }
        extern "C" {
            #[link_name = "\u{1}__cow_string"]
            pub fn __cow_string___cow_string(this: *mut self::std::__cow_string);
        }
        extern "C" {
            #[link_name = "\u{1}__cow_string"]
            pub fn __cow_string___cow_string1(
                this: *mut self::std::__cow_string,
                arg1: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__cow_string"]
            pub fn __cow_string___cow_string2(
                this: *mut self::std::__cow_string,
                arg1: *const c_char,
                arg2: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__cow_string"]
            pub fn __cow_string___cow_string3(
                this: *mut self::std::__cow_string,
                arg1: *const self::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__cow_string"]
            pub fn __cow_string___cow_string4(
                this: *mut self::std::__cow_string,
                arg1: *mut self::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__cow_string_destructor"]
            pub fn __cow_string___cow_string_destructor(this: *mut self::std::__cow_string);
        }
        impl Default for __cow_string {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for __cow_string {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "__cow_string {{ __bindgen_anon_1: {:?} }}",
                    self.__bindgen_anon_1
                )
            }
        }
        impl __cow_string {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = uninitialized();
                __cow_string___cow_string(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                __cow_string___cow_string1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const c_char, arg2: usize) -> Self {
                let mut __bindgen_tmp = uninitialized();
                __cow_string___cow_string2(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new3(arg1: *const self::std::__cow_string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                __cow_string___cow_string3(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new4(arg1: *mut self::std::__cow_string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                __cow_string___cow_string4(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                __cow_string___cow_string_destructor(self)
            }
        }
        pub type __sso_string = self::std::__cxx11::basic_string<c_char>;
        #[repr(C)]
        pub struct logic_error {
            pub _base: self::std::exception,
            pub _M_msg: self::std::__cow_string,
        }
        #[test]
        fn bindgen_test_layout_logic_error() {
            assert_eq!(
                size_of::<logic_error>(),
                16usize,
                concat!("Size of: ", stringify!(logic_error))
            );
            assert_eq!(
                align_of::<logic_error>(),
                8usize,
                concat!("Alignment of ", stringify!(logic_error))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<logic_error>()))._M_msg as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(logic_error),
                    "::",
                    stringify!(_M_msg)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}logic_error"]
            pub fn logic_error_logic_error(
                this: *mut self::std::logic_error,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}logic_error"]
            pub fn logic_error_logic_error1(this: *mut self::std::logic_error, arg1: *const c_char);
        }
        extern "C" {
            #[link_name = "\u{1}logic_error"]
            pub fn logic_error_logic_error2(
                this: *mut self::std::logic_error,
                arg1: *const self::std::logic_error,
            );
        }
        impl Default for logic_error {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for logic_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "logic_error {{ _M_msg: {:?} }}", self._M_msg)
            }
        }
        impl logic_error {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                logic_error_logic_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                logic_error_logic_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const self::std::logic_error) -> Self {
                let mut __bindgen_tmp = uninitialized();
                logic_error_logic_error2(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}logic_error_destructor"]
            pub fn logic_error_logic_error_destructor(this: *mut self::std::logic_error);
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn logic_error_what(this: *mut c_void) -> *const c_char;
        }
        #[repr(C)]
        pub struct domain_error {
            pub _base: self::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_domain_error() {
            assert_eq!(
                size_of::<domain_error>(),
                16usize,
                concat!("Size of: ", stringify!(domain_error))
            );
            assert_eq!(
                align_of::<domain_error>(),
                8usize,
                concat!("Alignment of ", stringify!(domain_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}domain_error"]
            pub fn domain_error_domain_error(
                this: *mut self::std::domain_error,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}domain_error"]
            pub fn domain_error_domain_error1(
                this: *mut self::std::domain_error,
                arg1: *const c_char,
            );
        }
        impl Default for domain_error {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for domain_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "domain_error {{  }}")
            }
        }
        impl domain_error {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                domain_error_domain_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                domain_error_domain_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}domain_error_destructor"]
            pub fn domain_error_domain_error_destructor(this: *mut self::std::domain_error);
        }
        #[repr(C)]
        pub struct invalid_argument {
            pub _base: self::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_invalid_argument() {
            assert_eq!(
                size_of::<invalid_argument>(),
                16usize,
                concat!("Size of: ", stringify!(invalid_argument))
            );
            assert_eq!(
                align_of::<invalid_argument>(),
                8usize,
                concat!("Alignment of ", stringify!(invalid_argument))
            );
        }
        extern "C" {
            #[link_name = "\u{1}invalid_argument"]
            pub fn invalid_argument_invalid_argument(
                this: *mut self::std::invalid_argument,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}invalid_argument"]
            pub fn invalid_argument_invalid_argument1(
                this: *mut self::std::invalid_argument,
                arg1: *const c_char,
            );
        }
        impl Default for invalid_argument {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for invalid_argument {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "invalid_argument {{  }}")
            }
        }
        impl invalid_argument {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                invalid_argument_invalid_argument(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                invalid_argument_invalid_argument1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}invalid_argument_destructor"]
            pub fn invalid_argument_invalid_argument_destructor(
                this: *mut self::std::invalid_argument,
            );
        }
        #[repr(C)]
        pub struct length_error {
            pub _base: self::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_length_error() {
            assert_eq!(
                size_of::<length_error>(),
                16usize,
                concat!("Size of: ", stringify!(length_error))
            );
            assert_eq!(
                align_of::<length_error>(),
                8usize,
                concat!("Alignment of ", stringify!(length_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}length_error"]
            pub fn length_error_length_error(
                this: *mut self::std::length_error,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}length_error"]
            pub fn length_error_length_error1(
                this: *mut self::std::length_error,
                arg1: *const c_char,
            );
        }
        impl Default for length_error {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for length_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "length_error {{  }}")
            }
        }
        impl length_error {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                length_error_length_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                length_error_length_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}length_error_destructor"]
            pub fn length_error_length_error_destructor(this: *mut self::std::length_error);
        }
        #[repr(C)]
        pub struct out_of_range {
            pub _base: self::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_out_of_range() {
            assert_eq!(
                size_of::<out_of_range>(),
                16usize,
                concat!("Size of: ", stringify!(out_of_range))
            );
            assert_eq!(
                align_of::<out_of_range>(),
                8usize,
                concat!("Alignment of ", stringify!(out_of_range))
            );
        }
        extern "C" {
            #[link_name = "\u{1}out_of_range"]
            pub fn out_of_range_out_of_range(
                this: *mut self::std::out_of_range,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}out_of_range"]
            pub fn out_of_range_out_of_range1(
                this: *mut self::std::out_of_range,
                arg1: *const c_char,
            );
        }
        impl Default for out_of_range {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for out_of_range {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "out_of_range {{  }}")
            }
        }
        impl out_of_range {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                out_of_range_out_of_range(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                out_of_range_out_of_range1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}out_of_range_destructor"]
            pub fn out_of_range_out_of_range_destructor(this: *mut self::std::out_of_range);
        }
        #[repr(C)]
        pub struct runtime_error {
            pub _base: self::std::exception,
            pub _M_msg: self::std::__cow_string,
        }
        #[test]
        fn bindgen_test_layout_runtime_error() {
            assert_eq!(
                size_of::<runtime_error>(),
                16usize,
                concat!("Size of: ", stringify!(runtime_error))
            );
            assert_eq!(
                align_of::<runtime_error>(),
                8usize,
                concat!("Alignment of ", stringify!(runtime_error))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<runtime_error>()))._M_msg as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(runtime_error),
                    "::",
                    stringify!(_M_msg)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}runtime_error"]
            pub fn runtime_error_runtime_error(
                this: *mut self::std::runtime_error,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}runtime_error"]
            pub fn runtime_error_runtime_error1(
                this: *mut self::std::runtime_error,
                arg1: *const c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}runtime_error"]
            pub fn runtime_error_runtime_error2(
                this: *mut self::std::runtime_error,
                arg1: *const self::std::runtime_error,
            );
        }
        impl Default for runtime_error {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for runtime_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "runtime_error {{ _M_msg: {:?} }}", self._M_msg)
            }
        }
        impl runtime_error {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                runtime_error_runtime_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                runtime_error_runtime_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const self::std::runtime_error) -> Self {
                let mut __bindgen_tmp = uninitialized();
                runtime_error_runtime_error2(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}runtime_error_destructor"]
            pub fn runtime_error_runtime_error_destructor(this: *mut self::std::runtime_error);
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn runtime_error_what(this: *mut c_void) -> *const c_char;
        }
        #[repr(C)]
        pub struct range_error {
            pub _base: self::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_range_error() {
            assert_eq!(
                size_of::<range_error>(),
                16usize,
                concat!("Size of: ", stringify!(range_error))
            );
            assert_eq!(
                align_of::<range_error>(),
                8usize,
                concat!("Alignment of ", stringify!(range_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}range_error"]
            pub fn range_error_range_error(
                this: *mut self::std::range_error,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}range_error"]
            pub fn range_error_range_error1(this: *mut self::std::range_error, arg1: *const c_char);
        }
        impl Default for range_error {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for range_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "range_error {{  }}")
            }
        }
        impl range_error {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                range_error_range_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                range_error_range_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}range_error_destructor"]
            pub fn range_error_range_error_destructor(this: *mut self::std::range_error);
        }
        #[repr(C)]
        pub struct overflow_error {
            pub _base: self::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_overflow_error() {
            assert_eq!(
                size_of::<overflow_error>(),
                16usize,
                concat!("Size of: ", stringify!(overflow_error))
            );
            assert_eq!(
                align_of::<overflow_error>(),
                8usize,
                concat!("Alignment of ", stringify!(overflow_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}overflow_error"]
            pub fn overflow_error_overflow_error(
                this: *mut self::std::overflow_error,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}overflow_error"]
            pub fn overflow_error_overflow_error1(
                this: *mut self::std::overflow_error,
                arg1: *const c_char,
            );
        }
        impl Default for overflow_error {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for overflow_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "overflow_error {{  }}")
            }
        }
        impl overflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                overflow_error_overflow_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                overflow_error_overflow_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}overflow_error_destructor"]
            pub fn overflow_error_overflow_error_destructor(this: *mut self::std::overflow_error);
        }
        #[repr(C)]
        pub struct underflow_error {
            pub _base: self::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_underflow_error() {
            assert_eq!(
                size_of::<underflow_error>(),
                16usize,
                concat!("Size of: ", stringify!(underflow_error))
            );
            assert_eq!(
                align_of::<underflow_error>(),
                8usize,
                concat!("Alignment of ", stringify!(underflow_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}underflow_error"]
            pub fn underflow_error_underflow_error(
                this: *mut self::std::underflow_error,
                __arg: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}underflow_error"]
            pub fn underflow_error_underflow_error1(
                this: *mut self::std::underflow_error,
                arg1: *const c_char,
            );
        }
        impl Default for underflow_error {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for underflow_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "underflow_error {{  }}")
            }
        }
        impl underflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                underflow_error_underflow_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                underflow_error_underflow_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}underflow_error_destructor"]
            pub fn underflow_error_underflow_error_destructor(
                this: *mut self::std::underflow_error,
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Enable_default_constructor_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Enable_default_constructor_tag() {
            assert_eq!(
                size_of::<_Enable_default_constructor_tag>(),
                1usize,
                concat!("Size of: ", stringify!(_Enable_default_constructor_tag))
            );
            assert_eq!(
                align_of::<_Enable_default_constructor_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(_Enable_default_constructor_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct nullopt_t {
            pub _address: u8,
        }
        pub const nullopt_t__Construct__Token: self::std::nullopt_t__Construct = 0;
        pub type nullopt_t__Construct = i32;
        #[test]
        fn bindgen_test_layout_nullopt_t() {
            assert_eq!(
                size_of::<nullopt_t>(),
                1usize,
                concat!("Size of: ", stringify!(nullopt_t))
            );
            assert_eq!(
                align_of::<nullopt_t>(),
                1usize,
                concat!("Alignment of ", stringify!(nullopt_t))
            );
        }
        extern "C" {
            pub static nullopt: self::std::nullopt_t;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_optional_access {
            pub _base: self::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_optional_access() {
            assert_eq!(
                size_of::<bad_optional_access>(),
                8usize,
                concat!("Size of: ", stringify!(bad_optional_access))
            );
            assert_eq!(
                align_of::<bad_optional_access>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_optional_access))
            );
        }
        impl Default for bad_optional_access {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            pub fn __throw_bad_optional_access();
        }
        pub type _Optional_payload__Stored_type = self::std::remove_const_t;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Optional_payload__Empty_byte {
            pub _address: u8,
        }
        #[repr(C)]
        pub union _Optional_payload__bindgen_ty_1 {
            pub _M_empty: self::std::_Optional_payload__Empty_byte,
            pub _M_payload: self::std::_Optional_payload__Stored_type,
            _bindgen_union_align: [u8; 0usize],
        }
        impl Default for _Optional_payload__bindgen_ty_1 {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Optional_payload__bindgen_ty_1 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Optional_payload__bindgen_ty_1 {{ union }}")
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Optional_base_impl {
            pub _address: u8,
        }
        pub type _Optional_base_impl__Stored_type = self::std::remove_const_t;
        pub type __converts_from_optional = self::std::__or_;
        pub type __assigns_from_optional = self::std::__or_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct optional {
            pub _address: u8,
        }
        pub type optional__Base = u8;
        pub type optional_value_type<_Tp> = _Tp;
        pub type __optional_relop_t = self::std::enable_if_t;
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Node_handle_common {
            pub _M_ptr: self::std::_Node_handle_common__AllocTraits,
            pub _M_alloc: self::std::optional,
        }
        pub type _Node_handle_common__AllocTraits = self::std::allocator_traits;
        pub type _Node_handle_common_allocator_type = self::std::__alloc_rebind;
        impl Default for _Node_handle_common {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Node_handle {
            pub _base: self::std::_Node_handle_common,
            pub _M_pkey: self::std::_Node_handle___pointer,
            pub _M_pmapped: self::std::_Node_handle___pointer,
        }
        pub type _Node_handle_key_type<_Key> = _Key;
        pub type _Node_handle_mapped_type = [u8; 0usize];
        pub type _Node_handle__AllocTraits = self::std::allocator_traits;
        pub type _Node_handle___pointer = self::std::__ptr_rebind;
        impl Default for _Node_handle {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Node_insert_return<_Iterator, _NodeHandle> {
            pub position: _Iterator,
            pub inserted: bool,
            pub node: _NodeHandle,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeHandle>>,
        }
        impl<_Iterator, _NodeHandle> Default for _Node_insert_return<_Iterator, _NodeHandle> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub const _Rb_tree_color__S_red: self::std::_Rb_tree_color = 0;
        pub const _Rb_tree_color__S_black: self::std::_Rb_tree_color = 1;
        pub type _Rb_tree_color = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_node_base {
            pub _M_color: self::std::_Rb_tree_color,
            pub _M_parent: self::std::_Rb_tree_node_base__Base_ptr,
            pub _M_left: self::std::_Rb_tree_node_base__Base_ptr,
            pub _M_right: self::std::_Rb_tree_node_base__Base_ptr,
        }
        pub type _Rb_tree_node_base__Base_ptr = *mut self::std::_Rb_tree_node_base;
        pub type _Rb_tree_node_base__Const_Base_ptr = *const self::std::_Rb_tree_node_base;
        #[test]
        fn bindgen_test_layout__Rb_tree_node_base() {
            assert_eq!(
                size_of::<_Rb_tree_node_base>(),
                32usize,
                concat!("Size of: ", stringify!(_Rb_tree_node_base))
            );
            assert_eq!(
                align_of::<_Rb_tree_node_base>(),
                8usize,
                concat!("Alignment of ", stringify!(_Rb_tree_node_base))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_color as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_color)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_parent as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_parent)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_left as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_left)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_right as *const _ as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_right)
                )
            );
        }
        impl Default for _Rb_tree_node_base {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_key_compare<_Key_compare> {
            pub _M_key_compare: _Key_compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key_compare>>,
        }
        impl<_Key_compare> Default for _Rb_tree_key_compare<_Key_compare> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_header {
            pub _M_header: self::std::_Rb_tree_node_base,
            pub _M_node_count: usize,
        }
        #[test]
        fn bindgen_test_layout__Rb_tree_header() {
            assert_eq!(
                size_of::<_Rb_tree_header>(),
                40usize,
                concat!("Size of: ", stringify!(_Rb_tree_header))
            );
            assert_eq!(
                align_of::<_Rb_tree_header>(),
                8usize,
                concat!("Alignment of ", stringify!(_Rb_tree_header))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_header>()))._M_header as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_header),
                    "::",
                    stringify!(_M_header)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_header>()))._M_node_count as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_header),
                    "::",
                    stringify!(_M_node_count)
                )
            );
        }
        impl Default for _Rb_tree_header {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_node {
            pub _base: self::std::_Rb_tree_node_base,
            pub _M_storage: self::__gnu_cxx::__aligned_membuf,
        }
        pub type _Rb_tree_node__Link_type = *mut self::std::_Rb_tree_node;
        impl Default for _Rb_tree_node {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            pub fn _Rb_tree_increment(
                __x: *mut self::std::_Rb_tree_node_base,
            ) -> *mut self::std::_Rb_tree_node_base;
        }
        extern "C" {
            pub fn _Rb_tree_decrement(
                __x: *mut self::std::_Rb_tree_node_base,
            ) -> *mut self::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_iterator {
            pub _M_node: self::std::_Rb_tree_iterator__Base_ptr,
        }
        pub type _Rb_tree_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_iterator_reference<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_iterator_category = self::std::bidirectional_iterator_tag;
        pub type _Rb_tree_iterator_difference_type = isize;
        pub type _Rb_tree_iterator__Self = self::std::_Rb_tree_iterator;
        pub type _Rb_tree_iterator__Base_ptr = self::std::_Rb_tree_node_base__Base_ptr;
        pub type _Rb_tree_iterator__Link_type = *mut self::std::_Rb_tree_node;
        impl Default for _Rb_tree_iterator {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_const_iterator {
            pub _M_node: self::std::_Rb_tree_const_iterator__Base_ptr,
        }
        pub type _Rb_tree_const_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_iterator = self::std::_Rb_tree_iterator;
        pub type _Rb_tree_const_iterator_iterator_category = self::std::bidirectional_iterator_tag;
        pub type _Rb_tree_const_iterator_difference_type = isize;
        pub type _Rb_tree_const_iterator__Self = self::std::_Rb_tree_const_iterator;
        pub type _Rb_tree_const_iterator__Base_ptr = self::std::_Rb_tree_node_base__Const_Base_ptr;
        pub type _Rb_tree_const_iterator__Link_type = *const self::std::_Rb_tree_node;
        impl Default for _Rb_tree_const_iterator {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            pub fn _Rb_tree_insert_and_rebalance(
                __insert_left: bool,
                __x: *mut self::std::_Rb_tree_node_base,
                __p: *mut self::std::_Rb_tree_node_base,
                __header: *mut self::std::_Rb_tree_node_base,
            );
        }
        extern "C" {
            pub fn _Rb_tree_rebalance_for_erase(
                __z: *mut self::std::_Rb_tree_node_base,
                __header: *mut self::std::_Rb_tree_node_base,
            ) -> *mut self::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __has_is_transparent {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_merge_helper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree {
            pub _M_impl: u8,
        }
        pub type _Rb_tree__Node_allocator = [u8; 0usize];
        pub type _Rb_tree__Alloc_traits = self::__gnu_cxx::__alloc_traits;
        pub type _Rb_tree__Base_ptr = *mut self::std::_Rb_tree_node_base;
        pub type _Rb_tree__Const_Base_ptr = *const self::std::_Rb_tree_node_base;
        pub type _Rb_tree__Link_type = *mut self::std::_Rb_tree_node;
        pub type _Rb_tree__Const_Link_type = *const self::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree__Reuse_or_alloc_node {
            pub _M_root: self::std::_Rb_tree__Base_ptr,
            pub _M_nodes: self::std::_Rb_tree__Base_ptr,
            pub _M_t: *mut self::std::_Rb_tree,
        }
        impl Default for _Rb_tree__Reuse_or_alloc_node {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree__Alloc_node {
            pub _M_t: *mut self::std::_Rb_tree,
        }
        impl Default for _Rb_tree__Alloc_node {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type _Rb_tree_key_type<_Key> = _Key;
        pub type _Rb_tree_value_type<_Val> = _Val;
        pub type _Rb_tree_pointer<_Val> = *mut self::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_pointer<_Val> = *const self::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_reference<_Val> = *mut self::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_reference<_Val> = *const self::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_size_type = usize;
        pub type _Rb_tree_difference_type = isize;
        pub type _Rb_tree_allocator_type<_Alloc> = _Alloc;
        pub type _Rb_tree_reverse_iterator =
            self::std::reverse_iterator<root::std::_Rb_tree_iterator>;
        pub type _Rb_tree_const_reverse_iterator =
            self::std::reverse_iterator<root::std::_Rb_tree_const_iterator>;
        pub type _Rb_tree_node_type = self::std::_Node_handle;
        pub type _Rb_tree_insert_return_type =
            self::std::_Node_insert_return<_Iterator, _NodeHandle>;
        pub type _Rb_tree__Compatible_tree = self::std::_Rb_tree;
        pub type _Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> =
            self::std::_Rb_tree_key_compare<_Key_compare>;
        extern "C" {
            pub fn _Rb_tree_black_count(
                __node: *const self::std::_Rb_tree_node_base,
                __root: *const self::std::_Rb_tree_node_base,
            ) -> c_uint;
        }
        pub type __array_traits__Type<_Tp> = *mut _Tp;
        pub type __array_traits__Is_swappable = self::std::__is_swappable;
        pub type __array_traits__Is_nothrow_swappable = self::std::__is_nothrow_swappable;
        pub type array_value_type<_Tp> = _Tp;
        pub type array_pointer<_Tp> = *mut self::std::array_value_type<_Tp>;
        pub type array_const_pointer<_Tp> = *const self::std::array_value_type<_Tp>;
        pub type array_reference<_Tp> = *mut self::std::array_value_type<_Tp>;
        pub type array_const_reference<_Tp> = *const self::std::array_value_type<_Tp>;
        pub type array_iterator<_Tp> = *mut self::std::array_value_type<_Tp>;
        pub type array_const_iterator<_Tp> = *const self::std::array_value_type<_Tp>;
        pub type array_size_type = usize;
        pub type array_difference_type = isize;
        pub type array_reverse_iterator<_Tp> =
            self::std::reverse_iterator<root::std::array_iterator<_Tp>>;
        pub type array_const_reverse_iterator<_Tp> =
            self::std::reverse_iterator<root::std::array_const_iterator<_Tp>>;
        pub type array__AT_Type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __erased_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___erased_type() {
            assert_eq!(
                size_of::<__erased_type>(),
                1usize,
                concat!("Size of: ", stringify!(__erased_type))
            );
            assert_eq!(
                align_of::<__erased_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__erased_type))
            );
        }
        pub type __is_erased_or_convertible = self::std::__or_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_arg_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_allocator_arg_t() {
            assert_eq!(
                size_of::<allocator_arg_t>(),
                1usize,
                concat!("Size of: ", stringify!(allocator_arg_t))
            );
            assert_eq!(
                align_of::<allocator_arg_t>(),
                1usize,
                concat!("Alignment of ", stringify!(allocator_arg_t))
            );
        }
        extern "C" {
            pub static allocator_arg: self::std::allocator_arg_t;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_allocator_helper {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct uses_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc_base {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___uses_alloc_base() {
            assert_eq!(
                size_of::<__uses_alloc_base>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc_base))
            );
            assert_eq!(
                align_of::<__uses_alloc_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc_base))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc0 {
            pub _M_a: self::std::__uses_alloc0__Sink,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc0__Sink {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___uses_alloc0__Sink() {
            assert_eq!(
                size_of::<__uses_alloc0__Sink>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc0__Sink))
            );
            assert_eq!(
                align_of::<__uses_alloc0__Sink>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc0__Sink))
            );
        }
        #[test]
        fn bindgen_test_layout___uses_alloc0() {
            assert_eq!(
                size_of::<__uses_alloc0>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc0))
            );
            assert_eq!(
                align_of::<__uses_alloc0>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc0))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<__uses_alloc0>()))._M_a as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__uses_alloc0),
                    "::",
                    stringify!(_M_a)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc1<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        impl<_Alloc> Default for __uses_alloc1<_Alloc> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc2<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        impl<_Alloc> Default for __uses_alloc2<_Alloc> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type __uses_alloc_t = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_uses_allocator_predicate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_empty_non_tuple {
            pub _address: u8,
        }
        impl Default for __is_empty_non_tuple {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type __empty_not_final = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct tuple {
            pub _address: u8,
        }
        pub type tuple__Inherited = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct tuple__TC2 {
            pub _address: u8,
        }
        pub type tuple__TCC = u8;
        pub type tuple__TMC = u8;
        pub type tuple__TMCT = u8;
        pub type tuple__TNTC = u8;
        #[test]
        fn __bindgen_test_layout_tuple_open0_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::tuple>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::tuple)
                )
            );
            assert_eq!(
                align_of::<root::std::tuple>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::tuple)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __combine_tuples {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___combine_tuples_open0_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__combine_tuples>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__combine_tuples)
                )
            );
            assert_eq!(
                align_of::<root::std::__combine_tuples>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__combine_tuples)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __tuple_cat_result {
            pub _address: u8,
        }
        pub type __tuple_cat_result___type = self::std::__combine_tuples;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __make_1st_indices {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___make_1st_indices_open0_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__make_1st_indices>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_1st_indices)
                )
            );
            assert_eq!(
                align_of::<root::std::__make_1st_indices>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_1st_indices)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __tuple_concater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Swallow_assign {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Swallow_assign() {
            assert_eq!(
                size_of::<_Swallow_assign>(),
                1usize,
                concat!("Size of: ", stringify!(_Swallow_assign))
            );
            assert_eq!(
                align_of::<_Swallow_assign>(),
                1usize,
                concat!("Alignment of ", stringify!(_Swallow_assign))
            );
        }
        extern "C" {
            pub static ignore: self::std::_Swallow_assign;
        }
        #[repr(C)]
        pub struct map {
            pub _M_t: self::std::map__Rep_type,
        }
        pub type map_key_type<_Key> = _Key;
        pub type map_mapped_type<_Tp> = _Tp;
        pub type map_value_type<_Key, _Tp> = self::std::pair<_Key, _Tp>;
        pub type map_key_compare<_Compare> = _Compare;
        pub type map_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct map_value_compare<_Compare> {
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for map_value_compare<_Compare> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type map__Pair_alloc_type = [u8; 0usize];
        pub type map__Rep_type = self::std::_Rb_tree;
        pub type map__Alloc_traits = self::__gnu_cxx::__alloc_traits;
        pub type map_pointer = [u8; 0usize];
        pub type map_const_pointer = [u8; 0usize];
        pub type map_reference = [u8; 0usize];
        pub type map_const_reference = [u8; 0usize];
        pub type map_iterator = [u8; 0usize];
        pub type map_const_iterator = [u8; 0usize];
        pub type map_size_type = [u8; 0usize];
        pub type map_difference_type = [u8; 0usize];
        pub type map_reverse_iterator = [u8; 0usize];
        pub type map_const_reverse_iterator = [u8; 0usize];
        pub type map_node_type = [u8; 0usize];
        pub type map_insert_return_type = [u8; 0usize];
        impl Default for map {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for map {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "map {{ _M_t: {:?} }}", self._M_t)
            }
        }
        impl PartialEq for map {
            fn eq(&self, other: &map) -> bool {
                self._M_t == other._M_t
            }
        }
        #[repr(C)]
        pub struct multimap {
            pub _M_t: self::std::multimap__Rep_type,
        }
        pub type multimap_key_type<_Key> = _Key;
        pub type multimap_mapped_type<_Tp> = _Tp;
        pub type multimap_value_type<_Key, _Tp> = self::std::pair<_Key, _Tp>;
        pub type multimap_key_compare<_Compare> = _Compare;
        pub type multimap_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct multimap_value_compare<_Compare> {
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for multimap_value_compare<_Compare> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type multimap__Pair_alloc_type = [u8; 0usize];
        pub type multimap__Rep_type = self::std::_Rb_tree;
        pub type multimap__Alloc_traits = self::__gnu_cxx::__alloc_traits;
        pub type multimap_pointer = [u8; 0usize];
        pub type multimap_const_pointer = [u8; 0usize];
        pub type multimap_reference = [u8; 0usize];
        pub type multimap_const_reference = [u8; 0usize];
        pub type multimap_iterator = [u8; 0usize];
        pub type multimap_const_iterator = [u8; 0usize];
        pub type multimap_size_type = [u8; 0usize];
        pub type multimap_difference_type = [u8; 0usize];
        pub type multimap_reverse_iterator = [u8; 0usize];
        pub type multimap_const_reverse_iterator = [u8; 0usize];
        pub type multimap_node_type = [u8; 0usize];
        impl Default for multimap {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for multimap {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "multimap {{ _M_t: {:?} }}", self._M_t)
            }
        }
        impl PartialEq for multimap {
            fn eq(&self, other: &multimap) -> bool {
                self._M_t == other._M_t
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Deque_iterator {
            pub _M_cur: self::std::_Deque_iterator__Elt_pointer,
            pub _M_first: self::std::_Deque_iterator__Elt_pointer,
            pub _M_last: self::std::_Deque_iterator__Elt_pointer,
            pub _M_node: self::std::_Deque_iterator__Map_pointer,
        }
        pub type _Deque_iterator___ptr_to = self::std::pointer_traits;
        pub type _Deque_iterator___iter = self::std::_Deque_iterator;
        pub type _Deque_iterator_iterator = self::std::_Deque_iterator___iter;
        pub type _Deque_iterator_const_iterator = self::std::_Deque_iterator___iter;
        pub type _Deque_iterator__Elt_pointer = self::std::_Deque_iterator___ptr_to;
        pub type _Deque_iterator__Map_pointer = self::std::_Deque_iterator___ptr_to;
        pub type _Deque_iterator_iterator_category = self::std::random_access_iterator_tag;
        pub type _Deque_iterator_value_type<_Tp> = _Tp;
        pub type _Deque_iterator_pointer<_Ptr> = _Ptr;
        pub type _Deque_iterator_reference<_Ref> = _Ref;
        pub type _Deque_iterator_size_type = usize;
        pub type _Deque_iterator_difference_type = isize;
        pub type _Deque_iterator__Self = self::std::_Deque_iterator;
        impl Default for _Deque_iterator {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        pub struct _Deque_base {
            pub _M_impl: self::std::_Deque_base__Deque_impl,
        }
        pub type _Deque_base__Tp_alloc_type = [u8; 0usize];
        pub type _Deque_base__Alloc_traits = self::__gnu_cxx::__alloc_traits;
        pub type _Deque_base__Ptr = [u8; 0usize];
        pub type _Deque_base__Ptr_const = [u8; 0usize];
        pub type _Deque_base__Map_alloc_type = [u8; 0usize];
        pub type _Deque_base__Map_alloc_traits = self::__gnu_cxx::__alloc_traits;
        pub type _Deque_base_allocator_type<_Alloc> = _Alloc;
        pub type _Deque_base_size_type = [u8; 0usize];
        pub type _Deque_base_iterator = self::std::_Deque_iterator;
        pub type _Deque_base_const_iterator = self::std::_Deque_iterator;
        pub type _Deque_base__Map_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Deque_base__Deque_impl {
            pub _M_map: self::std::_Deque_base__Map_pointer,
            pub _M_map_size: usize,
            pub _M_start: self::std::_Deque_base_iterator,
            pub _M_finish: self::std::_Deque_base_iterator,
        }
        impl Default for _Deque_base__Deque_impl {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Deque_base__Deque_impl {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write ! ( f , "_Deque_base__Deque_impl {{ _M_map_size: {:?}, _M_start: {:?}, _M_finish: {:?} }}" , self . _M_map_size , self . _M_start , self . _M_finish )
            }
        }
        impl PartialEq for _Deque_base__Deque_impl {
            fn eq(&self, other: &_Deque_base__Deque_impl) -> bool {
                self._M_map == other._M_map
                    && self._M_map_size == other._M_map_size
                    && self._M_start == other._M_start
                    && self._M_finish == other._M_finish
            }
        }
        pub const _Deque_base__S_initial_map_size: self::std::_Deque_base__bindgen_ty_1 = 0;
        pub type _Deque_base__bindgen_ty_1 = i32;
        impl Default for _Deque_base {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Deque_base {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Deque_base {{ _M_impl: {:?} }}", self._M_impl)
            }
        }
        impl PartialEq for _Deque_base {
            fn eq(&self, other: &_Deque_base) -> bool {
                self._M_impl == other._M_impl
            }
        }
        #[repr(C)]
        pub struct deque {
            pub _base: self::std::_Deque_base,
        }
        pub type deque__Base = self::std::_Deque_base;
        pub type deque__Tp_alloc_type = self::std::deque__Base;
        pub type deque__Alloc_traits = self::std::deque__Base;
        pub type deque__Map_pointer = self::std::deque__Base;
        pub type deque_value_type<_Tp> = _Tp;
        pub type deque_pointer = self::std::deque__Alloc_traits;
        pub type deque_const_pointer = self::std::deque__Alloc_traits;
        pub type deque_reference = self::std::deque__Alloc_traits;
        pub type deque_const_reference = self::std::deque__Alloc_traits;
        pub type deque_iterator = self::std::deque__Base;
        pub type deque_const_iterator = self::std::deque__Base;
        pub type deque_const_reverse_iterator =
            self::std::reverse_iterator<root::std::deque_const_iterator>;
        pub type deque_reverse_iterator = self::std::reverse_iterator<root::std::deque_iterator>;
        pub type deque_size_type = usize;
        pub type deque_difference_type = isize;
        pub type deque_allocator_type<_Alloc> = _Alloc;
        impl Default for deque {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for deque {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "deque {{  }}")
            }
        }
        impl PartialEq for deque {
            fn eq(&self, other: &deque) -> bool {
                self._base == other._base
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct queue<_Sequence> {
            pub c: _Sequence,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
        }
        pub type queue__Uses = u8;
        pub type queue_value_type = [u8; 0usize];
        pub type queue_reference = [u8; 0usize];
        pub type queue_const_reference = [u8; 0usize];
        pub type queue_size_type = [u8; 0usize];
        pub type queue_container_type<_Sequence> = _Sequence;
        impl<_Sequence> Default for queue<_Sequence> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct priority_queue<_Sequence, _Compare> {
            pub c: _Sequence,
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        pub type priority_queue__Uses = u8;
        pub type priority_queue_value_type = [u8; 0usize];
        pub type priority_queue_reference = [u8; 0usize];
        pub type priority_queue_const_reference = [u8; 0usize];
        pub type priority_queue_size_type = [u8; 0usize];
        pub type priority_queue_container_type<_Sequence> = _Sequence;
        pub type priority_queue_value_compare<_Compare> = _Compare;
        impl<_Sequence, _Compare> Default for priority_queue<_Sequence, _Compare> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct locale {
            pub _M_impl: *mut self::std::locale__Impl,
        }
        pub type locale_category = c_int;
        pub const locale__S_categories_size: self::std::locale__bindgen_ty_1 = 12;
        pub type locale__bindgen_ty_1 = u32;
        pub const locale_none: self::std::locale_category = 0;
        pub const locale_ctype: self::std::locale_category = 1;
        pub const locale_numeric: self::std::locale_category = 2;
        pub const locale_collate: self::std::locale_category = 4;
        pub const locale_time: self::std::locale_category = 8;
        pub const locale_monetary: self::std::locale_category = 16;
        pub const locale_messages: self::std::locale_category = 32;
        pub const locale_all: self::std::locale_category = 63;
        extern "C" {
            #[link_name = "\u{1}_S_classic"]
            pub static mut locale__S_classic: *mut self::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "\u{1}_S_global"]
            pub static mut locale__S_global: *mut self::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "\u{1}_S_categories"]
            pub static locale__S_categories: *const *const c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_S_once"]
            pub static mut locale__S_once: self::__gthread_once_t;
        }
        extern "C" {
            #[link_name = "\u{1}_S_twinned_facets"]
            pub static mut locale__S_twinned_facets: [*const self::std::locale_id; 0usize];
        }
        #[test]
        fn bindgen_test_layout_locale() {
            assert_eq!(
                size_of::<locale>(),
                8usize,
                concat!("Size of: ", stringify!(locale))
            );
            assert_eq!(
                align_of::<locale>(),
                8usize,
                concat!("Alignment of ", stringify!(locale))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale>()))._M_impl as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale),
                    "::",
                    stringify!(_M_impl)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}name"]
            pub fn locale_name(this: *const self::std::locale) -> self::std::__cxx11::string;
        }
        extern "C" {
            #[link_name = "\u{1}global"]
            pub fn locale_global(__loc: *const self::std::locale) -> self::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}classic"]
            pub fn locale_classic() -> *const self::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}locale"]
            pub fn locale_locale(this: *mut self::std::locale);
        }
        extern "C" {
            #[link_name = "\u{1}locale"]
            pub fn locale_locale1(this: *mut self::std::locale, __other: *const self::std::locale);
        }
        extern "C" {
            #[link_name = "\u{1}locale"]
            pub fn locale_locale2(this: *mut self::std::locale, __s: *const c_char);
        }
        extern "C" {
            #[link_name = "\u{1}locale"]
            pub fn locale_locale3(
                this: *mut self::std::locale,
                __base: *const self::std::locale,
                __s: *const c_char,
                __cat: self::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}locale"]
            pub fn locale_locale4(
                this: *mut self::std::locale,
                __base: *const self::std::locale,
                __add: *const self::std::locale,
                __cat: self::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}locale_destructor"]
            pub fn locale_locale_destructor(this: *mut self::std::locale);
        }
        impl Default for locale {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl locale {
            #[inline]
            pub unsafe fn name(&self) -> self::std::__cxx11::string {
                locale_name(self)
            }
            #[inline]
            pub unsafe fn global(__loc: *const self::std::locale) -> self::std::locale {
                locale_global(__loc)
            }
            #[inline]
            pub unsafe fn classic() -> *const self::std::locale {
                locale_classic()
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = uninitialized();
                locale_locale(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(__other: *const self::std::locale) -> Self {
                let mut __bindgen_tmp = uninitialized();
                locale_locale1(&mut __bindgen_tmp, __other);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(__s: *const c_char) -> Self {
                let mut __bindgen_tmp = uninitialized();
                locale_locale2(&mut __bindgen_tmp, __s);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new3(
                __base: *const self::std::locale,
                __s: *const c_char,
                __cat: self::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = uninitialized();
                locale_locale3(&mut __bindgen_tmp, __base, __s, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new4(
                __base: *const self::std::locale,
                __add: *const self::std::locale,
                __cat: self::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = uninitialized();
                locale_locale4(&mut __bindgen_tmp, __base, __add, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                locale_locale_destructor(self)
            }
        }
        #[repr(C)]
        pub struct locale_facet__bindgen_vtable(c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct locale_facet {
            pub vtable_: *const locale_facet__bindgen_vtable,
            pub _M_refcount: self::_Atomic_word,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct locale_facet___shim {
            _unused: [u8; 0],
        }
        extern "C" {
            #[link_name = "\u{1}_S_c_locale"]
            pub static mut locale_facet__S_c_locale: self::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_S_c_name"]
            pub static mut locale_facet__S_c_name: [c_char; 2usize];
        }
        extern "C" {
            #[link_name = "\u{1}_S_once"]
            pub static mut locale_facet__S_once: self::__gthread_once_t;
        }
        #[test]
        fn bindgen_test_layout_locale_facet() {
            assert_eq!(
                size_of::<locale_facet>(),
                16usize,
                concat!("Size of: ", stringify!(locale_facet))
            );
            assert_eq!(
                align_of::<locale_facet>(),
                8usize,
                concat!("Alignment of ", stringify!(locale_facet))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale_facet>()))._M_refcount as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale_facet),
                    "::",
                    stringify!(_M_refcount)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_S_create_c_locale"]
            pub fn locale_facet__S_create_c_locale(
                __cloc: *mut self::std::__c_locale,
                __s: *const c_char,
                __old: self::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_S_clone_c_locale"]
            pub fn locale_facet__S_clone_c_locale(
                __cloc: *mut self::std::__c_locale,
            ) -> self::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_S_destroy_c_locale"]
            pub fn locale_facet__S_destroy_c_locale(__cloc: *mut self::std::__c_locale);
        }
        extern "C" {
            #[link_name = "\u{1}_S_lc_ctype_c_locale"]
            pub fn locale_facet__S_lc_ctype_c_locale(
                __cloc: self::std::__c_locale,
                __s: *const c_char,
            ) -> self::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_S_get_c_locale"]
            pub fn locale_facet__S_get_c_locale() -> self::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_S_get_c_name"]
            pub fn locale_facet__S_get_c_name() -> *const c_char;
        }
        impl Default for locale_facet {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl locale_facet {
            #[inline]
            pub unsafe fn _S_create_c_locale(
                __cloc: *mut self::std::__c_locale,
                __s: *const c_char,
                __old: self::std::__c_locale,
            ) {
                locale_facet__S_create_c_locale(__cloc, __s, __old)
            }
            #[inline]
            pub unsafe fn _S_clone_c_locale(
                __cloc: *mut self::std::__c_locale,
            ) -> self::std::__c_locale {
                locale_facet__S_clone_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_destroy_c_locale(__cloc: *mut self::std::__c_locale) {
                locale_facet__S_destroy_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_lc_ctype_c_locale(
                __cloc: self::std::__c_locale,
                __s: *const c_char,
            ) -> self::std::__c_locale {
                locale_facet__S_lc_ctype_c_locale(__cloc, __s)
            }
            #[inline]
            pub unsafe fn _S_get_c_locale() -> self::std::__c_locale {
                locale_facet__S_get_c_locale()
            }
            #[inline]
            pub unsafe fn _S_get_c_name() -> *const c_char {
                locale_facet__S_get_c_name()
            }
        }
        extern "C" {
            #[link_name = "\u{1}facet_destructor"]
            pub fn locale_facet_facet_destructor(this: *mut self::std::locale_facet);
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct locale_id {
            pub _M_index: usize,
        }
        extern "C" {
            #[link_name = "\u{1}_S_refcount"]
            pub static mut locale_id__S_refcount: self::_Atomic_word;
        }
        #[test]
        fn bindgen_test_layout_locale_id() {
            assert_eq!(
                size_of::<locale_id>(),
                8usize,
                concat!("Size of: ", stringify!(locale_id))
            );
            assert_eq!(
                align_of::<locale_id>(),
                8usize,
                concat!("Alignment of ", stringify!(locale_id))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale_id>()))._M_index as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale_id),
                    "::",
                    stringify!(_M_index)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_M_id"]
            pub fn locale_id__M_id(this: *const self::std::locale_id) -> usize;
        }
        impl locale_id {
            #[inline]
            pub unsafe fn _M_id(&self) -> usize {
                locale_id__M_id(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct locale__Impl {
            pub _M_refcount: self::_Atomic_word,
            pub _M_facets: *mut *const self::std::locale_facet,
            pub _M_facets_size: usize,
            pub _M_caches: *mut *const self::std::locale_facet,
            pub _M_names: *mut *mut c_char,
        }
        extern "C" {
            #[link_name = "\u{1}_S_id_ctype"]
            pub static mut locale__Impl__S_id_ctype: [*const self::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_S_id_numeric"]
            pub static mut locale__Impl__S_id_numeric: [*const self::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_S_id_collate"]
            pub static mut locale__Impl__S_id_collate: [*const self::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_S_id_time"]
            pub static mut locale__Impl__S_id_time: [*const self::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_S_id_monetary"]
            pub static mut locale__Impl__S_id_monetary: [*const self::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_S_id_messages"]
            pub static mut locale__Impl__S_id_messages: [*const self::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_S_facet_categories"]
            pub static mut locale__Impl__S_facet_categories:
                [*const *const self::std::locale_id; 0usize];
        }
        #[test]
        fn bindgen_test_layout_locale__Impl() {
            assert_eq!(
                size_of::<locale__Impl>(),
                40usize,
                concat!("Size of: ", stringify!(locale__Impl))
            );
            assert_eq!(
                align_of::<locale__Impl>(),
                8usize,
                concat!("Alignment of ", stringify!(locale__Impl))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_refcount as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_refcount)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_facets as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_facets)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_facets_size as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_facets_size)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_caches as *const _ as usize },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_caches)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_names as *const _ as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_names)
                )
            );
        }
        impl Default for locale__Impl {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub type collate_char_type<_CharT> = _CharT;
        pub type collate_string_type = self::std::__cxx11::basic_string<_CharT>;
        extern "C" {
            pub static mut id: self::std::locale_id;
        }
        pub type collate_byname_char_type<_CharT> = _CharT;
        pub type collate_byname_string_type = self::std::__cxx11::basic_string<_CharT>;
        #[test]
        fn __bindgen_test_layout_collate_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__cxx11::collate>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::collate)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::collate>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::collate)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_byname_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__cxx11::collate_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::collate_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::collate_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::collate_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__cxx11::collate>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::collate)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::collate>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::collate)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_byname_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__cxx11::collate_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::collate_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::collate_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::collate_byname)
                )
            );
        }
        pub const errc_address_family_not_supported: self::std::errc = 97;
        pub const errc_address_in_use: self::std::errc = 98;
        pub const errc_address_not_available: self::std::errc = 99;
        pub const errc_already_connected: self::std::errc = 106;
        pub const errc_argument_list_too_long: self::std::errc = 7;
        pub const errc_argument_out_of_domain: self::std::errc = 33;
        pub const errc_bad_address: self::std::errc = 14;
        pub const errc_bad_file_descriptor: self::std::errc = 9;
        pub const errc_bad_message: self::std::errc = 74;
        pub const errc_broken_pipe: self::std::errc = 32;
        pub const errc_connection_aborted: self::std::errc = 103;
        pub const errc_connection_already_in_progress: self::std::errc = 114;
        pub const errc_connection_refused: self::std::errc = 111;
        pub const errc_connection_reset: self::std::errc = 104;
        pub const errc_cross_device_link: self::std::errc = 18;
        pub const errc_destination_address_required: self::std::errc = 89;
        pub const errc_device_or_resource_busy: self::std::errc = 16;
        pub const errc_directory_not_empty: self::std::errc = 39;
        pub const errc_executable_format_error: self::std::errc = 8;
        pub const errc_file_exists: self::std::errc = 17;
        pub const errc_file_too_large: self::std::errc = 27;
        pub const errc_filename_too_long: self::std::errc = 36;
        pub const errc_function_not_supported: self::std::errc = 38;
        pub const errc_host_unreachable: self::std::errc = 113;
        pub const errc_identifier_removed: self::std::errc = 43;
        pub const errc_illegal_byte_sequence: self::std::errc = 84;
        pub const errc_inappropriate_io_control_operation: self::std::errc = 25;
        pub const errc_interrupted: self::std::errc = 4;
        pub const errc_invalid_argument: self::std::errc = 22;
        pub const errc_invalid_seek: self::std::errc = 29;
        pub const errc_io_error: self::std::errc = 5;
        pub const errc_is_a_directory: self::std::errc = 21;
        pub const errc_message_size: self::std::errc = 90;
        pub const errc_network_down: self::std::errc = 100;
        pub const errc_network_reset: self::std::errc = 102;
        pub const errc_network_unreachable: self::std::errc = 101;
        pub const errc_no_buffer_space: self::std::errc = 105;
        pub const errc_no_child_process: self::std::errc = 10;
        pub const errc_no_link: self::std::errc = 67;
        pub const errc_no_lock_available: self::std::errc = 37;
        pub const errc_no_message_available: self::std::errc = 61;
        pub const errc_no_message: self::std::errc = 42;
        pub const errc_no_protocol_option: self::std::errc = 92;
        pub const errc_no_space_on_device: self::std::errc = 28;
        pub const errc_no_stream_resources: self::std::errc = 63;
        pub const errc_no_such_device_or_address: self::std::errc = 6;
        pub const errc_no_such_device: self::std::errc = 19;
        pub const errc_no_such_file_or_directory: self::std::errc = 2;
        pub const errc_no_such_process: self::std::errc = 3;
        pub const errc_not_a_directory: self::std::errc = 20;
        pub const errc_not_a_socket: self::std::errc = 88;
        pub const errc_not_a_stream: self::std::errc = 60;
        pub const errc_not_connected: self::std::errc = 107;
        pub const errc_not_enough_memory: self::std::errc = 12;
        pub const errc_not_supported: self::std::errc = 95;
        pub const errc_operation_canceled: self::std::errc = 125;
        pub const errc_operation_in_progress: self::std::errc = 115;
        pub const errc_operation_not_permitted: self::std::errc = 1;
        pub const errc_operation_not_supported: self::std::errc = 95;
        pub const errc_operation_would_block: self::std::errc = 11;
        pub const errc_owner_dead: self::std::errc = 130;
        pub const errc_permission_denied: self::std::errc = 13;
        pub const errc_protocol_error: self::std::errc = 71;
        pub const errc_protocol_not_supported: self::std::errc = 93;
        pub const errc_read_only_file_system: self::std::errc = 30;
        pub const errc_resource_deadlock_would_occur: self::std::errc = 35;
        pub const errc_resource_unavailable_try_again: self::std::errc = 11;
        pub const errc_result_out_of_range: self::std::errc = 34;
        pub const errc_state_not_recoverable: self::std::errc = 131;
        pub const errc_stream_timeout: self::std::errc = 62;
        pub const errc_text_file_busy: self::std::errc = 26;
        pub const errc_timed_out: self::std::errc = 110;
        pub const errc_too_many_files_open_in_system: self::std::errc = 23;
        pub const errc_too_many_files_open: self::std::errc = 24;
        pub const errc_too_many_links: self::std::errc = 31;
        pub const errc_too_many_symbolic_link_levels: self::std::errc = 40;
        pub const errc_value_too_large: self::std::errc = 75;
        pub const errc_wrong_protocol_type: self::std::errc = 91;
        pub type errc = i32;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_error_code_enum {
            pub _base: self::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_error_condition_enum {
            pub _base: self::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout_is_error_condition_enum_open0_errc_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::is_error_condition_enum>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::is_error_condition_enum)
                )
            );
            assert_eq!(
                align_of::<root::std::is_error_condition_enum>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::is_error_condition_enum)
                )
            );
        }
        pub mod _V2 {

            #[repr(C)]
            pub struct error_category__bindgen_vtable(c_void);
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct error_category {
                pub vtable_: *const error_category__bindgen_vtable,
            }
            #[test]
            fn bindgen_test_layout_error_category() {
                assert_eq!(
                    size_of::<error_category>(),
                    8usize,
                    concat!("Size of: ", stringify!(error_category))
                );
                assert_eq!(
                    align_of::<error_category>(),
                    8usize,
                    concat!("Alignment of ", stringify!(error_category))
                );
            }
            impl Default for error_category {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            extern "C" {
                #[link_name = "\u{1}error_category_destructor"]
                pub fn error_category_error_category_destructor(
                    this: *mut self::std::_V2::error_category,
                );
            }
            extern "C" {
                #[link_name = "\u{1}default_error_condition"]
                pub fn error_category_default_error_condition(
                    this: *mut c_void,
                    __i: c_int,
                ) -> self::std::error_condition;
            }
            extern "C" {
                #[link_name = "\u{1}equivalent"]
                pub fn error_category_equivalent(
                    this: *mut c_void,
                    __i: c_int,
                    __cond: *const self::std::error_condition,
                ) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}equivalent"]
                pub fn error_category_equivalent1(
                    this: *mut c_void,
                    __code: *const self::std::error_code,
                    __i: c_int,
                ) -> bool;
            }
            extern "C" {
                pub fn system_category() -> *const self::std::_V2::error_category;
            }
            extern "C" {
                pub fn generic_category() -> *const self::std::_V2::error_category;
            }
        }
        extern "C" {
            pub fn make_error_code(arg1: self::std::errc) -> self::std::error_code;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct error_code {
            pub _M_value: c_int,
            pub _M_cat: *const self::std::_V2::error_category,
        }
        #[test]
        fn bindgen_test_layout_error_code() {
            assert_eq!(
                size_of::<error_code>(),
                16usize,
                concat!("Size of: ", stringify!(error_code))
            );
            assert_eq!(
                align_of::<error_code>(),
                8usize,
                concat!("Alignment of ", stringify!(error_code))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<error_code>()))._M_value as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_code),
                    "::",
                    stringify!(_M_value)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<error_code>()))._M_cat as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_code),
                    "::",
                    stringify!(_M_cat)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}default_error_condition"]
            pub fn error_code_default_error_condition(
                this: *const self::std::error_code,
            ) -> self::std::error_condition;
        }
        impl Default for error_code {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl error_code {
            #[inline]
            pub unsafe fn default_error_condition(&self) -> self::std::error_condition {
                error_code_default_error_condition(self)
            }
        }
        extern "C" {
            pub fn make_error_condition(arg1: self::std::errc) -> self::std::error_condition;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct error_condition {
            pub _M_value: c_int,
            pub _M_cat: *const self::std::_V2::error_category,
        }
        #[test]
        fn bindgen_test_layout_error_condition() {
            assert_eq!(
                size_of::<error_condition>(),
                16usize,
                concat!("Size of: ", stringify!(error_condition))
            );
            assert_eq!(
                align_of::<error_condition>(),
                8usize,
                concat!("Alignment of ", stringify!(error_condition))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<error_condition>()))._M_value as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_condition),
                    "::",
                    stringify!(_M_value)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<error_condition>()))._M_cat as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_condition),
                    "::",
                    stringify!(_M_cat)
                )
            );
        }
        impl Default for error_condition {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        pub struct system_error {
            pub _base: self::std::runtime_error,
            pub _M_code: self::std::error_code,
        }
        #[test]
        fn bindgen_test_layout_system_error() {
            assert_eq!(
                size_of::<system_error>(),
                32usize,
                concat!("Size of: ", stringify!(system_error))
            );
            assert_eq!(
                align_of::<system_error>(),
                8usize,
                concat!("Alignment of ", stringify!(system_error))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<system_error>()))._M_code as *const _ as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(system_error),
                    "::",
                    stringify!(_M_code)
                )
            );
        }
        impl Default for system_error {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for system_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "system_error {{ _M_code: {:?} }}", self._M_code)
            }
        }
        extern "C" {
            #[link_name = "\u{1}system_error_destructor"]
            pub fn system_error_system_error_destructor(this: *mut self::std::system_error);
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_error_code_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_error_condition_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        pub const _Ios_Fmtflags__S_boolalpha: self::std::_Ios_Fmtflags = 1;
        pub const _Ios_Fmtflags__S_dec: self::std::_Ios_Fmtflags = 2;
        pub const _Ios_Fmtflags__S_fixed: self::std::_Ios_Fmtflags = 4;
        pub const _Ios_Fmtflags__S_hex: self::std::_Ios_Fmtflags = 8;
        pub const _Ios_Fmtflags__S_internal: self::std::_Ios_Fmtflags = 16;
        pub const _Ios_Fmtflags__S_left: self::std::_Ios_Fmtflags = 32;
        pub const _Ios_Fmtflags__S_oct: self::std::_Ios_Fmtflags = 64;
        pub const _Ios_Fmtflags__S_right: self::std::_Ios_Fmtflags = 128;
        pub const _Ios_Fmtflags__S_scientific: self::std::_Ios_Fmtflags = 256;
        pub const _Ios_Fmtflags__S_showbase: self::std::_Ios_Fmtflags = 512;
        pub const _Ios_Fmtflags__S_showpoint: self::std::_Ios_Fmtflags = 1024;
        pub const _Ios_Fmtflags__S_showpos: self::std::_Ios_Fmtflags = 2048;
        pub const _Ios_Fmtflags__S_skipws: self::std::_Ios_Fmtflags = 4096;
        pub const _Ios_Fmtflags__S_unitbuf: self::std::_Ios_Fmtflags = 8192;
        pub const _Ios_Fmtflags__S_uppercase: self::std::_Ios_Fmtflags = 16384;
        pub const _Ios_Fmtflags__S_adjustfield: self::std::_Ios_Fmtflags = 176;
        pub const _Ios_Fmtflags__S_basefield: self::std::_Ios_Fmtflags = 74;
        pub const _Ios_Fmtflags__S_floatfield: self::std::_Ios_Fmtflags = 260;
        pub const _Ios_Fmtflags__S_ios_fmtflags_end: self::std::_Ios_Fmtflags = 65536;
        pub const _Ios_Fmtflags__S_ios_fmtflags_max: self::std::_Ios_Fmtflags = 2147483647;
        pub const _Ios_Fmtflags__S_ios_fmtflags_min: self::std::_Ios_Fmtflags = -2147483648;
        pub type _Ios_Fmtflags = i32;
        pub const _Ios_Openmode__S_app: self::std::_Ios_Openmode = 1;
        pub const _Ios_Openmode__S_ate: self::std::_Ios_Openmode = 2;
        pub const _Ios_Openmode__S_bin: self::std::_Ios_Openmode = 4;
        pub const _Ios_Openmode__S_in: self::std::_Ios_Openmode = 8;
        pub const _Ios_Openmode__S_out: self::std::_Ios_Openmode = 16;
        pub const _Ios_Openmode__S_trunc: self::std::_Ios_Openmode = 32;
        pub const _Ios_Openmode__S_ios_openmode_end: self::std::_Ios_Openmode = 65536;
        pub const _Ios_Openmode__S_ios_openmode_max: self::std::_Ios_Openmode = 2147483647;
        pub const _Ios_Openmode__S_ios_openmode_min: self::std::_Ios_Openmode = -2147483648;
        pub type _Ios_Openmode = i32;
        pub const _Ios_Iostate__S_goodbit: self::std::_Ios_Iostate = 0;
        pub const _Ios_Iostate__S_badbit: self::std::_Ios_Iostate = 1;
        pub const _Ios_Iostate__S_eofbit: self::std::_Ios_Iostate = 2;
        pub const _Ios_Iostate__S_failbit: self::std::_Ios_Iostate = 4;
        pub const _Ios_Iostate__S_ios_iostate_end: self::std::_Ios_Iostate = 65536;
        pub const _Ios_Iostate__S_ios_iostate_max: self::std::_Ios_Iostate = 2147483647;
        pub const _Ios_Iostate__S_ios_iostate_min: self::std::_Ios_Iostate = -2147483648;
        pub type _Ios_Iostate = i32;
        pub const _Ios_Seekdir__S_beg: self::std::_Ios_Seekdir = 0;
        pub const _Ios_Seekdir__S_cur: self::std::_Ios_Seekdir = 1;
        pub const _Ios_Seekdir__S_end: self::std::_Ios_Seekdir = 2;
        pub const _Ios_Seekdir__S_ios_seekdir_end: self::std::_Ios_Seekdir = 65536;
        pub type _Ios_Seekdir = u32;
        pub const io_errc_stream: self::std::io_errc = 1;
        pub type io_errc = i32;
        #[test]
        fn __bindgen_test_layout_is_error_code_enum_open0_io_errc_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::is_error_code_enum>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::is_error_code_enum)
                )
            );
            assert_eq!(
                align_of::<root::std::is_error_code_enum>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::is_error_code_enum)
                )
            );
        }
        extern "C" {
            pub fn iostream_category() -> *const self::std::_V2::error_category;
        }
        #[repr(C)]
        pub struct ios_base__bindgen_vtable(c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ios_base {
            pub vtable_: *const ios_base__bindgen_vtable,
            pub _M_precision: self::std::streamsize,
            pub _M_width: self::std::streamsize,
            pub _M_flags: self::std::ios_base_fmtflags,
            pub _M_exception: self::std::ios_base_iostate,
            pub _M_streambuf_state: self::std::ios_base_iostate,
            pub _M_callbacks: *mut self::std::ios_base__Callback_list,
            pub _M_word_zero: self::std::ios_base__Words,
            pub _M_local_word: [self::std::ios_base__Words; 8usize],
            pub _M_word_size: c_int,
            pub _M_word: *mut self::std::ios_base__Words,
            pub _M_ios_locale: self::std::locale,
        }
        #[repr(C)]
        pub struct ios_base_failure {
            pub _base: self::std::system_error,
        }
        #[test]
        fn bindgen_test_layout_ios_base_failure() {
            assert_eq!(
                size_of::<ios_base_failure>(),
                32usize,
                concat!("Size of: ", stringify!(ios_base_failure))
            );
            assert_eq!(
                align_of::<ios_base_failure>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base_failure))
            );
        }
        extern "C" {
            #[link_name = "\u{1}failure"]
            pub fn ios_base_failure_failure(
                this: *mut self::std::ios_base_failure,
                __str: *const self::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}failure"]
            pub fn ios_base_failure_failure1(
                this: *mut self::std::ios_base_failure,
                arg1: *const self::std::__cxx11::string,
                arg2: *const self::std::error_code,
            );
        }
        extern "C" {
            #[link_name = "\u{1}failure"]
            pub fn ios_base_failure_failure2(
                this: *mut self::std::ios_base_failure,
                arg1: *const c_char,
                arg2: *const self::std::error_code,
            );
        }
        impl Default for ios_base_failure {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ::std::fmt::Debug for ios_base_failure {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "ios_base_failure {{  }}")
            }
        }
        impl ios_base_failure {
            #[inline]
            pub unsafe fn new(__str: *const self::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = uninitialized();
                ios_base_failure_failure(&mut __bindgen_tmp, __str);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(
                arg1: *const self::std::__cxx11::string,
                arg2: *const self::std::error_code,
            ) -> Self {
                let mut __bindgen_tmp = uninitialized();
                ios_base_failure_failure1(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const c_char, arg2: *const self::std::error_code) -> Self {
                let mut __bindgen_tmp = uninitialized();
                ios_base_failure_failure2(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
        }
        pub use std::_Ios_Fmtflags as ios_base_fmtflags;
        pub use std::_Ios_Iostate as ios_base_iostate;
        pub use std::_Ios_Openmode as ios_base_openmode;
        pub use std::_Ios_Seekdir as ios_base_seekdir;
        pub const ios_base_event_erase_event: self::std::ios_base_event = 0;
        pub const ios_base_event_imbue_event: self::std::ios_base_event = 1;
        pub const ios_base_event_copyfmt_event: self::std::ios_base_event = 2;
        pub type ios_base_event = u32;
        pub type ios_base_event_callback = ::std::option::Option<
            unsafe extern "C" fn(
                __e: self::std::ios_base_event,
                __b: *mut self::std::ios_base,
                __i: c_int,
            ),
        >;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ios_base__Callback_list {
            pub _M_next: *mut self::std::ios_base__Callback_list,
            pub _M_fn: self::std::ios_base_event_callback,
            pub _M_index: c_int,
            pub _M_refcount: self::_Atomic_word,
        }
        #[test]
        fn bindgen_test_layout_ios_base__Callback_list() {
            assert_eq!(
                size_of::<ios_base__Callback_list>(),
                24usize,
                concat!("Size of: ", stringify!(ios_base__Callback_list))
            );
            assert_eq!(
                align_of::<ios_base__Callback_list>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base__Callback_list))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_next as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_next)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_fn as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_fn)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_index as *const _
                        as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_index)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_refcount as *const _
                        as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_refcount)
                )
            );
        }
        impl Default for ios_base__Callback_list {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ios_base__Words {
            pub _M_pword: *mut c_void,
            pub _M_iword: c_long,
        }
        #[test]
        fn bindgen_test_layout_ios_base__Words() {
            assert_eq!(
                size_of::<ios_base__Words>(),
                16usize,
                concat!("Size of: ", stringify!(ios_base__Words))
            );
            assert_eq!(
                align_of::<ios_base__Words>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base__Words))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Words>()))._M_pword as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Words),
                    "::",
                    stringify!(_M_pword)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Words>()))._M_iword as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Words),
                    "::",
                    stringify!(_M_iword)
                )
            );
        }
        impl Default for ios_base__Words {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub const ios_base__S_local_word_size: self::std::ios_base__bindgen_ty_1 = 8;
        pub type ios_base__bindgen_ty_1 = u32;
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ios_base_Init {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_S_refcount"]
            pub static mut ios_base_Init__S_refcount: self::_Atomic_word;
        }
        extern "C" {
            #[link_name = "\u{1}_S_synced_with_stdio"]
            pub static mut ios_base_Init__S_synced_with_stdio: bool;
        }
        #[test]
        fn bindgen_test_layout_ios_base_Init() {
            assert_eq!(
                size_of::<ios_base_Init>(),
                1usize,
                concat!("Size of: ", stringify!(ios_base_Init))
            );
            assert_eq!(
                align_of::<ios_base_Init>(),
                1usize,
                concat!("Alignment of ", stringify!(ios_base_Init))
            );
        }
        extern "C" {
            #[link_name = "\u{1}Init"]
            pub fn ios_base_Init_Init(this: *mut self::std::ios_base_Init);
        }
        extern "C" {
            #[link_name = "\u{1}Init_destructor"]
            pub fn ios_base_Init_Init_destructor(this: *mut self::std::ios_base_Init);
        }
        impl ios_base_Init {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = uninitialized();
                ios_base_Init_Init(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                ios_base_Init_Init_destructor(self)
            }
        }
        extern "C" {
            #[link_name = "\u{1}boolalpha"]
            pub static ios_base_boolalpha: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}dec"]
            pub static ios_base_dec: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}fixed"]
            pub static ios_base_fixed: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}hex"]
            pub static ios_base_hex: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}internal"]
            pub static ios_base_internal: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}left"]
            pub static ios_base_left: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}oct"]
            pub static ios_base_oct: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}right"]
            pub static ios_base_right: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}scientific"]
            pub static ios_base_scientific: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}showbase"]
            pub static ios_base_showbase: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}showpoint"]
            pub static ios_base_showpoint: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}showpos"]
            pub static ios_base_showpos: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}skipws"]
            pub static ios_base_skipws: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}unitbuf"]
            pub static ios_base_unitbuf: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}uppercase"]
            pub static ios_base_uppercase: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}adjustfield"]
            pub static ios_base_adjustfield: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}basefield"]
            pub static ios_base_basefield: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}floatfield"]
            pub static ios_base_floatfield: self::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}badbit"]
            pub static ios_base_badbit: self::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}eofbit"]
            pub static ios_base_eofbit: self::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}failbit"]
            pub static ios_base_failbit: self::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}goodbit"]
            pub static ios_base_goodbit: self::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}app"]
            pub static ios_base_app: self::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}ate"]
            pub static ios_base_ate: self::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}binary"]
            pub static ios_base_binary: self::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}in"]
            pub static ios_base_in: self::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}out"]
            pub static ios_base_out: self::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}trunc"]
            pub static ios_base_trunc: self::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}beg"]
            pub static ios_base_beg: self::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}cur"]
            pub static ios_base_cur: self::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}end"]
            pub static ios_base_end: self::std::ios_base_seekdir;
        }
        #[test]
        fn bindgen_test_layout_ios_base() {
            assert_eq!(
                size_of::<ios_base>(),
                216usize,
                concat!("Size of: ", stringify!(ios_base))
            );
            assert_eq!(
                align_of::<ios_base>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_precision as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_precision)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_width as *const _ as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_width)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_flags as *const _ as usize },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_flags)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_exception as *const _ as usize },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_exception)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_streambuf_state as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_streambuf_state)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_callbacks as *const _ as usize },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_callbacks)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word_zero as *const _ as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word_zero)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_local_word as *const _ as usize },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_local_word)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word_size as *const _ as usize },
                192usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word_size)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word as *const _ as usize },
                200usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_ios_locale as *const _ as usize },
                208usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_ios_locale)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}register_callback"]
            pub fn ios_base_register_callback(
                this: *mut self::std::ios_base,
                __fn: self::std::ios_base_event_callback,
                __index: c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_M_call_callbacks"]
            pub fn ios_base__M_call_callbacks(
                this: *mut self::std::ios_base,
                __ev: self::std::ios_base_event,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_M_dispose_callbacks"]
            pub fn ios_base__M_dispose_callbacks(this: *mut self::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_M_grow_words"]
            pub fn ios_base__M_grow_words(
                this: *mut self::std::ios_base,
                __index: c_int,
                __iword: bool,
            ) -> *mut self::std::ios_base__Words;
        }
        extern "C" {
            #[link_name = "\u{1}_M_init"]
            pub fn ios_base__M_init(this: *mut self::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}sync_with_stdio"]
            pub fn ios_base_sync_with_stdio(__sync: bool) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}imbue"]
            pub fn ios_base_imbue(
                this: *mut self::std::ios_base,
                __loc: *const self::std::locale,
            ) -> self::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}xalloc"]
            pub fn ios_base_xalloc() -> c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_M_move"]
            pub fn ios_base__M_move(this: *mut self::std::ios_base, arg1: *mut self::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_M_swap"]
            pub fn ios_base__M_swap(
                this: *mut self::std::ios_base,
                __rhs: *mut self::std::ios_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}ios_base"]
            pub fn ios_base_ios_base(this: *mut self::std::ios_base);
        }
        impl Default for ios_base {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl ios_base {
            #[inline]
            pub unsafe fn register_callback(
                &mut self,
                __fn: self::std::ios_base_event_callback,
                __index: c_int,
            ) {
                ios_base_register_callback(self, __fn, __index)
            }
            #[inline]
            pub unsafe fn _M_call_callbacks(&mut self, __ev: self::std::ios_base_event) {
                ios_base__M_call_callbacks(self, __ev)
            }
            #[inline]
            pub unsafe fn _M_dispose_callbacks(&mut self) {
                ios_base__M_dispose_callbacks(self)
            }
            #[inline]
            pub unsafe fn _M_grow_words(
                &mut self,
                __index: c_int,
                __iword: bool,
            ) -> *mut self::std::ios_base__Words {
                ios_base__M_grow_words(self, __index, __iword)
            }
            #[inline]
            pub unsafe fn _M_init(&mut self) {
                ios_base__M_init(self)
            }
            #[inline]
            pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
                ios_base_sync_with_stdio(__sync)
            }
            #[inline]
            pub unsafe fn imbue(&mut self, __loc: *const self::std::locale) -> self::std::locale {
                ios_base_imbue(self, __loc)
            }
            #[inline]
            pub unsafe fn xalloc() -> c_int {
                ios_base_xalloc()
            }
            #[inline]
            pub unsafe fn _M_move(&mut self, arg1: *mut self::std::ios_base) {
                ios_base__M_move(self, arg1)
            }
            #[inline]
            pub unsafe fn _M_swap(&mut self, __rhs: *mut self::std::ios_base) {
                ios_base__M_swap(self, __rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = uninitialized();
                ios_base_ios_base(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}failure_destructor"]
            pub fn ios_base_failure_failure_destructor(this: *mut self::std::ios_base_failure);
        }
        extern "C" {
            #[link_name = "\u{1}what"]
            pub fn ios_base_failure_what(this: *mut c_void) -> *const c_char;
        }
        extern "C" {
            #[link_name = "\u{1}ios_base_destructor"]
            pub fn ios_base_ios_base_destructor(this: *mut self::std::ios_base);
        }
        #[repr(C)]
        pub struct basic_streambuf__bindgen_vtable(c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_streambuf<_CharT> {
            pub vtable_: *const basic_streambuf__bindgen_vtable,
            pub _M_in_beg: *mut self::std::basic_streambuf_char_type<_CharT>,
            pub _M_in_cur: *mut self::std::basic_streambuf_char_type<_CharT>,
            pub _M_in_end: *mut self::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_beg: *mut self::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_cur: *mut self::std::basic_streambuf_char_type<_CharT>,
            pub _M_out_end: *mut self::std::basic_streambuf_char_type<_CharT>,
            pub _M_buf_locale: self::std::locale,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_streambuf_char_type<_CharT> = _CharT;
        pub type basic_streambuf_traits_type<_Traits> = _Traits;
        pub type basic_streambuf_int_type = [u8; 0usize];
        pub type basic_streambuf_pos_type = [u8; 0usize];
        pub type basic_streambuf_off_type = [u8; 0usize];
        pub type basic_streambuf___streambuf_type<_CharT> =
            self::std::basic_streambuf<root::std::basic_streambuf_char_type<_CharT>>;
        impl<_CharT> Default for basic_streambuf<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            pub fn __copy_streambufs_eof(
                __sbin: *mut self::std::basic_streambuf<c_char>,
                __sbout: *mut self::std::basic_streambuf<c_char>,
                __ineof: *mut bool,
            ) -> self::std::streamsize;
        }
        #[test]
        fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_streambuf<c_char>>(),
                64usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_streambuf<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_streambuf<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_streambuf<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_streambuf<u32>>(),
                64usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_streambuf<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_streambuf<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_streambuf<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ctype_base {
            pub _address: u8,
        }
        pub type ctype_base___to_type = *const c_int;
        pub type ctype_base_mask = c_ushort;
        pub const ctype_base_upper: self::std::ctype_base_mask = 256;
        pub const ctype_base_lower: self::std::ctype_base_mask = 512;
        pub const ctype_base_alpha: self::std::ctype_base_mask = 1024;
        pub const ctype_base_digit: self::std::ctype_base_mask = 2048;
        pub const ctype_base_xdigit: self::std::ctype_base_mask = 4096;
        pub const ctype_base_space: self::std::ctype_base_mask = 8192;
        pub const ctype_base_print: self::std::ctype_base_mask = 16384;
        pub const ctype_base_graph: self::std::ctype_base_mask = 3076;
        pub const ctype_base_cntrl: self::std::ctype_base_mask = 2;
        pub const ctype_base_punct: self::std::ctype_base_mask = 4;
        pub const ctype_base_alnum: self::std::ctype_base_mask = 3072;
        pub const ctype_base_blank: self::std::ctype_base_mask = 1;
        #[test]
        fn bindgen_test_layout_ctype_base() {
            assert_eq!(
                size_of::<ctype_base>(),
                1usize,
                concat!("Size of: ", stringify!(ctype_base))
            );
            assert_eq!(
                align_of::<ctype_base>(),
                1usize,
                concat!("Alignment of ", stringify!(ctype_base))
            );
        }
        #[repr(C)]
        pub struct istreambuf_iterator<_CharT> {
            pub _M_sbuf: *mut self::std::istreambuf_iterator_streambuf_type<_CharT>,
            pub _M_c: self::std::istreambuf_iterator_int_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type istreambuf_iterator_char_type<_CharT> = _CharT;
        pub type istreambuf_iterator_traits_type<_Traits> = _Traits;
        pub type istreambuf_iterator_int_type = [u8; 0usize];
        pub type istreambuf_iterator_streambuf_type<_CharT> = self::std::basic_streambuf<_CharT>;
        pub type istreambuf_iterator_istream_type<_CharT> = self::std::basic_istream<_CharT>;
        impl<_CharT> Default for istreambuf_iterator<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for istreambuf_iterator<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "istreambuf_iterator {{ _M_sbuf: {:?} }}", self._M_sbuf)
            }
        }
        impl<_CharT> PartialEq for istreambuf_iterator<_CharT>
        where
            _CharT: PartialEq,
        {
            fn eq(&self, other: &istreambuf_iterator<_CharT>) -> bool {
                self._M_sbuf == other._M_sbuf && self._M_c == other._M_c
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ostreambuf_iterator<_CharT> {
            pub _M_sbuf: *mut self::std::ostreambuf_iterator_streambuf_type<_CharT>,
            pub _M_failed: bool,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type ostreambuf_iterator_char_type<_CharT> = _CharT;
        pub type ostreambuf_iterator_traits_type<_Traits> = _Traits;
        pub type ostreambuf_iterator_streambuf_type<_CharT> = self::std::basic_streambuf<_CharT>;
        pub type ostreambuf_iterator_ostream_type<_CharT> = self::std::basic_ostream<_CharT>;
        impl<_CharT> Default for ostreambuf_iterator<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        extern "C" {
            pub fn __convert_to_v(
                arg1: *const c_char,
                arg2: *mut f32,
                arg3: *mut self::std::ios_base_iostate,
                arg4: *const self::std::__c_locale,
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __pad {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __ctype_abstract_base {
            pub _base: self::std::locale_facet,
        }
        pub type __ctype_abstract_base_char_type<_CharT> = _CharT;
        impl Default for __ctype_abstract_base {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ctype {
            pub _base: self::std::__ctype_abstract_base,
        }
        pub type ctype_char_type<_CharT> = _CharT;
        pub type ctype_mask = self::std::__ctype_abstract_base;
        impl Default for ctype {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::ctype>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::ctype>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ctype_byname {
            pub _base: self::std::ctype,
        }
        pub type ctype_byname_mask = self::std::ctype;
        impl Default for ctype_byname {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::ctype_byname>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::ctype_byname>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __num_base {
            pub _address: u8,
        }
        pub const __num_base__S_ominus: self::std::__num_base__bindgen_ty_1 = 0;
        pub const __num_base__S_oplus: self::std::__num_base__bindgen_ty_1 = 1;
        pub const __num_base__S_ox: self::std::__num_base__bindgen_ty_1 = 2;
        pub const __num_base__S_oX: self::std::__num_base__bindgen_ty_1 = 3;
        pub const __num_base__S_odigits: self::std::__num_base__bindgen_ty_1 = 4;
        pub const __num_base__S_odigits_end: self::std::__num_base__bindgen_ty_1 = 20;
        pub const __num_base__S_oudigits: self::std::__num_base__bindgen_ty_1 = 20;
        pub const __num_base__S_oudigits_end: self::std::__num_base__bindgen_ty_1 = 36;
        pub const __num_base__S_oe: self::std::__num_base__bindgen_ty_1 = 18;
        pub const __num_base__S_oE: self::std::__num_base__bindgen_ty_1 = 34;
        pub const __num_base__S_oend: self::std::__num_base__bindgen_ty_1 = 36;
        pub type __num_base__bindgen_ty_1 = u32;
        pub const __num_base__S_iminus: self::std::__num_base__bindgen_ty_2 = 0;
        pub const __num_base__S_iplus: self::std::__num_base__bindgen_ty_2 = 1;
        pub const __num_base__S_ix: self::std::__num_base__bindgen_ty_2 = 2;
        pub const __num_base__S_iX: self::std::__num_base__bindgen_ty_2 = 3;
        pub const __num_base__S_izero: self::std::__num_base__bindgen_ty_2 = 4;
        pub const __num_base__S_ie: self::std::__num_base__bindgen_ty_2 = 18;
        pub const __num_base__S_iE: self::std::__num_base__bindgen_ty_2 = 24;
        pub const __num_base__S_iend: self::std::__num_base__bindgen_ty_2 = 26;
        pub type __num_base__bindgen_ty_2 = u32;
        extern "C" {
            #[link_name = "\u{1}_S_atoms_out"]
            pub static mut __num_base__S_atoms_out: *const c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_S_atoms_in"]
            pub static mut __num_base__S_atoms_in: *const c_char;
        }
        #[test]
        fn bindgen_test_layout___num_base() {
            assert_eq!(
                size_of::<__num_base>(),
                1usize,
                concat!("Size of: ", stringify!(__num_base))
            );
            assert_eq!(
                align_of::<__num_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__num_base))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_S_format_float"]
            pub fn __num_base__S_format_float(
                __io: *const self::std::ios_base,
                __fptr: *mut c_char,
                __mod: c_char,
            );
        }
        impl __num_base {
            #[inline]
            pub unsafe fn _S_format_float(
                __io: *const self::std::ios_base,
                __fptr: *mut c_char,
                __mod: c_char,
            ) {
                __num_base__S_format_float(__io, __fptr, __mod)
            }
        }
        #[repr(C)]
        pub struct __numpunct_cache<_CharT> {
            pub _base: self::std::locale_facet,
            pub _M_grouping: *const c_char,
            pub _M_grouping_size: usize,
            pub _M_use_grouping: bool,
            pub _M_truename: *const _CharT,
            pub _M_truename_size: usize,
            pub _M_falsename: *const _CharT,
            pub _M_falsename_size: usize,
            pub _M_decimal_point: _CharT,
            pub _M_thousands_sep: _CharT,
            pub _M_atoms_out: [_CharT; 36usize],
            pub _M_atoms_in: [_CharT; 26usize],
            pub _M_allocated: bool,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for __numpunct_cache<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for __numpunct_cache<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write ! ( f , "__numpunct_cache {{ _M_grouping: {:?}, _M_grouping_size: {:?}, _M_use_grouping: {:?}, _M_truename: {:?}, _M_truename_size: {:?}, _M_falsename: {:?}, _M_falsename_size: {:?}, _M_decimal_point: Non-debuggable generic, _M_thousands_sep: Non-debuggable generic, _M_atoms_out: Array with length 36, _M_atoms_in: Array with length 26, _M_allocated: {:?} }}" , self . _M_grouping , self . _M_grouping_size , self . _M_use_grouping , self . _M_truename , self . _M_truename_size , self . _M_falsename , self . _M_falsename_size , self . _M_allocated )
            }
        }
        impl<_CharT> PartialEq for __numpunct_cache<_CharT>
        where
            _CharT: PartialEq,
        {
            fn eq(&self, other: &__numpunct_cache<_CharT>) -> bool {
                self._base == other._base
                    && self._M_grouping == other._M_grouping
                    && self._M_grouping_size == other._M_grouping_size
                    && self._M_use_grouping == other._M_use_grouping
                    && self._M_truename == other._M_truename
                    && self._M_truename_size == other._M_truename_size
                    && self._M_falsename == other._M_falsename
                    && self._M_falsename_size == other._M_falsename_size
                    && self._M_decimal_point == other._M_decimal_point
                    && self._M_thousands_sep == other._M_thousands_sep
                    && &self._M_atoms_out[..] == &other._M_atoms_out[..]
                    && self._M_atoms_in == other._M_atoms_in
                    && self._M_allocated == other._M_allocated
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct num_get {
            pub _base: self::std::locale_facet,
        }
        pub type num_get_char_type<_CharT> = _CharT;
        pub type num_get_iter_type<_InIter> = _InIter;
        impl Default for num_get {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct num_put {
            pub _base: self::std::locale_facet,
        }
        pub type num_put_char_type<_CharT> = _CharT;
        pub type num_put_iter_type<_OutIter> = _OutIter;
        impl Default for num_put {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __use_cache {
            pub _address: u8,
        }
        extern "C" {
            pub fn __verify_grouping(
                __grouping: *const c_char,
                __grouping_size: usize,
                __grouping_tmp: *const self::std::__cxx11::string,
            ) -> bool;
        }
        #[test]
        fn __bindgen_test_layout_numpunct_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__cxx11::numpunct<c_char>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::numpunct<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_byname_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__cxx11::numpunct_byname<c_char>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct_byname<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::numpunct_byname<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct_byname<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_get_open0_char_istreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::num_get>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
            assert_eq!(
                align_of::<root::std::num_get>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_put_open0_char_ostreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::num_put>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
            assert_eq!(
                align_of::<root::std::num_put>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__cxx11::numpunct<u32>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::numpunct<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_byname_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__cxx11::numpunct_byname<u32>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct_byname<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::numpunct_byname<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct_byname<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_get_open0_wchar_t_istreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::num_get>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
            assert_eq!(
                align_of::<root::std::num_get>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_put_open0_wchar_t_ostreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::num_put>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
            assert_eq!(
                align_of::<root::std::num_put>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_ios<_CharT> {
            pub _base: self::std::ios_base,
            pub _M_tie: *mut self::std::basic_ostream<_CharT>,
            pub _M_fill: self::std::basic_ios_char_type<_CharT>,
            pub _M_fill_init: bool,
            pub _M_streambuf: *mut self::std::basic_streambuf<_CharT>,
            pub _M_ctype: *const self::std::basic_ios___ctype_type,
            pub _M_num_put: *const self::std::basic_ios___num_put_type,
            pub _M_num_get: *const self::std::basic_ios___num_get_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ios_char_type<_CharT> = _CharT;
        pub type basic_ios_int_type = [u8; 0usize];
        pub type basic_ios_pos_type = [u8; 0usize];
        pub type basic_ios_off_type = [u8; 0usize];
        pub type basic_ios_traits_type<_Traits> = _Traits;
        pub type basic_ios___ctype_type = self::std::ctype;
        pub type basic_ios___num_put_type = self::std::num_put;
        pub type basic_ios___num_get_type = self::std::num_get;
        impl<_CharT> Default for basic_ios<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_ios<c_char>>(),
                264usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ios<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_ios<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ios<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_ios<u32>>(),
                264usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ios<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_ios<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ios<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_ostream<_CharT> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ostream_char_type<_CharT> = _CharT;
        pub type basic_ostream_int_type = [u8; 0usize];
        pub type basic_ostream_pos_type = [u8; 0usize];
        pub type basic_ostream_off_type = [u8; 0usize];
        pub type basic_ostream_traits_type<_Traits> = _Traits;
        pub type basic_ostream___streambuf_type<_CharT> = self::std::basic_streambuf<_CharT>;
        pub type basic_ostream___ios_type<_CharT> = self::std::basic_ios<_CharT>;
        pub type basic_ostream___ostream_type<_CharT> = self::std::basic_ostream<_CharT>;
        pub type basic_ostream___num_put_type = self::std::num_put;
        pub type basic_ostream___ctype_type = self::std::ctype;
        impl<_CharT> Default for basic_ostream<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_ostream_sentry {
            pub _M_ok: bool,
            pub _M_os: *mut self::std::basic_ostream<_CharT>,
        }
        impl Default for basic_ostream_sentry {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_convertible_to_basic_ostream_impl {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_ostream_impl___ostream_type = c_void;
        pub type __do_is_convertible_to_basic_ostream_impl = self::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_convertible_to_basic_ostream {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_ostream_type = self::std::__not_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_insertable {
            pub _base: self::std::false_type,
        }
        pub type __rvalue_ostream_type = self::std::__is_convertible_to_basic_ostream;
        #[test]
        fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_ostream<c_char>>(),
                272usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ostream<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_ostream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ostream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_ostream<u32>>(),
                272usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ostream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_ostream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ostream<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_istream<_CharT> {
            pub _M_gcount: self::std::streamsize,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_istream_char_type<_CharT> = _CharT;
        pub type basic_istream_int_type = [u8; 0usize];
        pub type basic_istream_pos_type = [u8; 0usize];
        pub type basic_istream_off_type = [u8; 0usize];
        pub type basic_istream_traits_type<_Traits> = _Traits;
        pub type basic_istream___streambuf_type<_CharT> = self::std::basic_streambuf<_CharT>;
        pub type basic_istream___ios_type<_CharT> = self::std::basic_ios<_CharT>;
        pub type basic_istream___istream_type<_CharT> = self::std::basic_istream<_CharT>;
        pub type basic_istream___num_get_type = self::std::num_get;
        pub type basic_istream___ctype_type = self::std::ctype;
        impl<_CharT> Default for basic_istream<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_istream_sentry {
            pub _M_ok: bool,
        }
        pub type basic_istream_sentry_traits_type = _Traits;
        pub type basic_istream_sentry___streambuf_type = self::std::basic_streambuf<_CharT>;
        pub type basic_istream_sentry___istream_type = self::std::basic_istream<_CharT>;
        pub type basic_istream_sentry___ctype_type = self::std::basic_istream___ctype_type;
        pub type basic_istream_sentry___int_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_iostream<_CharT> {
            pub _base: self::std::basic_istream<_CharT>,
            pub _base_1: self::std::basic_ostream<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_iostream_char_type<_CharT> = _CharT;
        pub type basic_iostream_int_type = [u8; 0usize];
        pub type basic_iostream_pos_type = [u8; 0usize];
        pub type basic_iostream_off_type = [u8; 0usize];
        pub type basic_iostream_traits_type<_Traits> = _Traits;
        pub type basic_iostream___istream_type<_CharT> = self::std::basic_istream<_CharT>;
        pub type basic_iostream___ostream_type<_CharT> = self::std::basic_ostream<_CharT>;
        impl<_CharT> Default for basic_iostream<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_convertible_to_basic_istream_impl {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_istream_impl___istream_type = c_void;
        pub type __do_is_convertible_to_basic_istream_impl = self::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_convertible_to_basic_istream {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_istream_type = self::std::__not_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_extractable {
            pub _base: self::std::false_type,
        }
        pub type __rvalue_istream_type = self::std::__is_convertible_to_basic_istream;
        #[test]
        fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_istream<c_char>>(),
                280usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_istream<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_istream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_istream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_iostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_iostream<c_char>>(),
                288usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_iostream<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_iostream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_iostream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_istream<u32>>(),
                280usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_istream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_istream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_istream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_iostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_iostream<u32>>(),
                288usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_iostream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_iostream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_iostream<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct codecvt_base {
            pub _address: u8,
        }
        pub const codecvt_base_result_ok: self::std::codecvt_base_result = 0;
        pub const codecvt_base_result_partial: self::std::codecvt_base_result = 1;
        pub const codecvt_base_result_error: self::std::codecvt_base_result = 2;
        pub const codecvt_base_result_noconv: self::std::codecvt_base_result = 3;
        pub type codecvt_base_result = u32;
        #[test]
        fn bindgen_test_layout_codecvt_base() {
            assert_eq!(
                size_of::<codecvt_base>(),
                1usize,
                concat!("Size of: ", stringify!(codecvt_base))
            );
            assert_eq!(
                align_of::<codecvt_base>(),
                1usize,
                concat!("Alignment of ", stringify!(codecvt_base))
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __codecvt_abstract_base {
            pub _base: self::std::locale_facet,
        }
        pub use std::codecvt_base_result as __codecvt_abstract_base_result;
        pub type __codecvt_abstract_base_intern_type<_InternT> = _InternT;
        pub type __codecvt_abstract_base_extern_type<_ExternT> = _ExternT;
        pub type __codecvt_abstract_base_state_type<_StateT> = _StateT;
        impl Default for __codecvt_abstract_base {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct codecvt {
            pub _base: self::std::__codecvt_abstract_base,
            pub _M_c_locale_codecvt: self::std::__c_locale,
        }
        pub use std::codecvt_base_result as codecvt_result;
        pub type codecvt_intern_type<_InternT> = _InternT;
        pub type codecvt_extern_type<_ExternT> = _ExternT;
        pub type codecvt_state_type<_StateT> = _StateT;
        impl Default for codecvt {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_wchar_t_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char16_t_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::codecvt>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char32_t_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::codecvt>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct codecvt_byname {
            pub _base: self::std::codecvt,
        }
        impl Default for codecvt_byname {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char16_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char32_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::codecvt_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_wchar_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::codecvt_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        pub type __c_lock = self::__gthread_mutex_t;
        pub type __c_file = self::FILE;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __basic_file {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___basic_file_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::std::__basic_file>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__basic_file)
                )
            );
            assert_eq!(
                align_of::<root::std::__basic_file>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__basic_file)
                )
            );
        }
        pub type _If_fs_path = self::std::enable_if_t;
        #[repr(C)]
        pub struct basic_filebuf<_CharT> {
            pub _base: self::std::basic_streambuf<_CharT>,
            pub _M_lock: self::std::__c_lock,
            pub _M_file: self::std::basic_filebuf___file_type,
            pub _M_mode: self::std::ios_base_openmode,
            pub _M_state_beg: self::std::basic_filebuf___state_type,
            pub _M_state_cur: self::std::basic_filebuf___state_type,
            pub _M_state_last: self::std::basic_filebuf___state_type,
            pub _M_buf: *mut self::std::basic_filebuf_char_type<_CharT>,
            pub _M_buf_size: usize,
            pub _M_buf_allocated: bool,
            pub _M_reading: bool,
            pub _M_writing: bool,
            pub _M_pback: self::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_cur_save: *mut self::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_end_save: *mut self::std::basic_filebuf_char_type<_CharT>,
            pub _M_pback_init: bool,
            pub _M_codecvt: *const self::std::basic_filebuf___codecvt_type,
            pub _M_ext_buf: *mut c_char,
            pub _M_ext_buf_size: self::std::streamsize,
            pub _M_ext_next: *const c_char,
            pub _M_ext_end: *mut c_char,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_filebuf___chk_state = self::std::__and_;
        pub type basic_filebuf_char_type<_CharT> = _CharT;
        pub type basic_filebuf_traits_type<_Traits> = _Traits;
        pub type basic_filebuf_int_type = [u8; 0usize];
        pub type basic_filebuf_pos_type = [u8; 0usize];
        pub type basic_filebuf_off_type = [u8; 0usize];
        pub type basic_filebuf___streambuf_type<_CharT> =
            self::std::basic_streambuf<root::std::basic_filebuf_char_type<_CharT>>;
        pub type basic_filebuf___filebuf_type<_CharT> =
            self::std::basic_filebuf<root::std::basic_filebuf_char_type<_CharT>>;
        pub type basic_filebuf___file_type = self::std::__basic_file;
        pub type basic_filebuf___state_type = [u8; 0usize];
        pub type basic_filebuf___codecvt_type = self::std::codecvt;
        impl<_CharT> Default for basic_filebuf<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_filebuf<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write ! ( f , "basic_filebuf {{ _M_lock: {:?}, _M_file: {:?}, _M_mode: {:?}, _M_buf: {:?}, _M_buf_size: {:?}, _M_buf_allocated: {:?}, _M_reading: {:?}, _M_writing: {:?}, _M_pback: Non-debuggable generic, _M_pback_cur_save: {:?}, _M_pback_end_save: {:?}, _M_pback_init: {:?}, _M_codecvt: {:?}, _M_ext_buf: {:?}, _M_ext_buf_size: {:?}, _M_ext_next: {:?}, _M_ext_end: {:?} }}" , self . _M_lock , self . _M_file , self . _M_mode , self . _M_buf , self . _M_buf_size , self . _M_buf_allocated , self . _M_reading , self . _M_writing , self . _M_pback_cur_save , self . _M_pback_end_save , self . _M_pback_init , self . _M_codecvt , self . _M_ext_buf , self . _M_ext_buf_size , self . _M_ext_next , self . _M_ext_end )
            }
        }
        #[repr(C)]
        pub struct basic_ifstream<_CharT> {
            pub _base: self::std::basic_istream<_CharT>,
            pub _M_filebuf: self::std::basic_ifstream___filebuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ifstream_char_type<_CharT> = _CharT;
        pub type basic_ifstream_traits_type<_Traits> = _Traits;
        pub type basic_ifstream_int_type = [u8; 0usize];
        pub type basic_ifstream_pos_type = [u8; 0usize];
        pub type basic_ifstream_off_type = [u8; 0usize];
        pub type basic_ifstream___filebuf_type<_CharT> =
            self::std::basic_filebuf<root::std::basic_ifstream_char_type<_CharT>>;
        pub type basic_ifstream___istream_type<_CharT> =
            self::std::basic_istream<root::std::basic_ifstream_char_type<_CharT>>;
        impl<_CharT> Default for basic_ifstream<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_ifstream<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_ifstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
            }
        }
        #[repr(C)]
        pub struct basic_ofstream<_CharT> {
            pub _base: self::std::basic_ostream<_CharT>,
            pub _M_filebuf: self::std::basic_ofstream___filebuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ofstream_char_type<_CharT> = _CharT;
        pub type basic_ofstream_traits_type<_Traits> = _Traits;
        pub type basic_ofstream_int_type = [u8; 0usize];
        pub type basic_ofstream_pos_type = [u8; 0usize];
        pub type basic_ofstream_off_type = [u8; 0usize];
        pub type basic_ofstream___filebuf_type<_CharT> =
            self::std::basic_filebuf<root::std::basic_ofstream_char_type<_CharT>>;
        pub type basic_ofstream___ostream_type<_CharT> =
            self::std::basic_ostream<root::std::basic_ofstream_char_type<_CharT>>;
        impl<_CharT> Default for basic_ofstream<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_ofstream<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_ofstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
            }
        }
        #[repr(C)]
        pub struct basic_fstream<_CharT> {
            pub _base: self::std::basic_iostream<_CharT>,
            pub _M_filebuf: self::std::basic_fstream___filebuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_fstream_char_type<_CharT> = _CharT;
        pub type basic_fstream_traits_type<_Traits> = _Traits;
        pub type basic_fstream_int_type = [u8; 0usize];
        pub type basic_fstream_pos_type = [u8; 0usize];
        pub type basic_fstream_off_type = [u8; 0usize];
        pub type basic_fstream___filebuf_type<_CharT> =
            self::std::basic_filebuf<root::std::basic_fstream_char_type<_CharT>>;
        pub type basic_fstream___ios_type<_CharT> =
            self::std::basic_ios<root::std::basic_fstream_char_type<_CharT>>;
        pub type basic_fstream___iostream_type<_CharT> =
            self::std::basic_iostream<root::std::basic_fstream_char_type<_CharT>>;
        impl<_CharT> Default for basic_fstream<_CharT> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_fstream<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_fstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
            }
        }
        #[test]
        fn __bindgen_test_layout_basic_filebuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_filebuf<c_char>>(),
                240usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_filebuf<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_filebuf<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_filebuf<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ifstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_ifstream<c_char>>(),
                520usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ifstream<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_ifstream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ifstream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ofstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_ofstream<c_char>>(),
                512usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ofstream<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_ofstream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ofstream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_fstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_fstream<c_char>>(),
                528usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_fstream<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_fstream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_fstream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_filebuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_filebuf<u32>>(),
                240usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_filebuf<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_filebuf<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_filebuf<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ifstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_ifstream<u32>>(),
                520usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ifstream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_ifstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ifstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ofstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_ofstream<u32>>(),
                512usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ofstream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_ofstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ofstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_fstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::basic_fstream<u32>>(),
                528usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_fstream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::basic_fstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_fstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_stringbuf_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__cxx11::basic_stringbuf<c_char>>(),
                104usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringbuf<c_char>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::basic_stringbuf<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringbuf<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<self::std::__cxx11::basic_istringstream<c_char>>(),
                384usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_istringstream<c_char>)
                )
            );
            assert_eq!(
                align_of::<self::std::__cxx11::basic_istringstream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_istringstream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<self::std::__cxx11::basic_ostringstream<c_char>>(),
                376usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_ostringstream<c_char>)
                )
            );
            assert_eq!(
                align_of::<self::std::__cxx11::basic_ostringstream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_ostringstream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_stringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__cxx11::basic_stringstream<c_char>>(),
                392usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringstream<c_char>)
                )
            );
            assert_eq!(
                align_of::<self::std::__cxx11::basic_stringstream<c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringstream<c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_stringbuf_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__cxx11::basic_stringbuf<u32>>(),
                104usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringbuf<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::basic_stringbuf<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringbuf<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__cxx11::basic_istringstream<u32>>(),
                384usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_istringstream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::basic_istringstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_istringstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
                376usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_ostringstream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_ostringstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_stringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                size_of::<root::std::__cxx11::basic_stringstream<u32>>(),
                392usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringstream<u32>)
                )
            );
            assert_eq!(
                align_of::<root::std::__cxx11::basic_stringstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringstream<u32>)
                )
            );
        }
        extern "C" {
            pub static mut cin: self::std::istream;
        }
        extern "C" {
            pub static mut cout: self::std::ostream;
        }
        extern "C" {
            pub static mut cerr: self::std::ostream;
        }
        extern "C" {
            pub static mut clog: self::std::ostream;
        }
        extern "C" {
            pub static mut wcin: self::std::wistream;
        }
        extern "C" {
            pub static mut wcout: self::std::wostream;
        }
        extern "C" {
            pub static mut wcerr: self::std::wostream;
        }
        extern "C" {
            pub static mut wclog: self::std::wostream;
        }
        extern "C" {
            pub static mut __ioinit: self::std::ios_base_Init;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __allocated_ptr<_Alloc> {
            pub _M_alloc: *mut _Alloc,
            pub _M_ptr: self::std::__allocated_ptr_pointer,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        pub type __allocated_ptr_pointer = self::std::allocator_traits;
        pub type __allocated_ptr_value_type = self::std::allocator_traits;
        impl<_Alloc> Default for __allocated_ptr<_Alloc> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _List_node {
            pub _base: self::std::__detail::_List_node_base,
            pub _M_storage: self::__gnu_cxx::__aligned_membuf,
        }
        impl Default for _List_node {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _List_iterator {
            pub _M_node: *mut self::std::__detail::_List_node_base,
        }
        pub type _List_iterator__Self = self::std::_List_iterator;
        pub type _List_iterator__Node = self::std::_List_node;
        pub type _List_iterator_difference_type = isize;
        pub type _List_iterator_iterator_category = self::std::bidirectional_iterator_tag;
        pub type _List_iterator_value_type<_Tp> = _Tp;
        pub type _List_iterator_pointer<_Tp> = *mut _Tp;
        pub type _List_iterator_reference<_Tp> = *mut _Tp;
        impl Default for _List_iterator {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _List_const_iterator {
            pub _M_node: *const self::std::__detail::_List_node_base,
        }
        pub type _List_const_iterator__Self = self::std::_List_const_iterator;
        pub type _List_const_iterator__Node = self::std::_List_node;
        pub type _List_const_iterator_iterator = self::std::_List_iterator;
        pub type _List_const_iterator_difference_type = isize;
        pub type _List_const_iterator_iterator_category = self::std::bidirectional_iterator_tag;
        pub type _List_const_iterator_value_type<_Tp> = _Tp;
        pub type _List_const_iterator_pointer<_Tp> = *const _Tp;
        pub type _List_const_iterator_reference<_Tp> = *const _Tp;
        impl Default for _List_const_iterator {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_void_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_char_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::ctype>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::ctype>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char_char___mbstate_t_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_wchar_t_char___mbstate_t_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::ctype_byname>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation_1() {
            assert_eq!(
                size_of::<root::std::ctype_byname>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char16_t_char___mbstate_t_close0_instantiation_1(
        ) {
            assert_eq!(
                size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char32_t_char___mbstate_t_close0_instantiation_1(
        ) {
            assert_eq!(
                size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
    }
    pub mod __gnu_cxx {

        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = self::__gnu_cxx::__add_unsigned___if_type;
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_signed_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = self::__gnu_cxx::__remove_unsigned___if_type;
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        pub type __promote___type = f64;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __promote_2 {
            pub _address: u8,
        }
        pub type __promote_2___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __promote_3 {
            pub _address: u8,
        }
        pub type __promote_3___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __promote_4 {
            pub _address: u8,
        }
        pub type __promote_4___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        extern "C" {
            pub static __min: _Value;
        }
        extern "C" {
            pub static __max: _Value;
        }
        extern "C" {
            pub static __is_signed: bool;
        }
        extern "C" {
            pub static __digits: c_int;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        extern "C" {
            pub static __max_digits10: c_int;
        }
        extern "C" {
            pub static __digits10: c_int;
        }
        extern "C" {
            pub static __max_exponent10: c_int;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __normal_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type __normal_iterator___traits_type = self::std::iterator_traits;
        pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
        pub type __normal_iterator_iterator_category =
            self::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_value_type = self::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_difference_type =
            self::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_reference = self::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_pointer = self::__gnu_cxx::__normal_iterator___traits_type;
        impl<_Iterator> Default for __normal_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        pub mod __ops {

            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_less_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_less_iter() {
                assert_eq!(
                    size_of::<_Iter_less_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_less_iter))
                );
                assert_eq!(
                    align_of::<_Iter_less_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_less_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_less_val {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_less_val() {
                assert_eq!(
                    size_of::<_Iter_less_val>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_less_val))
                );
                assert_eq!(
                    align_of::<_Iter_less_val>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_less_val))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Val_less_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Val_less_iter() {
                assert_eq!(
                    size_of::<_Val_less_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Val_less_iter))
                );
                assert_eq!(
                    align_of::<_Val_less_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Val_less_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_equal_to_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_equal_to_iter() {
                assert_eq!(
                    size_of::<_Iter_equal_to_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_equal_to_iter))
                );
                assert_eq!(
                    align_of::<_Iter_equal_to_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_equal_to_iter))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_equal_to_val {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_equal_to_val() {
                assert_eq!(
                    size_of::<_Iter_equal_to_val>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_equal_to_val))
                );
                assert_eq!(
                    align_of::<_Iter_equal_to_val>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_equal_to_val))
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            impl<_Compare> Default for _Iter_comp_iter<_Compare> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_comp_val<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            impl<_Compare> Default for _Iter_comp_val<_Compare> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Val_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            impl<_Compare> Default for _Val_comp_iter<_Compare> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_equals_val<_Value> {
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            impl<_Value> Default for _Iter_equals_val<_Value> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_equals_iter<_Iterator1> {
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
            }
            impl<_Iterator1> Default for _Iter_equals_iter<_Iterator1> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_pred<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
            }
            impl<_Predicate> Default for _Iter_pred<_Predicate> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_comp_to_val<_Compare, _Value> {
                pub _M_comp: _Compare,
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            impl<_Compare, _Value> Default for _Iter_comp_to_val<_Compare, _Value> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
                pub _M_comp: _Compare,
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
            }
            impl<_Compare, _Iterator1> Default for _Iter_comp_to_iter<_Compare, _Iterator1> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_negate<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
            }
            impl<_Predicate> Default for _Iter_negate<_Predicate> {
                fn default() -> Self {
                    unsafe { zeroed() }
                }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Char_types {
            pub _address: u8,
        }
        pub type _Char_types_int_type = c_ulong;
        pub type _Char_types_pos_type = self::std::streampos;
        pub type _Char_types_off_type = self::std::streamoff;
        pub type _Char_types_state_type = self::mbstate_t;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type char_traits_char_type<_CharT> = _CharT;
        pub type char_traits_int_type = self::__gnu_cxx::_Char_types;
        pub type char_traits_pos_type = self::__gnu_cxx::_Char_types;
        pub type char_traits_off_type = self::__gnu_cxx::_Char_types;
        pub type char_traits_state_type = self::__gnu_cxx::_Char_types;
        extern "C" {
            pub fn __verbose_terminate_handler();
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct new_allocator {
            pub _address: u8,
        }
        pub type new_allocator_size_type = usize;
        pub type new_allocator_difference_type = isize;
        pub type new_allocator_pointer<_Tp> = *mut _Tp;
        pub type new_allocator_const_pointer<_Tp> = *const _Tp;
        pub type new_allocator_reference<_Tp> = *mut _Tp;
        pub type new_allocator_const_reference<_Tp> = *const _Tp;
        pub type new_allocator_value_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct new_allocator_rebind {
            pub _address: u8,
        }
        pub type new_allocator_rebind_other = self::__gnu_cxx::new_allocator;
        pub type new_allocator_propagate_on_container_move_assignment = self::std::true_type;
        extern "C" {
            pub fn __uselocale(arg1: self::locale_t) -> self::locale_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __alloc_traits {
            pub _address: u8,
        }
        pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
        pub type __alloc_traits__Base_type = self::std::allocator_traits;
        pub type __alloc_traits_value_type = self::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_pointer = self::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_const_pointer = self::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_size_type = self::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_difference_type = self::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_reference = *mut self::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits_const_reference = *const self::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits___is_custom_pointer = self::std::__and_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __alloc_traits_rebind {
            pub _address: u8,
        }
        pub type __alloc_traits_rebind_other = self::__gnu_cxx::__alloc_traits__Base_type;
        impl Default for __alloc_traits {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __aligned_membuf {
            pub _M_storage: *mut c_uchar,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __aligned_membuf__Tp2<_Tp> {
            pub _M_t: _Tp,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        impl<_Tp> Default for __aligned_membuf__Tp2<_Tp> {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl Default for __aligned_membuf {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __aligned_buffer {
            pub _M_storage: u8,
        }
    }
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = f64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct div_t {
        pub quot: c_int,
        pub rem: c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ldiv_t {
        pub quot: c_long,
        pub rem: c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lldiv_t {
        pub quot: c_longlong,
        pub rem: c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const c_char) -> c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const c_char) -> c_longlong;
    }
    extern "C" {
        pub fn strtod(__nptr: *const c_char, __endptr: *mut *mut c_char) -> f64;
    }
    extern "C" {
        pub fn strtof(__nptr: *const c_char, __endptr: *mut *mut c_char) -> f32;
    }
    extern "C" {
        pub fn strtold(__nptr: *const c_char, __endptr: *mut *mut c_char) -> f64;
    }
    extern "C" {
        pub fn strtof32(__nptr: *const c_char, __endptr: *mut *mut c_char) -> self::_Float32;
    }
    extern "C" {
        pub fn strtof64(__nptr: *const c_char, __endptr: *mut *mut c_char) -> self::_Float64;
    }
    extern "C" {
        pub fn strtof32x(__nptr: *const c_char, __endptr: *mut *mut c_char) -> self::_Float32x;
    }
    extern "C" {
        pub fn strtof64x(__nptr: *const c_char, __endptr: *mut *mut c_char) -> self::_Float64x;
    }
    extern "C" {
        pub fn strtol(__nptr: *const c_char, __endptr: *mut *mut c_char, __base: c_int) -> c_long;
    }
    extern "C" {
        pub fn strtoul(__nptr: *const c_char, __endptr: *mut *mut c_char, __base: c_int)
            -> c_ulong;
    }
    extern "C" {
        pub fn strtoq(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __base: c_int,
        ) -> c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __base: c_int,
        ) -> c_ulonglong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __base: c_int,
        ) -> c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __base: c_int,
        ) -> c_ulonglong;
    }
    extern "C" {
        pub fn strfromd(
            __dest: *mut c_char,
            __size: usize,
            __format: *const c_char,
            __f: f64,
        ) -> c_int;
    }
    extern "C" {
        pub fn strfromf(
            __dest: *mut c_char,
            __size: usize,
            __format: *const c_char,
            __f: f32,
        ) -> c_int;
    }
    extern "C" {
        pub fn strfroml(
            __dest: *mut c_char,
            __size: usize,
            __format: *const c_char,
            __f: f64,
        ) -> c_int;
    }
    extern "C" {
        pub fn strfromf32(
            __dest: *mut c_char,
            __size: usize,
            __format: *const c_char,
            __f: self::_Float32,
        ) -> c_int;
    }
    extern "C" {
        pub fn strfromf64(
            __dest: *mut c_char,
            __size: usize,
            __format: *const c_char,
            __f: self::_Float64,
        ) -> c_int;
    }
    extern "C" {
        pub fn strfromf32x(
            __dest: *mut c_char,
            __size: usize,
            __format: *const c_char,
            __f: self::_Float32x,
        ) -> c_int;
    }
    extern "C" {
        pub fn strfromf64x(
            __dest: *mut c_char,
            __size: usize,
            __format: *const c_char,
            __f: self::_Float64x,
        ) -> c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __locale_struct {
        pub __locales: [*mut self::__locale_data; 13usize],
        pub __ctype_b: *const c_ushort,
        pub __ctype_tolower: *const c_int,
        pub __ctype_toupper: *const c_int,
        pub __names: [*const c_char; 13usize],
    }
    #[test]
    fn bindgen_test_layout___locale_struct() {
        assert_eq!(
            size_of::<__locale_struct>(),
            232usize,
            concat!("Size of: ", stringify!(__locale_struct))
        );
        assert_eq!(
            align_of::<__locale_struct>(),
            8usize,
            concat!("Alignment of ", stringify!(__locale_struct))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__locales)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_b)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_tolower)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_toupper)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__names)
            )
        );
    }
    impl Default for __locale_struct {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type __locale_t = *mut self::__locale_struct;
    pub type locale_t = self::__locale_t;
    extern "C" {
        pub fn strtol_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __base: c_int,
            __loc: self::locale_t,
        ) -> c_long;
    }
    extern "C" {
        pub fn strtoul_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __base: c_int,
            __loc: self::locale_t,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn strtoll_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __base: c_int,
            __loc: self::locale_t,
        ) -> c_longlong;
    }
    extern "C" {
        pub fn strtoull_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __base: c_int,
            __loc: self::locale_t,
        ) -> c_ulonglong;
    }
    extern "C" {
        pub fn strtod_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __loc: self::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __loc: self::locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __loc: self::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof32_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __loc: self::locale_t,
        ) -> self::_Float32;
    }
    extern "C" {
        pub fn strtof64_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __loc: self::locale_t,
        ) -> self::_Float64;
    }
    extern "C" {
        pub fn strtof32x_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __loc: self::locale_t,
        ) -> self::_Float32x;
    }
    extern "C" {
        pub fn strtof64x_l(
            __nptr: *const c_char,
            __endptr: *mut *mut c_char,
            __loc: self::locale_t,
        ) -> self::_Float64x;
    }
    extern "C" {
        pub fn l64a(__n: c_long) -> *mut c_char;
    }
    extern "C" {
        pub fn a64l(__s: *const c_char) -> c_long;
    }
    pub type __u_char = c_uchar;
    pub type __u_short = c_ushort;
    pub type __u_int = c_uint;
    pub type __u_long = c_ulong;
    pub type __int8_t = c_schar;
    pub type __uint8_t = c_uchar;
    pub type __int16_t = c_short;
    pub type __uint16_t = c_ushort;
    pub type __int32_t = c_int;
    pub type __uint32_t = c_uint;
    pub type __int64_t = c_long;
    pub type __uint64_t = c_ulong;
    pub type __int_least8_t = self::__int8_t;
    pub type __uint_least8_t = self::__uint8_t;
    pub type __int_least16_t = self::__int16_t;
    pub type __uint_least16_t = self::__uint16_t;
    pub type __int_least32_t = self::__int32_t;
    pub type __uint_least32_t = self::__uint32_t;
    pub type __int_least64_t = self::__int64_t;
    pub type __uint_least64_t = self::__uint64_t;
    pub type __quad_t = c_long;
    pub type __u_quad_t = c_ulong;
    pub type __intmax_t = c_long;
    pub type __uintmax_t = c_ulong;
    pub type __dev_t = c_ulong;
    pub type __uid_t = c_uint;
    pub type __gid_t = c_uint;
    pub type __ino_t = c_ulong;
    pub type __ino64_t = c_ulong;
    pub type __mode_t = c_uint;
    pub type __nlink_t = c_ulong;
    pub type __off_t = c_long;
    pub type __off64_t = c_long;
    pub type __pid_t = c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __fsid_t {
        pub __val: [c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = c_long;
    pub type __rlim_t = c_ulong;
    pub type __rlim64_t = c_ulong;
    pub type __id_t = c_uint;
    pub type __time_t = c_long;
    pub type __useconds_t = c_uint;
    pub type __suseconds_t = c_long;
    pub type __daddr_t = c_int;
    pub type __key_t = c_int;
    pub type __clockid_t = c_int;
    pub type __timer_t = *mut c_void;
    pub type __blksize_t = c_long;
    pub type __blkcnt_t = c_long;
    pub type __blkcnt64_t = c_long;
    pub type __fsblkcnt_t = c_ulong;
    pub type __fsblkcnt64_t = c_ulong;
    pub type __fsfilcnt_t = c_ulong;
    pub type __fsfilcnt64_t = c_ulong;
    pub type __fsword_t = c_long;
    pub type __ssize_t = c_long;
    pub type __syscall_slong_t = c_long;
    pub type __syscall_ulong_t = c_ulong;
    pub type __loff_t = self::__off64_t;
    pub type __caddr_t = *mut c_char;
    pub type __intptr_t = c_long;
    pub type __socklen_t = c_uint;
    pub type __sig_atomic_t = c_int;
    pub type u_char = self::__u_char;
    pub type u_short = self::__u_short;
    pub type u_int = self::__u_int;
    pub type u_long = self::__u_long;
    pub type quad_t = self::__quad_t;
    pub type u_quad_t = self::__u_quad_t;
    pub type fsid_t = self::__fsid_t;
    pub type loff_t = self::__loff_t;
    pub type ino_t = self::__ino_t;
    pub type ino64_t = self::__ino64_t;
    pub type dev_t = self::__dev_t;
    pub type gid_t = self::__gid_t;
    pub type mode_t = self::__mode_t;
    pub type nlink_t = self::__nlink_t;
    pub type uid_t = self::__uid_t;
    pub type off_t = self::__off_t;
    pub type off64_t = self::__off64_t;
    pub type pid_t = self::__pid_t;
    pub type id_t = self::__id_t;
    pub type daddr_t = self::__daddr_t;
    pub type caddr_t = self::__caddr_t;
    pub type key_t = self::__key_t;
    pub type clock_t = self::__clock_t;
    pub type clockid_t = self::__clockid_t;
    pub type time_t = self::__time_t;
    pub type timer_t = self::__timer_t;
    pub type useconds_t = self::__useconds_t;
    pub type suseconds_t = self::__suseconds_t;
    pub type ulong = c_ulong;
    pub type ushort = c_ushort;
    pub type uint = c_uint;
    pub type u_int8_t = c_uchar;
    pub type u_int16_t = c_ushort;
    pub type u_int32_t = c_uint;
    pub type u_int64_t = c_ulong;
    pub type register_t = c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __sigset_t {
        pub __val: [c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        assert_eq!(
            size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type sigset_t = self::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timeval {
        pub tv_sec: self::__time_t,
        pub tv_usec: self::__suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        assert_eq!(
            size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timespec {
        pub tv_sec: self::__time_t,
        pub tv_nsec: self::__syscall_slong_t,
    }
    #[test]
    fn bindgen_test_layout_timespec() {
        assert_eq!(
            size_of::<timespec>(),
            16usize,
            concat!("Size of: ", stringify!(timespec))
        );
        assert_eq!(
            align_of::<timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(timespec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    pub type __fd_mask = c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct fd_set {
        pub fds_bits: [self::__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        assert_eq!(
            size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    pub type fd_mask = self::__fd_mask;
    extern "C" {
        pub fn select(
            __nfds: c_int,
            __readfds: *mut self::fd_set,
            __writefds: *mut self::fd_set,
            __exceptfds: *mut self::fd_set,
            __timeout: *mut self::timeval,
        ) -> c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: c_int,
            __readfds: *mut self::fd_set,
            __writefds: *mut self::fd_set,
            __exceptfds: *mut self::fd_set,
            __timeout: *const self::timespec,
            __sigmask: *const self::__sigset_t,
        ) -> c_int;
    }
    pub type blksize_t = self::__blksize_t;
    pub type blkcnt_t = self::__blkcnt_t;
    pub type fsblkcnt_t = self::__fsblkcnt_t;
    pub type fsfilcnt_t = self::__fsfilcnt_t;
    pub type blkcnt64_t = self::__blkcnt64_t;
    pub type fsblkcnt64_t = self::__fsblkcnt64_t;
    pub type fsfilcnt64_t = self::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: c_uint,
        pub __writers: c_uint,
        pub __wrphase_futex: c_uint,
        pub __writers_futex: c_uint,
        pub __pad3: c_uint,
        pub __pad4: c_uint,
        pub __cur_writer: c_int,
        pub __shared: c_int,
        pub __rwelision: c_schar,
        pub __pad1: [c_uchar; 7usize],
        pub __pad2: c_ulong,
        pub __flags: c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_rwlock_arch_t() {
        assert_eq!(
            size_of::<__pthread_rwlock_arch_t>(),
            56usize,
            concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            align_of::<__pthread_rwlock_arch_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _
                    as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _
                    as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_internal_list {
        pub __prev: *mut self::__pthread_internal_list,
        pub __next: *mut self::__pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        assert_eq!(
            size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    impl Default for __pthread_internal_list {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type __pthread_list_t = self::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_mutex_s {
        pub __lock: c_int,
        pub __count: c_uint,
        pub __owner: c_int,
        pub __nusers: c_uint,
        pub __kind: c_int,
        pub __spins: c_short,
        pub __elision: c_short,
        pub __list: self::__pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        assert_eq!(
            size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    impl Default for __pthread_mutex_s {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __bindgen_anon_1: self::__pthread_cond_s__bindgen_ty_1,
        pub __bindgen_anon_2: self::__pthread_cond_s__bindgen_ty_2,
        pub __g_refs: [c_uint; 2usize],
        pub __g_size: [c_uint; 2usize],
        pub __g1_orig_size: c_uint,
        pub __wrefs: c_uint,
        pub __g_signals: [c_uint; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_1 {
        pub __wseq: c_ulonglong,
        pub __wseq32: self::__pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
        pub __low: c_uint,
        pub __high: c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
        assert_eq!(
            size_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq32)
            )
        );
    }
    impl Default for __pthread_cond_s__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__pthread_cond_s__bindgen_ty_1 {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_2 {
        pub __g1_start: c_ulonglong,
        pub __g1_start32: self::__pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
        pub __low: c_uint,
        pub __high: c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
        assert_eq!(
            size_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            align_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start32)
            )
        );
    }
    impl Default for __pthread_cond_s__bindgen_ty_2 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_2 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__pthread_cond_s__bindgen_ty_2 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s() {
        assert_eq!(
            size_of::<__pthread_cond_s>(),
            48usize,
            concat!("Size of: ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            align_of::<__pthread_cond_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    impl Default for __pthread_cond_s {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "__pthread_cond_s {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals )
        }
    }
    pub type pthread_t = c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [c_char; 4usize],
        pub __align: c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutexattr_t() {
        assert_eq!(
            size_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            align_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_mutexattr_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_mutexattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_mutexattr_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [c_char; 4usize],
        pub __align: c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_condattr_t() {
        assert_eq!(
            size_of::<pthread_condattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            align_of::<pthread_condattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_condattr_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_condattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_condattr_t {{ union }}")
        }
    }
    pub type pthread_key_t = c_uint;
    pub type pthread_once_t = c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [c_char; 56usize],
        pub __align: c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_attr_t() {
        assert_eq!(
            size_of::<pthread_attr_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            align_of::<pthread_attr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_attr_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_attr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_attr_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: self::__pthread_mutex_s,
        pub __size: [c_char; 40usize],
        pub __align: c_long,
        _bindgen_union_align: [u64; 5usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        assert_eq!(
            size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_mutex_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_mutex_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_mutex_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: self::__pthread_cond_s,
        pub __size: [c_char; 48usize],
        pub __align: c_longlong,
        _bindgen_union_align: [u64; 6usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_cond_t() {
        assert_eq!(
            size_of::<pthread_cond_t>(),
            48usize,
            concat!("Size of: ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            align_of::<pthread_cond_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_cond_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_cond_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_cond_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: self::__pthread_rwlock_arch_t,
        pub __size: [c_char; 56usize],
        pub __align: c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlock_t() {
        assert_eq!(
            size_of::<pthread_rwlock_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            align_of::<pthread_rwlock_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_rwlock_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_rwlock_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_rwlock_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [c_char; 8usize],
        pub __align: c_long,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlockattr_t() {
        assert_eq!(
            size_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Size of: ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            align_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_rwlockattr_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_rwlockattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_rwlockattr_t {{ union }}")
        }
    }
    pub type pthread_spinlock_t = c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [c_char; 32usize],
        pub __align: c_long,
        _bindgen_union_align: [u64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_barrier_t() {
        assert_eq!(
            size_of::<pthread_barrier_t>(),
            32usize,
            concat!("Size of: ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            align_of::<pthread_barrier_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_barrier_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_barrier_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_barrier_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [c_char; 4usize],
        pub __align: c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrierattr_t() {
        assert_eq!(
            size_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            align_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_barrierattr_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_barrierattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_barrierattr_t {{ union }}")
        }
    }
    extern "C" {
        pub fn random() -> c_long;
    }
    extern "C" {
        pub fn srandom(__seed: c_uint);
    }
    extern "C" {
        pub fn initstate(__seed: c_uint, __statebuf: *mut c_char, __statelen: usize)
            -> *mut c_char;
    }
    extern "C" {
        pub fn setstate(__statebuf: *mut c_char) -> *mut c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: c_int,
        pub rand_deg: c_int,
        pub rand_sep: c_int,
        pub end_ptr: *mut i32,
    }
    #[test]
    fn bindgen_test_layout_random_data() {
        assert_eq!(
            size_of::<random_data>(),
            48usize,
            concat!("Size of: ", stringify!(random_data))
        );
        assert_eq!(
            align_of::<random_data>(),
            8usize,
            concat!("Alignment of ", stringify!(random_data))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(fptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_deg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_sep)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(end_ptr)
            )
        );
    }
    impl Default for random_data {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        pub fn random_r(__buf: *mut self::random_data, __result: *mut i32) -> c_int;
    }
    extern "C" {
        pub fn srandom_r(__seed: c_uint, __buf: *mut self::random_data) -> c_int;
    }
    extern "C" {
        pub fn initstate_r(
            __seed: c_uint,
            __statebuf: *mut c_char,
            __statelen: usize,
            __buf: *mut self::random_data,
        ) -> c_int;
    }
    extern "C" {
        pub fn setstate_r(__statebuf: *mut c_char, __buf: *mut self::random_data) -> c_int;
    }
    extern "C" {
        pub fn rand() -> c_int;
    }
    extern "C" {
        pub fn srand(__seed: c_uint);
    }
    extern "C" {
        pub fn rand_r(__seed: *mut c_uint) -> c_int;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn erand48(__xsubi: *mut c_ushort) -> f64;
    }
    extern "C" {
        pub fn lrand48() -> c_long;
    }
    extern "C" {
        pub fn nrand48(__xsubi: *mut c_ushort) -> c_long;
    }
    extern "C" {
        pub fn mrand48() -> c_long;
    }
    extern "C" {
        pub fn jrand48(__xsubi: *mut c_ushort) -> c_long;
    }
    extern "C" {
        pub fn srand48(__seedval: c_long);
    }
    extern "C" {
        pub fn seed48(__seed16v: *mut c_ushort) -> *mut c_ushort;
    }
    extern "C" {
        pub fn lcong48(__param: *mut c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct drand48_data {
        pub __x: [c_ushort; 3usize],
        pub __old_x: [c_ushort; 3usize],
        pub __c: c_ushort,
        pub __init: c_ushort,
        pub __a: c_ulonglong,
    }
    #[test]
    fn bindgen_test_layout_drand48_data() {
        assert_eq!(
            size_of::<drand48_data>(),
            24usize,
            concat!("Size of: ", stringify!(drand48_data))
        );
        assert_eq!(
            align_of::<drand48_data>(),
            8usize,
            concat!("Alignment of ", stringify!(drand48_data))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__old_x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__c)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__init)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__a)
            )
        );
    }
    extern "C" {
        pub fn drand48_r(__buffer: *mut self::drand48_data, __result: *mut f64) -> c_int;
    }
    extern "C" {
        pub fn erand48_r(
            __xsubi: *mut c_ushort,
            __buffer: *mut self::drand48_data,
            __result: *mut f64,
        ) -> c_int;
    }
    extern "C" {
        pub fn lrand48_r(__buffer: *mut self::drand48_data, __result: *mut c_long) -> c_int;
    }
    extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut c_ushort,
            __buffer: *mut self::drand48_data,
            __result: *mut c_long,
        ) -> c_int;
    }
    extern "C" {
        pub fn mrand48_r(__buffer: *mut self::drand48_data, __result: *mut c_long) -> c_int;
    }
    extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut c_ushort,
            __buffer: *mut self::drand48_data,
            __result: *mut c_long,
        ) -> c_int;
    }
    extern "C" {
        pub fn srand48_r(__seedval: c_long, __buffer: *mut self::drand48_data) -> c_int;
    }
    extern "C" {
        pub fn seed48_r(__seed16v: *mut c_ushort, __buffer: *mut self::drand48_data) -> c_int;
    }
    extern "C" {
        pub fn lcong48_r(__param: *mut c_ushort, __buffer: *mut self::drand48_data) -> c_int;
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn realloc(__ptr: *mut c_void, __size: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn reallocarray(__ptr: *mut c_void, __nmemb: usize, __size: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut c_void);
    }
    extern "C" {
        pub fn alloca(__size: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn valloc(__size: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut c_void,
            __alignment: usize,
            __size: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> c_int;
    }
    extern "C" {
        pub fn at_quick_exit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> c_int;
    }
    extern "C" {
        pub fn on_exit(
            __func: ::std::option::Option<
                unsafe extern "C" fn(__status: c_int, __arg: *mut c_void),
            >,
            __arg: *mut c_void,
        ) -> c_int;
    }
    extern "C" {
        pub fn exit(__status: c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: c_int);
    }
    extern "C" {
        pub fn _Exit(__status: c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn secure_getenv(__name: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn putenv(__string: *mut c_char) -> c_int;
    }
    extern "C" {
        pub fn setenv(__name: *const c_char, __value: *const c_char, __replace: c_int) -> c_int;
    }
    extern "C" {
        pub fn unsetenv(__name: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn clearenv() -> c_int;
    }
    extern "C" {
        pub fn mktemp(__template: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn mkstemp(__template: *mut c_char) -> c_int;
    }
    extern "C" {
        pub fn mkstemp64(__template: *mut c_char) -> c_int;
    }
    extern "C" {
        pub fn mkstemps(__template: *mut c_char, __suffixlen: c_int) -> c_int;
    }
    extern "C" {
        pub fn mkstemps64(__template: *mut c_char, __suffixlen: c_int) -> c_int;
    }
    extern "C" {
        pub fn mkdtemp(__template: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn mkostemp(__template: *mut c_char, __flags: c_int) -> c_int;
    }
    extern "C" {
        pub fn mkostemp64(__template: *mut c_char, __flags: c_int) -> c_int;
    }
    extern "C" {
        pub fn mkostemps(__template: *mut c_char, __suffixlen: c_int, __flags: c_int) -> c_int;
    }
    extern "C" {
        pub fn mkostemps64(__template: *mut c_char, __suffixlen: c_int, __flags: c_int) -> c_int;
    }
    extern "C" {
        pub fn system(__command: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn canonicalize_file_name(__name: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn realpath(__name: *const c_char, __resolved: *mut c_char) -> *mut c_char;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(arg1: *const c_void, arg2: *const c_void) -> c_int,
    >;
    pub type comparison_fn_t = self::__compar_fn_t;
    pub type __compar_d_fn_t = ::std::option::Option<
        unsafe extern "C" fn(arg1: *const c_void, arg2: *const c_void, arg3: *mut c_void) -> c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const c_void,
            __base: *const c_void,
            __nmemb: usize,
            __size: usize,
            __compar: self::__compar_fn_t,
        ) -> *mut c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut c_void,
            __nmemb: usize,
            __size: usize,
            __compar: self::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn qsort_r(
            __base: *mut c_void,
            __nmemb: usize,
            __size: usize,
            __compar: self::__compar_d_fn_t,
            __arg: *mut c_void,
        );
    }
    extern "C" {
        pub fn abs(__x: c_int) -> c_int;
    }
    extern "C" {
        pub fn labs(__x: c_long) -> c_long;
    }
    extern "C" {
        pub fn llabs(__x: c_longlong) -> c_longlong;
    }
    extern "C" {
        pub fn div(__numer: c_int, __denom: c_int) -> self::div_t;
    }
    extern "C" {
        pub fn ldiv(__numer: c_long, __denom: c_long) -> self::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(__numer: c_longlong, __denom: c_longlong) -> self::lldiv_t;
    }
    extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: c_int,
            __decpt: *mut c_int,
            __sign: *mut c_int,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: c_int,
            __decpt: *mut c_int,
            __sign: *mut c_int,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn gcvt(__value: f64, __ndigit: c_int, __buf: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn qecvt(
            __value: f64,
            __ndigit: c_int,
            __decpt: *mut c_int,
            __sign: *mut c_int,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn qfcvt(
            __value: f64,
            __ndigit: c_int,
            __decpt: *mut c_int,
            __sign: *mut c_int,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn qgcvt(__value: f64, __ndigit: c_int, __buf: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: c_int,
            __decpt: *mut c_int,
            __sign: *mut c_int,
            __buf: *mut c_char,
            __len: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: c_int,
            __decpt: *mut c_int,
            __sign: *mut c_int,
            __buf: *mut c_char,
            __len: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn qecvt_r(
            __value: f64,
            __ndigit: c_int,
            __decpt: *mut c_int,
            __sign: *mut c_int,
            __buf: *mut c_char,
            __len: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn qfcvt_r(
            __value: f64,
            __ndigit: c_int,
            __decpt: *mut c_int,
            __sign: *mut c_int,
            __buf: *mut c_char,
            __len: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn mblen(__s: *const c_char, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn mbtowc(__pwc: *mut u32, __s: *const c_char, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut c_char, __wchar: u32) -> c_int;
    }
    extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcstombs(__s: *mut c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    extern "C" {
        pub fn rpmatch(__response: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut c_char,
            __tokens: *const *mut c_char,
            __valuep: *mut *mut c_char,
        ) -> c_int;
    }
    extern "C" {
        pub fn posix_openpt(__oflag: c_int) -> c_int;
    }
    extern "C" {
        pub fn grantpt(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn unlockpt(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn ptsname(__fd: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn ptsname_r(__fd: c_int, __buf: *mut c_char, __buflen: usize) -> c_int;
    }
    extern "C" {
        pub fn getpt() -> c_int;
    }
    extern "C" {
        pub fn getloadavg(__loadavg: *mut f64, __nelem: c_int) -> c_int;
    }
    extern "C" {
        pub fn memcpy(__dest: *mut c_void, __src: *const c_void, __n: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn memmove(__dest: *mut c_void, __src: *const c_void, __n: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn memccpy(
            __dest: *mut c_void,
            __src: *const c_void,
            __c: c_int,
            __n: usize,
        ) -> *mut c_void;
    }
    extern "C" {
        pub fn memset(__s: *mut c_void, __c: c_int, __n: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn memcmp(__s1: *const c_void, __s2: *const c_void, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn memchr(__s: *const c_void, __c: c_int, __n: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn rawmemchr(__s: *const c_void, __c: c_int) -> *mut c_void;
    }
    extern "C" {
        pub fn memrchr(__s: *const c_void, __c: c_int, __n: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn strcpy(__dest: *mut c_char, __src: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn strncpy(__dest: *mut c_char, __src: *const c_char, __n: usize) -> *mut c_char;
    }
    extern "C" {
        pub fn strcat(__dest: *mut c_char, __src: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn strncat(__dest: *mut c_char, __src: *const c_char, __n: usize) -> *mut c_char;
    }
    extern "C" {
        pub fn strcmp(__s1: *const c_char, __s2: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn strncmp(__s1: *const c_char, __s2: *const c_char, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn strcoll(__s1: *const c_char, __s2: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn strxfrm(__dest: *mut c_char, __src: *const c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn strcoll_l(__s1: *const c_char, __s2: *const c_char, __l: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn strxfrm_l(
            __dest: *mut c_char,
            __src: *const c_char,
            __n: usize,
            __l: self::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strdup(__s: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn strndup(__string: *const c_char, __n: usize) -> *mut c_char;
    }
    extern "C" {
        pub fn strchr(__s: *const c_char, __c: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn strrchr(__s: *const c_char, __c: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn strchrnul(__s: *const c_char, __c: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn strcspn(__s: *const c_char, __reject: *const c_char) -> usize;
    }
    extern "C" {
        pub fn strspn(__s: *const c_char, __accept: *const c_char) -> usize;
    }
    extern "C" {
        pub fn strpbrk(__s: *const c_char, __accept: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn strstr(__haystack: *const c_char, __needle: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn strtok(__s: *mut c_char, __delim: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn __strtok_r(
            __s: *mut c_char,
            __delim: *const c_char,
            __save_ptr: *mut *mut c_char,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn strtok_r(
            __s: *mut c_char,
            __delim: *const c_char,
            __save_ptr: *mut *mut c_char,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn strcasestr(__haystack: *const c_char, __needle: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn memmem(
            __haystack: *const c_void,
            __haystacklen: usize,
            __needle: *const c_void,
            __needlelen: usize,
        ) -> *mut c_void;
    }
    extern "C" {
        pub fn __mempcpy(__dest: *mut c_void, __src: *const c_void, __n: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn mempcpy(__dest: *mut c_void, __src: *const c_void, __n: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn strlen(__s: *const c_char) -> usize;
    }
    extern "C" {
        pub fn strnlen(__string: *const c_char, __maxlen: usize) -> usize;
    }
    extern "C" {
        pub fn strerror(__errnum: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn strerror_r(__errnum: c_int, __buf: *mut c_char, __buflen: usize) -> *mut c_char;
    }
    extern "C" {
        pub fn strerror_l(__errnum: c_int, __l: self::locale_t) -> *mut c_char;
    }
    extern "C" {
        pub fn bcmp(__s1: *const c_void, __s2: *const c_void, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn bcopy(__src: *const c_void, __dest: *mut c_void, __n: usize);
    }
    extern "C" {
        pub fn bzero(__s: *mut c_void, __n: usize);
    }
    extern "C" {
        pub fn index(__s: *const c_char, __c: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn rindex(__s: *const c_char, __c: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn ffs(__i: c_int) -> c_int;
    }
    extern "C" {
        pub fn ffsl(__l: c_long) -> c_int;
    }
    extern "C" {
        pub fn ffsll(__ll: c_longlong) -> c_int;
    }
    extern "C" {
        pub fn strcasecmp(__s1: *const c_char, __s2: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn strncasecmp(__s1: *const c_char, __s2: *const c_char, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn strcasecmp_l(
            __s1: *const c_char,
            __s2: *const c_char,
            __loc: self::locale_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn strncasecmp_l(
            __s1: *const c_char,
            __s2: *const c_char,
            __n: usize,
            __loc: self::locale_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn explicit_bzero(__s: *mut c_void, __n: usize);
    }
    extern "C" {
        pub fn strsep(__stringp: *mut *mut c_char, __delim: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn strsignal(__sig: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn __stpcpy(__dest: *mut c_char, __src: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn stpcpy(__dest: *mut c_char, __src: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn __stpncpy(__dest: *mut c_char, __src: *const c_char, __n: usize) -> *mut c_char;
    }
    extern "C" {
        pub fn stpncpy(__dest: *mut c_char, __src: *const c_char, __n: usize) -> *mut c_char;
    }
    extern "C" {
        pub fn strverscmp(__s1: *const c_char, __s2: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn strfry(__string: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn memfrob(__s: *mut c_void, __n: usize) -> *mut c_void;
    }
    extern "C" {
        pub fn basename(__filename: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn __assert_fail(
            __assertion: *const c_char,
            __file: *const c_char,
            __line: c_uint,
            __function: *const c_char,
        );
    }
    extern "C" {
        pub fn __assert_perror_fail(
            __errnum: c_int,
            __file: *const c_char,
            __line: c_uint,
            __function: *const c_char,
        );
    }
    extern "C" {
        pub fn __assert(__assertion: *const c_char, __file: *const c_char, __line: c_int);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX() {
        assert_eq!(
            size_of::<t_CKCOMPLEX>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            align_of::<t_CKCOMPLEX>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(im)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKPOLAR {
        pub modulus: f64,
        pub phase: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKPOLAR() {
        assert_eq!(
            size_of::<t_CKPOLAR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            align_of::<t_CKPOLAR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).modulus as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(modulus)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(phase)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC3 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC3() {
        assert_eq!(
            size_of::<t_CKVEC3>(),
            24usize,
            concat!("Size of: ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            align_of::<t_CKVEC3>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(z)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC4 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
        pub w: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC4() {
        assert_eq!(
            size_of::<t_CKVEC4>(),
            32usize,
            concat!("Size of: ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            align_of::<t_CKVEC4>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(z)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).w as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(w)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct t_CKVECTOR {
        pub N: c_ulong,
        pub values: *mut f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVECTOR() {
        assert_eq!(
            size_of::<t_CKVECTOR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            align_of::<t_CKVECTOR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).N as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(N)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).values as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(values)
            )
        );
    }
    impl Default for t_CKVECTOR {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type c_str = *mut c_char;
    pub type c_constr = *const c_char;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX_SAMPLE {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX_SAMPLE() {
        assert_eq!(
            size_of::<t_CKCOMPLEX_SAMPLE>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            align_of::<t_CKCOMPLEX_SAMPLE>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(im)
            )
        );
    }
    pub type U_boolList = *mut self::U_boolList_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct U_boolList_ {
        pub head: c_ulong,
        pub tail: self::U_boolList,
    }
    #[test]
    fn bindgen_test_layout_U_boolList_() {
        assert_eq!(
            size_of::<U_boolList_>(),
            16usize,
            concat!("Size of: ", stringify!(U_boolList_))
        );
        assert_eq!(
            align_of::<U_boolList_>(),
            8usize,
            concat!("Alignment of ", stringify!(U_boolList_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<U_boolList_>())).head as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(U_boolList_),
                "::",
                stringify!(head)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<U_boolList_>())).tail as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(U_boolList_),
                "::",
                stringify!(tail)
            )
        );
    }
    impl Default for U_boolList_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        pub fn checked_malloc(size: c_int) -> *mut c_void;
    }
    extern "C" {
        pub fn cc_str(arg1: *mut c_char) -> self::c_str;
    }
    extern "C" {
        pub fn U_BoolList(head: c_ulong, tail: self::U_boolList) -> self::U_boolList;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct S_Symbol_ {
        _unused: [u8; 0],
    }
    pub type S_Symbol = *mut self::S_Symbol_;
    extern "C" {
        pub fn insert_symbol(arg1: self::c_constr) -> self::S_Symbol;
    }
    extern "C" {
        pub fn S_name(arg1: self::S_Symbol) -> self::c_str;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TAB_table_ {
        _unused: [u8; 0],
    }
    pub type S_table = *mut self::TAB_table_;
    extern "C" {
        pub fn S_empty() -> self::S_table;
    }
    extern "C" {
        pub fn S_empty2(size: c_uint) -> self::S_table;
    }
    extern "C" {
        pub fn S_enter(t: self::S_table, sym: self::S_Symbol, value: *mut c_void);
    }
    extern "C" {
        pub fn S_enter2(t: self::S_table, str: self::c_constr, value: *mut c_void);
    }
    extern "C" {
        pub fn S_look(t: self::S_table, sym: self::S_Symbol) -> *mut c_void;
    }
    extern "C" {
        pub fn S_look2(t: self::S_table, str: self::c_constr) -> *mut c_void;
    }
    extern "C" {
        pub fn S_beginScope(t: self::S_table);
    }
    extern "C" {
        pub fn S_endScope(t: self::S_table);
    }
    extern "C" {
        pub fn S_pop(t: self::S_table);
    }
    pub type a_Pos = c_int;
    pub const ae_Operator_ae_op_plus: self::ae_Operator = 0;
    pub const ae_Operator_ae_op_minus: self::ae_Operator = 1;
    pub const ae_Operator_ae_op_times: self::ae_Operator = 2;
    pub const ae_Operator_ae_op_divide: self::ae_Operator = 3;
    pub const ae_Operator_ae_op_eq: self::ae_Operator = 4;
    pub const ae_Operator_ae_op_neq: self::ae_Operator = 5;
    pub const ae_Operator_ae_op_lt: self::ae_Operator = 6;
    pub const ae_Operator_ae_op_le: self::ae_Operator = 7;
    pub const ae_Operator_ae_op_gt: self::ae_Operator = 8;
    pub const ae_Operator_ae_op_ge: self::ae_Operator = 9;
    pub const ae_Operator_ae_op_and: self::ae_Operator = 10;
    pub const ae_Operator_ae_op_or: self::ae_Operator = 11;
    pub const ae_Operator_ae_op_s_or: self::ae_Operator = 12;
    pub const ae_Operator_ae_op_s_and: self::ae_Operator = 13;
    pub const ae_Operator_ae_op_shift_left: self::ae_Operator = 14;
    pub const ae_Operator_ae_op_shift_right: self::ae_Operator = 15;
    pub const ae_Operator_ae_op_percent: self::ae_Operator = 16;
    pub const ae_Operator_ae_op_s_xor: self::ae_Operator = 17;
    pub const ae_Operator_ae_op_chuck: self::ae_Operator = 18;
    pub const ae_Operator_ae_op_plus_chuck: self::ae_Operator = 19;
    pub const ae_Operator_ae_op_minus_chuck: self::ae_Operator = 20;
    pub const ae_Operator_ae_op_times_chuck: self::ae_Operator = 21;
    pub const ae_Operator_ae_op_divide_chuck: self::ae_Operator = 22;
    pub const ae_Operator_ae_op_s_and_chuck: self::ae_Operator = 23;
    pub const ae_Operator_ae_op_s_or_chuck: self::ae_Operator = 24;
    pub const ae_Operator_ae_op_s_xor_chuck: self::ae_Operator = 25;
    pub const ae_Operator_ae_op_shift_right_chuck: self::ae_Operator = 26;
    pub const ae_Operator_ae_op_shift_left_chuck: self::ae_Operator = 27;
    pub const ae_Operator_ae_op_percent_chuck: self::ae_Operator = 28;
    pub const ae_Operator_ae_op_s_chuck: self::ae_Operator = 29;
    pub const ae_Operator_ae_op_plusplus: self::ae_Operator = 30;
    pub const ae_Operator_ae_op_minusminus: self::ae_Operator = 31;
    pub const ae_Operator_ae_op_tilda: self::ae_Operator = 32;
    pub const ae_Operator_ae_op_exclamation: self::ae_Operator = 33;
    pub const ae_Operator_ae_op_at_chuck: self::ae_Operator = 34;
    pub const ae_Operator_ae_op_unchuck: self::ae_Operator = 35;
    pub const ae_Operator_ae_op_upchuck: self::ae_Operator = 36;
    pub const ae_Operator_ae_op_spork: self::ae_Operator = 37;
    pub const ae_Operator_ae_op_typeof: self::ae_Operator = 38;
    pub const ae_Operator_ae_op_sizeof: self::ae_Operator = 39;
    pub const ae_Operator_ae_op_new: self::ae_Operator = 40;
    pub const ae_Operator_ae_op_arrow_left: self::ae_Operator = 41;
    pub const ae_Operator_ae_op_arrow_right: self::ae_Operator = 42;
    pub type ae_Operator = u32;
    extern "C" {
        pub fn op2str(op: self::ae_Operator) -> *const c_char;
    }
    pub const ae_Keyword_ae_key_this: self::ae_Keyword = 0;
    pub const ae_Keyword_ae_key_me: self::ae_Keyword = 1;
    pub const ae_Keyword_ae_key_func: self::ae_Keyword = 2;
    pub const ae_Keyword_ae_key_public: self::ae_Keyword = 3;
    pub const ae_Keyword_ae_key_protected: self::ae_Keyword = 4;
    pub const ae_Keyword_ae_key_private: self::ae_Keyword = 5;
    pub const ae_Keyword_ae_key_static: self::ae_Keyword = 6;
    pub const ae_Keyword_ae_key_instance: self::ae_Keyword = 7;
    pub const ae_Keyword_ae_key_abstract: self::ae_Keyword = 8;
    pub type ae_Keyword = u32;
    pub type a_Program = *mut self::a_Program_;
    pub type a_Section = *mut self::a_Section_;
    pub type a_Stmt_List = *mut self::a_Stmt_List_;
    pub type a_Class_Def = *mut self::a_Class_Def_;
    pub type a_Func_Def = *mut self::a_Func_Def_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Code_Segment_ {
        _unused: [u8; 0],
    }
    pub type a_Code_Segment = *mut self::a_Code_Segment_;
    pub type a_Stmt = *mut self::a_Stmt_;
    pub type a_Exp = *mut self::a_Exp_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Exp_Chuck_ {
        _unused: [u8; 0],
    }
    pub type a_Exp_Chuck = *mut self::a_Exp_Chuck_;
    pub type a_Exp_Binary = *mut self::a_Exp_Binary_;
    pub type a_Exp_Cast = *mut self::a_Exp_Cast_;
    pub type a_Exp_Unary = *mut self::a_Exp_Unary_;
    pub type a_Exp_Postfix = *mut self::a_Exp_Postfix_;
    pub type a_Exp_Primary = *mut self::a_Exp_Primary_;
    pub type a_Exp_Dur = *mut self::a_Exp_Dur_;
    pub type a_Exp_Array = *mut self::a_Exp_Array_;
    pub type a_Exp_Func_Call = *mut self::a_Exp_Func_Call_;
    pub type a_Exp_Dot_Member = *mut self::a_Exp_Dot_Member_;
    pub type a_Exp_If = *mut self::a_Exp_If_;
    pub type a_Exp_Decl = *mut self::a_Exp_Decl_;
    pub type a_Exp_Hack = *mut self::a_Exp_Hack_;
    pub type a_Stmt_Code = *mut self::a_Stmt_Code_;
    pub type a_Stmt_If = *mut self::a_Stmt_If_;
    pub type a_Stmt_While = *mut self::a_Stmt_While_;
    pub type a_Stmt_Until = *mut self::a_Stmt_Until_;
    pub type a_Stmt_For = *mut self::a_Stmt_For_;
    pub type a_Stmt_Loop = *mut self::a_Stmt_Loop_;
    pub type a_Stmt_Switch = *mut self::a_Stmt_Switch_;
    pub type a_Stmt_Break = *mut self::a_Stmt_Break_;
    pub type a_Stmt_Continue = *mut self::a_Stmt_Continue_;
    pub type a_Stmt_Return = *mut self::a_Stmt_Return_;
    pub type a_Stmt_Case = *mut self::a_Stmt_Case_;
    pub type a_Stmt_GotoLabel = *mut self::a_Stmt_GotoLabel_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Decl_ {
        _unused: [u8; 0],
    }
    pub type a_Decl = *mut self::a_Decl_;
    pub type a_Var_Decl = *mut self::a_Var_Decl_;
    pub type a_Var_Decl_List = *mut self::a_Var_Decl_List_;
    pub type a_Type_Decl = *mut self::a_Type_Decl_;
    pub type a_Arg_List = *mut self::a_Arg_List_;
    pub type a_Id_List = *mut self::a_Id_List_;
    pub type a_Class_Ext = *mut self::a_Class_Ext_;
    pub type a_Class_Body = *mut self::a_Class_Body_;
    pub type a_Array_Sub = *mut self::a_Array_Sub_;
    pub type a_Complex = *mut self::a_Complex_;
    pub type a_Polar = *mut self::a_Polar_;
    pub type a_Vec = *mut self::a_Vec_;
    pub type t_CKTYPE = *mut self::Chuck_Type;
    pub type t_CKVALUE = *mut self::Chuck_Value;
    pub type t_CKFUNC = *mut self::Chuck_Func;
    pub type t_CKNSPC = *mut self::Chuck_Namespace;
    pub type t_CKVMCODE = *mut self::Chuck_VM_Code;
    extern "C" {
        pub fn new_program(section: self::a_Section, pos: c_int) -> self::a_Program;
    }
    extern "C" {
        pub fn prepend_program(
            section: self::a_Section,
            program: self::a_Program,
            pos: c_int,
        ) -> self::a_Program;
    }
    extern "C" {
        pub fn new_section_stmt(stmt_list: self::a_Stmt_List, pos: c_int) -> self::a_Section;
    }
    extern "C" {
        pub fn new_section_func_def(func_def: self::a_Func_Def, pos: c_int) -> self::a_Section;
    }
    extern "C" {
        pub fn new_section_class_def(class_def: self::a_Class_Def, pos: c_int) -> self::a_Section;
    }
    extern "C" {
        pub fn new_stmt_list(stmt: self::a_Stmt, pos: c_int) -> self::a_Stmt_List;
    }
    extern "C" {
        pub fn prepend_stmt_list(
            stmt: self::a_Stmt,
            stmt_list: self::a_Stmt_List,
            pos: c_int,
        ) -> self::a_Stmt_List;
    }
    extern "C" {
        pub fn new_stmt_from_expression(exp: self::a_Exp, pos: c_int) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_code(code: self::a_Stmt_List, pos: c_int) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_while(
            cond: self::a_Exp,
            body: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_do_while(
            cond: self::a_Exp,
            body: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_until(
            cond: self::a_Exp,
            body: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_do_until(
            cond: self::a_Exp,
            body: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_for(
            c1: self::a_Stmt,
            c2: self::a_Stmt,
            c3: self::a_Exp,
            body: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_loop(
            cond: self::a_Exp,
            body: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_if(
            cond: self::a_Exp,
            if_body: self::a_Stmt,
            else_body: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_switch(exp: self::a_Exp, pos: c_int) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_break(pos: c_int) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_continue(pos: c_int) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_return(exp: self::a_Exp, pos: c_int) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_label(xid: self::c_str, pos: c_int) -> self::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_case(exp: self::a_Exp, pos: c_int) -> self::a_Stmt;
    }
    extern "C" {
        pub fn prepend_expression(exp: self::a_Exp, list: self::a_Exp, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_binary(
            lhs: self::a_Exp,
            oper: self::ae_Operator,
            rhs: self::a_Exp,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary(
            oper: self::ae_Operator,
            exp: self::a_Exp,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary2(
            oper: self::ae_Operator,
            type_: self::a_Type_Decl,
            array: self::a_Array_Sub,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary3(
            oper: self::ae_Operator,
            code: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_cast(
            type_: self::a_Type_Decl,
            exp: self::a_Exp,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_array(
            base: self::a_Exp,
            indices: self::a_Array_Sub,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_array_lit(exp_list: self::a_Array_Sub, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_func_call(
            base: self::a_Exp,
            args: self::a_Exp,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_member_dot(
            base: self::a_Exp,
            member: self::c_str,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_postfix(
            base: self::a_Exp,
            op: self::ae_Operator,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_dur(base: self::a_Exp, unit: self::a_Exp, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_id(xid: self::c_str, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_int(num: c_long, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_uint(num: c_ulong, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_float(num: f64, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_str(str: self::c_str, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_char(chr: self::c_str, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_if(
            cond: self::a_Exp,
            lhs: self::a_Exp,
            rhs: self::a_Exp,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_complex(arg1: self::a_Complex, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_polar(arg1: self::a_Polar, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_vec(arg1: self::a_Vec, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl_external(
            type_decl: self::a_Type_Decl,
            var_decl_list: self::a_Var_Decl_List,
            is_static: c_int,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl_global(
            type_decl: self::a_Type_Decl,
            var_decl_list: self::a_Var_Decl_List,
            is_static: c_int,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl(
            type_decl: self::a_Type_Decl,
            var_decl_list: self::a_Var_Decl_List,
            is_static: c_int,
            pos: c_int,
        ) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_hack(exp: self::a_Exp, pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_nil(pos: c_int) -> self::a_Exp;
    }
    extern "C" {
        pub fn new_var_decl_list(var_decl: self::a_Var_Decl, pos: c_int) -> self::a_Var_Decl_List;
    }
    extern "C" {
        pub fn prepend_var_decl_list(
            var_decl: self::a_Var_Decl,
            list: self::a_Var_Decl_List,
            pos: c_int,
        ) -> self::a_Var_Decl_List;
    }
    extern "C" {
        pub fn new_var_decl(
            xid: self::c_constr,
            array: self::a_Array_Sub,
            pos: c_int,
        ) -> self::a_Var_Decl;
    }
    extern "C" {
        pub fn new_type_decl(xid: self::a_Id_List, ref_: c_int, pos: c_int) -> self::a_Type_Decl;
    }
    extern "C" {
        pub fn add_type_decl_array(
            type_decl: self::a_Type_Decl,
            array: self::a_Array_Sub,
            pos: c_int,
        ) -> self::a_Type_Decl;
    }
    extern "C" {
        pub fn new_arg_list(
            type_decl: self::a_Type_Decl,
            var_decl: self::a_Var_Decl,
            pos: c_int,
        ) -> self::a_Arg_List;
    }
    extern "C" {
        pub fn prepend_arg_list(
            type_decl: self::a_Type_Decl,
            var_decl: self::a_Var_Decl,
            arg_list: self::a_Arg_List,
            pos: c_int,
        ) -> self::a_Arg_List;
    }
    extern "C" {
        pub fn new_array_sub(exp: self::a_Exp, pos: c_int) -> self::a_Array_Sub;
    }
    extern "C" {
        pub fn prepend_array_sub(
            array: self::a_Array_Sub,
            exp: self::a_Exp,
            pos: c_int,
        ) -> self::a_Array_Sub;
    }
    extern "C" {
        pub fn new_complex(re: self::a_Exp, pos: c_int) -> self::a_Complex;
    }
    extern "C" {
        pub fn new_polar(mod_: self::a_Exp, pos: c_int) -> self::a_Polar;
    }
    extern "C" {
        pub fn new_vec(e: self::a_Exp, pos: c_int) -> self::a_Vec;
    }
    extern "C" {
        pub fn new_class_def(
            class_decl: self::ae_Keyword,
            xid: self::a_Id_List,
            ext: self::a_Class_Ext,
            body: self::a_Class_Body,
            pos: c_int,
        ) -> self::a_Class_Def;
    }
    extern "C" {
        pub fn new_class_body(section: self::a_Section, pos: c_int) -> self::a_Class_Body;
    }
    extern "C" {
        pub fn prepend_class_body(
            section: self::a_Section,
            body: self::a_Class_Body,
            pos: c_int,
        ) -> self::a_Class_Body;
    }
    extern "C" {
        pub fn new_class_ext(
            extend_id: self::a_Id_List,
            impl_list: self::a_Id_List,
            pos: c_int,
        ) -> self::a_Class_Ext;
    }
    extern "C" {
        pub fn new_iface_def(
            class_decl: self::ae_Keyword,
            xid: self::a_Id_List,
            ext: self::a_Class_Ext,
            body: self::a_Class_Body,
            pos: c_int,
        ) -> self::a_Class_Def;
    }
    extern "C" {
        pub fn new_id_list(xid: self::c_constr, pos: c_int) -> self::a_Id_List;
    }
    extern "C" {
        pub fn prepend_id_list(
            xid: self::c_constr,
            list: self::a_Id_List,
            pos: c_int,
        ) -> self::a_Id_List;
    }
    extern "C" {
        pub fn clean_exp(exp: self::a_Exp);
    }
    extern "C" {
        pub fn new_func_def(
            func_decl: self::ae_Keyword,
            static_decl: self::ae_Keyword,
            type_decl: self::a_Type_Decl,
            name: self::c_str,
            arg_list: self::a_Arg_List,
            code: self::a_Stmt,
            pos: c_int,
        ) -> self::a_Func_Def;
    }
    extern "C" {
        pub fn delete_id_list(x: self::a_Id_List);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Binary_ {
        pub lhs: self::a_Exp,
        pub op: self::ae_Operator,
        pub rhs: self::a_Exp,
        pub ck_func: self::t_CKFUNC,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Binary_() {
        assert_eq!(
            size_of::<a_Exp_Binary_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Exp_Binary_))
        );
        assert_eq!(
            align_of::<a_Exp_Binary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Binary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).lhs as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(lhs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).op as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).rhs as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(rhs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).ck_func as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Binary_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Cast_ {
        pub type_: self::a_Type_Decl,
        pub exp: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Cast_() {
        assert_eq!(
            size_of::<a_Exp_Cast_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Cast_))
        );
        assert_eq!(
            align_of::<a_Exp_Cast_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Cast_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Cast_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Unary_ {
        pub op: self::ae_Operator,
        pub exp: self::a_Exp,
        pub type_: self::a_Type_Decl,
        pub array: self::a_Array_Sub,
        pub code: self::a_Stmt,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Unary_() {
        assert_eq!(
            size_of::<a_Exp_Unary_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Unary_))
        );
        assert_eq!(
            align_of::<a_Exp_Unary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Unary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).op as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).type_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).array as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).code as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Unary_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Postfix_ {
        pub exp: self::a_Exp,
        pub op: self::ae_Operator,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Postfix_() {
        assert_eq!(
            size_of::<a_Exp_Postfix_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Exp_Postfix_))
        );
        assert_eq!(
            align_of::<a_Exp_Postfix_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Postfix_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).op as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).linepos as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Postfix_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Dur_ {
        pub base: self::a_Exp,
        pub unit: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Dur_() {
        assert_eq!(
            size_of::<a_Exp_Dur_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Dur_))
        );
        assert_eq!(
            align_of::<a_Exp_Dur_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Dur_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).unit as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(unit)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Dur_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Array_ {
        pub base: self::a_Exp,
        pub indices: self::a_Array_Sub,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Array_() {
        assert_eq!(
            size_of::<a_Exp_Array_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Array_))
        );
        assert_eq!(
            align_of::<a_Exp_Array_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Array_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).indices as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(indices)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Array_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Func_Call_ {
        pub func: self::a_Exp,
        pub args: self::a_Exp,
        pub ret_type: self::t_CKTYPE,
        pub ck_func: self::t_CKFUNC,
        pub ck_vm_code: self::t_CKVMCODE,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Func_Call_() {
        assert_eq!(
            size_of::<a_Exp_Func_Call_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Func_Call_))
        );
        assert_eq!(
            align_of::<a_Exp_Func_Call_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Func_Call_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).func as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).args as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ret_type as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ret_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_func as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_vm_code as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ck_vm_code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Func_Call_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Dot_Member_ {
        pub base: self::a_Exp,
        pub t_base: self::t_CKTYPE,
        pub xid: self::S_Symbol,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Dot_Member_() {
        assert_eq!(
            size_of::<a_Exp_Dot_Member_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_Dot_Member_))
        );
        assert_eq!(
            align_of::<a_Exp_Dot_Member_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Dot_Member_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).t_base as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(t_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).xid as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Dot_Member_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_If_ {
        pub cond: self::a_Exp,
        pub if_exp: self::a_Exp,
        pub else_exp: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_If_() {
        assert_eq!(
            size_of::<a_Exp_If_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_If_))
        );
        assert_eq!(
            align_of::<a_Exp_If_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_If_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).if_exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(if_exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).else_exp as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(else_exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_If_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Decl_ {
        pub type_: self::a_Type_Decl,
        pub var_decl_list: self::a_Var_Decl_List,
        pub num_var_decls: c_int,
        pub is_static: c_int,
        pub is_global: c_int,
        pub ck_type: self::t_CKTYPE,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Decl_() {
        assert_eq!(
            size_of::<a_Exp_Decl_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Decl_))
        );
        assert_eq!(
            align_of::<a_Exp_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).var_decl_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(var_decl_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).num_var_decls as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(num_var_decls)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_static as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(is_static)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_global as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(is_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).ck_type as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(ck_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Decl_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Hack_ {
        pub exp: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Hack_() {
        assert_eq!(
            size_of::<a_Exp_Hack_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Exp_Hack_))
        );
        assert_eq!(
            align_of::<a_Exp_Hack_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Hack_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Hack_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Var_Decl_List_ {
        pub var_decl: self::a_Var_Decl,
        pub next: self::a_Var_Decl_List,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Var_Decl_List_() {
        assert_eq!(
            size_of::<a_Var_Decl_List_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Var_Decl_List_))
        );
        assert_eq!(
            align_of::<a_Var_Decl_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Var_Decl_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).var_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Var_Decl_List_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Var_Decl_ {
        pub xid: self::S_Symbol,
        pub var_decl: self::a_Var_Decl,
        pub array: self::a_Array_Sub,
        pub value: self::t_CKVALUE,
        pub addr: *mut c_void,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Var_Decl_() {
        assert_eq!(
            size_of::<a_Var_Decl_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Var_Decl_))
        );
        assert_eq!(
            align_of::<a_Var_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Var_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).var_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).array as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).value as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).addr as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Var_Decl_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Type_Decl_ {
        pub xid: self::a_Id_List,
        pub array: self::a_Array_Sub,
        pub ref_: c_int,
        pub linepos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Type_Decl_() {
        assert_eq!(
            size_of::<a_Type_Decl_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Type_Decl_))
        );
        assert_eq!(
            align_of::<a_Type_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Type_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).array as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).ref_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(ref_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).linepos as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Type_Decl_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Array_Sub_ {
        pub depth: c_ulong,
        pub exp_list: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Exp,
        pub err_num: c_int,
        pub err_pos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Array_Sub_() {
        assert_eq!(
            size_of::<a_Array_Sub_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Array_Sub_))
        );
        assert_eq!(
            align_of::<a_Array_Sub_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Array_Sub_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).depth as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).exp_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(exp_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(self_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_num as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(err_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_pos as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(err_pos)
            )
        );
    }
    impl Default for a_Array_Sub_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Arg_List_ {
        pub type_decl: self::a_Type_Decl,
        pub var_decl: self::a_Var_Decl,
        pub type_: self::t_CKTYPE,
        pub next: self::a_Arg_List,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Arg_List_() {
        assert_eq!(
            size_of::<a_Arg_List_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Arg_List_))
        );
        assert_eq!(
            align_of::<a_Arg_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Arg_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(type_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).var_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).next as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Arg_List_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Complex_ {
        pub re: self::a_Exp,
        pub im: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Complex_() {
        assert_eq!(
            size_of::<a_Complex_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Complex_))
        );
        assert_eq!(
            align_of::<a_Complex_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Complex_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(im)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Complex_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Polar_ {
        pub mod_: self::a_Exp,
        pub phase: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Polar_() {
        assert_eq!(
            size_of::<a_Polar_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Polar_))
        );
        assert_eq!(
            align_of::<a_Polar_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Polar_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).mod_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(mod_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(phase)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Polar_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Vec_ {
        pub args: self::a_Exp,
        pub numdims: c_int,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Vec_() {
        assert_eq!(
            size_of::<a_Vec_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Vec_))
        );
        assert_eq!(
            align_of::<a_Vec_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Vec_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).args as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).numdims as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(numdims)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).linepos as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Vec_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub const ae_Exp_Primary_Type_ae_primary_var: self::ae_Exp_Primary_Type = 0;
    pub const ae_Exp_Primary_Type_ae_primary_num: self::ae_Exp_Primary_Type = 1;
    pub const ae_Exp_Primary_Type_ae_primary_float: self::ae_Exp_Primary_Type = 2;
    pub const ae_Exp_Primary_Type_ae_primary_str: self::ae_Exp_Primary_Type = 3;
    pub const ae_Exp_Primary_Type_ae_primary_array: self::ae_Exp_Primary_Type = 4;
    pub const ae_Exp_Primary_Type_ae_primary_exp: self::ae_Exp_Primary_Type = 5;
    pub const ae_Exp_Primary_Type_ae_primary_hack: self::ae_Exp_Primary_Type = 6;
    pub const ae_Exp_Primary_Type_ae_primary_complex: self::ae_Exp_Primary_Type = 7;
    pub const ae_Exp_Primary_Type_ae_primary_polar: self::ae_Exp_Primary_Type = 8;
    pub const ae_Exp_Primary_Type_ae_primary_vec: self::ae_Exp_Primary_Type = 9;
    pub const ae_Exp_Primary_Type_ae_primary_char: self::ae_Exp_Primary_Type = 10;
    pub const ae_Exp_Primary_Type_ae_primary_nil: self::ae_Exp_Primary_Type = 11;
    pub type ae_Exp_Primary_Type = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Exp_Primary_ {
        pub s_type: self::ae_Exp_Primary_Type,
        pub value: self::t_CKVALUE,
        pub __bindgen_anon_1: self::a_Exp_Primary___bindgen_ty_1,
        pub linepos: c_int,
        pub self_: self::a_Exp,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Exp_Primary___bindgen_ty_1 {
        pub var: self::S_Symbol,
        pub num: c_long,
        pub fnum: f64,
        pub str: self::c_str,
        pub chr: self::c_str,
        pub array: self::a_Array_Sub,
        pub exp: self::a_Exp,
        pub complex: self::a_Complex,
        pub polar: self::a_Polar,
        pub vec: self::a_Vec,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Primary___bindgen_ty_1() {
        assert_eq!(
            size_of::<a_Exp_Primary___bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(a_Exp_Primary___bindgen_ty_1))
        );
        assert_eq!(
            align_of::<a_Exp_Primary___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Primary___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).var as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(var)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).num as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(num)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).fnum as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(fnum)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).str as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(str)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).chr as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(chr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).array as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).exp as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).complex as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(complex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).polar as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(polar)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).vec as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(vec)
            )
        );
    }
    impl Default for a_Exp_Primary___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_Primary___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Exp_Primary___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Primary_() {
        assert_eq!(
            size_of::<a_Exp_Primary_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_Primary_))
        );
        assert_eq!(
            align_of::<a_Exp_Primary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Primary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).value as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Primary_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_Primary_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "a_Exp_Primary_ {{ s_type: {:?}, value: {:?}, __bindgen_anon_1: {:?}, linepos: {:?}, self: {:?} }}" , self . s_type , self . value , self . __bindgen_anon_1 , self . linepos , self . self_ )
        }
    }
    pub const ae_Exp_Type_ae_exp_binary: self::ae_Exp_Type = 0;
    pub const ae_Exp_Type_ae_exp_unary: self::ae_Exp_Type = 1;
    pub const ae_Exp_Type_ae_exp_cast: self::ae_Exp_Type = 2;
    pub const ae_Exp_Type_ae_exp_postfix: self::ae_Exp_Type = 3;
    pub const ae_Exp_Type_ae_exp_dur: self::ae_Exp_Type = 4;
    pub const ae_Exp_Type_ae_exp_primary: self::ae_Exp_Type = 5;
    pub const ae_Exp_Type_ae_exp_array: self::ae_Exp_Type = 6;
    pub const ae_Exp_Type_ae_exp_func_call: self::ae_Exp_Type = 7;
    pub const ae_Exp_Type_ae_exp_dot_member: self::ae_Exp_Type = 8;
    pub const ae_Exp_Type_ae_exp_if: self::ae_Exp_Type = 9;
    pub const ae_Exp_Type_ae_exp_decl: self::ae_Exp_Type = 10;
    pub type ae_Exp_Type = u32;
    pub const ae_Exp_Meta_ae_meta_value: self::ae_Exp_Meta = 0;
    pub const ae_Exp_Meta_ae_meta_var: self::ae_Exp_Meta = 1;
    pub type ae_Exp_Meta = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Exp_ {
        pub s_type: self::ae_Exp_Type,
        pub s_meta: self::ae_Exp_Meta,
        pub type_: self::t_CKTYPE,
        pub owner: self::t_CKNSPC,
        pub next: self::a_Exp,
        pub group_size: c_ulong,
        pub cast_to: self::t_CKTYPE,
        pub emit_var: c_ulong,
        pub __bindgen_anon_1: self::a_Exp___bindgen_ty_1,
        pub linepos: c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Exp___bindgen_ty_1 {
        pub binary: self::a_Exp_Binary_,
        pub unary: self::a_Exp_Unary_,
        pub cast: self::a_Exp_Cast_,
        pub postfix: self::a_Exp_Postfix_,
        pub dur: self::a_Exp_Dur_,
        pub primary: self::a_Exp_Primary_,
        pub array: self::a_Exp_Array_,
        pub func_call: self::a_Exp_Func_Call_,
        pub dot_member: self::a_Exp_Dot_Member_,
        pub exp_if: self::a_Exp_If_,
        pub decl: self::a_Exp_Decl_,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_a_Exp___bindgen_ty_1() {
        assert_eq!(
            size_of::<a_Exp___bindgen_ty_1>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp___bindgen_ty_1))
        );
        assert_eq!(
            align_of::<a_Exp___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp___bindgen_ty_1))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).binary as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(binary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).unary as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(unary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).cast as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(cast)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).postfix as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(postfix)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dur as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(dur)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).primary as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(primary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).array as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).func_call as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(func_call)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dot_member as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(dot_member)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).exp_if as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(exp_if)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(decl)
            )
        );
    }
    impl Default for a_Exp___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Exp___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Exp_() {
        assert_eq!(
            size_of::<a_Exp_>(),
            120usize,
            concat!("Size of: ", stringify!(a_Exp_))
        );
        assert_eq!(
            align_of::<a_Exp_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_meta as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(s_meta)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).type_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).owner as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).next as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).group_size as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(group_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).cast_to as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(cast_to)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).emit_var as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(emit_var)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).linepos as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Exp_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "a_Exp_ {{ s_type: {:?}, s_meta: {:?}, type: {:?}, owner: {:?}, next: {:?}, group_size: {:?}, cast_to: {:?}, emit_var: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}" , self . s_type , self . s_meta , self . type_ , self . owner , self . next , self . group_size , self . cast_to , self . emit_var , self . __bindgen_anon_1 , self . linepos )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_While_ {
        pub is_do: c_int,
        pub cond: self::a_Exp,
        pub body: self::a_Stmt,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_While_() {
        assert_eq!(
            size_of::<a_Stmt_While_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_While_))
        );
        assert_eq!(
            align_of::<a_Stmt_While_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_While_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).is_do as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(is_do)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).cond as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_While_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Until_ {
        pub is_do: c_int,
        pub cond: self::a_Exp,
        pub body: self::a_Stmt,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Until_() {
        assert_eq!(
            size_of::<a_Stmt_Until_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_Until_))
        );
        assert_eq!(
            align_of::<a_Stmt_Until_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Until_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).is_do as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(is_do)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).cond as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Until_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_For_ {
        pub c1: self::a_Stmt,
        pub c2: self::a_Stmt,
        pub c3: self::a_Exp,
        pub body: self::a_Stmt,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_For_() {
        assert_eq!(
            size_of::<a_Stmt_For_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Stmt_For_))
        );
        assert_eq!(
            align_of::<a_Stmt_For_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_For_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c1 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c2 as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c3 as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).body as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_For_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Loop_ {
        pub cond: self::a_Exp,
        pub body: self::a_Stmt,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Loop_() {
        assert_eq!(
            size_of::<a_Stmt_Loop_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Stmt_Loop_))
        );
        assert_eq!(
            align_of::<a_Stmt_Loop_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Loop_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).body as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Loop_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Code_ {
        pub stmt_list: self::a_Stmt_List,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Code_() {
        assert_eq!(
            size_of::<a_Stmt_Code_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Code_))
        );
        assert_eq!(
            align_of::<a_Stmt_Code_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Code_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).stmt_list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(stmt_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Code_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_If_ {
        pub cond: self::a_Exp,
        pub if_body: self::a_Stmt,
        pub else_body: self::a_Stmt,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_If_() {
        assert_eq!(
            size_of::<a_Stmt_If_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_If_))
        );
        assert_eq!(
            align_of::<a_Stmt_If_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_If_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).if_body as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(if_body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).else_body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(else_body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_If_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Switch_ {
        pub val: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Switch_() {
        assert_eq!(
            size_of::<a_Stmt_Switch_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Switch_))
        );
        assert_eq!(
            align_of::<a_Stmt_Switch_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Switch_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(val)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Switch_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Break_ {
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Break_() {
        assert_eq!(
            size_of::<a_Stmt_Break_>(),
            16usize,
            concat!("Size of: ", stringify!(a_Stmt_Break_))
        );
        assert_eq!(
            align_of::<a_Stmt_Break_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Break_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).linepos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Break_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).self_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Break_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Break_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Continue_ {
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Continue_() {
        assert_eq!(
            size_of::<a_Stmt_Continue_>(),
            16usize,
            concat!("Size of: ", stringify!(a_Stmt_Continue_))
        );
        assert_eq!(
            align_of::<a_Stmt_Continue_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Continue_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).linepos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Continue_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).self_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Continue_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Continue_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Return_ {
        pub val: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Return_() {
        assert_eq!(
            size_of::<a_Stmt_Return_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Return_))
        );
        assert_eq!(
            align_of::<a_Stmt_Return_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Return_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(val)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Return_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Case_ {
        pub exp: self::a_Exp,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Case_() {
        assert_eq!(
            size_of::<a_Stmt_Case_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Case_))
        );
        assert_eq!(
            align_of::<a_Stmt_Case_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Case_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Case_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_GotoLabel_ {
        pub name: self::S_Symbol,
        pub linepos: c_int,
        pub self_: self::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_GotoLabel_() {
        assert_eq!(
            size_of::<a_Stmt_GotoLabel_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_GotoLabel_))
        );
        assert_eq!(
            align_of::<a_Stmt_GotoLabel_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_GotoLabel_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_GotoLabel_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub const ae_Stmt_Type_ae_stmt_exp: self::ae_Stmt_Type = 0;
    pub const ae_Stmt_Type_ae_stmt_while: self::ae_Stmt_Type = 1;
    pub const ae_Stmt_Type_ae_stmt_until: self::ae_Stmt_Type = 2;
    pub const ae_Stmt_Type_ae_stmt_for: self::ae_Stmt_Type = 3;
    pub const ae_Stmt_Type_ae_stmt_loop: self::ae_Stmt_Type = 4;
    pub const ae_Stmt_Type_ae_stmt_if: self::ae_Stmt_Type = 5;
    pub const ae_Stmt_Type_ae_stmt_code: self::ae_Stmt_Type = 6;
    pub const ae_Stmt_Type_ae_stmt_switch: self::ae_Stmt_Type = 7;
    pub const ae_Stmt_Type_ae_stmt_break: self::ae_Stmt_Type = 8;
    pub const ae_Stmt_Type_ae_stmt_continue: self::ae_Stmt_Type = 9;
    pub const ae_Stmt_Type_ae_stmt_return: self::ae_Stmt_Type = 10;
    pub const ae_Stmt_Type_ae_stmt_case: self::ae_Stmt_Type = 11;
    pub const ae_Stmt_Type_ae_stmt_gotolabel: self::ae_Stmt_Type = 12;
    pub type ae_Stmt_Type = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Stmt_ {
        pub s_type: self::ae_Stmt_Type,
        pub skip: c_int,
        pub __bindgen_anon_1: self::a_Stmt___bindgen_ty_1,
        pub linepos: c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Stmt___bindgen_ty_1 {
        pub stmt_exp: self::a_Exp,
        pub stmt_code: self::a_Stmt_Code_,
        pub stmt_while: self::a_Stmt_While_,
        pub stmt_until: self::a_Stmt_Until_,
        pub stmt_loop: self::a_Stmt_Loop_,
        pub stmt_for: self::a_Stmt_For_,
        pub stmt_if: self::a_Stmt_If_,
        pub stmt_switch: self::a_Stmt_Switch_,
        pub stmt_break: self::a_Stmt_Break_,
        pub stmt_continue: self::a_Stmt_Continue_,
        pub stmt_return: self::a_Stmt_Return_,
        pub stmt_case: self::a_Stmt_Case_,
        pub stmt_gotolabel: self::a_Stmt_GotoLabel_,
        _bindgen_union_align: [u64; 6usize],
    }
    #[test]
    fn bindgen_test_layout_a_Stmt___bindgen_ty_1() {
        assert_eq!(
            size_of::<a_Stmt___bindgen_ty_1>(),
            48usize,
            concat!("Size of: ", stringify!(a_Stmt___bindgen_ty_1))
        );
        assert_eq!(
            align_of::<a_Stmt___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_exp as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_exp)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_code as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_code)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_while as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_while)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_until as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_until)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_loop as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_loop)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_for as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_for)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_if as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_if)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_switch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_switch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_break as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_break)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_continue as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_continue)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_return as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_return)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_case as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_case)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_gotolabel as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_gotolabel)
            )
        );
    }
    impl Default for a_Stmt___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Stmt___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Stmt___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_() {
        assert_eq!(
            size_of::<a_Stmt_>(),
            64usize,
            concat!("Size of: ", stringify!(a_Stmt_))
        );
        assert_eq!(
            align_of::<a_Stmt_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).skip as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(skip)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).linepos as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Stmt_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Stmt_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "a_Stmt_ {{ s_type: {:?}, skip: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
                self.s_type, self.skip, self.__bindgen_anon_1, self.linepos
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_List_ {
        pub stmt: self::a_Stmt,
        pub next: self::a_Stmt_List,
        pub linepos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_List_() {
        assert_eq!(
            size_of::<a_Stmt_List_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_List_))
        );
        assert_eq!(
            align_of::<a_Stmt_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).stmt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(stmt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Stmt_List_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Def_ {
        pub decl: self::ae_Keyword,
        pub name: self::a_Id_List,
        pub ext: self::a_Class_Ext,
        pub body: self::a_Class_Body,
        pub type_: self::t_CKTYPE,
        pub iface: c_int,
        pub home: self::t_CKNSPC,
        pub linepos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Def_() {
        assert_eq!(
            size_of::<a_Class_Def_>(),
            64usize,
            concat!("Size of: ", stringify!(a_Class_Def_))
        );
        assert_eq!(
            align_of::<a_Class_Def_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Def_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).name as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).ext as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(ext)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).body as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).iface as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(iface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).home as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(home)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).linepos as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Def_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Ext_ {
        pub extend_id: self::a_Id_List,
        pub impl_list: self::a_Id_List,
        pub linepos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Ext_() {
        assert_eq!(
            size_of::<a_Class_Ext_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Class_Ext_))
        );
        assert_eq!(
            align_of::<a_Class_Ext_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Ext_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).extend_id as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(extend_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).impl_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(impl_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Ext_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Body_ {
        pub section: self::a_Section,
        pub next: self::a_Class_Body,
        pub linepos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Body_() {
        assert_eq!(
            size_of::<a_Class_Body_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Class_Body_))
        );
        assert_eq!(
            align_of::<a_Class_Body_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Body_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).section as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(section)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Body_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Id_List_ {
        pub xid: self::S_Symbol,
        pub next: self::a_Id_List,
        pub linepos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Id_List_() {
        assert_eq!(
            size_of::<a_Id_List_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Id_List_))
        );
        assert_eq!(
            align_of::<a_Id_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Id_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Id_List_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub const ae_Func_Type_ae_func_user: self::ae_Func_Type = 0;
    pub const ae_Func_Type_ae_func_builtin: self::ae_Func_Type = 1;
    pub type ae_Func_Type = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Func_Def_ {
        pub func_decl: self::ae_Keyword,
        pub static_decl: self::ae_Keyword,
        pub type_decl: self::a_Type_Decl,
        pub ret_type: self::t_CKTYPE,
        pub name: self::S_Symbol,
        pub arg_list: self::a_Arg_List,
        pub code: self::a_Stmt,
        pub ck_func: self::t_CKFUNC,
        pub global: c_uint,
        pub s_type: c_uint,
        pub stack_depth: c_uint,
        pub dl_func_ptr: *mut c_void,
        pub linepos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Func_Def_() {
        assert_eq!(
            size_of::<a_Func_Def_>(),
            88usize,
            concat!("Size of: ", stringify!(a_Func_Def_))
        );
        assert_eq!(
            align_of::<a_Func_Def_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Func_Def_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).func_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(func_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).static_decl as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(static_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).type_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(type_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ret_type as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(ret_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).name as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).arg_list as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(arg_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).code as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ck_func as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).global as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).s_type as *const _ as usize },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).stack_depth as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(stack_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).dl_func_ptr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(dl_func_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).linepos as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Func_Def_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub const ae_Section_Type_ae_section_stmt: self::ae_Section_Type = 0;
    pub const ae_Section_Type_ae_section_func: self::ae_Section_Type = 1;
    pub const ae_Section_Type_ae_section_class: self::ae_Section_Type = 2;
    pub type ae_Section_Type = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Section_ {
        pub s_type: self::ae_Section_Type,
        pub __bindgen_anon_1: self::a_Section___bindgen_ty_1,
        pub linepos: c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Section___bindgen_ty_1 {
        pub stmt_list: self::a_Stmt_List,
        pub class_def: self::a_Class_Def,
        pub func_def: self::a_Func_Def,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_a_Section___bindgen_ty_1() {
        assert_eq!(
            size_of::<a_Section___bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(a_Section___bindgen_ty_1))
        );
        assert_eq!(
            align_of::<a_Section___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Section___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).stmt_list as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(stmt_list)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).class_def as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(class_def)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).func_def as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(func_def)
            )
        );
    }
    impl Default for a_Section___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Section___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Section___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Section_() {
        assert_eq!(
            size_of::<a_Section_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Section_))
        );
        assert_eq!(
            align_of::<a_Section_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Section_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Section_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Section_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Section_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Section_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "a_Section_ {{ s_type: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
                self.s_type, self.__bindgen_anon_1, self.linepos
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Program_ {
        pub section: self::a_Section,
        pub next: self::a_Program,
        pub linepos: c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Program_() {
        assert_eq!(
            size_of::<a_Program_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Program_))
        );
        assert_eq!(
            align_of::<a_Program_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Program_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).section as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(section)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Program_ {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type __gnuc_va_list = self::__builtin_va_list;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: c_int,
        pub __value: self::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: c_uint,
        pub __wchb: [c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    impl Default for __mbstate_t__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    impl Default for __mbstate_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "__mbstate_t {{ __count: {:?}, __value: {:?} }}",
                self.__count, self.__value
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: self::__off_t,
        pub __state: self::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos_t = self::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: self::__off64_t,
        pub __state: self::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos64_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos64_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos64_t = self::_G_fpos64_t;
    pub type __FILE = self::_IO_FILE;
    pub type FILE = self::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_FILE {
        pub _flags: c_int,
        pub _IO_read_ptr: *mut c_char,
        pub _IO_read_end: *mut c_char,
        pub _IO_read_base: *mut c_char,
        pub _IO_write_base: *mut c_char,
        pub _IO_write_ptr: *mut c_char,
        pub _IO_write_end: *mut c_char,
        pub _IO_buf_base: *mut c_char,
        pub _IO_buf_end: *mut c_char,
        pub _IO_save_base: *mut c_char,
        pub _IO_backup_base: *mut c_char,
        pub _IO_save_end: *mut c_char,
        pub _markers: *mut self::_IO_marker,
        pub _chain: *mut self::_IO_FILE,
        pub _fileno: c_int,
        pub _flags2: c_int,
        pub _old_offset: self::__off_t,
        pub _cur_column: c_ushort,
        pub _vtable_offset: c_schar,
        pub _shortbuf: [c_char; 1usize],
        pub _lock: *mut self::_IO_lock_t,
        pub _offset: self::__off64_t,
        pub _codecvt: *mut self::_IO_codecvt,
        pub _wide_data: *mut self::_IO_wide_data,
        pub _freeres_list: *mut self::_IO_FILE,
        pub _freeres_buf: *mut c_void,
        pub __pad5: usize,
        pub _mode: c_int,
        pub _unused2: [c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    impl Default for _IO_FILE {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type cookie_read_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut c_void,
            __buf: *mut c_char,
            __nbytes: usize,
        ) -> self::__ssize_t,
    >;
    pub type cookie_write_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut c_void,
            __buf: *const c_char,
            __nbytes: usize,
        ) -> self::__ssize_t,
    >;
    pub type cookie_seek_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut c_void,
            __pos: *mut self::__off64_t,
            __w: c_int,
        ) -> c_int,
    >;
    pub type cookie_close_function_t =
        ::std::option::Option<unsafe extern "C" fn(__cookie: *mut c_void) -> c_int>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_cookie_io_functions_t {
        pub read: self::cookie_read_function_t,
        pub write: self::cookie_write_function_t,
        pub seek: self::cookie_seek_function_t,
        pub close: self::cookie_close_function_t,
    }
    #[test]
    fn bindgen_test_layout__IO_cookie_io_functions_t() {
        assert_eq!(
            size_of::<_IO_cookie_io_functions_t>(),
            32usize,
            concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            align_of::<_IO_cookie_io_functions_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(read)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(seek)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(close)
            )
        );
    }
    impl Default for _IO_cookie_io_functions_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type cookie_io_functions_t = self::_IO_cookie_io_functions_t;
    pub type va_list = self::__gnuc_va_list;
    pub type fpos_t = self::__fpos_t;
    pub type fpos64_t = self::__fpos64_t;
    extern "C" {
        pub static mut stdin: *mut self::FILE;
    }
    extern "C" {
        pub static mut stdout: *mut self::FILE;
    }
    extern "C" {
        pub static mut stderr: *mut self::FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn rename(__old: *const c_char, __new: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn renameat(
            __oldfd: c_int,
            __old: *const c_char,
            __newfd: c_int,
            __new: *const c_char,
        ) -> c_int;
    }
    extern "C" {
        pub fn renameat2(
            __oldfd: c_int,
            __old: *const c_char,
            __newfd: c_int,
            __new: *const c_char,
            __flags: c_uint,
        ) -> c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut self::FILE;
    }
    extern "C" {
        pub fn tmpfile64() -> *mut self::FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn tmpnam_r(__s: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn tempnam(__dir: *const c_char, __pfx: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn fflush_unlocked(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn fcloseall() -> c_int;
    }
    extern "C" {
        pub fn fopen(__filename: *const c_char, __modes: *const c_char) -> *mut self::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const c_char,
            __modes: *const c_char,
            __stream: *mut self::FILE,
        ) -> *mut self::FILE;
    }
    extern "C" {
        pub fn fopen64(__filename: *const c_char, __modes: *const c_char) -> *mut self::FILE;
    }
    extern "C" {
        pub fn freopen64(
            __filename: *const c_char,
            __modes: *const c_char,
            __stream: *mut self::FILE,
        ) -> *mut self::FILE;
    }
    extern "C" {
        pub fn fdopen(__fd: c_int, __modes: *const c_char) -> *mut self::FILE;
    }
    extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut c_void,
            __modes: *const c_char,
            __io_funcs: self::cookie_io_functions_t,
        ) -> *mut self::FILE;
    }
    extern "C" {
        pub fn fmemopen(__s: *mut c_void, __len: usize, __modes: *const c_char) -> *mut self::FILE;
    }
    extern "C" {
        pub fn open_memstream(__bufloc: *mut *mut c_char, __sizeloc: *mut usize)
            -> *mut self::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut self::FILE, __buf: *mut c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut self::FILE,
            __buf: *mut c_char,
            __modes: c_int,
            __n: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn setbuffer(__stream: *mut self::FILE, __buf: *mut c_char, __size: usize);
    }
    extern "C" {
        pub fn setlinebuf(__stream: *mut self::FILE);
    }
    extern "C" {
        pub fn fprintf(__stream: *mut self::FILE, __format: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn printf(__format: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn sprintf(__s: *mut c_char, __format: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut self::FILE,
            __format: *const c_char,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn vprintf(__format: *const c_char, __arg: *mut self::__va_list_tag) -> c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut c_char,
            __format: *const c_char,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn snprintf(__s: *mut c_char, __maxlen: usize, __format: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut c_char,
            __maxlen: usize,
            __format: *const c_char,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut c_char,
            __f: *const c_char,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn __asprintf(__ptr: *mut *mut c_char, __fmt: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn asprintf(__ptr: *mut *mut c_char, __fmt: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn vdprintf(
            __fd: c_int,
            __fmt: *const c_char,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn dprintf(__fd: c_int, __fmt: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn fscanf(__stream: *mut self::FILE, __format: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn sscanf(__s: *const c_char, __format: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut self::FILE,
            __format: *const c_char,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn vscanf(__format: *const c_char, __arg: *mut self::__va_list_tag) -> c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const c_char,
            __format: *const c_char,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn getchar() -> c_int;
    }
    extern "C" {
        pub fn getc_unlocked(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn getchar_unlocked() -> c_int;
    }
    extern "C" {
        pub fn fgetc_unlocked(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn fputc(__c: c_int, __stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn putc(__c: c_int, __stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn putchar(__c: c_int) -> c_int;
    }
    extern "C" {
        pub fn fputc_unlocked(__c: c_int, __stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn putc_unlocked(__c: c_int, __stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn putchar_unlocked(__c: c_int) -> c_int;
    }
    extern "C" {
        pub fn getw(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn putw(__w: c_int, __stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn fgets(__s: *mut c_char, __n: c_int, __stream: *mut self::FILE) -> *mut c_char;
    }
    extern "C" {
        pub fn fgets_unlocked(
            __s: *mut c_char,
            __n: c_int,
            __stream: *mut self::FILE,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut c_char,
            __n: *mut usize,
            __delimiter: c_int,
            __stream: *mut self::FILE,
        ) -> self::__ssize_t;
    }
    extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut c_char,
            __n: *mut usize,
            __delimiter: c_int,
            __stream: *mut self::FILE,
        ) -> self::__ssize_t;
    }
    extern "C" {
        pub fn getline(
            __lineptr: *mut *mut c_char,
            __n: *mut usize,
            __stream: *mut self::FILE,
        ) -> self::__ssize_t;
    }
    extern "C" {
        pub fn fputs(__s: *const c_char, __stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn puts(__s: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn ungetc(__c: c_int, __stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut c_void,
            __size: usize,
            __n: usize,
            __stream: *mut self::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const c_void,
            __size: usize,
            __n: usize,
            __s: *mut self::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fputs_unlocked(__s: *const c_char, __stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut c_void,
            __size: usize,
            __n: usize,
            __stream: *mut self::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const c_void,
            __size: usize,
            __n: usize,
            __stream: *mut self::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fseek(__stream: *mut self::FILE, __off: c_long, __whence: c_int) -> c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut self::FILE) -> c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut self::FILE);
    }
    extern "C" {
        pub fn fseeko(__stream: *mut self::FILE, __off: self::__off_t, __whence: c_int) -> c_int;
    }
    extern "C" {
        pub fn ftello(__stream: *mut self::FILE) -> self::__off_t;
    }
    extern "C" {
        pub fn fgetpos(__stream: *mut self::FILE, __pos: *mut self::fpos_t) -> c_int;
    }
    extern "C" {
        pub fn fsetpos(__stream: *mut self::FILE, __pos: *const self::fpos_t) -> c_int;
    }
    extern "C" {
        pub fn fseeko64(
            __stream: *mut self::FILE,
            __off: self::__off64_t,
            __whence: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn ftello64(__stream: *mut self::FILE) -> self::__off64_t;
    }
    extern "C" {
        pub fn fgetpos64(__stream: *mut self::FILE, __pos: *mut self::fpos64_t) -> c_int;
    }
    extern "C" {
        pub fn fsetpos64(__stream: *mut self::FILE, __pos: *const self::fpos64_t) -> c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut self::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn clearerr_unlocked(__stream: *mut self::FILE);
    }
    extern "C" {
        pub fn feof_unlocked(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn ferror_unlocked(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn perror(__s: *const c_char);
    }
    extern "C" {
        pub static mut sys_nerr: c_int;
    }
    extern "C" {
        pub static mut sys_errlist: [*const c_char; 0usize];
    }
    extern "C" {
        pub static mut _sys_nerr: c_int;
    }
    extern "C" {
        pub static mut _sys_errlist: [*const c_char; 0usize];
    }
    extern "C" {
        pub fn fileno(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn fileno_unlocked(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn popen(__command: *const c_char, __modes: *const c_char) -> *mut self::FILE;
    }
    extern "C" {
        pub fn pclose(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn ctermid(__s: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn cuserid(__s: *mut c_char) -> *mut c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn obstack_printf(__obstack: *mut self::obstack, __format: *const c_char, ...)
            -> c_int;
    }
    extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut self::obstack,
            __format: *const c_char,
            __args: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn flockfile(__stream: *mut self::FILE);
    }
    extern "C" {
        pub fn ftrylockfile(__stream: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn funlockfile(__stream: *mut self::FILE);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut self::FILE) -> c_int;
    }
    extern "C" {
        pub fn __overflow(arg1: *mut self::FILE, arg2: c_int) -> c_int;
    }
    pub mod __gnu_debug {}
    pub type wint_t = c_uint;
    pub type mbstate_t = self::__mbstate_t;
    extern "C" {
        pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> c_int;
    }
    extern "C" {
        pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> c_int;
    }
    extern "C" {
        pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn wcscasecmp_l(__s1: *const u32, __s2: *const u32, __loc: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn wcsncasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __n: usize,
            __loc: self::locale_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> c_int;
    }
    extern "C" {
        pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcscoll_l(__s1: *const u32, __s2: *const u32, __loc: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn wcsxfrm_l(
            __s1: *mut u32,
            __s2: *const u32,
            __n: usize,
            __loc: self::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsdup(__s: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcslen(__s: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
    }
    extern "C" {
        pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn btowc(__c: c_int) -> self::wint_t;
    }
    extern "C" {
        pub fn wctob(__c: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn mbsinit(__ps: *const self::mbstate_t) -> c_int;
    }
    extern "C" {
        pub fn mbrtowc(
            __pwc: *mut u32,
            __s: *const c_char,
            __n: usize,
            __p: *mut self::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcrtomb(__s: *mut c_char, __wc: u32, __ps: *mut self::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn __mbrlen(__s: *const c_char, __n: usize, __ps: *mut self::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn mbrlen(__s: *const c_char, __n: usize, __ps: *mut self::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn __btowc_alias(__c: c_int) -> self::wint_t;
    }
    extern "C" {
        pub fn __wctob_alias(__c: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn mbsrtowcs(
            __dst: *mut u32,
            __src: *mut *const c_char,
            __len: usize,
            __ps: *mut self::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsrtombs(
            __dst: *mut c_char,
            __src: *mut *const u32,
            __len: usize,
            __ps: *mut self::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn mbsnrtowcs(
            __dst: *mut u32,
            __src: *mut *const c_char,
            __nmc: usize,
            __len: usize,
            __ps: *mut self::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsnrtombs(
            __dst: *mut c_char,
            __src: *mut *const u32,
            __nwc: usize,
            __len: usize,
            __ps: *mut self::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcwidth(__c: u32) -> c_int;
    }
    extern "C" {
        pub fn wcswidth(__s: *const u32, __n: usize) -> c_int;
    }
    extern "C" {
        pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
    }
    extern "C" {
        pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
    }
    extern "C" {
        pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
    }
    extern "C" {
        pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> self::_Float32;
    }
    extern "C" {
        pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> self::_Float64;
    }
    extern "C" {
        pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> self::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> self::_Float64x;
    }
    extern "C" {
        pub fn wcstol(__nptr: *const u32, __endptr: *mut *mut u32, __base: c_int) -> c_long;
    }
    extern "C" {
        pub fn wcstoul(__nptr: *const u32, __endptr: *mut *mut u32, __base: c_int) -> c_ulong;
    }
    extern "C" {
        pub fn wcstoll(__nptr: *const u32, __endptr: *mut *mut u32, __base: c_int) -> c_longlong;
    }
    extern "C" {
        pub fn wcstoull(__nptr: *const u32, __endptr: *mut *mut u32, __base: c_int) -> c_ulonglong;
    }
    extern "C" {
        pub fn wcstoq(__nptr: *const u32, __endptr: *mut *mut u32, __base: c_int) -> c_longlong;
    }
    extern "C" {
        pub fn wcstouq(__nptr: *const u32, __endptr: *mut *mut u32, __base: c_int) -> c_ulonglong;
    }
    extern "C" {
        pub fn wcstol_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: c_int,
            __loc: self::locale_t,
        ) -> c_long;
    }
    extern "C" {
        pub fn wcstoul_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: c_int,
            __loc: self::locale_t,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn wcstoll_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: c_int,
            __loc: self::locale_t,
        ) -> c_longlong;
    }
    extern "C" {
        pub fn wcstoull_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: c_int,
            __loc: self::locale_t,
        ) -> c_ulonglong;
    }
    extern "C" {
        pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: self::locale_t) -> f64;
    }
    extern "C" {
        pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: self::locale_t) -> f32;
    }
    extern "C" {
        pub fn wcstold_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: self::locale_t)
            -> f64;
    }
    extern "C" {
        pub fn wcstof32_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: self::locale_t,
        ) -> self::_Float32;
    }
    extern "C" {
        pub fn wcstof64_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: self::locale_t,
        ) -> self::_Float64;
    }
    extern "C" {
        pub fn wcstof32x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: self::locale_t,
        ) -> self::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: self::locale_t,
        ) -> self::_Float64x;
    }
    extern "C" {
        pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn open_wmemstream(__bufloc: *mut *mut u32, __sizeloc: *mut usize)
            -> *mut self::__FILE;
    }
    extern "C" {
        pub fn fwide(__fp: *mut self::__FILE, __mode: c_int) -> c_int;
    }
    extern "C" {
        pub fn fwprintf(__stream: *mut self::__FILE, __format: *const u32, ...) -> c_int;
    }
    extern "C" {
        pub fn wprintf(__format: *const u32, ...) -> c_int;
    }
    extern "C" {
        pub fn swprintf(__s: *mut u32, __n: usize, __format: *const u32, ...) -> c_int;
    }
    extern "C" {
        pub fn vfwprintf(
            __s: *mut self::__FILE,
            __format: *const u32,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn vwprintf(__format: *const u32, __arg: *mut self::__va_list_tag) -> c_int;
    }
    extern "C" {
        pub fn vswprintf(
            __s: *mut u32,
            __n: usize,
            __format: *const u32,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn fwscanf(__stream: *mut self::__FILE, __format: *const u32, ...) -> c_int;
    }
    extern "C" {
        pub fn wscanf(__format: *const u32, ...) -> c_int;
    }
    extern "C" {
        pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> c_int;
    }
    extern "C" {
        pub fn vfwscanf(
            __s: *mut self::__FILE,
            __format: *const u32,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn vwscanf(__format: *const u32, __arg: *mut self::__va_list_tag) -> c_int;
    }
    extern "C" {
        pub fn vswscanf(
            __s: *const u32,
            __format: *const u32,
            __arg: *mut self::__va_list_tag,
        ) -> c_int;
    }
    extern "C" {
        pub fn fgetwc(__stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn getwc(__stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn getwchar() -> self::wint_t;
    }
    extern "C" {
        pub fn fputwc(__wc: u32, __stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn putwc(__wc: u32, __stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn putwchar(__wc: u32) -> self::wint_t;
    }
    extern "C" {
        pub fn fgetws(__ws: *mut u32, __n: c_int, __stream: *mut self::__FILE) -> *mut u32;
    }
    extern "C" {
        pub fn fputws(__ws: *const u32, __stream: *mut self::__FILE) -> c_int;
    }
    extern "C" {
        pub fn ungetwc(__wc: self::wint_t, __stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn getwc_unlocked(__stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn getwchar_unlocked() -> self::wint_t;
    }
    extern "C" {
        pub fn fgetwc_unlocked(__stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn fputwc_unlocked(__wc: u32, __stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn putwc_unlocked(__wc: u32, __stream: *mut self::__FILE) -> self::wint_t;
    }
    extern "C" {
        pub fn putwchar_unlocked(__wc: u32) -> self::wint_t;
    }
    extern "C" {
        pub fn fgetws_unlocked(__ws: *mut u32, __n: c_int, __stream: *mut self::__FILE)
            -> *mut u32;
    }
    extern "C" {
        pub fn fputws_unlocked(__ws: *const u32, __stream: *mut self::__FILE) -> c_int;
    }
    extern "C" {
        pub fn wcsftime(
            __s: *mut u32,
            __maxsize: usize,
            __format: *const u32,
            __tp: *const self::tm,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsftime_l(
            __s: *mut u32,
            __maxsize: usize,
            __format: *const u32,
            __tp: *const self::tm,
            __loc: self::locale_t,
        ) -> usize;
    }
    pub type int_least8_t = self::__int_least8_t;
    pub type int_least16_t = self::__int_least16_t;
    pub type int_least32_t = self::__int_least32_t;
    pub type int_least64_t = self::__int_least64_t;
    pub type uint_least8_t = self::__uint_least8_t;
    pub type uint_least16_t = self::__uint_least16_t;
    pub type uint_least32_t = self::__uint_least32_t;
    pub type uint_least64_t = self::__uint_least64_t;
    pub type int_fast8_t = c_schar;
    pub type int_fast16_t = c_long;
    pub type int_fast32_t = c_long;
    pub type int_fast64_t = c_long;
    pub type uint_fast8_t = c_uchar;
    pub type uint_fast16_t = c_ulong;
    pub type uint_fast32_t = c_ulong;
    pub type uint_fast64_t = c_ulong;
    pub type intmax_t = self::__intmax_t;
    pub type uintmax_t = self::__uintmax_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct max_align_t {
        pub __max_align_ll: c_longlong,
        pub __bindgen_padding_0: u64,
        pub __max_align_ld: f64,
    }
    #[test]
    fn bindgen_test_layout_max_align_t() {
        assert_eq!(
            size_of::<max_align_t>(),
            32usize,
            concat!("Size of: ", stringify!(max_align_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<max_align_t>())).__max_align_ll as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__max_align_ll)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<max_align_t>())).__max_align_ld as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__max_align_ld)
            )
        );
    }
    pub mod __cxxabiv1 {

        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __cxa_refcounted_exception {
            _unused: [u8; 0],
        }
        extern "C" {
            pub fn __cxa_allocate_exception(arg1: usize) -> *mut c_void;
        }
        extern "C" {
            pub fn __cxa_free_exception(arg1: *mut c_void);
        }
        extern "C" {
            pub fn __cxa_init_primary_exception(
                object: *mut c_void,
                tinfo: *mut self::std::type_info,
                dest: ::std::option::Option<unsafe extern "C" fn(arg1: *mut c_void)>,
            ) -> *mut self::__cxxabiv1::__cxa_refcounted_exception;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __class_type_info {
            _unused: [u8; 0],
        }
        #[repr(C)]
        pub struct __forced_unwind__bindgen_vtable(c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __forced_unwind {
            pub vtable_: *const __forced_unwind__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout___forced_unwind() {
            assert_eq!(
                size_of::<__forced_unwind>(),
                8usize,
                concat!("Size of: ", stringify!(__forced_unwind))
            );
            assert_eq!(
                align_of::<__forced_unwind>(),
                8usize,
                concat!("Alignment of ", stringify!(__forced_unwind))
            );
        }
        impl Default for __forced_unwind {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lconv {
        pub decimal_point: *mut c_char,
        pub thousands_sep: *mut c_char,
        pub grouping: *mut c_char,
        pub int_curr_symbol: *mut c_char,
        pub currency_symbol: *mut c_char,
        pub mon_decimal_point: *mut c_char,
        pub mon_thousands_sep: *mut c_char,
        pub mon_grouping: *mut c_char,
        pub positive_sign: *mut c_char,
        pub negative_sign: *mut c_char,
        pub int_frac_digits: c_char,
        pub frac_digits: c_char,
        pub p_cs_precedes: c_char,
        pub p_sep_by_space: c_char,
        pub n_cs_precedes: c_char,
        pub n_sep_by_space: c_char,
        pub p_sign_posn: c_char,
        pub n_sign_posn: c_char,
        pub int_p_cs_precedes: c_char,
        pub int_p_sep_by_space: c_char,
        pub int_n_cs_precedes: c_char,
        pub int_n_sep_by_space: c_char,
        pub int_p_sign_posn: c_char,
        pub int_n_sign_posn: c_char,
    }
    #[test]
    fn bindgen_test_layout_lconv() {
        assert_eq!(
            size_of::<lconv>(),
            96usize,
            concat!("Size of: ", stringify!(lconv))
        );
        assert_eq!(
            align_of::<lconv>(),
            8usize,
            concat!("Alignment of ", stringify!(lconv))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(decimal_point)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(thousands_sep)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(grouping)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_curr_symbol)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(currency_symbol)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_decimal_point)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_thousands_sep)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_grouping)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(positive_sign)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(negative_sign)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_frac_digits)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
            81usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(frac_digits)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
            82usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_cs_precedes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
            83usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_sep_by_space)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_cs_precedes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
            85usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_sep_by_space)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_sign_posn)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
            87usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_sign_posn)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_cs_precedes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
            89usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_sep_by_space)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
            90usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_cs_precedes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
            91usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_sep_by_space)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_sign_posn)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
            93usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_sign_posn)
            )
        );
    }
    impl Default for lconv {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        pub fn setlocale(__category: c_int, __locale: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn localeconv() -> *mut self::lconv;
    }
    extern "C" {
        pub fn newlocale(
            __category_mask: c_int,
            __locale: *const c_char,
            __base: self::locale_t,
        ) -> self::locale_t;
    }
    extern "C" {
        pub fn duplocale(__dataset: self::locale_t) -> self::locale_t;
    }
    extern "C" {
        pub fn freelocale(__dataset: self::locale_t);
    }
    extern "C" {
        pub fn uselocale(__dataset: self::locale_t) -> self::locale_t;
    }
    pub const _ISupper: self::_bindgen_ty_39 = 256;
    pub const _ISlower: self::_bindgen_ty_39 = 512;
    pub const _ISalpha: self::_bindgen_ty_39 = 1024;
    pub const _ISdigit: self::_bindgen_ty_39 = 2048;
    pub const _ISxdigit: self::_bindgen_ty_39 = 4096;
    pub const _ISspace: self::_bindgen_ty_39 = 8192;
    pub const _ISprint: self::_bindgen_ty_39 = 16384;
    pub const _ISgraph: self::_bindgen_ty_39 = 32768;
    pub const _ISblank: self::_bindgen_ty_39 = 1;
    pub const _IScntrl: self::_bindgen_ty_39 = 2;
    pub const _ISpunct: self::_bindgen_ty_39 = 4;
    pub const _ISalnum: self::_bindgen_ty_39 = 8;
    pub type _bindgen_ty_39 = u32;
    extern "C" {
        pub fn __ctype_b_loc() -> *mut *const c_ushort;
    }
    extern "C" {
        pub fn __ctype_tolower_loc() -> *mut *const self::__int32_t;
    }
    extern "C" {
        pub fn __ctype_toupper_loc() -> *mut *const self::__int32_t;
    }
    extern "C" {
        pub fn isalnum(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isalpha(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn iscntrl(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isdigit(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn islower(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isgraph(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isprint(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn ispunct(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isspace(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isupper(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isxdigit(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn tolower(__c: c_int) -> c_int;
    }
    extern "C" {
        pub fn toupper(__c: c_int) -> c_int;
    }
    extern "C" {
        pub fn isblank(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isctype(__c: c_int, __mask: c_int) -> c_int;
    }
    extern "C" {
        pub fn isascii(__c: c_int) -> c_int;
    }
    extern "C" {
        pub fn toascii(__c: c_int) -> c_int;
    }
    extern "C" {
        pub fn _toupper(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn _tolower(arg1: c_int) -> c_int;
    }
    extern "C" {
        pub fn isalnum_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn isalpha_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iscntrl_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn isdigit_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn islower_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn isgraph_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn isprint_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn ispunct_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn isspace_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn isupper_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn isxdigit_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn isblank_l(arg1: c_int, arg2: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn __tolower_l(__c: c_int, __l: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn tolower_l(__c: c_int, __l: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn __toupper_l(__c: c_int, __l: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn toupper_l(__c: c_int, __l: self::locale_t) -> c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sched_param {
        pub sched_priority: c_int,
    }
    #[test]
    fn bindgen_test_layout_sched_param() {
        assert_eq!(
            size_of::<sched_param>(),
            4usize,
            concat!("Size of: ", stringify!(sched_param))
        );
        assert_eq!(
            align_of::<sched_param>(),
            4usize,
            concat!("Alignment of ", stringify!(sched_param))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_param),
                "::",
                stringify!(sched_priority)
            )
        );
    }
    extern "C" {
        pub fn clone(
            __fn: ::std::option::Option<unsafe extern "C" fn(__arg: *mut c_void) -> c_int>,
            __child_stack: *mut c_void,
            __flags: c_int,
            __arg: *mut c_void,
            ...
        ) -> c_int;
    }
    extern "C" {
        pub fn unshare(__flags: c_int) -> c_int;
    }
    extern "C" {
        pub fn sched_getcpu() -> c_int;
    }
    extern "C" {
        pub fn setns(__fd: c_int, __nstype: c_int) -> c_int;
    }
    pub type __cpu_mask = c_ulong;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct cpu_set_t {
        pub __bits: [self::__cpu_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_cpu_set_t() {
        assert_eq!(
            size_of::<cpu_set_t>(),
            128usize,
            concat!("Size of: ", stringify!(cpu_set_t))
        );
        assert_eq!(
            align_of::<cpu_set_t>(),
            8usize,
            concat!("Alignment of ", stringify!(cpu_set_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cpu_set_t),
                "::",
                stringify!(__bits)
            )
        );
    }
    extern "C" {
        pub fn __sched_cpucount(__setsize: usize, __setp: *const self::cpu_set_t) -> c_int;
    }
    extern "C" {
        pub fn __sched_cpualloc(__count: usize) -> *mut self::cpu_set_t;
    }
    extern "C" {
        pub fn __sched_cpufree(__set: *mut self::cpu_set_t);
    }
    extern "C" {
        pub fn sched_setparam(__pid: self::__pid_t, __param: *const self::sched_param) -> c_int;
    }
    extern "C" {
        pub fn sched_getparam(__pid: self::__pid_t, __param: *mut self::sched_param) -> c_int;
    }
    extern "C" {
        pub fn sched_setscheduler(
            __pid: self::__pid_t,
            __policy: c_int,
            __param: *const self::sched_param,
        ) -> c_int;
    }
    extern "C" {
        pub fn sched_getscheduler(__pid: self::__pid_t) -> c_int;
    }
    extern "C" {
        pub fn sched_yield() -> c_int;
    }
    extern "C" {
        pub fn sched_get_priority_max(__algorithm: c_int) -> c_int;
    }
    extern "C" {
        pub fn sched_get_priority_min(__algorithm: c_int) -> c_int;
    }
    extern "C" {
        pub fn sched_rr_get_interval(__pid: self::__pid_t, __t: *mut self::timespec) -> c_int;
    }
    extern "C" {
        pub fn sched_setaffinity(
            __pid: self::__pid_t,
            __cpusetsize: usize,
            __cpuset: *const self::cpu_set_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn sched_getaffinity(
            __pid: self::__pid_t,
            __cpusetsize: usize,
            __cpuset: *mut self::cpu_set_t,
        ) -> c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timex {
        pub modes: c_uint,
        pub offset: self::__syscall_slong_t,
        pub freq: self::__syscall_slong_t,
        pub maxerror: self::__syscall_slong_t,
        pub esterror: self::__syscall_slong_t,
        pub status: c_int,
        pub constant: self::__syscall_slong_t,
        pub precision: self::__syscall_slong_t,
        pub tolerance: self::__syscall_slong_t,
        pub time: self::timeval,
        pub tick: self::__syscall_slong_t,
        pub ppsfreq: self::__syscall_slong_t,
        pub jitter: self::__syscall_slong_t,
        pub shift: c_int,
        pub stabil: self::__syscall_slong_t,
        pub jitcnt: self::__syscall_slong_t,
        pub calcnt: self::__syscall_slong_t,
        pub errcnt: self::__syscall_slong_t,
        pub stbcnt: self::__syscall_slong_t,
        pub tai: c_int,
        pub _bitfield_1: self::__BindgenBitfieldUnit<[u8; 44usize], u8>,
    }
    #[test]
    fn bindgen_test_layout_timex() {
        assert_eq!(
            size_of::<timex>(),
            208usize,
            concat!("Size of: ", stringify!(timex))
        );
        assert_eq!(
            align_of::<timex>(),
            8usize,
            concat!("Alignment of ", stringify!(timex))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).modes as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(modes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).offset as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).freq as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(freq)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(maxerror)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(esterror)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).status as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(status)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).constant as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(constant)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).precision as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(precision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tolerance)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).time as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tick as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(ppsfreq)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(jitter)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).shift as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(shift)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(stabil)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(jitcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(calcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(errcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(stbcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tai as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tai)
            )
        );
    }
    impl timex {
        #[inline]
        pub fn new_bitfield_1() -> self::__BindgenBitfieldUnit<[u8; 44usize], u8> {
            let mut __bindgen_bitfield_unit: self::__BindgenBitfieldUnit<[u8; 44usize], u8> =
                Default::default();
            __bindgen_bitfield_unit
        }
    }
    extern "C" {
        pub fn clock_adjtime(__clock_id: self::__clockid_t, __utx: *mut self::timex) -> c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct tm {
        pub tm_sec: c_int,
        pub tm_min: c_int,
        pub tm_hour: c_int,
        pub tm_mday: c_int,
        pub tm_mon: c_int,
        pub tm_year: c_int,
        pub tm_wday: c_int,
        pub tm_yday: c_int,
        pub tm_isdst: c_int,
        pub tm_gmtoff: c_long,
        pub tm_zone: *const c_char,
    }
    #[test]
    fn bindgen_test_layout_tm() {
        assert_eq!(
            size_of::<tm>(),
            56usize,
            concat!("Size of: ", stringify!(tm))
        );
        assert_eq!(
            align_of::<tm>(),
            8usize,
            concat!("Alignment of ", stringify!(tm))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_min)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_hour)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mon)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_year)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_wday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_yday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_isdst)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_gmtoff)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_zone)
            )
        );
    }
    impl Default for tm {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct itimerspec {
        pub it_interval: self::timespec,
        pub it_value: self::timespec,
    }
    #[test]
    fn bindgen_test_layout_itimerspec() {
        assert_eq!(
            size_of::<itimerspec>(),
            32usize,
            concat!("Size of: ", stringify!(itimerspec))
        );
        assert_eq!(
            align_of::<itimerspec>(),
            8usize,
            concat!("Alignment of ", stringify!(itimerspec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerspec),
                "::",
                stringify!(it_interval)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerspec),
                "::",
                stringify!(it_value)
            )
        );
    }
    extern "C" {
        pub fn clock() -> self::clock_t;
    }
    extern "C" {
        pub fn time(__timer: *mut self::time_t) -> self::time_t;
    }
    extern "C" {
        pub fn difftime(__time1: self::time_t, __time0: self::time_t) -> f64;
    }
    extern "C" {
        pub fn mktime(__tp: *mut self::tm) -> self::time_t;
    }
    extern "C" {
        pub fn strftime(
            __s: *mut c_char,
            __maxsize: usize,
            __format: *const c_char,
            __tp: *const self::tm,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime(
            __s: *const c_char,
            __fmt: *const c_char,
            __tp: *mut self::tm,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn strftime_l(
            __s: *mut c_char,
            __maxsize: usize,
            __format: *const c_char,
            __tp: *const self::tm,
            __loc: self::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime_l(
            __s: *const c_char,
            __fmt: *const c_char,
            __tp: *mut self::tm,
            __loc: self::locale_t,
        ) -> *mut c_char;
    }
    extern "C" {
        pub fn gmtime(__timer: *const self::time_t) -> *mut self::tm;
    }
    extern "C" {
        pub fn localtime(__timer: *const self::time_t) -> *mut self::tm;
    }
    extern "C" {
        pub fn gmtime_r(__timer: *const self::time_t, __tp: *mut self::tm) -> *mut self::tm;
    }
    extern "C" {
        pub fn localtime_r(__timer: *const self::time_t, __tp: *mut self::tm) -> *mut self::tm;
    }
    extern "C" {
        pub fn asctime(__tp: *const self::tm) -> *mut c_char;
    }
    extern "C" {
        pub fn ctime(__timer: *const self::time_t) -> *mut c_char;
    }
    extern "C" {
        pub fn asctime_r(__tp: *const self::tm, __buf: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn ctime_r(__timer: *const self::time_t, __buf: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub static mut __tzname: [*mut c_char; 2usize];
    }
    extern "C" {
        pub static mut __daylight: c_int;
    }
    extern "C" {
        pub static mut __timezone: c_long;
    }
    extern "C" {
        pub static mut tzname: [*mut c_char; 2usize];
    }
    extern "C" {
        pub fn tzset();
    }
    extern "C" {
        pub static mut daylight: c_int;
    }
    extern "C" {
        pub static mut timezone: c_long;
    }
    extern "C" {
        pub fn stime(__when: *const self::time_t) -> c_int;
    }
    extern "C" {
        pub fn timegm(__tp: *mut self::tm) -> self::time_t;
    }
    extern "C" {
        pub fn timelocal(__tp: *mut self::tm) -> self::time_t;
    }
    extern "C" {
        pub fn dysize(__year: c_int) -> c_int;
    }
    extern "C" {
        pub fn nanosleep(
            __requested_time: *const self::timespec,
            __remaining: *mut self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn clock_getres(__clock_id: self::clockid_t, __res: *mut self::timespec) -> c_int;
    }
    extern "C" {
        pub fn clock_gettime(__clock_id: self::clockid_t, __tp: *mut self::timespec) -> c_int;
    }
    extern "C" {
        pub fn clock_settime(__clock_id: self::clockid_t, __tp: *const self::timespec) -> c_int;
    }
    extern "C" {
        pub fn clock_nanosleep(
            __clock_id: self::clockid_t,
            __flags: c_int,
            __req: *const self::timespec,
            __rem: *mut self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn clock_getcpuclockid(__pid: self::pid_t, __clock_id: *mut self::clockid_t) -> c_int;
    }
    extern "C" {
        pub fn timer_create(
            __clock_id: self::clockid_t,
            __evp: *mut self::sigevent,
            __timerid: *mut self::timer_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn timer_delete(__timerid: self::timer_t) -> c_int;
    }
    extern "C" {
        pub fn timer_settime(
            __timerid: self::timer_t,
            __flags: c_int,
            __value: *const self::itimerspec,
            __ovalue: *mut self::itimerspec,
        ) -> c_int;
    }
    extern "C" {
        pub fn timer_gettime(__timerid: self::timer_t, __value: *mut self::itimerspec) -> c_int;
    }
    extern "C" {
        pub fn timer_getoverrun(__timerid: self::timer_t) -> c_int;
    }
    extern "C" {
        pub fn timespec_get(__ts: *mut self::timespec, __base: c_int) -> c_int;
    }
    extern "C" {
        pub static mut getdate_err: c_int;
    }
    extern "C" {
        pub fn getdate(__string: *const c_char) -> *mut self::tm;
    }
    extern "C" {
        pub fn getdate_r(__string: *const c_char, __resbufp: *mut self::tm) -> c_int;
    }
    pub type __jmp_buf = [c_long; 8usize];
    pub const PTHREAD_CREATE_JOINABLE: self::_bindgen_ty_40 = 0;
    pub const PTHREAD_CREATE_DETACHED: self::_bindgen_ty_40 = 1;
    pub type _bindgen_ty_40 = u32;
    pub const PTHREAD_MUTEX_TIMED_NP: self::_bindgen_ty_41 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE_NP: self::_bindgen_ty_41 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK_NP: self::_bindgen_ty_41 = 2;
    pub const PTHREAD_MUTEX_ADAPTIVE_NP: self::_bindgen_ty_41 = 3;
    pub const PTHREAD_MUTEX_NORMAL: self::_bindgen_ty_41 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE: self::_bindgen_ty_41 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK: self::_bindgen_ty_41 = 2;
    pub const PTHREAD_MUTEX_DEFAULT: self::_bindgen_ty_41 = 0;
    pub const PTHREAD_MUTEX_FAST_NP: self::_bindgen_ty_41 = 0;
    pub type _bindgen_ty_41 = u32;
    pub const PTHREAD_MUTEX_STALLED: self::_bindgen_ty_42 = 0;
    pub const PTHREAD_MUTEX_STALLED_NP: self::_bindgen_ty_42 = 0;
    pub const PTHREAD_MUTEX_ROBUST: self::_bindgen_ty_42 = 1;
    pub const PTHREAD_MUTEX_ROBUST_NP: self::_bindgen_ty_42 = 1;
    pub type _bindgen_ty_42 = u32;
    pub const PTHREAD_PRIO_NONE: self::_bindgen_ty_43 = 0;
    pub const PTHREAD_PRIO_INHERIT: self::_bindgen_ty_43 = 1;
    pub const PTHREAD_PRIO_PROTECT: self::_bindgen_ty_43 = 2;
    pub type _bindgen_ty_43 = u32;
    pub const PTHREAD_RWLOCK_PREFER_READER_NP: self::_bindgen_ty_44 = 0;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: self::_bindgen_ty_44 = 1;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: self::_bindgen_ty_44 = 2;
    pub const PTHREAD_RWLOCK_DEFAULT_NP: self::_bindgen_ty_44 = 0;
    pub type _bindgen_ty_44 = u32;
    pub const PTHREAD_INHERIT_SCHED: self::_bindgen_ty_45 = 0;
    pub const PTHREAD_EXPLICIT_SCHED: self::_bindgen_ty_45 = 1;
    pub type _bindgen_ty_45 = u32;
    pub const PTHREAD_SCOPE_SYSTEM: self::_bindgen_ty_46 = 0;
    pub const PTHREAD_SCOPE_PROCESS: self::_bindgen_ty_46 = 1;
    pub type _bindgen_ty_46 = u32;
    pub const PTHREAD_PROCESS_PRIVATE: self::_bindgen_ty_47 = 0;
    pub const PTHREAD_PROCESS_SHARED: self::_bindgen_ty_47 = 1;
    pub type _bindgen_ty_47 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _pthread_cleanup_buffer {
        pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut c_void)>,
        pub __arg: *mut c_void,
        pub __canceltype: c_int,
        pub __prev: *mut self::_pthread_cleanup_buffer,
    }
    #[test]
    fn bindgen_test_layout__pthread_cleanup_buffer() {
        assert_eq!(
            size_of::<_pthread_cleanup_buffer>(),
            32usize,
            concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            align_of::<_pthread_cleanup_buffer>(),
            8usize,
            concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__canceltype)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__prev)
            )
        );
    }
    impl Default for _pthread_cleanup_buffer {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub const PTHREAD_CANCEL_ENABLE: self::_bindgen_ty_48 = 0;
    pub const PTHREAD_CANCEL_DISABLE: self::_bindgen_ty_48 = 1;
    pub type _bindgen_ty_48 = u32;
    pub const PTHREAD_CANCEL_DEFERRED: self::_bindgen_ty_49 = 0;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: self::_bindgen_ty_49 = 1;
    pub type _bindgen_ty_49 = u32;
    extern "C" {
        pub fn pthread_create(
            __newthread: *mut self::pthread_t,
            __attr: *const self::pthread_attr_t,
            __start_routine: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut c_void) -> *mut c_void,
            >,
            __arg: *mut c_void,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_exit(__retval: *mut c_void);
    }
    extern "C" {
        pub fn pthread_join(__th: self::pthread_t, __thread_return: *mut *mut c_void) -> c_int;
    }
    extern "C" {
        pub fn pthread_tryjoin_np(
            __th: self::pthread_t,
            __thread_return: *mut *mut c_void,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_timedjoin_np(
            __th: self::pthread_t,
            __thread_return: *mut *mut c_void,
            __abstime: *const self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_detach(__th: self::pthread_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_self() -> self::pthread_t;
    }
    extern "C" {
        pub fn pthread_equal(__thread1: self::pthread_t, __thread2: self::pthread_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_init(__attr: *mut self::pthread_attr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_destroy(__attr: *mut self::pthread_attr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getdetachstate(
            __attr: *const self::pthread_attr_t,
            __detachstate: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setdetachstate(
            __attr: *mut self::pthread_attr_t,
            __detachstate: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getguardsize(
            __attr: *const self::pthread_attr_t,
            __guardsize: *mut usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setguardsize(
            __attr: *mut self::pthread_attr_t,
            __guardsize: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedparam(
            __attr: *const self::pthread_attr_t,
            __param: *mut self::sched_param,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedparam(
            __attr: *mut self::pthread_attr_t,
            __param: *const self::sched_param,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedpolicy(
            __attr: *const self::pthread_attr_t,
            __policy: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedpolicy(
            __attr: *mut self::pthread_attr_t,
            __policy: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getinheritsched(
            __attr: *const self::pthread_attr_t,
            __inherit: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setinheritsched(
            __attr: *mut self::pthread_attr_t,
            __inherit: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getscope(
            __attr: *const self::pthread_attr_t,
            __scope: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setscope(__attr: *mut self::pthread_attr_t, __scope: c_int) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstackaddr(
            __attr: *const self::pthread_attr_t,
            __stackaddr: *mut *mut c_void,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstackaddr(
            __attr: *mut self::pthread_attr_t,
            __stackaddr: *mut c_void,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstacksize(
            __attr: *const self::pthread_attr_t,
            __stacksize: *mut usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstacksize(
            __attr: *mut self::pthread_attr_t,
            __stacksize: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstack(
            __attr: *const self::pthread_attr_t,
            __stackaddr: *mut *mut c_void,
            __stacksize: *mut usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstack(
            __attr: *mut self::pthread_attr_t,
            __stackaddr: *mut c_void,
            __stacksize: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_setaffinity_np(
            __attr: *mut self::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *const self::cpu_set_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_attr_getaffinity_np(
            __attr: *const self::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *mut self::cpu_set_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_getattr_default_np(__attr: *mut self::pthread_attr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_setattr_default_np(__attr: *const self::pthread_attr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_getattr_np(
            __th: self::pthread_t,
            __attr: *mut self::pthread_attr_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_setschedparam(
            __target_thread: self::pthread_t,
            __policy: c_int,
            __param: *const self::sched_param,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_getschedparam(
            __target_thread: self::pthread_t,
            __policy: *mut c_int,
            __param: *mut self::sched_param,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_setschedprio(__target_thread: self::pthread_t, __prio: c_int) -> c_int;
    }
    extern "C" {
        pub fn pthread_getname_np(
            __target_thread: self::pthread_t,
            __buf: *mut c_char,
            __buflen: usize,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_setname_np(__target_thread: self::pthread_t, __name: *const c_char)
            -> c_int;
    }
    extern "C" {
        pub fn pthread_getconcurrency() -> c_int;
    }
    extern "C" {
        pub fn pthread_setconcurrency(__level: c_int) -> c_int;
    }
    extern "C" {
        pub fn pthread_yield() -> c_int;
    }
    extern "C" {
        pub fn pthread_setaffinity_np(
            __th: self::pthread_t,
            __cpusetsize: usize,
            __cpuset: *const self::cpu_set_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_getaffinity_np(
            __th: self::pthread_t,
            __cpusetsize: usize,
            __cpuset: *mut self::cpu_set_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_once(
            __once_control: *mut self::pthread_once_t,
            __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_setcancelstate(__state: c_int, __oldstate: *mut c_int) -> c_int;
    }
    extern "C" {
        pub fn pthread_setcanceltype(__type: c_int, __oldtype: *mut c_int) -> c_int;
    }
    extern "C" {
        pub fn pthread_cancel(__th: self::pthread_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_testcancel();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_unwind_buf_t {
        pub __cancel_jmp_buf: [self::__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
        pub __pad: [*mut c_void; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
        pub __cancel_jmp_buf: self::__jmp_buf,
        pub __mask_was_saved: c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
        assert_eq!(
            size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
            72usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
            )
        );
        assert_eq!(
            align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
                "::",
                stringify!(__cancel_jmp_buf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                    as *const _ as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
                "::",
                stringify!(__mask_was_saved)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t() {
        assert_eq!(
            size_of::<__pthread_unwind_buf_t>(),
            104usize,
            concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            align_of::<__pthread_unwind_buf_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t),
                "::",
                stringify!(__cancel_jmp_buf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t),
                "::",
                stringify!(__pad)
            )
        );
    }
    impl Default for __pthread_unwind_buf_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cleanup_frame {
        pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut c_void)>,
        pub __cancel_arg: *mut c_void,
        pub __do_it: c_int,
        pub __cancel_type: c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_frame() {
        assert_eq!(
            size_of::<__pthread_cleanup_frame>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            align_of::<__pthread_cleanup_frame>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__do_it)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _
                    as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_type)
            )
        );
    }
    impl Default for __pthread_cleanup_frame {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cleanup_class {
        pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut c_void)>,
        pub __cancel_arg: *mut c_void,
        pub __do_it: c_int,
        pub __cancel_type: c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_class() {
        assert_eq!(
            size_of::<__pthread_cleanup_class>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            align_of::<__pthread_cleanup_class>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_routine as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_arg as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__do_it as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__do_it)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_type as *const _
                    as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_type)
            )
        );
    }
    impl Default for __pthread_cleanup_class {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn __sigsetjmp(__env: *mut self::__jmp_buf_tag, __savemask: c_int) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_init(
            __mutex: *mut self::pthread_mutex_t,
            __mutexattr: *const self::pthread_mutexattr_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_destroy(__mutex: *mut self::pthread_mutex_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_trylock(__mutex: *mut self::pthread_mutex_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_lock(__mutex: *mut self::pthread_mutex_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_timedlock(
            __mutex: *mut self::pthread_mutex_t,
            __abstime: *const self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_unlock(__mutex: *mut self::pthread_mutex_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_getprioceiling(
            __mutex: *const self::pthread_mutex_t,
            __prioceiling: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_setprioceiling(
            __mutex: *mut self::pthread_mutex_t,
            __prioceiling: c_int,
            __old_ceiling: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent(__mutex: *mut self::pthread_mutex_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent_np(__mutex: *mut self::pthread_mutex_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_init(__attr: *mut self::pthread_mutexattr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_destroy(__attr: *mut self::pthread_mutexattr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getpshared(
            __attr: *const self::pthread_mutexattr_t,
            __pshared: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setpshared(
            __attr: *mut self::pthread_mutexattr_t,
            __pshared: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_gettype(
            __attr: *const self::pthread_mutexattr_t,
            __kind: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_settype(
            __attr: *mut self::pthread_mutexattr_t,
            __kind: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            __attr: *const self::pthread_mutexattr_t,
            __protocol: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            __attr: *mut self::pthread_mutexattr_t,
            __protocol: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            __attr: *const self::pthread_mutexattr_t,
            __prioceiling: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            __attr: *mut self::pthread_mutexattr_t,
            __prioceiling: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust(
            __attr: *const self::pthread_mutexattr_t,
            __robustness: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust_np(
            __attr: *const self::pthread_mutexattr_t,
            __robustness: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust(
            __attr: *mut self::pthread_mutexattr_t,
            __robustness: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust_np(
            __attr: *mut self::pthread_mutexattr_t,
            __robustness: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_init(
            __rwlock: *mut self::pthread_rwlock_t,
            __attr: *const self::pthread_rwlockattr_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_destroy(__rwlock: *mut self::pthread_rwlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_rdlock(__rwlock: *mut self::pthread_rwlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_tryrdlock(__rwlock: *mut self::pthread_rwlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedrdlock(
            __rwlock: *mut self::pthread_rwlock_t,
            __abstime: *const self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_wrlock(__rwlock: *mut self::pthread_rwlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_trywrlock(__rwlock: *mut self::pthread_rwlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedwrlock(
            __rwlock: *mut self::pthread_rwlock_t,
            __abstime: *const self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_unlock(__rwlock: *mut self::pthread_rwlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_init(__attr: *mut self::pthread_rwlockattr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_destroy(__attr: *mut self::pthread_rwlockattr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            __attr: *const self::pthread_rwlockattr_t,
            __pshared: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            __attr: *mut self::pthread_rwlockattr_t,
            __pshared: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getkind_np(
            __attr: *const self::pthread_rwlockattr_t,
            __pref: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setkind_np(
            __attr: *mut self::pthread_rwlockattr_t,
            __pref: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_cond_init(
            __cond: *mut self::pthread_cond_t,
            __cond_attr: *const self::pthread_condattr_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_cond_destroy(__cond: *mut self::pthread_cond_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_cond_signal(__cond: *mut self::pthread_cond_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_cond_broadcast(__cond: *mut self::pthread_cond_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_cond_wait(
            __cond: *mut self::pthread_cond_t,
            __mutex: *mut self::pthread_mutex_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_cond_timedwait(
            __cond: *mut self::pthread_cond_t,
            __mutex: *mut self::pthread_mutex_t,
            __abstime: *const self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_condattr_init(__attr: *mut self::pthread_condattr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_condattr_destroy(__attr: *mut self::pthread_condattr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getpshared(
            __attr: *const self::pthread_condattr_t,
            __pshared: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setpshared(
            __attr: *mut self::pthread_condattr_t,
            __pshared: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getclock(
            __attr: *const self::pthread_condattr_t,
            __clock_id: *mut self::__clockid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setclock(
            __attr: *mut self::pthread_condattr_t,
            __clock_id: self::__clockid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_spin_init(__lock: *mut self::pthread_spinlock_t, __pshared: c_int) -> c_int;
    }
    extern "C" {
        pub fn pthread_spin_destroy(__lock: *mut self::pthread_spinlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_spin_lock(__lock: *mut self::pthread_spinlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_spin_trylock(__lock: *mut self::pthread_spinlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_spin_unlock(__lock: *mut self::pthread_spinlock_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_barrier_init(
            __barrier: *mut self::pthread_barrier_t,
            __attr: *const self::pthread_barrierattr_t,
            __count: c_uint,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_barrier_destroy(__barrier: *mut self::pthread_barrier_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_barrier_wait(__barrier: *mut self::pthread_barrier_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_init(__attr: *mut self::pthread_barrierattr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_destroy(__attr: *mut self::pthread_barrierattr_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_getpshared(
            __attr: *const self::pthread_barrierattr_t,
            __pshared: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_setpshared(
            __attr: *mut self::pthread_barrierattr_t,
            __pshared: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_key_create(
            __key: *mut self::pthread_key_t,
            __destr_function: ::std::option::Option<unsafe extern "C" fn(arg1: *mut c_void)>,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_key_delete(__key: self::pthread_key_t) -> c_int;
    }
    extern "C" {
        pub fn pthread_getspecific(__key: self::pthread_key_t) -> *mut c_void;
    }
    extern "C" {
        pub fn pthread_setspecific(__key: self::pthread_key_t, __pointer: *const c_void) -> c_int;
    }
    extern "C" {
        pub fn pthread_getcpuclockid(
            __thread_id: self::pthread_t,
            __clock_id: *mut self::__clockid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_atfork(
            __prepare: ::std::option::Option<unsafe extern "C" fn()>,
            __parent: ::std::option::Option<unsafe extern "C" fn()>,
            __child: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> c_int;
    }
    pub type __gthread_t = self::pthread_t;
    pub type __gthread_key_t = self::pthread_key_t;
    pub type __gthread_once_t = self::pthread_once_t;
    pub type __gthread_mutex_t = self::pthread_mutex_t;
    pub type __gthread_recursive_mutex_t = self::pthread_mutex_t;
    pub type __gthread_cond_t = self::pthread_cond_t;
    pub type __gthread_time_t = self::timespec;
    pub type _Atomic_word = c_int;
    extern "C" {
        pub fn __errno_location() -> *mut c_int;
    }
    extern "C" {
        pub static mut program_invocation_name: *mut c_char;
    }
    extern "C" {
        pub static mut program_invocation_short_name: *mut c_char;
    }
    pub type error_t = c_int;
    extern "C" {
        pub static mut g_program: self::a_Program;
    }
    extern "C" {
        pub fn yyparse() -> c_int;
    }
    extern "C" {
        pub fn yyrestart(arg1: *mut self::FILE);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct yy_buffer_state {
        _unused: [u8; 0],
    }
    pub type YY_BUFFER_STATE = *mut self::yy_buffer_state;
    extern "C" {
        pub fn yy_scan_string(arg1: *const c_char) -> self::YY_BUFFER_STATE;
    }
    extern "C" {
        pub fn yy_delete_buffer(arg1: self::YY_BUFFER_STATE);
    }
    extern "C" {
        pub fn open_cat_ck(filename: self::c_str) -> *mut self::FILE;
    }
    extern "C" {
        pub fn chuck_parse(
            fname: self::c_constr,
            fd: *mut self::FILE,
            code: self::c_constr,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn reset_parse();
    }
    pub const SyntaxType_COMMA: self::SyntaxType = 0;
    pub const SyntaxType_SEMICOLON: self::SyntaxType = 1;
    pub const SyntaxType_DBLCOLON: self::SyntaxType = 2;
    pub const SyntaxType_PAREN: self::SyntaxType = 3;
    pub const SyntaxType_DOT: self::SyntaxType = 4;
    pub const SyntaxType_CHUCK_OP: self::SyntaxType = 5;
    pub const SyntaxType_OPERATOR: self::SyntaxType = 6;
    pub const SyntaxType_KEYWORD: self::SyntaxType = 7;
    pub const SyntaxType_DEBUG_PRINT: self::SyntaxType = 8;
    pub const SyntaxType_SPORK: self::SyntaxType = 9;
    pub const SyntaxType_INTEGER: self::SyntaxType = 10;
    pub const SyntaxType_FLOATING: self::SyntaxType = 11;
    pub const SyntaxType_STRING: self::SyntaxType = 12;
    pub const SyntaxType_COMMENT: self::SyntaxType = 13;
    pub const SyntaxType_OTHER: self::SyntaxType = 14;
    pub const SyntaxType_NUM_SYNTAX_TYPES: self::SyntaxType = 15;
    pub type SyntaxType = u32;
    #[repr(C)]
    pub struct SyntaxToken {
        pub token: self::std::__cxx11::string,
        pub type_: c_ulong,
        pub begin: self::std::size_type,
        pub end: self::std::size_type,
    }
    #[test]
    fn bindgen_test_layout_SyntaxToken() {
        assert_eq!(
            size_of::<SyntaxToken>(),
            56usize,
            concat!("Size of: ", stringify!(SyntaxToken))
        );
        assert_eq!(
            align_of::<SyntaxToken>(),
            8usize,
            concat!("Alignment of ", stringify!(SyntaxToken))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxToken>())).token as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxToken),
                "::",
                stringify!(token)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxToken>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxToken),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxToken>())).begin as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxToken),
                "::",
                stringify!(begin)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxToken>())).end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxToken),
                "::",
                stringify!(end)
            )
        );
    }
    impl Default for SyntaxToken {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for SyntaxToken {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "SyntaxToken {{ token: {:?}, type: {:?}, begin: {:?}, end: {:?} }}",
                self.token, self.type_, self.begin, self.end
            )
        }
    }
    #[repr(C)]
    pub struct SyntaxTokenList {
        pub list: self::std::vector,
        pub howmany: self::SyntaxTokenList_size_type,
    }
    #[test]
    fn bindgen_test_layout_SyntaxTokenList() {
        assert_eq!(
            size_of::<SyntaxTokenList>(),
            32usize,
            concat!("Size of: ", stringify!(SyntaxTokenList))
        );
        assert_eq!(
            align_of::<SyntaxTokenList>(),
            8usize,
            concat!("Alignment of ", stringify!(SyntaxTokenList))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxTokenList>())).list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxTokenList),
                "::",
                stringify!(list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxTokenList>())).howmany as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxTokenList),
                "::",
                stringify!(howmany)
            )
        );
    }
    impl Default for SyntaxTokenList {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for SyntaxTokenList {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "SyntaxTokenList {{ list: {:?}, howmany: {:?} }}",
                self.list, self.howmany
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SyntaxQuery {
        pub _address: u8,
    }
    #[test]
    fn bindgen_test_layout_SyntaxQuery() {
        assert_eq!(
            size_of::<SyntaxQuery>(),
            1usize,
            concat!("Size of: ", stringify!(SyntaxQuery))
        );
        assert_eq!(
            align_of::<SyntaxQuery>(),
            1usize,
            concat!("Alignment of ", stringify!(SyntaxQuery))
        );
    }
    extern "C" {
        #[link_name = "\u{1}parseLine"]
        pub fn SyntaxQuery_parseLine(
            this: *mut self::SyntaxQuery,
            line: *const self::std::__cxx11::string,
            tokens: *mut self::SyntaxTokenList,
        ) -> c_ulong;
    }
    impl SyntaxQuery {
        #[inline]
        pub unsafe fn parseLine(
            &mut self,
            line: *const self::std::__cxx11::string,
            tokens: *mut self::SyntaxTokenList,
        ) -> c_ulong {
            SyntaxQuery_parseLine(self, line, tokens)
        }
    }
    pub type THREAD_HANDLE = self::pthread_t;
    pub type THREAD_RETURN = *mut c_void;
    pub type THREAD_FUNCTION =
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut c_void) -> *mut c_void>;
    pub type MUTEX = self::pthread_mutex_t;
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XThread {
        pub thread: self::THREAD_HANDLE,
    }
    #[test]
    fn bindgen_test_layout_XThread() {
        assert_eq!(
            size_of::<XThread>(),
            8usize,
            concat!("Size of: ", stringify!(XThread))
        );
        assert_eq!(
            align_of::<XThread>(),
            8usize,
            concat!("Alignment of ", stringify!(XThread))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XThread>())).thread as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XThread),
                "::",
                stringify!(thread)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}start"]
        pub fn XThread_start(
            this: *mut self::XThread,
            routine: self::THREAD_FUNCTION,
            ptr: *mut c_void,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}wait"]
        pub fn XThread_wait(this: *mut self::XThread, milliseconds: c_long, cancel: bool) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}test"]
        pub fn XThread_test();
    }
    extern "C" {
        #[link_name = "\u{1}XThread"]
        pub fn XThread_XThread(this: *mut self::XThread);
    }
    extern "C" {
        #[link_name = "\u{1}XThread_destructor"]
        pub fn XThread_XThread_destructor(this: *mut self::XThread);
    }
    impl XThread {
        #[inline]
        pub unsafe fn start(&mut self, routine: self::THREAD_FUNCTION, ptr: *mut c_void) -> bool {
            XThread_start(self, routine, ptr)
        }
        #[inline]
        pub unsafe fn wait(&mut self, milliseconds: c_long, cancel: bool) -> bool {
            XThread_wait(self, milliseconds, cancel)
        }
        #[inline]
        pub unsafe fn test() {
            XThread_test()
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            XThread_XThread(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            XThread_XThread_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XThreadUtil {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}our_priority"]
        pub static mut XThreadUtil_our_priority: c_long;
    }
    #[test]
    fn bindgen_test_layout_XThreadUtil() {
        assert_eq!(
            size_of::<XThreadUtil>(),
            1usize,
            concat!("Size of: ", stringify!(XThreadUtil))
        );
        assert_eq!(
            align_of::<XThreadUtil>(),
            1usize,
            concat!("Alignment of ", stringify!(XThreadUtil))
        );
    }
    extern "C" {
        #[link_name = "\u{1}set_priority"]
        pub fn XThreadUtil_set_priority(tid: self::pthread_t, priority: c_long) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}set_priority"]
        pub fn XThreadUtil_set_priority1(priority: c_long) -> c_ulong;
    }
    impl XThreadUtil {
        #[inline]
        pub unsafe fn set_priority(tid: self::pthread_t, priority: c_long) -> c_ulong {
            XThreadUtil_set_priority(tid, priority)
        }
        #[inline]
        pub unsafe fn set_priority1(priority: c_long) -> c_ulong {
            XThreadUtil_set_priority1(priority)
        }
    }
    #[repr(C)]
    pub struct XMutex {
        pub mutex: self::MUTEX,
    }
    #[test]
    fn bindgen_test_layout_XMutex() {
        assert_eq!(
            size_of::<XMutex>(),
            40usize,
            concat!("Size of: ", stringify!(XMutex))
        );
        assert_eq!(
            align_of::<XMutex>(),
            8usize,
            concat!("Alignment of ", stringify!(XMutex))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XMutex>())).mutex as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XMutex),
                "::",
                stringify!(mutex)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}acquire"]
        pub fn XMutex_acquire(this: *mut self::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}release"]
        pub fn XMutex_release(this: *mut self::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}XMutex"]
        pub fn XMutex_XMutex(this: *mut self::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}XMutex_destructor"]
        pub fn XMutex_XMutex_destructor(this: *mut self::XMutex);
    }
    impl Default for XMutex {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for XMutex {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "XMutex {{ mutex: {:?} }}", self.mutex)
        }
    }
    impl XMutex {
        #[inline]
        pub unsafe fn acquire(&mut self) {
            XMutex_acquire(self)
        }
        #[inline]
        pub unsafe fn release(&mut self) {
            XMutex_release(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            XMutex_XMutex(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            XMutex_XMutex_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread {
        pub m_thread_exit: c_ulong,
        pub m_thread: self::XThread,
        pub m_data_buffer: *mut self::FastCircularBuffer,
        pub m_bytes_in_buffer: usize,
        pub m_thread_buffer: *mut c_uchar,
        pub m_stream: *mut self::FILE,
        pub m_msg_buffer: *mut self::CircularBuffer<root::XWriteThread_Message>,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct XWriteThread_Message {
        pub operation: self::XWriteThread_Message__bindgen_ty_1,
        pub file: *mut self::FILE,
        pub __bindgen_anon_1: self::XWriteThread_Message__bindgen_ty_2,
    }
    pub const XWriteThread_Message_WRITE: self::XWriteThread_Message__bindgen_ty_1 = 0;
    pub const XWriteThread_Message_SEEK: self::XWriteThread_Message__bindgen_ty_1 = 1;
    pub const XWriteThread_Message_FLUSH: self::XWriteThread_Message__bindgen_ty_1 = 2;
    pub const XWriteThread_Message_CLOSE: self::XWriteThread_Message__bindgen_ty_1 = 3;
    pub const XWriteThread_Message_SHUTDOWN: self::XWriteThread_Message__bindgen_ty_1 = 4;
    pub type XWriteThread_Message__bindgen_ty_1 = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union XWriteThread_Message__bindgen_ty_2 {
        pub write: self::XWriteThread_Message__bindgen_ty_2__bindgen_ty_1,
        pub seek: self::XWriteThread_Message__bindgen_ty_2__bindgen_ty_2,
        _bindgen_union_align: [u64; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread_Message__bindgen_ty_2__bindgen_ty_1 {
        pub data_size: usize,
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            size_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            align_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>()))
                    .data_size as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(data_size)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread_Message__bindgen_ty_2__bindgen_ty_2 {
        pub offset: c_long,
        pub whence: c_int,
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2__bindgen_ty_2() {
        assert_eq!(
            size_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2)
            )
        );
        assert_eq!(
            align_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>())).offset
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>())).whence
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2),
                "::",
                stringify!(whence)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2() {
        assert_eq!(
            size_of::<XWriteThread_Message__bindgen_ty_2>(),
            16usize,
            concat!("Size of: ", stringify!(XWriteThread_Message__bindgen_ty_2))
        );
        assert_eq!(
            align_of::<XWriteThread_Message__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2>())).write as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2>())).seek as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2),
                "::",
                stringify!(seek)
            )
        );
    }
    impl Default for XWriteThread_Message__bindgen_ty_2 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for XWriteThread_Message__bindgen_ty_2 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "XWriteThread_Message__bindgen_ty_2 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message() {
        assert_eq!(
            size_of::<XWriteThread_Message>(),
            32usize,
            concat!("Size of: ", stringify!(XWriteThread_Message))
        );
        assert_eq!(
            align_of::<XWriteThread_Message>(),
            8usize,
            concat!("Alignment of ", stringify!(XWriteThread_Message))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message>())).operation as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message),
                "::",
                stringify!(operation)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread_Message>())).file as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message),
                "::",
                stringify!(file)
            )
        );
    }
    impl Default for XWriteThread_Message {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for XWriteThread_Message {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "XWriteThread_Message {{ operation: {:?}, file: {:?}, __bindgen_anon_1: {:?} }}",
                self.operation, self.file, self.__bindgen_anon_1
            )
        }
    }
    extern "C" {
        #[link_name = "\u{1}PRODUCER_BUFFER_SIZE"]
        pub static XWriteThread_PRODUCER_BUFFER_SIZE: usize;
    }
    extern "C" {
        #[link_name = "\u{1}o_defaultWriteThread"]
        pub static mut XWriteThread_o_defaultWriteThread: *mut self::XWriteThread;
    }
    #[test]
    fn bindgen_test_layout_XWriteThread() {
        assert_eq!(
            size_of::<XWriteThread>(),
            56usize,
            concat!("Size of: ", stringify!(XWriteThread))
        );
        assert_eq!(
            align_of::<XWriteThread>(),
            8usize,
            concat!("Alignment of ", stringify!(XWriteThread))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_thread_exit as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread_exit)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_thread as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_data_buffer as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_data_buffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread>())).m_bytes_in_buffer as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_bytes_in_buffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread>())).m_thread_buffer as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_stream as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_stream)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_msg_buffer as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_msg_buffer)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}shared"]
        pub fn XWriteThread_shared() -> *mut self::XWriteThread;
    }
    extern "C" {
        #[link_name = "\u{1}fwrite"]
        pub fn XWriteThread_fwrite(
            this: *mut self::XWriteThread,
            ptr: *const c_void,
            size: usize,
            nitems: usize,
            stream: *mut self::FILE,
        ) -> usize;
    }
    extern "C" {
        #[link_name = "\u{1}fseek"]
        pub fn XWriteThread_fseek(
            this: *mut self::XWriteThread,
            stream: *mut self::FILE,
            offset: c_long,
            whence: c_int,
        ) -> c_int;
    }
    extern "C" {
        #[link_name = "\u{1}fflush"]
        pub fn XWriteThread_fflush(this: *mut self::XWriteThread, stream: *mut self::FILE)
            -> c_int;
    }
    extern "C" {
        #[link_name = "\u{1}fclose"]
        pub fn XWriteThread_fclose(this: *mut self::XWriteThread, stream: *mut self::FILE)
            -> c_int;
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn XWriteThread_shutdown(this: *mut self::XWriteThread);
    }
    extern "C" {
        #[link_name = "\u{1}XWriteThread"]
        pub fn XWriteThread_XWriteThread(
            this: *mut self::XWriteThread,
            data_buffer_size: usize,
            msg_buffer_size: usize,
        );
    }
    impl Default for XWriteThread {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl XWriteThread {
        #[inline]
        pub unsafe fn shared() -> *mut self::XWriteThread {
            XWriteThread_shared()
        }
        #[inline]
        pub unsafe fn fwrite(
            &mut self,
            ptr: *const c_void,
            size: usize,
            nitems: usize,
            stream: *mut self::FILE,
        ) -> usize {
            XWriteThread_fwrite(self, ptr, size, nitems, stream)
        }
        #[inline]
        pub unsafe fn fseek(
            &mut self,
            stream: *mut self::FILE,
            offset: c_long,
            whence: c_int,
        ) -> c_int {
            XWriteThread_fseek(self, stream, offset, whence)
        }
        #[inline]
        pub unsafe fn fflush(&mut self, stream: *mut self::FILE) -> c_int {
            XWriteThread_fflush(self, stream)
        }
        #[inline]
        pub unsafe fn fclose(&mut self, stream: *mut self::FILE) -> c_int {
            XWriteThread_fclose(self, stream)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) {
            XWriteThread_shutdown(self)
        }
        #[inline]
        pub unsafe fn new(data_buffer_size: usize, msg_buffer_size: usize) -> Self {
            let mut __bindgen_tmp = uninitialized();
            XWriteThread_XWriteThread(&mut __bindgen_tmp, data_buffer_size, msg_buffer_size);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ck_socket_ {
        _unused: [u8; 0],
    }
    pub type ck_socket = *mut self::ck_socket_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct WvOut {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct Chuck_Carrier {
        pub chuck: *mut self::ChucK,
        pub compiler: *mut self::Chuck_Compiler,
        pub env: *mut self::Chuck_Env,
        pub vm: *mut self::Chuck_VM,
        pub chout: *mut self::Chuck_IO_Chout,
        pub cherr: *mut self::Chuck_IO_Cherr,
        pub otf_socket: self::ck_socket,
        pub otf_port: c_long,
        pub otf_thread: self::pthread_t,
        pub stk_writeThread: *mut self::XWriteThread,
        pub stk_wvOutMap: self::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Carrier() {
        assert_eq!(
            size_of::<Chuck_Carrier>(),
            128usize,
            concat!("Size of: ", stringify!(Chuck_Carrier))
        );
        assert_eq!(
            align_of::<Chuck_Carrier>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Carrier))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).chuck as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(chuck)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).compiler as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(compiler)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).env as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(env)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).vm as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).chout as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(chout)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).cherr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(cherr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).otf_socket as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(otf_socket)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).otf_port as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(otf_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).otf_thread as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(otf_thread)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Carrier>())).stk_writeThread as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(stk_writeThread)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).stk_wvOutMap as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(stk_wvOutMap)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}hintIsRealtimeAudio"]
        pub fn Chuck_Carrier_hintIsRealtimeAudio(this: *mut self::Chuck_Carrier) -> c_ulong;
    }
    impl Default for Chuck_Carrier {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Carrier {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Carrier {{ chuck: {:?}, compiler: {:?}, env: {:?}, vm: {:?}, chout: {:?}, cherr: {:?}, otf_socket: {:?}, otf_port: {:?}, otf_thread: {:?}, stk_writeThread: {:?}, stk_wvOutMap: {:?} }}" , self . chuck , self . compiler , self . env , self . vm , self . chout , self . cherr , self . otf_socket , self . otf_port , self . otf_thread , self . stk_writeThread , self . stk_wvOutMap )
        }
    }
    impl PartialEq for Chuck_Carrier {
        fn eq(&self, other: &Chuck_Carrier) -> bool {
            self.chuck == other.chuck
                && self.compiler == other.compiler
                && self.env == other.env
                && self.vm == other.vm
                && self.chout == other.chout
                && self.cherr == other.cherr
                && self.otf_socket == other.otf_socket
                && self.otf_port == other.otf_port
                && self.otf_thread == other.otf_thread
                && self.stk_writeThread == other.stk_writeThread
                && self.stk_wvOutMap == other.stk_wvOutMap
        }
    }
    impl Chuck_Carrier {
        #[inline]
        pub unsafe fn hintIsRealtimeAudio(&mut self) -> c_ulong {
            Chuck_Carrier_hintIsRealtimeAudio(self)
        }
    }
    pub type wctype_t = c_ulong;
    pub const __ISwupper: self::_bindgen_ty_53 = 0;
    pub const __ISwlower: self::_bindgen_ty_53 = 1;
    pub const __ISwalpha: self::_bindgen_ty_53 = 2;
    pub const __ISwdigit: self::_bindgen_ty_53 = 3;
    pub const __ISwxdigit: self::_bindgen_ty_53 = 4;
    pub const __ISwspace: self::_bindgen_ty_53 = 5;
    pub const __ISwprint: self::_bindgen_ty_53 = 6;
    pub const __ISwgraph: self::_bindgen_ty_53 = 7;
    pub const __ISwblank: self::_bindgen_ty_53 = 8;
    pub const __ISwcntrl: self::_bindgen_ty_53 = 9;
    pub const __ISwpunct: self::_bindgen_ty_53 = 10;
    pub const __ISwalnum: self::_bindgen_ty_53 = 11;
    pub const _ISwupper: self::_bindgen_ty_53 = 16777216;
    pub const _ISwlower: self::_bindgen_ty_53 = 33554432;
    pub const _ISwalpha: self::_bindgen_ty_53 = 67108864;
    pub const _ISwdigit: self::_bindgen_ty_53 = 134217728;
    pub const _ISwxdigit: self::_bindgen_ty_53 = 268435456;
    pub const _ISwspace: self::_bindgen_ty_53 = 536870912;
    pub const _ISwprint: self::_bindgen_ty_53 = 1073741824;
    pub const _ISwgraph: self::_bindgen_ty_53 = -2147483648;
    pub const _ISwblank: self::_bindgen_ty_53 = 65536;
    pub const _ISwcntrl: self::_bindgen_ty_53 = 131072;
    pub const _ISwpunct: self::_bindgen_ty_53 = 262144;
    pub const _ISwalnum: self::_bindgen_ty_53 = 524288;
    pub type _bindgen_ty_53 = i32;
    extern "C" {
        pub fn iswalnum(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswalpha(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswcntrl(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswdigit(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswgraph(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswlower(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswprint(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswpunct(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswspace(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswupper(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswxdigit(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn iswblank(__wc: self::wint_t) -> c_int;
    }
    extern "C" {
        pub fn wctype(__property: *const c_char) -> self::wctype_t;
    }
    extern "C" {
        pub fn iswctype(__wc: self::wint_t, __desc: self::wctype_t) -> c_int;
    }
    extern "C" {
        pub fn towlower(__wc: self::wint_t) -> self::wint_t;
    }
    extern "C" {
        pub fn towupper(__wc: self::wint_t) -> self::wint_t;
    }
    pub type wctrans_t = *const self::__int32_t;
    extern "C" {
        pub fn wctrans(__property: *const c_char) -> self::wctrans_t;
    }
    extern "C" {
        pub fn towctrans(__wc: self::wint_t, __desc: self::wctrans_t) -> self::wint_t;
    }
    extern "C" {
        pub fn iswalnum_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswalpha_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswcntrl_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswdigit_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswgraph_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswlower_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswprint_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswpunct_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswspace_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswupper_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswxdigit_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn iswblank_l(__wc: self::wint_t, __locale: self::locale_t) -> c_int;
    }
    extern "C" {
        pub fn wctype_l(__property: *const c_char, __locale: self::locale_t) -> self::wctype_t;
    }
    extern "C" {
        pub fn iswctype_l(
            __wc: self::wint_t,
            __desc: self::wctype_t,
            __locale: self::locale_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn towlower_l(__wc: self::wint_t, __locale: self::locale_t) -> self::wint_t;
    }
    extern "C" {
        pub fn towupper_l(__wc: self::wint_t, __locale: self::locale_t) -> self::wint_t;
    }
    extern "C" {
        pub fn wctrans_l(__property: *const c_char, __locale: self::locale_t) -> self::wctrans_t;
    }
    extern "C" {
        pub fn towctrans_l(
            __wc: self::wint_t,
            __desc: self::wctrans_t,
            __locale: self::locale_t,
        ) -> self::wint_t;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct dirent {
        pub d_ino: self::__ino_t,
        pub d_off: self::__off_t,
        pub d_reclen: c_ushort,
        pub d_type: c_uchar,
        pub d_name: [c_char; 256usize],
    }
    #[test]
    fn bindgen_test_layout_dirent() {
        assert_eq!(
            size_of::<dirent>(),
            280usize,
            concat!("Size of: ", stringify!(dirent))
        );
        assert_eq!(
            align_of::<dirent>(),
            8usize,
            concat!("Alignment of ", stringify!(dirent))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_ino)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_off as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_off)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_reclen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_name)
            )
        );
    }
    impl Default for dirent {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for dirent {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "dirent {{ d_ino: {:?}, d_off: {:?}, d_reclen: {:?}, d_type: {:?}, d_name: [{}] }}",
                self.d_ino,
                self.d_off,
                self.d_reclen,
                self.d_type,
                self.d_name
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>()
            )
        }
    }
    impl PartialEq for dirent {
        fn eq(&self, other: &dirent) -> bool {
            self.d_ino == other.d_ino
                && self.d_off == other.d_off
                && self.d_reclen == other.d_reclen
                && self.d_type == other.d_type
                && &self.d_name[..] == &other.d_name[..]
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct dirent64 {
        pub d_ino: self::__ino64_t,
        pub d_off: self::__off64_t,
        pub d_reclen: c_ushort,
        pub d_type: c_uchar,
        pub d_name: [c_char; 256usize],
    }
    #[test]
    fn bindgen_test_layout_dirent64() {
        assert_eq!(
            size_of::<dirent64>(),
            280usize,
            concat!("Size of: ", stringify!(dirent64))
        );
        assert_eq!(
            align_of::<dirent64>(),
            8usize,
            concat!("Alignment of ", stringify!(dirent64))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_ino as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_ino)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_off as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_off)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_reclen as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_reclen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_type as *const _ as usize },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_name as *const _ as usize },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_name)
            )
        );
    }
    impl Default for dirent64 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for dirent64 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "dirent64 {{ d_ino: {:?}, d_off: {:?}, d_reclen: {:?}, d_type: {:?}, d_name: [{}] }}" , self . d_ino , self . d_off , self . d_reclen , self . d_type , self . d_name . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
        }
    }
    impl PartialEq for dirent64 {
        fn eq(&self, other: &dirent64) -> bool {
            self.d_ino == other.d_ino
                && self.d_off == other.d_off
                && self.d_reclen == other.d_reclen
                && self.d_type == other.d_type
                && &self.d_name[..] == &other.d_name[..]
        }
    }
    pub const DT_UNKNOWN: self::_bindgen_ty_54 = 0;
    pub const DT_FIFO: self::_bindgen_ty_54 = 1;
    pub const DT_CHR: self::_bindgen_ty_54 = 2;
    pub const DT_DIR: self::_bindgen_ty_54 = 4;
    pub const DT_BLK: self::_bindgen_ty_54 = 6;
    pub const DT_REG: self::_bindgen_ty_54 = 8;
    pub const DT_LNK: self::_bindgen_ty_54 = 10;
    pub const DT_SOCK: self::_bindgen_ty_54 = 12;
    pub const DT_WHT: self::_bindgen_ty_54 = 14;
    pub type _bindgen_ty_54 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __dirstream {
        _unused: [u8; 0],
    }
    pub type DIR = self::__dirstream;
    extern "C" {
        pub fn opendir(__name: *const c_char) -> *mut self::DIR;
    }
    extern "C" {
        pub fn fdopendir(__fd: c_int) -> *mut self::DIR;
    }
    extern "C" {
        pub fn closedir(__dirp: *mut self::DIR) -> c_int;
    }
    extern "C" {
        pub fn readdir(__dirp: *mut self::DIR) -> *mut self::dirent;
    }
    extern "C" {
        pub fn readdir64(__dirp: *mut self::DIR) -> *mut self::dirent64;
    }
    extern "C" {
        pub fn readdir_r(
            __dirp: *mut self::DIR,
            __entry: *mut self::dirent,
            __result: *mut *mut self::dirent,
        ) -> c_int;
    }
    extern "C" {
        pub fn readdir64_r(
            __dirp: *mut self::DIR,
            __entry: *mut self::dirent64,
            __result: *mut *mut self::dirent64,
        ) -> c_int;
    }
    extern "C" {
        pub fn rewinddir(__dirp: *mut self::DIR);
    }
    extern "C" {
        pub fn seekdir(__dirp: *mut self::DIR, __pos: c_long);
    }
    extern "C" {
        pub fn telldir(__dirp: *mut self::DIR) -> c_long;
    }
    extern "C" {
        pub fn dirfd(__dirp: *mut self::DIR) -> c_int;
    }
    extern "C" {
        pub fn scandir(
            __dir: *const c_char,
            __namelist: *mut *mut *mut self::dirent,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const self::dirent) -> c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const self::dirent,
                    arg2: *mut *const self::dirent,
                ) -> c_int,
            >,
        ) -> c_int;
    }
    extern "C" {
        pub fn scandir64(
            __dir: *const c_char,
            __namelist: *mut *mut *mut self::dirent64,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const self::dirent64) -> c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const self::dirent64,
                    arg2: *mut *const self::dirent64,
                ) -> c_int,
            >,
        ) -> c_int;
    }
    extern "C" {
        pub fn scandirat(
            __dfd: c_int,
            __dir: *const c_char,
            __namelist: *mut *mut *mut self::dirent,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const self::dirent) -> c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const self::dirent,
                    arg2: *mut *const self::dirent,
                ) -> c_int,
            >,
        ) -> c_int;
    }
    extern "C" {
        pub fn scandirat64(
            __dfd: c_int,
            __dir: *const c_char,
            __namelist: *mut *mut *mut self::dirent64,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const self::dirent64) -> c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const self::dirent64,
                    arg2: *mut *const self::dirent64,
                ) -> c_int,
            >,
        ) -> c_int;
    }
    extern "C" {
        pub fn alphasort(__e1: *mut *const self::dirent, __e2: *mut *const self::dirent) -> c_int;
    }
    extern "C" {
        pub fn alphasort64(
            __e1: *mut *const self::dirent64,
            __e2: *mut *const self::dirent64,
        ) -> c_int;
    }
    extern "C" {
        pub fn getdirentries(
            __fd: c_int,
            __buf: *mut c_char,
            __nbytes: usize,
            __basep: *mut self::__off_t,
        ) -> self::__ssize_t;
    }
    extern "C" {
        pub fn getdirentries64(
            __fd: c_int,
            __buf: *mut c_char,
            __nbytes: usize,
            __basep: *mut self::__off64_t,
        ) -> self::__ssize_t;
    }
    extern "C" {
        pub fn versionsort(__e1: *mut *const self::dirent, __e2: *mut *const self::dirent)
            -> c_int;
    }
    extern "C" {
        pub fn versionsort64(
            __e1: *mut *const self::dirent64,
            __e2: *mut *const self::dirent64,
        ) -> c_int;
    }
    #[repr(C)]
    pub struct Chuck_VM_Object__bindgen_vtable(c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_VM_Object {
        pub vtable_: *const Chuck_VM_Object__bindgen_vtable,
        pub m_ref_count: c_ulong,
        pub m_pooled: c_ulong,
        pub m_locked: c_ulong,
        pub m_v_ref: *mut self::std::vector,
    }
    extern "C" {
        #[link_name = "\u{1}our_locks_in_effect"]
        pub static mut Chuck_VM_Object_our_locks_in_effect: c_ulong;
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Object() {
        assert_eq!(
            size_of::<Chuck_VM_Object>(),
            40usize,
            concat!("Size of: ", stringify!(Chuck_VM_Object))
        );
        assert_eq!(
            align_of::<Chuck_VM_Object>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Object))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Object>())).m_ref_count as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Object),
                "::",
                stringify!(m_ref_count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Object>())).m_pooled as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Object),
                "::",
                stringify!(m_pooled)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Object>())).m_locked as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Object),
                "::",
                stringify!(m_locked)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Object>())).m_v_ref as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Object),
                "::",
                stringify!(m_v_ref)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}lock_all"]
        pub fn Chuck_VM_Object_lock_all();
    }
    extern "C" {
        #[link_name = "\u{1}unlock_all"]
        pub fn Chuck_VM_Object_unlock_all();
    }
    impl Default for Chuck_VM_Object {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl Chuck_VM_Object {
        #[inline]
        pub unsafe fn lock_all() {
            Chuck_VM_Object_lock_all()
        }
        #[inline]
        pub unsafe fn unlock_all() {
            Chuck_VM_Object_unlock_all()
        }
    }
    extern "C" {
        #[link_name = "\u{1}add_ref"]
        pub fn Chuck_VM_Object_add_ref(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}release"]
        pub fn Chuck_VM_Object_release(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}lock"]
        pub fn Chuck_VM_Object_lock(this: *mut c_void);
    }
    #[repr(C)]
    pub struct Chuck_VTable {
        pub funcs: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VTable() {
        assert_eq!(
            size_of::<Chuck_VTable>(),
            24usize,
            concat!("Size of: ", stringify!(Chuck_VTable))
        );
        assert_eq!(
            align_of::<Chuck_VTable>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VTable))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VTable>())).funcs as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VTable),
                "::",
                stringify!(funcs)
            )
        );
    }
    impl Default for Chuck_VTable {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VTable {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_VTable {{ funcs: {:?} }}", self.funcs)
        }
    }
    impl PartialEq for Chuck_VTable {
        fn eq(&self, other: &Chuck_VTable) -> bool {
            self.funcs == other.funcs
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Object {
        pub _base: self::Chuck_VM_Object,
        pub vtable: *mut self::Chuck_VTable,
        pub type_ref: *mut self::Chuck_Type,
        pub size: c_ulong,
        pub data: *mut c_uchar,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Object() {
        assert_eq!(
            size_of::<Chuck_Object>(),
            72usize,
            concat!("Size of: ", stringify!(Chuck_Object))
        );
        assert_eq!(
            align_of::<Chuck_Object>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Object))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Object>())).vtable as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Object),
                "::",
                stringify!(vtable)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Object>())).type_ref as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Object),
                "::",
                stringify!(type_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Object>())).size as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Object),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Object>())).data as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Object),
                "::",
                stringify!(data)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Object"]
        pub fn Chuck_Object_Chuck_Object(this: *mut self::Chuck_Object);
    }
    impl Default for Chuck_Object {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl Chuck_Object {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Object_Chuck_Object(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Object_destructor"]
        pub fn Chuck_Object_Chuck_Object_destructor(this: *mut self::Chuck_Object);
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Array {
        pub _base: self::Chuck_Object,
        pub m_array_type: *mut self::Chuck_Type,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array() {
        assert_eq!(
            size_of::<Chuck_Array>(),
            80usize,
            concat!("Size of: ", stringify!(Chuck_Array))
        );
        assert_eq!(
            align_of::<Chuck_Array>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array>())).m_array_type as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array),
                "::",
                stringify!(m_array_type)
            )
        );
    }
    impl Default for Chuck_Array {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Array4 {
        pub _base: self::Chuck_Array,
        pub m_vector: self::std::vector,
        pub m_map: self::std::map,
        pub m_is_obj: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array4() {
        assert_eq!(
            size_of::<Chuck_Array4>(),
            160usize,
            concat!("Size of: ", stringify!(Chuck_Array4))
        );
        assert_eq!(
            align_of::<Chuck_Array4>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array4>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array4),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array4>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array4),
                "::",
                stringify!(m_map)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array4>())).m_is_obj as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array4),
                "::",
                stringify!(m_is_obj)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array4_addr(this: *mut self::Chuck_Array4, i: c_long) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array4_addr1(
            this: *mut self::Chuck_Array4,
            key: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array4_get(
            this: *mut self::Chuck_Array4,
            i: c_long,
            val: *mut c_ulong,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array4_get1(
            this: *mut self::Chuck_Array4,
            key: *const self::std::__cxx11::string,
            val: *mut c_ulong,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array4_set(this: *mut self::Chuck_Array4, i: c_long, val: c_ulong) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array4_set1(
            this: *mut self::Chuck_Array4,
            key: *const self::std::__cxx11::string,
            val: c_ulong,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}push_back"]
        pub fn Chuck_Array4_push_back(this: *mut self::Chuck_Array4, val: c_ulong) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}pop_back"]
        pub fn Chuck_Array4_pop_back(this: *mut self::Chuck_Array4) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}back"]
        pub fn Chuck_Array4_back(this: *const self::Chuck_Array4, val: *mut c_ulong) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}zero"]
        pub fn Chuck_Array4_zero(this: *mut self::Chuck_Array4, start: c_ulong, end: c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array4"]
        pub fn Chuck_Array4_Chuck_Array4(
            this: *mut self::Chuck_Array4,
            is_obj: c_ulong,
            capacity: c_long,
        );
    }
    impl Default for Chuck_Array4 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array4 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array4 {{ m_vector: {:?}, m_map: {:?}, m_is_obj: {:?} }}",
                self.m_vector, self.m_map, self.m_is_obj
            )
        }
    }
    impl Chuck_Array4 {
        #[inline]
        pub unsafe fn addr(&mut self, i: c_long) -> c_ulong {
            Chuck_Array4_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const self::std::__cxx11::string) -> c_ulong {
            Chuck_Array4_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: c_long, val: *mut c_ulong) -> c_long {
            Chuck_Array4_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: *mut c_ulong,
        ) -> c_long {
            Chuck_Array4_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: c_long, val: c_ulong) -> c_long {
            Chuck_Array4_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: c_ulong,
        ) -> c_long {
            Chuck_Array4_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: c_ulong) -> c_long {
            Chuck_Array4_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> c_long {
            Chuck_Array4_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut c_ulong) -> c_long {
            Chuck_Array4_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: c_ulong, end: c_ulong) {
            Chuck_Array4_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(is_obj: c_ulong, capacity: c_long) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Array4_Chuck_Array4(&mut __bindgen_tmp, is_obj, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array4_destructor"]
        pub fn Chuck_Array4_Chuck_Array4_destructor(this: *mut self::Chuck_Array4);
    }
    extern "C" {
        #[link_name = "\u{1}clear"]
        pub fn Chuck_Array4_clear(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}set_size"]
        pub fn Chuck_Array4_set_size(this: *mut c_void, size: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set_capacity"]
        pub fn Chuck_Array4_set_capacity(this: *mut c_void, capacity: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}find"]
        pub fn Chuck_Array4_find(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}erase"]
        pub fn Chuck_Array4_erase(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array8 {
        pub _base: self::Chuck_Array,
        pub m_vector: self::std::vector,
        pub m_map: self::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array8() {
        assert_eq!(
            size_of::<Chuck_Array8>(),
            152usize,
            concat!("Size of: ", stringify!(Chuck_Array8))
        );
        assert_eq!(
            align_of::<Chuck_Array8>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array8))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array8>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array8),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array8>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array8),
                "::",
                stringify!(m_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array8_addr(this: *mut self::Chuck_Array8, i: c_long) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array8_addr1(
            this: *mut self::Chuck_Array8,
            key: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array8_get(this: *mut self::Chuck_Array8, i: c_long, val: *mut f64) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array8_get1(
            this: *mut self::Chuck_Array8,
            key: *const self::std::__cxx11::string,
            val: *mut f64,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array8_set(this: *mut self::Chuck_Array8, i: c_long, val: f64) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array8_set1(
            this: *mut self::Chuck_Array8,
            key: *const self::std::__cxx11::string,
            val: f64,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}push_back"]
        pub fn Chuck_Array8_push_back(this: *mut self::Chuck_Array8, val: f64) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}pop_back"]
        pub fn Chuck_Array8_pop_back(this: *mut self::Chuck_Array8) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}back"]
        pub fn Chuck_Array8_back(this: *const self::Chuck_Array8, val: *mut f64) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}zero"]
        pub fn Chuck_Array8_zero(this: *mut self::Chuck_Array8, start: c_ulong, end: c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array8"]
        pub fn Chuck_Array8_Chuck_Array8(this: *mut self::Chuck_Array8, capacity: c_long);
    }
    impl Default for Chuck_Array8 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array8 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array8 {{ m_vector: {:?}, m_map: {:?} }}",
                self.m_vector, self.m_map
            )
        }
    }
    impl Chuck_Array8 {
        #[inline]
        pub unsafe fn addr(&mut self, i: c_long) -> c_ulong {
            Chuck_Array8_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const self::std::__cxx11::string) -> c_ulong {
            Chuck_Array8_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: c_long, val: *mut f64) -> c_long {
            Chuck_Array8_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: *mut f64,
        ) -> c_long {
            Chuck_Array8_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: c_long, val: f64) -> c_long {
            Chuck_Array8_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(&mut self, key: *const self::std::__cxx11::string, val: f64) -> c_long {
            Chuck_Array8_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: f64) -> c_long {
            Chuck_Array8_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> c_long {
            Chuck_Array8_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut f64) -> c_long {
            Chuck_Array8_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: c_ulong, end: c_ulong) {
            Chuck_Array8_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: c_long) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Array8_Chuck_Array8(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array8_destructor"]
        pub fn Chuck_Array8_Chuck_Array8_destructor(this: *mut self::Chuck_Array8);
    }
    extern "C" {
        #[link_name = "\u{1}clear"]
        pub fn Chuck_Array8_clear(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}set_size"]
        pub fn Chuck_Array8_set_size(this: *mut c_void, size: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set_capacity"]
        pub fn Chuck_Array8_set_capacity(this: *mut c_void, capacity: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}find"]
        pub fn Chuck_Array8_find(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}erase"]
        pub fn Chuck_Array8_erase(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array16 {
        pub _base: self::Chuck_Array,
        pub m_vector: self::std::vector,
        pub m_map: self::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array16() {
        assert_eq!(
            size_of::<Chuck_Array16>(),
            152usize,
            concat!("Size of: ", stringify!(Chuck_Array16))
        );
        assert_eq!(
            align_of::<Chuck_Array16>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array16))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array16>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array16),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array16>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array16),
                "::",
                stringify!(m_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array16_addr(this: *mut self::Chuck_Array16, i: c_long) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array16_addr1(
            this: *mut self::Chuck_Array16,
            key: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array16_get(
            this: *mut self::Chuck_Array16,
            i: c_long,
            val: *mut self::t_CKCOMPLEX,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array16_get1(
            this: *mut self::Chuck_Array16,
            key: *const self::std::__cxx11::string,
            val: *mut self::t_CKCOMPLEX,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array16_set(
            this: *mut self::Chuck_Array16,
            i: c_long,
            val: *const self::t_CKCOMPLEX,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array16_set1(
            this: *mut self::Chuck_Array16,
            key: *const self::std::__cxx11::string,
            val: *const self::t_CKCOMPLEX,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}push_back"]
        pub fn Chuck_Array16_push_back(
            this: *mut self::Chuck_Array16,
            val: *const self::t_CKCOMPLEX,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}pop_back"]
        pub fn Chuck_Array16_pop_back(this: *mut self::Chuck_Array16) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}back"]
        pub fn Chuck_Array16_back(
            this: *const self::Chuck_Array16,
            val: *mut self::t_CKCOMPLEX,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}zero"]
        pub fn Chuck_Array16_zero(this: *mut self::Chuck_Array16, start: c_ulong, end: c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array16"]
        pub fn Chuck_Array16_Chuck_Array16(this: *mut self::Chuck_Array16, capacity: c_long);
    }
    impl Default for Chuck_Array16 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array16 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array16 {{ m_vector: {:?}, m_map: {:?} }}",
                self.m_vector, self.m_map
            )
        }
    }
    impl Chuck_Array16 {
        #[inline]
        pub unsafe fn addr(&mut self, i: c_long) -> c_ulong {
            Chuck_Array16_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const self::std::__cxx11::string) -> c_ulong {
            Chuck_Array16_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: c_long, val: *mut self::t_CKCOMPLEX) -> c_long {
            Chuck_Array16_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: *mut self::t_CKCOMPLEX,
        ) -> c_long {
            Chuck_Array16_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: c_long, val: *const self::t_CKCOMPLEX) -> c_long {
            Chuck_Array16_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: *const self::t_CKCOMPLEX,
        ) -> c_long {
            Chuck_Array16_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: *const self::t_CKCOMPLEX) -> c_long {
            Chuck_Array16_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> c_long {
            Chuck_Array16_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut self::t_CKCOMPLEX) -> c_long {
            Chuck_Array16_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: c_ulong, end: c_ulong) {
            Chuck_Array16_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: c_long) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Array16_Chuck_Array16(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array16_destructor"]
        pub fn Chuck_Array16_Chuck_Array16_destructor(this: *mut self::Chuck_Array16);
    }
    extern "C" {
        #[link_name = "\u{1}clear"]
        pub fn Chuck_Array16_clear(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}set_size"]
        pub fn Chuck_Array16_set_size(this: *mut c_void, size: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set_capacity"]
        pub fn Chuck_Array16_set_capacity(this: *mut c_void, capacity: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}find"]
        pub fn Chuck_Array16_find(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}erase"]
        pub fn Chuck_Array16_erase(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array24 {
        pub _base: self::Chuck_Array,
        pub m_vector: self::std::vector,
        pub m_map: self::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array24() {
        assert_eq!(
            size_of::<Chuck_Array24>(),
            152usize,
            concat!("Size of: ", stringify!(Chuck_Array24))
        );
        assert_eq!(
            align_of::<Chuck_Array24>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array24))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array24>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array24),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array24>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array24),
                "::",
                stringify!(m_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array24_addr(this: *mut self::Chuck_Array24, i: c_long) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array24_addr1(
            this: *mut self::Chuck_Array24,
            key: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array24_get(
            this: *mut self::Chuck_Array24,
            i: c_long,
            val: *mut self::t_CKVEC3,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array24_get1(
            this: *mut self::Chuck_Array24,
            key: *const self::std::__cxx11::string,
            val: *mut self::t_CKVEC3,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array24_set(
            this: *mut self::Chuck_Array24,
            i: c_long,
            val: *const self::t_CKVEC3,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array24_set1(
            this: *mut self::Chuck_Array24,
            key: *const self::std::__cxx11::string,
            val: *const self::t_CKVEC3,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}push_back"]
        pub fn Chuck_Array24_push_back(
            this: *mut self::Chuck_Array24,
            val: *const self::t_CKVEC3,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}pop_back"]
        pub fn Chuck_Array24_pop_back(this: *mut self::Chuck_Array24) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}back"]
        pub fn Chuck_Array24_back(
            this: *const self::Chuck_Array24,
            val: *mut self::t_CKVEC3,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}zero"]
        pub fn Chuck_Array24_zero(this: *mut self::Chuck_Array24, start: c_ulong, end: c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array24"]
        pub fn Chuck_Array24_Chuck_Array24(this: *mut self::Chuck_Array24, capacity: c_long);
    }
    impl Default for Chuck_Array24 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array24 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array24 {{ m_vector: {:?}, m_map: {:?} }}",
                self.m_vector, self.m_map
            )
        }
    }
    impl Chuck_Array24 {
        #[inline]
        pub unsafe fn addr(&mut self, i: c_long) -> c_ulong {
            Chuck_Array24_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const self::std::__cxx11::string) -> c_ulong {
            Chuck_Array24_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: c_long, val: *mut self::t_CKVEC3) -> c_long {
            Chuck_Array24_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: *mut self::t_CKVEC3,
        ) -> c_long {
            Chuck_Array24_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: c_long, val: *const self::t_CKVEC3) -> c_long {
            Chuck_Array24_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: *const self::t_CKVEC3,
        ) -> c_long {
            Chuck_Array24_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: *const self::t_CKVEC3) -> c_long {
            Chuck_Array24_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> c_long {
            Chuck_Array24_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut self::t_CKVEC3) -> c_long {
            Chuck_Array24_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: c_ulong, end: c_ulong) {
            Chuck_Array24_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: c_long) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Array24_Chuck_Array24(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array24_destructor"]
        pub fn Chuck_Array24_Chuck_Array24_destructor(this: *mut self::Chuck_Array24);
    }
    extern "C" {
        #[link_name = "\u{1}clear"]
        pub fn Chuck_Array24_clear(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}set_size"]
        pub fn Chuck_Array24_set_size(this: *mut c_void, size: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set_capacity"]
        pub fn Chuck_Array24_set_capacity(this: *mut c_void, capacity: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}find"]
        pub fn Chuck_Array24_find(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}erase"]
        pub fn Chuck_Array24_erase(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array32 {
        pub _base: self::Chuck_Array,
        pub m_vector: self::std::vector,
        pub m_map: self::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array32() {
        assert_eq!(
            size_of::<Chuck_Array32>(),
            152usize,
            concat!("Size of: ", stringify!(Chuck_Array32))
        );
        assert_eq!(
            align_of::<Chuck_Array32>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array32))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array32>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array32),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array32>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array32),
                "::",
                stringify!(m_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array32_addr(this: *mut self::Chuck_Array32, i: c_long) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}addr"]
        pub fn Chuck_Array32_addr1(
            this: *mut self::Chuck_Array32,
            key: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array32_get(
            this: *mut self::Chuck_Array32,
            i: c_long,
            val: *mut self::t_CKVEC4,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_Array32_get1(
            this: *mut self::Chuck_Array32,
            key: *const self::std::__cxx11::string,
            val: *mut self::t_CKVEC4,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array32_set(
            this: *mut self::Chuck_Array32,
            i: c_long,
            val: *const self::t_CKVEC4,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set"]
        pub fn Chuck_Array32_set1(
            this: *mut self::Chuck_Array32,
            key: *const self::std::__cxx11::string,
            val: *const self::t_CKVEC4,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}push_back"]
        pub fn Chuck_Array32_push_back(
            this: *mut self::Chuck_Array32,
            val: *const self::t_CKVEC4,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}pop_back"]
        pub fn Chuck_Array32_pop_back(this: *mut self::Chuck_Array32) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}back"]
        pub fn Chuck_Array32_back(
            this: *const self::Chuck_Array32,
            val: *mut self::t_CKVEC4,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}zero"]
        pub fn Chuck_Array32_zero(this: *mut self::Chuck_Array32, start: c_ulong, end: c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array32"]
        pub fn Chuck_Array32_Chuck_Array32(this: *mut self::Chuck_Array32, capacity: c_long);
    }
    impl Default for Chuck_Array32 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array32 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array32 {{ m_vector: {:?}, m_map: {:?} }}",
                self.m_vector, self.m_map
            )
        }
    }
    impl Chuck_Array32 {
        #[inline]
        pub unsafe fn addr(&mut self, i: c_long) -> c_ulong {
            Chuck_Array32_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const self::std::__cxx11::string) -> c_ulong {
            Chuck_Array32_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: c_long, val: *mut self::t_CKVEC4) -> c_long {
            Chuck_Array32_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: *mut self::t_CKVEC4,
        ) -> c_long {
            Chuck_Array32_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: c_long, val: *const self::t_CKVEC4) -> c_long {
            Chuck_Array32_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const self::std::__cxx11::string,
            val: *const self::t_CKVEC4,
        ) -> c_long {
            Chuck_Array32_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: *const self::t_CKVEC4) -> c_long {
            Chuck_Array32_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> c_long {
            Chuck_Array32_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut self::t_CKVEC4) -> c_long {
            Chuck_Array32_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: c_ulong, end: c_ulong) {
            Chuck_Array32_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: c_long) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Array32_Chuck_Array32(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Array32_destructor"]
        pub fn Chuck_Array32_Chuck_Array32_destructor(this: *mut self::Chuck_Array32);
    }
    extern "C" {
        #[link_name = "\u{1}clear"]
        pub fn Chuck_Array32_clear(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}set_size"]
        pub fn Chuck_Array32_set_size(this: *mut c_void, size: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}set_capacity"]
        pub fn Chuck_Array32_set_capacity(this: *mut c_void, capacity: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}find"]
        pub fn Chuck_Array32_find(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}erase"]
        pub fn Chuck_Array32_erase(
            this: *mut c_void,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    #[repr(C)]
    pub struct Chuck_Event {
        pub _base: self::Chuck_Object,
        pub m_queue: self::std::queue<root::std::deque>,
        pub m_queue_lock: self::XMutex,
    }
    extern "C" {
        #[link_name = "\u{1}our_can_wait"]
        pub static mut Chuck_Event_our_can_wait: c_ulong;
    }
    #[test]
    fn bindgen_test_layout_Chuck_Event() {
        assert_eq!(
            size_of::<Chuck_Event>(),
            192usize,
            concat!("Size of: ", stringify!(Chuck_Event))
        );
        assert_eq!(
            align_of::<Chuck_Event>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Event))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Event>())).m_queue as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Event),
                "::",
                stringify!(m_queue)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Event>())).m_queue_lock as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Event),
                "::",
                stringify!(m_queue_lock)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}signal"]
        pub fn Chuck_Event_signal(this: *mut self::Chuck_Event);
    }
    extern "C" {
        #[link_name = "\u{1}broadcast"]
        pub fn Chuck_Event_broadcast(this: *mut self::Chuck_Event);
    }
    extern "C" {
        #[link_name = "\u{1}wait"]
        pub fn Chuck_Event_wait(
            this: *mut self::Chuck_Event,
            shred: *mut self::Chuck_VM_Shred,
            vm: *mut self::Chuck_VM,
        );
    }
    extern "C" {
        #[link_name = "\u{1}remove"]
        pub fn Chuck_Event_remove(
            this: *mut self::Chuck_Event,
            shred: *mut self::Chuck_VM_Shred,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}queue_broadcast"]
        pub fn Chuck_Event_queue_broadcast(
            this: *mut self::Chuck_Event,
            event_buffer: *mut self::CBufferSimple,
        );
    }
    impl Default for Chuck_Event {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Event {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Event {{ m_queue: {:?}, m_queue_lock: {:?} }}",
                self.m_queue, self.m_queue_lock
            )
        }
    }
    impl Chuck_Event {
        #[inline]
        pub unsafe fn signal(&mut self) {
            Chuck_Event_signal(self)
        }
        #[inline]
        pub unsafe fn broadcast(&mut self) {
            Chuck_Event_broadcast(self)
        }
        #[inline]
        pub unsafe fn wait(&mut self, shred: *mut self::Chuck_VM_Shred, vm: *mut self::Chuck_VM) {
            Chuck_Event_wait(self, shred, vm)
        }
        #[inline]
        pub unsafe fn remove(&mut self, shred: *mut self::Chuck_VM_Shred) -> c_ulong {
            Chuck_Event_remove(self, shred)
        }
        #[inline]
        pub unsafe fn queue_broadcast(&mut self, event_buffer: *mut self::CBufferSimple) {
            Chuck_Event_queue_broadcast(self, event_buffer)
        }
    }
    #[repr(C)]
    pub struct Chuck_String {
        pub _base: self::Chuck_Object,
        pub m_charptr: *const c_char,
        pub m_str: self::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_String() {
        assert_eq!(
            size_of::<Chuck_String>(),
            112usize,
            concat!("Size of: ", stringify!(Chuck_String))
        );
        assert_eq!(
            align_of::<Chuck_String>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_String))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_String>())).m_charptr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_String),
                "::",
                stringify!(m_charptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_String>())).m_str as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_String),
                "::",
                stringify!(m_str)
            )
        );
    }
    impl Default for Chuck_String {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_String {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_String {{ m_charptr: {:?}, m_str: {:?} }}",
                self.m_charptr, self.m_str
            )
        }
    }
    #[repr(C)]
    pub struct Chuck_IO {
        pub _base: self::Chuck_Event,
        pub m_asyncEvent: *mut self::Chuck_Event,
        pub m_thread: *mut self::XThread,
    }
    #[repr(C)]
    pub struct Chuck_IO_async_args {
        pub fileio_obj: *mut self::Chuck_IO_File,
        pub RETURN: *mut c_void,
        pub intArg: c_long,
        pub floatArg: f64,
        pub stringArg: self::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO_async_args() {
        assert_eq!(
            size_of::<Chuck_IO_async_args>(),
            64usize,
            concat!("Size of: ", stringify!(Chuck_IO_async_args))
        );
        assert_eq!(
            align_of::<Chuck_IO_async_args>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO_async_args))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_IO_async_args>())).fileio_obj as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(fileio_obj)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_async_args>())).RETURN as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(RETURN)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_async_args>())).intArg as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(intArg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_IO_async_args>())).floatArg as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(floatArg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_IO_async_args>())).stringArg as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(stringArg)
            )
        );
    }
    impl Default for Chuck_IO_async_args {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_IO_async_args {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_IO_async_args {{ fileio_obj: {:?}, RETURN: {:?}, intArg: {:?}, floatArg: {:?}, stringArg: {:?} }}" , self . fileio_obj , self . RETURN , self . intArg , self . floatArg , self . stringArg )
        }
    }
    extern "C" {
        #[link_name = "\u{1}INT32"]
        pub static Chuck_IO_INT32: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}INT16"]
        pub static Chuck_IO_INT16: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}INT8"]
        pub static Chuck_IO_INT8: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}MODE_SYNC"]
        pub static Chuck_IO_MODE_SYNC: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}MODE_ASYNC"]
        pub static Chuck_IO_MODE_ASYNC: c_long;
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO() {
        assert_eq!(
            size_of::<Chuck_IO>(),
            208usize,
            concat!("Size of: ", stringify!(Chuck_IO))
        );
        assert_eq!(
            align_of::<Chuck_IO>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO>())).m_asyncEvent as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO),
                "::",
                stringify!(m_asyncEvent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO>())).m_thread as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO),
                "::",
                stringify!(m_thread)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_IO"]
        pub fn Chuck_IO_Chuck_IO(this: *mut self::Chuck_IO);
    }
    impl Default for Chuck_IO {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_IO {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_IO {{ m_asyncEvent: {:?}, m_thread: {:?} }}",
                self.m_asyncEvent, self.m_thread
            )
        }
    }
    impl Chuck_IO {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_IO_Chuck_IO(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_IO_destructor"]
        pub fn Chuck_IO_Chuck_IO_destructor(this: *mut self::Chuck_IO);
    }
    #[repr(C)]
    pub struct Chuck_IO_File {
        pub _base: self::Chuck_IO,
        pub m_flags: c_long,
        pub m_iomode: c_long,
        pub m_io: self::std::fstream,
        pub m_dir: *mut self::DIR,
        pub m_dir_start: c_long,
        pub m_path: self::std::__cxx11::string,
        pub m_vmRef: *mut self::Chuck_VM,
    }
    extern "C" {
        #[link_name = "\u{1}FLAG_READ_WRITE"]
        pub static Chuck_IO_File_FLAG_READ_WRITE: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}FLAG_READONLY"]
        pub static Chuck_IO_File_FLAG_READONLY: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}FLAG_WRITEONLY"]
        pub static Chuck_IO_File_FLAG_WRITEONLY: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}FLAG_APPEND"]
        pub static Chuck_IO_File_FLAG_APPEND: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}TYPE_ASCII"]
        pub static Chuck_IO_File_TYPE_ASCII: c_long;
    }
    extern "C" {
        #[link_name = "\u{1}TYPE_BINARY"]
        pub static Chuck_IO_File_TYPE_BINARY: c_long;
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO_File() {
        assert_eq!(
            size_of::<Chuck_IO_File>(),
            808usize,
            concat!("Size of: ", stringify!(Chuck_IO_File))
        );
        assert_eq!(
            align_of::<Chuck_IO_File>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO_File))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_flags as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_iomode as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_iomode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_io as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_io)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_dir as *const _ as usize },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_dir)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_dir_start as *const _ as usize },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_dir_start)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_path as *const _ as usize },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_path)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_vmRef as *const _ as usize },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_vmRef)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}writeStr_thread"]
        pub fn Chuck_IO_File_writeStr_thread(data: *mut c_void) -> self::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}writeInt_thread"]
        pub fn Chuck_IO_File_writeInt_thread(data: *mut c_void) -> self::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}writeFloat_thread"]
        pub fn Chuck_IO_File_writeFloat_thread(data: *mut c_void) -> self::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_IO_File"]
        pub fn Chuck_IO_File_Chuck_IO_File(this: *mut self::Chuck_IO_File, vm: *mut self::Chuck_VM);
    }
    impl Default for Chuck_IO_File {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_IO_File {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_IO_File {{ m_flags: {:?}, m_iomode: {:?}, m_io: {:?}, m_dir: {:?}, m_dir_start: {:?}, m_path: {:?}, m_vmRef: {:?} }}" , self . m_flags , self . m_iomode , self . m_io , self . m_dir , self . m_dir_start , self . m_path , self . m_vmRef )
        }
    }
    impl Chuck_IO_File {
        #[inline]
        pub unsafe fn writeStr_thread(data: *mut c_void) -> self::THREAD_RETURN {
            Chuck_IO_File_writeStr_thread(data)
        }
        #[inline]
        pub unsafe fn writeInt_thread(data: *mut c_void) -> self::THREAD_RETURN {
            Chuck_IO_File_writeInt_thread(data)
        }
        #[inline]
        pub unsafe fn writeFloat_thread(data: *mut c_void) -> self::THREAD_RETURN {
            Chuck_IO_File_writeFloat_thread(data)
        }
        #[inline]
        pub unsafe fn new(vm: *mut self::Chuck_VM) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_IO_File_Chuck_IO_File(&mut __bindgen_tmp, vm);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_IO_File_destructor"]
        pub fn Chuck_IO_File_Chuck_IO_File_destructor(this: *mut self::Chuck_IO_File);
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn Chuck_IO_File_open(
            this: *mut c_void,
            path: *const self::std::__cxx11::string,
            flags: c_long,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}good"]
        pub fn Chuck_IO_File_good(this: *mut c_void) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn Chuck_IO_File_close(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}flush"]
        pub fn Chuck_IO_File_flush(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}mode"]
        pub fn Chuck_IO_File_mode(this: *mut c_void) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}mode"]
        pub fn Chuck_IO_File_mode1(this: *mut c_void, flag: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}size"]
        pub fn Chuck_IO_File_size(this: *mut c_void) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}seek"]
        pub fn Chuck_IO_File_seek(this: *mut c_void, pos: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}tell"]
        pub fn Chuck_IO_File_tell(this: *mut c_void) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}isDir"]
        pub fn Chuck_IO_File_isDir(this: *mut c_void) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}dirList"]
        pub fn Chuck_IO_File_dirList(this: *mut c_void) -> *mut self::Chuck_Array4;
    }
    extern "C" {
        #[link_name = "\u{1}readLine"]
        pub fn Chuck_IO_File_readLine(this: *mut c_void) -> *mut self::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}readInt"]
        pub fn Chuck_IO_File_readInt(this: *mut c_void, flags: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}readFloat"]
        pub fn Chuck_IO_File_readFloat(this: *mut c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}readString"]
        pub fn Chuck_IO_File_readString(
            this: *mut c_void,
            str: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}eof"]
        pub fn Chuck_IO_File_eof(this: *mut c_void) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_File_write(this: *mut c_void, val: *const self::std::__cxx11::string);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_File_write1(this: *mut c_void, val: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_File_write2(this: *mut c_void, val: c_long, flags: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_File_write3(this: *mut c_void, val: f64);
    }
    #[repr(C)]
    pub struct Chuck_IO_Chout {
        pub _base: self::Chuck_IO,
        pub m_callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        pub m_buffer: self::std::stringstream,
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO_Chout() {
        assert_eq!(
            size_of::<Chuck_IO_Chout>(),
            608usize,
            concat!("Size of: ", stringify!(Chuck_IO_Chout))
        );
        assert_eq!(
            align_of::<Chuck_IO_Chout>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO_Chout))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_Chout>())).m_callback as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_Chout),
                "::",
                stringify!(m_callback)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_Chout>())).m_buffer as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_Chout),
                "::",
                stringify!(m_buffer)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}set_output_callback"]
        pub fn Chuck_IO_Chout_set_output_callback(
            this: *mut self::Chuck_IO_Chout,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_IO_Chout"]
        pub fn Chuck_IO_Chout_Chuck_IO_Chout(
            this: *mut self::Chuck_IO_Chout,
            carrier: *mut self::Chuck_Carrier,
        );
    }
    impl Default for Chuck_IO_Chout {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_IO_Chout {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_IO_Chout {{ m_callback: {:?}, m_buffer: {:?} }}",
                self.m_callback, self.m_buffer
            )
        }
    }
    impl Chuck_IO_Chout {
        #[inline]
        pub unsafe fn set_output_callback(
            &mut self,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) {
            Chuck_IO_Chout_set_output_callback(self, fp)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut self::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_IO_Chout_Chuck_IO_Chout(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_IO_Chout_destructor"]
        pub fn Chuck_IO_Chout_Chuck_IO_Chout_destructor(this: *mut self::Chuck_IO_Chout);
    }
    extern "C" {
        #[link_name = "\u{1}good"]
        pub fn Chuck_IO_Chout_good(this: *mut c_void) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn Chuck_IO_Chout_close(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}flush"]
        pub fn Chuck_IO_Chout_flush(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}mode"]
        pub fn Chuck_IO_Chout_mode(this: *mut c_void) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}mode"]
        pub fn Chuck_IO_Chout_mode1(this: *mut c_void, flag: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}readLine"]
        pub fn Chuck_IO_Chout_readLine(this: *mut c_void) -> *mut self::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}readInt"]
        pub fn Chuck_IO_Chout_readInt(this: *mut c_void, flags: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}readFloat"]
        pub fn Chuck_IO_Chout_readFloat(this: *mut c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}readString"]
        pub fn Chuck_IO_Chout_readString(
            this: *mut c_void,
            str: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}eof"]
        pub fn Chuck_IO_Chout_eof(this: *mut c_void) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_Chout_write(this: *mut c_void, val: *const self::std::__cxx11::string);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_Chout_write1(this: *mut c_void, val: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_Chout_write2(this: *mut c_void, val: c_long, flags: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_Chout_write3(this: *mut c_void, val: f64);
    }
    #[repr(C)]
    pub struct Chuck_IO_Cherr {
        pub _base: self::Chuck_IO,
        pub m_callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        pub m_buffer: self::std::stringstream,
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO_Cherr() {
        assert_eq!(
            size_of::<Chuck_IO_Cherr>(),
            608usize,
            concat!("Size of: ", stringify!(Chuck_IO_Cherr))
        );
        assert_eq!(
            align_of::<Chuck_IO_Cherr>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO_Cherr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_Cherr>())).m_callback as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_Cherr),
                "::",
                stringify!(m_callback)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_Cherr>())).m_buffer as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_Cherr),
                "::",
                stringify!(m_buffer)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}set_output_callback"]
        pub fn Chuck_IO_Cherr_set_output_callback(
            this: *mut self::Chuck_IO_Cherr,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_IO_Cherr"]
        pub fn Chuck_IO_Cherr_Chuck_IO_Cherr(
            this: *mut self::Chuck_IO_Cherr,
            carrier: *mut self::Chuck_Carrier,
        );
    }
    impl Default for Chuck_IO_Cherr {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_IO_Cherr {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_IO_Cherr {{ m_callback: {:?}, m_buffer: {:?} }}",
                self.m_callback, self.m_buffer
            )
        }
    }
    impl Chuck_IO_Cherr {
        #[inline]
        pub unsafe fn set_output_callback(
            &mut self,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) {
            Chuck_IO_Cherr_set_output_callback(self, fp)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut self::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_IO_Cherr_Chuck_IO_Cherr(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_IO_Cherr_destructor"]
        pub fn Chuck_IO_Cherr_Chuck_IO_Cherr_destructor(this: *mut self::Chuck_IO_Cherr);
    }
    extern "C" {
        #[link_name = "\u{1}good"]
        pub fn Chuck_IO_Cherr_good(this: *mut c_void) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn Chuck_IO_Cherr_close(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}flush"]
        pub fn Chuck_IO_Cherr_flush(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}mode"]
        pub fn Chuck_IO_Cherr_mode(this: *mut c_void) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}mode"]
        pub fn Chuck_IO_Cherr_mode1(this: *mut c_void, flag: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}readLine"]
        pub fn Chuck_IO_Cherr_readLine(this: *mut c_void) -> *mut self::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}readInt"]
        pub fn Chuck_IO_Cherr_readInt(this: *mut c_void, flags: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}readFloat"]
        pub fn Chuck_IO_Cherr_readFloat(this: *mut c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}readString"]
        pub fn Chuck_IO_Cherr_readString(
            this: *mut c_void,
            str: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}eof"]
        pub fn Chuck_IO_Cherr_eof(this: *mut c_void) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_Cherr_write(this: *mut c_void, val: *const self::std::__cxx11::string);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_Cherr_write1(this: *mut c_void, val: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_Cherr_write2(this: *mut c_void, val: c_long, flags: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn Chuck_IO_Cherr_write3(this: *mut c_void, val: f64);
    }
    extern "C" {
        pub static mut g_default_chugin_path: [c_char; 0usize];
    }
    extern "C" {
        pub static mut g_chugin_path_envvar: [c_char; 0usize];
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_UAnaBlobProxy {
        _unused: [u8; 0],
    }
    pub mod Chuck_DL_Api {

        pub type Object = *mut c_void;
        pub type Type = *mut c_void;
        pub type String = *mut c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct Api {
            pub vm: *mut self::Chuck_DL_Api::Api_VMApi,
            pub object: *mut self::Chuck_DL_Api::Api_ObjectApi,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct Api_VMApi {
            pub get_srate: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    arg2: *mut self::Chuck_VM_Shred,
                ) -> c_ulong,
            >,
        }
        #[test]
        fn bindgen_test_layout_Api_VMApi() {
            assert_eq!(
                size_of::<Api_VMApi>(),
                8usize,
                concat!("Size of: ", stringify!(Api_VMApi))
            );
            assert_eq!(
                align_of::<Api_VMApi>(),
                8usize,
                concat!("Alignment of ", stringify!(Api_VMApi))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api_VMApi>())).get_srate as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_VMApi),
                    "::",
                    stringify!(get_srate)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}VMApi"]
            pub fn Api_VMApi_VMApi(this: *mut self::Chuck_DL_Api::Api_VMApi);
        }
        impl Default for Api_VMApi {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl Api_VMApi {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = uninitialized();
                Api_VMApi_VMApi(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct Api_ObjectApi {
            pub get_type: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    arg2: *mut self::Chuck_VM_Shred,
                    name: *mut self::std::__cxx11::string,
                ) -> self::Chuck_DL_Api::Type,
            >,
            pub create: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    arg2: *mut self::Chuck_VM_Shred,
                    type_: self::Chuck_DL_Api::Type,
                ) -> self::Chuck_DL_Api::Object,
            >,
            pub create_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    arg2: *mut self::Chuck_VM_Shred,
                    value: *mut self::std::__cxx11::string,
                ) -> self::Chuck_DL_Api::String,
            >,
            pub get_mvar_int: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    object: self::Chuck_DL_Api::Object,
                    name: *mut self::std::__cxx11::string,
                    value: *mut c_long,
                ) -> c_ulong,
            >,
            pub get_mvar_float: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    object: self::Chuck_DL_Api::Object,
                    name: *mut self::std::__cxx11::string,
                    value: *mut f64,
                ) -> c_ulong,
            >,
            pub get_mvar_dur: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    object: self::Chuck_DL_Api::Object,
                    name: *mut self::std::__cxx11::string,
                    value: *mut f64,
                ) -> c_ulong,
            >,
            pub get_mvar_time: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    object: self::Chuck_DL_Api::Object,
                    name: *mut self::std::__cxx11::string,
                    value: *mut f64,
                ) -> c_ulong,
            >,
            pub get_mvar_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    object: self::Chuck_DL_Api::Object,
                    name: *mut self::std::__cxx11::string,
                    value: *mut self::Chuck_DL_Api::String,
                ) -> c_ulong,
            >,
            pub get_mvar_object: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    object: self::Chuck_DL_Api::Object,
                    name: *mut self::std::__cxx11::string,
                    value: *mut self::Chuck_DL_Api::Object,
                ) -> c_ulong,
            >,
            pub set_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: self::CK_DL_API,
                    string: self::Chuck_DL_Api::String,
                    value: *mut self::std::__cxx11::string,
                ) -> c_ulong,
            >,
        }
        #[test]
        fn bindgen_test_layout_Api_ObjectApi() {
            assert_eq!(
                size_of::<Api_ObjectApi>(),
                80usize,
                concat!("Size of: ", stringify!(Api_ObjectApi))
            );
            assert_eq!(
                align_of::<Api_ObjectApi>(),
                8usize,
                concat!("Alignment of ", stringify!(Api_ObjectApi))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api_ObjectApi>())).get_type as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_type)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api_ObjectApi>())).create as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(create)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).create_string as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(create_string)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_int as *const _ as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_int)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_float as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_float)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_dur as *const _ as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_dur)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_time as *const _ as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_time)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_string as *const _ as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_string)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_object as *const _ as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_object)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).set_string as *const _ as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(set_string)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}ObjectApi"]
            pub fn Api_ObjectApi_ObjectApi(this: *mut self::Chuck_DL_Api::Api_ObjectApi);
        }
        impl Default for Api_ObjectApi {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
        impl Api_ObjectApi {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = uninitialized();
                Api_ObjectApi_ObjectApi(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}g_api"]
            pub static mut Api_g_api: self::Chuck_DL_Api::Api;
        }
        #[test]
        fn bindgen_test_layout_Api() {
            assert_eq!(
                size_of::<Api>(),
                16usize,
                concat!("Size of: ", stringify!(Api))
            );
            assert_eq!(
                align_of::<Api>(),
                8usize,
                concat!("Alignment of ", stringify!(Api))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api>())).vm as *const _ as usize },
                0usize,
                concat!("Offset of field: ", stringify!(Api), "::", stringify!(vm))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api>())).object as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api),
                    "::",
                    stringify!(object)
                )
            );
        }
        impl Default for Api {
            fn default() -> Self {
                unsafe { zeroed() }
            }
        }
    }
    pub type CK_DL_API = *const self::Chuck_DL_Api::Api;
    pub type f_ck_declversion = ::std::option::Option<unsafe extern "C" fn() -> c_ulong>;
    pub type f_ck_query =
        ::std::option::Option<unsafe extern "C" fn(QUERY: *mut self::Chuck_DL_Query) -> c_ulong>;
    pub type f_alloc = ::std::option::Option<
        unsafe extern "C" fn(
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        ) -> *mut self::Chuck_Object,
    >;
    pub type f_ctor = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            ARGS: *mut c_void,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        ),
    >;
    pub type f_dtor = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        ),
    >;
    pub type f_mfun = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        ),
    >;
    pub type f_sfun = ::std::option::Option<
        unsafe extern "C" fn(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        ),
    >;
    pub type f_tick = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            in_: f64,
            out: *mut f64,
            API: self::CK_DL_API,
        ) -> c_ulong,
    >;
    pub type f_tickf = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            in_: *mut f64,
            out: *mut f64,
            nframes: c_ulong,
            API: self::CK_DL_API,
        ) -> c_ulong,
    >;
    pub type f_ctrl = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        ),
    >;
    pub type f_cget = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        ),
    >;
    pub type f_pmsg = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            MSG: *const c_char,
            ARGS: *mut c_void,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        ) -> c_ulong,
    >;
    pub type f_tock = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut self::Chuck_Object,
            UANA: *mut self::Chuck_UAna,
            BLOB: *mut self::Chuck_UAnaBlobProxy,
            API: self::CK_DL_API,
        ) -> c_ulong,
    >;
    pub type f_mainthreadhook =
        ::std::option::Option<unsafe extern "C" fn(bindle: *mut c_void) -> c_ulong>;
    pub type f_mainthreadquit =
        ::std::option::Option<unsafe extern "C" fn(bindle: *mut c_void) -> c_ulong>;
    pub type f_setname = ::std::option::Option<
        unsafe extern "C" fn(query: *mut self::Chuck_DL_Query, name: *const c_char),
    >;
    pub type f_begin_class = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            name: *const c_char,
            parent: *const c_char,
        ),
    >;
    pub type f_add_ctor = ::std::option::Option<
        unsafe extern "C" fn(query: *mut self::Chuck_DL_Query, ctor: self::f_ctor),
    >;
    pub type f_add_dtor = ::std::option::Option<
        unsafe extern "C" fn(query: *mut self::Chuck_DL_Query, dtor: self::f_dtor),
    >;
    pub type f_add_mfun = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            mfun: self::f_mfun,
            type_: *const c_char,
            name: *const c_char,
        ),
    >;
    pub type f_add_sfun = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            sfun: self::f_sfun,
            type_: *const c_char,
            name: *const c_char,
        ),
    >;
    pub type f_add_mvar = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            type_: *const c_char,
            name: *const c_char,
            is_const: c_ulong,
        ) -> c_ulong,
    >;
    pub type f_add_svar = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            type_: *const c_char,
            name: *const c_char,
            is_const: c_ulong,
            static_addr: *mut c_void,
        ),
    >;
    pub type f_add_arg = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            type_: *const c_char,
            name: *const c_char,
        ),
    >;
    pub type f_add_ugen_func = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            tick: self::f_tick,
            pmsg: self::f_pmsg,
            num_in: c_ulong,
            num_out: c_ulong,
        ),
    >;
    pub type f_add_ugen_funcf = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            tickf: self::f_tickf,
            pmsg: self::f_pmsg,
            num_in: c_ulong,
            num_out: c_ulong,
        ),
    >;
    pub type f_add_ugen_funcf_auto_num_channels = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            tickf: self::f_tickf,
            psmg: self::f_pmsg,
        ),
    >;
    pub type f_add_ugen_ctrl = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut self::Chuck_DL_Query,
            ctrl: self::f_ctrl,
            cget: self::f_cget,
            type_: *const c_char,
            name: *const c_char,
        ),
    >;
    pub type f_end_class =
        ::std::option::Option<unsafe extern "C" fn(query: *mut self::Chuck_DL_Query) -> c_ulong>;
    pub type f_doc_class = ::std::option::Option<
        unsafe extern "C" fn(query: *mut self::Chuck_DL_Query, doc: *const c_char) -> c_ulong,
    >;
    pub type f_add_example = ::std::option::Option<
        unsafe extern "C" fn(query: *mut self::Chuck_DL_Query, ex: *const c_char) -> c_ulong,
    >;
    pub type f_doc_func = ::std::option::Option<
        unsafe extern "C" fn(query: *mut self::Chuck_DL_Query, doc: *const c_char) -> c_ulong,
    >;
    pub type f_doc_var = ::std::option::Option<
        unsafe extern "C" fn(query: *mut self::Chuck_DL_Query, doc: *const c_char) -> c_ulong,
    >;
    #[repr(C)]
    pub struct Chuck_DL_Query {
        pub m_carrier: *mut self::Chuck_Carrier,
        pub setname: self::f_setname,
        pub begin_class: self::f_begin_class,
        pub add_ctor: self::f_add_ctor,
        pub add_dtor: self::f_add_dtor,
        pub add_mfun: self::f_add_mfun,
        pub add_sfun: self::f_add_sfun,
        pub add_mvar: self::f_add_mvar,
        pub add_svar: self::f_add_svar,
        pub add_arg: self::f_add_arg,
        pub add_ugen_func: self::f_add_ugen_func,
        pub add_ugen_funcf: self::f_add_ugen_funcf,
        pub add_ugen_funcf_auto_num_channels: self::f_add_ugen_funcf_auto_num_channels,
        pub add_ugen_ctrl: self::f_add_ugen_ctrl,
        pub end_class: self::f_end_class,
        pub last_var: *mut self::Chuck_DL_Value,
        pub doc_class: self::f_doc_class,
        pub doc_func: self::f_doc_func,
        pub doc_var: self::f_doc_var,
        pub add_ex: self::f_add_example,
        pub dll_ref: *mut self::Chuck_DLL,
        pub reserved: *mut c_void,
        pub srate: c_ulong,
        pub linepos: c_int,
        pub dll_name: self::std::__cxx11::string,
        pub curr_class: *mut self::Chuck_DL_Class,
        pub curr_func: *mut self::Chuck_DL_Func,
        pub name: self::std::__cxx11::string,
        pub classes: self::std::vector,
        pub stack: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Query() {
        assert_eq!(
            size_of::<Chuck_DL_Query>(),
            320usize,
            concat!("Size of: ", stringify!(Chuck_DL_Query))
        );
        assert_eq!(
            align_of::<Chuck_DL_Query>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Query))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).m_carrier as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).setname as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(setname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).begin_class as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(begin_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ctor as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ctor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_dtor as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_dtor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_mfun as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_mfun)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_sfun as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_sfun)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_mvar as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_mvar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_svar as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_svar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_arg as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ugen_func as *const _ as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ugen_func)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ugen_funcf as *const _ as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ugen_funcf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ugen_funcf_auto_num_channels
                    as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ugen_funcf_auto_num_channels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ugen_ctrl as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ugen_ctrl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).end_class as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(end_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).last_var as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(last_var)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).doc_class as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(doc_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).doc_func as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(doc_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).doc_var as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(doc_var)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ex as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).dll_ref as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(dll_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).reserved as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(reserved)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).srate as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(srate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).linepos as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).dll_name as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(dll_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).curr_class as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(curr_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).curr_func as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(curr_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).name as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).classes as *const _ as usize },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(classes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).stack as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(stack)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}clear"]
        pub fn Chuck_DL_Query_clear(this: *mut self::Chuck_DL_Query);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_DL_Query"]
        pub fn Chuck_DL_Query_Chuck_DL_Query(
            this: *mut self::Chuck_DL_Query,
            carrier: *mut self::Chuck_Carrier,
        );
    }
    impl Default for Chuck_DL_Query {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Query {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DL_Query {{ m_carrier: {:?}, setname: {:?}, begin_class: {:?}, add_ctor: {:?}, add_dtor: {:?}, add_mfun: {:?}, add_sfun: {:?}, add_mvar: {:?}, add_svar: {:?}, add_arg: {:?}, add_ugen_func: {:?}, add_ugen_funcf: {:?}, add_ugen_funcf_auto_num_channels: {:?}, add_ugen_ctrl: {:?}, end_class: {:?}, last_var: {:?}, doc_class: {:?}, doc_func: {:?}, doc_var: {:?}, add_ex: {:?}, dll_ref: {:?}, reserved: {:?}, srate: {:?}, linepos: {:?}, dll_name: {:?}, curr_class: {:?}, curr_func: {:?}, name: {:?}, classes: {:?}, stack: {:?} }}" , self . m_carrier , self . setname , self . begin_class , self . add_ctor , self . add_dtor , self . add_mfun , self . add_sfun , self . add_mvar , self . add_svar , self . add_arg , self . add_ugen_func , self . add_ugen_funcf , self . add_ugen_funcf_auto_num_channels , self . add_ugen_ctrl , self . end_class , self . last_var , self . doc_class , self . doc_func , self . doc_var , self . add_ex , self . dll_ref , self . reserved , self . srate , self . linepos , self . dll_name , self . curr_class , self . curr_func , self . name , self . classes , self . stack )
        }
    }
    impl Chuck_DL_Query {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Chuck_DL_Query_clear(self)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut self::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_DL_Query_Chuck_DL_Query(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Class {
        pub name: self::std::__cxx11::string,
        pub parent: self::std::__cxx11::string,
        pub ctors: self::std::vector,
        pub dtor: *mut self::Chuck_DL_Func,
        pub mfuns: self::std::vector,
        pub sfuns: self::std::vector,
        pub mvars: self::std::vector,
        pub svars: self::std::vector,
        pub ugen_tick: self::f_tick,
        pub ugen_tickf: self::f_tickf,
        pub ugen_pmsg: self::f_pmsg,
        pub ugen_ctrl: self::std::vector,
        pub uana_tock: self::f_tock,
        pub classes: self::std::vector,
        pub current_mvar_offset: c_ulong,
        pub ugen_num_in: c_ulong,
        pub ugen_num_out: c_ulong,
        pub doc: self::std::__cxx11::string,
        pub examples: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Class() {
        assert_eq!(
            size_of::<Chuck_DL_Class>(),
            352usize,
            concat!("Size of: ", stringify!(Chuck_DL_Class))
        );
        assert_eq!(
            align_of::<Chuck_DL_Class>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Class))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).parent as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ctors as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ctors)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).dtor as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(dtor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).mfuns as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(mfuns)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).sfuns as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(sfuns)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).mvars as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(mvars)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).svars as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(svars)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_tick as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_tickf as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_tickf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_pmsg as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_pmsg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_ctrl as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_ctrl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).uana_tock as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(uana_tock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).classes as *const _ as usize },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(classes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Class>())).current_mvar_offset as *const _ as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(current_mvar_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_num_in as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_num_in)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_num_out as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_num_out)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).doc as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(doc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).examples as *const _ as usize },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(examples)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_DL_Class_destructor"]
        pub fn Chuck_DL_Class_Chuck_DL_Class_destructor(this: *mut self::Chuck_DL_Class);
    }
    impl Default for Chuck_DL_Class {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Class {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DL_Class {{ name: {:?}, parent: {:?}, ctors: {:?}, dtor: {:?}, mfuns: {:?}, sfuns: {:?}, mvars: {:?}, svars: {:?}, ugen_tick: {:?}, ugen_tickf: {:?}, ugen_pmsg: {:?}, ugen_ctrl: {:?}, uana_tock: {:?}, classes: {:?}, current_mvar_offset: {:?}, ugen_num_in: {:?}, ugen_num_out: {:?}, doc: {:?}, examples: {:?} }}" , self . name , self . parent , self . ctors , self . dtor , self . mfuns , self . sfuns , self . mvars , self . svars , self . ugen_tick , self . ugen_tickf , self . ugen_pmsg , self . ugen_ctrl , self . uana_tock , self . classes , self . current_mvar_offset , self . ugen_num_in , self . ugen_num_out , self . doc , self . examples )
        }
    }
    impl Chuck_DL_Class {
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_DL_Class_Chuck_DL_Class_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Value {
        pub name: self::std::__cxx11::string,
        pub type_: self::std::__cxx11::string,
        pub is_const: c_ulong,
        pub static_addr: *mut c_void,
        pub doc: self::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Value() {
        assert_eq!(
            size_of::<Chuck_DL_Value>(),
            112usize,
            concat!("Size of: ", stringify!(Chuck_DL_Value))
        );
        assert_eq!(
            align_of::<Chuck_DL_Value>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Value))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).is_const as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(is_const)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).static_addr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(static_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).doc as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(doc)
            )
        );
    }
    impl Default for Chuck_DL_Value {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Value {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DL_Value {{ name: {:?}, type: {:?}, is_const: {:?}, static_addr: {:?}, doc: {:?} }}" , self . name , self . type_ , self . is_const , self . static_addr , self . doc )
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Func {
        pub name: self::std::__cxx11::string,
        pub type_: self::std::__cxx11::string,
        pub __bindgen_anon_1: self::Chuck_DL_Func__bindgen_ty_1,
        pub args: self::std::vector,
        pub doc: self::std::__cxx11::string,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_DL_Func__bindgen_ty_1 {
        pub ctor: self::f_ctor,
        pub dtor: self::f_dtor,
        pub mfun: self::f_mfun,
        pub sfun: self::f_sfun,
        pub addr: c_ulong,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Func__bindgen_ty_1() {
        assert_eq!(
            size_of::<Chuck_DL_Func__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_DL_Func__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<Chuck_DL_Func__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Func__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).ctor as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(ctor)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).dtor as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(dtor)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).mfun as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(mfun)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).sfun as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(sfun)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).addr as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(addr)
            )
        );
    }
    impl Default for Chuck_DL_Func__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Func__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_DL_Func__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Func() {
        assert_eq!(
            size_of::<Chuck_DL_Func>(),
            128usize,
            concat!("Size of: ", stringify!(Chuck_DL_Func))
        );
        assert_eq!(
            align_of::<Chuck_DL_Func>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Func))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Func>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Func>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Func>())).args as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Func>())).doc as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func),
                "::",
                stringify!(doc)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_DL_Func_destructor"]
        pub fn Chuck_DL_Func_Chuck_DL_Func_destructor(this: *mut self::Chuck_DL_Func);
    }
    impl Default for Chuck_DL_Func {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Func {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DL_Func {{ name: {:?}, type: {:?}, __bindgen_anon_1: {:?}, args: {:?}, doc: {:?} }}" , self . name , self . type_ , self . __bindgen_anon_1 , self . args , self . doc )
        }
    }
    impl Chuck_DL_Func {
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_DL_Func_Chuck_DL_Func_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Ctrl {
        pub name: self::std::__cxx11::string,
        pub type_: self::std::__cxx11::string,
        pub types: self::std::vector,
        pub ctrl: self::f_ctrl,
        pub cget: self::f_cget,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Ctrl() {
        assert_eq!(
            size_of::<Chuck_DL_Ctrl>(),
            104usize,
            concat!("Size of: ", stringify!(Chuck_DL_Ctrl))
        );
        assert_eq!(
            align_of::<Chuck_DL_Ctrl>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Ctrl))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).types as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(types)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).ctrl as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(ctrl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).cget as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(cget)
            )
        );
    }
    impl Default for Chuck_DL_Ctrl {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Ctrl {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_DL_Ctrl {{ name: {:?}, type: {:?}, types: {:?}, ctrl: {:?}, cget: {:?} }}",
                self.name, self.type_, self.types, self.ctrl, self.cget
            )
        }
    }
    extern "C" {
        pub fn make_new_mfun(
            t: *const c_char,
            n: *const c_char,
            mfun: self::f_mfun,
        ) -> *mut self::Chuck_DL_Func;
    }
    extern "C" {
        pub fn make_new_sfun(
            t: *const c_char,
            n: *const c_char,
            sfun: self::f_sfun,
        ) -> *mut self::Chuck_DL_Func;
    }
    extern "C" {
        pub fn make_new_arg(t: *const c_char, n: *const c_char) -> *mut self::Chuck_DL_Value;
    }
    extern "C" {
        pub fn make_new_mvar(
            t: *const c_char,
            n: *const c_char,
            c: c_ulong,
        ) -> *mut self::Chuck_DL_Value;
    }
    extern "C" {
        pub fn make_new_svar(
            t: *const c_char,
            n: *const c_char,
            c: c_ulong,
            a: *mut c_void,
        ) -> *mut self::Chuck_DL_Value;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_DL_Return {
        pub v_int: c_long,
        pub v_uint: c_ulong,
        pub v_float: f64,
        pub v_dur: f64,
        pub v_time: f64,
        pub v_complex: self::t_CKCOMPLEX,
        pub v_polar: self::t_CKPOLAR,
        pub v_vec3: self::t_CKVEC3,
        pub v_vec4: self::t_CKVEC4,
        pub v_object: *mut self::Chuck_Object,
        pub v_string: *mut self::Chuck_String,
        _bindgen_union_align: [u64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Return() {
        assert_eq!(
            size_of::<Chuck_DL_Return>(),
            32usize,
            concat!("Size of: ", stringify!(Chuck_DL_Return))
        );
        assert_eq!(
            align_of::<Chuck_DL_Return>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Return))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_int as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_int)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_uint as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_uint)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_float as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_float)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_dur as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_dur)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_time as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_complex as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_complex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_polar as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_polar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_vec3 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_vec3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_vec4 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_vec4)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_object as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_object)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_string as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_string)
            )
        );
    }
    impl Default for Chuck_DL_Return {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Return {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_DL_Return {{ union }}")
        }
    }
    #[repr(C)]
    pub struct Chuck_DLL {
        pub _base: self::Chuck_VM_Object,
        pub m_handle: *mut c_void,
        pub m_last_error: self::std::__cxx11::string,
        pub m_filename: self::std::__cxx11::string,
        pub m_id: self::std::__cxx11::string,
        pub m_func: self::std::__cxx11::string,
        pub m_done_query: c_ulong,
        pub m_version_func: self::f_ck_declversion,
        pub m_query_func: self::f_ck_query,
        pub m_query: self::Chuck_DL_Query,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DLL() {
        assert_eq!(
            size_of::<Chuck_DLL>(),
            520usize,
            concat!("Size of: ", stringify!(Chuck_DLL))
        );
        assert_eq!(
            align_of::<Chuck_DLL>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DLL))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_handle as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_handle)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_last_error as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_last_error)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_filename as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_filename)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_id as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_func as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_done_query as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_done_query)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_version_func as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_version_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_query_func as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_query_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_query as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_query)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}load"]
        pub fn Chuck_DLL_load(
            this: *mut self::Chuck_DLL,
            filename: *const c_char,
            func: *const c_char,
            lazy: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}load"]
        pub fn Chuck_DLL_load1(
            this: *mut self::Chuck_DLL,
            query_func: self::f_ck_query,
            lazy: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get_addr"]
        pub fn Chuck_DLL_get_addr(this: *mut self::Chuck_DLL, symbol: *const c_char)
            -> *mut c_void;
    }
    extern "C" {
        #[link_name = "\u{1}last_error"]
        pub fn Chuck_DLL_last_error(this: *const self::Chuck_DLL) -> *const c_char;
    }
    extern "C" {
        #[link_name = "\u{1}unload"]
        pub fn Chuck_DLL_unload(this: *mut self::Chuck_DLL) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}query"]
        pub fn Chuck_DLL_query(this: *mut self::Chuck_DLL) -> *const self::Chuck_DL_Query;
    }
    extern "C" {
        #[link_name = "\u{1}good"]
        pub fn Chuck_DLL_good(this: *const self::Chuck_DLL) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}name"]
        pub fn Chuck_DLL_name(this: *const self::Chuck_DLL) -> *const c_char;
    }
    impl Default for Chuck_DLL {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DLL {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DLL {{ m_handle: {:?}, m_last_error: {:?}, m_filename: {:?}, m_id: {:?}, m_func: {:?}, m_done_query: {:?}, m_version_func: {:?}, m_query_func: {:?}, m_query: {:?} }}" , self . m_handle , self . m_last_error , self . m_filename , self . m_id , self . m_func , self . m_done_query , self . m_version_func , self . m_query_func , self . m_query )
        }
    }
    impl Chuck_DLL {
        #[inline]
        pub unsafe fn load(
            &mut self,
            filename: *const c_char,
            func: *const c_char,
            lazy: c_ulong,
        ) -> c_ulong {
            Chuck_DLL_load(self, filename, func, lazy)
        }
        #[inline]
        pub unsafe fn load1(&mut self, query_func: self::f_ck_query, lazy: c_ulong) -> c_ulong {
            Chuck_DLL_load1(self, query_func, lazy)
        }
        #[inline]
        pub unsafe fn get_addr(&mut self, symbol: *const c_char) -> *mut c_void {
            Chuck_DLL_get_addr(self, symbol)
        }
        #[inline]
        pub unsafe fn last_error(&self) -> *const c_char {
            Chuck_DLL_last_error(self)
        }
        #[inline]
        pub unsafe fn unload(&mut self) -> c_ulong {
            Chuck_DLL_unload(self)
        }
        #[inline]
        pub unsafe fn query(&mut self) -> *const self::Chuck_DL_Query {
            Chuck_DLL_query(self)
        }
        #[inline]
        pub unsafe fn good(&self) -> c_ulong {
            Chuck_DLL_good(self)
        }
        #[inline]
        pub unsafe fn name(&self) -> *const c_char {
            Chuck_DLL_name(self)
        }
    }
    extern "C" {
        pub fn _dl_mcount_wrapper_check(__selfpc: *mut c_void);
    }
    pub type Lmid_t = c_long;
    extern "C" {
        pub fn dlopen(__file: *const c_char, __mode: c_int) -> *mut c_void;
    }
    extern "C" {
        pub fn dlclose(__handle: *mut c_void) -> c_int;
    }
    extern "C" {
        pub fn dlsym(__handle: *mut c_void, __name: *const c_char) -> *mut c_void;
    }
    extern "C" {
        pub fn dlmopen(__nsid: self::Lmid_t, __file: *const c_char, __mode: c_int) -> *mut c_void;
    }
    extern "C" {
        pub fn dlvsym(
            __handle: *mut c_void,
            __name: *const c_char,
            __version: *const c_char,
        ) -> *mut c_void;
    }
    extern "C" {
        pub fn dlerror() -> *mut c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Dl_info {
        pub dli_fname: *const c_char,
        pub dli_fbase: *mut c_void,
        pub dli_sname: *const c_char,
        pub dli_saddr: *mut c_void,
    }
    #[test]
    fn bindgen_test_layout_Dl_info() {
        assert_eq!(
            size_of::<Dl_info>(),
            32usize,
            concat!("Size of: ", stringify!(Dl_info))
        );
        assert_eq!(
            align_of::<Dl_info>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_info))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_fname as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_fname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_fbase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_fbase)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_sname as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_sname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_saddr as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_saddr)
            )
        );
    }
    impl Default for Dl_info {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        pub fn dladdr(__address: *const c_void, __info: *mut self::Dl_info) -> c_int;
    }
    extern "C" {
        pub fn dladdr1(
            __address: *const c_void,
            __info: *mut self::Dl_info,
            __extra_info: *mut *mut c_void,
            __flags: c_int,
        ) -> c_int;
    }
    pub const RTLD_DL_SYMENT: self::_bindgen_ty_55 = 1;
    pub const RTLD_DL_LINKMAP: self::_bindgen_ty_55 = 2;
    pub type _bindgen_ty_55 = u32;
    extern "C" {
        pub fn dlinfo(__handle: *mut c_void, __request: c_int, __arg: *mut c_void) -> c_int;
    }
    pub const RTLD_DI_LMID: self::_bindgen_ty_56 = 1;
    pub const RTLD_DI_LINKMAP: self::_bindgen_ty_56 = 2;
    pub const RTLD_DI_CONFIGADDR: self::_bindgen_ty_56 = 3;
    pub const RTLD_DI_SERINFO: self::_bindgen_ty_56 = 4;
    pub const RTLD_DI_SERINFOSIZE: self::_bindgen_ty_56 = 5;
    pub const RTLD_DI_ORIGIN: self::_bindgen_ty_56 = 6;
    pub const RTLD_DI_PROFILENAME: self::_bindgen_ty_56 = 7;
    pub const RTLD_DI_PROFILEOUT: self::_bindgen_ty_56 = 8;
    pub const RTLD_DI_TLS_MODID: self::_bindgen_ty_56 = 9;
    pub const RTLD_DI_TLS_DATA: self::_bindgen_ty_56 = 10;
    pub const RTLD_DI_MAX: self::_bindgen_ty_56 = 10;
    pub type _bindgen_ty_56 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Dl_serpath {
        pub dls_name: *mut c_char,
        pub dls_flags: c_uint,
    }
    #[test]
    fn bindgen_test_layout_Dl_serpath() {
        assert_eq!(
            size_of::<Dl_serpath>(),
            16usize,
            concat!("Size of: ", stringify!(Dl_serpath))
        );
        assert_eq!(
            align_of::<Dl_serpath>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_serpath))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serpath>())).dls_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serpath),
                "::",
                stringify!(dls_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serpath>())).dls_flags as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serpath),
                "::",
                stringify!(dls_flags)
            )
        );
    }
    impl Default for Dl_serpath {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Dl_serinfo {
        pub dls_size: usize,
        pub dls_cnt: c_uint,
        pub dls_serpath: [self::Dl_serpath; 1usize],
    }
    #[test]
    fn bindgen_test_layout_Dl_serinfo() {
        assert_eq!(
            size_of::<Dl_serinfo>(),
            32usize,
            concat!("Size of: ", stringify!(Dl_serinfo))
        );
        assert_eq!(
            align_of::<Dl_serinfo>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_serinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_cnt as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_cnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_serpath as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_serpath)
            )
        );
    }
    impl Default for Dl_serinfo {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        pub static mut EM_anyErrors: c_ulong;
    }
    extern "C" {
        pub static mut EM_tokPos: c_int;
    }
    extern "C" {
        pub static mut EM_lineNum: c_int;
    }
    extern "C" {
        pub static mut EM_extLineNum: c_int;
    }
    extern "C" {
        pub fn EM_newline();
    }
    extern "C" {
        pub fn ck_fprintf_stdout(format: *const c_char, ...);
    }
    extern "C" {
        pub fn ck_fprintf_stderr(format: *const c_char, ...);
    }
    extern "C" {
        pub fn ck_fflush_stdout();
    }
    extern "C" {
        pub fn ck_fflush_stderr();
    }
    extern "C" {
        pub fn ck_vfprintf_stdout(format: *const c_char, args: *mut self::__va_list_tag);
    }
    extern "C" {
        pub fn ck_vfprintf_stderr(format: *const c_char, args: *mut self::__va_list_tag);
    }
    extern "C" {
        pub fn ck_set_stdout_callback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        );
    }
    extern "C" {
        pub fn ck_set_stderr_callback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        );
    }
    #[repr(C)]
    pub struct ChuckOutStream {
        pub m_stream: self::std::stringstream,
        pub m_callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        pub m_isErr: bool,
    }
    #[test]
    fn bindgen_test_layout_ChuckOutStream() {
        assert_eq!(
            size_of::<ChuckOutStream>(),
            408usize,
            concat!("Size of: ", stringify!(ChuckOutStream))
        );
        assert_eq!(
            align_of::<ChuckOutStream>(),
            8usize,
            concat!("Alignment of ", stringify!(ChuckOutStream))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChuckOutStream>())).m_stream as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ChuckOutStream),
                "::",
                stringify!(m_stream)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChuckOutStream>())).m_callback as *const _ as usize },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(ChuckOutStream),
                "::",
                stringify!(m_callback)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChuckOutStream>())).m_isErr as *const _ as usize },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(ChuckOutStream),
                "::",
                stringify!(m_isErr)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}set_callback"]
        pub fn ChuckOutStream_set_callback(
            this: *mut self::ChuckOutStream,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}ChuckOutStream"]
        pub fn ChuckOutStream_ChuckOutStream(this: *mut self::ChuckOutStream, isErr: bool);
    }
    extern "C" {
        #[link_name = "\u{1}ChuckOutStream_destructor"]
        pub fn ChuckOutStream_ChuckOutStream_destructor(this: *mut self::ChuckOutStream);
    }
    impl Default for ChuckOutStream {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for ChuckOutStream {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ChuckOutStream {{ m_stream: {:?}, m_callback: {:?}, m_isErr: {:?} }}",
                self.m_stream, self.m_callback, self.m_isErr
            )
        }
    }
    impl ChuckOutStream {
        #[inline]
        pub unsafe fn set_callback(
            &mut self,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) {
            ChuckOutStream_set_callback(self, callback)
        }
        #[inline]
        pub unsafe fn new(isErr: bool) -> Self {
            let mut __bindgen_tmp = uninitialized();
            ChuckOutStream_ChuckOutStream(&mut __bindgen_tmp, isErr);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ChuckOutStream_ChuckOutStream_destructor(self)
        }
    }
    extern "C" {
        pub static mut g_ck_stdoutstream: self::ChuckOutStream;
    }
    extern "C" {
        pub static mut g_ck_stderrstream: self::ChuckOutStream;
    }
    extern "C" {
        pub fn EM_log(arg1: c_long, arg2: self::c_constr, ...);
    }
    extern "C" {
        pub fn EM_setlog(arg1: c_long);
    }
    extern "C" {
        pub fn EM_pushlog();
    }
    extern "C" {
        pub fn EM_poplog();
    }
    extern "C" {
        pub static mut g_loglevel: c_long;
    }
    extern "C" {
        pub fn EM_error(arg1: c_int, arg2: self::c_constr, ...);
    }
    extern "C" {
        pub fn EM_error2(arg1: c_int, arg2: self::c_constr, ...);
    }
    extern "C" {
        pub fn EM_error2b(arg1: c_int, arg2: self::c_constr, ...);
    }
    extern "C" {
        pub fn EM_error3(arg1: self::c_constr, ...);
    }
    extern "C" {
        pub fn EM_impossible(arg1: self::c_constr, ...);
    }
    extern "C" {
        pub fn EM_reset(filename: self::c_constr, fd: *mut self::FILE) -> c_ulong;
    }
    extern "C" {
        pub fn EM_change_file(filename: self::c_constr);
    }
    extern "C" {
        pub fn EM_lasterror() -> *const c_char;
    }
    extern "C" {
        pub fn EM_reset_msg();
    }
    extern "C" {
        pub fn mini(str: *const c_char) -> *const c_char;
    }
    extern "C" {
        pub fn mini_type(str: *const c_char) -> *const c_char;
    }
    pub const te_Type_te_none: self::te_Type = 0;
    pub const te_Type_te_int: self::te_Type = 1;
    pub const te_Type_te_uint: self::te_Type = 2;
    pub const te_Type_te_single: self::te_Type = 3;
    pub const te_Type_te_float: self::te_Type = 4;
    pub const te_Type_te_double: self::te_Type = 5;
    pub const te_Type_te_time: self::te_Type = 6;
    pub const te_Type_te_dur: self::te_Type = 7;
    pub const te_Type_te_complex: self::te_Type = 8;
    pub const te_Type_te_polar: self::te_Type = 9;
    pub const te_Type_te_string: self::te_Type = 10;
    pub const te_Type_te_thread: self::te_Type = 11;
    pub const te_Type_te_shred: self::te_Type = 12;
    pub const te_Type_te_class: self::te_Type = 13;
    pub const te_Type_te_function: self::te_Type = 14;
    pub const te_Type_te_object: self::te_Type = 15;
    pub const te_Type_te_user: self::te_Type = 16;
    pub const te_Type_te_array: self::te_Type = 17;
    pub const te_Type_te_null: self::te_Type = 18;
    pub const te_Type_te_ugen: self::te_Type = 19;
    pub const te_Type_te_uana: self::te_Type = 20;
    pub const te_Type_te_event: self::te_Type = 21;
    pub const te_Type_te_void: self::te_Type = 22;
    pub const te_Type_te_stdout: self::te_Type = 23;
    pub const te_Type_te_stderr: self::te_Type = 24;
    pub const te_Type_te_adc: self::te_Type = 25;
    pub const te_Type_te_dac: self::te_Type = 26;
    pub const te_Type_te_bunghole: self::te_Type = 27;
    pub const te_Type_te_uanablob: self::te_Type = 28;
    pub const te_Type_te_io: self::te_Type = 29;
    pub const te_Type_te_fileio: self::te_Type = 30;
    pub const te_Type_te_chout: self::te_Type = 31;
    pub const te_Type_te_cherr: self::te_Type = 32;
    pub const te_Type_te_multi: self::te_Type = 33;
    pub const te_Type_te_vec3: self::te_Type = 34;
    pub const te_Type_te_vec4: self::te_Type = 35;
    pub const te_Type_te_vector: self::te_Type = 36;
    pub type te_Type = u32;
    pub const te_GlobalType_te_globalInt: self::te_GlobalType = 0;
    pub const te_GlobalType_te_globalFloat: self::te_GlobalType = 1;
    pub const te_GlobalType_te_globalEvent: self::te_GlobalType = 2;
    pub type te_GlobalType = u32;
    pub const te_HowMuch_te_do_all: self::te_HowMuch = 0;
    pub const te_HowMuch_te_do_classes_only: self::te_HowMuch = 1;
    pub const te_HowMuch_te_do_no_classes: self::te_HowMuch = 2;
    pub type te_HowMuch = u32;
    #[repr(C)]
    pub struct Chuck_Scope {
        pub scope: self::std::vector,
        pub commit_map: self::std::map,
    }
    impl Default for Chuck_Scope {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Scope {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Scope {{ scope: {:?}, commit_map: {:?} }}",
                self.scope, self.commit_map
            )
        }
    }
    impl PartialEq for Chuck_Scope {
        fn eq(&self, other: &Chuck_Scope) -> bool {
            self.scope == other.scope && self.commit_map == other.commit_map
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Multi {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct Chuck_Namespace {
        pub _base: self::Chuck_VM_Object,
        pub type_: self::Chuck_Scope,
        pub value: self::Chuck_Scope,
        pub func: self::Chuck_Scope,
        pub obj_v_table: self::Chuck_VTable,
        pub class_data: *mut c_uchar,
        pub class_data_size: c_ulong,
        pub name: self::std::__cxx11::string,
        pub pre_ctor: *mut self::Chuck_VM_Code,
        pub dtor: *mut self::Chuck_VM_Code,
        pub parent: *mut self::Chuck_Namespace,
        pub offset: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Namespace() {
        assert_eq!(
            size_of::<Chuck_Namespace>(),
            360usize,
            concat!("Size of: ", stringify!(Chuck_Namespace))
        );
        assert_eq!(
            align_of::<Chuck_Namespace>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Namespace))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).type_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).value as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).func as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).obj_v_table as *const _ as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(obj_v_table)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).class_data as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(class_data)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Namespace>())).class_data_size as *const _ as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(class_data_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).name as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).pre_ctor as *const _ as usize },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(pre_ctor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).dtor as *const _ as usize },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(dtor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).parent as *const _ as usize },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).offset as *const _ as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(offset)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}lookup_type"]
        pub fn Chuck_Namespace_lookup_type(
            this: *mut self::Chuck_Namespace,
            name: *const self::std::__cxx11::string,
            climb: c_long,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}lookup_type"]
        pub fn Chuck_Namespace_lookup_type1(
            this: *mut self::Chuck_Namespace,
            name: self::S_Symbol,
            climb: c_long,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}lookup_value"]
        pub fn Chuck_Namespace_lookup_value(
            this: *mut self::Chuck_Namespace,
            name: *const self::std::__cxx11::string,
            climb: c_long,
        ) -> *mut self::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}lookup_value"]
        pub fn Chuck_Namespace_lookup_value1(
            this: *mut self::Chuck_Namespace,
            name: self::S_Symbol,
            climb: c_long,
        ) -> *mut self::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}lookup_func"]
        pub fn Chuck_Namespace_lookup_func(
            this: *mut self::Chuck_Namespace,
            name: *const self::std::__cxx11::string,
            climb: c_long,
        ) -> *mut self::Chuck_Func;
    }
    extern "C" {
        #[link_name = "\u{1}lookup_func"]
        pub fn Chuck_Namespace_lookup_func1(
            this: *mut self::Chuck_Namespace,
            name: self::S_Symbol,
            climb: c_long,
        ) -> *mut self::Chuck_Func;
    }
    extern "C" {
        #[link_name = "\u{1}get_types"]
        pub fn Chuck_Namespace_get_types(
            this: *mut self::Chuck_Namespace,
            out: *mut self::std::vector,
        );
    }
    extern "C" {
        #[link_name = "\u{1}get_values"]
        pub fn Chuck_Namespace_get_values(
            this: *mut self::Chuck_Namespace,
            out: *mut self::std::vector,
        );
    }
    extern "C" {
        #[link_name = "\u{1}get_funcs"]
        pub fn Chuck_Namespace_get_funcs(
            this: *mut self::Chuck_Namespace,
            out: *mut self::std::vector,
        );
    }
    impl Default for Chuck_Namespace {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Namespace {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Namespace {{ type: {:?}, value: {:?}, func: {:?}, obj_v_table: {:?}, class_data: {:?}, class_data_size: {:?}, name: {:?}, pre_ctor: {:?}, dtor: {:?}, parent: {:?}, offset: {:?} }}" , self . type_ , self . value , self . func , self . obj_v_table , self . class_data , self . class_data_size , self . name , self . pre_ctor , self . dtor , self . parent , self . offset )
        }
    }
    impl Chuck_Namespace {
        #[inline]
        pub unsafe fn lookup_type(
            &mut self,
            name: *const self::std::__cxx11::string,
            climb: c_long,
        ) -> *mut self::Chuck_Type {
            Chuck_Namespace_lookup_type(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_type1(
            &mut self,
            name: self::S_Symbol,
            climb: c_long,
        ) -> *mut self::Chuck_Type {
            Chuck_Namespace_lookup_type1(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_value(
            &mut self,
            name: *const self::std::__cxx11::string,
            climb: c_long,
        ) -> *mut self::Chuck_Value {
            Chuck_Namespace_lookup_value(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_value1(
            &mut self,
            name: self::S_Symbol,
            climb: c_long,
        ) -> *mut self::Chuck_Value {
            Chuck_Namespace_lookup_value1(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_func(
            &mut self,
            name: *const self::std::__cxx11::string,
            climb: c_long,
        ) -> *mut self::Chuck_Func {
            Chuck_Namespace_lookup_func(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_func1(
            &mut self,
            name: self::S_Symbol,
            climb: c_long,
        ) -> *mut self::Chuck_Func {
            Chuck_Namespace_lookup_func1(self, name, climb)
        }
        #[inline]
        pub unsafe fn get_types(&mut self, out: *mut self::std::vector) {
            Chuck_Namespace_get_types(self, out)
        }
        #[inline]
        pub unsafe fn get_values(&mut self, out: *mut self::std::vector) {
            Chuck_Namespace_get_values(self, out)
        }
        #[inline]
        pub unsafe fn get_funcs(&mut self, out: *mut self::std::vector) {
            Chuck_Namespace_get_funcs(self, out)
        }
    }
    #[repr(C)]
    pub struct Chuck_Context {
        pub _base: self::Chuck_VM_Object,
        pub filename: self::std::__cxx11::string,
        pub full_path: self::std::__cxx11::string,
        pub parse_tree: self::a_Program,
        pub nspc: *mut self::Chuck_Namespace,
        pub public_class_def: self::a_Class_Def,
        pub has_error: c_ulong,
        pub progress: c_ulong,
        pub new_types: self::std::vector,
        pub new_values: self::std::vector,
        pub new_funcs: self::std::vector,
        pub new_nspc: self::std::vector,
        pub commit_map: self::std::map,
    }
    pub const Chuck_Context_P_NONE: self::Chuck_Context__bindgen_ty_1 = 0;
    pub const Chuck_Context_P_CLASSES_ONLY: self::Chuck_Context__bindgen_ty_1 = 1;
    pub const Chuck_Context_P_ALL: self::Chuck_Context__bindgen_ty_1 = 2;
    pub type Chuck_Context__bindgen_ty_1 = u32;
    #[test]
    fn bindgen_test_layout_Chuck_Context() {
        assert_eq!(
            size_of::<Chuck_Context>(),
            288usize,
            concat!("Size of: ", stringify!(Chuck_Context))
        );
        assert_eq!(
            align_of::<Chuck_Context>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Context))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).filename as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(filename)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).full_path as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(full_path)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).parse_tree as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(parse_tree)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).nspc as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(nspc)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Context>())).public_class_def as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(public_class_def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).has_error as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(has_error)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).progress as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(progress)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).new_types as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(new_types)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).new_values as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(new_values)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).new_funcs as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(new_funcs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).new_nspc as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(new_nspc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).commit_map as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(commit_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}add_commit_candidate"]
        pub fn Chuck_Context_add_commit_candidate(
            this: *mut self::Chuck_Context,
            nspc: *mut self::Chuck_Namespace,
        );
    }
    extern "C" {
        #[link_name = "\u{1}commit"]
        pub fn Chuck_Context_commit(this: *mut self::Chuck_Context);
    }
    extern "C" {
        #[link_name = "\u{1}rollback"]
        pub fn Chuck_Context_rollback(this: *mut self::Chuck_Context);
    }
    extern "C" {
        #[link_name = "\u{1}new_Chuck_Type"]
        pub fn Chuck_Context_new_Chuck_Type(
            this: *mut self::Chuck_Context,
            env: *mut self::Chuck_Env,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}new_Chuck_Value"]
        pub fn Chuck_Context_new_Chuck_Value(
            this: *mut self::Chuck_Context,
            t: *mut self::Chuck_Type,
            name: *const self::std::__cxx11::string,
        ) -> *mut self::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}new_Chuck_Func"]
        pub fn Chuck_Context_new_Chuck_Func(
            this: *mut self::Chuck_Context,
        ) -> *mut self::Chuck_Func;
    }
    extern "C" {
        #[link_name = "\u{1}new_Chuck_Namespace"]
        pub fn Chuck_Context_new_Chuck_Namespace(
            this: *mut self::Chuck_Context,
        ) -> *mut self::Chuck_Namespace;
    }
    impl Default for Chuck_Context {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Context {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Context {{ filename: {:?}, full_path: {:?}, parse_tree: {:?}, nspc: {:?}, public_class_def: {:?}, has_error: {:?}, progress: {:?}, new_types: {:?}, new_values: {:?}, new_funcs: {:?}, new_nspc: {:?}, commit_map: {:?} }}" , self . filename , self . full_path , self . parse_tree , self . nspc , self . public_class_def , self . has_error , self . progress , self . new_types , self . new_values , self . new_funcs , self . new_nspc , self . commit_map )
        }
    }
    impl Chuck_Context {
        #[inline]
        pub unsafe fn add_commit_candidate(&mut self, nspc: *mut self::Chuck_Namespace) {
            Chuck_Context_add_commit_candidate(self, nspc)
        }
        #[inline]
        pub unsafe fn commit(&mut self) {
            Chuck_Context_commit(self)
        }
        #[inline]
        pub unsafe fn rollback(&mut self) {
            Chuck_Context_rollback(self)
        }
        #[inline]
        pub unsafe fn new_Chuck_Type(
            &mut self,
            env: *mut self::Chuck_Env,
        ) -> *mut self::Chuck_Type {
            Chuck_Context_new_Chuck_Type(self, env)
        }
        #[inline]
        pub unsafe fn new_Chuck_Value(
            &mut self,
            t: *mut self::Chuck_Type,
            name: *const self::std::__cxx11::string,
        ) -> *mut self::Chuck_Value {
            Chuck_Context_new_Chuck_Value(self, t, name)
        }
        #[inline]
        pub unsafe fn new_Chuck_Func(&mut self) -> *mut self::Chuck_Func {
            Chuck_Context_new_Chuck_Func(self)
        }
        #[inline]
        pub unsafe fn new_Chuck_Namespace(&mut self) -> *mut self::Chuck_Namespace {
            Chuck_Context_new_Chuck_Namespace(self)
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Context_destructor"]
        pub fn Chuck_Context_Chuck_Context_destructor(this: *mut self::Chuck_Context);
    }
    #[repr(C)]
    pub struct Chuck_Env {
        pub _base: self::Chuck_VM_Object,
        pub m_carrier: *mut self::Chuck_Carrier,
        pub global_nspc: *mut self::Chuck_Namespace,
        pub global_context: self::Chuck_Context,
        pub user_nspc: *mut self::Chuck_Namespace,
        pub nspc_stack: self::std::vector,
        pub curr: *mut self::Chuck_Namespace,
        pub class_stack: self::std::vector,
        pub class_def: *mut self::Chuck_Type,
        pub func: *mut self::Chuck_Func,
        pub class_scope: c_ulong,
        pub contexts: self::std::vector,
        pub context: *mut self::Chuck_Context,
        pub breaks: self::std::vector,
        pub key_words: self::std::map,
        pub key_types: self::std::map,
        pub key_values: self::std::map,
        pub deprecated: self::std::map,
        pub deprecate_level: c_long,
        pub t_void: *mut self::Chuck_Type,
        pub t_int: *mut self::Chuck_Type,
        pub t_float: *mut self::Chuck_Type,
        pub t_time: *mut self::Chuck_Type,
        pub t_dur: *mut self::Chuck_Type,
        pub t_complex: *mut self::Chuck_Type,
        pub t_polar: *mut self::Chuck_Type,
        pub t_vec3: *mut self::Chuck_Type,
        pub t_vec4: *mut self::Chuck_Type,
        pub t_null: *mut self::Chuck_Type,
        pub t_function: *mut self::Chuck_Type,
        pub t_object: *mut self::Chuck_Type,
        pub t_array: *mut self::Chuck_Type,
        pub t_string: *mut self::Chuck_Type,
        pub t_event: *mut self::Chuck_Type,
        pub t_ugen: *mut self::Chuck_Type,
        pub t_uana: *mut self::Chuck_Type,
        pub t_uanablob: *mut self::Chuck_Type,
        pub t_shred: *mut self::Chuck_Type,
        pub t_io: *mut self::Chuck_Type,
        pub t_fileio: *mut self::Chuck_Type,
        pub t_chout: *mut self::Chuck_Type,
        pub t_cherr: *mut self::Chuck_Type,
        pub t_thread: *mut self::Chuck_Type,
        pub t_class: *mut self::Chuck_Type,
        pub t_dac: *mut self::Chuck_Type,
        pub t_adc: *mut self::Chuck_Type,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Env() {
        assert_eq!(
            size_of::<Chuck_Env>(),
            904usize,
            concat!("Size of: ", stringify!(Chuck_Env))
        );
        assert_eq!(
            align_of::<Chuck_Env>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Env))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).m_carrier as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).global_nspc as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(global_nspc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).global_context as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(global_context)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).user_nspc as *const _ as usize },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(user_nspc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).nspc_stack as *const _ as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(nspc_stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).curr as *const _ as usize },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(curr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).class_stack as *const _ as usize },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(class_stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).class_def as *const _ as usize },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(class_def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).func as *const _ as usize },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).class_scope as *const _ as usize },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(class_scope)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).contexts as *const _ as usize },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(contexts)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).context as *const _ as usize },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(context)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).breaks as *const _ as usize },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(breaks)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).key_words as *const _ as usize },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(key_words)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).key_types as *const _ as usize },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(key_types)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).key_values as *const _ as usize },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(key_values)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).deprecated as *const _ as usize },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(deprecated)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).deprecate_level as *const _ as usize },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(deprecate_level)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_void as *const _ as usize },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_void)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_int as *const _ as usize },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_int)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_float as *const _ as usize },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_float)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_time as *const _ as usize },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_dur as *const _ as usize },
            720usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_dur)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_complex as *const _ as usize },
            728usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_complex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_polar as *const _ as usize },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_polar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_vec3 as *const _ as usize },
            744usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_vec3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_vec4 as *const _ as usize },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_vec4)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_null as *const _ as usize },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_null)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_function as *const _ as usize },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_function)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_object as *const _ as usize },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_object)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_array as *const _ as usize },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_string as *const _ as usize },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_string)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_event as *const _ as usize },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_event)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_ugen as *const _ as usize },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_ugen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_uana as *const _ as usize },
            816usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_uana)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_uanablob as *const _ as usize },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_uanablob)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_shred as *const _ as usize },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_shred)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_io as *const _ as usize },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_io)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_fileio as *const _ as usize },
            848usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_fileio)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_chout as *const _ as usize },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_chout)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_cherr as *const _ as usize },
            864usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_cherr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_thread as *const _ as usize },
            872usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_thread)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_class as *const _ as usize },
            880usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_dac as *const _ as usize },
            888usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_dac)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_adc as *const _ as usize },
            896usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_adc)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Env"]
        pub fn Chuck_Env_Chuck_Env(this: *mut self::Chuck_Env);
    }
    impl Default for Chuck_Env {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Env {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Env {{ m_carrier: {:?}, global_nspc: {:?}, global_context: {:?}, user_nspc: {:?}, nspc_stack: {:?}, curr: {:?}, class_stack: {:?}, class_def: {:?}, func: {:?}, class_scope: {:?}, contexts: {:?}, context: {:?}, breaks: {:?}, key_words: {:?}, key_types: {:?}, key_values: {:?}, deprecated: {:?}, deprecate_level: {:?}, t_void: {:?}, t_int: {:?}, t_float: {:?}, t_time: {:?}, t_dur: {:?}, t_complex: {:?}, t_polar: {:?}, t_vec3: {:?}, t_vec4: {:?}, t_null: {:?}, t_function: {:?}, t_object: {:?}, t_array: {:?}, t_string: {:?}, t_event: {:?}, t_ugen: {:?}, t_uana: {:?}, t_uanablob: {:?}, t_shred: {:?}, t_io: {:?}, t_fileio: {:?}, t_chout: {:?}, t_cherr: {:?}, t_thread: {:?}, t_class: {:?}, t_dac: {:?}, t_adc: {:?} }}" , self . m_carrier , self . global_nspc , self . global_context , self . user_nspc , self . nspc_stack , self . curr , self . class_stack , self . class_def , self . func , self . class_scope , self . contexts , self . context , self . breaks , self . key_words , self . key_types , self . key_values , self . deprecated , self . deprecate_level , self . t_void , self . t_int , self . t_float , self . t_time , self . t_dur , self . t_complex , self . t_polar , self . t_vec3 , self . t_vec4 , self . t_null , self . t_function , self . t_object , self . t_array , self . t_string , self . t_event , self . t_ugen , self . t_uana , self . t_uanablob , self . t_shred , self . t_io , self . t_fileio , self . t_chout , self . t_cherr , self . t_thread , self . t_class , self . t_dac , self . t_adc )
        }
    }
    impl Chuck_Env {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Env_Chuck_Env(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Env_destructor"]
        pub fn Chuck_Env_Chuck_Env_destructor(this: *mut self::Chuck_Env);
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_UGen_Info {
        pub _base: self::Chuck_VM_Object,
        pub tick: self::f_tick,
        pub tickf: self::f_tickf,
        pub pmsg: self::f_pmsg,
        pub num_ins: c_ulong,
        pub num_outs: c_ulong,
        pub tock: self::f_tock,
        pub num_ins_ana: c_ulong,
        pub num_outs_ana: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_UGen_Info() {
        assert_eq!(
            size_of::<Chuck_UGen_Info>(),
            104usize,
            concat!("Size of: ", stringify!(Chuck_UGen_Info))
        );
        assert_eq!(
            align_of::<Chuck_UGen_Info>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_UGen_Info))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).tick as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).tickf as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(tickf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).pmsg as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(pmsg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).num_ins as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(num_ins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).num_outs as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(num_outs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).tock as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(tock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).num_ins_ana as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(num_ins_ana)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_UGen_Info>())).num_outs_ana as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(num_outs_ana)
            )
        );
    }
    impl Default for Chuck_UGen_Info {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Type {
        pub _base: self::Chuck_VM_Object,
        pub xid: self::te_Type,
        pub name: self::std::__cxx11::string,
        pub parent: *mut self::Chuck_Type,
        pub size: c_ulong,
        pub owner: *mut self::Chuck_Namespace,
        pub __bindgen_anon_1: self::Chuck_Type__bindgen_ty_1,
        pub array_depth: c_ulong,
        pub obj_size: c_ulong,
        pub info: *mut self::Chuck_Namespace,
        pub func: *mut self::Chuck_Func,
        pub def: self::a_Class_Def,
        pub ugen_info: *mut self::Chuck_UGen_Info,
        pub is_copy: c_ulong,
        pub is_complete: c_ulong,
        pub has_constructor: c_ulong,
        pub has_destructor: c_ulong,
        pub allocator: self::f_alloc,
        pub doc: self::std::__cxx11::string,
        pub examples: self::std::vector,
        pub ret: self::std::__cxx11::string,
        pub m_env: *mut self::Chuck_Env,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_Type__bindgen_ty_1 {
        pub array_type: *mut self::Chuck_Type,
        pub actual_type: *mut self::Chuck_Type,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Type__bindgen_ty_1() {
        assert_eq!(
            size_of::<Chuck_Type__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Type__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<Chuck_Type__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Type__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Type__bindgen_ty_1>())).array_type as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type__bindgen_ty_1),
                "::",
                stringify!(array_type)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Type__bindgen_ty_1>())).actual_type as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type__bindgen_ty_1),
                "::",
                stringify!(actual_type)
            )
        );
    }
    impl Default for Chuck_Type__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Type__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_Type__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_Chuck_Type() {
        assert_eq!(
            size_of::<Chuck_Type>(),
            296usize,
            concat!("Size of: ", stringify!(Chuck_Type))
        );
        assert_eq!(
            align_of::<Chuck_Type>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Type))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).xid as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).name as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).parent as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).size as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).owner as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).array_depth as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(array_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).obj_size as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(obj_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).info as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(info)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).func as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).def as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).ugen_info as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(ugen_info)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).is_copy as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(is_copy)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).is_complete as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(is_complete)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).has_constructor as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(has_constructor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).has_destructor as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(has_destructor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).allocator as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(allocator)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).doc as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(doc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).examples as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(examples)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).ret as *const _ as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(ret)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).m_env as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(m_env)
            )
        );
    }
    impl Default for Chuck_Type {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Type {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Type {{ xid: {:?}, name: {:?}, parent: {:?}, size: {:?}, owner: {:?}, __bindgen_anon_1: {:?}, array_depth: {:?}, obj_size: {:?}, info: {:?}, func: {:?}, def: {:?}, ugen_info: {:?}, is_copy: {:?}, is_complete: {:?}, has_constructor: {:?}, has_destructor: {:?}, allocator: {:?}, doc: {:?}, examples: {:?}, ret: {:?}, m_env: {:?} }}" , self . xid , self . name , self . parent , self . size , self . owner , self . __bindgen_anon_1 , self . array_depth , self . obj_size , self . info , self . func , self . def , self . ugen_info , self . is_copy , self . is_complete , self . has_constructor , self . has_destructor , self . allocator , self . doc , self . examples , self . ret , self . m_env )
        }
    }
    #[repr(C)]
    pub struct Chuck_Value {
        pub _base: self::Chuck_VM_Object,
        pub type_: *mut self::Chuck_Type,
        pub name: self::std::__cxx11::string,
        pub offset: c_ulong,
        pub addr: *mut c_void,
        pub is_const: c_ulong,
        pub is_member: c_ulong,
        pub is_static: c_ulong,
        pub is_context_global: c_ulong,
        pub is_decl_checked: c_ulong,
        pub is_global: c_ulong,
        pub access: c_ulong,
        pub owner: *mut self::Chuck_Namespace,
        pub owner_class: *mut self::Chuck_Type,
        pub func_ref: *mut self::Chuck_Func,
        pub func_num_overloads: c_long,
        pub doc: self::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Value() {
        assert_eq!(
            size_of::<Chuck_Value>(),
            216usize,
            concat!("Size of: ", stringify!(Chuck_Value))
        );
        assert_eq!(
            align_of::<Chuck_Value>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Value))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).type_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).name as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).offset as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).addr as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_const as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_const)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_member as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_member)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_static as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_static)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Value>())).is_context_global as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_context_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_decl_checked as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_decl_checked)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_global as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).access as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(access)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).owner as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).owner_class as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(owner_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).func_ref as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(func_ref)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Value>())).func_num_overloads as *const _ as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(func_num_overloads)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).doc as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(doc)
            )
        );
    }
    impl Default for Chuck_Value {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Value {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Value {{ type: {:?}, name: {:?}, offset: {:?}, addr: {:?}, is_const: {:?}, is_member: {:?}, is_static: {:?}, is_context_global: {:?}, is_decl_checked: {:?}, is_global: {:?}, access: {:?}, owner: {:?}, owner_class: {:?}, func_ref: {:?}, func_num_overloads: {:?}, doc: {:?} }}" , self . type_ , self . name , self . offset , self . addr , self . is_const , self . is_member , self . is_static , self . is_context_global , self . is_decl_checked , self . is_global , self . access , self . owner , self . owner_class , self . func_ref , self . func_num_overloads , self . doc )
        }
    }
    #[repr(C)]
    pub struct Chuck_Func {
        pub _base: self::Chuck_VM_Object,
        pub name: self::std::__cxx11::string,
        pub def: self::a_Func_Def,
        pub code: *mut self::Chuck_VM_Code,
        pub is_member: c_ulong,
        pub vt_index: c_ulong,
        pub value_ref: *mut self::Chuck_Value,
        pub next: *mut self::Chuck_Func,
        pub up: *mut self::Chuck_Value,
        pub doc: self::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Func() {
        assert_eq!(
            size_of::<Chuck_Func>(),
            160usize,
            concat!("Size of: ", stringify!(Chuck_Func))
        );
        assert_eq!(
            align_of::<Chuck_Func>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Func))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).name as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).def as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).code as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).is_member as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(is_member)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).vt_index as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(vt_index)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).value_ref as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(value_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).next as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).up as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(up)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).doc as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(doc)
            )
        );
    }
    impl Default for Chuck_Func {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Func {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Func {{ name: {:?}, def: {:?}, code: {:?}, is_member: {:?}, vt_index: {:?}, value_ref: {:?}, next: {:?}, up: {:?}, doc: {:?} }}" , self . name , self . def , self . code , self . is_member , self . vt_index , self . value_ref , self . next , self . up , self . doc )
        }
    }
    extern "C" {
        pub fn type_engine_init(carrier: *mut self::Chuck_Carrier) -> *mut self::Chuck_Env;
    }
    extern "C" {
        pub fn type_engine_shutdown(env: *mut self::Chuck_Env);
    }
    extern "C" {
        pub fn type_engine_load_context(
            env: *mut self::Chuck_Env,
            context: *mut self::Chuck_Context,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_unload_context(env: *mut self::Chuck_Env) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_check_prog(
            env: *mut self::Chuck_Env,
            prog: self::a_Program,
            filename: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_make_context(
            prog: self::a_Program,
            filename: *const self::std::__cxx11::string,
        ) -> *mut self::Chuck_Context;
    }
    extern "C" {
        pub fn type_engine_check_context(
            env: *mut self::Chuck_Env,
            context: *mut self::Chuck_Context,
            how_much: self::te_HowMuch,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_check_stmt(env: *mut self::Chuck_Env, stmt: self::a_Stmt) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_check_exp(env: *mut self::Chuck_Env, exp: self::a_Exp)
            -> self::t_CKTYPE;
    }
    extern "C" {
        pub fn type_engine_add_dll(
            env: *mut self::Chuck_Env,
            dll: *mut self::Chuck_DLL,
            nspc: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_add_dll2(
            env: *mut self::Chuck_Env,
            dll: *mut self::Chuck_DLL,
            dest: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_add_class_from_dl(
            env: *mut self::Chuck_Env,
            c: *mut self::Chuck_DL_Class,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn equals(lhs: *mut self::Chuck_Type, rhs: *mut self::Chuck_Type) -> c_ulong;
    }
    extern "C" {
        pub fn isa(lhs: *mut self::Chuck_Type, rhs: *mut self::Chuck_Type) -> c_ulong;
    }
    extern "C" {
        pub fn isprim(env: *mut self::Chuck_Env, type_: *mut self::Chuck_Type) -> c_ulong;
    }
    extern "C" {
        pub fn isobj(env: *mut self::Chuck_Env, type_: *mut self::Chuck_Type) -> c_ulong;
    }
    extern "C" {
        pub fn isfunc(env: *mut self::Chuck_Env, type_: *mut self::Chuck_Type) -> c_ulong;
    }
    extern "C" {
        pub fn iskindofint(env: *mut self::Chuck_Env, type_: *mut self::Chuck_Type) -> c_ulong;
    }
    extern "C" {
        pub fn getkindof(env: *mut self::Chuck_Env, type_: *mut self::Chuck_Type) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_import_class_begin(
            env: *mut self::Chuck_Env,
            type_: *mut self::Chuck_Type,
            where_: *mut self::Chuck_Namespace,
            pre_ctor: self::f_ctor,
            dtor: self::f_dtor,
            doc: *const c_char,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        pub fn type_engine_import_ugen_begin(
            env: *mut self::Chuck_Env,
            name: *const c_char,
            parent: *const c_char,
            where_: *mut self::Chuck_Namespace,
            pre_ctor: self::f_ctor,
            dtor: self::f_dtor,
            tick: self::f_tick,
            tickf: self::f_tickf,
            pmsg: self::f_pmsg,
            num_ins: c_ulong,
            num_outs: c_ulong,
            doc: *const c_char,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        pub fn type_engine_import_uana_begin(
            env: *mut self::Chuck_Env,
            name: *const c_char,
            parent: *const c_char,
            where_: *mut self::Chuck_Namespace,
            pre_ctor: self::f_ctor,
            dtor: self::f_dtor,
            tick: self::f_tick,
            tock: self::f_tock,
            pmsg: self::f_pmsg,
            num_ins: c_ulong,
            num_outs: c_ulong,
            num_ins_ana: c_ulong,
            num_outs_ana: c_ulong,
            doc: *const c_char,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        pub fn type_engine_import_mfun(
            env: *mut self::Chuck_Env,
            mfun: *mut self::Chuck_DL_Func,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_import_sfun(
            env: *mut self::Chuck_Env,
            sfun: *mut self::Chuck_DL_Func,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_import_mvar(
            env: *mut self::Chuck_Env,
            type_: *const c_char,
            name: *const c_char,
            is_const: c_ulong,
            doc: *const c_char,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_import_svar(
            env: *mut self::Chuck_Env,
            type_: *const c_char,
            name: *const c_char,
            is_const: c_ulong,
            addr: c_ulong,
            doc: *const c_char,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_import_ugen_ctrl(
            env: *mut self::Chuck_Env,
            type_: *const c_char,
            name: *const c_char,
            ctrl: self::f_ctrl,
            write: c_ulong,
            read: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_import_add_ex(env: *mut self::Chuck_Env, ex: *const c_char) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_import_class_end(env: *mut self::Chuck_Env) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_register_deprecate(
            env: *mut self::Chuck_Env,
            former: *const self::std::__cxx11::string,
            latter: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_check_reserved(
            env: *mut self::Chuck_Env,
            xid: *const self::std::__cxx11::string,
            pos: c_int,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_check_primitive(
            env: *mut self::Chuck_Env,
            type_: *mut self::Chuck_Type,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_compat_func(
            lhs: self::a_Func_Def,
            rhs: self::a_Func_Def,
            pos: c_int,
            err: *mut self::std::__cxx11::string,
            print: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_get_deprecate(
            env: *mut self::Chuck_Env,
            from: *const self::std::__cxx11::string,
            to: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_find_common_anc(
            lhs: *mut self::Chuck_Type,
            rhs: *mut self::Chuck_Type,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        pub fn type_engine_find_type(
            env: *mut self::Chuck_Env,
            path: self::a_Id_List,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        pub fn type_engine_find_value(
            type_: *mut self::Chuck_Type,
            xid: *const self::std::__cxx11::string,
        ) -> *mut self::Chuck_Value;
    }
    extern "C" {
        pub fn type_engine_find_nspc(
            env: *mut self::Chuck_Env,
            path: self::a_Id_List,
        ) -> *mut self::Chuck_Namespace;
    }
    extern "C" {
        #[doc = " spencer: added this into function to provide the same logic path"]
        #[doc = " for type_engine_check_exp_decl() and ck_add_mvar() when they determine"]
        #[doc = " offsets for mvars -- added 1.3.0.0"]
        pub fn type_engine_next_offset(
            current_offset: c_ulong,
            type_: *mut self::Chuck_Type,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn verify_array(array: self::a_Array_Sub) -> c_ulong;
    }
    extern "C" {
        pub fn new_array_type(
            env: *mut self::Chuck_Env,
            array_parent: *mut self::Chuck_Type,
            depth: c_ulong,
            base_type: *mut self::Chuck_Type,
            owner_nspc: *mut self::Chuck_Namespace,
        ) -> *mut self::Chuck_Type;
    }
    extern "C" {
        pub fn type_path(path: self::a_Id_List) -> *const c_char;
    }
    extern "C" {
        pub fn str2list(path: *const self::std::__cxx11::string) -> self::a_Id_List;
    }
    extern "C" {
        pub fn howmuch2str(how_much: self::te_HowMuch) -> *const c_char;
    }
    extern "C" {
        pub fn escape_str(str_lit: *mut c_char, linepos: c_int) -> c_ulong;
    }
    extern "C" {
        pub fn str2char(char_lit: *const c_char, linepos: c_int) -> c_long;
    }
    extern "C" {
        pub fn type_engine_scan0_prog(
            env: *mut self::Chuck_Env,
            prog: self::a_Program,
            val: self::te_HowMuch,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan0_class_def(
            env: *mut self::Chuck_Env,
            def: self::a_Class_Def,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan1_prog(
            env: *mut self::Chuck_Env,
            prog: self::a_Program,
            val: self::te_HowMuch,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan1_class_def(
            env: *mut self::Chuck_Env,
            def: self::a_Class_Def,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan1_func_def(
            env: *mut self::Chuck_Env,
            def: self::a_Func_Def,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan1_exp_decl(
            env: *mut self::Chuck_Env,
            decl: self::a_Exp_Decl,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan2_prog(
            env: *mut self::Chuck_Env,
            prog: self::a_Program,
            val: self::te_HowMuch,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan2_class_def(
            env: *mut self::Chuck_Env,
            def: self::a_Class_Def,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan2_func_def(
            env: *mut self::Chuck_Env,
            def: self::a_Func_Def,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn type_engine_scan2_exp_decl(
            env: *mut self::Chuck_Env,
            decl: self::a_Exp_Decl,
        ) -> c_ulong;
    }
    #[repr(C)]
    pub struct Chuck_Local {
        pub name: self::std::__cxx11::string,
        pub size: c_ulong,
        pub is_ref: c_ulong,
        pub is_obj: c_ulong,
        pub is_global: c_ulong,
        pub offset: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Local() {
        assert_eq!(
            size_of::<Chuck_Local>(),
            72usize,
            concat!("Size of: ", stringify!(Chuck_Local))
        );
        assert_eq!(
            align_of::<Chuck_Local>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Local))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).size as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).is_ref as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(is_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).is_obj as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(is_obj)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).is_global as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(is_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).offset as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(offset)
            )
        );
    }
    impl Default for Chuck_Local {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Local {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Local {{ name: {:?}, size: {:?}, is_ref: {:?}, is_obj: {:?}, is_global: {:?}, offset: {:?} }}" , self . name , self . size , self . is_ref , self . is_obj , self . is_global , self . offset )
        }
    }
    #[repr(C)]
    pub struct Chuck_Frame {
        pub name: self::std::__cxx11::string,
        pub curr_offset: c_ulong,
        pub num_access: c_ulong,
        pub stack: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Frame() {
        assert_eq!(
            size_of::<Chuck_Frame>(),
            72usize,
            concat!("Size of: ", stringify!(Chuck_Frame))
        );
        assert_eq!(
            align_of::<Chuck_Frame>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Frame))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Frame>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Frame),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Frame>())).curr_offset as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Frame),
                "::",
                stringify!(curr_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Frame>())).num_access as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Frame),
                "::",
                stringify!(num_access)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Frame>())).stack as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Frame),
                "::",
                stringify!(stack)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}push_scope"]
        pub fn Chuck_Frame_push_scope(this: *mut self::Chuck_Frame);
    }
    extern "C" {
        #[link_name = "\u{1}alloc_local"]
        pub fn Chuck_Frame_alloc_local(
            this: *mut self::Chuck_Frame,
            size: c_ulong,
            name: *const self::std::__cxx11::string,
            is_ref: c_ulong,
            is_obj: c_ulong,
            is_global: c_ulong,
        ) -> *mut self::Chuck_Local;
    }
    extern "C" {
        #[link_name = "\u{1}get_scope"]
        pub fn Chuck_Frame_get_scope(this: *const self::Chuck_Frame, out: *mut self::std::vector);
    }
    extern "C" {
        #[link_name = "\u{1}pop_scope"]
        pub fn Chuck_Frame_pop_scope(this: *mut self::Chuck_Frame, out: *mut self::std::vector);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Frame"]
        pub fn Chuck_Frame_Chuck_Frame(this: *mut self::Chuck_Frame);
    }
    impl Default for Chuck_Frame {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Frame {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Frame {{ name: {:?}, curr_offset: {:?}, num_access: {:?}, stack: {:?} }}",
                self.name, self.curr_offset, self.num_access, self.stack
            )
        }
    }
    impl Chuck_Frame {
        #[inline]
        pub unsafe fn push_scope(&mut self) {
            Chuck_Frame_push_scope(self)
        }
        #[inline]
        pub unsafe fn alloc_local(
            &mut self,
            size: c_ulong,
            name: *const self::std::__cxx11::string,
            is_ref: c_ulong,
            is_obj: c_ulong,
            is_global: c_ulong,
        ) -> *mut self::Chuck_Local {
            Chuck_Frame_alloc_local(self, size, name, is_ref, is_obj, is_global)
        }
        #[inline]
        pub unsafe fn get_scope(&self, out: *mut self::std::vector) {
            Chuck_Frame_get_scope(self, out)
        }
        #[inline]
        pub unsafe fn pop_scope(&mut self, out: *mut self::std::vector) {
            Chuck_Frame_pop_scope(self, out)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Frame_Chuck_Frame(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Instr {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Instr_Goto {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct Chuck_Code {
        pub name: self::std::__cxx11::string,
        pub stack_depth: c_ulong,
        pub need_this: c_ulong,
        pub frame: *mut self::Chuck_Frame,
        pub code: self::std::vector,
        pub stack_cont: self::std::vector,
        pub stack_break: self::std::vector,
        pub stack_return: self::std::vector,
        pub filename: self::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Code() {
        assert_eq!(
            size_of::<Chuck_Code>(),
            184usize,
            concat!("Size of: ", stringify!(Chuck_Code))
        );
        assert_eq!(
            align_of::<Chuck_Code>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Code))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).stack_depth as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(stack_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).need_this as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(need_this)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).frame as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(frame)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).code as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).stack_cont as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(stack_cont)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).stack_break as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(stack_break)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).stack_return as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(stack_return)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).filename as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(filename)
            )
        );
    }
    impl Default for Chuck_Code {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Code {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Code {{ name: {:?}, stack_depth: {:?}, need_this: {:?}, frame: {:?}, code: {:?}, stack_cont: {:?}, stack_break: {:?}, stack_return: {:?}, filename: {:?} }}" , self . name , self . stack_depth , self . need_this , self . frame , self . code , self . stack_cont , self . stack_break , self . stack_return , self . filename )
        }
    }
    #[repr(C)]
    pub struct Chuck_Emitter {
        pub _base: self::Chuck_VM_Object,
        pub env: *mut self::Chuck_Env,
        pub code: *mut self::Chuck_Code,
        pub context: *mut self::Chuck_Context,
        pub nspc: *mut self::Chuck_Namespace,
        pub func: *mut self::Chuck_Func,
        pub stack: self::std::vector,
        pub locals: self::std::vector,
        pub dump: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Emitter() {
        assert_eq!(
            size_of::<Chuck_Emitter>(),
            136usize,
            concat!("Size of: ", stringify!(Chuck_Emitter))
        );
        assert_eq!(
            align_of::<Chuck_Emitter>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Emitter))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).env as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(env)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).code as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).context as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(context)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).nspc as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(nspc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).func as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).stack as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).locals as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(locals)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).dump as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(dump)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}addref_on_scope"]
        pub fn Chuck_Emitter_addref_on_scope(this: *mut self::Chuck_Emitter);
    }
    extern "C" {
        #[link_name = "\u{1}pop_scope"]
        pub fn Chuck_Emitter_pop_scope(this: *mut self::Chuck_Emitter);
    }
    extern "C" {
        #[link_name = "\u{1}find_dur"]
        pub fn Chuck_Emitter_find_dur(
            this: *mut self::Chuck_Emitter,
            name: *const self::std::__cxx11::string,
            out: *mut f64,
        ) -> c_ulong;
    }
    impl Default for Chuck_Emitter {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Emitter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Emitter {{ env: {:?}, code: {:?}, context: {:?}, nspc: {:?}, func: {:?}, stack: {:?}, locals: {:?}, dump: {:?} }}" , self . env , self . code , self . context , self . nspc , self . func , self . stack , self . locals , self . dump )
        }
    }
    impl PartialEq for Chuck_Emitter {
        fn eq(&self, other: &Chuck_Emitter) -> bool {
            self._base == other._base
                && self.env == other.env
                && self.code == other.code
                && self.context == other.context
                && self.nspc == other.nspc
                && self.func == other.func
                && self.stack == other.stack
                && self.locals == other.locals
                && self.dump == other.dump
        }
    }
    impl Chuck_Emitter {
        #[inline]
        pub unsafe fn addref_on_scope(&mut self) {
            Chuck_Emitter_addref_on_scope(self)
        }
        #[inline]
        pub unsafe fn pop_scope(&mut self) {
            Chuck_Emitter_pop_scope(self)
        }
        #[inline]
        pub unsafe fn find_dur(
            &mut self,
            name: *const self::std::__cxx11::string,
            out: *mut f64,
        ) -> c_ulong {
            Chuck_Emitter_find_dur(self, name, out)
        }
    }
    extern "C" {
        pub fn emit_engine_init(env: *mut self::Chuck_Env) -> *mut self::Chuck_Emitter;
    }
    extern "C" {
        pub fn emit_engine_shutdown(emit: *mut *mut self::Chuck_Emitter) -> c_ulong;
    }
    extern "C" {
        pub fn emit_engine_emit_prog(
            emit: *mut self::Chuck_Emitter,
            prog: self::a_Program,
            how_much: self::te_HowMuch,
        ) -> *mut self::Chuck_VM_Code;
    }
    extern "C" {
        pub fn emit_to_code(
            in_: *mut self::Chuck_Code,
            out: *mut self::Chuck_VM_Code,
            dump: c_ulong,
        ) -> *mut self::Chuck_VM_Code;
    }
    extern "C" {
        pub fn emit_engine_addr_map(
            emit: *mut self::Chuck_Emitter,
            shred: *mut self::Chuck_VM_Shred,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn emit_engine_resolve() -> c_ulong;
    }
    #[repr(C)]
    #[derive(Debug, PartialOrd, PartialEq)]
    pub struct Chuck_UGen {
        pub _base: self::Chuck_Object,
        pub tick: self::f_tick,
        pub tickf: self::f_tickf,
        pub pmsg: self::f_pmsg,
        pub m_multi_chan: *mut *mut self::Chuck_UGen,
        pub m_multi_chan_size: c_ulong,
        pub m_num_ins: c_ulong,
        pub m_num_outs: c_ulong,
        pub m_src_list: *mut *mut self::Chuck_UGen,
        pub m_src_cap: c_ulong,
        pub m_num_src: c_ulong,
        pub m_dest_list: *mut *mut self::Chuck_UGen,
        pub m_dest_cap: c_ulong,
        pub m_num_dest: c_ulong,
        pub m_src_uana_list: *mut *mut self::Chuck_UGen,
        pub m_src_uana_cap: c_ulong,
        pub m_num_uana_src: c_ulong,
        pub m_dest_uana_list: *mut *mut self::Chuck_UGen,
        pub m_dest_uana_cap: c_ulong,
        pub m_num_uana_dest: c_ulong,
        pub m_max_src: c_ulong,
        pub m_time: f64,
        pub m_valid: c_ulong,
        pub m_use_next: c_ulong,
        pub m_sum: f64,
        pub m_current: f64,
        pub m_next: f64,
        pub m_last: f64,
        pub m_gain: f64,
        pub m_pan: f64,
        pub m_op: c_long,
        pub m_max_block_size: c_long,
        pub m_multi_in_v: *mut f64,
        pub m_multi_out_v: *mut f64,
        pub m_is_subgraph: c_ulong,
        pub m_inlet: *mut self::Chuck_UGen,
        pub m_outlet: *mut self::Chuck_UGen,
        pub m_sum_v: *mut f64,
        pub m_current_v: *mut f64,
        pub shred: *mut self::Chuck_VM_Shred,
        pub vm: *mut self::Chuck_VM,
        pub owner: *mut self::Chuck_UGen,
        pub m_is_uana: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_UGen() {
        assert_eq!(
            size_of::<Chuck_UGen>(),
            408usize,
            concat!("Size of: ", stringify!(Chuck_UGen))
        );
        assert_eq!(
            align_of::<Chuck_UGen>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_UGen))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).tick as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).tickf as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(tickf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).pmsg as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(pmsg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_multi_chan as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_multi_chan)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_UGen>())).m_multi_chan_size as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_multi_chan_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_ins as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_ins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_outs as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_outs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_src_list as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_src_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_src_cap as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_src_cap)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_src as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_src)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_dest_list as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_dest_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_dest_cap as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_dest_cap)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_dest as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_dest)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_src_uana_list as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_src_uana_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_src_uana_cap as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_src_uana_cap)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_uana_src as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_uana_src)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_dest_uana_list as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_dest_uana_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_dest_uana_cap as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_dest_uana_cap)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_uana_dest as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_uana_dest)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_max_src as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_max_src)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_time as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_valid as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_use_next as *const _ as usize },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_use_next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_sum as *const _ as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_sum)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_current as *const _ as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_current)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_next as *const _ as usize },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_last as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_last)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_gain as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_gain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_pan as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_pan)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_op as *const _ as usize },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_max_block_size as *const _ as usize },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_max_block_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_multi_in_v as *const _ as usize },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_multi_in_v)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_multi_out_v as *const _ as usize },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_multi_out_v)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_is_subgraph as *const _ as usize },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_is_subgraph)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_inlet as *const _ as usize },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_inlet)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_outlet as *const _ as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_outlet)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_sum_v as *const _ as usize },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_sum_v)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_current_v as *const _ as usize },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_current_v)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).shred as *const _ as usize },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(shred)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).vm as *const _ as usize },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).owner as *const _ as usize },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_is_uana as *const _ as usize },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_is_uana)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}add"]
        pub fn Chuck_UGen_add(
            this: *mut self::Chuck_UGen,
            src: *mut self::Chuck_UGen,
            isUpChuck: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}remove"]
        pub fn Chuck_UGen_remove(
            this: *mut self::Chuck_UGen,
            src: *mut self::Chuck_UGen,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}remove_all"]
        pub fn Chuck_UGen_remove_all(this: *mut self::Chuck_UGen);
    }
    extern "C" {
        #[link_name = "\u{1}set_max_src"]
        pub fn Chuck_UGen_set_max_src(this: *mut self::Chuck_UGen, num: c_ulong) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get_num_src"]
        pub fn Chuck_UGen_get_num_src(this: *mut self::Chuck_UGen) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}is_connected_from"]
        pub fn Chuck_UGen_is_connected_from(
            this: *mut self::Chuck_UGen,
            src: *mut self::Chuck_UGen,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}disconnect"]
        pub fn Chuck_UGen_disconnect(this: *mut self::Chuck_UGen, recursive: c_ulong) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}system_tick"]
        pub fn Chuck_UGen_system_tick(this: *mut self::Chuck_UGen, now: f64) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}system_tick_v"]
        pub fn Chuck_UGen_system_tick_v(
            this: *mut self::Chuck_UGen,
            now: f64,
            numFrames: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}alloc_v"]
        pub fn Chuck_UGen_alloc_v(this: *mut self::Chuck_UGen, size: c_ulong) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}src_chan"]
        pub fn Chuck_UGen_src_chan(
            this: *mut self::Chuck_UGen,
            chan: c_ulong,
        ) -> *mut self::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}dst_for_src_chan"]
        pub fn Chuck_UGen_dst_for_src_chan(
            this: *mut self::Chuck_UGen,
            chan: c_ulong,
        ) -> *mut self::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}add_by"]
        pub fn Chuck_UGen_add_by(
            this: *mut self::Chuck_UGen,
            dest: *mut self::Chuck_UGen,
            isUpChuck: c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}remove_by"]
        pub fn Chuck_UGen_remove_by(this: *mut self::Chuck_UGen, dest: *mut self::Chuck_UGen);
    }
    extern "C" {
        #[link_name = "\u{1}alloc_multi_chan"]
        pub fn Chuck_UGen_alloc_multi_chan(
            this: *mut self::Chuck_UGen,
            num_ins: c_ulong,
            num_outs: c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}init_subgraph"]
        pub fn Chuck_UGen_init_subgraph(this: *mut self::Chuck_UGen);
    }
    extern "C" {
        #[link_name = "\u{1}inlet"]
        pub fn Chuck_UGen_inlet(this: *mut self::Chuck_UGen) -> *mut self::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}outlet"]
        pub fn Chuck_UGen_outlet(this: *mut self::Chuck_UGen) -> *mut self::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_UGen"]
        pub fn Chuck_UGen_Chuck_UGen(this: *mut self::Chuck_UGen);
    }
    impl Default for Chuck_UGen {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl Chuck_UGen {
        #[inline]
        pub unsafe fn add(&mut self, src: *mut self::Chuck_UGen, isUpChuck: c_ulong) -> c_ulong {
            Chuck_UGen_add(self, src, isUpChuck)
        }
        #[inline]
        pub unsafe fn remove(&mut self, src: *mut self::Chuck_UGen) -> c_ulong {
            Chuck_UGen_remove(self, src)
        }
        #[inline]
        pub unsafe fn remove_all(&mut self) {
            Chuck_UGen_remove_all(self)
        }
        #[inline]
        pub unsafe fn set_max_src(&mut self, num: c_ulong) -> c_ulong {
            Chuck_UGen_set_max_src(self, num)
        }
        #[inline]
        pub unsafe fn get_num_src(&mut self) -> c_ulong {
            Chuck_UGen_get_num_src(self)
        }
        #[inline]
        pub unsafe fn is_connected_from(&mut self, src: *mut self::Chuck_UGen) -> c_ulong {
            Chuck_UGen_is_connected_from(self, src)
        }
        #[inline]
        pub unsafe fn disconnect(&mut self, recursive: c_ulong) -> c_ulong {
            Chuck_UGen_disconnect(self, recursive)
        }
        #[inline]
        pub unsafe fn system_tick(&mut self, now: f64) -> c_ulong {
            Chuck_UGen_system_tick(self, now)
        }
        #[inline]
        pub unsafe fn system_tick_v(&mut self, now: f64, numFrames: c_ulong) -> c_ulong {
            Chuck_UGen_system_tick_v(self, now, numFrames)
        }
        #[inline]
        pub unsafe fn alloc_v(&mut self, size: c_ulong) -> c_ulong {
            Chuck_UGen_alloc_v(self, size)
        }
        #[inline]
        pub unsafe fn src_chan(&mut self, chan: c_ulong) -> *mut self::Chuck_UGen {
            Chuck_UGen_src_chan(self, chan)
        }
        #[inline]
        pub unsafe fn dst_for_src_chan(&mut self, chan: c_ulong) -> *mut self::Chuck_UGen {
            Chuck_UGen_dst_for_src_chan(self, chan)
        }
        #[inline]
        pub unsafe fn add_by(&mut self, dest: *mut self::Chuck_UGen, isUpChuck: c_ulong) {
            Chuck_UGen_add_by(self, dest, isUpChuck)
        }
        #[inline]
        pub unsafe fn remove_by(&mut self, dest: *mut self::Chuck_UGen) {
            Chuck_UGen_remove_by(self, dest)
        }
        #[inline]
        pub unsafe fn alloc_multi_chan(&mut self, num_ins: c_ulong, num_outs: c_ulong) {
            Chuck_UGen_alloc_multi_chan(self, num_ins, num_outs)
        }
        #[inline]
        pub unsafe fn init_subgraph(&mut self) {
            Chuck_UGen_init_subgraph(self)
        }
        #[inline]
        pub unsafe fn inlet(&mut self) -> *mut self::Chuck_UGen {
            Chuck_UGen_inlet(self)
        }
        #[inline]
        pub unsafe fn outlet(&mut self) -> *mut self::Chuck_UGen {
            Chuck_UGen_outlet(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_UGen_Chuck_UGen(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_UGen_destructor"]
        pub fn Chuck_UGen_Chuck_UGen_destructor(this: *mut self::Chuck_UGen);
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn Chuck_UGen_init(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}done"]
        pub fn Chuck_UGen_done(this: *mut c_void);
    }
    #[repr(C)]
    #[derive(Debug, PartialOrd, PartialEq)]
    pub struct Chuck_UAna {
        pub _base: self::Chuck_UGen,
        pub tock: self::f_tock,
        pub m_uana_time: f64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_UAna() {
        assert_eq!(
            size_of::<Chuck_UAna>(),
            424usize,
            concat!("Size of: ", stringify!(Chuck_UAna))
        );
        assert_eq!(
            align_of::<Chuck_UAna>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_UAna))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UAna>())).tock as *const _ as usize },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UAna),
                "::",
                stringify!(tock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UAna>())).m_uana_time as *const _ as usize },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UAna),
                "::",
                stringify!(m_uana_time)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}system_tock"]
        pub fn Chuck_UAna_system_tock(this: *mut self::Chuck_UAna, now: f64) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}is_up_connected_from"]
        pub fn Chuck_UAna_is_up_connected_from(
            this: *mut self::Chuck_UAna,
            src: *mut self::Chuck_UAna,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}numIncomingUAnae"]
        pub fn Chuck_UAna_numIncomingUAnae(this: *const self::Chuck_UAna) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}getIncomingUAna"]
        pub fn Chuck_UAna_getIncomingUAna(
            this: *const self::Chuck_UAna,
            index: c_ulong,
        ) -> *mut self::Chuck_UAna;
    }
    extern "C" {
        #[link_name = "\u{1}getIncomingBlob"]
        pub fn Chuck_UAna_getIncomingBlob(
            this: *const self::Chuck_UAna,
            index: c_ulong,
        ) -> *mut self::Chuck_UAnaBlobProxy;
    }
    extern "C" {
        #[link_name = "\u{1}blobProxy"]
        pub fn Chuck_UAna_blobProxy(
            this: *const self::Chuck_UAna,
        ) -> *mut self::Chuck_UAnaBlobProxy;
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_UAna"]
        pub fn Chuck_UAna_Chuck_UAna(this: *mut self::Chuck_UAna);
    }
    impl Default for Chuck_UAna {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl Chuck_UAna {
        #[inline]
        pub unsafe fn system_tock(&mut self, now: f64) -> c_ulong {
            Chuck_UAna_system_tock(self, now)
        }
        #[inline]
        pub unsafe fn is_up_connected_from(&mut self, src: *mut self::Chuck_UAna) -> c_ulong {
            Chuck_UAna_is_up_connected_from(self, src)
        }
        #[inline]
        pub unsafe fn numIncomingUAnae(&self) -> c_long {
            Chuck_UAna_numIncomingUAnae(self)
        }
        #[inline]
        pub unsafe fn getIncomingUAna(&self, index: c_ulong) -> *mut self::Chuck_UAna {
            Chuck_UAna_getIncomingUAna(self, index)
        }
        #[inline]
        pub unsafe fn getIncomingBlob(&self, index: c_ulong) -> *mut self::Chuck_UAnaBlobProxy {
            Chuck_UAna_getIncomingBlob(self, index)
        }
        #[inline]
        pub unsafe fn blobProxy(&self) -> *mut self::Chuck_UAnaBlobProxy {
            Chuck_UAna_blobProxy(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_UAna_Chuck_UAna(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_UAna_destructor"]
        pub fn Chuck_UAna_Chuck_UAna_destructor(this: *mut self::Chuck_UAna);
    }
    extern "C" {
        pub fn ugen_generic_num_in(obj: *mut self::Chuck_Object, isArray: c_ulong) -> c_long;
    }
    extern "C" {
        pub fn ugen_generic_get_src(
            obj: *mut self::Chuck_Object,
            chan: c_long,
            isArray: c_ulong,
        ) -> *mut self::Chuck_UGen;
    }
    extern "C" {
        pub fn ugen_generic_get_dst(
            obj: *mut self::Chuck_Object,
            chan: c_long,
            isArray: c_ulong,
        ) -> *mut self::Chuck_UGen;
    }
    #[repr(C)]
    pub struct CBufferAdvance {
        pub m_data: *mut c_uchar,
        pub m_data_width: c_ulong,
        pub m_read_offsets: self::std::vector,
        pub m_free: self::std::queue<root::std::deque>,
        pub m_write_offset: c_long,
        pub m_max_elem: c_long,
        pub m_mutex: self::XMutex,
        pub m_event_buffer: *mut self::CBufferSimple,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct CBufferAdvance_ReadOffset {
        pub read_offset: c_long,
        pub event: *mut self::Chuck_Event,
    }
    #[test]
    fn bindgen_test_layout_CBufferAdvance_ReadOffset() {
        assert_eq!(
            size_of::<CBufferAdvance_ReadOffset>(),
            16usize,
            concat!("Size of: ", stringify!(CBufferAdvance_ReadOffset))
        );
        assert_eq!(
            align_of::<CBufferAdvance_ReadOffset>(),
            8usize,
            concat!("Alignment of ", stringify!(CBufferAdvance_ReadOffset))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance_ReadOffset>())).read_offset as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance_ReadOffset),
                "::",
                stringify!(read_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance_ReadOffset>())).event as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance_ReadOffset),
                "::",
                stringify!(event)
            )
        );
    }
    impl Default for CBufferAdvance_ReadOffset {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[test]
    fn bindgen_test_layout_CBufferAdvance() {
        assert_eq!(
            size_of::<CBufferAdvance>(),
            184usize,
            concat!("Size of: ", stringify!(CBufferAdvance))
        );
        assert_eq!(
            align_of::<CBufferAdvance>(),
            8usize,
            concat!("Alignment of ", stringify!(CBufferAdvance))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_data_width as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_data_width)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance>())).m_read_offsets as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_read_offsets)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_free as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_free)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance>())).m_write_offset as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_write_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_max_elem as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_max_elem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_mutex as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_mutex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance>())).m_event_buffer as *const _ as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_event_buffer)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn CBufferAdvance_initialize(
            this: *mut self::CBufferAdvance,
            num_elem: c_ulong,
            width: c_ulong,
            event_buffer: *mut self::CBufferSimple,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}cleanup"]
        pub fn CBufferAdvance_cleanup(this: *mut self::CBufferAdvance);
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn CBufferAdvance_get(
            this: *mut self::CBufferAdvance,
            data: *mut c_void,
            num_elem: c_ulong,
            read_offset_index: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}put"]
        pub fn CBufferAdvance_put(
            this: *mut self::CBufferAdvance,
            data: *mut c_void,
            num_elem: c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}empty"]
        pub fn CBufferAdvance_empty(
            this: *mut self::CBufferAdvance,
            read_offset_index: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}join"]
        pub fn CBufferAdvance_join(
            this: *mut self::CBufferAdvance,
            event: *mut self::Chuck_Event,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}resign"]
        pub fn CBufferAdvance_resign(this: *mut self::CBufferAdvance, read_offset_index: c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}CBufferAdvance"]
        pub fn CBufferAdvance_CBufferAdvance(this: *mut self::CBufferAdvance);
    }
    extern "C" {
        #[link_name = "\u{1}CBufferAdvance_destructor"]
        pub fn CBufferAdvance_CBufferAdvance_destructor(this: *mut self::CBufferAdvance);
    }
    impl Default for CBufferAdvance {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for CBufferAdvance {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "CBufferAdvance {{ m_data: {:?}, m_data_width: {:?}, m_read_offsets: {:?}, m_free: {:?}, m_write_offset: {:?}, m_max_elem: {:?}, m_mutex: {:?}, m_event_buffer: {:?} }}" , self . m_data , self . m_data_width , self . m_read_offsets , self . m_free , self . m_write_offset , self . m_max_elem , self . m_mutex , self . m_event_buffer )
        }
    }
    impl CBufferAdvance {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            num_elem: c_ulong,
            width: c_ulong,
            event_buffer: *mut self::CBufferSimple,
        ) -> c_ulong {
            CBufferAdvance_initialize(self, num_elem, width, event_buffer)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            CBufferAdvance_cleanup(self)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            data: *mut c_void,
            num_elem: c_ulong,
            read_offset_index: c_ulong,
        ) -> c_ulong {
            CBufferAdvance_get(self, data, num_elem, read_offset_index)
        }
        #[inline]
        pub unsafe fn put(&mut self, data: *mut c_void, num_elem: c_ulong) {
            CBufferAdvance_put(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn empty(&mut self, read_offset_index: c_ulong) -> c_ulong {
            CBufferAdvance_empty(self, read_offset_index)
        }
        #[inline]
        pub unsafe fn join(&mut self, event: *mut self::Chuck_Event) -> c_ulong {
            CBufferAdvance_join(self, event)
        }
        #[inline]
        pub unsafe fn resign(&mut self, read_offset_index: c_ulong) {
            CBufferAdvance_resign(self, read_offset_index)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            CBufferAdvance_CBufferAdvance(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            CBufferAdvance_CBufferAdvance_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct CBufferSimple {
        pub m_data: *mut c_uchar,
        pub m_data_width: c_ulong,
        pub m_read_offset: c_ulong,
        pub m_write_offset: c_ulong,
        pub m_max_elem: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_CBufferSimple() {
        assert_eq!(
            size_of::<CBufferSimple>(),
            40usize,
            concat!("Size of: ", stringify!(CBufferSimple))
        );
        assert_eq!(
            align_of::<CBufferSimple>(),
            8usize,
            concat!("Alignment of ", stringify!(CBufferSimple))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferSimple>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferSimple>())).m_data_width as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_data_width)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferSimple>())).m_read_offset as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_read_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferSimple>())).m_write_offset as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_write_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferSimple>())).m_max_elem as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_max_elem)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn CBufferSimple_initialize(
            this: *mut self::CBufferSimple,
            num_elem: c_ulong,
            width: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}cleanup"]
        pub fn CBufferSimple_cleanup(this: *mut self::CBufferSimple);
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn CBufferSimple_get(
            this: *mut self::CBufferSimple,
            data: *mut c_void,
            num_elem: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}put"]
        pub fn CBufferSimple_put(
            this: *mut self::CBufferSimple,
            data: *mut c_void,
            num_elem: c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}CBufferSimple"]
        pub fn CBufferSimple_CBufferSimple(this: *mut self::CBufferSimple);
    }
    extern "C" {
        #[link_name = "\u{1}CBufferSimple_destructor"]
        pub fn CBufferSimple_CBufferSimple_destructor(this: *mut self::CBufferSimple);
    }
    impl Default for CBufferSimple {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl CBufferSimple {
        #[inline]
        pub unsafe fn initialize(&mut self, num_elem: c_ulong, width: c_ulong) -> c_ulong {
            CBufferSimple_initialize(self, num_elem, width)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            CBufferSimple_cleanup(self)
        }
        #[inline]
        pub unsafe fn get(&mut self, data: *mut c_void, num_elem: c_ulong) -> c_ulong {
            CBufferSimple_get(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn put(&mut self, data: *mut c_void, num_elem: c_ulong) {
            CBufferSimple_put(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            CBufferSimple_CBufferSimple(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            CBufferSimple_CBufferSimple_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct AccumBuffer {
        pub m_data: *mut f64,
        pub m_write_offset: c_ulong,
        pub m_max_elem: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_AccumBuffer() {
        assert_eq!(
            size_of::<AccumBuffer>(),
            24usize,
            concat!("Size of: ", stringify!(AccumBuffer))
        );
        assert_eq!(
            align_of::<AccumBuffer>(),
            8usize,
            concat!("Alignment of ", stringify!(AccumBuffer))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<AccumBuffer>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(AccumBuffer),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<AccumBuffer>())).m_write_offset as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(AccumBuffer),
                "::",
                stringify!(m_write_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<AccumBuffer>())).m_max_elem as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(AccumBuffer),
                "::",
                stringify!(m_max_elem)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}resize"]
        pub fn AccumBuffer_resize(this: *mut self::AccumBuffer, new_size: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}cleanup"]
        pub fn AccumBuffer_cleanup(this: *mut self::AccumBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}put"]
        pub fn AccumBuffer_put(this: *mut self::AccumBuffer, next: f64);
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn AccumBuffer_get(this: *mut self::AccumBuffer, buffer: *mut f64, num_elem: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}AccumBuffer"]
        pub fn AccumBuffer_AccumBuffer(this: *mut self::AccumBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}AccumBuffer_destructor"]
        pub fn AccumBuffer_AccumBuffer_destructor(this: *mut self::AccumBuffer);
    }
    impl Default for AccumBuffer {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl AccumBuffer {
        #[inline]
        pub unsafe fn resize(&mut self, new_size: c_long) -> c_long {
            AccumBuffer_resize(self, new_size)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            AccumBuffer_cleanup(self)
        }
        #[inline]
        pub unsafe fn put(&mut self, next: f64) {
            AccumBuffer_put(self, next)
        }
        #[inline]
        pub unsafe fn get(&mut self, buffer: *mut f64, num_elem: c_long) {
            AccumBuffer_get(self, buffer, num_elem)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            AccumBuffer_AccumBuffer(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            AccumBuffer_AccumBuffer_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct DeccumBuffer {
        pub m_data: *mut f64,
        pub m_read_offset: c_ulong,
        pub m_max_elem: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_DeccumBuffer() {
        assert_eq!(
            size_of::<DeccumBuffer>(),
            24usize,
            concat!("Size of: ", stringify!(DeccumBuffer))
        );
        assert_eq!(
            align_of::<DeccumBuffer>(),
            8usize,
            concat!("Alignment of ", stringify!(DeccumBuffer))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<DeccumBuffer>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(DeccumBuffer),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<DeccumBuffer>())).m_read_offset as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(DeccumBuffer),
                "::",
                stringify!(m_read_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<DeccumBuffer>())).m_max_elem as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(DeccumBuffer),
                "::",
                stringify!(m_max_elem)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}resize"]
        pub fn DeccumBuffer_resize(this: *mut self::DeccumBuffer, new_size: c_long) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}cleanup"]
        pub fn DeccumBuffer_cleanup(this: *mut self::DeccumBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}put"]
        pub fn DeccumBuffer_put(this: *mut self::DeccumBuffer, next: *mut f64, num_elem: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn DeccumBuffer_get(this: *mut self::DeccumBuffer, out: *mut f64);
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn DeccumBuffer_get1(this: *mut self::DeccumBuffer, buffer: *mut f64, num_elem: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}DeccumBuffer"]
        pub fn DeccumBuffer_DeccumBuffer(this: *mut self::DeccumBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}DeccumBuffer_destructor"]
        pub fn DeccumBuffer_DeccumBuffer_destructor(this: *mut self::DeccumBuffer);
    }
    impl Default for DeccumBuffer {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl DeccumBuffer {
        #[inline]
        pub unsafe fn resize(&mut self, new_size: c_long) -> c_long {
            DeccumBuffer_resize(self, new_size)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            DeccumBuffer_cleanup(self)
        }
        #[inline]
        pub unsafe fn put(&mut self, next: *mut f64, num_elem: c_long) {
            DeccumBuffer_put(self, next, num_elem)
        }
        #[inline]
        pub unsafe fn get(&mut self, out: *mut f64) {
            DeccumBuffer_get(self, out)
        }
        #[inline]
        pub unsafe fn get1(&mut self, buffer: *mut f64, num_elem: c_long) {
            DeccumBuffer_get1(self, buffer, num_elem)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            DeccumBuffer_DeccumBuffer(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            DeccumBuffer_DeccumBuffer_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct CircularBuffer<T> {
        pub m_elements: *mut T,
        pub m_read: usize,
        pub m_write: usize,
        pub m_numElements: usize,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    impl<T> Default for CircularBuffer<T> {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct FastCircularBuffer {
        pub m_data: *mut c_uchar,
        pub m_data_width: c_ulong,
        pub m_read_offset: c_ulong,
        pub m_write_offset: c_ulong,
        pub m_max_elem: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_FastCircularBuffer() {
        assert_eq!(
            size_of::<FastCircularBuffer>(),
            40usize,
            concat!("Size of: ", stringify!(FastCircularBuffer))
        );
        assert_eq!(
            align_of::<FastCircularBuffer>(),
            8usize,
            concat!("Alignment of ", stringify!(FastCircularBuffer))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<FastCircularBuffer>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<FastCircularBuffer>())).m_data_width as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_data_width)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<FastCircularBuffer>())).m_read_offset as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_read_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<FastCircularBuffer>())).m_write_offset as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_write_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<FastCircularBuffer>())).m_max_elem as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_max_elem)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn FastCircularBuffer_initialize(
            this: *mut self::FastCircularBuffer,
            num_elem: c_ulong,
            width: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}cleanup"]
        pub fn FastCircularBuffer_cleanup(this: *mut self::FastCircularBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn FastCircularBuffer_get(
            this: *mut self::FastCircularBuffer,
            data: *mut c_void,
            num_elem: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}put"]
        pub fn FastCircularBuffer_put(
            this: *mut self::FastCircularBuffer,
            data: *mut c_void,
            num_elem: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}FastCircularBuffer"]
        pub fn FastCircularBuffer_FastCircularBuffer(this: *mut self::FastCircularBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}FastCircularBuffer_destructor"]
        pub fn FastCircularBuffer_FastCircularBuffer_destructor(
            this: *mut self::FastCircularBuffer,
        );
    }
    impl Default for FastCircularBuffer {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl FastCircularBuffer {
        #[inline]
        pub unsafe fn initialize(&mut self, num_elem: c_ulong, width: c_ulong) -> c_ulong {
            FastCircularBuffer_initialize(self, num_elem, width)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            FastCircularBuffer_cleanup(self)
        }
        #[inline]
        pub unsafe fn get(&mut self, data: *mut c_void, num_elem: c_ulong) -> c_ulong {
            FastCircularBuffer_get(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn put(&mut self, data: *mut c_void, num_elem: c_ulong) -> c_ulong {
            FastCircularBuffer_put(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            FastCircularBuffer_FastCircularBuffer(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            FastCircularBuffer_FastCircularBuffer_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XCircleBuffer<T> {
        pub m_buffer: *mut T,
        pub m_length: c_long,
        pub m_writeIndex: c_long,
        pub m_readIndex: c_long,
        pub m_numElements: c_long,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    impl<T> Default for XCircleBuffer<T> {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Shred_Data {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Shred_Time {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct Shred_Activation {
        pub when: f64,
        pub cycles: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Shred_Activation() {
        assert_eq!(
            size_of::<Shred_Activation>(),
            16usize,
            concat!("Size of: ", stringify!(Shred_Activation))
        );
        assert_eq!(
            align_of::<Shred_Activation>(),
            8usize,
            concat!("Alignment of ", stringify!(Shred_Activation))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Activation>())).when as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Activation),
                "::",
                stringify!(when)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Activation>())).cycles as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Activation),
                "::",
                stringify!(cycles)
            )
        );
    }
    #[repr(C)]
    pub struct Shred_Stat {
        pub cycles: c_ulong,
        pub xid: c_ulong,
        pub parent: c_ulong,
        pub state: c_ulong,
        pub shred_ref: *mut self::Chuck_VM_Shred,
        pub activations: c_ulong,
        pub average_ctrl: f64,
        pub average_cycles: f64,
        pub spork_time: f64,
        pub active_time: f64,
        pub wake_time: f64,
        pub free_time: f64,
        pub name: self::std::__cxx11::string,
        pub owner: self::std::__cxx11::string,
        pub source: self::std::__cxx11::string,
        pub diffs: self::std::queue<root::std::deque>,
        pub num_diffs: c_ulong,
        pub diff_total: f64,
        pub act_cycles: self::std::queue<root::std::deque>,
        pub act_cycles_total: c_ulong,
        pub last_cycles: c_ulong,
        pub children: self::std::vector,
        pub activationss: self::std::vector,
        pub mutex: self::XMutex,
        pub data: *mut self::Shred_Data,
        pub time: *mut self::Shred_Time,
    }
    #[test]
    fn bindgen_test_layout_Shred_Stat() {
        assert_eq!(
            size_of::<Shred_Stat>(),
            488usize,
            concat!("Size of: ", stringify!(Shred_Stat))
        );
        assert_eq!(
            align_of::<Shred_Stat>(),
            8usize,
            concat!("Alignment of ", stringify!(Shred_Stat))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).cycles as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(cycles)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).xid as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).parent as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).state as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).shred_ref as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(shred_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).activations as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(activations)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).average_ctrl as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(average_ctrl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).average_cycles as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(average_cycles)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).spork_time as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(spork_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).active_time as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(active_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).wake_time as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(wake_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).free_time as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(free_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).name as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).owner as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).source as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(source)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).diffs as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(diffs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).num_diffs as *const _ as usize },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(num_diffs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).diff_total as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(diff_total)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).act_cycles as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(act_cycles)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).act_cycles_total as *const _ as usize },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(act_cycles_total)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).last_cycles as *const _ as usize },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(last_cycles)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).children as *const _ as usize },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(children)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).activationss as *const _ as usize },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(activationss)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).mutex as *const _ as usize },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(mutex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).data as *const _ as usize },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Shred_Stat>())).time as *const _ as usize },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(Shred_Stat),
                "::",
                stringify!(time)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}get_sporked"]
        pub fn Shred_Stat_get_sporked(this: *mut self::Shred_Stat, out: *mut self::std::vector);
    }
    extern "C" {
        #[link_name = "\u{1}get_activations"]
        pub fn Shred_Stat_get_activations(this: *mut self::Shred_Stat, out: *mut self::std::vector);
    }
    impl Default for Shred_Stat {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Shred_Stat {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Shred_Stat {{ cycles: {:?}, xid: {:?}, parent: {:?}, state: {:?}, shred_ref: {:?}, activations: {:?}, average_ctrl: {:?}, average_cycles: {:?}, spork_time: {:?}, active_time: {:?}, wake_time: {:?}, free_time: {:?}, name: {:?}, owner: {:?}, source: {:?}, diffs: {:?}, num_diffs: {:?}, diff_total: {:?}, act_cycles: {:?}, act_cycles_total: {:?}, last_cycles: {:?}, children: {:?}, activationss: {:?}, mutex: {:?}, data: {:?}, time: {:?} }}" , self . cycles , self . xid , self . parent , self . state , self . shred_ref , self . activations , self . average_ctrl , self . average_cycles , self . spork_time , self . active_time , self . wake_time , self . free_time , self . name , self . owner , self . source , self . diffs , self . num_diffs , self . diff_total , self . act_cycles , self . act_cycles_total , self . last_cycles , self . children , self . activationss , self . mutex , self . data , self . time )
        }
    }
    impl Shred_Stat {
        #[inline]
        pub unsafe fn get_sporked(&mut self, out: *mut self::std::vector) {
            Shred_Stat_get_sporked(self, out)
        }
        #[inline]
        pub unsafe fn get_activations(&mut self, out: *mut self::std::vector) {
            Shred_Stat_get_activations(self, out)
        }
    }
    #[repr(C)]
    pub struct Chuck_Stats {
        pub vm: *mut self::Chuck_VM,
        pub shreds: self::std::map,
        pub done: self::std::vector,
        pub mutex: self::XMutex,
    }
    extern "C" {
        #[link_name = "\u{1}activations_yes"]
        pub static mut Chuck_Stats_activations_yes: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}our_instance"]
        pub static mut Chuck_Stats_our_instance: *mut self::Chuck_Stats;
    }
    #[test]
    fn bindgen_test_layout_Chuck_Stats() {
        assert_eq!(
            size_of::<Chuck_Stats>(),
            120usize,
            concat!("Size of: ", stringify!(Chuck_Stats))
        );
        assert_eq!(
            align_of::<Chuck_Stats>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Stats))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Stats>())).vm as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Stats),
                "::",
                stringify!(vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Stats>())).shreds as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Stats),
                "::",
                stringify!(shreds)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Stats>())).done as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Stats),
                "::",
                stringify!(done)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Stats>())).mutex as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Stats),
                "::",
                stringify!(mutex)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}instance"]
        pub fn Chuck_Stats_instance() -> *mut self::Chuck_Stats;
    }
    extern "C" {
        #[link_name = "\u{1}add_shred"]
        pub fn Chuck_Stats_add_shred(
            this: *mut self::Chuck_Stats,
            shred: *mut self::Chuck_VM_Shred,
        );
    }
    extern "C" {
        #[link_name = "\u{1}activate_shred"]
        pub fn Chuck_Stats_activate_shred(
            this: *mut self::Chuck_Stats,
            shred: *mut self::Chuck_VM_Shred,
        );
    }
    extern "C" {
        #[link_name = "\u{1}advance_time"]
        pub fn Chuck_Stats_advance_time(
            this: *mut self::Chuck_Stats,
            shred: *mut self::Chuck_VM_Shred,
            to: f64,
        );
    }
    extern "C" {
        #[link_name = "\u{1}deactivate_shred"]
        pub fn Chuck_Stats_deactivate_shred(
            this: *mut self::Chuck_Stats,
            shred: *mut self::Chuck_VM_Shred,
        );
    }
    extern "C" {
        #[link_name = "\u{1}remove_shred"]
        pub fn Chuck_Stats_remove_shred(
            this: *mut self::Chuck_Stats,
            shred: *mut self::Chuck_VM_Shred,
        );
    }
    extern "C" {
        #[link_name = "\u{1}get_shreds"]
        pub fn Chuck_Stats_get_shreds(
            this: *mut self::Chuck_Stats,
            out: *mut self::std::vector,
            d: *mut self::std::map,
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Stats"]
        pub fn Chuck_Stats_Chuck_Stats(this: *mut self::Chuck_Stats);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Stats_destructor"]
        pub fn Chuck_Stats_Chuck_Stats_destructor(this: *mut self::Chuck_Stats);
    }
    impl Default for Chuck_Stats {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Stats {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Stats {{ vm: {:?}, shreds: {:?}, done: {:?}, mutex: {:?} }}",
                self.vm, self.shreds, self.done, self.mutex
            )
        }
    }
    impl Chuck_Stats {
        #[inline]
        pub unsafe fn instance() -> *mut self::Chuck_Stats {
            Chuck_Stats_instance()
        }
        #[inline]
        pub unsafe fn add_shred(&mut self, shred: *mut self::Chuck_VM_Shred) {
            Chuck_Stats_add_shred(self, shred)
        }
        #[inline]
        pub unsafe fn activate_shred(&mut self, shred: *mut self::Chuck_VM_Shred) {
            Chuck_Stats_activate_shred(self, shred)
        }
        #[inline]
        pub unsafe fn advance_time(&mut self, shred: *mut self::Chuck_VM_Shred, to: f64) {
            Chuck_Stats_advance_time(self, shred, to)
        }
        #[inline]
        pub unsafe fn deactivate_shred(&mut self, shred: *mut self::Chuck_VM_Shred) {
            Chuck_Stats_deactivate_shred(self, shred)
        }
        #[inline]
        pub unsafe fn remove_shred(&mut self, shred: *mut self::Chuck_VM_Shred) {
            Chuck_Stats_remove_shred(self, shred)
        }
        #[inline]
        pub unsafe fn get_shreds(&mut self, out: *mut self::std::vector, d: *mut self::std::map) {
            Chuck_Stats_get_shreds(self, out, d)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Stats_Chuck_Stats(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_Stats_Chuck_Stats_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM_Func {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM_FTable {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_IO_Serial {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_VM_Stack {
        pub stack: *mut c_uchar,
        pub sp: *mut c_uchar,
        pub sp_max: *mut c_uchar,
        pub prev: *mut self::Chuck_VM_Stack,
        pub next: *mut self::Chuck_VM_Stack,
        pub m_is_init: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Stack() {
        assert_eq!(
            size_of::<Chuck_VM_Stack>(),
            48usize,
            concat!("Size of: ", stringify!(Chuck_VM_Stack))
        );
        assert_eq!(
            align_of::<Chuck_VM_Stack>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Stack))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).stack as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).sp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(sp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).sp_max as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(sp_max)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).prev as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(prev)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).next as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).m_is_init as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(m_is_init)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn Chuck_VM_Stack_initialize(this: *mut self::Chuck_VM_Stack, size: c_ulong)
            -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn Chuck_VM_Stack_shutdown(this: *mut self::Chuck_VM_Stack) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Stack"]
        pub fn Chuck_VM_Stack_Chuck_VM_Stack(this: *mut self::Chuck_VM_Stack);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Stack_destructor"]
        pub fn Chuck_VM_Stack_Chuck_VM_Stack_destructor(this: *mut self::Chuck_VM_Stack);
    }
    impl Default for Chuck_VM_Stack {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl Chuck_VM_Stack {
        #[inline]
        pub unsafe fn initialize(&mut self, size: c_ulong) -> c_ulong {
            Chuck_VM_Stack_initialize(self, size)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> c_ulong {
            Chuck_VM_Stack_shutdown(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_VM_Stack_Chuck_VM_Stack(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_VM_Stack_Chuck_VM_Stack_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_VM_Code {
        pub _base: self::Chuck_Object,
        pub instr: *mut *mut self::Chuck_Instr,
        pub num_instr: c_ulong,
        pub name: self::std::__cxx11::string,
        pub stack_depth: c_ulong,
        pub need_this: c_ulong,
        pub native_func: c_ulong,
        pub native_func_type: c_ulong,
        pub filename: self::std::__cxx11::string,
    }
    pub const Chuck_VM_Code_NATIVE_UNKNOWN: self::Chuck_VM_Code__bindgen_ty_1 = 0;
    pub const Chuck_VM_Code_NATIVE_CTOR: self::Chuck_VM_Code__bindgen_ty_1 = 1;
    pub const Chuck_VM_Code_NATIVE_DTOR: self::Chuck_VM_Code__bindgen_ty_1 = 2;
    pub const Chuck_VM_Code_NATIVE_MFUN: self::Chuck_VM_Code__bindgen_ty_1 = 3;
    pub const Chuck_VM_Code_NATIVE_SFUN: self::Chuck_VM_Code__bindgen_ty_1 = 4;
    pub type Chuck_VM_Code__bindgen_ty_1 = u32;
    #[test]
    fn bindgen_test_layout_Chuck_VM_Code() {
        assert_eq!(
            size_of::<Chuck_VM_Code>(),
            184usize,
            concat!("Size of: ", stringify!(Chuck_VM_Code))
        );
        assert_eq!(
            align_of::<Chuck_VM_Code>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Code))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).instr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(instr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).num_instr as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(num_instr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).name as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).stack_depth as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(stack_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).need_this as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(need_this)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).native_func as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(native_func)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Code>())).native_func_type as *const _ as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(native_func_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).filename as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(filename)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Code"]
        pub fn Chuck_VM_Code_Chuck_VM_Code(this: *mut self::Chuck_VM_Code);
    }
    impl Default for Chuck_VM_Code {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Code {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM_Code {{ instr: {:?}, num_instr: {:?}, name: {:?}, stack_depth: {:?}, need_this: {:?}, native_func: {:?}, native_func_type: {:?}, filename: {:?} }}" , self . instr , self . num_instr , self . name , self . stack_depth , self . need_this , self . native_func , self . native_func_type , self . filename )
        }
    }
    impl Chuck_VM_Code {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_VM_Code_Chuck_VM_Code(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Code_destructor"]
        pub fn Chuck_VM_Code_Chuck_VM_Code_destructor(this: *mut self::Chuck_VM_Code);
    }
    #[repr(C)]
    pub struct Chuck_VM_Shred {
        pub _base: self::Chuck_Object,
        pub mem: *mut self::Chuck_VM_Stack,
        pub reg: *mut self::Chuck_VM_Stack,
        pub base_ref: *mut self::Chuck_VM_Stack,
        pub code: *mut self::Chuck_VM_Code,
        pub code_orig: *mut self::Chuck_VM_Code,
        pub instr: *mut *mut self::Chuck_Instr,
        pub parent: *mut self::Chuck_VM_Shred,
        pub children: self::std::map,
        pub pc: c_ulong,
        pub vm_ref: *mut self::Chuck_VM,
        pub now: f64,
        pub start: f64,
        pub wake_time: f64,
        pub next_pc: c_ulong,
        pub is_done: c_ulong,
        pub is_running: c_ulong,
        pub is_abort: c_ulong,
        pub is_dumped: c_ulong,
        pub event: *mut self::Chuck_Event,
        pub m_ugen_map: self::std::map,
        pub m_parent_objects: self::std::vector,
        pub xid: c_ulong,
        pub name: self::std::__cxx11::string,
        pub args: self::std::vector,
        pub prev: *mut self::Chuck_VM_Shred,
        pub next: *mut self::Chuck_VM_Shred,
        pub stat: *mut self::Shred_Stat,
        pub m_loopCounters: self::std::vector,
        pub m_serials: *mut self::std::__cxx11::list,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Shred() {
        assert_eq!(
            size_of::<Chuck_VM_Shred>(),
            456usize,
            concat!("Size of: ", stringify!(Chuck_VM_Shred))
        );
        assert_eq!(
            align_of::<Chuck_VM_Shred>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Shred))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).mem as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(mem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).reg as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(reg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).base_ref as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(base_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).code as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).code_orig as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(code_orig)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).instr as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(instr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).parent as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).children as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(children)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).pc as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(pc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).vm_ref as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(vm_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).now as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(now)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).start as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(start)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).wake_time as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(wake_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).next_pc as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(next_pc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).is_done as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(is_done)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).is_running as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(is_running)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).is_abort as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(is_abort)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).is_dumped as *const _ as usize },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(is_dumped)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).event as *const _ as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(event)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).m_ugen_map as *const _ as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(m_ugen_map)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shred>())).m_parent_objects as *const _ as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(m_parent_objects)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).xid as *const _ as usize },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).name as *const _ as usize },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).args as *const _ as usize },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).prev as *const _ as usize },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(prev)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).next as *const _ as usize },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).stat as *const _ as usize },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(stat)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shred>())).m_loopCounters as *const _ as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(m_loopCounters)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).m_serials as *const _ as usize },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(m_serials)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn Chuck_VM_Shred_initialize(
            this: *mut self::Chuck_VM_Shred,
            c: *mut self::Chuck_VM_Code,
            mem_st_size: c_ulong,
            reg_st_size: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn Chuck_VM_Shred_shutdown(this: *mut self::Chuck_VM_Shred) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}run"]
        pub fn Chuck_VM_Shred_run(
            this: *mut self::Chuck_VM_Shred,
            vm: *mut self::Chuck_VM,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}add"]
        pub fn Chuck_VM_Shred_add(
            this: *mut self::Chuck_VM_Shred,
            ugen: *mut self::Chuck_UGen,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}remove"]
        pub fn Chuck_VM_Shred_remove(
            this: *mut self::Chuck_VM_Shred,
            ugen: *mut self::Chuck_UGen,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}add_parent_ref"]
        pub fn Chuck_VM_Shred_add_parent_ref(
            this: *mut self::Chuck_VM_Shred,
            obj: *mut self::Chuck_Object,
        );
    }
    extern "C" {
        #[link_name = "\u{1}add_serialio"]
        pub fn Chuck_VM_Shred_add_serialio(
            this: *mut self::Chuck_VM_Shred,
            serial: *mut self::Chuck_IO_Serial,
        );
    }
    extern "C" {
        #[link_name = "\u{1}remove_serialio"]
        pub fn Chuck_VM_Shred_remove_serialio(
            this: *mut self::Chuck_VM_Shred,
            serial: *mut self::Chuck_IO_Serial,
        );
    }
    extern "C" {
        #[link_name = "\u{1}pushLoopCounter"]
        pub fn Chuck_VM_Shred_pushLoopCounter(this: *mut self::Chuck_VM_Shred) -> *mut c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}currentLoopCounter"]
        pub fn Chuck_VM_Shred_currentLoopCounter(this: *mut self::Chuck_VM_Shred) -> *mut c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}popLoopCounter"]
        pub fn Chuck_VM_Shred_popLoopCounter(this: *mut self::Chuck_VM_Shred) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Shred"]
        pub fn Chuck_VM_Shred_Chuck_VM_Shred(this: *mut self::Chuck_VM_Shred);
    }
    impl Default for Chuck_VM_Shred {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Shred {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM_Shred {{ mem: {:?}, reg: {:?}, base_ref: {:?}, code: {:?}, code_orig: {:?}, instr: {:?}, parent: {:?}, children: {:?}, pc: {:?}, vm_ref: {:?}, now: {:?}, start: {:?}, wake_time: {:?}, next_pc: {:?}, is_done: {:?}, is_running: {:?}, is_abort: {:?}, is_dumped: {:?}, event: {:?}, m_ugen_map: {:?}, m_parent_objects: {:?}, xid: {:?}, name: {:?}, args: {:?}, prev: {:?}, next: {:?}, stat: {:?}, m_loopCounters: {:?}, m_serials: {:?} }}" , self . mem , self . reg , self . base_ref , self . code , self . code_orig , self . instr , self . parent , self . children , self . pc , self . vm_ref , self . now , self . start , self . wake_time , self . next_pc , self . is_done , self . is_running , self . is_abort , self . is_dumped , self . event , self . m_ugen_map , self . m_parent_objects , self . xid , self . name , self . args , self . prev , self . next , self . stat , self . m_loopCounters , self . m_serials )
        }
    }
    impl Chuck_VM_Shred {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            c: *mut self::Chuck_VM_Code,
            mem_st_size: c_ulong,
            reg_st_size: c_ulong,
        ) -> c_ulong {
            Chuck_VM_Shred_initialize(self, c, mem_st_size, reg_st_size)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> c_ulong {
            Chuck_VM_Shred_shutdown(self)
        }
        #[inline]
        pub unsafe fn run(&mut self, vm: *mut self::Chuck_VM) -> c_ulong {
            Chuck_VM_Shred_run(self, vm)
        }
        #[inline]
        pub unsafe fn add(&mut self, ugen: *mut self::Chuck_UGen) -> c_ulong {
            Chuck_VM_Shred_add(self, ugen)
        }
        #[inline]
        pub unsafe fn remove(&mut self, ugen: *mut self::Chuck_UGen) -> c_ulong {
            Chuck_VM_Shred_remove(self, ugen)
        }
        #[inline]
        pub unsafe fn add_parent_ref(&mut self, obj: *mut self::Chuck_Object) {
            Chuck_VM_Shred_add_parent_ref(self, obj)
        }
        #[inline]
        pub unsafe fn add_serialio(&mut self, serial: *mut self::Chuck_IO_Serial) {
            Chuck_VM_Shred_add_serialio(self, serial)
        }
        #[inline]
        pub unsafe fn remove_serialio(&mut self, serial: *mut self::Chuck_IO_Serial) {
            Chuck_VM_Shred_remove_serialio(self, serial)
        }
        #[inline]
        pub unsafe fn pushLoopCounter(&mut self) -> *mut c_ulong {
            Chuck_VM_Shred_pushLoopCounter(self)
        }
        #[inline]
        pub unsafe fn currentLoopCounter(&mut self) -> *mut c_ulong {
            Chuck_VM_Shred_currentLoopCounter(self)
        }
        #[inline]
        pub unsafe fn popLoopCounter(&mut self) -> bool {
            Chuck_VM_Shred_popLoopCounter(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_VM_Shred_Chuck_VM_Shred(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Shred_destructor"]
        pub fn Chuck_VM_Shred_Chuck_VM_Shred_destructor(this: *mut self::Chuck_VM_Shred);
    }
    #[repr(C)]
    pub struct Chuck_VM_Shred_Status {
        pub _base: self::Chuck_Object,
        pub xid: c_ulong,
        pub name: self::std::__cxx11::string,
        pub start: f64,
        pub has_event: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Shred_Status() {
        assert_eq!(
            size_of::<Chuck_VM_Shred_Status>(),
            128usize,
            concat!("Size of: ", stringify!(Chuck_VM_Shred_Status))
        );
        assert_eq!(
            align_of::<Chuck_VM_Shred_Status>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Shred_Status))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred_Status>())).xid as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred_Status),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred_Status>())).name as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred_Status),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred_Status>())).start as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred_Status),
                "::",
                stringify!(start)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shred_Status>())).has_event as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred_Status),
                "::",
                stringify!(has_event)
            )
        );
    }
    impl Default for Chuck_VM_Shred_Status {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Shred_Status {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_VM_Shred_Status {{ xid: {:?}, name: {:?}, start: {:?}, has_event: {:?} }}",
                self.xid, self.name, self.start, self.has_event
            )
        }
    }
    #[repr(C)]
    pub struct Chuck_VM_Status {
        pub _base: self::Chuck_Object,
        pub srate: c_ulong,
        pub now_system: f64,
        pub t_second: c_ulong,
        pub t_minute: c_ulong,
        pub t_hour: c_ulong,
        pub list: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Status() {
        assert_eq!(
            size_of::<Chuck_VM_Status>(),
            136usize,
            concat!("Size of: ", stringify!(Chuck_VM_Status))
        );
        assert_eq!(
            align_of::<Chuck_VM_Status>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Status))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).srate as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(srate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).now_system as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(now_system)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).t_second as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(t_second)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).t_minute as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(t_minute)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).t_hour as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(t_hour)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).list as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(list)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}clear"]
        pub fn Chuck_VM_Status_clear(this: *mut self::Chuck_VM_Status);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Status"]
        pub fn Chuck_VM_Status_Chuck_VM_Status(this: *mut self::Chuck_VM_Status);
    }
    impl Default for Chuck_VM_Status {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Status {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM_Status {{ srate: {:?}, now_system: {:?}, t_second: {:?}, t_minute: {:?}, t_hour: {:?}, list: {:?} }}" , self . srate , self . now_system , self . t_second , self . t_minute , self . t_hour , self . list )
        }
    }
    impl PartialEq for Chuck_VM_Status {
        fn eq(&self, other: &Chuck_VM_Status) -> bool {
            self._base == other._base
                && self.srate == other.srate
                && self.now_system == other.now_system
                && self.t_second == other.t_second
                && self.t_minute == other.t_minute
                && self.t_hour == other.t_hour
                && self.list == other.list
        }
    }
    impl Chuck_VM_Status {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Chuck_VM_Status_clear(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_VM_Status_Chuck_VM_Status(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Status_destructor"]
        pub fn Chuck_VM_Status_Chuck_VM_Status_destructor(this: *mut self::Chuck_VM_Status);
    }
    #[repr(C)]
    pub struct Chuck_VM_Shreduler {
        pub _base: self::Chuck_Object,
        pub now_system: f64,
        pub rt_audio: c_ulong,
        pub vm_ref: *mut self::Chuck_VM,
        pub shred_list: *mut self::Chuck_VM_Shred,
        pub blocked: self::std::map,
        pub m_current_shred: *mut self::Chuck_VM_Shred,
        pub m_dac: *mut self::Chuck_UGen,
        pub m_adc: *mut self::Chuck_UGen,
        pub m_bunghole: *mut self::Chuck_UGen,
        pub m_num_dac_channels: c_ulong,
        pub m_num_adc_channels: c_ulong,
        pub m_status: self::Chuck_VM_Status,
        pub m_max_block_size: c_ulong,
        pub m_adaptive: c_ulong,
        pub m_samps_until_next: f64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Shreduler() {
        assert_eq!(
            size_of::<Chuck_VM_Shreduler>(),
            360usize,
            concat!("Size of: ", stringify!(Chuck_VM_Shreduler))
        );
        assert_eq!(
            align_of::<Chuck_VM_Shreduler>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Shreduler))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).now_system as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(now_system)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).rt_audio as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(rt_audio)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).vm_ref as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(vm_ref)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).shred_list as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(shred_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).blocked as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(blocked)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_current_shred as *const _ as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_current_shred)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_dac as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_dac)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_adc as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_adc)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_bunghole as *const _ as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_bunghole)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_num_dac_channels as *const _
                    as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_num_dac_channels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_num_adc_channels as *const _
                    as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_num_adc_channels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_status as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_status)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_max_block_size as *const _ as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_max_block_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_adaptive as *const _ as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_adaptive)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_samps_until_next as *const _
                    as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_samps_until_next)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn Chuck_VM_Shreduler_initialize(this: *mut self::Chuck_VM_Shreduler) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn Chuck_VM_Shreduler_shutdown(this: *mut self::Chuck_VM_Shreduler) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}shredule"]
        pub fn Chuck_VM_Shreduler_shredule(
            this: *mut self::Chuck_VM_Shreduler,
            shred: *mut self::Chuck_VM_Shred,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}shredule"]
        pub fn Chuck_VM_Shreduler_shredule1(
            this: *mut self::Chuck_VM_Shreduler,
            shred: *mut self::Chuck_VM_Shred,
            wake_time: f64,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get"]
        pub fn Chuck_VM_Shreduler_get(
            this: *mut self::Chuck_VM_Shreduler,
        ) -> *mut self::Chuck_VM_Shred;
    }
    extern "C" {
        #[link_name = "\u{1}advance"]
        pub fn Chuck_VM_Shreduler_advance(this: *mut self::Chuck_VM_Shreduler, N: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}advance_v"]
        pub fn Chuck_VM_Shreduler_advance_v(
            this: *mut self::Chuck_VM_Shreduler,
            num_left: *mut c_long,
            offset: *mut c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}set_adaptive"]
        pub fn Chuck_VM_Shreduler_set_adaptive(
            this: *mut self::Chuck_VM_Shreduler,
            max_block_size: c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}remove"]
        pub fn Chuck_VM_Shreduler_remove(
            this: *mut self::Chuck_VM_Shreduler,
            shred: *mut self::Chuck_VM_Shred,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}replace"]
        pub fn Chuck_VM_Shreduler_replace(
            this: *mut self::Chuck_VM_Shreduler,
            out: *mut self::Chuck_VM_Shred,
            in_: *mut self::Chuck_VM_Shred,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}lookup"]
        pub fn Chuck_VM_Shreduler_lookup(
            this: *mut self::Chuck_VM_Shreduler,
            xid: c_ulong,
        ) -> *mut self::Chuck_VM_Shred;
    }
    extern "C" {
        #[link_name = "\u{1}status"]
        pub fn Chuck_VM_Shreduler_status(this: *mut self::Chuck_VM_Shreduler);
    }
    extern "C" {
        #[link_name = "\u{1}status"]
        pub fn Chuck_VM_Shreduler_status1(
            this: *mut self::Chuck_VM_Shreduler,
            status: *mut self::Chuck_VM_Status,
        );
    }
    extern "C" {
        #[link_name = "\u{1}highest"]
        pub fn Chuck_VM_Shreduler_highest(this: *mut self::Chuck_VM_Shreduler) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}add_blocked"]
        pub fn Chuck_VM_Shreduler_add_blocked(
            this: *mut self::Chuck_VM_Shreduler,
            shred: *mut self::Chuck_VM_Shred,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}remove_blocked"]
        pub fn Chuck_VM_Shreduler_remove_blocked(
            this: *mut self::Chuck_VM_Shreduler,
            shred: *mut self::Chuck_VM_Shred,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Shreduler"]
        pub fn Chuck_VM_Shreduler_Chuck_VM_Shreduler(this: *mut self::Chuck_VM_Shreduler);
    }
    impl Default for Chuck_VM_Shreduler {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Shreduler {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM_Shreduler {{ now_system: {:?}, rt_audio: {:?}, vm_ref: {:?}, shred_list: {:?}, blocked: {:?}, m_current_shred: {:?}, m_dac: {:?}, m_adc: {:?}, m_bunghole: {:?}, m_num_dac_channels: {:?}, m_num_adc_channels: {:?}, m_status: {:?}, m_max_block_size: {:?}, m_adaptive: {:?}, m_samps_until_next: {:?} }}" , self . now_system , self . rt_audio , self . vm_ref , self . shred_list , self . blocked , self . m_current_shred , self . m_dac , self . m_adc , self . m_bunghole , self . m_num_dac_channels , self . m_num_adc_channels , self . m_status , self . m_max_block_size , self . m_adaptive , self . m_samps_until_next )
        }
    }
    impl PartialEq for Chuck_VM_Shreduler {
        fn eq(&self, other: &Chuck_VM_Shreduler) -> bool {
            self._base == other._base
                && self.now_system == other.now_system
                && self.rt_audio == other.rt_audio
                && self.vm_ref == other.vm_ref
                && self.shred_list == other.shred_list
                && self.blocked == other.blocked
                && self.m_current_shred == other.m_current_shred
                && self.m_dac == other.m_dac
                && self.m_adc == other.m_adc
                && self.m_bunghole == other.m_bunghole
                && self.m_num_dac_channels == other.m_num_dac_channels
                && self.m_num_adc_channels == other.m_num_adc_channels
                && self.m_status == other.m_status
                && self.m_max_block_size == other.m_max_block_size
                && self.m_adaptive == other.m_adaptive
                && self.m_samps_until_next == other.m_samps_until_next
        }
    }
    impl Chuck_VM_Shreduler {
        #[inline]
        pub unsafe fn initialize(&mut self) -> c_ulong {
            Chuck_VM_Shreduler_initialize(self)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> c_ulong {
            Chuck_VM_Shreduler_shutdown(self)
        }
        #[inline]
        pub unsafe fn shredule(&mut self, shred: *mut self::Chuck_VM_Shred) -> c_ulong {
            Chuck_VM_Shreduler_shredule(self, shred)
        }
        #[inline]
        pub unsafe fn shredule1(
            &mut self,
            shred: *mut self::Chuck_VM_Shred,
            wake_time: f64,
        ) -> c_ulong {
            Chuck_VM_Shreduler_shredule1(self, shred, wake_time)
        }
        #[inline]
        pub unsafe fn get(&mut self) -> *mut self::Chuck_VM_Shred {
            Chuck_VM_Shreduler_get(self)
        }
        #[inline]
        pub unsafe fn advance(&mut self, N: c_long) {
            Chuck_VM_Shreduler_advance(self, N)
        }
        #[inline]
        pub unsafe fn advance_v(&mut self, num_left: *mut c_long, offset: *mut c_long) {
            Chuck_VM_Shreduler_advance_v(self, num_left, offset)
        }
        #[inline]
        pub unsafe fn set_adaptive(&mut self, max_block_size: c_ulong) {
            Chuck_VM_Shreduler_set_adaptive(self, max_block_size)
        }
        #[inline]
        pub unsafe fn remove(&mut self, shred: *mut self::Chuck_VM_Shred) -> c_ulong {
            Chuck_VM_Shreduler_remove(self, shred)
        }
        #[inline]
        pub unsafe fn replace(
            &mut self,
            out: *mut self::Chuck_VM_Shred,
            in_: *mut self::Chuck_VM_Shred,
        ) -> c_ulong {
            Chuck_VM_Shreduler_replace(self, out, in_)
        }
        #[inline]
        pub unsafe fn lookup(&mut self, xid: c_ulong) -> *mut self::Chuck_VM_Shred {
            Chuck_VM_Shreduler_lookup(self, xid)
        }
        #[inline]
        pub unsafe fn status(&mut self) {
            Chuck_VM_Shreduler_status(self)
        }
        #[inline]
        pub unsafe fn status1(&mut self, status: *mut self::Chuck_VM_Status) {
            Chuck_VM_Shreduler_status1(self, status)
        }
        #[inline]
        pub unsafe fn highest(&mut self) -> c_ulong {
            Chuck_VM_Shreduler_highest(self)
        }
        #[inline]
        pub unsafe fn add_blocked(&mut self, shred: *mut self::Chuck_VM_Shred) -> c_ulong {
            Chuck_VM_Shreduler_add_blocked(self, shred)
        }
        #[inline]
        pub unsafe fn remove_blocked(&mut self, shred: *mut self::Chuck_VM_Shred) -> c_ulong {
            Chuck_VM_Shreduler_remove_blocked(self, shred)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_VM_Shreduler_Chuck_VM_Shreduler(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_Shreduler_destructor"]
        pub fn Chuck_VM_Shreduler_Chuck_VM_Shreduler_destructor(
            this: *mut self::Chuck_VM_Shreduler,
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Set_Global_Int_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Get_Global_Int_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Set_Global_Float_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Get_Global_Float_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Signal_Global_Event_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Global_Int_Container {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Global_Float_Container {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Global_Event_Container {
        _unused: [u8; 0],
    }
    pub const Chuck_Global_Request_Type_set_global_int_request: self::Chuck_Global_Request_Type = 0;
    pub const Chuck_Global_Request_Type_get_global_int_request: self::Chuck_Global_Request_Type = 1;
    pub const Chuck_Global_Request_Type_set_global_float_request: self::Chuck_Global_Request_Type =
        2;
    pub const Chuck_Global_Request_Type_get_global_float_request: self::Chuck_Global_Request_Type =
        3;
    pub const Chuck_Global_Request_Type_signal_global_event_request:
        self::Chuck_Global_Request_Type = 4;
    pub const Chuck_Global_Request_Type_spork_shred_request: self::Chuck_Global_Request_Type = 5;
    pub type Chuck_Global_Request_Type = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct Chuck_Global_Request {
        pub type_: self::Chuck_Global_Request_Type,
        pub __bindgen_anon_1: self::Chuck_Global_Request__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_Global_Request__bindgen_ty_1 {
        pub setIntRequest: *mut self::Chuck_Set_Global_Int_Request,
        pub getIntRequest: *mut self::Chuck_Get_Global_Int_Request,
        pub setFloatRequest: *mut self::Chuck_Set_Global_Float_Request,
        pub getFloatRequest: *mut self::Chuck_Get_Global_Float_Request,
        pub signalEventRequest: *mut self::Chuck_Signal_Global_Event_Request,
        pub shred: *mut self::Chuck_VM_Shred,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Global_Request__bindgen_ty_1() {
        assert_eq!(
            size_of::<Chuck_Global_Request__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Global_Request__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<Chuck_Global_Request__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(Chuck_Global_Request__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).setIntRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(setIntRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).getIntRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(getIntRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).setFloatRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(setFloatRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).getFloatRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(getFloatRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).signalEventRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(signalEventRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).shred as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(shred)
            )
        );
    }
    impl Default for Chuck_Global_Request__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Global_Request__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_Global_Request__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_Chuck_Global_Request() {
        assert_eq!(
            size_of::<Chuck_Global_Request>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Global_Request))
        );
        assert_eq!(
            align_of::<Chuck_Global_Request>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Global_Request))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Global_Request>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request),
                "::",
                stringify!(type_)
            )
        );
    }
    impl Default for Chuck_Global_Request {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Global_Request {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Global_Request {{ type: {:?}, __bindgen_anon_1: {:?} }}",
                self.type_, self.__bindgen_anon_1
            )
        }
    }
    #[repr(C)]
    pub struct Chuck_VM {
        pub _base: self::Chuck_Object,
        pub m_carrier: *mut self::Chuck_Carrier,
        pub m_adc: *mut self::Chuck_UGen,
        pub m_dac: *mut self::Chuck_UGen,
        pub m_bunghole: *mut self::Chuck_UGen,
        pub m_srate: c_ulong,
        pub m_num_adc_channels: c_ulong,
        pub m_num_dac_channels: c_ulong,
        pub m_halt: c_ulong,
        pub m_is_running: c_ulong,
        pub m_input_ref: *const f64,
        pub m_output_ref: *mut f64,
        pub m_init: c_ulong,
        pub m_last_error: self::std::__cxx11::string,
        pub m_shreds: *mut self::Chuck_VM_Shred,
        pub m_num_shreds: c_ulong,
        pub m_shred_id: c_ulong,
        pub m_shreduler: *mut self::Chuck_VM_Shreduler,
        pub m_shred_dump: self::std::vector,
        pub m_num_dumped_shreds: c_ulong,
        pub m_msg_buffer: *mut self::CBufferSimple,
        pub m_reply_buffer: *mut self::CBufferSimple,
        pub m_event_buffer: *mut self::CBufferSimple,
        pub m_event_buffers: self::std::__cxx11::list,
        pub m_global_ints: self::std::map,
        pub m_global_floats: self::std::map,
        pub m_global_events: self::std::map,
        pub m_global_request_queue: self::XCircleBuffer<root::Chuck_Global_Request>,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM() {
        assert_eq!(
            size_of::<Chuck_VM>(),
            496usize,
            concat!("Size of: ", stringify!(Chuck_VM))
        );
        assert_eq!(
            align_of::<Chuck_VM>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_carrier as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_adc as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_adc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_dac as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_dac)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_bunghole as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_bunghole)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_srate as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_srate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_num_adc_channels as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_num_adc_channels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_num_dac_channels as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_num_dac_channels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_halt as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_halt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_is_running as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_is_running)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_input_ref as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_input_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_output_ref as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_output_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_init as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_init)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_last_error as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_last_error)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_shreds as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_shreds)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_num_shreds as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_num_shreds)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_shred_id as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_shred_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_shreduler as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_shreduler)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_shred_dump as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_shred_dump)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM>())).m_num_dumped_shreds as *const _ as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_num_dumped_shreds)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_msg_buffer as *const _ as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_msg_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_reply_buffer as *const _ as usize },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_reply_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_event_buffer as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_event_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_event_buffers as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_event_buffers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_global_ints as *const _ as usize },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_global_ints)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_global_floats as *const _ as usize },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_global_floats)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_global_events as *const _ as usize },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_global_events)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM>())).m_global_request_queue as *const _ as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_global_request_queue)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn Chuck_VM_initialize(
            this: *mut self::Chuck_VM,
            srate: c_ulong,
            dac_chan: c_ulong,
            adc_chan: c_ulong,
            adaptive: c_ulong,
            halt: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}initialize_synthesis"]
        pub fn Chuck_VM_initialize_synthesis(this: *mut self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn Chuck_VM_shutdown(this: *mut self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}start"]
        pub fn Chuck_VM_start(this: *mut self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}running"]
        pub fn Chuck_VM_running(this: *mut self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}stop"]
        pub fn Chuck_VM_stop(this: *mut self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}spork"]
        pub fn Chuck_VM_spork(
            this: *mut self::Chuck_VM,
            code: *mut self::Chuck_VM_Code,
            parent: *mut self::Chuck_VM_Shred,
            immediate: c_ulong,
        ) -> *mut self::Chuck_VM_Shred;
    }
    extern "C" {
        #[link_name = "\u{1}shreduler"]
        pub fn Chuck_VM_shreduler(this: *const self::Chuck_VM) -> *mut self::Chuck_VM_Shreduler;
    }
    extern "C" {
        #[link_name = "\u{1}next_id"]
        pub fn Chuck_VM_next_id(this: *mut self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}srate"]
        pub fn Chuck_VM_srate(this: *const self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}run"]
        pub fn Chuck_VM_run(
            this: *mut self::Chuck_VM,
            numFrames: c_long,
            input: *const f64,
            output: *mut f64,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}compute"]
        pub fn Chuck_VM_compute(this: *mut self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}abort_current_shred"]
        pub fn Chuck_VM_abort_current_shred(this: *mut self::Chuck_VM) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}invoke_static"]
        pub fn Chuck_VM_invoke_static(
            this: *mut self::Chuck_VM,
            shred: *mut self::Chuck_VM_Shred,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}gc"]
        pub fn Chuck_VM_gc(this: *mut self::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}gc"]
        pub fn Chuck_VM_gc1(this: *mut self::Chuck_VM, amount: c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}queue_msg"]
        pub fn Chuck_VM_queue_msg(
            this: *mut self::Chuck_VM,
            msg: *mut self::Chuck_Msg,
            num_msg: c_int,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}queue_event"]
        pub fn Chuck_VM_queue_event(
            this: *mut self::Chuck_VM,
            event: *mut self::Chuck_Event,
            num_msg: c_int,
            buffer: *mut self::CBufferSimple,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}process_msg"]
        pub fn Chuck_VM_process_msg(
            this: *mut self::Chuck_VM,
            msg: *mut self::Chuck_Msg,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get_reply"]
        pub fn Chuck_VM_get_reply(this: *mut self::Chuck_VM) -> *mut self::Chuck_Msg;
    }
    extern "C" {
        #[link_name = "\u{1}create_event_buffer"]
        pub fn Chuck_VM_create_event_buffer(this: *mut self::Chuck_VM) -> *mut self::CBufferSimple;
    }
    extern "C" {
        #[link_name = "\u{1}destroy_event_buffer"]
        pub fn Chuck_VM_destroy_event_buffer(
            this: *mut self::Chuck_VM,
            buffer: *mut self::CBufferSimple,
        );
    }
    extern "C" {
        #[link_name = "\u{1}get_global_int"]
        pub fn Chuck_VM_get_global_int(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: c_long)>,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}set_global_int"]
        pub fn Chuck_VM_set_global_int(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
            val: c_long,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get_global_float"]
        pub fn Chuck_VM_get_global_float(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: f64)>,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}set_global_float"]
        pub fn Chuck_VM_set_global_float(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
            val: f64,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}signal_global_event"]
        pub fn Chuck_VM_signal_global_event(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}broadcast_global_event"]
        pub fn Chuck_VM_broadcast_global_event(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}init_global_int"]
        pub fn Chuck_VM_init_global_int(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get_global_int_value"]
        pub fn Chuck_VM_get_global_int_value(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}get_ptr_to_global_int"]
        pub fn Chuck_VM_get_ptr_to_global_int(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> *mut c_long;
    }
    extern "C" {
        #[link_name = "\u{1}init_global_float"]
        pub fn Chuck_VM_init_global_float(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get_global_float_value"]
        pub fn Chuck_VM_get_global_float_value(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}get_ptr_to_global_float"]
        pub fn Chuck_VM_get_ptr_to_global_float(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> *mut f64;
    }
    extern "C" {
        #[link_name = "\u{1}init_global_event"]
        pub fn Chuck_VM_init_global_event(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
            type_: *mut self::Chuck_Type,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}get_global_event"]
        pub fn Chuck_VM_get_global_event(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> *mut self::Chuck_Event;
    }
    extern "C" {
        #[link_name = "\u{1}get_ptr_to_global_event"]
        pub fn Chuck_VM_get_ptr_to_global_event(
            this: *mut self::Chuck_VM,
            name: self::std::__cxx11::string,
        ) -> *mut *mut self::Chuck_Event;
    }
    extern "C" {
        #[link_name = "\u{1}handle_global_queue_messages"]
        pub fn Chuck_VM_handle_global_queue_messages(this: *mut self::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}spork"]
        pub fn Chuck_VM_spork1(
            this: *mut self::Chuck_VM,
            shred: *mut self::Chuck_VM_Shred,
        ) -> *mut self::Chuck_VM_Shred;
    }
    extern "C" {
        #[link_name = "\u{1}free"]
        pub fn Chuck_VM_free(
            this: *mut self::Chuck_VM,
            shred: *mut self::Chuck_VM_Shred,
            cascade: c_ulong,
            dec: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}dump"]
        pub fn Chuck_VM_dump(this: *mut self::Chuck_VM, shred: *mut self::Chuck_VM_Shred);
    }
    extern "C" {
        #[link_name = "\u{1}release_dump"]
        pub fn Chuck_VM_release_dump(this: *mut self::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM"]
        pub fn Chuck_VM_Chuck_VM(this: *mut self::Chuck_VM);
    }
    impl Default for Chuck_VM {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM {{ m_carrier: {:?}, m_adc: {:?}, m_dac: {:?}, m_bunghole: {:?}, m_srate: {:?}, m_num_adc_channels: {:?}, m_num_dac_channels: {:?}, m_halt: {:?}, m_is_running: {:?}, m_input_ref: {:?}, m_output_ref: {:?}, m_init: {:?}, m_last_error: {:?}, m_shreds: {:?}, m_num_shreds: {:?}, m_shred_id: {:?}, m_shreduler: {:?}, m_shred_dump: {:?}, m_num_dumped_shreds: {:?}, m_msg_buffer: {:?}, m_reply_buffer: {:?}, m_event_buffer: {:?}, m_event_buffers: {:?}, m_global_ints: {:?}, m_global_floats: {:?}, m_global_events: {:?}, m_global_request_queue: {:?} }}" , self . m_carrier , self . m_adc , self . m_dac , self . m_bunghole , self . m_srate , self . m_num_adc_channels , self . m_num_dac_channels , self . m_halt , self . m_is_running , self . m_input_ref , self . m_output_ref , self . m_init , self . m_last_error , self . m_shreds , self . m_num_shreds , self . m_shred_id , self . m_shreduler , self . m_shred_dump , self . m_num_dumped_shreds , self . m_msg_buffer , self . m_reply_buffer , self . m_event_buffer , self . m_event_buffers , self . m_global_ints , self . m_global_floats , self . m_global_events , self . m_global_request_queue )
        }
    }
    impl Chuck_VM {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            srate: c_ulong,
            dac_chan: c_ulong,
            adc_chan: c_ulong,
            adaptive: c_ulong,
            halt: c_ulong,
        ) -> c_ulong {
            Chuck_VM_initialize(self, srate, dac_chan, adc_chan, adaptive, halt)
        }
        #[inline]
        pub unsafe fn initialize_synthesis(&mut self) -> c_ulong {
            Chuck_VM_initialize_synthesis(self)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> c_ulong {
            Chuck_VM_shutdown(self)
        }
        #[inline]
        pub unsafe fn start(&mut self) -> c_ulong {
            Chuck_VM_start(self)
        }
        #[inline]
        pub unsafe fn running(&mut self) -> c_ulong {
            Chuck_VM_running(self)
        }
        #[inline]
        pub unsafe fn stop(&mut self) -> c_ulong {
            Chuck_VM_stop(self)
        }
        #[inline]
        pub unsafe fn spork(
            &mut self,
            code: *mut self::Chuck_VM_Code,
            parent: *mut self::Chuck_VM_Shred,
            immediate: c_ulong,
        ) -> *mut self::Chuck_VM_Shred {
            Chuck_VM_spork(self, code, parent, immediate)
        }
        #[inline]
        pub unsafe fn shreduler(&self) -> *mut self::Chuck_VM_Shreduler {
            Chuck_VM_shreduler(self)
        }
        #[inline]
        pub unsafe fn next_id(&mut self) -> c_ulong {
            Chuck_VM_next_id(self)
        }
        #[inline]
        pub unsafe fn srate(&self) -> c_ulong {
            Chuck_VM_srate(self)
        }
        #[inline]
        pub unsafe fn run(
            &mut self,
            numFrames: c_long,
            input: *const f64,
            output: *mut f64,
        ) -> c_ulong {
            Chuck_VM_run(self, numFrames, input, output)
        }
        #[inline]
        pub unsafe fn compute(&mut self) -> c_ulong {
            Chuck_VM_compute(self)
        }
        #[inline]
        pub unsafe fn abort_current_shred(&mut self) -> c_ulong {
            Chuck_VM_abort_current_shred(self)
        }
        #[inline]
        pub unsafe fn invoke_static(&mut self, shred: *mut self::Chuck_VM_Shred) -> c_ulong {
            Chuck_VM_invoke_static(self, shred)
        }
        #[inline]
        pub unsafe fn gc(&mut self) {
            Chuck_VM_gc(self)
        }
        #[inline]
        pub unsafe fn gc1(&mut self, amount: c_ulong) {
            Chuck_VM_gc1(self, amount)
        }
        #[inline]
        pub unsafe fn queue_msg(&mut self, msg: *mut self::Chuck_Msg, num_msg: c_int) -> c_ulong {
            Chuck_VM_queue_msg(self, msg, num_msg)
        }
        #[inline]
        pub unsafe fn queue_event(
            &mut self,
            event: *mut self::Chuck_Event,
            num_msg: c_int,
            buffer: *mut self::CBufferSimple,
        ) -> c_ulong {
            Chuck_VM_queue_event(self, event, num_msg, buffer)
        }
        #[inline]
        pub unsafe fn process_msg(&mut self, msg: *mut self::Chuck_Msg) -> c_ulong {
            Chuck_VM_process_msg(self, msg)
        }
        #[inline]
        pub unsafe fn get_reply(&mut self) -> *mut self::Chuck_Msg {
            Chuck_VM_get_reply(self)
        }
        #[inline]
        pub unsafe fn create_event_buffer(&mut self) -> *mut self::CBufferSimple {
            Chuck_VM_create_event_buffer(self)
        }
        #[inline]
        pub unsafe fn destroy_event_buffer(&mut self, buffer: *mut self::CBufferSimple) {
            Chuck_VM_destroy_event_buffer(self, buffer)
        }
        #[inline]
        pub unsafe fn get_global_int(
            &mut self,
            name: self::std::__cxx11::string,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: c_long)>,
        ) -> c_ulong {
            Chuck_VM_get_global_int(self, name, callback)
        }
        #[inline]
        pub unsafe fn set_global_int(
            &mut self,
            name: self::std::__cxx11::string,
            val: c_long,
        ) -> c_ulong {
            Chuck_VM_set_global_int(self, name, val)
        }
        #[inline]
        pub unsafe fn get_global_float(
            &mut self,
            name: self::std::__cxx11::string,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: f64)>,
        ) -> c_ulong {
            Chuck_VM_get_global_float(self, name, callback)
        }
        #[inline]
        pub unsafe fn set_global_float(
            &mut self,
            name: self::std::__cxx11::string,
            val: f64,
        ) -> c_ulong {
            Chuck_VM_set_global_float(self, name, val)
        }
        #[inline]
        pub unsafe fn signal_global_event(&mut self, name: self::std::__cxx11::string) -> c_ulong {
            Chuck_VM_signal_global_event(self, name)
        }
        #[inline]
        pub unsafe fn broadcast_global_event(
            &mut self,
            name: self::std::__cxx11::string,
        ) -> c_ulong {
            Chuck_VM_broadcast_global_event(self, name)
        }
        #[inline]
        pub unsafe fn init_global_int(&mut self, name: self::std::__cxx11::string) -> c_ulong {
            Chuck_VM_init_global_int(self, name)
        }
        #[inline]
        pub unsafe fn get_global_int_value(&mut self, name: self::std::__cxx11::string) -> c_long {
            Chuck_VM_get_global_int_value(self, name)
        }
        #[inline]
        pub unsafe fn get_ptr_to_global_int(
            &mut self,
            name: self::std::__cxx11::string,
        ) -> *mut c_long {
            Chuck_VM_get_ptr_to_global_int(self, name)
        }
        #[inline]
        pub unsafe fn init_global_float(&mut self, name: self::std::__cxx11::string) -> c_ulong {
            Chuck_VM_init_global_float(self, name)
        }
        #[inline]
        pub unsafe fn get_global_float_value(&mut self, name: self::std::__cxx11::string) -> f64 {
            Chuck_VM_get_global_float_value(self, name)
        }
        #[inline]
        pub unsafe fn get_ptr_to_global_float(
            &mut self,
            name: self::std::__cxx11::string,
        ) -> *mut f64 {
            Chuck_VM_get_ptr_to_global_float(self, name)
        }
        #[inline]
        pub unsafe fn init_global_event(
            &mut self,
            name: self::std::__cxx11::string,
            type_: *mut self::Chuck_Type,
        ) -> c_ulong {
            Chuck_VM_init_global_event(self, name, type_)
        }
        #[inline]
        pub unsafe fn get_global_event(
            &mut self,
            name: self::std::__cxx11::string,
        ) -> *mut self::Chuck_Event {
            Chuck_VM_get_global_event(self, name)
        }
        #[inline]
        pub unsafe fn get_ptr_to_global_event(
            &mut self,
            name: self::std::__cxx11::string,
        ) -> *mut *mut self::Chuck_Event {
            Chuck_VM_get_ptr_to_global_event(self, name)
        }
        #[inline]
        pub unsafe fn handle_global_queue_messages(&mut self) {
            Chuck_VM_handle_global_queue_messages(self)
        }
        #[inline]
        pub unsafe fn spork1(
            &mut self,
            shred: *mut self::Chuck_VM_Shred,
        ) -> *mut self::Chuck_VM_Shred {
            Chuck_VM_spork1(self, shred)
        }
        #[inline]
        pub unsafe fn free(
            &mut self,
            shred: *mut self::Chuck_VM_Shred,
            cascade: c_ulong,
            dec: c_ulong,
        ) -> c_ulong {
            Chuck_VM_free(self, shred, cascade, dec)
        }
        #[inline]
        pub unsafe fn dump(&mut self, shred: *mut self::Chuck_VM_Shred) {
            Chuck_VM_dump(self, shred)
        }
        #[inline]
        pub unsafe fn release_dump(&mut self) {
            Chuck_VM_release_dump(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_VM_Chuck_VM(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_VM_destructor"]
        pub fn Chuck_VM_Chuck_VM_destructor(this: *mut self::Chuck_VM);
    }
    pub const Chuck_Msg_Type_MSG_ADD: self::Chuck_Msg_Type = 1;
    pub const Chuck_Msg_Type_MSG_REMOVE: self::Chuck_Msg_Type = 2;
    pub const Chuck_Msg_Type_MSG_REMOVEALL: self::Chuck_Msg_Type = 3;
    pub const Chuck_Msg_Type_MSG_REPLACE: self::Chuck_Msg_Type = 4;
    pub const Chuck_Msg_Type_MSG_STATUS: self::Chuck_Msg_Type = 5;
    pub const Chuck_Msg_Type_MSG_PAUSE: self::Chuck_Msg_Type = 6;
    pub const Chuck_Msg_Type_MSG_KILL: self::Chuck_Msg_Type = 7;
    pub const Chuck_Msg_Type_MSG_TIME: self::Chuck_Msg_Type = 8;
    pub const Chuck_Msg_Type_MSG_RESET_ID: self::Chuck_Msg_Type = 9;
    pub const Chuck_Msg_Type_MSG_DONE: self::Chuck_Msg_Type = 10;
    pub const Chuck_Msg_Type_MSG_ABORT: self::Chuck_Msg_Type = 11;
    pub const Chuck_Msg_Type_MSG_ERROR: self::Chuck_Msg_Type = 12;
    pub const Chuck_Msg_Type_MSG_CLEARVM: self::Chuck_Msg_Type = 13;
    pub type Chuck_Msg_Type = u32;
    pub type ck_msg_func = ::std::option::Option<unsafe extern "C" fn(msg: *const self::Chuck_Msg)>;
    #[repr(C)]
    #[derive(Debug, PartialOrd, PartialEq)]
    pub struct Chuck_Msg {
        pub type_: c_ulong,
        pub param: c_ulong,
        pub code: *mut self::Chuck_VM_Code,
        pub shred: *mut self::Chuck_VM_Shred,
        pub when: f64,
        pub user: *mut c_void,
        pub reply: self::ck_msg_func,
        pub replyA: c_ulong,
        pub replyB: c_ulong,
        pub replyC: *mut c_void,
        pub args: *mut self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Msg() {
        assert_eq!(
            size_of::<Chuck_Msg>(),
            88usize,
            concat!("Size of: ", stringify!(Chuck_Msg))
        );
        assert_eq!(
            align_of::<Chuck_Msg>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Msg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).param as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(param)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).code as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).shred as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(shred)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).when as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(when)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).user as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(user)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).reply as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(reply)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).replyA as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(replyA)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).replyB as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(replyB)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).replyC as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(replyC)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).args as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(args)
            )
        );
    }
    impl Default for Chuck_Msg {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Compiler__bindgen_vtable(c_void);
    #[repr(C)]
    pub struct Chuck_Compiler {
        pub vtable_: *const Chuck_Compiler__bindgen_vtable,
        pub m_carrier: *mut self::Chuck_Carrier,
        pub emitter: *mut self::Chuck_Emitter,
        pub code: *mut self::Chuck_VM_Code,
        pub m_auto_depend: c_ulong,
        pub m_recent: self::std::map,
        pub m_dlls: self::std::__cxx11::list,
        pub m_cklibs_to_preload: self::std::__cxx11::list,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Compiler() {
        assert_eq!(
            size_of::<Chuck_Compiler>(),
            136usize,
            concat!("Size of: ", stringify!(Chuck_Compiler))
        );
        assert_eq!(
            align_of::<Chuck_Compiler>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Compiler))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).m_carrier as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).emitter as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(emitter)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).code as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Compiler>())).m_auto_depend as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_auto_depend)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).m_recent as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_recent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).m_dlls as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_dlls)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Compiler>())).m_cklibs_to_preload as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_cklibs_to_preload)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn Chuck_Compiler_initialize(
            this: *mut self::Chuck_Compiler,
            chugin_search_paths: *mut self::std::__cxx11::list,
            named_dls: *mut self::std::__cxx11::list,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn Chuck_Compiler_shutdown(this: *mut self::Chuck_Compiler);
    }
    extern "C" {
        #[link_name = "\u{1}bind"]
        pub fn Chuck_Compiler_bind(
            this: *mut self::Chuck_Compiler,
            query_func: self::f_ck_query,
            name: *const self::std::__cxx11::string,
            nspc: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}set_auto_depend"]
        pub fn Chuck_Compiler_set_auto_depend(this: *mut self::Chuck_Compiler, v: c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}go"]
        pub fn Chuck_Compiler_go(
            this: *mut self::Chuck_Compiler,
            filename: *const self::std::__cxx11::string,
            fd: *mut self::FILE,
            str_src: *const c_char,
            full_path: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}resolve"]
        pub fn Chuck_Compiler_resolve(
            this: *mut self::Chuck_Compiler,
            type_: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}output"]
        pub fn Chuck_Compiler_output(this: *mut self::Chuck_Compiler) -> *mut self::Chuck_VM_Code;
    }
    extern "C" {
        #[link_name = "\u{1}do_entire_file"]
        pub fn Chuck_Compiler_do_entire_file(
            this: *mut self::Chuck_Compiler,
            context: *mut self::Chuck_Context,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}do_only_classes"]
        pub fn Chuck_Compiler_do_only_classes(
            this: *mut self::Chuck_Compiler,
            context: *mut self::Chuck_Context,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}do_all_except_classes"]
        pub fn Chuck_Compiler_do_all_except_classes(
            this: *mut self::Chuck_Compiler,
            context: *mut self::Chuck_Context,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}do_normal"]
        pub fn Chuck_Compiler_do_normal(
            this: *mut self::Chuck_Compiler,
            path: *const self::std::__cxx11::string,
            fd: *mut self::FILE,
            str_src: *const c_char,
            full_path: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}find_recent_path"]
        pub fn Chuck_Compiler_find_recent_path(
            this: *mut self::Chuck_Compiler,
            path: *const self::std::__cxx11::string,
        ) -> *mut self::Chuck_Context;
    }
    extern "C" {
        #[link_name = "\u{1}find_recent_type"]
        pub fn Chuck_Compiler_find_recent_type(
            this: *mut self::Chuck_Compiler,
            type_: *const self::std::__cxx11::string,
        ) -> *mut self::Chuck_Context;
    }
    extern "C" {
        #[link_name = "\u{1}add_recent_path"]
        pub fn Chuck_Compiler_add_recent_path(
            this: *mut self::Chuck_Compiler,
            path: *const self::std::__cxx11::string,
            context: *mut self::Chuck_Context,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Compiler"]
        pub fn Chuck_Compiler_Chuck_Compiler(this: *mut self::Chuck_Compiler);
    }
    impl Default for Chuck_Compiler {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Compiler {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Compiler {{ m_carrier: {:?}, emitter: {:?}, code: {:?}, m_auto_depend: {:?}, m_recent: {:?}, m_dlls: {:?}, m_cklibs_to_preload: {:?} }}" , self . m_carrier , self . emitter , self . code , self . m_auto_depend , self . m_recent , self . m_dlls , self . m_cklibs_to_preload )
        }
    }
    impl Chuck_Compiler {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            chugin_search_paths: *mut self::std::__cxx11::list,
            named_dls: *mut self::std::__cxx11::list,
        ) -> c_ulong {
            Chuck_Compiler_initialize(self, chugin_search_paths, named_dls)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) {
            Chuck_Compiler_shutdown(self)
        }
        #[inline]
        pub unsafe fn bind(
            &mut self,
            query_func: self::f_ck_query,
            name: *const self::std::__cxx11::string,
            nspc: *const self::std::__cxx11::string,
        ) -> c_ulong {
            Chuck_Compiler_bind(self, query_func, name, nspc)
        }
        #[inline]
        pub unsafe fn set_auto_depend(&mut self, v: c_ulong) {
            Chuck_Compiler_set_auto_depend(self, v)
        }
        #[inline]
        pub unsafe fn go(
            &mut self,
            filename: *const self::std::__cxx11::string,
            fd: *mut self::FILE,
            str_src: *const c_char,
            full_path: *const self::std::__cxx11::string,
        ) -> c_ulong {
            Chuck_Compiler_go(self, filename, fd, str_src, full_path)
        }
        #[inline]
        pub unsafe fn resolve(&mut self, type_: *const self::std::__cxx11::string) -> c_ulong {
            Chuck_Compiler_resolve(self, type_)
        }
        #[inline]
        pub unsafe fn output(&mut self) -> *mut self::Chuck_VM_Code {
            Chuck_Compiler_output(self)
        }
        #[inline]
        pub unsafe fn do_entire_file(&mut self, context: *mut self::Chuck_Context) -> c_ulong {
            Chuck_Compiler_do_entire_file(self, context)
        }
        #[inline]
        pub unsafe fn do_only_classes(&mut self, context: *mut self::Chuck_Context) -> c_ulong {
            Chuck_Compiler_do_only_classes(self, context)
        }
        #[inline]
        pub unsafe fn do_all_except_classes(
            &mut self,
            context: *mut self::Chuck_Context,
        ) -> c_ulong {
            Chuck_Compiler_do_all_except_classes(self, context)
        }
        #[inline]
        pub unsafe fn do_normal(
            &mut self,
            path: *const self::std::__cxx11::string,
            fd: *mut self::FILE,
            str_src: *const c_char,
            full_path: *const self::std::__cxx11::string,
        ) -> c_ulong {
            Chuck_Compiler_do_normal(self, path, fd, str_src, full_path)
        }
        #[inline]
        pub unsafe fn find_recent_path(
            &mut self,
            path: *const self::std::__cxx11::string,
        ) -> *mut self::Chuck_Context {
            Chuck_Compiler_find_recent_path(self, path)
        }
        #[inline]
        pub unsafe fn find_recent_type(
            &mut self,
            type_: *const self::std::__cxx11::string,
        ) -> *mut self::Chuck_Context {
            Chuck_Compiler_find_recent_type(self, type_)
        }
        #[inline]
        pub unsafe fn add_recent_path(
            &mut self,
            path: *const self::std::__cxx11::string,
            context: *mut self::Chuck_Context,
        ) -> c_ulong {
            Chuck_Compiler_add_recent_path(self, path, context)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Compiler_Chuck_Compiler(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Compiler_destructor"]
        pub fn Chuck_Compiler_Chuck_Compiler_destructor(this: *mut self::Chuck_Compiler);
    }
    pub type Chuck_Shell_Request = self::std::__cxx11::string;
    pub type Chuck_Shell_Response = self::std::__cxx11::string;
    #[repr(C)]
    pub struct Chuck_Shell__bindgen_vtable(c_void);
    #[repr(C)]
    pub struct Chuck_Shell {
        pub vtable_: *const Chuck_Shell__bindgen_vtable,
        pub vms: self::std::vector,
        pub process_vm: *mut self::Chuck_VM,
        pub current_vm: *mut self::Chuck_Shell_VM,
        pub aliases: self::std::map,
        pub variables: self::std::map,
        pub commands: self::std::map,
        pub allocated_commands: self::std::vector,
        pub saved_code: self::std::map,
        pub code: self::std::__cxx11::string,
        pub ui: *mut self::Chuck_Shell_UI,
        pub initialized: c_ulong,
        pub stop: c_ulong,
        pub prompt: self::std::__cxx11::string,
        pub in_: self::std::__cxx11::string,
        pub code_entry_active: c_ulong,
        pub scope: c_ulong,
    }
    #[repr(C)]
    pub struct Chuck_Shell_Command__bindgen_vtable(c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command {
        pub vtable_: *const Chuck_Shell_Command__bindgen_vtable,
        pub caller: *mut self::Chuck_Shell,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command() {
        assert_eq!(
            size_of::<Chuck_Shell_Command>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell_Command>())).caller as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command),
                "::",
                stringify!(caller)
            )
        );
    }
    impl Default for Chuck_Shell_Command {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Shell_Command_VM {
        pub _base: self::Chuck_Shell_Command,
        pub commands: self::std::map,
        pub allocated_commands: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VM() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_VM>(),
            88usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VM))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_VM>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VM))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Command_VM>())).commands as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command_VM),
                "::",
                stringify!(commands)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Command_VM>())).allocated_commands as *const _
                    as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command_VM),
                "::",
                stringify!(allocated_commands)
            )
        );
    }
    impl Default for Chuck_Shell_Command_VM {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Shell_Command_VM {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Shell_Command_VM {{ commands: {:?}, allocated_commands: {:?} }}",
                self.commands, self.allocated_commands
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMAdd {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMAdd() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_VMAdd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMAdd))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_VMAdd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMAdd))
        );
    }
    impl Default for Chuck_Shell_Command_VMAdd {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMRemove {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMRemove() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_VMRemove>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMRemove))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_VMRemove>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMRemove))
        );
    }
    impl Default for Chuck_Shell_Command_VMRemove {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMAttach {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMAttach() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_VMAttach>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMAttach))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_VMAttach>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMAttach))
        );
    }
    impl Default for Chuck_Shell_Command_VMAttach {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMList {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMList() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_VMList>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMList))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_VMList>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMList))
        );
    }
    impl Default for Chuck_Shell_Command_VMList {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMSwap {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMSwap() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_VMSwap>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMSwap))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_VMSwap>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMSwap))
        );
    }
    impl Default for Chuck_Shell_Command_VMSwap {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMAttachAdd {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMAttachAdd() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_VMAttachAdd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMAttachAdd))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_VMAttachAdd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMAttachAdd))
        );
    }
    impl Default for Chuck_Shell_Command_VMAttachAdd {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Add {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Add() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Add>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Add))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Add>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Add))
        );
    }
    impl Default for Chuck_Shell_Command_Add {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Remove {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Remove() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Remove>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Remove))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Remove>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Remove))
        );
    }
    impl Default for Chuck_Shell_Command_Remove {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Status {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Status() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Status>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Status))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Status>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Status))
        );
    }
    impl Default for Chuck_Shell_Command_Status {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Removeall {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Removeall() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Removeall>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Removeall))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Removeall>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Removeall))
        );
    }
    impl Default for Chuck_Shell_Command_Removeall {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Removelast {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Removelast() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Removelast>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Removelast))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Removelast>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Removelast))
        );
    }
    impl Default for Chuck_Shell_Command_Removelast {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Replace {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Replace() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Replace>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Replace))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Replace>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Replace))
        );
    }
    impl Default for Chuck_Shell_Command_Replace {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Kill {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Kill() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Kill>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Kill))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Kill>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Kill))
        );
    }
    impl Default for Chuck_Shell_Command_Kill {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Close {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Close() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Close>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Close))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Close>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Close))
        );
    }
    impl Default for Chuck_Shell_Command_Close {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Exit {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Exit() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Exit>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Exit))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Exit>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Exit))
        );
    }
    impl Default for Chuck_Shell_Command_Exit {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Ls {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Ls() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Ls>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Ls))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Ls>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Ls))
        );
    }
    impl Default for Chuck_Shell_Command_Ls {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Cd {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Cd() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Cd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Cd))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Cd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Cd))
        );
    }
    impl Default for Chuck_Shell_Command_Cd {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Pwd {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Pwd() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Pwd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Pwd))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Pwd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Pwd))
        );
    }
    impl Default for Chuck_Shell_Command_Pwd {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Alias {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Alias() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Alias>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Alias))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Alias>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Alias))
        );
    }
    impl Default for Chuck_Shell_Command_Alias {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Unalias {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Unalias() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Unalias>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Unalias))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Unalias>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Unalias))
        );
    }
    impl Default for Chuck_Shell_Command_Unalias {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Source {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Source() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Source>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Source))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Source>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Source))
        );
    }
    impl Default for Chuck_Shell_Command_Source {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Shell_Command_Code {
        pub _base: self::Chuck_Shell_Command,
        pub commands: self::std::map,
        pub allocated_commands: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Code() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Code>(),
            88usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Code))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Code>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Code))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Command_Code>())).commands as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command_Code),
                "::",
                stringify!(commands)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Command_Code>())).allocated_commands as *const _
                    as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command_Code),
                "::",
                stringify!(allocated_commands)
            )
        );
    }
    impl Default for Chuck_Shell_Command_Code {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Shell_Command_Code {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Shell_Command_Code {{ commands: {:?}, allocated_commands: {:?} }}",
                self.commands, self.allocated_commands
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeContext {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeContext() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_CodeContext>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeContext))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_CodeContext>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeContext))
        );
    }
    impl Default for Chuck_Shell_Command_CodeContext {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeSave {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeSave() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_CodeSave>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeSave))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_CodeSave>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeSave))
        );
    }
    impl Default for Chuck_Shell_Command_CodeSave {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeDelete {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeDelete() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_CodeDelete>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeDelete))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_CodeDelete>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeDelete))
        );
    }
    impl Default for Chuck_Shell_Command_CodeDelete {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeAdd {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeAdd() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_CodeAdd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeAdd))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_CodeAdd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeAdd))
        );
    }
    impl Default for Chuck_Shell_Command_CodeAdd {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeList {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeList() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_CodeList>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeList))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_CodeList>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeList))
        );
    }
    impl Default for Chuck_Shell_Command_CodeList {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodePrint {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodePrint() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_CodePrint>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodePrint))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_CodePrint>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodePrint))
        );
    }
    impl Default for Chuck_Shell_Command_CodePrint {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeWrite {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeWrite() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_CodeWrite>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeWrite))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_CodeWrite>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeWrite))
        );
    }
    impl Default for Chuck_Shell_Command_CodeWrite {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeRead {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeRead() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_CodeRead>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeRead))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_CodeRead>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeRead))
        );
    }
    impl Default for Chuck_Shell_Command_CodeRead {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Help {
        pub _base: self::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Help() {
        assert_eq!(
            size_of::<Chuck_Shell_Command_Help>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Help))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Command_Help>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Help))
        );
    }
    impl Default for Chuck_Shell_Command_Help {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell() {
        assert_eq!(
            size_of::<Chuck_Shell>(),
            400usize,
            concat!("Size of: ", stringify!(Chuck_Shell))
        );
        assert_eq!(
            align_of::<Chuck_Shell>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).vms as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(vms)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).process_vm as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(process_vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).current_vm as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(current_vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).aliases as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(aliases)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).variables as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(variables)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).commands as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(commands)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell>())).allocated_commands as *const _ as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(allocated_commands)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).saved_code as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(saved_code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).code as *const _ as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).ui as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(ui)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).initialized as *const _ as usize },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(initialized)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).stop as *const _ as usize },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(stop)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).prompt as *const _ as usize },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(prompt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).in_ as *const _ as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(in_)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell>())).code_entry_active as *const _ as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(code_entry_active)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).scope as *const _ as usize },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(scope)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn Chuck_Shell_init(
            this: *mut self::Chuck_Shell,
            process_vm: *mut self::Chuck_VM,
            arg1: *mut self::Chuck_Shell_UI,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}run"]
        pub fn Chuck_Shell_run(this: *mut self::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_execute(
            this: *mut self::Chuck_Shell,
            arg1: *mut self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn Chuck_Shell_close(this: *mut self::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}exit"]
        pub fn Chuck_Shell_exit(this: *mut self::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}do_glob"]
        pub fn Chuck_Shell_do_glob(
            this: *mut self::Chuck_Shell,
            arg1: *const self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
            arg3: *mut self::std::vector,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}do_code"]
        pub fn Chuck_Shell_do_code(
            this: *mut self::Chuck_Shell,
            arg1: *mut self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
            command: self::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}do_code_context"]
        pub fn Chuck_Shell_do_code_context(
            this: *mut self::Chuck_Shell,
            arg1: *mut self::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}do_aliases"]
        pub fn Chuck_Shell_do_aliases(this: *mut self::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}do_variables"]
        pub fn Chuck_Shell_do_variables(this: *mut self::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}start_code"]
        pub fn Chuck_Shell_start_code(this: *mut self::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}continue_code"]
        pub fn Chuck_Shell_continue_code(
            this: *mut self::Chuck_Shell,
            arg1: *mut self::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}string_hash"]
        pub fn Chuck_Shell_string_hash(
            this: *mut self::Chuck_Shell,
            arg1: *mut self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Shell"]
        pub fn Chuck_Shell_Chuck_Shell(this: *mut self::Chuck_Shell);
    }
    impl Default for Chuck_Shell {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Shell {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Shell {{ vms: {:?}, process_vm: {:?}, current_vm: {:?}, aliases: {:?}, variables: {:?}, commands: {:?}, allocated_commands: {:?}, saved_code: {:?}, code: {:?}, ui: {:?}, initialized: {:?}, stop: {:?}, prompt: {:?}, in: {:?}, code_entry_active: {:?}, scope: {:?} }}" , self . vms , self . process_vm , self . current_vm , self . aliases , self . variables , self . commands , self . allocated_commands , self . saved_code , self . code , self . ui , self . initialized , self . stop , self . prompt , self . in_ , self . code_entry_active , self . scope )
        }
    }
    impl Chuck_Shell {
        #[inline]
        pub unsafe fn init(
            &mut self,
            process_vm: *mut self::Chuck_VM,
            arg1: *mut self::Chuck_Shell_UI,
        ) -> c_ulong {
            Chuck_Shell_init(self, process_vm, arg1)
        }
        #[inline]
        pub unsafe fn run(&mut self) {
            Chuck_Shell_run(self)
        }
        #[inline]
        pub unsafe fn execute(
            &mut self,
            arg1: *mut self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_ulong {
            Chuck_Shell_execute(self, arg1, arg2)
        }
        #[inline]
        pub unsafe fn close(&mut self) {
            Chuck_Shell_close(self)
        }
        #[inline]
        pub unsafe fn exit(&mut self) {
            Chuck_Shell_exit(self)
        }
        #[inline]
        pub unsafe fn do_glob(
            &mut self,
            arg1: *const self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
            arg3: *mut self::std::vector,
        ) -> c_ulong {
            Chuck_Shell_do_glob(self, arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn do_code(
            &mut self,
            arg1: *mut self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
            command: self::std::__cxx11::string,
        ) {
            Chuck_Shell_do_code(self, arg1, arg2, command)
        }
        #[inline]
        pub unsafe fn do_code_context(&mut self, arg1: *mut self::std::__cxx11::string) {
            Chuck_Shell_do_code_context(self, arg1)
        }
        #[inline]
        pub unsafe fn do_aliases(&mut self) {
            Chuck_Shell_do_aliases(self)
        }
        #[inline]
        pub unsafe fn do_variables(&mut self) {
            Chuck_Shell_do_variables(self)
        }
        #[inline]
        pub unsafe fn start_code(&mut self) {
            Chuck_Shell_start_code(self)
        }
        #[inline]
        pub unsafe fn continue_code(&mut self, arg1: *mut self::std::__cxx11::string) {
            Chuck_Shell_continue_code(self, arg1)
        }
        #[inline]
        pub unsafe fn string_hash(
            &mut self,
            arg1: *mut self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
        ) {
            Chuck_Shell_string_hash(self, arg1, arg2)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Shell_Chuck_Shell(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Shell_destructor"]
        pub fn Chuck_Shell_Chuck_Shell_destructor(this: *mut self::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn Chuck_Shell_Command_init(this: *mut c_void, arg1: *mut self::Chuck_Shell)
            -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_usage(this: *mut c_void) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}long_usage"]
        pub fn Chuck_Shell_Command_long_usage(this: *mut c_void) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}Command_VM_destructor"]
        pub fn Chuck_Shell_Command_VM_Command_VM_destructor(
            this: *mut self::Chuck_Shell_Command_VM,
        );
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn Chuck_Shell_Command_VM_init(
            this: *mut c_void,
            arg1: *mut self::Chuck_Shell,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_VM_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_VM_usage(this: *mut c_void) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_VMAdd_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_VMRemove_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_VMAttach_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_VMList_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_VMSwap_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_VMAttachAdd_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Add_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_Add_usage(this: *mut c_void) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Remove_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_Remove_usage(this: *mut c_void) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Status_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_Status_usage(this: *mut c_void) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Removeall_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_Removeall_usage(this: *mut c_void)
            -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Removelast_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_Removelast_usage(
            this: *mut c_void,
        ) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Replace_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_Replace_usage(this: *mut c_void) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Kill_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Close_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Exit_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Ls_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Cd_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Pwd_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Alias_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Unalias_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Source_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}Command_Code_destructor"]
        pub fn Chuck_Shell_Command_Code_Command_Code_destructor(
            this: *mut self::Chuck_Shell_Command_Code,
        );
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn Chuck_Shell_Command_Code_init(
            this: *mut c_void,
            arg1: *mut self::Chuck_Shell,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Code_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}usage"]
        pub fn Chuck_Shell_Command_Code_usage(this: *mut c_void) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_CodeContext_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_CodeSave_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_CodeDelete_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_CodeAdd_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_CodeList_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_CodePrint_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_CodeWrite_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_CodeRead_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}execute"]
        pub fn Chuck_Shell_Command_Help_execute(
            this: *mut c_void,
            arg1: *mut self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_long;
    }
    #[repr(C)]
    pub struct Chuck_Shell_VM__bindgen_vtable(c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_VM {
        pub vtable_: *const Chuck_Shell_VM__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_VM() {
        assert_eq!(
            size_of::<Chuck_Shell_VM>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Shell_VM))
        );
        assert_eq!(
            align_of::<Chuck_Shell_VM>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_VM))
        );
    }
    impl Default for Chuck_Shell_VM {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Shell_Network_VM {
        pub _base: self::Chuck_Shell_VM,
        pub hostname: self::std::__cxx11::string,
        pub port: c_long,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Network_VM() {
        assert_eq!(
            size_of::<Chuck_Shell_Network_VM>(),
            48usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Network_VM))
        );
        assert_eq!(
            align_of::<Chuck_Shell_Network_VM>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Network_VM))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Network_VM>())).hostname as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Network_VM),
                "::",
                stringify!(hostname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell_Network_VM>())).port as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Network_VM),
                "::",
                stringify!(port)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn Chuck_Shell_Network_VM_init(
            this: *mut self::Chuck_Shell_Network_VM,
            arg1: *const self::std::__cxx11::string,
            arg2: c_long,
        ) -> c_ulong;
    }
    impl Default for Chuck_Shell_Network_VM {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Shell_Network_VM {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Shell_Network_VM {{ hostname: {:?}, port: {:?} }}",
                self.hostname, self.port
            )
        }
    }
    impl Chuck_Shell_Network_VM {
        #[inline]
        pub unsafe fn init(
            &mut self,
            arg1: *const self::std::__cxx11::string,
            arg2: c_long,
        ) -> c_ulong {
            Chuck_Shell_Network_VM_init(self, arg1, arg2)
        }
    }
    extern "C" {
        #[link_name = "\u{1}copy"]
        pub fn Chuck_Shell_Network_VM_copy(this: *mut c_void) -> *mut self::Chuck_Shell_VM;
    }
    extern "C" {
        #[link_name = "\u{1}add_shred"]
        pub fn Chuck_Shell_Network_VM_add_shred(
            this: *mut c_void,
            arg1: *const self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}remove_shred"]
        pub fn Chuck_Shell_Network_VM_remove_shred(
            this: *mut c_void,
            arg1: *const self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}remove_all"]
        pub fn Chuck_Shell_Network_VM_remove_all(
            this: *mut c_void,
            arg1: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}remove_last"]
        pub fn Chuck_Shell_Network_VM_remove_last(
            this: *mut c_void,
            arg1: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}replace_shred"]
        pub fn Chuck_Shell_Network_VM_replace_shred(
            this: *mut c_void,
            arg1: *const self::std::vector,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}status"]
        pub fn Chuck_Shell_Network_VM_status(
            this: *mut c_void,
            arg1: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}kill"]
        pub fn Chuck_Shell_Network_VM_kill(
            this: *mut c_void,
            arg1: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}fullname"]
        pub fn Chuck_Shell_Network_VM_fullname(this: *mut c_void) -> self::std::__cxx11::string;
    }
    #[repr(C)]
    pub struct Chuck_Shell_UI__bindgen_vtable(c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_UI {
        pub vtable_: *const Chuck_Shell_UI__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_UI() {
        assert_eq!(
            size_of::<Chuck_Shell_UI>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Shell_UI))
        );
        assert_eq!(
            align_of::<Chuck_Shell_UI>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_UI))
        );
    }
    impl Default for Chuck_Shell_UI {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn Chuck_Shell_UI_init(this: *mut c_void) -> c_ulong;
    }
    extern "C" {
        pub fn shell_cb(p: *mut c_void) -> *mut c_void;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct iovec {
        pub iov_base: *mut c_void,
        pub iov_len: usize,
    }
    #[test]
    fn bindgen_test_layout_iovec() {
        assert_eq!(
            size_of::<iovec>(),
            16usize,
            concat!("Size of: ", stringify!(iovec))
        );
        assert_eq!(
            align_of::<iovec>(),
            8usize,
            concat!("Alignment of ", stringify!(iovec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iovec),
                "::",
                stringify!(iov_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(iovec),
                "::",
                stringify!(iov_len)
            )
        );
    }
    impl Default for iovec {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type socklen_t = self::__socklen_t;
    pub const __socket_type_SOCK_STREAM: self::__socket_type = 1;
    pub const __socket_type_SOCK_DGRAM: self::__socket_type = 2;
    pub const __socket_type_SOCK_RAW: self::__socket_type = 3;
    pub const __socket_type_SOCK_RDM: self::__socket_type = 4;
    pub const __socket_type_SOCK_SEQPACKET: self::__socket_type = 5;
    pub const __socket_type_SOCK_DCCP: self::__socket_type = 6;
    pub const __socket_type_SOCK_PACKET: self::__socket_type = 10;
    pub const __socket_type_SOCK_CLOEXEC: self::__socket_type = 524288;
    pub const __socket_type_SOCK_NONBLOCK: self::__socket_type = 2048;
    pub type __socket_type = u32;
    pub type sa_family_t = c_ushort;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sockaddr {
        pub sa_family: self::sa_family_t,
        pub sa_data: [c_char; 14usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr() {
        assert_eq!(
            size_of::<sockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr))
        );
        assert_eq!(
            align_of::<sockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(sockaddr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr),
                "::",
                stringify!(sa_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr),
                "::",
                stringify!(sa_data)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_storage {
        pub ss_family: self::sa_family_t,
        pub __ss_padding: [c_char; 118usize],
        pub __ss_align: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_storage() {
        assert_eq!(
            size_of::<sockaddr_storage>(),
            128usize,
            concat!("Size of: ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            align_of::<sockaddr_storage>(),
            8usize,
            concat!("Alignment of ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(ss_family)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(__ss_padding)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(__ss_align)
            )
        );
    }
    impl Default for sockaddr_storage {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sockaddr_storage {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "sockaddr_storage {{ ss_family: {:?}, __ss_padding: [{}], __ss_align: {:?} }}",
                self.ss_family,
                self.__ss_padding
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>(),
                self.__ss_align
            )
        }
    }
    impl PartialEq for sockaddr_storage {
        fn eq(&self, other: &sockaddr_storage) -> bool {
            self.ss_family == other.ss_family
                && &self.__ss_padding[..] == &other.__ss_padding[..]
                && self.__ss_align == other.__ss_align
        }
    }
    pub const MSG_OOB: self::_bindgen_ty_57 = 1;
    pub const MSG_PEEK: self::_bindgen_ty_57 = 2;
    pub const MSG_DONTROUTE: self::_bindgen_ty_57 = 4;
    pub const MSG_TRYHARD: self::_bindgen_ty_57 = 4;
    pub const MSG_CTRUNC: self::_bindgen_ty_57 = 8;
    pub const MSG_PROXY: self::_bindgen_ty_57 = 16;
    pub const MSG_TRUNC: self::_bindgen_ty_57 = 32;
    pub const MSG_DONTWAIT: self::_bindgen_ty_57 = 64;
    pub const MSG_EOR: self::_bindgen_ty_57 = 128;
    pub const MSG_WAITALL: self::_bindgen_ty_57 = 256;
    pub const MSG_FIN: self::_bindgen_ty_57 = 512;
    pub const MSG_SYN: self::_bindgen_ty_57 = 1024;
    pub const MSG_CONFIRM: self::_bindgen_ty_57 = 2048;
    pub const MSG_RST: self::_bindgen_ty_57 = 4096;
    pub const MSG_ERRQUEUE: self::_bindgen_ty_57 = 8192;
    pub const MSG_NOSIGNAL: self::_bindgen_ty_57 = 16384;
    pub const MSG_MORE: self::_bindgen_ty_57 = 32768;
    pub const MSG_WAITFORONE: self::_bindgen_ty_57 = 65536;
    pub const MSG_BATCH: self::_bindgen_ty_57 = 262144;
    pub const MSG_ZEROCOPY: self::_bindgen_ty_57 = 67108864;
    pub const MSG_FASTOPEN: self::_bindgen_ty_57 = 536870912;
    pub const MSG_CMSG_CLOEXEC: self::_bindgen_ty_57 = 1073741824;
    pub type _bindgen_ty_57 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct msghdr {
        pub msg_name: *mut c_void,
        pub msg_namelen: self::socklen_t,
        pub msg_iov: *mut self::iovec,
        pub msg_iovlen: usize,
        pub msg_control: *mut c_void,
        pub msg_controllen: usize,
        pub msg_flags: c_int,
    }
    #[test]
    fn bindgen_test_layout_msghdr() {
        assert_eq!(
            size_of::<msghdr>(),
            56usize,
            concat!("Size of: ", stringify!(msghdr))
        );
        assert_eq!(
            align_of::<msghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(msghdr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_namelen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_iov)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_iovlen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_control)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_controllen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_flags)
            )
        );
    }
    impl Default for msghdr {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default)]
    pub struct cmsghdr {
        pub cmsg_len: usize,
        pub cmsg_level: c_int,
        pub cmsg_type: c_int,
        pub __cmsg_data: self::__IncompleteArrayField<c_uchar>,
    }
    #[test]
    fn bindgen_test_layout_cmsghdr() {
        assert_eq!(
            size_of::<cmsghdr>(),
            16usize,
            concat!("Size of: ", stringify!(cmsghdr))
        );
        assert_eq!(
            align_of::<cmsghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(cmsghdr))
        );
    }
    extern "C" {
        pub fn __cmsg_nxthdr(
            __mhdr: *mut self::msghdr,
            __cmsg: *mut self::cmsghdr,
        ) -> *mut self::cmsghdr;
    }
    pub const SCM_RIGHTS: self::_bindgen_ty_58 = 1;
    pub const SCM_CREDENTIALS: self::_bindgen_ty_58 = 2;
    pub type _bindgen_ty_58 = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ucred {
        pub pid: self::pid_t,
        pub uid: self::uid_t,
        pub gid: self::gid_t,
    }
    #[test]
    fn bindgen_test_layout_ucred() {
        assert_eq!(
            size_of::<ucred>(),
            12usize,
            concat!("Size of: ", stringify!(ucred))
        );
        assert_eq!(
            align_of::<ucred>(),
            4usize,
            concat!("Alignment of ", stringify!(ucred))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucred>())).pid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ucred),
                "::",
                stringify!(pid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucred>())).uid as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ucred),
                "::",
                stringify!(uid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucred>())).gid as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ucred),
                "::",
                stringify!(gid)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct linger {
        pub l_onoff: c_int,
        pub l_linger: c_int,
    }
    #[test]
    fn bindgen_test_layout_linger() {
        assert_eq!(
            size_of::<linger>(),
            8usize,
            concat!("Size of: ", stringify!(linger))
        );
        assert_eq!(
            align_of::<linger>(),
            4usize,
            concat!("Alignment of ", stringify!(linger))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(linger),
                "::",
                stringify!(l_onoff)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(linger),
                "::",
                stringify!(l_linger)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct osockaddr {
        pub sa_family: c_ushort,
        pub sa_data: [c_uchar; 14usize],
    }
    #[test]
    fn bindgen_test_layout_osockaddr() {
        assert_eq!(
            size_of::<osockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(osockaddr))
        );
        assert_eq!(
            align_of::<osockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(osockaddr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(osockaddr),
                "::",
                stringify!(sa_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(osockaddr),
                "::",
                stringify!(sa_data)
            )
        );
    }
    pub const SHUT_RD: self::_bindgen_ty_59 = 0;
    pub const SHUT_WR: self::_bindgen_ty_59 = 1;
    pub const SHUT_RDWR: self::_bindgen_ty_59 = 2;
    pub type _bindgen_ty_59 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mmsghdr {
        pub msg_hdr: self::msghdr,
        pub msg_len: c_uint,
    }
    #[test]
    fn bindgen_test_layout_mmsghdr() {
        assert_eq!(
            size_of::<mmsghdr>(),
            64usize,
            concat!("Size of: ", stringify!(mmsghdr))
        );
        assert_eq!(
            align_of::<mmsghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(mmsghdr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<mmsghdr>())).msg_hdr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmsghdr),
                "::",
                stringify!(msg_hdr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<mmsghdr>())).msg_len as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mmsghdr),
                "::",
                stringify!(msg_len)
            )
        );
    }
    impl Default for mmsghdr {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        pub fn socket(__domain: c_int, __type: c_int, __protocol: c_int) -> c_int;
    }
    extern "C" {
        pub fn socketpair(
            __domain: c_int,
            __type: c_int,
            __protocol: c_int,
            __fds: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn bind(__fd: c_int, __addr: *const self::sockaddr, __len: self::socklen_t) -> c_int;
    }
    extern "C" {
        pub fn getsockname(
            __fd: c_int,
            __addr: *mut self::sockaddr,
            __len: *mut self::socklen_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn connect(__fd: c_int, __addr: *const self::sockaddr, __len: self::socklen_t)
            -> c_int;
    }
    extern "C" {
        pub fn getpeername(
            __fd: c_int,
            __addr: *mut self::sockaddr,
            __len: *mut self::socklen_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn send(__fd: c_int, __buf: *const c_void, __n: usize, __flags: c_int) -> isize;
    }
    extern "C" {
        pub fn recv(__fd: c_int, __buf: *mut c_void, __n: usize, __flags: c_int) -> isize;
    }
    extern "C" {
        pub fn sendto(
            __fd: c_int,
            __buf: *const c_void,
            __n: usize,
            __flags: c_int,
            __addr: *const self::sockaddr,
            __addr_len: self::socklen_t,
        ) -> isize;
    }
    extern "C" {
        pub fn recvfrom(
            __fd: c_int,
            __buf: *mut c_void,
            __n: usize,
            __flags: c_int,
            __addr: *mut self::sockaddr,
            __addr_len: *mut self::socklen_t,
        ) -> isize;
    }
    extern "C" {
        pub fn sendmsg(__fd: c_int, __message: *const self::msghdr, __flags: c_int) -> isize;
    }
    extern "C" {
        pub fn sendmmsg(
            __fd: c_int,
            __vmessages: *mut self::mmsghdr,
            __vlen: c_uint,
            __flags: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn recvmsg(__fd: c_int, __message: *mut self::msghdr, __flags: c_int) -> isize;
    }
    extern "C" {
        pub fn recvmmsg(
            __fd: c_int,
            __vmessages: *mut self::mmsghdr,
            __vlen: c_uint,
            __flags: c_int,
            __tmo: *mut self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn getsockopt(
            __fd: c_int,
            __level: c_int,
            __optname: c_int,
            __optval: *mut c_void,
            __optlen: *mut self::socklen_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn setsockopt(
            __fd: c_int,
            __level: c_int,
            __optname: c_int,
            __optval: *const c_void,
            __optlen: self::socklen_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn listen(__fd: c_int, __n: c_int) -> c_int;
    }
    extern "C" {
        pub fn accept(
            __fd: c_int,
            __addr: *mut self::sockaddr,
            __addr_len: *mut self::socklen_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn accept4(
            __fd: c_int,
            __addr: *mut self::sockaddr,
            __addr_len: *mut self::socklen_t,
            __flags: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn shutdown(__fd: c_int, __how: c_int) -> c_int;
    }
    extern "C" {
        pub fn sockatmark(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn isfdtype(__fd: c_int, __fdtype: c_int) -> c_int;
    }
    pub type in_addr_t = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_addr {
        pub s_addr: self::in_addr_t,
    }
    #[test]
    fn bindgen_test_layout_in_addr() {
        assert_eq!(
            size_of::<in_addr>(),
            4usize,
            concat!("Size of: ", stringify!(in_addr))
        );
        assert_eq!(
            align_of::<in_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(in_addr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in_addr),
                "::",
                stringify!(s_addr)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ip_opts {
        pub ip_dst: self::in_addr,
        pub ip_opts: [c_char; 40usize],
    }
    #[test]
    fn bindgen_test_layout_ip_opts() {
        assert_eq!(
            size_of::<ip_opts>(),
            44usize,
            concat!("Size of: ", stringify!(ip_opts))
        );
        assert_eq!(
            align_of::<ip_opts>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_opts))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_opts),
                "::",
                stringify!(ip_dst)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_opts),
                "::",
                stringify!(ip_opts)
            )
        );
    }
    impl Default for ip_opts {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for ip_opts {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ip_opts {{ ip_dst: {:?}, ip_opts: [{}] }}",
                self.ip_dst,
                self.ip_opts
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>()
            )
        }
    }
    impl PartialEq for ip_opts {
        fn eq(&self, other: &ip_opts) -> bool {
            self.ip_dst == other.ip_dst && &self.ip_opts[..] == &other.ip_opts[..]
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ip_mreqn {
        pub imr_multiaddr: self::in_addr,
        pub imr_address: self::in_addr,
        pub imr_ifindex: c_int,
    }
    #[test]
    fn bindgen_test_layout_ip_mreqn() {
        assert_eq!(
            size_of::<ip_mreqn>(),
            12usize,
            concat!("Size of: ", stringify!(ip_mreqn))
        );
        assert_eq!(
            align_of::<ip_mreqn>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_mreqn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreqn),
                "::",
                stringify!(imr_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreqn),
                "::",
                stringify!(imr_address)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreqn),
                "::",
                stringify!(imr_ifindex)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_pktinfo {
        pub ipi_ifindex: c_int,
        pub ipi_spec_dst: self::in_addr,
        pub ipi_addr: self::in_addr,
    }
    #[test]
    fn bindgen_test_layout_in_pktinfo() {
        assert_eq!(
            size_of::<in_pktinfo>(),
            12usize,
            concat!("Size of: ", stringify!(in_pktinfo))
        );
        assert_eq!(
            align_of::<in_pktinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(in_pktinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in_pktinfo),
                "::",
                stringify!(ipi_ifindex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(in_pktinfo),
                "::",
                stringify!(ipi_spec_dst)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(in_pktinfo),
                "::",
                stringify!(ipi_addr)
            )
        );
    }
    pub const IPPROTO_IP: self::_bindgen_ty_60 = 0;
    pub const IPPROTO_ICMP: self::_bindgen_ty_60 = 1;
    pub const IPPROTO_IGMP: self::_bindgen_ty_60 = 2;
    pub const IPPROTO_IPIP: self::_bindgen_ty_60 = 4;
    pub const IPPROTO_TCP: self::_bindgen_ty_60 = 6;
    pub const IPPROTO_EGP: self::_bindgen_ty_60 = 8;
    pub const IPPROTO_PUP: self::_bindgen_ty_60 = 12;
    pub const IPPROTO_UDP: self::_bindgen_ty_60 = 17;
    pub const IPPROTO_IDP: self::_bindgen_ty_60 = 22;
    pub const IPPROTO_TP: self::_bindgen_ty_60 = 29;
    pub const IPPROTO_DCCP: self::_bindgen_ty_60 = 33;
    pub const IPPROTO_IPV6: self::_bindgen_ty_60 = 41;
    pub const IPPROTO_RSVP: self::_bindgen_ty_60 = 46;
    pub const IPPROTO_GRE: self::_bindgen_ty_60 = 47;
    pub const IPPROTO_ESP: self::_bindgen_ty_60 = 50;
    pub const IPPROTO_AH: self::_bindgen_ty_60 = 51;
    pub const IPPROTO_MTP: self::_bindgen_ty_60 = 92;
    pub const IPPROTO_BEETPH: self::_bindgen_ty_60 = 94;
    pub const IPPROTO_ENCAP: self::_bindgen_ty_60 = 98;
    pub const IPPROTO_PIM: self::_bindgen_ty_60 = 103;
    pub const IPPROTO_COMP: self::_bindgen_ty_60 = 108;
    pub const IPPROTO_SCTP: self::_bindgen_ty_60 = 132;
    pub const IPPROTO_UDPLITE: self::_bindgen_ty_60 = 136;
    pub const IPPROTO_MPLS: self::_bindgen_ty_60 = 137;
    pub const IPPROTO_RAW: self::_bindgen_ty_60 = 255;
    pub const IPPROTO_MAX: self::_bindgen_ty_60 = 256;
    pub type _bindgen_ty_60 = u32;
    pub const IPPROTO_HOPOPTS: self::_bindgen_ty_61 = 0;
    pub const IPPROTO_ROUTING: self::_bindgen_ty_61 = 43;
    pub const IPPROTO_FRAGMENT: self::_bindgen_ty_61 = 44;
    pub const IPPROTO_ICMPV6: self::_bindgen_ty_61 = 58;
    pub const IPPROTO_NONE: self::_bindgen_ty_61 = 59;
    pub const IPPROTO_DSTOPTS: self::_bindgen_ty_61 = 60;
    pub const IPPROTO_MH: self::_bindgen_ty_61 = 135;
    pub type _bindgen_ty_61 = u32;
    pub type in_port_t = u16;
    pub const IPPORT_ECHO: self::_bindgen_ty_62 = 7;
    pub const IPPORT_DISCARD: self::_bindgen_ty_62 = 9;
    pub const IPPORT_SYSTAT: self::_bindgen_ty_62 = 11;
    pub const IPPORT_DAYTIME: self::_bindgen_ty_62 = 13;
    pub const IPPORT_NETSTAT: self::_bindgen_ty_62 = 15;
    pub const IPPORT_FTP: self::_bindgen_ty_62 = 21;
    pub const IPPORT_TELNET: self::_bindgen_ty_62 = 23;
    pub const IPPORT_SMTP: self::_bindgen_ty_62 = 25;
    pub const IPPORT_TIMESERVER: self::_bindgen_ty_62 = 37;
    pub const IPPORT_NAMESERVER: self::_bindgen_ty_62 = 42;
    pub const IPPORT_WHOIS: self::_bindgen_ty_62 = 43;
    pub const IPPORT_MTP: self::_bindgen_ty_62 = 57;
    pub const IPPORT_TFTP: self::_bindgen_ty_62 = 69;
    pub const IPPORT_RJE: self::_bindgen_ty_62 = 77;
    pub const IPPORT_FINGER: self::_bindgen_ty_62 = 79;
    pub const IPPORT_TTYLINK: self::_bindgen_ty_62 = 87;
    pub const IPPORT_SUPDUP: self::_bindgen_ty_62 = 95;
    pub const IPPORT_EXECSERVER: self::_bindgen_ty_62 = 512;
    pub const IPPORT_LOGINSERVER: self::_bindgen_ty_62 = 513;
    pub const IPPORT_CMDSERVER: self::_bindgen_ty_62 = 514;
    pub const IPPORT_EFSSERVER: self::_bindgen_ty_62 = 520;
    pub const IPPORT_BIFFUDP: self::_bindgen_ty_62 = 512;
    pub const IPPORT_WHOSERVER: self::_bindgen_ty_62 = 513;
    pub const IPPORT_ROUTESERVER: self::_bindgen_ty_62 = 520;
    pub const IPPORT_RESERVED: self::_bindgen_ty_62 = 1024;
    pub const IPPORT_USERRESERVED: self::_bindgen_ty_62 = 5000;
    pub type _bindgen_ty_62 = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct in6_addr {
        pub __in6_u: self::in6_addr__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union in6_addr__bindgen_ty_1 {
        pub __u6_addr8: [u8; 16usize],
        pub __u6_addr16: [u16; 8usize],
        pub __u6_addr32: [u32; 4usize],
        _bindgen_union_align: [u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
        assert_eq!(
            size_of::<in6_addr__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<in6_addr__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr8)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr16)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr32)
            )
        );
    }
    impl Default for in6_addr__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_addr__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "in6_addr__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_in6_addr() {
        assert_eq!(
            size_of::<in6_addr>(),
            16usize,
            concat!("Size of: ", stringify!(in6_addr))
        );
        assert_eq!(
            align_of::<in6_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_addr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr),
                "::",
                stringify!(__in6_u)
            )
        );
    }
    impl Default for in6_addr {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_addr {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "in6_addr {{ __in6_u: {:?} }}", self.__in6_u)
        }
    }
    extern "C" {
        pub static in6addr_any: self::in6_addr;
    }
    extern "C" {
        pub static in6addr_loopback: self::in6_addr;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sockaddr_in {
        pub sin_family: self::sa_family_t,
        pub sin_port: self::in_port_t,
        pub sin_addr: self::in_addr,
        pub sin_zero: [c_uchar; 8usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr_in() {
        assert_eq!(
            size_of::<sockaddr_in>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr_in))
        );
        assert_eq!(
            align_of::<sockaddr_in>(),
            4usize,
            concat!("Alignment of ", stringify!(sockaddr_in))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_zero)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_in6 {
        pub sin6_family: self::sa_family_t,
        pub sin6_port: self::in_port_t,
        pub sin6_flowinfo: u32,
        pub sin6_addr: self::in6_addr,
        pub sin6_scope_id: u32,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_in6() {
        assert_eq!(
            size_of::<sockaddr_in6>(),
            28usize,
            concat!("Size of: ", stringify!(sockaddr_in6))
        );
        assert_eq!(
            align_of::<sockaddr_in6>(),
            4usize,
            concat!("Alignment of ", stringify!(sockaddr_in6))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_flowinfo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_scope_id)
            )
        );
    }
    impl Default for sockaddr_in6 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sockaddr_in6 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "sockaddr_in6 {{ sin6_family: {:?}, sin6_port: {:?}, sin6_flowinfo: {:?}, sin6_addr: {:?}, sin6_scope_id: {:?} }}" , self . sin6_family , self . sin6_port , self . sin6_flowinfo , self . sin6_addr , self . sin6_scope_id )
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ip_mreq {
        pub imr_multiaddr: self::in_addr,
        pub imr_interface: self::in_addr,
    }
    #[test]
    fn bindgen_test_layout_ip_mreq() {
        assert_eq!(
            size_of::<ip_mreq>(),
            8usize,
            concat!("Size of: ", stringify!(ip_mreq))
        );
        assert_eq!(
            align_of::<ip_mreq>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_mreq))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq),
                "::",
                stringify!(imr_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq),
                "::",
                stringify!(imr_interface)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ip_mreq_source {
        pub imr_multiaddr: self::in_addr,
        pub imr_interface: self::in_addr,
        pub imr_sourceaddr: self::in_addr,
    }
    #[test]
    fn bindgen_test_layout_ip_mreq_source() {
        assert_eq!(
            size_of::<ip_mreq_source>(),
            12usize,
            concat!("Size of: ", stringify!(ip_mreq_source))
        );
        assert_eq!(
            align_of::<ip_mreq_source>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_mreq_source))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq_source),
                "::",
                stringify!(imr_multiaddr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq_source),
                "::",
                stringify!(imr_interface)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq_source),
                "::",
                stringify!(imr_sourceaddr)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ipv6_mreq {
        pub ipv6mr_multiaddr: self::in6_addr,
        pub ipv6mr_interface: c_uint,
    }
    #[test]
    fn bindgen_test_layout_ipv6_mreq() {
        assert_eq!(
            size_of::<ipv6_mreq>(),
            20usize,
            concat!("Size of: ", stringify!(ipv6_mreq))
        );
        assert_eq!(
            align_of::<ipv6_mreq>(),
            4usize,
            concat!("Alignment of ", stringify!(ipv6_mreq))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ipv6_mreq),
                "::",
                stringify!(ipv6mr_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ipv6_mreq),
                "::",
                stringify!(ipv6mr_interface)
            )
        );
    }
    impl Default for ipv6_mreq {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for ipv6_mreq {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ipv6_mreq {{ ipv6mr_multiaddr: {:?}, ipv6mr_interface: {:?} }}",
                self.ipv6mr_multiaddr, self.ipv6mr_interface
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct group_req {
        pub gr_interface: u32,
        pub gr_group: self::sockaddr_storage,
    }
    #[test]
    fn bindgen_test_layout_group_req() {
        assert_eq!(
            size_of::<group_req>(),
            136usize,
            concat!("Size of: ", stringify!(group_req))
        );
        assert_eq!(
            align_of::<group_req>(),
            8usize,
            concat!("Alignment of ", stringify!(group_req))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(group_req),
                "::",
                stringify!(gr_interface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(group_req),
                "::",
                stringify!(gr_group)
            )
        );
    }
    impl Default for group_req {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for group_req {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "group_req {{ gr_interface: {:?}, gr_group: {:?} }}",
                self.gr_interface, self.gr_group
            )
        }
    }
    impl PartialEq for group_req {
        fn eq(&self, other: &group_req) -> bool {
            self.gr_interface == other.gr_interface && self.gr_group == other.gr_group
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct group_source_req {
        pub gsr_interface: u32,
        pub gsr_group: self::sockaddr_storage,
        pub gsr_source: self::sockaddr_storage,
    }
    #[test]
    fn bindgen_test_layout_group_source_req() {
        assert_eq!(
            size_of::<group_source_req>(),
            264usize,
            concat!("Size of: ", stringify!(group_source_req))
        );
        assert_eq!(
            align_of::<group_source_req>(),
            8usize,
            concat!("Alignment of ", stringify!(group_source_req))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(group_source_req),
                "::",
                stringify!(gsr_interface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(group_source_req),
                "::",
                stringify!(gsr_group)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(group_source_req),
                "::",
                stringify!(gsr_source)
            )
        );
    }
    impl Default for group_source_req {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for group_source_req {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "group_source_req {{ gsr_interface: {:?}, gsr_group: {:?}, gsr_source: {:?} }}",
                self.gsr_interface, self.gsr_group, self.gsr_source
            )
        }
    }
    impl PartialEq for group_source_req {
        fn eq(&self, other: &group_source_req) -> bool {
            self.gsr_interface == other.gsr_interface
                && self.gsr_group == other.gsr_group
                && self.gsr_source == other.gsr_source
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ip_msfilter {
        pub imsf_multiaddr: self::in_addr,
        pub imsf_interface: self::in_addr,
        pub imsf_fmode: u32,
        pub imsf_numsrc: u32,
        pub imsf_slist: [self::in_addr; 1usize],
    }
    #[test]
    fn bindgen_test_layout_ip_msfilter() {
        assert_eq!(
            size_of::<ip_msfilter>(),
            20usize,
            concat!("Size of: ", stringify!(ip_msfilter))
        );
        assert_eq!(
            align_of::<ip_msfilter>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_msfilter))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_interface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_fmode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_numsrc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_slist)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct group_filter {
        pub gf_interface: u32,
        pub gf_group: self::sockaddr_storage,
        pub gf_fmode: u32,
        pub gf_numsrc: u32,
        pub gf_slist: [self::sockaddr_storage; 1usize],
    }
    #[test]
    fn bindgen_test_layout_group_filter() {
        assert_eq!(
            size_of::<group_filter>(),
            272usize,
            concat!("Size of: ", stringify!(group_filter))
        );
        assert_eq!(
            align_of::<group_filter>(),
            8usize,
            concat!("Alignment of ", stringify!(group_filter))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_interface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_group)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_fmode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_numsrc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_slist)
            )
        );
    }
    impl Default for group_filter {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for group_filter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "group_filter {{ gf_interface: {:?}, gf_group: {:?}, gf_fmode: {:?}, gf_numsrc: {:?}, gf_slist: {:?} }}" , self . gf_interface , self . gf_group , self . gf_fmode , self . gf_numsrc , self . gf_slist )
        }
    }
    extern "C" {
        pub fn ntohl(__netlong: u32) -> u32;
    }
    extern "C" {
        pub fn ntohs(__netshort: u16) -> u16;
    }
    extern "C" {
        pub fn htonl(__hostlong: u32) -> u32;
    }
    extern "C" {
        pub fn htons(__hostshort: u16) -> u16;
    }
    extern "C" {
        pub fn bindresvport(__sockfd: c_int, __sock_in: *mut self::sockaddr_in) -> c_int;
    }
    extern "C" {
        pub fn bindresvport6(__sockfd: c_int, __sock_in: *mut self::sockaddr_in6) -> c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct in6_pktinfo {
        pub ipi6_addr: self::in6_addr,
        pub ipi6_ifindex: c_uint,
    }
    #[test]
    fn bindgen_test_layout_in6_pktinfo() {
        assert_eq!(
            size_of::<in6_pktinfo>(),
            20usize,
            concat!("Size of: ", stringify!(in6_pktinfo))
        );
        assert_eq!(
            align_of::<in6_pktinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_pktinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in6_pktinfo>())).ipi6_addr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_pktinfo),
                "::",
                stringify!(ipi6_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in6_pktinfo>())).ipi6_ifindex as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_pktinfo),
                "::",
                stringify!(ipi6_ifindex)
            )
        );
    }
    impl Default for in6_pktinfo {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_pktinfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "in6_pktinfo {{ ipi6_addr: {:?}, ipi6_ifindex: {:?} }}",
                self.ipi6_addr, self.ipi6_ifindex
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ip6_mtuinfo {
        pub ip6m_addr: self::sockaddr_in6,
        pub ip6m_mtu: u32,
    }
    #[test]
    fn bindgen_test_layout_ip6_mtuinfo() {
        assert_eq!(
            size_of::<ip6_mtuinfo>(),
            32usize,
            concat!("Size of: ", stringify!(ip6_mtuinfo))
        );
        assert_eq!(
            align_of::<ip6_mtuinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(ip6_mtuinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip6_mtuinfo>())).ip6m_addr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip6_mtuinfo),
                "::",
                stringify!(ip6m_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip6_mtuinfo>())).ip6m_mtu as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ip6_mtuinfo),
                "::",
                stringify!(ip6m_mtu)
            )
        );
    }
    impl Default for ip6_mtuinfo {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for ip6_mtuinfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ip6_mtuinfo {{ ip6m_addr: {:?}, ip6m_mtu: {:?} }}",
                self.ip6m_addr, self.ip6m_mtu
            )
        }
    }
    extern "C" {
        pub fn inet6_option_space(__nbytes: c_int) -> c_int;
    }
    extern "C" {
        pub fn inet6_option_init(
            __bp: *mut c_void,
            __cmsgp: *mut *mut self::cmsghdr,
            __type: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_option_append(
            __cmsg: *mut self::cmsghdr,
            __typep: *const u8,
            __multx: c_int,
            __plusy: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_option_alloc(
            __cmsg: *mut self::cmsghdr,
            __datalen: c_int,
            __multx: c_int,
            __plusy: c_int,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn inet6_option_next(__cmsg: *const self::cmsghdr, __tptrp: *mut *mut u8) -> c_int;
    }
    extern "C" {
        pub fn inet6_option_find(
            __cmsg: *const self::cmsghdr,
            __tptrp: *mut *mut u8,
            __type: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_opt_init(__extbuf: *mut c_void, __extlen: self::socklen_t) -> c_int;
    }
    extern "C" {
        pub fn inet6_opt_append(
            __extbuf: *mut c_void,
            __extlen: self::socklen_t,
            __offset: c_int,
            __type: u8,
            __len: self::socklen_t,
            __align: u8,
            __databufp: *mut *mut c_void,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_opt_finish(
            __extbuf: *mut c_void,
            __extlen: self::socklen_t,
            __offset: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_opt_set_val(
            __databuf: *mut c_void,
            __offset: c_int,
            __val: *mut c_void,
            __vallen: self::socklen_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_opt_next(
            __extbuf: *mut c_void,
            __extlen: self::socklen_t,
            __offset: c_int,
            __typep: *mut u8,
            __lenp: *mut self::socklen_t,
            __databufp: *mut *mut c_void,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_opt_find(
            __extbuf: *mut c_void,
            __extlen: self::socklen_t,
            __offset: c_int,
            __type: u8,
            __lenp: *mut self::socklen_t,
            __databufp: *mut *mut c_void,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_opt_get_val(
            __databuf: *mut c_void,
            __offset: c_int,
            __val: *mut c_void,
            __vallen: self::socklen_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn inet6_rth_space(__type: c_int, __segments: c_int) -> self::socklen_t;
    }
    extern "C" {
        pub fn inet6_rth_init(
            __bp: *mut c_void,
            __bp_len: self::socklen_t,
            __type: c_int,
            __segments: c_int,
        ) -> *mut c_void;
    }
    extern "C" {
        pub fn inet6_rth_add(__bp: *mut c_void, __addr: *const self::in6_addr) -> c_int;
    }
    extern "C" {
        pub fn inet6_rth_reverse(__in: *const c_void, __out: *mut c_void) -> c_int;
    }
    extern "C" {
        pub fn inet6_rth_segments(__bp: *const c_void) -> c_int;
    }
    extern "C" {
        pub fn inet6_rth_getaddr(__bp: *const c_void, __index: c_int) -> *mut self::in6_addr;
    }
    extern "C" {
        pub fn getipv4sourcefilter(
            __s: c_int,
            __interface_addr: self::in_addr,
            __group: self::in_addr,
            __fmode: *mut u32,
            __numsrc: *mut u32,
            __slist: *mut self::in_addr,
        ) -> c_int;
    }
    extern "C" {
        pub fn setipv4sourcefilter(
            __s: c_int,
            __interface_addr: self::in_addr,
            __group: self::in_addr,
            __fmode: u32,
            __numsrc: u32,
            __slist: *const self::in_addr,
        ) -> c_int;
    }
    extern "C" {
        pub fn getsourcefilter(
            __s: c_int,
            __interface_addr: u32,
            __group: *const self::sockaddr,
            __grouplen: self::socklen_t,
            __fmode: *mut u32,
            __numsrc: *mut u32,
            __slist: *mut self::sockaddr_storage,
        ) -> c_int;
    }
    extern "C" {
        pub fn setsourcefilter(
            __s: c_int,
            __interface_addr: u32,
            __group: *const self::sockaddr,
            __grouplen: self::socklen_t,
            __fmode: u32,
            __numsrc: u32,
            __slist: *const self::sockaddr_storage,
        ) -> c_int;
    }
    extern "C" {
        pub fn ck_udp_create() -> self::ck_socket;
    }
    extern "C" {
        pub fn ck_tcp_create(flags: c_int) -> self::ck_socket;
    }
    extern "C" {
        pub fn ck_connect(sock: self::ck_socket, hostname: *const c_char, port: c_int) -> c_ulong;
    }
    extern "C" {
        pub fn ck_connect2(
            sock: self::ck_socket,
            serv_addr: *const self::sockaddr,
            addrlen: c_int,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn ck_bind(sock: self::ck_socket, port: c_int) -> c_ulong;
    }
    extern "C" {
        pub fn ck_listen(sock: self::ck_socket, backlog: c_int) -> c_ulong;
    }
    extern "C" {
        pub fn ck_accept(sock: self::ck_socket) -> self::ck_socket;
    }
    extern "C" {
        pub fn ck_send(sock: self::ck_socket, buffer: *const c_char, len: c_int) -> c_int;
    }
    extern "C" {
        pub fn ck_send2(sock: self::ck_socket, buffer: *const c_char, len: c_int) -> c_int;
    }
    extern "C" {
        pub fn ck_sendto(
            sock: self::ck_socket,
            buffer: *const c_char,
            len: c_int,
            to: *const self::sockaddr,
            tolen: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn ck_recv(sock: self::ck_socket, buffer: *mut c_char, len: c_int) -> c_int;
    }
    extern "C" {
        pub fn ck_recv2(sock: self::ck_socket, buffer: *mut c_char, len: c_int) -> c_int;
    }
    extern "C" {
        pub fn ck_recvfrom(
            sock: self::ck_socket,
            buffer: *mut c_char,
            len: c_int,
            from: *mut self::sockaddr,
            fromlen: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn ck_send_timeout(sock: self::ck_socket, sec: c_long, usec: c_long) -> c_int;
    }
    extern "C" {
        pub fn ck_recv_timeout(sock: self::ck_socket, sec: c_long, usec: c_long) -> c_int;
    }
    extern "C" {
        pub fn ck_close(sock: self::ck_socket);
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct Net_Msg {
        pub header: c_ulong,
        pub type_: c_ulong,
        pub param: c_ulong,
        pub param2: c_ulong,
        pub param3: c_ulong,
        pub length: c_ulong,
        pub buffer: [c_char; 512usize],
    }
    #[test]
    fn bindgen_test_layout_Net_Msg() {
        assert_eq!(
            size_of::<Net_Msg>(),
            560usize,
            concat!("Size of: ", stringify!(Net_Msg))
        );
        assert_eq!(
            align_of::<Net_Msg>(),
            8usize,
            concat!("Alignment of ", stringify!(Net_Msg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).header as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(header)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).type_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).param as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(param)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).param2 as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(param2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).param3 as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(param3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).length as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(length)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).buffer as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(buffer)
            )
        );
    }
    impl Default for Net_Msg {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for Net_Msg {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Net_Msg {{ header: {:?}, type: {:?}, param: {:?}, param2: {:?}, param3: {:?}, length: {:?}, buffer: [{}] }}" , self . header , self . type_ , self . param , self . param2 , self . param3 , self . length , self . buffer . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
        }
    }
    impl PartialEq for Net_Msg {
        fn eq(&self, other: &Net_Msg) -> bool {
            self.header == other.header
                && self.type_ == other.type_
                && self.param == other.param
                && self.param2 == other.param2
                && self.param3 == other.param3
                && self.length == other.length
                && &self.buffer[..] == &other.buffer[..]
        }
    }
    extern "C" {
        pub fn otf_hton(msg: *mut self::Net_Msg);
    }
    extern "C" {
        pub fn otf_ntoh(msg: *mut self::Net_Msg);
    }
    extern "C" {
        pub fn otf_process_msg(
            vm: *mut self::Chuck_VM,
            compiler: *mut self::Chuck_Compiler,
            msg: *mut self::Net_Msg,
            immediate: c_ulong,
            data: *mut c_void,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn otf_send_cmd(
            argc: c_int,
            argv: *mut *const c_char,
            i: *mut c_long,
            host: *const c_char,
            port: c_int,
            is_otf: *mut c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn otf_send_file(
            filename: *const c_char,
            msg: *mut self::Net_Msg,
            op: *const c_char,
            sock: self::ck_socket,
        ) -> c_int;
    }
    extern "C" {
        pub fn otf_send_connect(host: *const c_char, port: c_int) -> self::ck_socket;
    }
    extern "C" {
        pub fn otf_cb(p: *mut c_void) -> *mut c_void;
    }
    extern "C" {
        pub fn uh();
    }
    extern "C" {
        pub static mut poop: [*const c_char; 0usize];
    }
    extern "C" {
        pub static mut poop_size: c_long;
    }
    extern "C" {
        pub static mut g_otf_log: c_ulong;
    }
    extern "C" {
        pub fn machine_query(QUERY: *mut self::Chuck_DL_Query) -> c_ulong;
    }
    pub type proc_msg_func = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut self::Chuck_VM,
            arg2: *mut self::Chuck_Compiler,
            arg3: *mut self::Net_Msg,
            arg4: c_ulong,
            arg5: *mut c_void,
        ) -> c_ulong,
    >;
    extern "C" {
        pub fn machine_init(
            compiler: *mut self::Chuck_Compiler,
            func: self::proc_msg_func,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn machine_intsize() -> c_ulong;
    }
    extern "C" {
        pub fn machine_crash_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_add_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_spork_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_remove_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_replace_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_status_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_intsize_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_shreds_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn libmath_query(QUERY: *mut self::Chuck_DL_Query) -> c_ulong;
    }
    extern "C" {
        pub fn sin_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn cos_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn tan_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn cot_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn asin_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn acos_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn atan_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn atan2_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn sinh_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn cosh_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn tanh_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn hypot_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn pow_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn sqrt_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn exp_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn log_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn log2_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn log10_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn floor_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn ceil_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn round_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn trunc_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn fmod_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn remainder_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn min_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn max_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn isinf_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn isnan_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn floatMax_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn intMax_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn nextpow2_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn ensurepow2_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn re_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn im_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn modulus_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn phase_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn rtop_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn ptor_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn random_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn randomf_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn random2f_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn random2_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn srandom_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn gauss_impl(
            ARGS: *mut c_void,
            RETURN: *mut self::Chuck_DL_Return,
            VM: *mut self::Chuck_VM,
            SHRED: *mut self::Chuck_VM_Shred,
            API: self::CK_DL_API,
        );
    }
    extern "C" {
        pub fn itoa(val: c_long) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn ftoa(val: f64, precision: c_ulong) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn trim(val: *const self::std::__cxx11::string) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn ltrim(val: *const self::std::__cxx11::string) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn rtrim(val: *const self::std::__cxx11::string) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn extract_args(
            token: *const self::std::__cxx11::string,
            filename: *mut self::std::__cxx11::string,
            args: *mut self::std::vector,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn dir_go_up(
            dir: *const self::std::__cxx11::string,
            numUp: c_long,
        ) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn get_full_path(fp: *const self::std::__cxx11::string) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn expand_filepath(fp: *mut self::std::__cxx11::string) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn extract_filepath_dir(
            filepath: *mut self::std::__cxx11::string,
        ) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn normalize_directory_separator(
            filepath: *const self::std::__cxx11::string,
        ) -> self::std::__cxx11::string;
    }
    extern "C" {
        pub fn str_endsin(str: *const c_char, end: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn parse_path_list(
            str: *mut self::std::__cxx11::string,
            lst: *mut self::std::__cxx11::list,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct HidMsg {
        pub device_type: c_long,
        pub device_num: c_long,
        pub type_: c_long,
        pub eid: c_long,
        pub idata: [c_long; 4usize],
        pub fdata: [f64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_HidMsg() {
        assert_eq!(
            size_of::<HidMsg>(),
            96usize,
            concat!("Size of: ", stringify!(HidMsg))
        );
        assert_eq!(
            align_of::<HidMsg>(),
            8usize,
            concat!("Alignment of ", stringify!(HidMsg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).device_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(device_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).device_num as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).type_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).eid as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(eid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).idata as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(idata)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).fdata as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(fdata)
            )
        );
    }
    extern "C" {
        pub static CK_HID_DEV_NONE: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEV_JOYSTICK: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEV_MOUSE: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEV_KEYBOARD: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEV_WIIREMOTE: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEV_TILTSENSOR: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEV_TABLET: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEV_MULTITOUCH: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEV_COUNT: c_ulong;
    }
    extern "C" {
        pub static CK_HID_JOYSTICK_AXIS: c_ulong;
    }
    extern "C" {
        pub static CK_HID_BUTTON_DOWN: c_ulong;
    }
    extern "C" {
        pub static CK_HID_BUTTON_UP: c_ulong;
    }
    extern "C" {
        pub static CK_HID_JOYSTICK_HAT: c_ulong;
    }
    extern "C" {
        pub static CK_HID_JOYSTICK_BALL: c_ulong;
    }
    extern "C" {
        pub static CK_HID_MOUSE_MOTION: c_ulong;
    }
    extern "C" {
        pub static CK_HID_MOUSE_WHEEL: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEVICE_CONNECTED: c_ulong;
    }
    extern "C" {
        pub static CK_HID_DEVICE_DISCONNECTED: c_ulong;
    }
    extern "C" {
        pub static CK_HID_ACCELEROMETER: c_ulong;
    }
    extern "C" {
        pub static CK_HID_WIIREMOTE_IR: c_ulong;
    }
    extern "C" {
        pub static CK_HID_LED: c_ulong;
    }
    extern "C" {
        pub static CK_HID_FORCE_FEEDBACK: c_ulong;
    }
    extern "C" {
        pub static CK_HID_SPEAKER: c_ulong;
    }
    extern "C" {
        pub static CK_HID_TABLET_PRESSURE: c_ulong;
    }
    extern "C" {
        pub static CK_HID_TABLET_MOTION: c_ulong;
    }
    extern "C" {
        pub static CK_HID_TABLET_ROTATION: c_ulong;
    }
    extern "C" {
        pub static CK_HID_MULTITOUCH_TOUCH: c_ulong;
    }
    extern "C" {
        pub static CK_HID_MSG_COUNT: c_ulong;
    }
    pub const HidResult_HID_GENERALERROR: self::HidResult = -1;
    pub const HidResult_HID_NOERROR: self::HidResult = 0;
    pub type HidResult = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Chuck_Hid_Driver {
        pub init: ::std::option::Option<unsafe extern "C" fn()>,
        pub quit: ::std::option::Option<unsafe extern "C" fn()>,
        pub poll: ::std::option::Option<unsafe extern "C" fn()>,
        pub probe: ::std::option::Option<unsafe extern "C" fn()>,
        pub count: ::std::option::Option<unsafe extern "C" fn() -> c_int>,
        pub count_elements:
            ::std::option::Option<unsafe extern "C" fn(arg1: c_int, arg2: c_int) -> c_int>,
        pub open: ::std::option::Option<unsafe extern "C" fn(arg1: c_int) -> c_int>,
        pub open_async: ::std::option::Option<unsafe extern "C" fn(arg1: c_int) -> c_int>,
        pub close: ::std::option::Option<unsafe extern "C" fn(arg1: c_int) -> c_int>,
        pub send: ::std::option::Option<
            unsafe extern "C" fn(arg1: c_int, arg2: *const self::HidMsg) -> c_int,
        >,
        pub read: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: c_int,
                arg2: c_int,
                arg3: c_int,
                arg4: *mut self::HidMsg,
            ) -> c_int,
        >,
        pub name: ::std::option::Option<unsafe extern "C" fn(arg1: c_int) -> *const c_char>,
        pub driver_name: *const c_char,
    }
    #[test]
    fn bindgen_test_layout__Chuck_Hid_Driver() {
        assert_eq!(
            size_of::<_Chuck_Hid_Driver>(),
            104usize,
            concat!("Size of: ", stringify!(_Chuck_Hid_Driver))
        );
        assert_eq!(
            align_of::<_Chuck_Hid_Driver>(),
            8usize,
            concat!("Alignment of ", stringify!(_Chuck_Hid_Driver))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).init as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(init)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).quit as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(quit)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).poll as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(poll)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).probe as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(probe)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).count as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(count)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).count_elements as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(count_elements)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).open as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(open)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).open_async as *const _ as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(open_async)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).close as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(close)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).send as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(send)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).read as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(read)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).name as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).driver_name as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(driver_name)
            )
        );
    }
    impl Default for _Chuck_Hid_Driver {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type Chuck_Hid_Driver = self::_Chuck_Hid_Driver;
    extern "C" {
        pub fn Hid_init();
    }
    extern "C" {
        pub fn Hid_poll();
    }
    extern "C" {
        pub fn Hid_quit();
    }
    extern "C" {
        pub fn Joystick_init();
    }
    extern "C" {
        pub fn Joystick_poll();
    }
    extern "C" {
        pub fn Joystick_quit();
    }
    extern "C" {
        pub fn Joystick_probe();
    }
    extern "C" {
        pub fn Joystick_count() -> c_int;
    }
    extern "C" {
        pub fn Joystick_count_elements(js: c_int, type_: c_int) -> c_int;
    }
    extern "C" {
        pub fn Joystick_open(js: c_int) -> c_int;
    }
    extern "C" {
        pub fn Joystick_open_async(js: c_int) -> c_int;
    }
    extern "C" {
        pub fn Joystick_close(js: c_int) -> c_int;
    }
    extern "C" {
        pub fn Joystick_send(js: c_int, msg: *const self::HidMsg) -> c_int;
    }
    extern "C" {
        pub fn Joystick_name(js: c_int) -> *const c_char;
    }
    extern "C" {
        pub fn Joystick_axes(js: c_int) -> c_int;
    }
    extern "C" {
        pub fn Joystick_buttons(js: c_int) -> c_int;
    }
    extern "C" {
        pub fn Joystick_hats(js: c_int) -> c_int;
    }
    extern "C" {
        pub fn Mouse_init();
    }
    extern "C" {
        pub fn Mouse_poll();
    }
    extern "C" {
        pub fn Mouse_quit();
    }
    extern "C" {
        pub fn Mouse_probe();
    }
    extern "C" {
        pub fn Mouse_count() -> c_int;
    }
    extern "C" {
        pub fn Mouse_count_elements(js: c_int, type_: c_int) -> c_int;
    }
    extern "C" {
        pub fn Mouse_open(m: c_int) -> c_int;
    }
    extern "C" {
        pub fn Mouse_close(m: c_int) -> c_int;
    }
    extern "C" {
        pub fn Mouse_send(m: c_int, msg: *const self::HidMsg) -> c_int;
    }
    extern "C" {
        pub fn Mouse_name(m: c_int) -> *const c_char;
    }
    extern "C" {
        pub fn Mouse_buttons(m: c_int) -> c_int;
    }
    extern "C" {
        pub fn Mouse_start_cursor_track() -> c_int;
    }
    extern "C" {
        pub fn Mouse_stop_cursor_track() -> c_int;
    }
    extern "C" {
        pub fn Keyboard_init();
    }
    extern "C" {
        pub fn Keyboard_poll();
    }
    extern "C" {
        pub fn Keyboard_quit();
    }
    extern "C" {
        pub fn Keyboard_probe();
    }
    extern "C" {
        pub fn Keyboard_count() -> c_int;
    }
    extern "C" {
        pub fn Keyboard_count_elements(js: c_int, type_: c_int) -> c_int;
    }
    extern "C" {
        pub fn Keyboard_open(kb: c_int) -> c_int;
    }
    extern "C" {
        pub fn Keyboard_close(kb: c_int) -> c_int;
    }
    extern "C" {
        pub fn Keyboard_send(kb: c_int, msg: *const self::HidMsg) -> c_int;
    }
    extern "C" {
        pub fn Keyboard_name(kb: c_int) -> *const c_char;
    }
    extern "C" {
        pub fn WiiRemote_init();
    }
    extern "C" {
        pub fn WiiRemote_poll();
    }
    extern "C" {
        pub fn WiiRemote_quit();
    }
    extern "C" {
        pub fn WiiRemote_probe();
    }
    extern "C" {
        pub fn WiiRemote_count() -> c_int;
    }
    extern "C" {
        pub fn WiiRemote_open(wr: c_int) -> c_int;
    }
    extern "C" {
        pub fn WiiRemote_close(wr: c_int) -> c_int;
    }
    extern "C" {
        pub fn WiiRemote_send(wr: c_int, msg: *const self::HidMsg) -> c_int;
    }
    extern "C" {
        pub fn WiiRemote_name(wr: c_int) -> *const c_char;
    }
    extern "C" {
        pub fn TiltSensor_init();
    }
    extern "C" {
        pub fn TiltSensor_quit();
    }
    extern "C" {
        pub fn TiltSensor_probe();
    }
    extern "C" {
        pub fn TiltSensor_count() -> c_int;
    }
    extern "C" {
        pub fn TiltSensor_open(ts: c_int) -> c_int;
    }
    extern "C" {
        pub fn TiltSensor_close(ts: c_int) -> c_int;
    }
    extern "C" {
        pub fn TiltSensor_read(
            ts: c_int,
            type_: c_int,
            num: c_int,
            msg: *mut self::HidMsg,
        ) -> c_int;
    }
    extern "C" {
        pub fn TiltSensor_name(ts: c_int) -> *const c_char;
    }
    extern "C" {
        pub fn TiltSensor_setPollRate(usec: c_long) -> c_long;
    }
    extern "C" {
        pub fn TiltSensor_getPollRate() -> c_long;
    }
    extern "C" {
        pub fn MultiTouchDevice_init();
    }
    extern "C" {
        pub fn MultiTouchDevice_quit();
    }
    extern "C" {
        pub fn MultiTouchDevice_probe();
    }
    extern "C" {
        pub fn MultiTouchDevice_count() -> c_int;
    }
    extern "C" {
        pub fn MultiTouchDevice_open(ts: c_int) -> c_int;
    }
    extern "C" {
        pub fn MultiTouchDevice_close(ts: c_int) -> c_int;
    }
    extern "C" {
        pub fn MultiTouchDevice_name(ts: c_int) -> *const c_char;
    }
    extern "C" {
        pub fn Tablet_init();
    }
    extern "C" {
        pub fn Tablet_quit();
    }
    extern "C" {
        pub fn Tablet_probe();
    }
    extern "C" {
        pub fn Tablet_count() -> c_int;
    }
    extern "C" {
        pub fn Tablet_open(ts: c_int) -> c_int;
    }
    extern "C" {
        pub fn Tablet_close(ts: c_int) -> c_int;
    }
    extern "C" {
        pub fn Tablet_name(ts: c_int) -> *const c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PhyHidDevIn {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PhyHidDevOut {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct HidOut {
        pub phout: *mut self::PhyHidDevOut,
        pub m_msg: self::std::vector,
        pub m_device_num: c_ulong,
        pub m_valid: c_ulong,
        pub m_suppress_output: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_HidOut() {
        assert_eq!(
            size_of::<HidOut>(),
            56usize,
            concat!("Size of: ", stringify!(HidOut))
        );
        assert_eq!(
            align_of::<HidOut>(),
            8usize,
            concat!("Alignment of ", stringify!(HidOut))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).phout as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(phout)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).m_msg as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(m_msg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).m_device_num as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(m_device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).m_valid as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).m_suppress_output as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(m_suppress_output)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn HidOut_open(this: *mut self::HidOut, device_num: c_ulong) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn HidOut_close(this: *mut self::HidOut) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}send"]
        pub fn HidOut_send(this: *mut self::HidOut, msg: *const self::HidMsg) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}HidOut"]
        pub fn HidOut_HidOut(this: *mut self::HidOut);
    }
    extern "C" {
        #[link_name = "\u{1}HidOut_destructor"]
        pub fn HidOut_HidOut_destructor(this: *mut self::HidOut);
    }
    impl Default for HidOut {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for HidOut {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "HidOut {{ phout: {:?}, m_msg: {:?}, m_device_num: {:?}, m_valid: {:?}, m_suppress_output: {:?} }}" , self . phout , self . m_msg , self . m_device_num , self . m_valid , self . m_suppress_output )
        }
    }
    impl PartialEq for HidOut {
        fn eq(&self, other: &HidOut) -> bool {
            self.phout == other.phout
                && self.m_msg == other.m_msg
                && self.m_device_num == other.m_device_num
                && self.m_valid == other.m_valid
                && self.m_suppress_output == other.m_suppress_output
        }
    }
    impl HidOut {
        #[inline]
        pub unsafe fn open(&mut self, device_num: c_ulong) -> c_ulong {
            HidOut_open(self, device_num)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> c_ulong {
            HidOut_close(self)
        }
        #[inline]
        pub unsafe fn send(&mut self, msg: *const self::HidMsg) -> c_ulong {
            HidOut_send(self, msg)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            HidOut_HidOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            HidOut_HidOut_destructor(self)
        }
    }
    #[repr(C)]
    pub struct HidIn {
        pub _base: self::Chuck_Event,
        pub phin: *mut self::PhyHidDevIn,
        pub m_buffer: *mut self::CBufferAdvance,
        pub m_read_index: c_ulong,
        pub m_valid: c_ulong,
        pub m_device_num: c_long,
        pub SELF: *mut self::Chuck_Object,
        pub m_suppress_output: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_HidIn() {
        assert_eq!(
            size_of::<HidIn>(),
            248usize,
            concat!("Size of: ", stringify!(HidIn))
        );
        assert_eq!(
            align_of::<HidIn>(),
            8usize,
            concat!("Alignment of ", stringify!(HidIn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).phin as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(phin)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_buffer as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_read_index as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_read_index)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_valid as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_device_num as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).SELF as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(SELF)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_suppress_output as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_suppress_output)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn HidIn_open(
            this: *mut self::HidIn,
            vm: *mut self::Chuck_VM,
            device_type: c_long,
            device_num: c_long,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn HidIn_open1(
            this: *mut self::HidIn,
            vm: *mut self::Chuck_VM,
            name: *mut self::std::__cxx11::string,
            device_type: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn HidIn_close(this: *mut self::HidIn) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}read"]
        pub fn HidIn_read(
            this: *mut self::HidIn,
            type_: c_long,
            num: c_long,
            msg: *mut self::HidMsg,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}send"]
        pub fn HidIn_send(this: *mut self::HidIn, msg: *const self::HidMsg) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}empty"]
        pub fn HidIn_empty(this: *mut self::HidIn) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}recv"]
        pub fn HidIn_recv(this: *mut self::HidIn, msg: *mut self::HidMsg) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}name"]
        pub fn HidIn_name(this: *mut self::HidIn) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}HidIn"]
        pub fn HidIn_HidIn(this: *mut self::HidIn);
    }
    impl Default for HidIn {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for HidIn {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "HidIn {{ phin: {:?}, m_buffer: {:?}, m_read_index: {:?}, m_valid: {:?}, m_device_num: {:?}, SELF: {:?}, m_suppress_output: {:?} }}" , self . phin , self . m_buffer , self . m_read_index , self . m_valid , self . m_device_num , self . SELF , self . m_suppress_output )
        }
    }
    impl HidIn {
        #[inline]
        pub unsafe fn open(
            &mut self,
            vm: *mut self::Chuck_VM,
            device_type: c_long,
            device_num: c_long,
        ) -> c_ulong {
            HidIn_open(self, vm, device_type, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            &mut self,
            vm: *mut self::Chuck_VM,
            name: *mut self::std::__cxx11::string,
            device_type: c_ulong,
        ) -> c_ulong {
            HidIn_open1(self, vm, name, device_type)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> c_ulong {
            HidIn_close(self)
        }
        #[inline]
        pub unsafe fn read(
            &mut self,
            type_: c_long,
            num: c_long,
            msg: *mut self::HidMsg,
        ) -> c_ulong {
            HidIn_read(self, type_, num, msg)
        }
        #[inline]
        pub unsafe fn send(&mut self, msg: *const self::HidMsg) -> c_ulong {
            HidIn_send(self, msg)
        }
        #[inline]
        pub unsafe fn empty(&mut self) -> c_ulong {
            HidIn_empty(self)
        }
        #[inline]
        pub unsafe fn recv(&mut self, msg: *mut self::HidMsg) -> c_ulong {
            HidIn_recv(self, msg)
        }
        #[inline]
        pub unsafe fn name(&mut self) -> self::std::__cxx11::string {
            HidIn_name(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            HidIn_HidIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}HidIn_destructor"]
        pub fn HidIn_HidIn_destructor(this: *mut self::HidIn);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct HidInManager {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}m_event_buffers"]
        pub static mut HidInManager_m_event_buffers: self::std::map;
    }
    extern "C" {
        #[link_name = "\u{1}the_matrix"]
        pub static mut HidInManager_the_matrix: self::std::vector;
    }
    extern "C" {
        #[link_name = "\u{1}the_thread"]
        pub static mut HidInManager_the_thread: *mut self::XThread;
    }
    extern "C" {
        #[link_name = "\u{1}msg_buffer"]
        pub static mut HidInManager_msg_buffer: *mut self::CBufferSimple;
    }
    extern "C" {
        #[link_name = "\u{1}thread_going"]
        pub static mut HidInManager_thread_going: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}has_init"]
        pub static mut HidInManager_has_init: c_ulong;
    }
    #[test]
    fn bindgen_test_layout_HidInManager() {
        assert_eq!(
            size_of::<HidInManager>(),
            1usize,
            concat!("Size of: ", stringify!(HidInManager))
        );
        assert_eq!(
            align_of::<HidInManager>(),
            1usize,
            concat!("Alignment of ", stringify!(HidInManager))
        );
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn HidInManager_init();
    }
    extern "C" {
        #[link_name = "\u{1}init_default_drivers"]
        pub fn HidInManager_init_default_drivers();
    }
    extern "C" {
        #[link_name = "\u{1}cleanup"]
        pub fn HidInManager_cleanup();
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn HidInManager_open(
            hin: *mut self::HidIn,
            vm: *mut self::Chuck_VM,
            device_type: c_long,
            device_num: c_long,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn HidInManager_open1(
            hin: *mut self::HidIn,
            vm: *mut self::Chuck_VM,
            device_type: c_long,
            device_name: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn HidInManager_close(hin: *mut self::HidIn) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}cleanup_buffer"]
        pub fn HidInManager_cleanup_buffer(vm: *mut self::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}probeHidIn"]
        pub fn HidInManager_probeHidIn();
    }
    extern "C" {
        #[link_name = "\u{1}probeHidOut"]
        pub fn HidInManager_probeHidOut();
    }
    extern "C" {
        #[link_name = "\u{1}cb_hid_input"]
        pub fn HidInManager_cb_hid_input(arg1: *mut c_void) -> *mut c_void;
    }
    extern "C" {
        #[link_name = "\u{1}push_message"]
        pub fn HidInManager_push_message(msg: *mut self::HidMsg);
    }
    impl HidInManager {
        #[inline]
        pub unsafe fn init() {
            HidInManager_init()
        }
        #[inline]
        pub unsafe fn init_default_drivers() {
            HidInManager_init_default_drivers()
        }
        #[inline]
        pub unsafe fn cleanup() {
            HidInManager_cleanup()
        }
        #[inline]
        pub unsafe fn open(
            hin: *mut self::HidIn,
            vm: *mut self::Chuck_VM,
            device_type: c_long,
            device_num: c_long,
        ) -> c_ulong {
            HidInManager_open(hin, vm, device_type, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            hin: *mut self::HidIn,
            vm: *mut self::Chuck_VM,
            device_type: c_long,
            device_name: *mut self::std::__cxx11::string,
        ) -> c_ulong {
            HidInManager_open1(hin, vm, device_type, device_name)
        }
        #[inline]
        pub unsafe fn close(hin: *mut self::HidIn) -> c_ulong {
            HidInManager_close(hin)
        }
        #[inline]
        pub unsafe fn cleanup_buffer(vm: *mut self::Chuck_VM) {
            HidInManager_cleanup_buffer(vm)
        }
        #[inline]
        pub unsafe fn probeHidIn() {
            HidInManager_probeHidIn()
        }
        #[inline]
        pub unsafe fn probeHidOut() {
            HidInManager_probeHidOut()
        }
        #[inline]
        pub unsafe fn cb_hid_input(arg1: *mut c_void) -> *mut c_void {
            HidInManager_cb_hid_input(arg1)
        }
        #[inline]
        pub unsafe fn push_message(msg: *mut self::HidMsg) {
            HidInManager_push_message(msg)
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct HidOutManager {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}the_phouts"]
        pub static mut HidOutManager_the_phouts: self::std::vector;
    }
    #[test]
    fn bindgen_test_layout_HidOutManager() {
        assert_eq!(
            size_of::<HidOutManager>(),
            1usize,
            concat!("Size of: ", stringify!(HidOutManager))
        );
        assert_eq!(
            align_of::<HidOutManager>(),
            1usize,
            concat!("Alignment of ", stringify!(HidOutManager))
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn HidOutManager_open(hout: *mut self::HidOut, device_num: c_long) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn HidOutManager_close(hout: *mut self::HidOut) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}HidOutManager"]
        pub fn HidOutManager_HidOutManager(this: *mut self::HidOutManager);
    }
    extern "C" {
        #[link_name = "\u{1}HidOutManager_destructor"]
        pub fn HidOutManager_HidOutManager_destructor(this: *mut self::HidOutManager);
    }
    impl HidOutManager {
        #[inline]
        pub unsafe fn open(hout: *mut self::HidOut, device_num: c_long) -> c_ulong {
            HidOutManager_open(hout, device_num)
        }
        #[inline]
        pub unsafe fn close(hout: *mut self::HidOut) -> c_ulong {
            HidOutManager_close(hout)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            HidOutManager_HidOutManager(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            HidOutManager_HidOutManager_destructor(self)
        }
    }
    extern "C" {
        pub static mut default_drivers: *mut self::Chuck_Hid_Driver;
    }
    #[repr(C)]
    pub struct RtMidiError {
        pub _base: self::std::exception,
        pub message_: self::std::__cxx11::string,
        pub type_: self::RtMidiError_Type,
    }
    #[doc = "< A non-critical error."]
    pub const RtMidiError_Type_WARNING: self::RtMidiError_Type = 0;
    #[doc = "< A non-critical error which might be useful for debugging."]
    pub const RtMidiError_Type_DEBUG_WARNING: self::RtMidiError_Type = 1;
    #[doc = "< The default, unspecified error type."]
    pub const RtMidiError_Type_UNSPECIFIED: self::RtMidiError_Type = 2;
    #[doc = "< No devices found on system."]
    pub const RtMidiError_Type_NO_DEVICES_FOUND: self::RtMidiError_Type = 3;
    #[doc = "< An invalid device ID was specified."]
    pub const RtMidiError_Type_INVALID_DEVICE: self::RtMidiError_Type = 4;
    #[doc = "< An error occured during memory allocation."]
    pub const RtMidiError_Type_MEMORY_ERROR: self::RtMidiError_Type = 5;
    #[doc = "< An invalid parameter was specified to a function."]
    pub const RtMidiError_Type_INVALID_PARAMETER: self::RtMidiError_Type = 6;
    #[doc = "< The function was called incorrectly."]
    pub const RtMidiError_Type_INVALID_USE: self::RtMidiError_Type = 7;
    #[doc = "< A system driver error occured."]
    pub const RtMidiError_Type_DRIVER_ERROR: self::RtMidiError_Type = 8;
    #[doc = "< A system error occured."]
    pub const RtMidiError_Type_SYSTEM_ERROR: self::RtMidiError_Type = 9;
    #[doc = "< A thread error occured."]
    pub const RtMidiError_Type_THREAD_ERROR: self::RtMidiError_Type = 10;
    #[doc = "! Defined RtMidiError types."]
    pub type RtMidiError_Type = u32;
    #[test]
    fn bindgen_test_layout_RtMidiError() {
        assert_eq!(
            size_of::<RtMidiError>(),
            48usize,
            concat!("Size of: ", stringify!(RtMidiError))
        );
        assert_eq!(
            align_of::<RtMidiError>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiError))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiError>())).message_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiError),
                "::",
                stringify!(message_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiError>())).type_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiError),
                "::",
                stringify!(type_)
            )
        );
    }
    impl Default for RtMidiError {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "RtMidiError {{ message_: {:?}, type_: {:?} }}",
                self.message_, self.type_
            )
        }
    }
    #[repr(C)]
    pub struct RtMidi__bindgen_vtable(c_void);
    #[repr(C)]
    pub struct RtMidi {
        pub vtable_: *const RtMidi__bindgen_vtable,
        pub apiData_: *mut c_void,
        pub connected_: bool,
        pub errorString_: self::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_RtMidi() {
        assert_eq!(
            size_of::<RtMidi>(),
            56usize,
            concat!("Size of: ", stringify!(RtMidi))
        );
        assert_eq!(
            align_of::<RtMidi>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidi))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidi>())).apiData_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidi),
                "::",
                stringify!(apiData_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidi>())).connected_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidi),
                "::",
                stringify!(connected_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidi>())).errorString_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidi),
                "::",
                stringify!(errorString_)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}error"]
        pub fn RtMidi_error(this: *mut self::RtMidi, type_: self::RtMidiError_Type);
    }
    extern "C" {
        #[link_name = "\u{1}RtMidi"]
        pub fn RtMidi_RtMidi(this: *mut self::RtMidi);
    }
    impl Default for RtMidi {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidi {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "RtMidi {{ apiData_: {:?}, connected_: {:?}, errorString_: {:?} }}",
                self.apiData_, self.connected_, self.errorString_
            )
        }
    }
    impl RtMidi {
        #[inline]
        pub unsafe fn error(&mut self, type_: self::RtMidiError_Type) {
            RtMidi_error(self, type_)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            RtMidi_RtMidi(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct RtMidiIn {
        pub _base: self::RtMidi,
        pub inputData_: self::RtMidiIn_RtMidiInData,
    }
    #[doc = "! User callback function type definition."]
    pub type RtMidiIn_RtMidiCallback = ::std::option::Option<
        unsafe extern "C" fn(
            timeStamp: f64,
            message: *mut self::std::vector,
            userData: *mut c_void,
        ),
    >;
    #[repr(C)]
    pub struct RtMidiIn_MidiMessage {
        pub bytes: self::std::vector,
        pub timeStamp: f64,
    }
    #[test]
    fn bindgen_test_layout_RtMidiIn_MidiMessage() {
        assert_eq!(
            size_of::<RtMidiIn_MidiMessage>(),
            32usize,
            concat!("Size of: ", stringify!(RtMidiIn_MidiMessage))
        );
        assert_eq!(
            align_of::<RtMidiIn_MidiMessage>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiIn_MidiMessage))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiIn_MidiMessage>())).bytes as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_MidiMessage),
                "::",
                stringify!(bytes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_MidiMessage>())).timeStamp as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_MidiMessage),
                "::",
                stringify!(timeStamp)
            )
        );
    }
    impl Default for RtMidiIn_MidiMessage {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiIn_MidiMessage {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "RtMidiIn_MidiMessage {{ bytes: {:?}, timeStamp: {:?} }}",
                self.bytes, self.timeStamp
            )
        }
    }
    impl PartialEq for RtMidiIn_MidiMessage {
        fn eq(&self, other: &RtMidiIn_MidiMessage) -> bool {
            self.bytes == other.bytes && self.timeStamp == other.timeStamp
        }
    }
    #[repr(C)]
    pub struct RtMidiIn_RtMidiInData {
        pub queue: self::std::queue<root::std::deque>,
        pub queueLimit: c_uint,
        pub ignoreFlags: c_uchar,
        pub doInput: bool,
        pub firstMessage: bool,
        pub apiData: *mut c_void,
        pub usingCallback: bool,
        pub userCallback: *mut c_void,
        pub userData: *mut c_void,
    }
    #[test]
    fn bindgen_test_layout_RtMidiIn_RtMidiInData() {
        assert_eq!(
            size_of::<RtMidiIn_RtMidiInData>(),
            120usize,
            concat!("Size of: ", stringify!(RtMidiIn_RtMidiInData))
        );
        assert_eq!(
            align_of::<RtMidiIn_RtMidiInData>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiIn_RtMidiInData))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).queue as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(queue)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).queueLimit as *const _ as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(queueLimit)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).ignoreFlags as *const _ as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(ignoreFlags)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).doInput as *const _ as usize
            },
            85usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(doInput)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).firstMessage as *const _ as usize
            },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(firstMessage)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).apiData as *const _ as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(apiData)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).usingCallback as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(usingCallback)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).userCallback as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(userCallback)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).userData as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(userData)
            )
        );
    }
    impl Default for RtMidiIn_RtMidiInData {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiIn_RtMidiInData {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "RtMidiIn_RtMidiInData {{ queue: {:?}, queueLimit: {:?}, ignoreFlags: {:?}, doInput: {:?}, firstMessage: {:?}, apiData: {:?}, usingCallback: {:?}, userCallback: {:?}, userData: {:?} }}" , self . queue , self . queueLimit , self . ignoreFlags , self . doInput , self . firstMessage , self . apiData , self . usingCallback , self . userCallback , self . userData )
        }
    }
    impl PartialEq for RtMidiIn_RtMidiInData {
        fn eq(&self, other: &RtMidiIn_RtMidiInData) -> bool {
            self.queue == other.queue
                && self.queueLimit == other.queueLimit
                && self.ignoreFlags == other.ignoreFlags
                && self.doInput == other.doInput
                && self.firstMessage == other.firstMessage
                && self.apiData == other.apiData
                && self.usingCallback == other.usingCallback
                && self.userCallback == other.userCallback
                && self.userData == other.userData
        }
    }
    #[test]
    fn bindgen_test_layout_RtMidiIn() {
        assert_eq!(
            size_of::<RtMidiIn>(),
            176usize,
            concat!("Size of: ", stringify!(RtMidiIn))
        );
        assert_eq!(
            align_of::<RtMidiIn>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiIn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiIn>())).inputData_ as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn),
                "::",
                stringify!(inputData_)
            )
        );
    }
    extern "C" {
        #[doc = "! Set a callback function to be invoked for incoming MIDI messages."]
        #[doc = "*!"]
        #[doc = "The callback function will be called whenever an incoming MIDI"]
        #[doc = "message is received.  While not absolutely necessary, it is best"]
        #[doc = "to set the callback function before opening a MIDI port to avoid"]
        #[doc = "leaving some messages in the queue."]
        #[doc = "*/"]
        #[link_name = "\u{1}setCallback"]
        pub fn RtMidiIn_setCallback(
            this: *mut self::RtMidiIn,
            callback: self::RtMidiIn_RtMidiCallback,
            userData: *mut c_void,
        );
    }
    extern "C" {
        #[doc = "! Cancel use of the current callback function (if one exists)."]
        #[doc = "*!"]
        #[doc = "Subsequent incoming MIDI messages will be written to the queue"]
        #[doc = "and can be retrieved with the \\e getMessage function."]
        #[doc = "*/"]
        #[link_name = "\u{1}cancelCallback"]
        pub fn RtMidiIn_cancelCallback(this: *mut self::RtMidiIn);
    }
    extern "C" {
        #[doc = "! Set the maximum number of MIDI messages to be saved in the queue."]
        #[doc = "*!"]
        #[doc = "If the queue size limit is reached, incoming messages will be"]
        #[doc = "ignored.  The default limit is 1024."]
        #[doc = "*/"]
        #[link_name = "\u{1}setQueueSizeLimit"]
        pub fn RtMidiIn_setQueueSizeLimit(this: *mut self::RtMidiIn, queueSize: c_uint);
    }
    extern "C" {
        #[doc = "! Specify whether certain MIDI message types should be queued or ignored during input."]
        #[doc = "*!"]
        #[doc = "By default, active sensing messages are ignored"]
        #[doc = "during message input because of their relative high data rates."]
        #[doc = "MIDI sysex messages are ignored by default as well.  Variable"]
        #[doc = "values of \"true\" imply that the respective message type will be"]
        #[doc = "ignored."]
        #[doc = "*/"]
        #[link_name = "\u{1}ignoreTypes"]
        pub fn RtMidiIn_ignoreTypes(
            this: *mut self::RtMidiIn,
            midiSysex: bool,
            midiTime: bool,
            midiSense: bool,
        );
    }
    extern "C" {
        #[doc = "! Fill the user-provided vector with the data bytes for the next available MIDI message in the input queue and return the event delta-time in seconds."]
        #[doc = "*!"]
        #[doc = "This function returns immediately whether a new message is"]
        #[doc = "available or not.  A valid message is indicated by a non-zero"]
        #[doc = "vector size.  An exception is thrown if an error occurs during"]
        #[doc = "message retrieval or an input connection was not previously"]
        #[doc = "established."]
        #[doc = "*/"]
        #[link_name = "\u{1}getMessage"]
        pub fn RtMidiIn_getMessage(
            this: *mut self::RtMidiIn,
            message: *mut self::std::vector,
        ) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[doc = "*!"]
        #[doc = "An exception will be thrown if a MIDI system initialization error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}RtMidiIn"]
        pub fn RtMidiIn_RtMidiIn(this: *mut self::RtMidiIn);
    }
    impl Default for RtMidiIn {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiIn {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "RtMidiIn {{ inputData_: {:?} }}", self.inputData_)
        }
    }
    impl RtMidiIn {
        #[inline]
        pub unsafe fn setCallback(
            &mut self,
            callback: self::RtMidiIn_RtMidiCallback,
            userData: *mut c_void,
        ) {
            RtMidiIn_setCallback(self, callback, userData)
        }
        #[inline]
        pub unsafe fn cancelCallback(&mut self) {
            RtMidiIn_cancelCallback(self)
        }
        #[inline]
        pub unsafe fn setQueueSizeLimit(&mut self, queueSize: c_uint) {
            RtMidiIn_setQueueSizeLimit(self, queueSize)
        }
        #[inline]
        pub unsafe fn ignoreTypes(&mut self, midiSysex: bool, midiTime: bool, midiSense: bool) {
            RtMidiIn_ignoreTypes(self, midiSysex, midiTime, midiSense)
        }
        #[inline]
        pub unsafe fn getMessage(&mut self, message: *mut self::std::vector) -> f64 {
            RtMidiIn_getMessage(self, message)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            RtMidiIn_RtMidiIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! If a MIDI connection is still open, it will be closed by the destructor."]
        #[link_name = "\u{1}RtMidiIn_destructor"]
        pub fn RtMidiIn_RtMidiIn_destructor(this: *mut self::RtMidiIn);
    }
    extern "C" {
        #[doc = "! Open a MIDI input connection."]
        #[doc = "*!"]
        #[doc = "An optional port number greater than 0 can be specified."]
        #[doc = "Otherwise, the default or first port found is opened."]
        #[doc = "*/"]
        #[link_name = "\u{1}openPort"]
        pub fn RtMidiIn_openPort(this: *mut c_void, portNumber: c_uint);
    }
    extern "C" {
        #[doc = "! Create a virtual input port to allow software connections (OS X and ALSA only)."]
        #[doc = "*!"]
        #[doc = "This function creates a virtual MIDI input port to which other"]
        #[doc = "software applications can connect.  This type of functionality"]
        #[doc = "is currently only supported by the Macintosh OS-X and Linux ALSA"]
        #[doc = "APIs (the function does nothing for the other APIs)."]
        #[doc = "*/"]
        #[link_name = "\u{1}openVirtualPort"]
        pub fn RtMidiIn_openVirtualPort(this: *mut c_void);
    }
    extern "C" {
        #[doc = "! Close an open MIDI connection (if one exists)."]
        #[link_name = "\u{1}closePort"]
        pub fn RtMidiIn_closePort(this: *mut c_void);
    }
    extern "C" {
        #[doc = "! Return the number of available MIDI input ports."]
        #[link_name = "\u{1}getPortCount"]
        pub fn RtMidiIn_getPortCount(this: *mut c_void) -> c_uint;
    }
    extern "C" {
        #[doc = "! Return a string identifier for the specified MIDI input port number."]
        #[doc = "*!"]
        #[doc = "An exception is thrown if an invalid port specifier is provided."]
        #[doc = "*/"]
        #[link_name = "\u{1}getPortName"]
        pub fn RtMidiIn_getPortName(
            this: *mut c_void,
            portNumber: c_uint,
        ) -> self::std::__cxx11::string;
    }
    #[doc = "\\brief A realtime MIDI output class."]
    #[doc = ""]
    #[doc = "This class provides a common, platform-independent API for MIDI"]
    #[doc = "output.  It allows one to probe available MIDI output ports, to"]
    #[doc = "connect to one such port, and to send MIDI bytes immediately over"]
    #[doc = "the connection.  Create multiple instances of this class to"]
    #[doc = "connect to more than one MIDI device at the same time."]
    #[doc = ""]
    #[doc = "by Gary P. Scavone, 2003-2004."]
    #[repr(C)]
    pub struct RtMidiOut {
        pub _base: self::RtMidi,
    }
    #[test]
    fn bindgen_test_layout_RtMidiOut() {
        assert_eq!(
            size_of::<RtMidiOut>(),
            56usize,
            concat!("Size of: ", stringify!(RtMidiOut))
        );
        assert_eq!(
            align_of::<RtMidiOut>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiOut))
        );
    }
    extern "C" {
        #[doc = "! Immediately send a single message out an open MIDI output port."]
        #[doc = "*!"]
        #[doc = "An exception is thrown if an error occurs during output or an"]
        #[doc = "output connection was not previously established."]
        #[doc = "*/"]
        #[link_name = "\u{1}sendMessage"]
        pub fn RtMidiOut_sendMessage(this: *mut self::RtMidiOut, message: *mut self::std::vector);
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[doc = "*!"]
        #[doc = "An exception will be thrown if a MIDI system initialization error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}RtMidiOut"]
        pub fn RtMidiOut_RtMidiOut(this: *mut self::RtMidiOut);
    }
    impl Default for RtMidiOut {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiOut {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "RtMidiOut {{  }}")
        }
    }
    impl RtMidiOut {
        #[inline]
        pub unsafe fn sendMessage(&mut self, message: *mut self::std::vector) {
            RtMidiOut_sendMessage(self, message)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            RtMidiOut_RtMidiOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! The destructor closes any open MIDI connections."]
        #[link_name = "\u{1}RtMidiOut_destructor"]
        pub fn RtMidiOut_RtMidiOut_destructor(this: *mut self::RtMidiOut);
    }
    extern "C" {
        #[doc = "! Open a MIDI output connection."]
        #[doc = "*!"]
        #[doc = "An optional port number greater than 0 can be specified."]
        #[doc = "Otherwise, the default or first port found is opened.  An"]
        #[doc = "exception is thrown if an error occurs while attempting to make"]
        #[doc = "the port connection."]
        #[doc = "*/"]
        #[link_name = "\u{1}openPort"]
        pub fn RtMidiOut_openPort(this: *mut c_void, portNumber: c_uint);
    }
    extern "C" {
        #[doc = "! Close an open MIDI connection (if one exists)."]
        #[link_name = "\u{1}closePort"]
        pub fn RtMidiOut_closePort(this: *mut c_void);
    }
    extern "C" {
        #[doc = "! Create a virtual output port to allow software connections (OS X and ALSA only)."]
        #[doc = "*!"]
        #[doc = "This function creates a virtual MIDI output port to which other"]
        #[doc = "software applications can connect.  This type of functionality"]
        #[doc = "is currently only supported by the Macintosh OS-X and Linux ALSA"]
        #[doc = "APIs (the function does nothing with the other APIs).  An"]
        #[doc = "exception is thrown if an error occurs while attempting to create"]
        #[doc = "the virtual port."]
        #[doc = "*/"]
        #[link_name = "\u{1}openVirtualPort"]
        pub fn RtMidiOut_openVirtualPort(this: *mut c_void);
    }
    extern "C" {
        #[doc = "! Return the number of available MIDI output ports."]
        #[link_name = "\u{1}getPortCount"]
        pub fn RtMidiOut_getPortCount(this: *mut c_void) -> c_uint;
    }
    extern "C" {
        #[doc = "! Return a string identifier for the specified MIDI port type and number."]
        #[doc = "*!"]
        #[doc = "An exception is thrown if an invalid port specifier is provided."]
        #[doc = "*/"]
        #[link_name = "\u{1}getPortName"]
        pub fn RtMidiOut_getPortName(
            this: *mut c_void,
            portNumber: c_uint,
        ) -> self::std::__cxx11::string;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union MidiMsg {
        pub data: [c_uchar; 4usize],
        _bindgen_union_align: [u8; 4usize],
    }
    #[test]
    fn bindgen_test_layout_MidiMsg() {
        assert_eq!(
            size_of::<MidiMsg>(),
            4usize,
            concat!("Size of: ", stringify!(MidiMsg))
        );
        assert_eq!(
            align_of::<MidiMsg>(),
            1usize,
            concat!("Alignment of ", stringify!(MidiMsg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiMsg>())).data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiMsg),
                "::",
                stringify!(data)
            )
        );
    }
    impl Default for MidiMsg {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for MidiMsg {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "MidiMsg {{ union }}")
        }
    }
    #[repr(C)]
    pub struct MidiOut {
        pub mout: *mut self::RtMidiOut,
        pub m_msg: self::std::vector,
        pub m_device_num: c_ulong,
        pub m_valid: c_ulong,
        pub m_suppress_output: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_MidiOut() {
        assert_eq!(
            size_of::<MidiOut>(),
            56usize,
            concat!("Size of: ", stringify!(MidiOut))
        );
        assert_eq!(
            align_of::<MidiOut>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiOut))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).mout as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(mout)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).m_msg as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(m_msg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).m_device_num as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(m_device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).m_valid as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).m_suppress_output as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(m_suppress_output)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiOut_open(this: *mut self::MidiOut, device_num: c_ulong) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiOut_open1(
            this: *mut self::MidiOut,
            name: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn MidiOut_close(this: *mut self::MidiOut) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}send"]
        pub fn MidiOut_send(this: *mut self::MidiOut, status: c_uchar) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}send"]
        pub fn MidiOut_send1(this: *mut self::MidiOut, status: c_uchar, data1: c_uchar) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}send"]
        pub fn MidiOut_send2(
            this: *mut self::MidiOut,
            status: c_uchar,
            data1: c_uchar,
            data2: c_uchar,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}send"]
        pub fn MidiOut_send3(this: *mut self::MidiOut, msg: *const self::MidiMsg) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}noteon"]
        pub fn MidiOut_noteon(
            this: *mut self::MidiOut,
            channel: c_ulong,
            note: c_ulong,
            velocity: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}noteoff"]
        pub fn MidiOut_noteoff(
            this: *mut self::MidiOut,
            channel: c_ulong,
            note: c_ulong,
            velocity: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}polypress"]
        pub fn MidiOut_polypress(
            this: *mut self::MidiOut,
            channel: c_ulong,
            note: c_ulong,
            pressure: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}ctrlchange"]
        pub fn MidiOut_ctrlchange(
            this: *mut self::MidiOut,
            channel: c_ulong,
            ctrl_num: c_ulong,
            ctrl_val: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}progchange"]
        pub fn MidiOut_progchange(
            this: *mut self::MidiOut,
            channel: c_ulong,
            patch: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}chanpress"]
        pub fn MidiOut_chanpress(
            this: *mut self::MidiOut,
            channel: c_ulong,
            pressure: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}pitchbend"]
        pub fn MidiOut_pitchbend(
            this: *mut self::MidiOut,
            channel: c_ulong,
            bend_val: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}allnotesoff"]
        pub fn MidiOut_allnotesoff(this: *mut self::MidiOut, channel: c_ulong) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}MidiOut"]
        pub fn MidiOut_MidiOut(this: *mut self::MidiOut);
    }
    extern "C" {
        #[link_name = "\u{1}MidiOut_destructor"]
        pub fn MidiOut_MidiOut_destructor(this: *mut self::MidiOut);
    }
    impl Default for MidiOut {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for MidiOut {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "MidiOut {{ mout: {:?}, m_msg: {:?}, m_device_num: {:?}, m_valid: {:?}, m_suppress_output: {:?} }}" , self . mout , self . m_msg , self . m_device_num , self . m_valid , self . m_suppress_output )
        }
    }
    impl PartialEq for MidiOut {
        fn eq(&self, other: &MidiOut) -> bool {
            self.mout == other.mout
                && self.m_msg == other.m_msg
                && self.m_device_num == other.m_device_num
                && self.m_valid == other.m_valid
                && self.m_suppress_output == other.m_suppress_output
        }
    }
    impl MidiOut {
        #[inline]
        pub unsafe fn open(&mut self, device_num: c_ulong) -> c_ulong {
            MidiOut_open(self, device_num)
        }
        #[inline]
        pub unsafe fn open1(&mut self, name: *const self::std::__cxx11::string) -> c_ulong {
            MidiOut_open1(self, name)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> c_ulong {
            MidiOut_close(self)
        }
        #[inline]
        pub unsafe fn send(&mut self, status: c_uchar) -> c_ulong {
            MidiOut_send(self, status)
        }
        #[inline]
        pub unsafe fn send1(&mut self, status: c_uchar, data1: c_uchar) -> c_ulong {
            MidiOut_send1(self, status, data1)
        }
        #[inline]
        pub unsafe fn send2(&mut self, status: c_uchar, data1: c_uchar, data2: c_uchar) -> c_ulong {
            MidiOut_send2(self, status, data1, data2)
        }
        #[inline]
        pub unsafe fn send3(&mut self, msg: *const self::MidiMsg) -> c_ulong {
            MidiOut_send3(self, msg)
        }
        #[inline]
        pub unsafe fn noteon(
            &mut self,
            channel: c_ulong,
            note: c_ulong,
            velocity: c_ulong,
        ) -> c_ulong {
            MidiOut_noteon(self, channel, note, velocity)
        }
        #[inline]
        pub unsafe fn noteoff(
            &mut self,
            channel: c_ulong,
            note: c_ulong,
            velocity: c_ulong,
        ) -> c_ulong {
            MidiOut_noteoff(self, channel, note, velocity)
        }
        #[inline]
        pub unsafe fn polypress(
            &mut self,
            channel: c_ulong,
            note: c_ulong,
            pressure: c_ulong,
        ) -> c_ulong {
            MidiOut_polypress(self, channel, note, pressure)
        }
        #[inline]
        pub unsafe fn ctrlchange(
            &mut self,
            channel: c_ulong,
            ctrl_num: c_ulong,
            ctrl_val: c_ulong,
        ) -> c_ulong {
            MidiOut_ctrlchange(self, channel, ctrl_num, ctrl_val)
        }
        #[inline]
        pub unsafe fn progchange(&mut self, channel: c_ulong, patch: c_ulong) -> c_ulong {
            MidiOut_progchange(self, channel, patch)
        }
        #[inline]
        pub unsafe fn chanpress(&mut self, channel: c_ulong, pressure: c_ulong) -> c_ulong {
            MidiOut_chanpress(self, channel, pressure)
        }
        #[inline]
        pub unsafe fn pitchbend(&mut self, channel: c_ulong, bend_val: c_ulong) -> c_ulong {
            MidiOut_pitchbend(self, channel, bend_val)
        }
        #[inline]
        pub unsafe fn allnotesoff(&mut self, channel: c_ulong) -> c_ulong {
            MidiOut_allnotesoff(self, channel)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            MidiOut_MidiOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiOut_MidiOut_destructor(self)
        }
    }
    #[repr(C)]
    pub struct MidiIn {
        pub _base: self::Chuck_Event,
        pub m_buffer: *mut self::CBufferAdvance,
        pub m_read_index: c_ulong,
        pub min: *mut self::RtMidiIn,
        pub m_valid: c_ulong,
        pub m_device_num: c_ulong,
        pub SELF: *mut self::Chuck_Object,
        pub m_suppress_output: c_ulong,
    }
    #[test]
    fn bindgen_test_layout_MidiIn() {
        assert_eq!(
            size_of::<MidiIn>(),
            248usize,
            concat!("Size of: ", stringify!(MidiIn))
        );
        assert_eq!(
            align_of::<MidiIn>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiIn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_buffer as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_read_index as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_read_index)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).min as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(min)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_valid as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_device_num as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).SELF as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(SELF)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_suppress_output as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_suppress_output)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiIn_open(
            this: *mut self::MidiIn,
            vm: *mut self::Chuck_VM,
            device_num: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiIn_open1(
            this: *mut self::MidiIn,
            vm: *mut self::Chuck_VM,
            name: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn MidiIn_close(this: *mut self::MidiIn) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}empty"]
        pub fn MidiIn_empty(this: *mut self::MidiIn) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}recv"]
        pub fn MidiIn_recv(this: *mut self::MidiIn, msg: *mut self::MidiMsg) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}MidiIn"]
        pub fn MidiIn_MidiIn(this: *mut self::MidiIn);
    }
    impl Default for MidiIn {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for MidiIn {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "MidiIn {{ m_buffer: {:?}, m_read_index: {:?}, min: {:?}, m_valid: {:?}, m_device_num: {:?}, SELF: {:?}, m_suppress_output: {:?} }}" , self . m_buffer , self . m_read_index , self . min , self . m_valid , self . m_device_num , self . SELF , self . m_suppress_output )
        }
    }
    impl MidiIn {
        #[inline]
        pub unsafe fn open(&mut self, vm: *mut self::Chuck_VM, device_num: c_ulong) -> c_ulong {
            MidiIn_open(self, vm, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            &mut self,
            vm: *mut self::Chuck_VM,
            name: *const self::std::__cxx11::string,
        ) -> c_ulong {
            MidiIn_open1(self, vm, name)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> c_ulong {
            MidiIn_close(self)
        }
        #[inline]
        pub unsafe fn empty(&mut self) -> c_ulong {
            MidiIn_empty(self)
        }
        #[inline]
        pub unsafe fn recv(&mut self, msg: *mut self::MidiMsg) -> c_ulong {
            MidiIn_recv(self, msg)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            MidiIn_MidiIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}MidiIn_destructor"]
        pub fn MidiIn_MidiIn_destructor(this: *mut self::MidiIn);
    }
    extern "C" {
        pub fn probeMidiIn();
    }
    extern "C" {
        pub fn probeMidiOut();
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiInManager {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}the_mins"]
        pub static mut MidiInManager_the_mins: self::std::vector;
    }
    extern "C" {
        #[link_name = "\u{1}the_bufs"]
        pub static mut MidiInManager_the_bufs: self::std::vector;
    }
    extern "C" {
        #[link_name = "\u{1}m_event_buffers"]
        pub static mut MidiInManager_m_event_buffers: self::std::map;
    }
    #[test]
    fn bindgen_test_layout_MidiInManager() {
        assert_eq!(
            size_of::<MidiInManager>(),
            1usize,
            concat!("Size of: ", stringify!(MidiInManager))
        );
        assert_eq!(
            align_of::<MidiInManager>(),
            1usize,
            concat!("Alignment of ", stringify!(MidiInManager))
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiInManager_open(
            min: *mut self::MidiIn,
            vm: *mut self::Chuck_VM,
            device_num: c_long,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiInManager_open1(
            min: *mut self::MidiIn,
            vm: *mut self::Chuck_VM,
            name: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn MidiInManager_close(min: *mut self::MidiIn) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}cleanup_buffer"]
        pub fn MidiInManager_cleanup_buffer(vm: *mut self::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}cb_midi_input"]
        pub fn MidiInManager_cb_midi_input(
            deltatime: f64,
            msg: *mut self::std::vector,
            userData: *mut c_void,
        );
    }
    extern "C" {
        #[link_name = "\u{1}MidiInManager"]
        pub fn MidiInManager_MidiInManager(this: *mut self::MidiInManager);
    }
    extern "C" {
        #[link_name = "\u{1}MidiInManager_destructor"]
        pub fn MidiInManager_MidiInManager_destructor(this: *mut self::MidiInManager);
    }
    impl MidiInManager {
        #[inline]
        pub unsafe fn open(
            min: *mut self::MidiIn,
            vm: *mut self::Chuck_VM,
            device_num: c_long,
        ) -> c_ulong {
            MidiInManager_open(min, vm, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            min: *mut self::MidiIn,
            vm: *mut self::Chuck_VM,
            name: *const self::std::__cxx11::string,
        ) -> c_ulong {
            MidiInManager_open1(min, vm, name)
        }
        #[inline]
        pub unsafe fn close(min: *mut self::MidiIn) -> c_ulong {
            MidiInManager_close(min)
        }
        #[inline]
        pub unsafe fn cleanup_buffer(vm: *mut self::Chuck_VM) {
            MidiInManager_cleanup_buffer(vm)
        }
        #[inline]
        pub unsafe fn cb_midi_input(
            deltatime: f64,
            msg: *mut self::std::vector,
            userData: *mut c_void,
        ) {
            MidiInManager_cb_midi_input(deltatime, msg, userData)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            MidiInManager_MidiInManager(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiInManager_MidiInManager_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiOutManager {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}the_mouts"]
        pub static mut MidiOutManager_the_mouts: self::std::vector;
    }
    #[test]
    fn bindgen_test_layout_MidiOutManager() {
        assert_eq!(
            size_of::<MidiOutManager>(),
            1usize,
            concat!("Size of: ", stringify!(MidiOutManager))
        );
        assert_eq!(
            align_of::<MidiOutManager>(),
            1usize,
            concat!("Alignment of ", stringify!(MidiOutManager))
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiOutManager_open(mout: *mut self::MidiOut, device_num: c_long) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiOutManager_open1(
            mout: *mut self::MidiOut,
            name: *const self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn MidiOutManager_close(mout: *mut self::MidiOut) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}MidiOutManager"]
        pub fn MidiOutManager_MidiOutManager(this: *mut self::MidiOutManager);
    }
    extern "C" {
        #[link_name = "\u{1}MidiOutManager_destructor"]
        pub fn MidiOutManager_MidiOutManager_destructor(this: *mut self::MidiOutManager);
    }
    impl MidiOutManager {
        #[inline]
        pub unsafe fn open(mout: *mut self::MidiOut, device_num: c_long) -> c_ulong {
            MidiOutManager_open(mout, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            mout: *mut self::MidiOut,
            name: *const self::std::__cxx11::string,
        ) -> c_ulong {
            MidiOutManager_open1(mout, name)
        }
        #[inline]
        pub unsafe fn close(mout: *mut self::MidiOut) -> c_ulong {
            MidiOutManager_close(mout)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            MidiOutManager_MidiOutManager(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiOutManager_MidiOutManager_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiRW {
        pub file: *mut self::FILE,
    }
    #[test]
    fn bindgen_test_layout_MidiRW() {
        assert_eq!(
            size_of::<MidiRW>(),
            8usize,
            concat!("Size of: ", stringify!(MidiRW))
        );
        assert_eq!(
            align_of::<MidiRW>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiRW))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiRW>())).file as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiRW),
                "::",
                stringify!(file)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiRW_open(this: *mut self::MidiRW, filename: *const c_char) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn MidiRW_close(this: *mut self::MidiRW) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}read"]
        pub fn MidiRW_read(
            this: *mut self::MidiRW,
            msg: *mut self::MidiMsg,
            time: *mut f64,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn MidiRW_write(
            this: *mut self::MidiRW,
            msg: *mut self::MidiMsg,
            time: *mut f64,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}MidiRW"]
        pub fn MidiRW_MidiRW(this: *mut self::MidiRW);
    }
    extern "C" {
        #[link_name = "\u{1}MidiRW_destructor"]
        pub fn MidiRW_MidiRW_destructor(this: *mut self::MidiRW);
    }
    impl Default for MidiRW {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl MidiRW {
        #[inline]
        pub unsafe fn open(&mut self, filename: *const c_char) -> c_ulong {
            MidiRW_open(self, filename)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> c_ulong {
            MidiRW_close(self)
        }
        #[inline]
        pub unsafe fn read(&mut self, msg: *mut self::MidiMsg, time: *mut f64) -> c_ulong {
            MidiRW_read(self, msg, time)
        }
        #[inline]
        pub unsafe fn write(&mut self, msg: *mut self::MidiMsg, time: *mut f64) -> c_ulong {
            MidiRW_write(self, msg, time)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            MidiRW_MidiRW(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiRW_MidiRW_destructor(self)
        }
    }
    extern "C" {
        pub fn midirw_detach() -> c_ulong;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiMsgOut {
        pub file: *mut self::FILE,
    }
    #[test]
    fn bindgen_test_layout_MidiMsgOut() {
        assert_eq!(
            size_of::<MidiMsgOut>(),
            8usize,
            concat!("Size of: ", stringify!(MidiMsgOut))
        );
        assert_eq!(
            align_of::<MidiMsgOut>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiMsgOut))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiMsgOut>())).file as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiMsgOut),
                "::",
                stringify!(file)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiMsgOut_open(this: *mut self::MidiMsgOut, filename: *const c_char) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn MidiMsgOut_close(this: *mut self::MidiMsgOut) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}write"]
        pub fn MidiMsgOut_write(
            this: *mut self::MidiMsgOut,
            msg: *mut self::MidiMsg,
            time: *mut f64,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}MidiMsgOut"]
        pub fn MidiMsgOut_MidiMsgOut(this: *mut self::MidiMsgOut);
    }
    extern "C" {
        #[link_name = "\u{1}MidiMsgOut_destructor"]
        pub fn MidiMsgOut_MidiMsgOut_destructor(this: *mut self::MidiMsgOut);
    }
    impl Default for MidiMsgOut {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl MidiMsgOut {
        #[inline]
        pub unsafe fn open(&mut self, filename: *const c_char) -> c_ulong {
            MidiMsgOut_open(self, filename)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> c_ulong {
            MidiMsgOut_close(self)
        }
        #[inline]
        pub unsafe fn write(&mut self, msg: *mut self::MidiMsg, time: *mut f64) -> c_ulong {
            MidiMsgOut_write(self, msg, time)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            MidiMsgOut_MidiMsgOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiMsgOut_MidiMsgOut_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiMsgIn {
        pub file: *mut self::FILE,
    }
    #[test]
    fn bindgen_test_layout_MidiMsgIn() {
        assert_eq!(
            size_of::<MidiMsgIn>(),
            8usize,
            concat!("Size of: ", stringify!(MidiMsgIn))
        );
        assert_eq!(
            align_of::<MidiMsgIn>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiMsgIn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiMsgIn>())).file as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiMsgIn),
                "::",
                stringify!(file)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}open"]
        pub fn MidiMsgIn_open(this: *mut self::MidiMsgIn, filename: *const c_char) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}close"]
        pub fn MidiMsgIn_close(this: *mut self::MidiMsgIn) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}read"]
        pub fn MidiMsgIn_read(
            this: *mut self::MidiMsgIn,
            msg: *mut self::MidiMsg,
            time: *mut f64,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}MidiMsgIn"]
        pub fn MidiMsgIn_MidiMsgIn(this: *mut self::MidiMsgIn);
    }
    extern "C" {
        #[link_name = "\u{1}MidiMsgIn_destructor"]
        pub fn MidiMsgIn_MidiMsgIn_destructor(this: *mut self::MidiMsgIn);
    }
    impl Default for MidiMsgIn {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl MidiMsgIn {
        #[inline]
        pub unsafe fn open(&mut self, filename: *const c_char) -> c_ulong {
            MidiMsgIn_open(self, filename)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> c_ulong {
            MidiMsgIn_close(self)
        }
        #[inline]
        pub unsafe fn read(&mut self, msg: *mut self::MidiMsg, time: *mut f64) -> c_ulong {
            MidiMsgIn_read(self, msg, time)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            MidiMsgIn_MidiMsgIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiMsgIn_MidiMsgIn_destructor(self)
        }
    }
    #[repr(C)]
    pub struct ChucK__bindgen_vtable(c_void);
    #[repr(C)]
    pub struct ChucK {
        pub vtable_: *const ChucK__bindgen_vtable,
        pub m_carrier: *mut self::Chuck_Carrier,
        pub m_params: self::std::map,
        pub m_listParams: self::std::map,
        pub m_init: c_ulong,
    }
    extern "C" {
        #[link_name = "\u{1}o_isGlobalInit"]
        pub static mut ChucK_o_isGlobalInit: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}enableSystemCall"]
        pub static mut ChucK_enableSystemCall: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}VERSION"]
        pub static mut ChucK_VERSION: [c_char; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}o_numVMs"]
        pub static mut ChucK_o_numVMs: c_ulong;
    }
    #[test]
    fn bindgen_test_layout_ChucK() {
        assert_eq!(
            size_of::<ChucK>(),
            120usize,
            concat!("Size of: ", stringify!(ChucK))
        );
        assert_eq!(
            align_of::<ChucK>(),
            8usize,
            concat!("Alignment of ", stringify!(ChucK))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChucK>())).m_carrier as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ChucK),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChucK>())).m_params as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ChucK),
                "::",
                stringify!(m_params)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChucK>())).m_listParams as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ChucK),
                "::",
                stringify!(m_listParams)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChucK>())).m_init as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ChucK),
                "::",
                stringify!(m_init)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}setParam"]
        pub fn ChucK_setParam(
            this: *mut self::ChucK,
            name: *const self::std::__cxx11::string,
            value: c_long,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}setParamFloat"]
        pub fn ChucK_setParamFloat(
            this: *mut self::ChucK,
            name: *const self::std::__cxx11::string,
            value: f64,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}setParam"]
        pub fn ChucK_setParam1(
            this: *mut self::ChucK,
            name: *const self::std::__cxx11::string,
            value: *const self::std::__cxx11::string,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}setParam"]
        pub fn ChucK_setParam2(
            this: *mut self::ChucK,
            name: *const self::std::__cxx11::string,
            value: *const self::std::__cxx11::list,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}getParamInt"]
        pub fn ChucK_getParamInt(
            this: *mut self::ChucK,
            key: *const self::std::__cxx11::string,
        ) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}getParamFloat"]
        pub fn ChucK_getParamFloat(
            this: *mut self::ChucK,
            key: *const self::std::__cxx11::string,
        ) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}getParamString"]
        pub fn ChucK_getParamString(
            this: *mut self::ChucK,
            key: *const self::std::__cxx11::string,
        ) -> self::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}getParamStringList"]
        pub fn ChucK_getParamStringList(
            this: *mut self::ChucK,
            key: *const self::std::__cxx11::string,
        ) -> self::std::__cxx11::list;
    }
    extern "C" {
        #[link_name = "\u{1}compileFile"]
        pub fn ChucK_compileFile(
            this: *mut self::ChucK,
            path: *const self::std::__cxx11::string,
            argsTogether: *const self::std::__cxx11::string,
            count: c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}compileCode"]
        pub fn ChucK_compileCode(
            this: *mut self::ChucK,
            code: *const self::std::__cxx11::string,
            argsTogether: *const self::std::__cxx11::string,
            count: c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn ChucK_init(this: *mut self::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}start"]
        pub fn ChucK_start(this: *mut self::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}run"]
        pub fn ChucK_run(
            this: *mut self::ChucK,
            input: *mut f64,
            output: *mut f64,
            numFrames: c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}bind"]
        pub fn ChucK_bind(
            this: *mut self::ChucK,
            queryFunc: self::f_ck_query,
            name: *const self::std::__cxx11::string,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}setGlobalInt"]
        pub fn ChucK_setGlobalInt(
            this: *mut self::ChucK,
            name: *const c_char,
            val: c_long,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}getGlobalInt"]
        pub fn ChucK_getGlobalInt(
            this: *mut self::ChucK,
            name: *const c_char,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: c_long)>,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}setGlobalFloat"]
        pub fn ChucK_setGlobalFloat(
            this: *mut self::ChucK,
            name: *const c_char,
            val: f64,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}getGlobalFloat"]
        pub fn ChucK_getGlobalFloat(
            this: *mut self::ChucK,
            name: *const c_char,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: f64)>,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}signalGlobalEvent"]
        pub fn ChucK_signalGlobalEvent(this: *mut self::ChucK, name: *const c_char) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}broadcastGlobalEvent"]
        pub fn ChucK_broadcastGlobalEvent(this: *mut self::ChucK, name: *const c_char) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}setChoutCallback"]
        pub fn ChucK_setChoutCallback(
            this: *mut self::ChucK,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}setCherrCallback"]
        pub fn ChucK_setCherrCallback(
            this: *mut self::ChucK,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}setStdoutCallback"]
        pub fn ChucK_setStdoutCallback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}setStderrCallback"]
        pub fn ChucK_setStderrCallback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}globalInit"]
        pub fn ChucK_globalInit() -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}globalCleanup"]
        pub fn ChucK_globalCleanup();
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn ChucK_shutdown(this: *mut self::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}version"]
        pub fn ChucK_version() -> *const c_char;
    }
    extern "C" {
        #[link_name = "\u{1}intSize"]
        pub fn ChucK_intSize() -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}poop"]
        pub fn ChucK_poop();
    }
    extern "C" {
        #[link_name = "\u{1}setLogLevel"]
        pub fn ChucK_setLogLevel(level: c_long);
    }
    extern "C" {
        #[link_name = "\u{1}getLogLevel"]
        pub fn ChucK_getLogLevel() -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}initDefaultParams"]
        pub fn ChucK_initDefaultParams(this: *mut self::ChucK);
    }
    extern "C" {
        #[link_name = "\u{1}initVM"]
        pub fn ChucK_initVM(this: *mut self::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}initCompiler"]
        pub fn ChucK_initCompiler(this: *mut self::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}initChugins"]
        pub fn ChucK_initChugins(this: *mut self::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}initOTF"]
        pub fn ChucK_initOTF(this: *mut self::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}ChucK"]
        pub fn ChucK_ChucK(this: *mut self::ChucK);
    }
    impl Default for ChucK {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for ChucK {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ChucK {{ m_carrier: {:?}, m_params: {:?}, m_listParams: {:?}, m_init: {:?} }}",
                self.m_carrier, self.m_params, self.m_listParams, self.m_init
            )
        }
    }
    impl ChucK {
        #[inline]
        pub unsafe fn setParam(
            &mut self,
            name: *const self::std::__cxx11::string,
            value: c_long,
        ) -> bool {
            ChucK_setParam(self, name, value)
        }
        #[inline]
        pub unsafe fn setParamFloat(
            &mut self,
            name: *const self::std::__cxx11::string,
            value: f64,
        ) -> bool {
            ChucK_setParamFloat(self, name, value)
        }
        #[inline]
        pub unsafe fn setParam1(
            &mut self,
            name: *const self::std::__cxx11::string,
            value: *const self::std::__cxx11::string,
        ) -> bool {
            ChucK_setParam1(self, name, value)
        }
        #[inline]
        pub unsafe fn setParam2(
            &mut self,
            name: *const self::std::__cxx11::string,
            value: *const self::std::__cxx11::list,
        ) -> bool {
            ChucK_setParam2(self, name, value)
        }
        #[inline]
        pub unsafe fn getParamInt(&mut self, key: *const self::std::__cxx11::string) -> c_long {
            ChucK_getParamInt(self, key)
        }
        #[inline]
        pub unsafe fn getParamFloat(&mut self, key: *const self::std::__cxx11::string) -> f64 {
            ChucK_getParamFloat(self, key)
        }
        #[inline]
        pub unsafe fn getParamString(
            &mut self,
            key: *const self::std::__cxx11::string,
        ) -> self::std::__cxx11::string {
            ChucK_getParamString(self, key)
        }
        #[inline]
        pub unsafe fn getParamStringList(
            &mut self,
            key: *const self::std::__cxx11::string,
        ) -> self::std::__cxx11::list {
            ChucK_getParamStringList(self, key)
        }
        #[inline]
        pub unsafe fn compileFile(
            &mut self,
            path: *const self::std::__cxx11::string,
            argsTogether: *const self::std::__cxx11::string,
            count: c_int,
        ) -> bool {
            ChucK_compileFile(self, path, argsTogether, count)
        }
        #[inline]
        pub unsafe fn compileCode(
            &mut self,
            code: *const self::std::__cxx11::string,
            argsTogether: *const self::std::__cxx11::string,
            count: c_int,
        ) -> bool {
            ChucK_compileCode(self, code, argsTogether, count)
        }
        #[inline]
        pub unsafe fn init(&mut self) -> bool {
            ChucK_init(self)
        }
        #[inline]
        pub unsafe fn start(&mut self) -> bool {
            ChucK_start(self)
        }
        #[inline]
        pub unsafe fn run(&mut self, input: *mut f64, output: *mut f64, numFrames: c_int) {
            ChucK_run(self, input, output, numFrames)
        }
        #[inline]
        pub unsafe fn bind(
            &mut self,
            queryFunc: self::f_ck_query,
            name: *const self::std::__cxx11::string,
        ) -> bool {
            ChucK_bind(self, queryFunc, name)
        }
        #[inline]
        pub unsafe fn setGlobalInt(&mut self, name: *const c_char, val: c_long) -> c_ulong {
            ChucK_setGlobalInt(self, name, val)
        }
        #[inline]
        pub unsafe fn getGlobalInt(
            &mut self,
            name: *const c_char,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: c_long)>,
        ) -> c_ulong {
            ChucK_getGlobalInt(self, name, callback)
        }
        #[inline]
        pub unsafe fn setGlobalFloat(&mut self, name: *const c_char, val: f64) -> c_ulong {
            ChucK_setGlobalFloat(self, name, val)
        }
        #[inline]
        pub unsafe fn getGlobalFloat(
            &mut self,
            name: *const c_char,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: f64)>,
        ) -> c_ulong {
            ChucK_getGlobalFloat(self, name, callback)
        }
        #[inline]
        pub unsafe fn signalGlobalEvent(&mut self, name: *const c_char) -> c_ulong {
            ChucK_signalGlobalEvent(self, name)
        }
        #[inline]
        pub unsafe fn broadcastGlobalEvent(&mut self, name: *const c_char) -> c_ulong {
            ChucK_broadcastGlobalEvent(self, name)
        }
        #[inline]
        pub unsafe fn setChoutCallback(
            &mut self,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) -> c_ulong {
            ChucK_setChoutCallback(self, callback)
        }
        #[inline]
        pub unsafe fn setCherrCallback(
            &mut self,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) -> c_ulong {
            ChucK_setCherrCallback(self, callback)
        }
        #[inline]
        pub unsafe fn setStdoutCallback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) -> c_ulong {
            ChucK_setStdoutCallback(callback)
        }
        #[inline]
        pub unsafe fn setStderrCallback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const c_char)>,
        ) -> c_ulong {
            ChucK_setStderrCallback(callback)
        }
        #[inline]
        pub unsafe fn globalInit() -> c_ulong {
            ChucK_globalInit()
        }
        #[inline]
        pub unsafe fn globalCleanup() {
            ChucK_globalCleanup()
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> bool {
            ChucK_shutdown(self)
        }
        #[inline]
        pub unsafe fn version() -> *const c_char {
            ChucK_version()
        }
        #[inline]
        pub unsafe fn intSize() -> c_ulong {
            ChucK_intSize()
        }
        #[inline]
        pub unsafe fn poop() {
            ChucK_poop()
        }
        #[inline]
        pub unsafe fn setLogLevel(level: c_long) {
            ChucK_setLogLevel(level)
        }
        #[inline]
        pub unsafe fn getLogLevel() -> c_long {
            ChucK_getLogLevel()
        }
        #[inline]
        pub unsafe fn initDefaultParams(&mut self) {
            ChucK_initDefaultParams(self)
        }
        #[inline]
        pub unsafe fn initVM(&mut self) -> bool {
            ChucK_initVM(self)
        }
        #[inline]
        pub unsafe fn initCompiler(&mut self) -> bool {
            ChucK_initCompiler(self)
        }
        #[inline]
        pub unsafe fn initChugins(&mut self) -> bool {
            ChucK_initChugins(self)
        }
        #[inline]
        pub unsafe fn initOTF(&mut self) -> bool {
            ChucK_initOTF(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            ChucK_ChucK(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}ChucK_destructor"]
        pub fn ChucK_ChucK_destructor(this: *mut self::ChucK);
    }
    #[repr(C)]
    pub struct RtError {
        pub _base: self::std::exception,
        pub message_: self::std::__cxx11::string,
        pub type_: self::RtError_Type,
    }
    #[doc = "< A non-critical error."]
    pub const RtError_Type_WARNING: self::RtError_Type = 0;
    #[doc = "< A non-critical error which might be useful for debugging."]
    pub const RtError_Type_DEBUG_WARNING: self::RtError_Type = 1;
    #[doc = "< The default, unspecified error type."]
    pub const RtError_Type_UNSPECIFIED: self::RtError_Type = 2;
    #[doc = "< No devices found on system."]
    pub const RtError_Type_NO_DEVICES_FOUND: self::RtError_Type = 3;
    #[doc = "< An invalid device ID was specified."]
    pub const RtError_Type_INVALID_DEVICE: self::RtError_Type = 4;
    #[doc = "< An error occured during memory allocation."]
    pub const RtError_Type_MEMORY_ERROR: self::RtError_Type = 5;
    #[doc = "< An invalid parameter was specified to a function."]
    pub const RtError_Type_INVALID_PARAMETER: self::RtError_Type = 6;
    #[doc = "< The function was called incorrectly."]
    pub const RtError_Type_INVALID_USE: self::RtError_Type = 7;
    #[doc = "< A system driver error occured."]
    pub const RtError_Type_DRIVER_ERROR: self::RtError_Type = 8;
    #[doc = "< A system error occured."]
    pub const RtError_Type_SYSTEM_ERROR: self::RtError_Type = 9;
    #[doc = "< A thread error occured."]
    pub const RtError_Type_THREAD_ERROR: self::RtError_Type = 10;
    #[doc = "! Defined RtError types."]
    pub type RtError_Type = u32;
    #[test]
    fn bindgen_test_layout_RtError() {
        assert_eq!(
            size_of::<RtError>(),
            48usize,
            concat!("Size of: ", stringify!(RtError))
        );
        assert_eq!(
            align_of::<RtError>(),
            8usize,
            concat!("Alignment of ", stringify!(RtError))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtError>())).message_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtError),
                "::",
                stringify!(message_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtError>())).type_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RtError),
                "::",
                stringify!(type_)
            )
        );
    }
    impl Default for RtError {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "RtError {{ message_: {:?}, type_: {:?} }}",
                self.message_, self.type_
            )
        }
    }
    extern "C" {
        pub static VERSION: self::std::__cxx11::string;
    }
    #[doc = " \\typedef typedef unsigned long RtAudioFormat;"]
    #[doc = "\\brief RtAudio data format type."]
    #[doc = ""]
    #[doc = "Support for signed integers and floats.  Audio data fed to/from an"]
    #[doc = "RtAudio stream is assumed to ALWAYS be in host byte order.  The"]
    #[doc = "internal routines will automatically take care of any necessary"]
    #[doc = "byte-swapping between the host format and the soundcard.  Thus,"]
    #[doc = "endian-ness is not a concern in the following format definitions."]
    #[doc = ""]
    #[doc = "- \\e RTAUDIO_SINT8:   8-bit signed integer."]
    #[doc = "- \\e RTAUDIO_SINT16:  16-bit signed integer."]
    #[doc = "- \\e RTAUDIO_SINT24:  24-bit signed integer."]
    #[doc = "- \\e RTAUDIO_SINT32:  32-bit signed integer."]
    #[doc = "- \\e RTAUDIO_FLOAT32: Normalized between plus/minus 1.0."]
    #[doc = "- \\e RTAUDIO_FLOAT64: Normalized between plus/minus 1.0."]
    pub type RtAudioFormat = c_ulong;
    pub const RTAUDIO_SINT8: self::RtAudioFormat = 1;
    pub const RTAUDIO_SINT16: self::RtAudioFormat = 2;
    pub const RTAUDIO_SINT24: self::RtAudioFormat = 4;
    pub const RTAUDIO_SINT32: self::RtAudioFormat = 8;
    pub const RTAUDIO_FLOAT32: self::RtAudioFormat = 16;
    pub const RTAUDIO_FLOAT64: self::RtAudioFormat = 32;
    #[doc = " \\typedef typedef unsigned long RtAudioStreamFlags;"]
    #[doc = "\\brief RtAudio stream option flags."]
    #[doc = ""]
    #[doc = "The following flags can be OR\'ed together to allow a client to"]
    #[doc = "make changes to the default stream behavior:"]
    #[doc = ""]
    #[doc = "- \\e RTAUDIO_NONINTERLEAVED:   Use non-interleaved buffers (default = interleaved)."]
    #[doc = "- \\e RTAUDIO_MINIMIZE_LATENCY: Attempt to set stream parameters for lowest possible latency."]
    #[doc = "- \\e RTAUDIO_HOG_DEVICE:       Attempt grab device for exclusive use."]
    #[doc = "- \\e RTAUDIO_ALSA_USE_DEFAULT: Use the \"default\" PCM device (ALSA only)."]
    #[doc = ""]
    #[doc = "By default, RtAudio streams pass and receive audio data from the"]
    #[doc = "client in an interleaved format.  By passing the"]
    #[doc = "RTAUDIO_NONINTERLEAVED flag to the openStream() function, audio"]
    #[doc = "data will instead be presented in non-interleaved buffers.  In"]
    #[doc = "this case, each buffer argument in the RtAudioCallback function"]
    #[doc = "will point to a single array of data, with \\c nFrames samples for"]
    #[doc = "each channel concatenated back-to-back.  For example, the first"]
    #[doc = "sample of data for the second channel would be located at index \\c"]
    #[doc = "nFrames (assuming the \\c buffer pointer was recast to the correct"]
    #[doc = "data type for the stream)."]
    #[doc = ""]
    #[doc = "Certain audio APIs offer a number of parameters that influence the"]
    #[doc = "I/O latency of a stream.  By default, RtAudio will attempt to set"]
    #[doc = "these parameters internally for robust (glitch-free) performance"]
    #[doc = "(though some APIs, like Windows Direct Sound, make this difficult)."]
    #[doc = "By passing the RTAUDIO_MINIMIZE_LATENCY flag to the openStream()"]
    #[doc = "function, internal stream settings will be influenced in an attempt"]
    #[doc = "to minimize stream latency, though possibly at the expense of stream"]
    #[doc = "performance."]
    #[doc = ""]
    #[doc = "If the RTAUDIO_HOG_DEVICE flag is set, RtAudio will attempt to"]
    #[doc = "open the input and/or output stream device(s) for exclusive use."]
    #[doc = "Note that this is not possible with all supported audio APIs."]
    #[doc = ""]
    #[doc = "If the RTAUDIO_SCHEDULE_REALTIME flag is set, RtAudio will attempt"]
    #[doc = "to select realtime scheduling (round-robin) for the callback thread."]
    #[doc = ""]
    #[doc = "If the RTAUDIO_ALSA_USE_DEFAULT flag is set, RtAudio will attempt to"]
    #[doc = "open the \"default\" PCM device when using the ALSA API. Note that this"]
    #[doc = "will override any specified input or output device id."]
    pub type RtAudioStreamFlags = c_uint;
    pub const RTAUDIO_NONINTERLEAVED: self::RtAudioStreamFlags = 1;
    pub const RTAUDIO_MINIMIZE_LATENCY: self::RtAudioStreamFlags = 2;
    pub const RTAUDIO_HOG_DEVICE: self::RtAudioStreamFlags = 4;
    pub const RTAUDIO_SCHEDULE_REALTIME: self::RtAudioStreamFlags = 8;
    pub const RTAUDIO_ALSA_USE_DEFAULT: self::RtAudioStreamFlags = 16;
    #[doc = " \\typedef typedef unsigned long RtAudioStreamStatus;"]
    #[doc = "\\brief RtAudio stream status (over- or underflow) flags."]
    #[doc = ""]
    #[doc = "Notification of a stream over- or underflow is indicated by a"]
    #[doc = "non-zero stream \\c status argument in the RtAudioCallback function."]
    #[doc = "The stream status can be one of the following two options,"]
    #[doc = "depending on whether the stream is open for output and/or input:"]
    #[doc = ""]
    #[doc = "- \\e RTAUDIO_INPUT_OVERFLOW:   Input data was discarded because of an overflow condition at the driver."]
    #[doc = "- \\e RTAUDIO_OUTPUT_UNDERFLOW: The output buffer ran low, likely producing a break in the output sound."]
    pub type RtAudioStreamStatus = c_uint;
    pub const RTAUDIO_INPUT_OVERFLOW: self::RtAudioStreamStatus = 1;
    pub const RTAUDIO_OUTPUT_UNDERFLOW: self::RtAudioStreamStatus = 2;
    #[doc = "! RtAudio callback function prototype."]
    #[doc = "*!"]
    #[doc = "All RtAudio clients must create a function of type RtAudioCallback"]
    #[doc = "to read and/or write data from/to the audio stream.  When the"]
    #[doc = "underlying audio system is ready for new input or output data, this"]
    #[doc = "function will be invoked."]
    #[doc = ""]
    #[doc = "\\param outputBuffer For output (or duplex) streams, the client"]
    #[doc = "should write \\c nFrames of audio sample frames into this"]
    #[doc = "buffer.  This argument should be recast to the datatype"]
    #[doc = "specified when the stream was opened.  For input-only"]
    #[doc = "streams, this argument will be NULL."]
    #[doc = ""]
    #[doc = "\\param inputBuffer For input (or duplex) streams, this buffer will"]
    #[doc = "hold \\c nFrames of input audio sample frames.  This"]
    #[doc = "argument should be recast to the datatype specified when the"]
    #[doc = "stream was opened.  For output-only streams, this argument"]
    #[doc = "will be NULL."]
    #[doc = ""]
    #[doc = "\\param nFrames The number of sample frames of input or output"]
    #[doc = "data in the buffers.  The actual buffer size in bytes is"]
    #[doc = "dependent on the data type and number of channels in use."]
    #[doc = ""]
    #[doc = "\\param streamTime The number of seconds that have elapsed since the"]
    #[doc = "stream was started."]
    #[doc = ""]
    #[doc = "\\param status If non-zero, this argument indicates a data overflow"]
    #[doc = "or underflow condition for the stream.  The particular"]
    #[doc = "condition can be determined by comparison with the"]
    #[doc = "RtAudioStreamStatus flags."]
    #[doc = ""]
    #[doc = "\\param userData A pointer to optional data provided by the client"]
    #[doc = "when opening the stream (default = NULL)."]
    #[doc = ""]
    #[doc = "To continue normal stream operation, the RtAudioCallback function"]
    #[doc = "should return a value of zero.  To stop the stream and drain the"]
    #[doc = "output buffer, the function should return a value of one.  To abort"]
    #[doc = "the stream immediately, the client should return a value of two."]
    #[doc = "*/"]
    pub type RtAudioCallback = ::std::option::Option<
        unsafe extern "C" fn(
            outputBuffer: *mut c_void,
            inputBuffer: *mut c_void,
            nFrames: c_uint,
            streamTime: f64,
            status: self::RtAudioStreamStatus,
            userData: *mut c_void,
        ) -> c_int,
    >;
    #[doc = "! RtAudio error callback function prototype."]
    #[doc = "*!"]
    #[doc = "\\param type Type of error."]
    #[doc = "\\param errorText Error description."]
    #[doc = "*/"]
    pub type RtAudioErrorCallback = ::std::option::Option<
        unsafe extern "C" fn(
            type_: self::RtError_Type,
            errorText: *const self::std::__cxx11::string,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct RtAudio {
        pub rtapi_: *mut self::RtApi,
    }
    #[doc = "< Search for a working compiled API."]
    pub const RtAudio_Api_UNSPECIFIED: self::RtAudio_Api = 0;
    #[doc = "< The Advanced Linux Sound Architecture API."]
    pub const RtAudio_Api_LINUX_ALSA: self::RtAudio_Api = 1;
    #[doc = "< The Linux PulseAudio API."]
    pub const RtAudio_Api_LINUX_PULSE: self::RtAudio_Api = 2;
    #[doc = "< The Linux Open Sound System API."]
    pub const RtAudio_Api_LINUX_OSS: self::RtAudio_Api = 3;
    #[doc = "< The Jack Low-Latency Audio Server API."]
    pub const RtAudio_Api_UNIX_JACK: self::RtAudio_Api = 4;
    #[doc = "< Macintosh OS-X Core Audio API."]
    pub const RtAudio_Api_MACOSX_CORE: self::RtAudio_Api = 5;
    #[doc = "< The Steinberg Audio Stream I/O API."]
    pub const RtAudio_Api_WINDOWS_ASIO: self::RtAudio_Api = 6;
    #[doc = "< The Microsoft Direct Sound API."]
    pub const RtAudio_Api_WINDOWS_DS: self::RtAudio_Api = 7;
    #[doc = "< A compilable but non-functional API."]
    pub const RtAudio_Api_RTAUDIO_DUMMY: self::RtAudio_Api = 8;
    #[doc = "! Audio API specifier arguments."]
    pub type RtAudio_Api = u32;
    #[doc = "! The public device information structure for returning queried values."]
    #[repr(C)]
    pub struct RtAudio_DeviceInfo {
        #[doc = "< true if the device capabilities were successfully probed."]
        pub probed: bool,
        #[doc = "< Character string device identifier."]
        pub name: self::std::__cxx11::string,
        #[doc = "< Maximum output channels supported by device."]
        pub outputChannels: c_uint,
        #[doc = "< Maximum input channels supported by device."]
        pub inputChannels: c_uint,
        #[doc = "< Maximum simultaneous input/output channels supported by device."]
        pub duplexChannels: c_uint,
        #[doc = "< true if this is the default output device."]
        pub isDefaultOutput: bool,
        #[doc = "< true if this is the default input device."]
        pub isDefaultInput: bool,
        #[doc = "< Supported sample rates (queried from list of standard rates)."]
        pub sampleRates: self::std::vector,
        #[doc = "< Bit mask of supported data formats."]
        pub nativeFormats: self::RtAudioFormat,
    }
    #[test]
    fn bindgen_test_layout_RtAudio_DeviceInfo() {
        assert_eq!(
            size_of::<RtAudio_DeviceInfo>(),
            88usize,
            concat!("Size of: ", stringify!(RtAudio_DeviceInfo))
        );
        assert_eq!(
            align_of::<RtAudio_DeviceInfo>(),
            8usize,
            concat!("Alignment of ", stringify!(RtAudio_DeviceInfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).probed as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(probed)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).name as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).outputChannels as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(outputChannels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).inputChannels as *const _ as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(inputChannels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).duplexChannels as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(duplexChannels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).isDefaultOutput as *const _ as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(isDefaultOutput)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).isDefaultInput as *const _ as usize
            },
            53usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(isDefaultInput)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).sampleRates as *const _ as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(sampleRates)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_DeviceInfo>())).nativeFormats as *const _ as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_DeviceInfo),
                "::",
                stringify!(nativeFormats)
            )
        );
    }
    impl Default for RtAudio_DeviceInfo {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtAudio_DeviceInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "RtAudio_DeviceInfo {{ probed: {:?}, name: {:?}, outputChannels: {:?}, inputChannels: {:?}, duplexChannels: {:?}, isDefaultOutput: {:?}, isDefaultInput: {:?}, sampleRates: {:?}, nativeFormats: {:?} }}" , self . probed , self . name , self . outputChannels , self . inputChannels , self . duplexChannels , self . isDefaultOutput , self . isDefaultInput , self . sampleRates , self . nativeFormats )
        }
    }
    #[doc = "! The structure for specifying input or ouput stream parameters."]
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct RtAudio_StreamParameters {
        #[doc = "< Device index (0 to getDeviceCount() - 1)."]
        pub deviceId: c_uint,
        #[doc = "< Number of channels."]
        pub nChannels: c_uint,
        #[doc = "< First channel index on device (default = 0)."]
        pub firstChannel: c_uint,
    }
    #[test]
    fn bindgen_test_layout_RtAudio_StreamParameters() {
        assert_eq!(
            size_of::<RtAudio_StreamParameters>(),
            12usize,
            concat!("Size of: ", stringify!(RtAudio_StreamParameters))
        );
        assert_eq!(
            align_of::<RtAudio_StreamParameters>(),
            4usize,
            concat!("Alignment of ", stringify!(RtAudio_StreamParameters))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_StreamParameters>())).deviceId as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_StreamParameters),
                "::",
                stringify!(deviceId)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_StreamParameters>())).nChannels as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_StreamParameters),
                "::",
                stringify!(nChannels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_StreamParameters>())).firstChannel as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_StreamParameters),
                "::",
                stringify!(firstChannel)
            )
        );
    }
    #[doc = "! The structure for specifying stream options."]
    #[doc = "*!"]
    #[doc = "The following flags can be OR\'ed together to allow a client to"]
    #[doc = "make changes to the default stream behavior:"]
    #[doc = ""]
    #[doc = "- \\e RTAUDIO_NONINTERLEAVED:    Use non-interleaved buffers (default = interleaved)."]
    #[doc = "- \\e RTAUDIO_MINIMIZE_LATENCY:  Attempt to set stream parameters for lowest possible latency."]
    #[doc = "- \\e RTAUDIO_HOG_DEVICE:        Attempt grab device for exclusive use."]
    #[doc = "- \\e RTAUDIO_SCHEDULE_REALTIME: Attempt to select realtime scheduling for callback thread."]
    #[doc = "- \\e RTAUDIO_ALSA_USE_DEFAULT:  Use the \"default\" PCM device (ALSA only)."]
    #[doc = ""]
    #[doc = "By default, RtAudio streams pass and receive audio data from the"]
    #[doc = "client in an interleaved format.  By passing the"]
    #[doc = "RTAUDIO_NONINTERLEAVED flag to the openStream() function, audio"]
    #[doc = "data will instead be presented in non-interleaved buffers.  In"]
    #[doc = "this case, each buffer argument in the RtAudioCallback function"]
    #[doc = "will point to a single array of data, with \\c nFrames samples for"]
    #[doc = "each channel concatenated back-to-back.  For example, the first"]
    #[doc = "sample of data for the second channel would be located at index \\c"]
    #[doc = "nFrames (assuming the \\c buffer pointer was recast to the correct"]
    #[doc = "data type for the stream)."]
    #[doc = ""]
    #[doc = "Certain audio APIs offer a number of parameters that influence the"]
    #[doc = "I/O latency of a stream.  By default, RtAudio will attempt to set"]
    #[doc = "these parameters internally for robust (glitch-free) performance"]
    #[doc = "(though some APIs, like Windows Direct Sound, make this difficult)."]
    #[doc = "By passing the RTAUDIO_MINIMIZE_LATENCY flag to the openStream()"]
    #[doc = "function, internal stream settings will be influenced in an attempt"]
    #[doc = "to minimize stream latency, though possibly at the expense of stream"]
    #[doc = "performance."]
    #[doc = ""]
    #[doc = "If the RTAUDIO_HOG_DEVICE flag is set, RtAudio will attempt to"]
    #[doc = "open the input and/or output stream device(s) for exclusive use."]
    #[doc = "Note that this is not possible with all supported audio APIs."]
    #[doc = ""]
    #[doc = "If the RTAUDIO_SCHEDULE_REALTIME flag is set, RtAudio will attempt"]
    #[doc = "to select realtime scheduling (round-robin) for the callback thread."]
    #[doc = "The \\c priority parameter will only be used if the RTAUDIO_SCHEDULE_REALTIME"]
    #[doc = "flag is set. It defines the thread\'s realtime priority."]
    #[doc = ""]
    #[doc = "If the RTAUDIO_ALSA_USE_DEFAULT flag is set, RtAudio will attempt to"]
    #[doc = "open the \"default\" PCM device when using the ALSA API. Note that this"]
    #[doc = "will override any specified input or output device id."]
    #[doc = ""]
    #[doc = "The \\c numberOfBuffers parameter can be used to control stream"]
    #[doc = "latency in the Windows DirectSound, Linux OSS, and Linux Alsa APIs"]
    #[doc = "only.  A value of two is usually the smallest allowed.  Larger"]
    #[doc = "numbers can potentially result in more robust stream performance,"]
    #[doc = "though likely at the cost of stream latency.  The value set by the"]
    #[doc = "user is replaced during execution of the RtAudio::openStream()"]
    #[doc = "function by the value actually used by the system."]
    #[doc = ""]
    #[doc = "The \\c streamName parameter can be used to set the client name"]
    #[doc = "when using the Jack API.  By default, the client name is set to"]
    #[doc = "RtApiJack.  However, if you wish to create multiple instances of"]
    #[doc = "RtAudio with Jack, each instance must have a unique client name."]
    #[doc = "*/"]
    #[repr(C)]
    pub struct RtAudio_StreamOptions {
        #[doc = "< A bit-mask of stream flags (RTAUDIO_NONINTERLEAVED, RTAUDIO_MINIMIZE_LATENCY, RTAUDIO_HOG_DEVICE, RTAUDIO_ALSA_USE_DEFAULT)."]
        pub flags: self::RtAudioStreamFlags,
        #[doc = "< Number of stream buffers."]
        pub numberOfBuffers: c_uint,
        #[doc = "< A stream name (currently used only in Jack)."]
        pub streamName: self::std::__cxx11::string,
        #[doc = "< Scheduling priority of callback thread (only used with flag RTAUDIO_SCHEDULE_REALTIME)."]
        pub priority: c_int,
    }
    #[test]
    fn bindgen_test_layout_RtAudio_StreamOptions() {
        assert_eq!(
            size_of::<RtAudio_StreamOptions>(),
            48usize,
            concat!("Size of: ", stringify!(RtAudio_StreamOptions))
        );
        assert_eq!(
            align_of::<RtAudio_StreamOptions>(),
            8usize,
            concat!("Alignment of ", stringify!(RtAudio_StreamOptions))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtAudio_StreamOptions>())).flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_StreamOptions),
                "::",
                stringify!(flags)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_StreamOptions>())).numberOfBuffers as *const _
                    as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_StreamOptions),
                "::",
                stringify!(numberOfBuffers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_StreamOptions>())).streamName as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_StreamOptions),
                "::",
                stringify!(streamName)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtAudio_StreamOptions>())).priority as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio_StreamOptions),
                "::",
                stringify!(priority)
            )
        );
    }
    impl Default for RtAudio_StreamOptions {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtAudio_StreamOptions {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "RtAudio_StreamOptions {{ flags: {:?}, numberOfBuffers: {:?}, streamName: {:?}, priority: {:?} }}" , self . flags , self . numberOfBuffers , self . streamName , self . priority )
        }
    }
    #[test]
    fn bindgen_test_layout_RtAudio() {
        assert_eq!(
            size_of::<RtAudio>(),
            8usize,
            concat!("Size of: ", stringify!(RtAudio))
        );
        assert_eq!(
            align_of::<RtAudio>(),
            8usize,
            concat!("Alignment of ", stringify!(RtAudio))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtAudio>())).rtapi_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtAudio),
                "::",
                stringify!(rtapi_)
            )
        );
    }
    extern "C" {
        #[doc = "! A static function to determine the available compiled audio APIs."]
        #[doc = "*!"]
        #[doc = "The values returned in the std::vector can be compared against"]
        #[doc = "the enumerated list values.  Note that there can be more than one"]
        #[doc = "API compiled for certain operating systems."]
        #[doc = "*/"]
        #[link_name = "\u{1}getCompiledApi"]
        pub fn RtAudio_getCompiledApi(apis: *mut self::std::vector);
    }
    extern "C" {
        #[doc = "! Returns the audio API specifier for the current instance of RtAudio."]
        #[link_name = "\u{1}getCurrentApi"]
        pub fn RtAudio_getCurrentApi(this: *mut self::RtAudio) -> self::RtAudio_Api;
    }
    extern "C" {
        #[doc = "! A public function that queries for the number of audio devices available."]
        #[doc = "*!"]
        #[doc = "This function performs a system query of available devices each time it"]
        #[doc = "is called, thus supporting devices connected \\e after instantiation. If"]
        #[doc = "a system error occurs during processing, a warning will be issued."]
        #[doc = "*/"]
        #[link_name = "\u{1}getDeviceCount"]
        pub fn RtAudio_getDeviceCount(this: *mut self::RtAudio) -> c_uint;
    }
    extern "C" {
        #[doc = "! Return an RtAudio::DeviceInfo structure for a specified device number."]
        #[doc = "*!"]
        #[doc = ""]
        #[doc = "Any device integer between 0 and getDeviceCount() - 1 is valid."]
        #[doc = "If an invalid argument is provided, an RtError (type = INVALID_USE)"]
        #[doc = "will be thrown.  If a device is busy or otherwise unavailable, the"]
        #[doc = "structure member \"probed\" will have a value of \"false\" and all"]
        #[doc = "other members are undefined.  If the specified device is the"]
        #[doc = "current default input or output device, the corresponding"]
        #[doc = "\"isDefault\" member will have a value of \"true\"."]
        #[doc = "*/"]
        #[link_name = "\u{1}getDeviceInfo"]
        pub fn RtAudio_getDeviceInfo(
            this: *mut self::RtAudio,
            device: c_uint,
        ) -> self::RtAudio_DeviceInfo;
    }
    extern "C" {
        #[doc = "! A function that returns the index of the default output device."]
        #[doc = "*!"]
        #[doc = "If the underlying audio API does not provide a \"default"]
        #[doc = "device\", or if no devices are available, the return value will be"]
        #[doc = "0.  Note that this is a valid device identifier and it is the"]
        #[doc = "client\'s responsibility to verify that a device is available"]
        #[doc = "before attempting to open a stream."]
        #[doc = "*/"]
        #[link_name = "\u{1}getDefaultOutputDevice"]
        pub fn RtAudio_getDefaultOutputDevice(this: *mut self::RtAudio) -> c_uint;
    }
    extern "C" {
        #[doc = "! A function that returns the index of the default input device."]
        #[doc = "*!"]
        #[doc = "If the underlying audio API does not provide a \"default"]
        #[doc = "device\", or if no devices are available, the return value will be"]
        #[doc = "0.  Note that this is a valid device identifier and it is the"]
        #[doc = "client\'s responsibility to verify that a device is available"]
        #[doc = "before attempting to open a stream."]
        #[doc = "*/"]
        #[link_name = "\u{1}getDefaultInputDevice"]
        pub fn RtAudio_getDefaultInputDevice(this: *mut self::RtAudio) -> c_uint;
    }
    extern "C" {
        #[doc = "! A public function for opening a stream with the specified parameters."]
        #[doc = "*!"]
        #[doc = "An RtError (type = SYSTEM_ERROR) is thrown if a stream cannot be"]
        #[doc = "opened with the specified parameters or an error occurs during"]
        #[doc = "processing.  An RtError (type = INVALID_USE) is thrown if any"]
        #[doc = "invalid device ID or channel number parameters are specified."]
        #[doc = ""]
        #[doc = "\\param outputParameters Specifies output stream parameters to use"]
        #[doc = "when opening a stream, including a device ID, number of channels,"]
        #[doc = "and starting channel number.  For input-only streams, this"]
        #[doc = "argument should be NULL.  The device ID is an index value between"]
        #[doc = "0 and getDeviceCount() - 1."]
        #[doc = "\\param inputParameters Specifies input stream parameters to use"]
        #[doc = "when opening a stream, including a device ID, number of channels,"]
        #[doc = "and starting channel number.  For output-only streams, this"]
        #[doc = "argument should be NULL.  The device ID is an index value between"]
        #[doc = "0 and getDeviceCount() - 1."]
        #[doc = "\\param format An RtAudioFormat specifying the desired sample data format."]
        #[doc = "\\param sampleRate The desired sample rate (sample frames per second)."]
        #[doc = "\\param *bufferFrames A pointer to a value indicating the desired"]
        #[doc = "internal buffer size in sample frames.  The actual value"]
        #[doc = "used by the device is returned via the same pointer.  A"]
        #[doc = "value of zero can be specified, in which case the lowest"]
        #[doc = "allowable value is determined."]
        #[doc = "\\param callback A client-defined function that will be invoked"]
        #[doc = "when input data is available and/or output data is needed."]
        #[doc = "\\param userData An optional pointer to data that can be accessed"]
        #[doc = "from within the callback function."]
        #[doc = "\\param options An optional pointer to a structure containing various"]
        #[doc = "global stream options, including a list of OR\'ed RtAudioStreamFlags"]
        #[doc = "and a suggested number of stream buffers that can be used to"]
        #[doc = "control stream latency.  More buffers typically result in more"]
        #[doc = "robust performance, though at a cost of greater latency.  If a"]
        #[doc = "value of zero is specified, a system-specific median value is"]
        #[doc = "chosen.  If the RTAUDIO_MINIMIZE_LATENCY flag bit is set, the"]
        #[doc = "lowest allowable value is used.  The actual value used is"]
        #[doc = "returned via the structure argument.  The parameter is API dependent."]
        #[doc = "\\param errorCallback A client-defined function that will be invoked"]
        #[doc = "when an error has occured."]
        #[doc = "*/"]
        #[link_name = "\u{1}openStream"]
        pub fn RtAudio_openStream(
            this: *mut self::RtAudio,
            outputParameters: *mut self::RtAudio_StreamParameters,
            inputParameters: *mut self::RtAudio_StreamParameters,
            format: self::RtAudioFormat,
            sampleRate: c_uint,
            bufferFrames: *mut c_uint,
            callback: self::RtAudioCallback,
            userData: *mut c_void,
            options: *mut self::RtAudio_StreamOptions,
            errorCallback: self::RtAudioErrorCallback,
        );
    }
    extern "C" {
        #[doc = "! A function that closes a stream and frees any associated stream memory."]
        #[doc = "*!"]
        #[doc = "If a stream is not open, this function issues a warning and"]
        #[doc = "returns (no exception is thrown)."]
        #[doc = "*/"]
        #[link_name = "\u{1}closeStream"]
        pub fn RtAudio_closeStream(this: *mut self::RtAudio);
    }
    extern "C" {
        #[doc = "! A function that starts a stream."]
        #[doc = "*!"]
        #[doc = "An RtError (type = SYSTEM_ERROR) is thrown if an error occurs"]
        #[doc = "during processing.  An RtError (type = INVALID_USE) is thrown if a"]
        #[doc = "stream is not open.  A warning is issued if the stream is already"]
        #[doc = "running."]
        #[doc = "*/"]
        #[link_name = "\u{1}startStream"]
        pub fn RtAudio_startStream(this: *mut self::RtAudio);
    }
    extern "C" {
        #[doc = "! Stop a stream, allowing any samples remaining in the output queue to be played."]
        #[doc = "*!"]
        #[doc = "An RtError (type = SYSTEM_ERROR) is thrown if an error occurs"]
        #[doc = "during processing.  An RtError (type = INVALID_USE) is thrown if a"]
        #[doc = "stream is not open.  A warning is issued if the stream is already"]
        #[doc = "stopped."]
        #[doc = "*/"]
        #[link_name = "\u{1}stopStream"]
        pub fn RtAudio_stopStream(this: *mut self::RtAudio);
    }
    extern "C" {
        #[doc = "! Stop a stream, discarding any samples remaining in the input/output queue."]
        #[doc = "*!"]
        #[doc = "An RtError (type = SYSTEM_ERROR) is thrown if an error occurs"]
        #[doc = "during processing.  An RtError (type = INVALID_USE) is thrown if a"]
        #[doc = "stream is not open.  A warning is issued if the stream is already"]
        #[doc = "stopped."]
        #[doc = "*/"]
        #[link_name = "\u{1}abortStream"]
        pub fn RtAudio_abortStream(this: *mut self::RtAudio);
    }
    extern "C" {
        #[doc = "! Returns true if a stream is open and false if not."]
        #[link_name = "\u{1}isStreamOpen"]
        pub fn RtAudio_isStreamOpen(this: *const self::RtAudio) -> bool;
    }
    extern "C" {
        #[doc = "! Returns true if the stream is running and false if it is stopped or not open."]
        #[link_name = "\u{1}isStreamRunning"]
        pub fn RtAudio_isStreamRunning(this: *const self::RtAudio) -> bool;
    }
    extern "C" {
        #[doc = "! Returns the number of elapsed seconds since the stream was started."]
        #[doc = "*!"]
        #[doc = "If a stream is not open, an RtError (type = INVALID_USE) will be thrown."]
        #[doc = "*/"]
        #[link_name = "\u{1}getStreamTime"]
        pub fn RtAudio_getStreamTime(this: *mut self::RtAudio) -> f64;
    }
    extern "C" {
        #[doc = "! Returns the internal stream latency in sample frames."]
        #[doc = "*!"]
        #[doc = "The stream latency refers to delay in audio input and/or output"]
        #[doc = "caused by internal buffering by the audio system and/or hardware."]
        #[doc = "For duplex streams, the returned value will represent the sum of"]
        #[doc = "the input and output latencies.  If a stream is not open, an"]
        #[doc = "RtError (type = INVALID_USE) will be thrown.  If the API does not"]
        #[doc = "report latency, the return value will be zero."]
        #[doc = "*/"]
        #[link_name = "\u{1}getStreamLatency"]
        pub fn RtAudio_getStreamLatency(this: *mut self::RtAudio) -> c_long;
    }
    extern "C" {
        #[doc = "! Returns actual sample rate in use by the stream."]
        #[doc = "*!"]
        #[doc = "On some systems, the sample rate used may be slightly different"]
        #[doc = "than that specified in the stream parameters.  If a stream is not"]
        #[doc = "open, an RtError (type = INVALID_USE) will be thrown."]
        #[doc = "*/"]
        #[link_name = "\u{1}getStreamSampleRate"]
        pub fn RtAudio_getStreamSampleRate(this: *mut self::RtAudio) -> c_uint;
    }
    extern "C" {
        #[doc = "! Specify whether warning messages should be printed to stderr."]
        #[link_name = "\u{1}showWarnings"]
        pub fn RtAudio_showWarnings(this: *mut self::RtAudio, value: bool);
    }
    extern "C" {
        #[link_name = "\u{1}openRtApi"]
        pub fn RtAudio_openRtApi(this: *mut self::RtAudio, api: self::RtAudio_Api);
    }
    extern "C" {
        #[doc = "! The class constructor."]
        #[doc = "*!"]
        #[doc = "The constructor performs minor initialization tasks.  No exceptions"]
        #[doc = "can be thrown."]
        #[doc = ""]
        #[doc = "If no API argument is specified and multiple API support has been"]
        #[doc = "compiled, the default order of use is JACK, ALSA, OSS (Linux"]
        #[doc = "systems) and ASIO, DS (Windows systems)."]
        #[doc = "*/"]
        #[link_name = "\u{1}RtAudio"]
        pub fn RtAudio_RtAudio(this: *mut self::RtAudio, api: self::RtAudio_Api);
    }
    extern "C" {
        #[doc = "! The destructor."]
        #[doc = "*!"]
        #[doc = "If a stream is running or open, it will be stopped and closed"]
        #[doc = "automatically."]
        #[doc = "*/"]
        #[link_name = "\u{1}RtAudio_destructor"]
        pub fn RtAudio_RtAudio_destructor(this: *mut self::RtAudio);
    }
    impl Default for RtAudio {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl RtAudio {
        #[inline]
        pub unsafe fn getCompiledApi(apis: *mut self::std::vector) {
            RtAudio_getCompiledApi(apis)
        }
        #[inline]
        pub unsafe fn getCurrentApi(&mut self) -> self::RtAudio_Api {
            RtAudio_getCurrentApi(self)
        }
        #[inline]
        pub unsafe fn getDeviceCount(&mut self) -> c_uint {
            RtAudio_getDeviceCount(self)
        }
        #[inline]
        pub unsafe fn getDeviceInfo(&mut self, device: c_uint) -> self::RtAudio_DeviceInfo {
            RtAudio_getDeviceInfo(self, device)
        }
        #[inline]
        pub unsafe fn getDefaultOutputDevice(&mut self) -> c_uint {
            RtAudio_getDefaultOutputDevice(self)
        }
        #[inline]
        pub unsafe fn getDefaultInputDevice(&mut self) -> c_uint {
            RtAudio_getDefaultInputDevice(self)
        }
        #[inline]
        pub unsafe fn openStream(
            &mut self,
            outputParameters: *mut self::RtAudio_StreamParameters,
            inputParameters: *mut self::RtAudio_StreamParameters,
            format: self::RtAudioFormat,
            sampleRate: c_uint,
            bufferFrames: *mut c_uint,
            callback: self::RtAudioCallback,
            userData: *mut c_void,
            options: *mut self::RtAudio_StreamOptions,
            errorCallback: self::RtAudioErrorCallback,
        ) {
            RtAudio_openStream(
                self,
                outputParameters,
                inputParameters,
                format,
                sampleRate,
                bufferFrames,
                callback,
                userData,
                options,
                errorCallback,
            )
        }
        #[inline]
        pub unsafe fn closeStream(&mut self) {
            RtAudio_closeStream(self)
        }
        #[inline]
        pub unsafe fn startStream(&mut self) {
            RtAudio_startStream(self)
        }
        #[inline]
        pub unsafe fn stopStream(&mut self) {
            RtAudio_stopStream(self)
        }
        #[inline]
        pub unsafe fn abortStream(&mut self) {
            RtAudio_abortStream(self)
        }
        #[inline]
        pub unsafe fn isStreamOpen(&self) -> bool {
            RtAudio_isStreamOpen(self)
        }
        #[inline]
        pub unsafe fn isStreamRunning(&self) -> bool {
            RtAudio_isStreamRunning(self)
        }
        #[inline]
        pub unsafe fn getStreamTime(&mut self) -> f64 {
            RtAudio_getStreamTime(self)
        }
        #[inline]
        pub unsafe fn getStreamLatency(&mut self) -> c_long {
            RtAudio_getStreamLatency(self)
        }
        #[inline]
        pub unsafe fn getStreamSampleRate(&mut self) -> c_uint {
            RtAudio_getStreamSampleRate(self)
        }
        #[inline]
        pub unsafe fn showWarnings(&mut self, value: bool) {
            RtAudio_showWarnings(self, value)
        }
        #[inline]
        pub unsafe fn openRtApi(&mut self, api: self::RtAudio_Api) {
            RtAudio_openRtApi(self, api)
        }
        #[inline]
        pub unsafe fn new(api: self::RtAudio_Api) -> Self {
            let mut __bindgen_tmp = uninitialized();
            RtAudio_RtAudio(&mut __bindgen_tmp, api);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            RtAudio_RtAudio_destructor(self)
        }
    }
    pub type ThreadHandle = self::pthread_t;
    pub type StreamMutex = self::pthread_mutex_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct CallbackInfo {
        pub object: *mut c_void,
        pub thread: self::ThreadHandle,
        pub callback: *mut c_void,
        pub userData: *mut c_void,
        pub errorCallback: *mut c_void,
        pub apiInfo: *mut c_void,
        pub isRunning: bool,
        pub doRealtime: bool,
        pub priority: c_int,
    }
    #[test]
    fn bindgen_test_layout_CallbackInfo() {
        assert_eq!(
            size_of::<CallbackInfo>(),
            56usize,
            concat!("Size of: ", stringify!(CallbackInfo))
        );
        assert_eq!(
            align_of::<CallbackInfo>(),
            8usize,
            concat!("Alignment of ", stringify!(CallbackInfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).object as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(object)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).thread as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(thread)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).callback as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(callback)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).userData as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(userData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).errorCallback as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(errorCallback)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).apiInfo as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(apiInfo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).isRunning as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(isRunning)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).doRealtime as *const _ as usize },
            49usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(doRealtime)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CallbackInfo>())).priority as *const _ as usize },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(CallbackInfo),
                "::",
                stringify!(priority)
            )
        );
    }
    impl Default for CallbackInfo {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct S24 {
        pub c3: [c_uchar; 3usize],
    }
    #[test]
    fn bindgen_test_layout_S24() {
        assert_eq!(
            size_of::<S24>(),
            3usize,
            concat!("Size of: ", stringify!(S24))
        );
        assert_eq!(
            align_of::<S24>(),
            1usize,
            concat!("Alignment of ", stringify!(S24))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<S24>())).c3 as *const _ as usize },
            0usize,
            concat!("Offset of field: ", stringify!(S24), "::", stringify!(c3))
        );
    }
    #[repr(C)]
    pub struct RtApi__bindgen_vtable(c_void);
    #[repr(C)]
    pub struct RtApi {
        pub vtable_: *const RtApi__bindgen_vtable,
        pub errorStream_: self::std::ostringstream,
        pub errorText_: self::std::__cxx11::string,
        pub showWarnings_: bool,
        pub stream_: self::RtApi_RtApiStream,
    }
    pub const RtApi_FAILURE: self::RtApi__bindgen_ty_1 = 0;
    pub const RtApi_SUCCESS: self::RtApi__bindgen_ty_1 = 1;
    pub type RtApi__bindgen_ty_1 = u32;
    pub const RtApi_StreamState_STREAM_STOPPED: self::RtApi_StreamState = 0;
    pub const RtApi_StreamState_STREAM_STOPPING: self::RtApi_StreamState = 1;
    pub const RtApi_StreamState_STREAM_RUNNING: self::RtApi_StreamState = 2;
    pub const RtApi_StreamState_STREAM_CLOSED: self::RtApi_StreamState = -50;
    pub type RtApi_StreamState = i32;
    pub const RtApi_StreamMode_OUTPUT: self::RtApi_StreamMode = 0;
    pub const RtApi_StreamMode_INPUT: self::RtApi_StreamMode = 1;
    pub const RtApi_StreamMode_DUPLEX: self::RtApi_StreamMode = 2;
    pub const RtApi_StreamMode_UNINITIALIZED: self::RtApi_StreamMode = -75;
    pub type RtApi_StreamMode = i32;
    #[repr(C)]
    pub struct RtApi_ConvertInfo {
        pub channels: c_int,
        pub inJump: c_int,
        pub outJump: c_int,
        pub inFormat: self::RtAudioFormat,
        pub outFormat: self::RtAudioFormat,
        pub inOffset: self::std::vector,
        pub outOffset: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_RtApi_ConvertInfo() {
        assert_eq!(
            size_of::<RtApi_ConvertInfo>(),
            80usize,
            concat!("Size of: ", stringify!(RtApi_ConvertInfo))
        );
        assert_eq!(
            align_of::<RtApi_ConvertInfo>(),
            8usize,
            concat!("Alignment of ", stringify!(RtApi_ConvertInfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_ConvertInfo>())).channels as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_ConvertInfo),
                "::",
                stringify!(channels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_ConvertInfo>())).inJump as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_ConvertInfo),
                "::",
                stringify!(inJump)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_ConvertInfo>())).outJump as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_ConvertInfo),
                "::",
                stringify!(outJump)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_ConvertInfo>())).inFormat as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_ConvertInfo),
                "::",
                stringify!(inFormat)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_ConvertInfo>())).outFormat as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_ConvertInfo),
                "::",
                stringify!(outFormat)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_ConvertInfo>())).inOffset as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_ConvertInfo),
                "::",
                stringify!(inOffset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_ConvertInfo>())).outOffset as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_ConvertInfo),
                "::",
                stringify!(outOffset)
            )
        );
    }
    impl Default for RtApi_ConvertInfo {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtApi_ConvertInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "RtApi_ConvertInfo {{ channels: {:?}, inJump: {:?}, outJump: {:?}, inFormat: {:?}, outFormat: {:?}, inOffset: {:?}, outOffset: {:?} }}" , self . channels , self . inJump , self . outJump , self . inFormat , self . outFormat , self . inOffset , self . outOffset )
        }
    }
    impl PartialEq for RtApi_ConvertInfo {
        fn eq(&self, other: &RtApi_ConvertInfo) -> bool {
            self.channels == other.channels
                && self.inJump == other.inJump
                && self.outJump == other.outJump
                && self.inFormat == other.inFormat
                && self.outFormat == other.outFormat
                && self.inOffset == other.inOffset
                && self.outOffset == other.outOffset
        }
    }
    #[repr(C)]
    pub struct RtApi_RtApiStream {
        pub device: [c_uint; 2usize],
        pub apiHandle: *mut c_void,
        pub mode: self::RtApi_StreamMode,
        pub state: self::RtApi_StreamState,
        pub userBuffer: [*mut c_char; 2usize],
        pub deviceBuffer: *mut c_char,
        pub doConvertBuffer: [bool; 2usize],
        pub userInterleaved: bool,
        pub deviceInterleaved: [bool; 2usize],
        pub doByteSwap: [bool; 2usize],
        pub sampleRate: c_uint,
        pub bufferSize: c_uint,
        pub nBuffers: c_uint,
        pub nUserChannels: [c_uint; 2usize],
        pub nDeviceChannels: [c_uint; 2usize],
        pub channelOffset: [c_uint; 2usize],
        pub latency: [c_ulong; 2usize],
        pub userFormat: self::RtAudioFormat,
        pub deviceFormat: [self::RtAudioFormat; 2usize],
        pub mutex: self::StreamMutex,
        pub callbackInfo: self::CallbackInfo,
        pub convertInfo: [self::RtApi_ConvertInfo; 2usize],
        pub streamTime: f64,
    }
    #[test]
    fn bindgen_test_layout_RtApi_RtApiStream() {
        assert_eq!(
            size_of::<RtApi_RtApiStream>(),
            400usize,
            concat!("Size of: ", stringify!(RtApi_RtApiStream))
        );
        assert_eq!(
            align_of::<RtApi_RtApiStream>(),
            8usize,
            concat!("Alignment of ", stringify!(RtApi_RtApiStream))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_RtApiStream>())).device as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(device)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_RtApiStream>())).apiHandle as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(apiHandle)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_RtApiStream>())).mode as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_RtApiStream>())).state as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).userBuffer as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(userBuffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).deviceBuffer as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(deviceBuffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).doConvertBuffer as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(doConvertBuffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).userInterleaved as *const _ as usize
            },
            50usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(userInterleaved)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).deviceInterleaved as *const _ as usize
            },
            51usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(deviceInterleaved)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).doByteSwap as *const _ as usize
            },
            53usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(doByteSwap)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).sampleRate as *const _ as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(sampleRate)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).bufferSize as *const _ as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(bufferSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_RtApiStream>())).nBuffers as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(nBuffers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).nUserChannels as *const _ as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(nUserChannels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).nDeviceChannels as *const _ as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(nDeviceChannels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).channelOffset as *const _ as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(channelOffset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_RtApiStream>())).latency as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(latency)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).userFormat as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(userFormat)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).deviceFormat as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(deviceFormat)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi_RtApiStream>())).mutex as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(mutex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).callbackInfo as *const _ as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(callbackInfo)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).convertInfo as *const _ as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(convertInfo)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtApi_RtApiStream>())).streamTime as *const _ as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi_RtApiStream),
                "::",
                stringify!(streamTime)
            )
        );
    }
    impl Default for RtApi_RtApiStream {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtApi_RtApiStream {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "RtApi_RtApiStream {{ device: {:?}, apiHandle: {:?}, mode: {:?}, state: {:?}, userBuffer: {:?}, deviceBuffer: {:?}, doConvertBuffer: {:?}, userInterleaved: {:?}, deviceInterleaved: {:?}, doByteSwap: {:?}, sampleRate: {:?}, bufferSize: {:?}, nBuffers: {:?}, nUserChannels: {:?}, nDeviceChannels: {:?}, channelOffset: {:?}, latency: {:?}, userFormat: {:?}, deviceFormat: {:?}, mutex: {:?}, callbackInfo: {:?}, convertInfo: {:?}, streamTime: {:?} }}" , self . device , self . apiHandle , self . mode , self . state , self . userBuffer , self . deviceBuffer , self . doConvertBuffer , self . userInterleaved , self . deviceInterleaved , self . doByteSwap , self . sampleRate , self . bufferSize , self . nBuffers , self . nUserChannels , self . nDeviceChannels , self . channelOffset , self . latency , self . userFormat , self . deviceFormat , self . mutex , self . callbackInfo , self . convertInfo , self . streamTime )
        }
    }
    pub type RtApi_Int24 = self::S24;
    pub type RtApi_Int16 = c_short;
    pub type RtApi_Int32 = c_int;
    pub type RtApi_Float32 = f32;
    pub type RtApi_Float64 = f64;
    extern "C" {
        #[link_name = "\u{1}MAX_SAMPLE_RATES"]
        pub static RtApi_MAX_SAMPLE_RATES: c_uint;
    }
    extern "C" {
        #[link_name = "\u{1}SAMPLE_RATES"]
        pub static mut RtApi_SAMPLE_RATES: [c_uint; 0usize];
    }
    #[test]
    fn bindgen_test_layout_RtApi() {
        assert_eq!(
            size_of::<RtApi>(),
            824usize,
            concat!("Size of: ", stringify!(RtApi))
        );
        assert_eq!(
            align_of::<RtApi>(),
            8usize,
            concat!("Alignment of ", stringify!(RtApi))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi>())).errorStream_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi),
                "::",
                stringify!(errorStream_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi>())).errorText_ as *const _ as usize },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi),
                "::",
                stringify!(errorText_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi>())).showWarnings_ as *const _ as usize },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi),
                "::",
                stringify!(showWarnings_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApi>())).stream_ as *const _ as usize },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApi),
                "::",
                stringify!(stream_)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}openStream"]
        pub fn RtApi_openStream(
            this: *mut self::RtApi,
            outputParameters: *mut self::RtAudio_StreamParameters,
            inputParameters: *mut self::RtAudio_StreamParameters,
            format: self::RtAudioFormat,
            sampleRate: c_uint,
            bufferFrames: *mut c_uint,
            callback: self::RtAudioCallback,
            userData: *mut c_void,
            options: *mut self::RtAudio_StreamOptions,
            errorCallback: self::RtAudioErrorCallback,
        );
    }
    extern "C" {
        #[link_name = "\u{1}getStreamLatency"]
        pub fn RtApi_getStreamLatency(this: *mut self::RtApi) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}getStreamSampleRate"]
        pub fn RtApi_getStreamSampleRate(this: *mut self::RtApi) -> c_uint;
    }
    extern "C" {
        #[doc = "! A protected function used to increment the stream time."]
        #[link_name = "\u{1}tickStreamTime"]
        pub fn RtApi_tickStreamTime(this: *mut self::RtApi);
    }
    extern "C" {
        #[doc = "! Protected common method to clear an RtApiStream structure."]
        #[link_name = "\u{1}clearStreamInfo"]
        pub fn RtApi_clearStreamInfo(this: *mut self::RtApi);
    }
    extern "C" {
        #[doc = "Protected common method that throws an RtError (type ="]
        #[doc = "INVALID_USE) if a stream is not open."]
        #[link_name = "\u{1}verifyStream"]
        pub fn RtApi_verifyStream(this: *mut self::RtApi);
    }
    extern "C" {
        #[doc = "! Protected common error method to allow global control over error handling."]
        #[link_name = "\u{1}error"]
        pub fn RtApi_error(this: *mut self::RtApi, type_: self::RtError_Type);
    }
    extern "C" {
        #[doc = "Protected method used to perform format, channel number, and/or interleaving"]
        #[doc = "conversions between the user and device buffers."]
        #[link_name = "\u{1}convertBuffer"]
        pub fn RtApi_convertBuffer(
            this: *mut self::RtApi,
            outBuffer: *mut c_char,
            inBuffer: *mut c_char,
            info: *mut self::RtApi_ConvertInfo,
        );
    }
    extern "C" {
        #[doc = "! Protected common method used to perform byte-swapping on buffers."]
        #[link_name = "\u{1}byteSwapBuffer"]
        pub fn RtApi_byteSwapBuffer(
            this: *mut self::RtApi,
            buffer: *mut c_char,
            samples: c_uint,
            format: self::RtAudioFormat,
        );
    }
    extern "C" {
        #[doc = "! Protected common method that returns the number of bytes for a given format."]
        #[link_name = "\u{1}formatBytes"]
        pub fn RtApi_formatBytes(this: *mut self::RtApi, format: self::RtAudioFormat) -> c_uint;
    }
    extern "C" {
        #[doc = "! Protected common method that sets up the parameters for buffer conversion."]
        #[link_name = "\u{1}setConvertInfo"]
        pub fn RtApi_setConvertInfo(
            this: *mut self::RtApi,
            mode: self::RtApi_StreamMode,
            firstChannel: c_uint,
        );
    }
    extern "C" {
        #[link_name = "\u{1}RtApi"]
        pub fn RtApi_RtApi(this: *mut self::RtApi);
    }
    impl Default for RtApi {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtApi {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "RtApi {{ errorStream_: {:?}, errorText_: {:?}, showWarnings_: {:?}, stream_: {:?} }}" , self . errorStream_ , self . errorText_ , self . showWarnings_ , self . stream_ )
        }
    }
    impl RtApi {
        #[inline]
        pub unsafe fn openStream(
            &mut self,
            outputParameters: *mut self::RtAudio_StreamParameters,
            inputParameters: *mut self::RtAudio_StreamParameters,
            format: self::RtAudioFormat,
            sampleRate: c_uint,
            bufferFrames: *mut c_uint,
            callback: self::RtAudioCallback,
            userData: *mut c_void,
            options: *mut self::RtAudio_StreamOptions,
            errorCallback: self::RtAudioErrorCallback,
        ) {
            RtApi_openStream(
                self,
                outputParameters,
                inputParameters,
                format,
                sampleRate,
                bufferFrames,
                callback,
                userData,
                options,
                errorCallback,
            )
        }
        #[inline]
        pub unsafe fn getStreamLatency(&mut self) -> c_long {
            RtApi_getStreamLatency(self)
        }
        #[inline]
        pub unsafe fn getStreamSampleRate(&mut self) -> c_uint {
            RtApi_getStreamSampleRate(self)
        }
        #[inline]
        pub unsafe fn tickStreamTime(&mut self) {
            RtApi_tickStreamTime(self)
        }
        #[inline]
        pub unsafe fn clearStreamInfo(&mut self) {
            RtApi_clearStreamInfo(self)
        }
        #[inline]
        pub unsafe fn verifyStream(&mut self) {
            RtApi_verifyStream(self)
        }
        #[inline]
        pub unsafe fn error(&mut self, type_: self::RtError_Type) {
            RtApi_error(self, type_)
        }
        #[inline]
        pub unsafe fn convertBuffer(
            &mut self,
            outBuffer: *mut c_char,
            inBuffer: *mut c_char,
            info: *mut self::RtApi_ConvertInfo,
        ) {
            RtApi_convertBuffer(self, outBuffer, inBuffer, info)
        }
        #[inline]
        pub unsafe fn byteSwapBuffer(
            &mut self,
            buffer: *mut c_char,
            samples: c_uint,
            format: self::RtAudioFormat,
        ) {
            RtApi_byteSwapBuffer(self, buffer, samples, format)
        }
        #[inline]
        pub unsafe fn formatBytes(&mut self, format: self::RtAudioFormat) -> c_uint {
            RtApi_formatBytes(self, format)
        }
        #[inline]
        pub unsafe fn setConvertInfo(
            &mut self,
            mode: self::RtApi_StreamMode,
            firstChannel: c_uint,
        ) {
            RtApi_setConvertInfo(self, mode, firstChannel)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            RtApi_RtApi(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}RtApi_destructor"]
        pub fn RtApi_RtApi_destructor(this: *mut self::RtApi);
    }
    extern "C" {
        #[link_name = "\u{1}getDefaultInputDevice"]
        pub fn RtApi_getDefaultInputDevice(this: *mut c_void) -> c_uint;
    }
    extern "C" {
        #[link_name = "\u{1}getDefaultOutputDevice"]
        pub fn RtApi_getDefaultOutputDevice(this: *mut c_void) -> c_uint;
    }
    extern "C" {
        #[link_name = "\u{1}closeStream"]
        pub fn RtApi_closeStream(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}getStreamTime"]
        pub fn RtApi_getStreamTime(this: *mut c_void) -> f64;
    }
    extern "C" {
        #[doc = "Protected, api-specific method that attempts to open a device"]
        #[doc = "with the given parameters.  This function MUST be implemented by"]
        #[doc = "all subclasses.  If an error is encountered during the probe, a"]
        #[doc = "\"warning\" message is reported and FAILURE is returned. A"]
        #[doc = "successful probe is indicated by a return value of SUCCESS."]
        #[link_name = "\u{1}probeDeviceOpen"]
        pub fn RtApi_probeDeviceOpen(
            this: *mut c_void,
            device: c_uint,
            mode: self::RtApi_StreamMode,
            channels: c_uint,
            firstChannel: c_uint,
            sampleRate: c_uint,
            format: self::RtAudioFormat,
            bufferSize: *mut c_uint,
            options: *mut self::RtAudio_StreamOptions,
        ) -> bool;
    }
    #[repr(C)]
    pub struct RtApiJack {
        pub _base: self::RtApi,
    }
    #[test]
    fn bindgen_test_layout_RtApiJack() {
        assert_eq!(
            size_of::<RtApiJack>(),
            824usize,
            concat!("Size of: ", stringify!(RtApiJack))
        );
        assert_eq!(
            align_of::<RtApiJack>(),
            8usize,
            concat!("Alignment of ", stringify!(RtApiJack))
        );
    }
    extern "C" {
        #[link_name = "\u{1}getStreamLatency"]
        pub fn RtApiJack_getStreamLatency(this: *mut self::RtApiJack) -> c_long;
    }
    extern "C" {
        #[link_name = "\u{1}callbackEvent"]
        pub fn RtApiJack_callbackEvent(this: *mut self::RtApiJack, nframes: c_ulong) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}RtApiJack"]
        pub fn RtApiJack_RtApiJack(this: *mut self::RtApiJack);
    }
    impl Default for RtApiJack {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtApiJack {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "RtApiJack {{  }}")
        }
    }
    impl RtApiJack {
        #[inline]
        pub unsafe fn getStreamLatency(&mut self) -> c_long {
            RtApiJack_getStreamLatency(self)
        }
        #[inline]
        pub unsafe fn callbackEvent(&mut self, nframes: c_ulong) -> bool {
            RtApiJack_callbackEvent(self, nframes)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            RtApiJack_RtApiJack(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}RtApiJack_destructor"]
        pub fn RtApiJack_RtApiJack_destructor(this: *mut self::RtApiJack);
    }
    extern "C" {
        #[link_name = "\u{1}getDeviceCount"]
        pub fn RtApiJack_getDeviceCount(this: *mut c_void) -> c_uint;
    }
    extern "C" {
        #[link_name = "\u{1}getDeviceInfo"]
        pub fn RtApiJack_getDeviceInfo(
            this: *mut c_void,
            device: c_uint,
        ) -> self::RtAudio_DeviceInfo;
    }
    extern "C" {
        #[link_name = "\u{1}closeStream"]
        pub fn RtApiJack_closeStream(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}startStream"]
        pub fn RtApiJack_startStream(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}stopStream"]
        pub fn RtApiJack_stopStream(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}abortStream"]
        pub fn RtApiJack_abortStream(this: *mut c_void);
    }
    #[repr(C)]
    pub struct RtApiAlsa {
        pub _base: self::RtApi,
        pub devices_: self::std::vector,
    }
    #[test]
    fn bindgen_test_layout_RtApiAlsa() {
        assert_eq!(
            size_of::<RtApiAlsa>(),
            848usize,
            concat!("Size of: ", stringify!(RtApiAlsa))
        );
        assert_eq!(
            align_of::<RtApiAlsa>(),
            8usize,
            concat!("Alignment of ", stringify!(RtApiAlsa))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtApiAlsa>())).devices_ as *const _ as usize },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(RtApiAlsa),
                "::",
                stringify!(devices_)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}callbackEvent"]
        pub fn RtApiAlsa_callbackEvent(this: *mut self::RtApiAlsa);
    }
    extern "C" {
        #[link_name = "\u{1}RtApiAlsa"]
        pub fn RtApiAlsa_RtApiAlsa(this: *mut self::RtApiAlsa);
    }
    impl Default for RtApiAlsa {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtApiAlsa {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "RtApiAlsa {{ devices_: {:?} }}", self.devices_)
        }
    }
    impl RtApiAlsa {
        #[inline]
        pub unsafe fn callbackEvent(&mut self) {
            RtApiAlsa_callbackEvent(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            RtApiAlsa_RtApiAlsa(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}RtApiAlsa_destructor"]
        pub fn RtApiAlsa_RtApiAlsa_destructor(this: *mut self::RtApiAlsa);
    }
    extern "C" {
        #[link_name = "\u{1}getDeviceCount"]
        pub fn RtApiAlsa_getDeviceCount(this: *mut c_void) -> c_uint;
    }
    extern "C" {
        #[link_name = "\u{1}getDeviceInfo"]
        pub fn RtApiAlsa_getDeviceInfo(
            this: *mut c_void,
            device: c_uint,
        ) -> self::RtAudio_DeviceInfo;
    }
    extern "C" {
        #[link_name = "\u{1}closeStream"]
        pub fn RtApiAlsa_closeStream(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}startStream"]
        pub fn RtApiAlsa_startStream(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}stopStream"]
        pub fn RtApiAlsa_stopStream(this: *mut c_void);
    }
    extern "C" {
        #[link_name = "\u{1}abortStream"]
        pub fn RtApiAlsa_abortStream(this: *mut c_void);
    }
    pub type f_audio_cb = ::std::option::Option<
        unsafe extern "C" fn(
            input: *mut f64,
            output: *mut f64,
            numFrames: c_ulong,
            numInChans: c_ulong,
            numOutChans: c_ulong,
            userData: *mut c_void,
        ),
    >;
    extern "C" {
        pub static mut g_do_watchdog: c_ulong;
    }
    extern "C" {
        pub static mut g_watchdog_countermeasure_priority: c_ulong;
    }
    extern "C" {
        pub static mut g_watchdog_timeout: f64;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ChuckAudio {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}m_init"]
        pub static mut ChuckAudio_m_init: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_start"]
        pub static mut ChuckAudio_m_start: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_go"]
        pub static mut ChuckAudio_m_go: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_silent"]
        pub static mut ChuckAudio_m_silent: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_num_channels_out"]
        pub static mut ChuckAudio_m_num_channels_out: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_num_channels_in"]
        pub static mut ChuckAudio_m_num_channels_in: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_sample_rate"]
        pub static mut ChuckAudio_m_sample_rate: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_bps"]
        pub static mut ChuckAudio_m_bps: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_buffer_size"]
        pub static mut ChuckAudio_m_buffer_size: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_num_buffers"]
        pub static mut ChuckAudio_m_num_buffers: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_buffer_out"]
        pub static mut ChuckAudio_m_buffer_out: *mut f64;
    }
    extern "C" {
        #[link_name = "\u{1}m_buffer_in"]
        pub static mut ChuckAudio_m_buffer_in: *mut f64;
    }
    extern "C" {
        #[link_name = "\u{1}m_extern_in"]
        pub static mut ChuckAudio_m_extern_in: *mut f64;
    }
    extern "C" {
        #[link_name = "\u{1}m_extern_out"]
        pub static mut ChuckAudio_m_extern_out: *mut f64;
    }
    extern "C" {
        #[link_name = "\u{1}m_rtaudio"]
        pub static mut ChuckAudio_m_rtaudio: *mut self::RtAudio;
    }
    extern "C" {
        #[link_name = "\u{1}m_dac_n"]
        pub static mut ChuckAudio_m_dac_n: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_adc_n"]
        pub static mut ChuckAudio_m_adc_n: c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}m_audio_cb"]
        pub static mut ChuckAudio_m_audio_cb: self::f_audio_cb;
    }
    extern "C" {
        #[link_name = "\u{1}m_cb_user_data"]
        pub static mut ChuckAudio_m_cb_user_data: *mut c_void;
    }
    #[test]
    fn bindgen_test_layout_ChuckAudio() {
        assert_eq!(
            size_of::<ChuckAudio>(),
            1usize,
            concat!("Size of: ", stringify!(ChuckAudio))
        );
        assert_eq!(
            align_of::<ChuckAudio>(),
            1usize,
            concat!("Alignment of ", stringify!(ChuckAudio))
        );
    }
    extern "C" {
        #[link_name = "\u{1}initialize"]
        pub fn ChuckAudio_initialize(
            num_dac_channels: c_ulong,
            num_adc_channels: c_ulong,
            sample_rate: c_ulong,
            buffer_size: c_ulong,
            num_buffers: c_ulong,
            callback: self::f_audio_cb,
            data: *mut c_void,
            force_srate: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn ChuckAudio_shutdown();
    }
    extern "C" {
        #[link_name = "\u{1}start"]
        pub fn ChuckAudio_start() -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}stop"]
        pub fn ChuckAudio_stop() -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}watchdog_start"]
        pub fn ChuckAudio_watchdog_start() -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}watchdog_stop"]
        pub fn ChuckAudio_watchdog_stop() -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}probe"]
        pub fn ChuckAudio_probe();
    }
    extern "C" {
        #[link_name = "\u{1}device_named"]
        pub fn ChuckAudio_device_named(
            name: *const self::std::__cxx11::string,
            needs_dac: c_ulong,
            needs_adc: c_ulong,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}cb"]
        pub fn ChuckAudio_cb(
            output_buffer: *mut c_void,
            input_buffer: *mut c_void,
            buffer_size: c_uint,
            streamTime: f64,
            status: self::RtAudioStreamStatus,
            user_data: *mut c_void,
        ) -> c_int;
    }
    impl ChuckAudio {
        #[inline]
        pub unsafe fn initialize(
            num_dac_channels: c_ulong,
            num_adc_channels: c_ulong,
            sample_rate: c_ulong,
            buffer_size: c_ulong,
            num_buffers: c_ulong,
            callback: self::f_audio_cb,
            data: *mut c_void,
            force_srate: c_ulong,
        ) -> c_ulong {
            ChuckAudio_initialize(
                num_dac_channels,
                num_adc_channels,
                sample_rate,
                buffer_size,
                num_buffers,
                callback,
                data,
                force_srate,
            )
        }
        #[inline]
        pub unsafe fn shutdown() {
            ChuckAudio_shutdown()
        }
        #[inline]
        pub unsafe fn start() -> c_ulong {
            ChuckAudio_start()
        }
        #[inline]
        pub unsafe fn stop() -> c_ulong {
            ChuckAudio_stop()
        }
        #[inline]
        pub unsafe fn watchdog_start() -> c_ulong {
            ChuckAudio_watchdog_start()
        }
        #[inline]
        pub unsafe fn watchdog_stop() -> c_ulong {
            ChuckAudio_watchdog_stop()
        }
        #[inline]
        pub unsafe fn probe() {
            ChuckAudio_probe()
        }
        #[inline]
        pub unsafe fn device_named(
            name: *const self::std::__cxx11::string,
            needs_dac: c_ulong,
            needs_adc: c_ulong,
        ) -> c_ulong {
            ChuckAudio_device_named(name, needs_dac, needs_adc)
        }
        #[inline]
        pub unsafe fn cb(
            output_buffer: *mut c_void,
            input_buffer: *mut c_void,
            buffer_size: c_uint,
            streamTime: f64,
            status: self::RtAudioStreamStatus,
            user_data: *mut c_void,
        ) -> c_int {
            ChuckAudio_cb(
                output_buffer,
                input_buffer,
                buffer_size,
                streamTime,
                status,
                user_data,
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Console {
        pub _base: self::Chuck_Shell_UI,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Console() {
        assert_eq!(
            size_of::<Chuck_Console>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Console))
        );
        assert_eq!(
            align_of::<Chuck_Console>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Console))
        );
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Console"]
        pub fn Chuck_Console_Chuck_Console(this: *mut self::Chuck_Console);
    }
    impl Default for Chuck_Console {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl Chuck_Console {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = uninitialized();
            Chuck_Console_Chuck_Console(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}Chuck_Console_destructor"]
        pub fn Chuck_Console_Chuck_Console_destructor(this: *mut self::Chuck_Console);
    }
    extern "C" {
        #[link_name = "\u{1}init"]
        pub fn Chuck_Console_init(this: *mut c_void) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}next_command"]
        pub fn Chuck_Console_next_command(
            this: *mut c_void,
            arg1: *const self::std::__cxx11::string,
            arg2: *mut self::std::__cxx11::string,
        ) -> c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}next_result"]
        pub fn Chuck_Console_next_result(
            this: *mut c_void,
            arg1: *const self::std::__cxx11::string,
        );
    }
    pub type float_t = f32;
    pub type double_t = f64;
    pub const FP_INT_UPWARD: self::_bindgen_ty_63 = 0;
    pub const FP_INT_DOWNWARD: self::_bindgen_ty_63 = 1;
    pub const FP_INT_TOWARDZERO: self::_bindgen_ty_63 = 2;
    pub const FP_INT_TONEARESTFROMZERO: self::_bindgen_ty_63 = 3;
    pub const FP_INT_TONEAREST: self::_bindgen_ty_63 = 4;
    pub type _bindgen_ty_63 = u32;
    extern "C" {
        pub fn __fpclassify(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __signbit(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __isinf(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __finite(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __isnan(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __iseqsig(__x: f64, __y: f64) -> c_int;
    }
    extern "C" {
        pub fn __issignaling(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn acos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __acos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn asin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __asin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __atan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atan2(__y: f64, __x: f64) -> f64;
    }
    extern "C" {
        pub fn __atan2(__y: f64, __x: f64) -> f64;
    }
    extern "C" {
        pub fn cos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn tan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __tan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn cosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn tanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __tanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
    }
    extern "C" {
        pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
    }
    extern "C" {
        pub fn acosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __acosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn asinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __asinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __atanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn exp(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp(__x: f64) -> f64;
    }
    extern "C" {
        pub fn frexp(__x: f64, __exponent: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn __frexp(__x: f64, __exponent: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn ldexp(__x: f64, __exponent: c_int) -> f64;
    }
    extern "C" {
        pub fn __ldexp(__x: f64, __exponent: c_int) -> f64;
    }
    extern "C" {
        pub fn log(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
    }
    extern "C" {
        pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
    }
    extern "C" {
        pub fn exp10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn expm1(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __expm1(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log1p(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log1p(__x: f64) -> f64;
    }
    extern "C" {
        pub fn logb(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __logb(__x: f64) -> f64;
    }
    extern "C" {
        pub fn exp2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn pow(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __pow(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn sqrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sqrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn hypot(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __hypot(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn cbrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cbrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn ceil(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __ceil(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fabs(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __fabs(__x: f64) -> f64;
    }
    extern "C" {
        pub fn floor(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __floor(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fmod(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmod(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn finite(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn drem(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __drem(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn significand(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __significand(__x: f64) -> f64;
    }
    extern "C" {
        pub fn copysign(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __copysign(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nan(__tagb: *const c_char) -> f64;
    }
    extern "C" {
        pub fn __nan(__tagb: *const c_char) -> f64;
    }
    extern "C" {
        pub fn j0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __j0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn j1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __j1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn jn(arg1: c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn __jn(arg1: c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn y0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __y0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn y1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __y1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn yn(arg1: c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn __yn(arg1: c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn erf(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __erf(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __erfc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __lgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __tgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn gamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __gamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgamma_r(arg1: f64, __signgamp: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn __lgamma_r(arg1: f64, __signgamp: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn rint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __rint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn nextafter(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __nextafter(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nexttoward(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __nexttoward(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nextdown(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nextdown(__x: f64) -> f64;
    }
    extern "C" {
        pub fn nextup(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nextup(__x: f64) -> f64;
    }
    extern "C" {
        pub fn remainder(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __remainder(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn scalbn(__x: f64, __n: c_int) -> f64;
    }
    extern "C" {
        pub fn __scalbn(__x: f64, __n: c_int) -> f64;
    }
    extern "C" {
        pub fn ilogb(__x: f64) -> c_int;
    }
    extern "C" {
        pub fn __ilogb(__x: f64) -> c_int;
    }
    extern "C" {
        pub fn llogb(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn __llogb(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn scalbln(__x: f64, __n: c_long) -> f64;
    }
    extern "C" {
        pub fn __scalbln(__x: f64, __n: c_long) -> f64;
    }
    extern "C" {
        pub fn nearbyint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nearbyint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn round(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __round(__x: f64) -> f64;
    }
    extern "C" {
        pub fn trunc(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __trunc(__x: f64) -> f64;
    }
    extern "C" {
        pub fn remquo(__x: f64, __y: f64, __quo: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn __remquo(__x: f64, __y: f64, __quo: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn lrint(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn __lrint(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn llrint(__x: f64) -> c_longlong;
    }
    extern "C" {
        pub fn __llrint(__x: f64) -> c_longlong;
    }
    extern "C" {
        pub fn lround(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn __lround(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn llround(__x: f64) -> c_longlong;
    }
    extern "C" {
        pub fn __llround(__x: f64) -> c_longlong;
    }
    extern "C" {
        pub fn fdim(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fdim(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fmax(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmax(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fmin(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmin(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
    }
    extern "C" {
        pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
    }
    extern "C" {
        pub fn roundeven(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __roundeven(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fromfp(__x: f64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfp(__x: f64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfp(__x: f64, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfp(__x: f64, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpx(__x: f64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpx(__x: f64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpx(__x: f64, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpx(__x: f64, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmag(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmaxmag(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fminmag(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fminmag(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn totalorder(__x: f64, __y: f64) -> c_int;
    }
    extern "C" {
        pub fn totalordermag(__x: f64, __y: f64) -> c_int;
    }
    extern "C" {
        pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> c_int;
    }
    extern "C" {
        pub fn getpayload(__x: *const f64) -> f64;
    }
    extern "C" {
        pub fn __getpayload(__x: *const f64) -> f64;
    }
    extern "C" {
        pub fn setpayload(__x: *mut f64, __payload: f64) -> c_int;
    }
    extern "C" {
        pub fn setpayloadsig(__x: *mut f64, __payload: f64) -> c_int;
    }
    extern "C" {
        pub fn scalb(__x: f64, __n: f64) -> f64;
    }
    extern "C" {
        pub fn __scalb(__x: f64, __n: f64) -> f64;
    }
    extern "C" {
        pub fn __fpclassifyf(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn __signbitf(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn __isinff(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn __finitef(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn __isnanf(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn __iseqsigf(__x: f32, __y: f32) -> c_int;
    }
    extern "C" {
        pub fn __issignalingf(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn acosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __acosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn asinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __asinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __atanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atan2f(__y: f32, __x: f32) -> f32;
    }
    extern "C" {
        pub fn __atan2f(__y: f32, __x: f32) -> f32;
    }
    extern "C" {
        pub fn cosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __cosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn sinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn tanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __tanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn coshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __coshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn sinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn tanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __tanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
    }
    extern "C" {
        pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
    }
    extern "C" {
        pub fn acoshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __acoshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn asinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __asinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __atanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn expf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __expf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn frexpf(__x: f32, __exponent: *mut c_int) -> f32;
    }
    extern "C" {
        pub fn __frexpf(__x: f32, __exponent: *mut c_int) -> f32;
    }
    extern "C" {
        pub fn ldexpf(__x: f32, __exponent: c_int) -> f32;
    }
    extern "C" {
        pub fn __ldexpf(__x: f32, __exponent: c_int) -> f32;
    }
    extern "C" {
        pub fn logf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __logf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
    }
    extern "C" {
        pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
    }
    extern "C" {
        pub fn exp10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __exp10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn expm1f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __expm1f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log1pf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log1pf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn logbf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __logbf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn exp2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __exp2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn powf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __powf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn sqrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sqrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn hypotf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __hypotf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn cbrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __cbrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn ceilf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __ceilf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn fabsf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __fabsf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn floorf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __floorf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn fmodf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fmodf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn isinff(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn finitef(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn dremf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __dremf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn significandf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __significandf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn copysignf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __copysignf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn nanf(__tagb: *const c_char) -> f32;
    }
    extern "C" {
        pub fn __nanf(__tagb: *const c_char) -> f32;
    }
    extern "C" {
        pub fn isnanf(__value: f32) -> c_int;
    }
    extern "C" {
        pub fn j0f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __j0f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn j1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __j1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn jnf(arg1: c_int, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn __jnf(arg1: c_int, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn y0f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __y0f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn y1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __y1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn ynf(arg1: c_int, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn __ynf(arg1: c_int, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn erff(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __erff(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn erfcf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __erfcf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn lgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __lgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn tgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __tgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn gammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __gammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn lgammaf_r(arg1: f32, __signgamp: *mut c_int) -> f32;
    }
    extern "C" {
        pub fn __lgammaf_r(arg1: f32, __signgamp: *mut c_int) -> f32;
    }
    extern "C" {
        pub fn rintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __rintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn nextafterf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __nextafterf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn nexttowardf(__x: f32, __y: f64) -> f32;
    }
    extern "C" {
        pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
    }
    extern "C" {
        pub fn nextdownf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __nextdownf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn nextupf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __nextupf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn remainderf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __remainderf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn scalbnf(__x: f32, __n: c_int) -> f32;
    }
    extern "C" {
        pub fn __scalbnf(__x: f32, __n: c_int) -> f32;
    }
    extern "C" {
        pub fn ilogbf(__x: f32) -> c_int;
    }
    extern "C" {
        pub fn __ilogbf(__x: f32) -> c_int;
    }
    extern "C" {
        pub fn llogbf(__x: f32) -> c_long;
    }
    extern "C" {
        pub fn __llogbf(__x: f32) -> c_long;
    }
    extern "C" {
        pub fn scalblnf(__x: f32, __n: c_long) -> f32;
    }
    extern "C" {
        pub fn __scalblnf(__x: f32, __n: c_long) -> f32;
    }
    extern "C" {
        pub fn nearbyintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __nearbyintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn roundf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __roundf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn truncf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __truncf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn remquof(__x: f32, __y: f32, __quo: *mut c_int) -> f32;
    }
    extern "C" {
        pub fn __remquof(__x: f32, __y: f32, __quo: *mut c_int) -> f32;
    }
    extern "C" {
        pub fn lrintf(__x: f32) -> c_long;
    }
    extern "C" {
        pub fn __lrintf(__x: f32) -> c_long;
    }
    extern "C" {
        pub fn llrintf(__x: f32) -> c_longlong;
    }
    extern "C" {
        pub fn __llrintf(__x: f32) -> c_longlong;
    }
    extern "C" {
        pub fn lroundf(__x: f32) -> c_long;
    }
    extern "C" {
        pub fn __lroundf(__x: f32) -> c_long;
    }
    extern "C" {
        pub fn llroundf(__x: f32) -> c_longlong;
    }
    extern "C" {
        pub fn __llroundf(__x: f32) -> c_longlong;
    }
    extern "C" {
        pub fn fdimf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fdimf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fmaxf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fmaxf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fminf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fminf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    }
    extern "C" {
        pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    }
    extern "C" {
        pub fn roundevenf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __roundevenf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn fromfpf(__x: f32, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf(__x: f32, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf(__x: f32, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf(__x: f32, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf(__x: f32, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf(__x: f32, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf(__x: f32, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf(__x: f32, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fmaxmagf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fminmagf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fminmagf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn totalorderf(__x: f32, __y: f32) -> c_int;
    }
    extern "C" {
        pub fn totalordermagf(__x: f32, __y: f32) -> c_int;
    }
    extern "C" {
        pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> c_int;
    }
    extern "C" {
        pub fn getpayloadf(__x: *const f32) -> f32;
    }
    extern "C" {
        pub fn __getpayloadf(__x: *const f32) -> f32;
    }
    extern "C" {
        pub fn setpayloadf(__x: *mut f32, __payload: f32) -> c_int;
    }
    extern "C" {
        pub fn setpayloadsigf(__x: *mut f32, __payload: f32) -> c_int;
    }
    extern "C" {
        pub fn scalbf(__x: f32, __n: f32) -> f32;
    }
    extern "C" {
        pub fn __scalbf(__x: f32, __n: f32) -> f32;
    }
    extern "C" {
        pub fn __fpclassifyl(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __signbitl(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __isinfl(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __finitel(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __isnanl(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn __iseqsigl(__x: f64, __y: f64) -> c_int;
    }
    extern "C" {
        pub fn __issignalingl(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn acosl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __acosl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn asinl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __asinl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atanl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __atanl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atan2l(__y: f64, __x: f64) -> f64;
    }
    extern "C" {
        pub fn __atan2l(__y: f64, __x: f64) -> f64;
    }
    extern "C" {
        pub fn cosl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cosl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sinl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sinl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn tanl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __tanl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn coshl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __coshl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sinhl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sinhl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn tanhl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __tanhl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sincosl(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
    }
    extern "C" {
        pub fn __sincosl(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
    }
    extern "C" {
        pub fn acoshl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __acoshl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn asinhl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __asinhl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atanhl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __atanhl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn expl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __expl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn frexpl(__x: f64, __exponent: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn __frexpl(__x: f64, __exponent: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn ldexpl(__x: f64, __exponent: c_int) -> f64;
    }
    extern "C" {
        pub fn __ldexpl(__x: f64, __exponent: c_int) -> f64;
    }
    extern "C" {
        pub fn logl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __logl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log10l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log10l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
    }
    extern "C" {
        pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
    }
    extern "C" {
        pub fn exp10l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp10l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn expm1l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __expm1l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log1pl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log1pl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn logbl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __logbl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn exp2l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp2l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log2l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log2l(__x: f64) -> f64;
    }
    extern "C" {
        pub fn powl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __powl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn sqrtl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sqrtl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn hypotl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __hypotl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn cbrtl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cbrtl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn ceill(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __ceill(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fabsl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __fabsl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn floorl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __floorl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fmodl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmodl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn isinfl(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn finitel(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn dreml(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __dreml(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn significandl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __significandl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn copysignl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __copysignl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nanl(__tagb: *const c_char) -> f64;
    }
    extern "C" {
        pub fn __nanl(__tagb: *const c_char) -> f64;
    }
    extern "C" {
        pub fn isnanl(__value: f64) -> c_int;
    }
    extern "C" {
        pub fn j0l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __j0l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn j1l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __j1l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn jnl(arg1: c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn __jnl(arg1: c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn y0l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __y0l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn y1l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __y1l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn ynl(arg1: c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn __ynl(arg1: c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn erfl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __erfl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfcl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __erfcl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __lgammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tgammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __tgammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn gammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __gammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgammal_r(arg1: f64, __signgamp: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn __lgammal_r(arg1: f64, __signgamp: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn rintl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __rintl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn nextafterl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __nextafterl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nexttowardl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nextdownl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nextdownl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn nextupl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nextupl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn remainderl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __remainderl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn scalbnl(__x: f64, __n: c_int) -> f64;
    }
    extern "C" {
        pub fn __scalbnl(__x: f64, __n: c_int) -> f64;
    }
    extern "C" {
        pub fn ilogbl(__x: f64) -> c_int;
    }
    extern "C" {
        pub fn __ilogbl(__x: f64) -> c_int;
    }
    extern "C" {
        pub fn llogbl(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn __llogbl(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn scalblnl(__x: f64, __n: c_long) -> f64;
    }
    extern "C" {
        pub fn __scalblnl(__x: f64, __n: c_long) -> f64;
    }
    extern "C" {
        pub fn nearbyintl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nearbyintl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn roundl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __roundl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn truncl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __truncl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn remquol(__x: f64, __y: f64, __quo: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn __remquol(__x: f64, __y: f64, __quo: *mut c_int) -> f64;
    }
    extern "C" {
        pub fn lrintl(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn __lrintl(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn llrintl(__x: f64) -> c_longlong;
    }
    extern "C" {
        pub fn __llrintl(__x: f64) -> c_longlong;
    }
    extern "C" {
        pub fn lroundl(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn __lroundl(__x: f64) -> c_long;
    }
    extern "C" {
        pub fn llroundl(__x: f64) -> c_longlong;
    }
    extern "C" {
        pub fn __llroundl(__x: f64) -> c_longlong;
    }
    extern "C" {
        pub fn fdiml(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fdiml(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fmaxl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmaxl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fminl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fminl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
    }
    extern "C" {
        pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
    }
    extern "C" {
        pub fn roundevenl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __roundevenl(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fromfpl(__x: f64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpl(__x: f64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpl(__x: f64, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpl(__x: f64, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxl(__x: f64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxl(__x: f64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxl(__x: f64, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxl(__x: f64, __round: c_int, __width: c_uint) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmaxmagl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fminmagl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fminmagl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn totalorderl(__x: f64, __y: f64) -> c_int;
    }
    extern "C" {
        pub fn totalordermagl(__x: f64, __y: f64) -> c_int;
    }
    extern "C" {
        pub fn canonicalizel(__cx: *mut f64, __x: *const f64) -> c_int;
    }
    extern "C" {
        pub fn getpayloadl(__x: *const f64) -> f64;
    }
    extern "C" {
        pub fn __getpayloadl(__x: *const f64) -> f64;
    }
    extern "C" {
        pub fn setpayloadl(__x: *mut f64, __payload: f64) -> c_int;
    }
    extern "C" {
        pub fn setpayloadsigl(__x: *mut f64, __payload: f64) -> c_int;
    }
    extern "C" {
        pub fn scalbl(__x: f64, __n: f64) -> f64;
    }
    extern "C" {
        pub fn __scalbl(__x: f64, __n: f64) -> f64;
    }
    extern "C" {
        pub fn acosf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __acosf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn asinf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __asinf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn atanf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __atanf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn atan2f32(__y: self::_Float32, __x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __atan2f32(__y: self::_Float32, __x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn cosf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __cosf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn sinf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __sinf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn tanf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __tanf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn coshf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __coshf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn sinhf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __sinhf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn tanhf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __tanhf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn sincosf32(
            __x: self::_Float32,
            __sinx: *mut self::_Float32,
            __cosx: *mut self::_Float32,
        );
    }
    extern "C" {
        pub fn __sincosf32(
            __x: self::_Float32,
            __sinx: *mut self::_Float32,
            __cosx: *mut self::_Float32,
        );
    }
    extern "C" {
        pub fn acoshf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __acoshf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn asinhf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __asinhf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn atanhf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __atanhf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn expf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __expf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn frexpf32(__x: self::_Float32, __exponent: *mut c_int) -> self::_Float32;
    }
    extern "C" {
        pub fn __frexpf32(__x: self::_Float32, __exponent: *mut c_int) -> self::_Float32;
    }
    extern "C" {
        pub fn ldexpf32(__x: self::_Float32, __exponent: c_int) -> self::_Float32;
    }
    extern "C" {
        pub fn __ldexpf32(__x: self::_Float32, __exponent: c_int) -> self::_Float32;
    }
    extern "C" {
        pub fn logf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __logf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn log10f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __log10f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn modff32(__x: self::_Float32, __iptr: *mut self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __modff32(__x: self::_Float32, __iptr: *mut self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn exp10f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __exp10f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn expm1f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __expm1f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn log1pf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __log1pf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn logbf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __logbf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn exp2f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __exp2f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn log2f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __log2f32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn powf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __powf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn sqrtf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __sqrtf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn hypotf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __hypotf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn cbrtf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __cbrtf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn ceilf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __ceilf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn fabsf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __fabsf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn floorf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __floorf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn fmodf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __fmodf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn copysignf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __copysignf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn nanf32(__tagb: *const c_char) -> self::_Float32;
    }
    extern "C" {
        pub fn __nanf32(__tagb: *const c_char) -> self::_Float32;
    }
    extern "C" {
        pub fn j0f32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __j0f32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn j1f32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __j1f32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn jnf32(arg1: c_int, arg2: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __jnf32(arg1: c_int, arg2: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn y0f32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __y0f32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn y1f32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __y1f32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn ynf32(arg1: c_int, arg2: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __ynf32(arg1: c_int, arg2: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn erff32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __erff32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn erfcf32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __erfcf32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn lgammaf32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __lgammaf32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn tgammaf32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __tgammaf32(arg1: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn lgammaf32_r(arg1: self::_Float32, __signgamp: *mut c_int) -> self::_Float32;
    }
    extern "C" {
        pub fn __lgammaf32_r(arg1: self::_Float32, __signgamp: *mut c_int) -> self::_Float32;
    }
    extern "C" {
        pub fn rintf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __rintf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn nextafterf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __nextafterf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn nextdownf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __nextdownf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn nextupf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __nextupf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn remainderf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __remainderf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn scalbnf32(__x: self::_Float32, __n: c_int) -> self::_Float32;
    }
    extern "C" {
        pub fn __scalbnf32(__x: self::_Float32, __n: c_int) -> self::_Float32;
    }
    extern "C" {
        pub fn ilogbf32(__x: self::_Float32) -> c_int;
    }
    extern "C" {
        pub fn __ilogbf32(__x: self::_Float32) -> c_int;
    }
    extern "C" {
        pub fn llogbf32(__x: self::_Float32) -> c_long;
    }
    extern "C" {
        pub fn __llogbf32(__x: self::_Float32) -> c_long;
    }
    extern "C" {
        pub fn scalblnf32(__x: self::_Float32, __n: c_long) -> self::_Float32;
    }
    extern "C" {
        pub fn __scalblnf32(__x: self::_Float32, __n: c_long) -> self::_Float32;
    }
    extern "C" {
        pub fn nearbyintf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __nearbyintf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn roundf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __roundf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn truncf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __truncf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn remquof32(
            __x: self::_Float32,
            __y: self::_Float32,
            __quo: *mut c_int,
        ) -> self::_Float32;
    }
    extern "C" {
        pub fn __remquof32(
            __x: self::_Float32,
            __y: self::_Float32,
            __quo: *mut c_int,
        ) -> self::_Float32;
    }
    extern "C" {
        pub fn lrintf32(__x: self::_Float32) -> c_long;
    }
    extern "C" {
        pub fn __lrintf32(__x: self::_Float32) -> c_long;
    }
    extern "C" {
        pub fn llrintf32(__x: self::_Float32) -> c_longlong;
    }
    extern "C" {
        pub fn __llrintf32(__x: self::_Float32) -> c_longlong;
    }
    extern "C" {
        pub fn lroundf32(__x: self::_Float32) -> c_long;
    }
    extern "C" {
        pub fn __lroundf32(__x: self::_Float32) -> c_long;
    }
    extern "C" {
        pub fn llroundf32(__x: self::_Float32) -> c_longlong;
    }
    extern "C" {
        pub fn __llroundf32(__x: self::_Float32) -> c_longlong;
    }
    extern "C" {
        pub fn fdimf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __fdimf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn fmaxf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __fmaxf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn fminf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __fminf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn fmaf32(
            __x: self::_Float32,
            __y: self::_Float32,
            __z: self::_Float32,
        ) -> self::_Float32;
    }
    extern "C" {
        pub fn __fmaf32(
            __x: self::_Float32,
            __y: self::_Float32,
            __z: self::_Float32,
        ) -> self::_Float32;
    }
    extern "C" {
        pub fn roundevenf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __roundevenf32(__x: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn fromfpf32(__x: self::_Float32, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf32(
            __x: self::_Float32,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf32(
            __x: self::_Float32,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf32(
            __x: self::_Float32,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf32(__x: self::_Float32, __round: c_int, __width: c_uint)
            -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf32(
            __x: self::_Float32,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf32(
            __x: self::_Float32,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf32(
            __x: self::_Float32,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __fmaxmagf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn fminmagf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __fminmagf32(__x: self::_Float32, __y: self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn totalorderf32(__x: self::_Float32, __y: self::_Float32) -> c_int;
    }
    extern "C" {
        pub fn totalordermagf32(__x: self::_Float32, __y: self::_Float32) -> c_int;
    }
    extern "C" {
        pub fn canonicalizef32(__cx: *mut self::_Float32, __x: *const self::_Float32) -> c_int;
    }
    extern "C" {
        pub fn getpayloadf32(__x: *const self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn __getpayloadf32(__x: *const self::_Float32) -> self::_Float32;
    }
    extern "C" {
        pub fn setpayloadf32(__x: *mut self::_Float32, __payload: self::_Float32) -> c_int;
    }
    extern "C" {
        pub fn setpayloadsigf32(__x: *mut self::_Float32, __payload: self::_Float32) -> c_int;
    }
    extern "C" {
        pub fn acosf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __acosf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn asinf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __asinf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn atanf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __atanf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn atan2f64(__y: self::_Float64, __x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __atan2f64(__y: self::_Float64, __x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn cosf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __cosf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn sinf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __sinf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn tanf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __tanf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn coshf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __coshf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn sinhf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __sinhf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn tanhf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __tanhf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn sincosf64(
            __x: self::_Float64,
            __sinx: *mut self::_Float64,
            __cosx: *mut self::_Float64,
        );
    }
    extern "C" {
        pub fn __sincosf64(
            __x: self::_Float64,
            __sinx: *mut self::_Float64,
            __cosx: *mut self::_Float64,
        );
    }
    extern "C" {
        pub fn acoshf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __acoshf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn asinhf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __asinhf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn atanhf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __atanhf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn expf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __expf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn frexpf64(__x: self::_Float64, __exponent: *mut c_int) -> self::_Float64;
    }
    extern "C" {
        pub fn __frexpf64(__x: self::_Float64, __exponent: *mut c_int) -> self::_Float64;
    }
    extern "C" {
        pub fn ldexpf64(__x: self::_Float64, __exponent: c_int) -> self::_Float64;
    }
    extern "C" {
        pub fn __ldexpf64(__x: self::_Float64, __exponent: c_int) -> self::_Float64;
    }
    extern "C" {
        pub fn logf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __logf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn log10f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __log10f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn modff64(__x: self::_Float64, __iptr: *mut self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __modff64(__x: self::_Float64, __iptr: *mut self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn exp10f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __exp10f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn expm1f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __expm1f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn log1pf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __log1pf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn logbf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __logbf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn exp2f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __exp2f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn log2f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __log2f64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn powf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __powf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn sqrtf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __sqrtf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn hypotf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __hypotf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn cbrtf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __cbrtf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn ceilf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __ceilf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn fabsf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __fabsf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn floorf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __floorf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn fmodf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __fmodf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn copysignf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __copysignf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn nanf64(__tagb: *const c_char) -> self::_Float64;
    }
    extern "C" {
        pub fn __nanf64(__tagb: *const c_char) -> self::_Float64;
    }
    extern "C" {
        pub fn j0f64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __j0f64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn j1f64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __j1f64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn jnf64(arg1: c_int, arg2: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __jnf64(arg1: c_int, arg2: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn y0f64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __y0f64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn y1f64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __y1f64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn ynf64(arg1: c_int, arg2: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __ynf64(arg1: c_int, arg2: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn erff64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __erff64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn erfcf64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __erfcf64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn lgammaf64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __lgammaf64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn tgammaf64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __tgammaf64(arg1: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn lgammaf64_r(arg1: self::_Float64, __signgamp: *mut c_int) -> self::_Float64;
    }
    extern "C" {
        pub fn __lgammaf64_r(arg1: self::_Float64, __signgamp: *mut c_int) -> self::_Float64;
    }
    extern "C" {
        pub fn rintf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __rintf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn nextafterf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __nextafterf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn nextdownf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __nextdownf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn nextupf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __nextupf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn remainderf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __remainderf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn scalbnf64(__x: self::_Float64, __n: c_int) -> self::_Float64;
    }
    extern "C" {
        pub fn __scalbnf64(__x: self::_Float64, __n: c_int) -> self::_Float64;
    }
    extern "C" {
        pub fn ilogbf64(__x: self::_Float64) -> c_int;
    }
    extern "C" {
        pub fn __ilogbf64(__x: self::_Float64) -> c_int;
    }
    extern "C" {
        pub fn llogbf64(__x: self::_Float64) -> c_long;
    }
    extern "C" {
        pub fn __llogbf64(__x: self::_Float64) -> c_long;
    }
    extern "C" {
        pub fn scalblnf64(__x: self::_Float64, __n: c_long) -> self::_Float64;
    }
    extern "C" {
        pub fn __scalblnf64(__x: self::_Float64, __n: c_long) -> self::_Float64;
    }
    extern "C" {
        pub fn nearbyintf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __nearbyintf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn roundf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __roundf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn truncf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __truncf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn remquof64(
            __x: self::_Float64,
            __y: self::_Float64,
            __quo: *mut c_int,
        ) -> self::_Float64;
    }
    extern "C" {
        pub fn __remquof64(
            __x: self::_Float64,
            __y: self::_Float64,
            __quo: *mut c_int,
        ) -> self::_Float64;
    }
    extern "C" {
        pub fn lrintf64(__x: self::_Float64) -> c_long;
    }
    extern "C" {
        pub fn __lrintf64(__x: self::_Float64) -> c_long;
    }
    extern "C" {
        pub fn llrintf64(__x: self::_Float64) -> c_longlong;
    }
    extern "C" {
        pub fn __llrintf64(__x: self::_Float64) -> c_longlong;
    }
    extern "C" {
        pub fn lroundf64(__x: self::_Float64) -> c_long;
    }
    extern "C" {
        pub fn __lroundf64(__x: self::_Float64) -> c_long;
    }
    extern "C" {
        pub fn llroundf64(__x: self::_Float64) -> c_longlong;
    }
    extern "C" {
        pub fn __llroundf64(__x: self::_Float64) -> c_longlong;
    }
    extern "C" {
        pub fn fdimf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __fdimf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn fmaxf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __fmaxf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn fminf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __fminf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn fmaf64(
            __x: self::_Float64,
            __y: self::_Float64,
            __z: self::_Float64,
        ) -> self::_Float64;
    }
    extern "C" {
        pub fn __fmaf64(
            __x: self::_Float64,
            __y: self::_Float64,
            __z: self::_Float64,
        ) -> self::_Float64;
    }
    extern "C" {
        pub fn roundevenf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __roundevenf64(__x: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn fromfpf64(__x: self::_Float64, __round: c_int, __width: c_uint) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf64(
            __x: self::_Float64,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf64(
            __x: self::_Float64,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf64(
            __x: self::_Float64,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf64(__x: self::_Float64, __round: c_int, __width: c_uint)
            -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf64(
            __x: self::_Float64,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf64(
            __x: self::_Float64,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf64(
            __x: self::_Float64,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __fmaxmagf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn fminmagf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __fminmagf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn totalorderf64(__x: self::_Float64, __y: self::_Float64) -> c_int;
    }
    extern "C" {
        pub fn totalordermagf64(__x: self::_Float64, __y: self::_Float64) -> c_int;
    }
    extern "C" {
        pub fn canonicalizef64(__cx: *mut self::_Float64, __x: *const self::_Float64) -> c_int;
    }
    extern "C" {
        pub fn getpayloadf64(__x: *const self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn __getpayloadf64(__x: *const self::_Float64) -> self::_Float64;
    }
    extern "C" {
        pub fn setpayloadf64(__x: *mut self::_Float64, __payload: self::_Float64) -> c_int;
    }
    extern "C" {
        pub fn setpayloadsigf64(__x: *mut self::_Float64, __payload: self::_Float64) -> c_int;
    }
    extern "C" {
        pub fn acosf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __acosf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn asinf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __asinf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn atanf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __atanf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn atan2f32x(__y: self::_Float32x, __x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __atan2f32x(__y: self::_Float32x, __x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn cosf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __cosf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn sinf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __sinf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn tanf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __tanf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn coshf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __coshf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn sinhf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __sinhf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn tanhf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __tanhf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn sincosf32x(
            __x: self::_Float32x,
            __sinx: *mut self::_Float32x,
            __cosx: *mut self::_Float32x,
        );
    }
    extern "C" {
        pub fn __sincosf32x(
            __x: self::_Float32x,
            __sinx: *mut self::_Float32x,
            __cosx: *mut self::_Float32x,
        );
    }
    extern "C" {
        pub fn acoshf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __acoshf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn asinhf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __asinhf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn atanhf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __atanhf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn expf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __expf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn frexpf32x(__x: self::_Float32x, __exponent: *mut c_int) -> self::_Float32x;
    }
    extern "C" {
        pub fn __frexpf32x(__x: self::_Float32x, __exponent: *mut c_int) -> self::_Float32x;
    }
    extern "C" {
        pub fn ldexpf32x(__x: self::_Float32x, __exponent: c_int) -> self::_Float32x;
    }
    extern "C" {
        pub fn __ldexpf32x(__x: self::_Float32x, __exponent: c_int) -> self::_Float32x;
    }
    extern "C" {
        pub fn logf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __logf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn log10f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __log10f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn modff32x(__x: self::_Float32x, __iptr: *mut self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __modff32x(__x: self::_Float32x, __iptr: *mut self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn exp10f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __exp10f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn expm1f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __expm1f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn log1pf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __log1pf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn logbf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __logbf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn exp2f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __exp2f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn log2f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __log2f32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn powf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __powf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn sqrtf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __sqrtf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn hypotf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __hypotf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn cbrtf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __cbrtf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn ceilf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __ceilf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn fabsf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __fabsf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn floorf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __floorf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn fmodf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __fmodf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn copysignf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __copysignf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn nanf32x(__tagb: *const c_char) -> self::_Float32x;
    }
    extern "C" {
        pub fn __nanf32x(__tagb: *const c_char) -> self::_Float32x;
    }
    extern "C" {
        pub fn j0f32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __j0f32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn j1f32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __j1f32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn jnf32x(arg1: c_int, arg2: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __jnf32x(arg1: c_int, arg2: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn y0f32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __y0f32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn y1f32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __y1f32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn ynf32x(arg1: c_int, arg2: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __ynf32x(arg1: c_int, arg2: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn erff32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __erff32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn erfcf32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __erfcf32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn lgammaf32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __lgammaf32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn tgammaf32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __tgammaf32x(arg1: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn lgammaf32x_r(arg1: self::_Float32x, __signgamp: *mut c_int) -> self::_Float32x;
    }
    extern "C" {
        pub fn __lgammaf32x_r(arg1: self::_Float32x, __signgamp: *mut c_int) -> self::_Float32x;
    }
    extern "C" {
        pub fn rintf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __rintf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn nextafterf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __nextafterf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn nextdownf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __nextdownf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn nextupf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __nextupf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn remainderf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __remainderf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn scalbnf32x(__x: self::_Float32x, __n: c_int) -> self::_Float32x;
    }
    extern "C" {
        pub fn __scalbnf32x(__x: self::_Float32x, __n: c_int) -> self::_Float32x;
    }
    extern "C" {
        pub fn ilogbf32x(__x: self::_Float32x) -> c_int;
    }
    extern "C" {
        pub fn __ilogbf32x(__x: self::_Float32x) -> c_int;
    }
    extern "C" {
        pub fn llogbf32x(__x: self::_Float32x) -> c_long;
    }
    extern "C" {
        pub fn __llogbf32x(__x: self::_Float32x) -> c_long;
    }
    extern "C" {
        pub fn scalblnf32x(__x: self::_Float32x, __n: c_long) -> self::_Float32x;
    }
    extern "C" {
        pub fn __scalblnf32x(__x: self::_Float32x, __n: c_long) -> self::_Float32x;
    }
    extern "C" {
        pub fn nearbyintf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __nearbyintf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn roundf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __roundf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn truncf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __truncf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn remquof32x(
            __x: self::_Float32x,
            __y: self::_Float32x,
            __quo: *mut c_int,
        ) -> self::_Float32x;
    }
    extern "C" {
        pub fn __remquof32x(
            __x: self::_Float32x,
            __y: self::_Float32x,
            __quo: *mut c_int,
        ) -> self::_Float32x;
    }
    extern "C" {
        pub fn lrintf32x(__x: self::_Float32x) -> c_long;
    }
    extern "C" {
        pub fn __lrintf32x(__x: self::_Float32x) -> c_long;
    }
    extern "C" {
        pub fn llrintf32x(__x: self::_Float32x) -> c_longlong;
    }
    extern "C" {
        pub fn __llrintf32x(__x: self::_Float32x) -> c_longlong;
    }
    extern "C" {
        pub fn lroundf32x(__x: self::_Float32x) -> c_long;
    }
    extern "C" {
        pub fn __lroundf32x(__x: self::_Float32x) -> c_long;
    }
    extern "C" {
        pub fn llroundf32x(__x: self::_Float32x) -> c_longlong;
    }
    extern "C" {
        pub fn __llroundf32x(__x: self::_Float32x) -> c_longlong;
    }
    extern "C" {
        pub fn fdimf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __fdimf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn fmaxf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __fmaxf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn fminf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __fminf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn fmaf32x(
            __x: self::_Float32x,
            __y: self::_Float32x,
            __z: self::_Float32x,
        ) -> self::_Float32x;
    }
    extern "C" {
        pub fn __fmaf32x(
            __x: self::_Float32x,
            __y: self::_Float32x,
            __z: self::_Float32x,
        ) -> self::_Float32x;
    }
    extern "C" {
        pub fn roundevenf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __roundevenf32x(__x: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn fromfpf32x(
            __x: self::_Float32x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf32x(
            __x: self::_Float32x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf32x(
            __x: self::_Float32x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf32x(
            __x: self::_Float32x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf32x(
            __x: self::_Float32x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf32x(
            __x: self::_Float32x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf32x(
            __x: self::_Float32x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf32x(
            __x: self::_Float32x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __fmaxmagf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn fminmagf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __fminmagf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn totalorderf32x(__x: self::_Float32x, __y: self::_Float32x) -> c_int;
    }
    extern "C" {
        pub fn totalordermagf32x(__x: self::_Float32x, __y: self::_Float32x) -> c_int;
    }
    extern "C" {
        pub fn canonicalizef32x(__cx: *mut self::_Float32x, __x: *const self::_Float32x) -> c_int;
    }
    extern "C" {
        pub fn getpayloadf32x(__x: *const self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn __getpayloadf32x(__x: *const self::_Float32x) -> self::_Float32x;
    }
    extern "C" {
        pub fn setpayloadf32x(__x: *mut self::_Float32x, __payload: self::_Float32x) -> c_int;
    }
    extern "C" {
        pub fn setpayloadsigf32x(__x: *mut self::_Float32x, __payload: self::_Float32x) -> c_int;
    }
    extern "C" {
        pub fn acosf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __acosf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn asinf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __asinf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn atanf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __atanf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn atan2f64x(__y: self::_Float64x, __x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __atan2f64x(__y: self::_Float64x, __x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn cosf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __cosf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn sinf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __sinf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn tanf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __tanf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn coshf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __coshf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn sinhf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __sinhf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn tanhf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __tanhf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn sincosf64x(
            __x: self::_Float64x,
            __sinx: *mut self::_Float64x,
            __cosx: *mut self::_Float64x,
        );
    }
    extern "C" {
        pub fn __sincosf64x(
            __x: self::_Float64x,
            __sinx: *mut self::_Float64x,
            __cosx: *mut self::_Float64x,
        );
    }
    extern "C" {
        pub fn acoshf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __acoshf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn asinhf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __asinhf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn atanhf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __atanhf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn expf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __expf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn frexpf64x(__x: self::_Float64x, __exponent: *mut c_int) -> self::_Float64x;
    }
    extern "C" {
        pub fn __frexpf64x(__x: self::_Float64x, __exponent: *mut c_int) -> self::_Float64x;
    }
    extern "C" {
        pub fn ldexpf64x(__x: self::_Float64x, __exponent: c_int) -> self::_Float64x;
    }
    extern "C" {
        pub fn __ldexpf64x(__x: self::_Float64x, __exponent: c_int) -> self::_Float64x;
    }
    extern "C" {
        pub fn logf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __logf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn log10f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __log10f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn modff64x(__x: self::_Float64x, __iptr: *mut self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __modff64x(__x: self::_Float64x, __iptr: *mut self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn exp10f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __exp10f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn expm1f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __expm1f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn log1pf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __log1pf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn logbf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __logbf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn exp2f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __exp2f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn log2f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __log2f64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn powf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __powf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn sqrtf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __sqrtf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn hypotf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __hypotf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn cbrtf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __cbrtf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn ceilf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __ceilf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn fabsf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __fabsf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn floorf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __floorf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn fmodf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __fmodf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn copysignf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __copysignf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn nanf64x(__tagb: *const c_char) -> self::_Float64x;
    }
    extern "C" {
        pub fn __nanf64x(__tagb: *const c_char) -> self::_Float64x;
    }
    extern "C" {
        pub fn j0f64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __j0f64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn j1f64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __j1f64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn jnf64x(arg1: c_int, arg2: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __jnf64x(arg1: c_int, arg2: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn y0f64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __y0f64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn y1f64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __y1f64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn ynf64x(arg1: c_int, arg2: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __ynf64x(arg1: c_int, arg2: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn erff64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __erff64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn erfcf64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __erfcf64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn lgammaf64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __lgammaf64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn tgammaf64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __tgammaf64x(arg1: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn lgammaf64x_r(arg1: self::_Float64x, __signgamp: *mut c_int) -> self::_Float64x;
    }
    extern "C" {
        pub fn __lgammaf64x_r(arg1: self::_Float64x, __signgamp: *mut c_int) -> self::_Float64x;
    }
    extern "C" {
        pub fn rintf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __rintf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn nextafterf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __nextafterf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn nextdownf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __nextdownf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn nextupf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __nextupf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn remainderf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __remainderf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn scalbnf64x(__x: self::_Float64x, __n: c_int) -> self::_Float64x;
    }
    extern "C" {
        pub fn __scalbnf64x(__x: self::_Float64x, __n: c_int) -> self::_Float64x;
    }
    extern "C" {
        pub fn ilogbf64x(__x: self::_Float64x) -> c_int;
    }
    extern "C" {
        pub fn __ilogbf64x(__x: self::_Float64x) -> c_int;
    }
    extern "C" {
        pub fn llogbf64x(__x: self::_Float64x) -> c_long;
    }
    extern "C" {
        pub fn __llogbf64x(__x: self::_Float64x) -> c_long;
    }
    extern "C" {
        pub fn scalblnf64x(__x: self::_Float64x, __n: c_long) -> self::_Float64x;
    }
    extern "C" {
        pub fn __scalblnf64x(__x: self::_Float64x, __n: c_long) -> self::_Float64x;
    }
    extern "C" {
        pub fn nearbyintf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __nearbyintf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn roundf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __roundf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn truncf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __truncf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn remquof64x(
            __x: self::_Float64x,
            __y: self::_Float64x,
            __quo: *mut c_int,
        ) -> self::_Float64x;
    }
    extern "C" {
        pub fn __remquof64x(
            __x: self::_Float64x,
            __y: self::_Float64x,
            __quo: *mut c_int,
        ) -> self::_Float64x;
    }
    extern "C" {
        pub fn lrintf64x(__x: self::_Float64x) -> c_long;
    }
    extern "C" {
        pub fn __lrintf64x(__x: self::_Float64x) -> c_long;
    }
    extern "C" {
        pub fn llrintf64x(__x: self::_Float64x) -> c_longlong;
    }
    extern "C" {
        pub fn __llrintf64x(__x: self::_Float64x) -> c_longlong;
    }
    extern "C" {
        pub fn lroundf64x(__x: self::_Float64x) -> c_long;
    }
    extern "C" {
        pub fn __lroundf64x(__x: self::_Float64x) -> c_long;
    }
    extern "C" {
        pub fn llroundf64x(__x: self::_Float64x) -> c_longlong;
    }
    extern "C" {
        pub fn __llroundf64x(__x: self::_Float64x) -> c_longlong;
    }
    extern "C" {
        pub fn fdimf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __fdimf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn fmaxf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __fmaxf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn fminf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __fminf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn fmaf64x(
            __x: self::_Float64x,
            __y: self::_Float64x,
            __z: self::_Float64x,
        ) -> self::_Float64x;
    }
    extern "C" {
        pub fn __fmaf64x(
            __x: self::_Float64x,
            __y: self::_Float64x,
            __z: self::_Float64x,
        ) -> self::_Float64x;
    }
    extern "C" {
        pub fn roundevenf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __roundevenf64x(__x: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn fromfpf64x(
            __x: self::_Float64x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf64x(
            __x: self::_Float64x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf64x(
            __x: self::_Float64x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf64x(
            __x: self::_Float64x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf64x(
            __x: self::_Float64x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf64x(
            __x: self::_Float64x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf64x(
            __x: self::_Float64x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf64x(
            __x: self::_Float64x,
            __round: c_int,
            __width: c_uint,
        ) -> self::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __fmaxmagf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn fminmagf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __fminmagf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn totalorderf64x(__x: self::_Float64x, __y: self::_Float64x) -> c_int;
    }
    extern "C" {
        pub fn totalordermagf64x(__x: self::_Float64x, __y: self::_Float64x) -> c_int;
    }
    extern "C" {
        pub fn canonicalizef64x(__cx: *mut self::_Float64x, __x: *const self::_Float64x) -> c_int;
    }
    extern "C" {
        pub fn getpayloadf64x(__x: *const self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn __getpayloadf64x(__x: *const self::_Float64x) -> self::_Float64x;
    }
    extern "C" {
        pub fn setpayloadf64x(__x: *mut self::_Float64x, __payload: self::_Float64x) -> c_int;
    }
    extern "C" {
        pub fn setpayloadsigf64x(__x: *mut self::_Float64x, __payload: self::_Float64x) -> c_int;
    }
    extern "C" {
        pub fn fadd(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fdiv(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fmul(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fsub(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn faddl(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fdivl(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fmull(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fsubl(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn daddl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn ddivl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn dmull(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn dsubl(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn f32addf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32;
    }
    extern "C" {
        pub fn f32divf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32;
    }
    extern "C" {
        pub fn f32mulf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32;
    }
    extern "C" {
        pub fn f32subf32x(__x: self::_Float32x, __y: self::_Float32x) -> self::_Float32;
    }
    extern "C" {
        pub fn f32addf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float32;
    }
    extern "C" {
        pub fn f32divf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float32;
    }
    extern "C" {
        pub fn f32mulf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float32;
    }
    extern "C" {
        pub fn f32subf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float32;
    }
    extern "C" {
        pub fn f32addf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float32;
    }
    extern "C" {
        pub fn f32divf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float32;
    }
    extern "C" {
        pub fn f32mulf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float32;
    }
    extern "C" {
        pub fn f32subf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float32;
    }
    extern "C" {
        pub fn f32xaddf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float32x;
    }
    extern "C" {
        pub fn f32xdivf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float32x;
    }
    extern "C" {
        pub fn f32xmulf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float32x;
    }
    extern "C" {
        pub fn f32xsubf64(__x: self::_Float64, __y: self::_Float64) -> self::_Float32x;
    }
    extern "C" {
        pub fn f32xaddf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float32x;
    }
    extern "C" {
        pub fn f32xdivf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float32x;
    }
    extern "C" {
        pub fn f32xmulf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float32x;
    }
    extern "C" {
        pub fn f32xsubf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float32x;
    }
    extern "C" {
        pub fn f64addf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64;
    }
    extern "C" {
        pub fn f64divf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64;
    }
    extern "C" {
        pub fn f64mulf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64;
    }
    extern "C" {
        pub fn f64subf64x(__x: self::_Float64x, __y: self::_Float64x) -> self::_Float64;
    }
    extern "C" {
        pub static mut signgam: c_int;
    }
    pub const FP_NAN: self::_bindgen_ty_64 = 0;
    pub const FP_INFINITE: self::_bindgen_ty_64 = 1;
    pub const FP_ZERO: self::_bindgen_ty_64 = 2;
    pub const FP_SUBNORMAL: self::_bindgen_ty_64 = 3;
    pub const FP_NORMAL: self::_bindgen_ty_64 = 4;
    pub type _bindgen_ty_64 = u32;
    extern "C" {
        pub fn __iscanonicall(__x: f64) -> c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __iseqsig_type {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout___iseqsig_type_open0_float_close0_instantiation() {
        assert_eq!(
            size_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
        assert_eq!(
            align_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout___iseqsig_type_open0_double_close0_instantiation() {
        assert_eq!(
            size_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
        assert_eq!(
            align_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout___iseqsig_type_open0_long_double_close0_instantiation() {
        assert_eq!(
            size_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
        assert_eq!(
            align_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
    }
    extern "C" {
        pub fn mtof(f: f64) -> f64;
    }
    extern "C" {
        pub fn ftom(f: f64) -> f64;
    }
    extern "C" {
        pub fn powtodb(f: f64) -> f64;
    }
    extern "C" {
        pub fn rmstodb(f: f64) -> f64;
    }
    extern "C" {
        pub fn dbtopow(f: f64) -> f64;
    }
    extern "C" {
        pub fn dbtorms(f: f64) -> f64;
    }
    extern "C" {
        pub fn nextpow2(i: c_ulong) -> c_ulong;
    }
    extern "C" {
        pub fn ensurepow2(i: c_ulong) -> c_ulong;
    }
    pub type sig_atomic_t = self::__sig_atomic_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigval {
        pub sival_int: c_int,
        pub sival_ptr: *mut c_void,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_sigval() {
        assert_eq!(
            size_of::<sigval>(),
            8usize,
            concat!("Size of: ", stringify!(sigval))
        );
        assert_eq!(
            align_of::<sigval>(),
            8usize,
            concat!("Alignment of ", stringify!(sigval))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigval),
                "::",
                stringify!(sival_int)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigval),
                "::",
                stringify!(sival_ptr)
            )
        );
    }
    impl Default for sigval {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sigval {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "sigval {{ union }}")
        }
    }
    pub type __sigval_t = self::sigval;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct siginfo_t {
        pub si_signo: c_int,
        pub si_errno: c_int,
        pub si_code: c_int,
        pub __pad0: c_int,
        pub _sifields: self::siginfo_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union siginfo_t__bindgen_ty_1 {
        pub _pad: [c_int; 28usize],
        pub _kill: self::siginfo_t__bindgen_ty_1__bindgen_ty_1,
        pub _timer: self::siginfo_t__bindgen_ty_1__bindgen_ty_2,
        pub _rt: self::siginfo_t__bindgen_ty_1__bindgen_ty_3,
        pub _sigchld: self::siginfo_t__bindgen_ty_1__bindgen_ty_4,
        pub _sigfault: self::siginfo_t__bindgen_ty_1__bindgen_ty_5,
        pub _sigpoll: self::siginfo_t__bindgen_ty_1__bindgen_ty_6,
        pub _sigsys: self::siginfo_t__bindgen_ty_1__bindgen_ty_7,
        _bindgen_union_align: [u64; 14usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
        pub si_pid: self::__pid_t,
        pub si_uid: self::__uid_t,
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_pid as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(si_pid)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_uid as *const _
                    as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(si_uid)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
        pub si_tid: c_int,
        pub si_overrun: c_int,
        pub si_sigval: self::__sigval_t,
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_tid as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(si_tid)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_overrun
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(si_overrun)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_sigval
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(si_sigval)
            )
        );
    }
    impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_2 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for siginfo_t__bindgen_ty_1__bindgen_ty_2 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "siginfo_t__bindgen_ty_1__bindgen_ty_2 {{ si_tid: {:?}, si_overrun: {:?}, si_sigval: {:?} }}" , self . si_tid , self . si_overrun , self . si_sigval )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
        pub si_pid: self::__pid_t,
        pub si_uid: self::__uid_t,
        pub si_sigval: self::__sigval_t,
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_pid as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(si_pid)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_uid as *const _
                    as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(si_uid)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_sigval
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(si_sigval)
            )
        );
    }
    impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_3 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for siginfo_t__bindgen_ty_1__bindgen_ty_3 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "siginfo_t__bindgen_ty_1__bindgen_ty_3 {{ si_pid: {:?}, si_uid: {:?}, si_sigval: {:?} }}" , self . si_pid , self . si_uid , self . si_sigval )
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
        pub si_pid: self::__pid_t,
        pub si_uid: self::__uid_t,
        pub si_status: c_int,
        pub si_utime: self::__clock_t,
        pub si_stime: self::__clock_t,
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
            32usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_pid as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(si_pid)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_uid as *const _
                    as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(si_uid)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_status
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(si_status)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_utime
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(si_utime)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_stime
                    as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(si_stime)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
        pub si_addr: *mut c_void,
        pub si_addr_lsb: c_short,
        pub _bounds: self::siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
        pub _addr_bnd: self::siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        pub _pkey: self::__uint32_t,
        _bindgen_union_align: [u64; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
        pub _lower: *mut c_void,
        pub _upper: *mut c_void,
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<
                    siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
                >()))
                ._lower as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(_lower)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<
                    siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
                >()))
                ._upper as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(_upper)
            )
        );
    }
    impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))
                    ._addr_bnd as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
                "::",
                stringify!(_addr_bnd)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))
                    ._pkey as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
                "::",
                stringify!(_pkey)
            )
        );
    }
    impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {{ union }}"
            )
        }
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
            32usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(si_addr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr_lsb
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(si_addr_lsb)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()))._bounds
                    as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(_bounds)
            )
        );
    }
    impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_5 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for siginfo_t__bindgen_ty_1__bindgen_ty_5 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "siginfo_t__bindgen_ty_1__bindgen_ty_5 {{ si_addr: {:?}, si_addr_lsb: {:?}, _bounds: {:?} }}" , self . si_addr , self . si_addr_lsb , self . _bounds )
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
        pub si_band: c_long,
        pub si_fd: c_int,
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_band
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
                "::",
                stringify!(si_band)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_fd as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
                "::",
                stringify!(si_fd)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
        pub _call_addr: *mut c_void,
        pub _syscall: c_int,
        pub _arch: c_uint,
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
            )
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._call_addr
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
                "::",
                stringify!(_call_addr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._syscall
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
                "::",
                stringify!(_syscall)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._arch as *const _
                    as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
                "::",
                stringify!(_arch)
            )
        );
    }
    impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_7 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[test]
    fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
        assert_eq!(
            size_of::<siginfo_t__bindgen_ty_1>(),
            112usize,
            concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<siginfo_t__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._pad as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1),
                "::",
                stringify!(_pad)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._kill as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1),
                "::",
                stringify!(_kill)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._timer as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1),
                "::",
                stringify!(_timer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._rt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1),
                "::",
                stringify!(_rt)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigchld as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1),
                "::",
                stringify!(_sigchld)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigfault as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1),
                "::",
                stringify!(_sigfault)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigpoll as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1),
                "::",
                stringify!(_sigpoll)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigsys as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t__bindgen_ty_1),
                "::",
                stringify!(_sigsys)
            )
        );
    }
    impl Default for siginfo_t__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for siginfo_t__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "siginfo_t__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_siginfo_t() {
        assert_eq!(
            size_of::<siginfo_t>(),
            128usize,
            concat!("Size of: ", stringify!(siginfo_t))
        );
        assert_eq!(
            align_of::<siginfo_t>(),
            8usize,
            concat!("Alignment of ", stringify!(siginfo_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_signo as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t),
                "::",
                stringify!(si_signo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_errno as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t),
                "::",
                stringify!(si_errno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_code as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t),
                "::",
                stringify!(si_code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<siginfo_t>())).__pad0 as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t),
                "::",
                stringify!(__pad0)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<siginfo_t>()))._sifields as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(siginfo_t),
                "::",
                stringify!(_sifields)
            )
        );
    }
    impl Default for siginfo_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for siginfo_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "siginfo_t {{ si_signo: {:?}, si_errno: {:?}, si_code: {:?}, __pad0: {:?}, _sifields: {:?} }}" , self . si_signo , self . si_errno , self . si_code , self . __pad0 , self . _sifields )
        }
    }
    pub const SI_ASYNCNL: self::_bindgen_ty_65 = -60;
    pub const SI_TKILL: self::_bindgen_ty_65 = -6;
    pub const SI_SIGIO: self::_bindgen_ty_65 = -5;
    pub const SI_ASYNCIO: self::_bindgen_ty_65 = -4;
    pub const SI_MESGQ: self::_bindgen_ty_65 = -3;
    pub const SI_TIMER: self::_bindgen_ty_65 = -2;
    pub const SI_QUEUE: self::_bindgen_ty_65 = -1;
    pub const SI_USER: self::_bindgen_ty_65 = 0;
    pub const SI_KERNEL: self::_bindgen_ty_65 = 128;
    pub type _bindgen_ty_65 = i32;
    pub const ILL_ILLOPC: self::_bindgen_ty_66 = 1;
    pub const ILL_ILLOPN: self::_bindgen_ty_66 = 2;
    pub const ILL_ILLADR: self::_bindgen_ty_66 = 3;
    pub const ILL_ILLTRP: self::_bindgen_ty_66 = 4;
    pub const ILL_PRVOPC: self::_bindgen_ty_66 = 5;
    pub const ILL_PRVREG: self::_bindgen_ty_66 = 6;
    pub const ILL_COPROC: self::_bindgen_ty_66 = 7;
    pub const ILL_BADSTK: self::_bindgen_ty_66 = 8;
    pub type _bindgen_ty_66 = u32;
    pub const FPE_INTDIV: self::_bindgen_ty_67 = 1;
    pub const FPE_INTOVF: self::_bindgen_ty_67 = 2;
    pub const FPE_FLTDIV: self::_bindgen_ty_67 = 3;
    pub const FPE_FLTOVF: self::_bindgen_ty_67 = 4;
    pub const FPE_FLTUND: self::_bindgen_ty_67 = 5;
    pub const FPE_FLTRES: self::_bindgen_ty_67 = 6;
    pub const FPE_FLTINV: self::_bindgen_ty_67 = 7;
    pub const FPE_FLTSUB: self::_bindgen_ty_67 = 8;
    pub type _bindgen_ty_67 = u32;
    pub const SEGV_MAPERR: self::_bindgen_ty_68 = 1;
    pub const SEGV_ACCERR: self::_bindgen_ty_68 = 2;
    pub const SEGV_BNDERR: self::_bindgen_ty_68 = 3;
    pub const SEGV_PKUERR: self::_bindgen_ty_68 = 4;
    pub type _bindgen_ty_68 = u32;
    pub const BUS_ADRALN: self::_bindgen_ty_69 = 1;
    pub const BUS_ADRERR: self::_bindgen_ty_69 = 2;
    pub const BUS_OBJERR: self::_bindgen_ty_69 = 3;
    pub const BUS_MCEERR_AR: self::_bindgen_ty_69 = 4;
    pub const BUS_MCEERR_AO: self::_bindgen_ty_69 = 5;
    pub type _bindgen_ty_69 = u32;
    pub const TRAP_BRKPT: self::_bindgen_ty_70 = 1;
    pub const TRAP_TRACE: self::_bindgen_ty_70 = 2;
    pub type _bindgen_ty_70 = u32;
    pub const CLD_EXITED: self::_bindgen_ty_71 = 1;
    pub const CLD_KILLED: self::_bindgen_ty_71 = 2;
    pub const CLD_DUMPED: self::_bindgen_ty_71 = 3;
    pub const CLD_TRAPPED: self::_bindgen_ty_71 = 4;
    pub const CLD_STOPPED: self::_bindgen_ty_71 = 5;
    pub const CLD_CONTINUED: self::_bindgen_ty_71 = 6;
    pub type _bindgen_ty_71 = u32;
    pub const POLL_IN: self::_bindgen_ty_72 = 1;
    pub const POLL_OUT: self::_bindgen_ty_72 = 2;
    pub const POLL_MSG: self::_bindgen_ty_72 = 3;
    pub const POLL_ERR: self::_bindgen_ty_72 = 4;
    pub const POLL_PRI: self::_bindgen_ty_72 = 5;
    pub const POLL_HUP: self::_bindgen_ty_72 = 6;
    pub type _bindgen_ty_72 = u32;
    pub type sigval_t = self::__sigval_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sigevent {
        pub sigev_value: self::__sigval_t,
        pub sigev_signo: c_int,
        pub sigev_notify: c_int,
        pub _sigev_un: self::sigevent__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigevent__bindgen_ty_1 {
        pub _pad: [c_int; 12usize],
        pub _tid: self::__pid_t,
        pub _sigev_thread: self::sigevent__bindgen_ty_1__bindgen_ty_1,
        _bindgen_union_align: [u64; 6usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
        pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: self::__sigval_t)>,
        pub _attribute: *mut self::pthread_attr_t,
    }
    #[test]
    fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._function
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(_function)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._attribute
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(_attribute)
            )
        );
    }
    impl Default for sigevent__bindgen_ty_1__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[test]
    fn bindgen_test_layout_sigevent__bindgen_ty_1() {
        assert_eq!(
            size_of::<sigevent__bindgen_ty_1>(),
            48usize,
            concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<sigevent__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._pad as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent__bindgen_ty_1),
                "::",
                stringify!(_pad)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._tid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent__bindgen_ty_1),
                "::",
                stringify!(_tid)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._sigev_thread as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent__bindgen_ty_1),
                "::",
                stringify!(_sigev_thread)
            )
        );
    }
    impl Default for sigevent__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sigevent__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "sigevent__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_sigevent() {
        assert_eq!(
            size_of::<sigevent>(),
            64usize,
            concat!("Size of: ", stringify!(sigevent))
        );
        assert_eq!(
            align_of::<sigevent>(),
            8usize,
            concat!("Alignment of ", stringify!(sigevent))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_signo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigevent>()))._sigev_un as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(_sigev_un)
            )
        );
    }
    impl Default for sigevent {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sigevent {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "sigevent {{ sigev_value: {:?}, sigev_signo: {:?}, sigev_notify: {:?}, _sigev_un: {:?} }}" , self . sigev_value , self . sigev_signo , self . sigev_notify , self . _sigev_un )
        }
    }
    pub type sigevent_t = self::sigevent;
    pub const SIGEV_SIGNAL: self::_bindgen_ty_73 = 0;
    pub const SIGEV_NONE: self::_bindgen_ty_73 = 1;
    pub const SIGEV_THREAD: self::_bindgen_ty_73 = 2;
    pub const SIGEV_THREAD_ID: self::_bindgen_ty_73 = 4;
    pub type _bindgen_ty_73 = u32;
    pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: c_int)>;
    extern "C" {
        pub fn __sysv_signal(__sig: c_int, __handler: self::__sighandler_t)
            -> self::__sighandler_t;
    }
    extern "C" {
        pub fn sysv_signal(__sig: c_int, __handler: self::__sighandler_t) -> self::__sighandler_t;
    }
    extern "C" {
        pub fn signal(__sig: c_int, __handler: self::__sighandler_t) -> self::__sighandler_t;
    }
    extern "C" {
        pub fn kill(__pid: self::__pid_t, __sig: c_int) -> c_int;
    }
    extern "C" {
        pub fn killpg(__pgrp: self::__pid_t, __sig: c_int) -> c_int;
    }
    extern "C" {
        pub fn raise(__sig: c_int) -> c_int;
    }
    extern "C" {
        pub fn ssignal(__sig: c_int, __handler: self::__sighandler_t) -> self::__sighandler_t;
    }
    extern "C" {
        pub fn gsignal(__sig: c_int) -> c_int;
    }
    extern "C" {
        pub fn psignal(__sig: c_int, __s: *const c_char);
    }
    extern "C" {
        pub fn psiginfo(__pinfo: *const self::siginfo_t, __s: *const c_char);
    }
    extern "C" {
        pub fn sigpause(__sig: c_int) -> c_int;
    }
    extern "C" {
        pub fn sigblock(__mask: c_int) -> c_int;
    }
    extern "C" {
        pub fn sigsetmask(__mask: c_int) -> c_int;
    }
    extern "C" {
        pub fn siggetmask() -> c_int;
    }
    pub type sighandler_t = self::__sighandler_t;
    pub type sig_t = self::__sighandler_t;
    extern "C" {
        pub fn sigemptyset(__set: *mut self::sigset_t) -> c_int;
    }
    extern "C" {
        pub fn sigfillset(__set: *mut self::sigset_t) -> c_int;
    }
    extern "C" {
        pub fn sigaddset(__set: *mut self::sigset_t, __signo: c_int) -> c_int;
    }
    extern "C" {
        pub fn sigdelset(__set: *mut self::sigset_t, __signo: c_int) -> c_int;
    }
    extern "C" {
        pub fn sigismember(__set: *const self::sigset_t, __signo: c_int) -> c_int;
    }
    extern "C" {
        pub fn sigisemptyset(__set: *const self::sigset_t) -> c_int;
    }
    extern "C" {
        pub fn sigandset(
            __set: *mut self::sigset_t,
            __left: *const self::sigset_t,
            __right: *const self::sigset_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn sigorset(
            __set: *mut self::sigset_t,
            __left: *const self::sigset_t,
            __right: *const self::sigset_t,
        ) -> c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sigaction {
        pub __sigaction_handler: self::sigaction__bindgen_ty_1,
        pub sa_mask: self::__sigset_t,
        pub sa_flags: c_int,
        pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigaction__bindgen_ty_1 {
        pub sa_handler: self::__sighandler_t,
        pub sa_sigaction: ::std::option::Option<
            unsafe extern "C" fn(arg1: c_int, arg2: *mut self::siginfo_t, arg3: *mut c_void),
        >,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_sigaction__bindgen_ty_1() {
        assert_eq!(
            size_of::<sigaction__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<sigaction__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_handler as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction__bindgen_ty_1),
                "::",
                stringify!(sa_handler)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_sigaction as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction__bindgen_ty_1),
                "::",
                stringify!(sa_sigaction)
            )
        );
    }
    impl Default for sigaction__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sigaction__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "sigaction__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_sigaction() {
        assert_eq!(
            size_of::<sigaction>(),
            152usize,
            concat!("Size of: ", stringify!(sigaction))
        );
        assert_eq!(
            align_of::<sigaction>(),
            8usize,
            concat!("Alignment of ", stringify!(sigaction))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sigaction>())).__sigaction_handler as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(__sigaction_handler)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_mask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigaction>())).sa_restorer as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_restorer)
            )
        );
    }
    impl Default for sigaction {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sigaction {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "sigaction {{ __sigaction_handler: {:?}, sa_mask: {:?}, sa_flags: {:?}, sa_restorer: {:?} }}" , self . __sigaction_handler , self . sa_mask , self . sa_flags , self . sa_restorer )
        }
    }
    extern "C" {
        pub fn sigprocmask(
            __how: c_int,
            __set: *const self::sigset_t,
            __oset: *mut self::sigset_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn sigsuspend(__set: *const self::sigset_t) -> c_int;
    }
    extern "C" {
        pub fn sigaction(
            __sig: c_int,
            __act: *const self::sigaction,
            __oact: *mut self::sigaction,
        ) -> c_int;
    }
    extern "C" {
        pub fn sigpending(__set: *mut self::sigset_t) -> c_int;
    }
    extern "C" {
        pub fn sigwait(__set: *const self::sigset_t, __sig: *mut c_int) -> c_int;
    }
    extern "C" {
        pub fn sigwaitinfo(__set: *const self::sigset_t, __info: *mut self::siginfo_t) -> c_int;
    }
    extern "C" {
        pub fn sigtimedwait(
            __set: *const self::sigset_t,
            __info: *mut self::siginfo_t,
            __timeout: *const self::timespec,
        ) -> c_int;
    }
    extern "C" {
        pub fn sigqueue(__pid: self::__pid_t, __sig: c_int, __val: self::sigval) -> c_int;
    }
    extern "C" {
        pub static mut _sys_siglist: [*const c_char; 65usize];
    }
    extern "C" {
        pub static mut sys_siglist: [*const c_char; 65usize];
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _fpx_sw_bytes {
        pub magic1: self::__uint32_t,
        pub extended_size: self::__uint32_t,
        pub xstate_bv: self::__uint64_t,
        pub xstate_size: self::__uint32_t,
        pub __glibc_reserved1: [self::__uint32_t; 7usize],
    }
    #[test]
    fn bindgen_test_layout__fpx_sw_bytes() {
        assert_eq!(
            size_of::<_fpx_sw_bytes>(),
            48usize,
            concat!("Size of: ", stringify!(_fpx_sw_bytes))
        );
        assert_eq!(
            align_of::<_fpx_sw_bytes>(),
            8usize,
            concat!("Alignment of ", stringify!(_fpx_sw_bytes))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).magic1 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpx_sw_bytes),
                "::",
                stringify!(magic1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).extended_size as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpx_sw_bytes),
                "::",
                stringify!(extended_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_bv as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpx_sw_bytes),
                "::",
                stringify!(xstate_bv)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_size as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpx_sw_bytes),
                "::",
                stringify!(xstate_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_fpx_sw_bytes>())).__glibc_reserved1 as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpx_sw_bytes),
                "::",
                stringify!(__glibc_reserved1)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _fpreg {
        pub significand: [c_ushort; 4usize],
        pub exponent: c_ushort,
    }
    #[test]
    fn bindgen_test_layout__fpreg() {
        assert_eq!(
            size_of::<_fpreg>(),
            10usize,
            concat!("Size of: ", stringify!(_fpreg))
        );
        assert_eq!(
            align_of::<_fpreg>(),
            2usize,
            concat!("Alignment of ", stringify!(_fpreg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpreg>())).significand as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpreg),
                "::",
                stringify!(significand)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpreg>())).exponent as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpreg),
                "::",
                stringify!(exponent)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _fpxreg {
        pub significand: [c_ushort; 4usize],
        pub exponent: c_ushort,
        pub __glibc_reserved1: [c_ushort; 3usize],
    }
    #[test]
    fn bindgen_test_layout__fpxreg() {
        assert_eq!(
            size_of::<_fpxreg>(),
            16usize,
            concat!("Size of: ", stringify!(_fpxreg))
        );
        assert_eq!(
            align_of::<_fpxreg>(),
            2usize,
            concat!("Alignment of ", stringify!(_fpxreg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpxreg>())).significand as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpxreg),
                "::",
                stringify!(significand)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpxreg>())).exponent as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpxreg),
                "::",
                stringify!(exponent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpxreg>())).__glibc_reserved1 as *const _ as usize },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpxreg),
                "::",
                stringify!(__glibc_reserved1)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _xmmreg {
        pub element: [self::__uint32_t; 4usize],
    }
    #[test]
    fn bindgen_test_layout__xmmreg() {
        assert_eq!(
            size_of::<_xmmreg>(),
            16usize,
            concat!("Size of: ", stringify!(_xmmreg))
        );
        assert_eq!(
            align_of::<_xmmreg>(),
            4usize,
            concat!("Alignment of ", stringify!(_xmmreg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_xmmreg>())).element as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_xmmreg),
                "::",
                stringify!(element)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _fpstate {
        pub cwd: self::__uint16_t,
        pub swd: self::__uint16_t,
        pub ftw: self::__uint16_t,
        pub fop: self::__uint16_t,
        pub rip: self::__uint64_t,
        pub rdp: self::__uint64_t,
        pub mxcsr: self::__uint32_t,
        pub mxcr_mask: self::__uint32_t,
        pub _st: [self::_fpxreg; 8usize],
        pub _xmm: [self::_xmmreg; 16usize],
        pub __glibc_reserved1: [self::__uint32_t; 24usize],
    }
    #[test]
    fn bindgen_test_layout__fpstate() {
        assert_eq!(
            size_of::<_fpstate>(),
            512usize,
            concat!("Size of: ", stringify!(_fpstate))
        );
        assert_eq!(
            align_of::<_fpstate>(),
            8usize,
            concat!("Alignment of ", stringify!(_fpstate))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).cwd as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(cwd)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).swd as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(swd)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).ftw as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(ftw)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).fop as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(fop)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).rip as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(rip)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).rdp as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(rdp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcsr as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(mxcsr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcr_mask as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(mxcr_mask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>()))._st as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(_st)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>()))._xmm as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(_xmm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_fpstate>())).__glibc_reserved1 as *const _ as usize },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(_fpstate),
                "::",
                stringify!(__glibc_reserved1)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sigcontext {
        pub r8: self::__uint64_t,
        pub r9: self::__uint64_t,
        pub r10: self::__uint64_t,
        pub r11: self::__uint64_t,
        pub r12: self::__uint64_t,
        pub r13: self::__uint64_t,
        pub r14: self::__uint64_t,
        pub r15: self::__uint64_t,
        pub rdi: self::__uint64_t,
        pub rsi: self::__uint64_t,
        pub rbp: self::__uint64_t,
        pub rbx: self::__uint64_t,
        pub rdx: self::__uint64_t,
        pub rax: self::__uint64_t,
        pub rcx: self::__uint64_t,
        pub rsp: self::__uint64_t,
        pub rip: self::__uint64_t,
        pub eflags: self::__uint64_t,
        pub cs: c_ushort,
        pub gs: c_ushort,
        pub fs: c_ushort,
        pub __pad0: c_ushort,
        pub err: self::__uint64_t,
        pub trapno: self::__uint64_t,
        pub oldmask: self::__uint64_t,
        pub cr2: self::__uint64_t,
        pub __bindgen_anon_1: self::sigcontext__bindgen_ty_1,
        pub __reserved1: [self::__uint64_t; 8usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigcontext__bindgen_ty_1 {
        pub fpstate: *mut self::_fpstate,
        pub __fpstate_word: self::__uint64_t,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
        assert_eq!(
            size_of::<sigcontext__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(sigcontext__bindgen_ty_1))
        );
        assert_eq!(
            align_of::<sigcontext__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(sigcontext__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).fpstate as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext__bindgen_ty_1),
                "::",
                stringify!(fpstate)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).__fpstate_word as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext__bindgen_ty_1),
                "::",
                stringify!(__fpstate_word)
            )
        );
    }
    impl Default for sigcontext__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sigcontext__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "sigcontext__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_sigcontext() {
        assert_eq!(
            size_of::<sigcontext>(),
            256usize,
            concat!("Size of: ", stringify!(sigcontext))
        );
        assert_eq!(
            align_of::<sigcontext>(),
            8usize,
            concat!("Alignment of ", stringify!(sigcontext))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).r8 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(r8)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).r9 as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(r9)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).r10 as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(r10)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).r11 as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(r11)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).r12 as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(r12)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).r13 as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(r13)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).r14 as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(r14)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).r15 as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(r15)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rdi as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rdi)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rsi as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rsi)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rbp as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rbp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rbx as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rbx)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rdx as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rdx)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rax as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rax)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rcx as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rcx)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rsp as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rsp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).rip as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(rip)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).eflags as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(eflags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).cs as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(cs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).gs as *const _ as usize },
            146usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(gs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).fs as *const _ as usize },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(fs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).__pad0 as *const _ as usize },
            150usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(__pad0)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).err as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(err)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).trapno as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(trapno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).oldmask as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(oldmask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).cr2 as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(cr2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigcontext>())).__reserved1 as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(sigcontext),
                "::",
                stringify!(__reserved1)
            )
        );
    }
    impl Default for sigcontext {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for sigcontext {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "sigcontext {{ r8: {:?}, r9: {:?}, r10: {:?}, r11: {:?}, r12: {:?}, r13: {:?}, r14: {:?}, r15: {:?}, rdi: {:?}, rsi: {:?}, rbp: {:?}, rbx: {:?}, rdx: {:?}, rax: {:?}, rcx: {:?}, rsp: {:?}, rip: {:?}, eflags: {:?}, cs: {:?}, gs: {:?}, fs: {:?}, __pad0: {:?}, err: {:?}, trapno: {:?}, oldmask: {:?}, cr2: {:?}, __bindgen_anon_1: {:?}, __reserved1: {:?} }}" , self . r8 , self . r9 , self . r10 , self . r11 , self . r12 , self . r13 , self . r14 , self . r15 , self . rdi , self . rsi , self . rbp , self . rbx , self . rdx , self . rax , self . rcx , self . rsp , self . rip , self . eflags , self . cs , self . gs , self . fs , self . __pad0 , self . err , self . trapno , self . oldmask , self . cr2 , self . __bindgen_anon_1 , self . __reserved1 )
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _xsave_hdr {
        pub xstate_bv: self::__uint64_t,
        pub __glibc_reserved1: [self::__uint64_t; 2usize],
        pub __glibc_reserved2: [self::__uint64_t; 5usize],
    }
    #[test]
    fn bindgen_test_layout__xsave_hdr() {
        assert_eq!(
            size_of::<_xsave_hdr>(),
            64usize,
            concat!("Size of: ", stringify!(_xsave_hdr))
        );
        assert_eq!(
            align_of::<_xsave_hdr>(),
            8usize,
            concat!("Alignment of ", stringify!(_xsave_hdr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).xstate_bv as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_xsave_hdr),
                "::",
                stringify!(xstate_bv)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved1 as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_xsave_hdr),
                "::",
                stringify!(__glibc_reserved1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved2 as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_xsave_hdr),
                "::",
                stringify!(__glibc_reserved2)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _ymmh_state {
        pub ymmh_space: [self::__uint32_t; 64usize],
    }
    #[test]
    fn bindgen_test_layout__ymmh_state() {
        assert_eq!(
            size_of::<_ymmh_state>(),
            256usize,
            concat!("Size of: ", stringify!(_ymmh_state))
        );
        assert_eq!(
            align_of::<_ymmh_state>(),
            4usize,
            concat!("Alignment of ", stringify!(_ymmh_state))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_ymmh_state>())).ymmh_space as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ymmh_state),
                "::",
                stringify!(ymmh_space)
            )
        );
    }
    impl Default for _ymmh_state {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for _ymmh_state {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_ymmh_state {{ ymmh_space: [{}] }}",
                self.ymmh_space
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>()
            )
        }
    }
    impl PartialEq for _ymmh_state {
        fn eq(&self, other: &_ymmh_state) -> bool {
            &self.ymmh_space[..] == &other.ymmh_space[..]
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _xstate {
        pub fpstate: self::_fpstate,
        pub xstate_hdr: self::_xsave_hdr,
        pub ymmh: self::_ymmh_state,
    }
    #[test]
    fn bindgen_test_layout__xstate() {
        assert_eq!(
            size_of::<_xstate>(),
            832usize,
            concat!("Size of: ", stringify!(_xstate))
        );
        assert_eq!(
            align_of::<_xstate>(),
            8usize,
            concat!("Alignment of ", stringify!(_xstate))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_xstate>())).fpstate as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_xstate),
                "::",
                stringify!(fpstate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_xstate>())).xstate_hdr as *const _ as usize },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(_xstate),
                "::",
                stringify!(xstate_hdr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_xstate>())).ymmh as *const _ as usize },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(_xstate),
                "::",
                stringify!(ymmh)
            )
        );
    }
    impl Default for _xstate {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    impl ::std::fmt::Debug for _xstate {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_xstate {{ fpstate: {:?}, xstate_hdr: {:?}, ymmh: {:?} }}",
                self.fpstate, self.xstate_hdr, self.ymmh
            )
        }
    }
    impl PartialEq for _xstate {
        fn eq(&self, other: &_xstate) -> bool {
            self.fpstate == other.fpstate
                && self.xstate_hdr == other.xstate_hdr
                && self.ymmh == other.ymmh
        }
    }
    extern "C" {
        pub fn sigreturn(__scp: *mut self::sigcontext) -> c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct stack_t {
        pub ss_sp: *mut c_void,
        pub ss_flags: c_int,
        pub ss_size: usize,
    }
    #[test]
    fn bindgen_test_layout_stack_t() {
        assert_eq!(
            size_of::<stack_t>(),
            24usize,
            concat!("Size of: ", stringify!(stack_t))
        );
        assert_eq!(
            align_of::<stack_t>(),
            8usize,
            concat!("Alignment of ", stringify!(stack_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stack_t>())).ss_sp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(stack_t),
                "::",
                stringify!(ss_sp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stack_t>())).ss_flags as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(stack_t),
                "::",
                stringify!(ss_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stack_t>())).ss_size as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(stack_t),
                "::",
                stringify!(ss_size)
            )
        );
    }
    impl Default for stack_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    pub type greg_t = c_longlong;
    pub type gregset_t = [self::greg_t; 23usize];
    pub const REG_R8: self::_bindgen_ty_74 = 0;
    pub const REG_R9: self::_bindgen_ty_74 = 1;
    pub const REG_R10: self::_bindgen_ty_74 = 2;
    pub const REG_R11: self::_bindgen_ty_74 = 3;
    pub const REG_R12: self::_bindgen_ty_74 = 4;
    pub const REG_R13: self::_bindgen_ty_74 = 5;
    pub const REG_R14: self::_bindgen_ty_74 = 6;
    pub const REG_R15: self::_bindgen_ty_74 = 7;
    pub const REG_RDI: self::_bindgen_ty_74 = 8;
    pub const REG_RSI: self::_bindgen_ty_74 = 9;
    pub const REG_RBP: self::_bindgen_ty_74 = 10;
    pub const REG_RBX: self::_bindgen_ty_74 = 11;
    pub const REG_RDX: self::_bindgen_ty_74 = 12;
    pub const REG_RAX: self::_bindgen_ty_74 = 13;
    pub const REG_RCX: self::_bindgen_ty_74 = 14;
    pub const REG_RSP: self::_bindgen_ty_74 = 15;
    pub const REG_RIP: self::_bindgen_ty_74 = 16;
    pub const REG_EFL: self::_bindgen_ty_74 = 17;
    pub const REG_CSGSFS: self::_bindgen_ty_74 = 18;
    pub const REG_ERR: self::_bindgen_ty_74 = 19;
    pub const REG_TRAPNO: self::_bindgen_ty_74 = 20;
    pub const REG_OLDMASK: self::_bindgen_ty_74 = 21;
    pub const REG_CR2: self::_bindgen_ty_74 = 22;
    pub type _bindgen_ty_74 = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _libc_fpxreg {
        pub significand: [c_ushort; 4usize],
        pub exponent: c_ushort,
        pub __glibc_reserved1: [c_ushort; 3usize],
    }
    #[test]
    fn bindgen_test_layout__libc_fpxreg() {
        assert_eq!(
            size_of::<_libc_fpxreg>(),
            16usize,
            concat!("Size of: ", stringify!(_libc_fpxreg))
        );
        assert_eq!(
            align_of::<_libc_fpxreg>(),
            2usize,
            concat!("Alignment of ", stringify!(_libc_fpxreg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).significand as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpxreg),
                "::",
                stringify!(significand)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).exponent as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpxreg),
                "::",
                stringify!(exponent)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_libc_fpxreg>())).__glibc_reserved1 as *const _ as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpxreg),
                "::",
                stringify!(__glibc_reserved1)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _libc_xmmreg {
        pub element: [self::__uint32_t; 4usize],
    }
    #[test]
    fn bindgen_test_layout__libc_xmmreg() {
        assert_eq!(
            size_of::<_libc_xmmreg>(),
            16usize,
            concat!("Size of: ", stringify!(_libc_xmmreg))
        );
        assert_eq!(
            align_of::<_libc_xmmreg>(),
            4usize,
            concat!("Alignment of ", stringify!(_libc_xmmreg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_xmmreg>())).element as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_xmmreg),
                "::",
                stringify!(element)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _libc_fpstate {
        pub cwd: self::__uint16_t,
        pub swd: self::__uint16_t,
        pub ftw: self::__uint16_t,
        pub fop: self::__uint16_t,
        pub rip: self::__uint64_t,
        pub rdp: self::__uint64_t,
        pub mxcsr: self::__uint32_t,
        pub mxcr_mask: self::__uint32_t,
        pub _st: [self::_libc_fpxreg; 8usize],
        pub _xmm: [self::_libc_xmmreg; 16usize],
        pub __glibc_reserved1: [self::__uint32_t; 24usize],
    }
    #[test]
    fn bindgen_test_layout__libc_fpstate() {
        assert_eq!(
            size_of::<_libc_fpstate>(),
            512usize,
            concat!("Size of: ", stringify!(_libc_fpstate))
        );
        assert_eq!(
            align_of::<_libc_fpstate>(),
            8usize,
            concat!("Alignment of ", stringify!(_libc_fpstate))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).cwd as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(cwd)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).swd as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(swd)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).ftw as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(ftw)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).fop as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(fop)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rip as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(rip)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rdp as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(rdp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcsr as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(mxcsr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcr_mask as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(mxcr_mask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._st as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(_st)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._xmm as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(_xmm)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_libc_fpstate>())).__glibc_reserved1 as *const _ as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(_libc_fpstate),
                "::",
                stringify!(__glibc_reserved1)
            )
        );
    }
    pub type fpregset_t = *mut self::_libc_fpstate;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mcontext_t {
        pub gregs: self::gregset_t,
        pub fpregs: self::fpregset_t,
        pub __reserved1: [c_ulonglong; 8usize],
    }
    #[test]
    fn bindgen_test_layout_mcontext_t() {
        assert_eq!(
            size_of::<mcontext_t>(),
            256usize,
            concat!("Size of: ", stringify!(mcontext_t))
        );
        assert_eq!(
            align_of::<mcontext_t>(),
            8usize,
            concat!("Alignment of ", stringify!(mcontext_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<mcontext_t>())).gregs as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mcontext_t),
                "::",
                stringify!(gregs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<mcontext_t>())).fpregs as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(mcontext_t),
                "::",
                stringify!(fpregs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<mcontext_t>())).__reserved1 as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(mcontext_t),
                "::",
                stringify!(__reserved1)
            )
        );
    }
    impl Default for mcontext_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ucontext_t {
        pub uc_flags: c_ulong,
        pub uc_link: *mut self::ucontext_t,
        pub uc_stack: self::stack_t,
        pub uc_mcontext: self::mcontext_t,
        pub uc_sigmask: self::sigset_t,
        pub __fpregs_mem: self::_libc_fpstate,
        pub __ssp: [c_ulonglong; 4usize],
    }
    #[test]
    fn bindgen_test_layout_ucontext_t() {
        assert_eq!(
            size_of::<ucontext_t>(),
            968usize,
            concat!("Size of: ", stringify!(ucontext_t))
        );
        assert_eq!(
            align_of::<ucontext_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ucontext_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ucontext_t),
                "::",
                stringify!(uc_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_link as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ucontext_t),
                "::",
                stringify!(uc_link)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_stack as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ucontext_t),
                "::",
                stringify!(uc_stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_mcontext as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ucontext_t),
                "::",
                stringify!(uc_mcontext)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_sigmask as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(ucontext_t),
                "::",
                stringify!(uc_sigmask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucontext_t>())).__fpregs_mem as *const _ as usize },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(ucontext_t),
                "::",
                stringify!(__fpregs_mem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucontext_t>())).__ssp as *const _ as usize },
            936usize,
            concat!(
                "Offset of field: ",
                stringify!(ucontext_t),
                "::",
                stringify!(__ssp)
            )
        );
    }
    impl Default for ucontext_t {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        pub fn siginterrupt(__sig: c_int, __interrupt: c_int) -> c_int;
    }
    pub const SS_ONSTACK: self::_bindgen_ty_75 = 1;
    pub const SS_DISABLE: self::_bindgen_ty_75 = 2;
    pub type _bindgen_ty_75 = u32;
    extern "C" {
        pub fn sigaltstack(__ss: *const self::stack_t, __oss: *mut self::stack_t) -> c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sigstack {
        pub ss_sp: *mut c_void,
        pub ss_onstack: c_int,
    }
    #[test]
    fn bindgen_test_layout_sigstack() {
        assert_eq!(
            size_of::<sigstack>(),
            16usize,
            concat!("Size of: ", stringify!(sigstack))
        );
        assert_eq!(
            align_of::<sigstack>(),
            8usize,
            concat!("Alignment of ", stringify!(sigstack))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigstack),
                "::",
                stringify!(ss_sp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigstack),
                "::",
                stringify!(ss_onstack)
            )
        );
    }
    impl Default for sigstack {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    extern "C" {
        pub fn sigstack(__ss: *mut self::sigstack, __oss: *mut self::sigstack) -> c_int;
    }
    extern "C" {
        pub fn sighold(__sig: c_int) -> c_int;
    }
    extern "C" {
        pub fn sigrelse(__sig: c_int) -> c_int;
    }
    extern "C" {
        pub fn sigignore(__sig: c_int) -> c_int;
    }
    extern "C" {
        pub fn sigset(__sig: c_int, __disp: self::__sighandler_t) -> self::__sighandler_t;
    }
    extern "C" {
        pub fn pthread_sigmask(
            __how: c_int,
            __newmask: *const self::__sigset_t,
            __oldmask: *mut self::__sigset_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn pthread_kill(__threadid: self::pthread_t, __signo: c_int) -> c_int;
    }
    extern "C" {
        pub fn pthread_sigqueue(
            __threadid: self::pthread_t,
            __signo: c_int,
            __value: self::sigval,
        ) -> c_int;
    }
    extern "C" {
        pub fn __libc_current_sigrtmin() -> c_int;
    }
    extern "C" {
        pub fn __libc_current_sigrtmax() -> c_int;
    }
    extern "C" {
        pub fn access(__name: *const c_char, __type: c_int) -> c_int;
    }
    extern "C" {
        pub fn euidaccess(__name: *const c_char, __type: c_int) -> c_int;
    }
    extern "C" {
        pub fn eaccess(__name: *const c_char, __type: c_int) -> c_int;
    }
    extern "C" {
        pub fn faccessat(__fd: c_int, __file: *const c_char, __type: c_int, __flag: c_int)
            -> c_int;
    }
    extern "C" {
        pub fn lseek(__fd: c_int, __offset: self::__off_t, __whence: c_int) -> self::__off_t;
    }
    extern "C" {
        pub fn lseek64(__fd: c_int, __offset: self::__off64_t, __whence: c_int) -> self::__off64_t;
    }
    extern "C" {
        pub fn close(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn read(__fd: c_int, __buf: *mut c_void, __nbytes: usize) -> isize;
    }
    extern "C" {
        pub fn write(__fd: c_int, __buf: *const c_void, __n: usize) -> isize;
    }
    extern "C" {
        pub fn pread(
            __fd: c_int,
            __buf: *mut c_void,
            __nbytes: usize,
            __offset: self::__off_t,
        ) -> isize;
    }
    extern "C" {
        pub fn pwrite(
            __fd: c_int,
            __buf: *const c_void,
            __n: usize,
            __offset: self::__off_t,
        ) -> isize;
    }
    extern "C" {
        pub fn pread64(
            __fd: c_int,
            __buf: *mut c_void,
            __nbytes: usize,
            __offset: self::__off64_t,
        ) -> isize;
    }
    extern "C" {
        pub fn pwrite64(
            __fd: c_int,
            __buf: *const c_void,
            __n: usize,
            __offset: self::__off64_t,
        ) -> isize;
    }
    extern "C" {
        pub fn pipe(__pipedes: *mut c_int) -> c_int;
    }
    extern "C" {
        pub fn pipe2(__pipedes: *mut c_int, __flags: c_int) -> c_int;
    }
    extern "C" {
        pub fn alarm(__seconds: c_uint) -> c_uint;
    }
    extern "C" {
        pub fn sleep(__seconds: c_uint) -> c_uint;
    }
    extern "C" {
        pub fn ualarm(
            __value: self::__useconds_t,
            __interval: self::__useconds_t,
        ) -> self::__useconds_t;
    }
    extern "C" {
        pub fn usleep(__useconds: self::__useconds_t) -> c_int;
    }
    extern "C" {
        pub fn pause() -> c_int;
    }
    extern "C" {
        pub fn chown(
            __file: *const c_char,
            __owner: self::__uid_t,
            __group: self::__gid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn fchown(__fd: c_int, __owner: self::__uid_t, __group: self::__gid_t) -> c_int;
    }
    extern "C" {
        pub fn lchown(
            __file: *const c_char,
            __owner: self::__uid_t,
            __group: self::__gid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn fchownat(
            __fd: c_int,
            __file: *const c_char,
            __owner: self::__uid_t,
            __group: self::__gid_t,
            __flag: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn chdir(__path: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn fchdir(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn getcwd(__buf: *mut c_char, __size: usize) -> *mut c_char;
    }
    extern "C" {
        pub fn get_current_dir_name() -> *mut c_char;
    }
    extern "C" {
        pub fn getwd(__buf: *mut c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn dup(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn dup2(__fd: c_int, __fd2: c_int) -> c_int;
    }
    extern "C" {
        pub fn dup3(__fd: c_int, __fd2: c_int, __flags: c_int) -> c_int;
    }
    extern "C" {
        pub static mut __environ: *mut *mut c_char;
    }
    extern "C" {
        pub static mut environ: *mut *mut c_char;
    }
    extern "C" {
        pub fn execve(
            __path: *const c_char,
            __argv: *const *mut c_char,
            __envp: *const *mut c_char,
        ) -> c_int;
    }
    extern "C" {
        pub fn fexecve(
            __fd: c_int,
            __argv: *const *mut c_char,
            __envp: *const *mut c_char,
        ) -> c_int;
    }
    extern "C" {
        pub fn execv(__path: *const c_char, __argv: *const *mut c_char) -> c_int;
    }
    extern "C" {
        pub fn execle(__path: *const c_char, __arg: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn execl(__path: *const c_char, __arg: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn execvp(__file: *const c_char, __argv: *const *mut c_char) -> c_int;
    }
    extern "C" {
        pub fn execlp(__file: *const c_char, __arg: *const c_char, ...) -> c_int;
    }
    extern "C" {
        pub fn execvpe(
            __file: *const c_char,
            __argv: *const *mut c_char,
            __envp: *const *mut c_char,
        ) -> c_int;
    }
    extern "C" {
        pub fn nice(__inc: c_int) -> c_int;
    }
    extern "C" {
        pub fn _exit(__status: c_int);
    }
    pub const _PC_LINK_MAX: self::_bindgen_ty_76 = 0;
    pub const _PC_MAX_CANON: self::_bindgen_ty_76 = 1;
    pub const _PC_MAX_INPUT: self::_bindgen_ty_76 = 2;
    pub const _PC_NAME_MAX: self::_bindgen_ty_76 = 3;
    pub const _PC_PATH_MAX: self::_bindgen_ty_76 = 4;
    pub const _PC_PIPE_BUF: self::_bindgen_ty_76 = 5;
    pub const _PC_CHOWN_RESTRICTED: self::_bindgen_ty_76 = 6;
    pub const _PC_NO_TRUNC: self::_bindgen_ty_76 = 7;
    pub const _PC_VDISABLE: self::_bindgen_ty_76 = 8;
    pub const _PC_SYNC_IO: self::_bindgen_ty_76 = 9;
    pub const _PC_ASYNC_IO: self::_bindgen_ty_76 = 10;
    pub const _PC_PRIO_IO: self::_bindgen_ty_76 = 11;
    pub const _PC_SOCK_MAXBUF: self::_bindgen_ty_76 = 12;
    pub const _PC_FILESIZEBITS: self::_bindgen_ty_76 = 13;
    pub const _PC_REC_INCR_XFER_SIZE: self::_bindgen_ty_76 = 14;
    pub const _PC_REC_MAX_XFER_SIZE: self::_bindgen_ty_76 = 15;
    pub const _PC_REC_MIN_XFER_SIZE: self::_bindgen_ty_76 = 16;
    pub const _PC_REC_XFER_ALIGN: self::_bindgen_ty_76 = 17;
    pub const _PC_ALLOC_SIZE_MIN: self::_bindgen_ty_76 = 18;
    pub const _PC_SYMLINK_MAX: self::_bindgen_ty_76 = 19;
    pub const _PC_2_SYMLINKS: self::_bindgen_ty_76 = 20;
    pub type _bindgen_ty_76 = u32;
    pub const _SC_ARG_MAX: self::_bindgen_ty_77 = 0;
    pub const _SC_CHILD_MAX: self::_bindgen_ty_77 = 1;
    pub const _SC_CLK_TCK: self::_bindgen_ty_77 = 2;
    pub const _SC_NGROUPS_MAX: self::_bindgen_ty_77 = 3;
    pub const _SC_OPEN_MAX: self::_bindgen_ty_77 = 4;
    pub const _SC_STREAM_MAX: self::_bindgen_ty_77 = 5;
    pub const _SC_TZNAME_MAX: self::_bindgen_ty_77 = 6;
    pub const _SC_JOB_CONTROL: self::_bindgen_ty_77 = 7;
    pub const _SC_SAVED_IDS: self::_bindgen_ty_77 = 8;
    pub const _SC_REALTIME_SIGNALS: self::_bindgen_ty_77 = 9;
    pub const _SC_PRIORITY_SCHEDULING: self::_bindgen_ty_77 = 10;
    pub const _SC_TIMERS: self::_bindgen_ty_77 = 11;
    pub const _SC_ASYNCHRONOUS_IO: self::_bindgen_ty_77 = 12;
    pub const _SC_PRIORITIZED_IO: self::_bindgen_ty_77 = 13;
    pub const _SC_SYNCHRONIZED_IO: self::_bindgen_ty_77 = 14;
    pub const _SC_FSYNC: self::_bindgen_ty_77 = 15;
    pub const _SC_MAPPED_FILES: self::_bindgen_ty_77 = 16;
    pub const _SC_MEMLOCK: self::_bindgen_ty_77 = 17;
    pub const _SC_MEMLOCK_RANGE: self::_bindgen_ty_77 = 18;
    pub const _SC_MEMORY_PROTECTION: self::_bindgen_ty_77 = 19;
    pub const _SC_MESSAGE_PASSING: self::_bindgen_ty_77 = 20;
    pub const _SC_SEMAPHORES: self::_bindgen_ty_77 = 21;
    pub const _SC_SHARED_MEMORY_OBJECTS: self::_bindgen_ty_77 = 22;
    pub const _SC_AIO_LISTIO_MAX: self::_bindgen_ty_77 = 23;
    pub const _SC_AIO_MAX: self::_bindgen_ty_77 = 24;
    pub const _SC_AIO_PRIO_DELTA_MAX: self::_bindgen_ty_77 = 25;
    pub const _SC_DELAYTIMER_MAX: self::_bindgen_ty_77 = 26;
    pub const _SC_MQ_OPEN_MAX: self::_bindgen_ty_77 = 27;
    pub const _SC_MQ_PRIO_MAX: self::_bindgen_ty_77 = 28;
    pub const _SC_VERSION: self::_bindgen_ty_77 = 29;
    pub const _SC_PAGESIZE: self::_bindgen_ty_77 = 30;
    pub const _SC_RTSIG_MAX: self::_bindgen_ty_77 = 31;
    pub const _SC_SEM_NSEMS_MAX: self::_bindgen_ty_77 = 32;
    pub const _SC_SEM_VALUE_MAX: self::_bindgen_ty_77 = 33;
    pub const _SC_SIGQUEUE_MAX: self::_bindgen_ty_77 = 34;
    pub const _SC_TIMER_MAX: self::_bindgen_ty_77 = 35;
    pub const _SC_BC_BASE_MAX: self::_bindgen_ty_77 = 36;
    pub const _SC_BC_DIM_MAX: self::_bindgen_ty_77 = 37;
    pub const _SC_BC_SCALE_MAX: self::_bindgen_ty_77 = 38;
    pub const _SC_BC_STRING_MAX: self::_bindgen_ty_77 = 39;
    pub const _SC_COLL_WEIGHTS_MAX: self::_bindgen_ty_77 = 40;
    pub const _SC_EQUIV_CLASS_MAX: self::_bindgen_ty_77 = 41;
    pub const _SC_EXPR_NEST_MAX: self::_bindgen_ty_77 = 42;
    pub const _SC_LINE_MAX: self::_bindgen_ty_77 = 43;
    pub const _SC_RE_DUP_MAX: self::_bindgen_ty_77 = 44;
    pub const _SC_CHARCLASS_NAME_MAX: self::_bindgen_ty_77 = 45;
    pub const _SC_2_VERSION: self::_bindgen_ty_77 = 46;
    pub const _SC_2_C_BIND: self::_bindgen_ty_77 = 47;
    pub const _SC_2_C_DEV: self::_bindgen_ty_77 = 48;
    pub const _SC_2_FORT_DEV: self::_bindgen_ty_77 = 49;
    pub const _SC_2_FORT_RUN: self::_bindgen_ty_77 = 50;
    pub const _SC_2_SW_DEV: self::_bindgen_ty_77 = 51;
    pub const _SC_2_LOCALEDEF: self::_bindgen_ty_77 = 52;
    pub const _SC_PII: self::_bindgen_ty_77 = 53;
    pub const _SC_PII_XTI: self::_bindgen_ty_77 = 54;
    pub const _SC_PII_SOCKET: self::_bindgen_ty_77 = 55;
    pub const _SC_PII_INTERNET: self::_bindgen_ty_77 = 56;
    pub const _SC_PII_OSI: self::_bindgen_ty_77 = 57;
    pub const _SC_POLL: self::_bindgen_ty_77 = 58;
    pub const _SC_SELECT: self::_bindgen_ty_77 = 59;
    pub const _SC_UIO_MAXIOV: self::_bindgen_ty_77 = 60;
    pub const _SC_IOV_MAX: self::_bindgen_ty_77 = 60;
    pub const _SC_PII_INTERNET_STREAM: self::_bindgen_ty_77 = 61;
    pub const _SC_PII_INTERNET_DGRAM: self::_bindgen_ty_77 = 62;
    pub const _SC_PII_OSI_COTS: self::_bindgen_ty_77 = 63;
    pub const _SC_PII_OSI_CLTS: self::_bindgen_ty_77 = 64;
    pub const _SC_PII_OSI_M: self::_bindgen_ty_77 = 65;
    pub const _SC_T_IOV_MAX: self::_bindgen_ty_77 = 66;
    pub const _SC_THREADS: self::_bindgen_ty_77 = 67;
    pub const _SC_THREAD_SAFE_FUNCTIONS: self::_bindgen_ty_77 = 68;
    pub const _SC_GETGR_R_SIZE_MAX: self::_bindgen_ty_77 = 69;
    pub const _SC_GETPW_R_SIZE_MAX: self::_bindgen_ty_77 = 70;
    pub const _SC_LOGIN_NAME_MAX: self::_bindgen_ty_77 = 71;
    pub const _SC_TTY_NAME_MAX: self::_bindgen_ty_77 = 72;
    pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: self::_bindgen_ty_77 = 73;
    pub const _SC_THREAD_KEYS_MAX: self::_bindgen_ty_77 = 74;
    pub const _SC_THREAD_STACK_MIN: self::_bindgen_ty_77 = 75;
    pub const _SC_THREAD_THREADS_MAX: self::_bindgen_ty_77 = 76;
    pub const _SC_THREAD_ATTR_STACKADDR: self::_bindgen_ty_77 = 77;
    pub const _SC_THREAD_ATTR_STACKSIZE: self::_bindgen_ty_77 = 78;
    pub const _SC_THREAD_PRIORITY_SCHEDULING: self::_bindgen_ty_77 = 79;
    pub const _SC_THREAD_PRIO_INHERIT: self::_bindgen_ty_77 = 80;
    pub const _SC_THREAD_PRIO_PROTECT: self::_bindgen_ty_77 = 81;
    pub const _SC_THREAD_PROCESS_SHARED: self::_bindgen_ty_77 = 82;
    pub const _SC_NPROCESSORS_CONF: self::_bindgen_ty_77 = 83;
    pub const _SC_NPROCESSORS_ONLN: self::_bindgen_ty_77 = 84;
    pub const _SC_PHYS_PAGES: self::_bindgen_ty_77 = 85;
    pub const _SC_AVPHYS_PAGES: self::_bindgen_ty_77 = 86;
    pub const _SC_ATEXIT_MAX: self::_bindgen_ty_77 = 87;
    pub const _SC_PASS_MAX: self::_bindgen_ty_77 = 88;
    pub const _SC_XOPEN_VERSION: self::_bindgen_ty_77 = 89;
    pub const _SC_XOPEN_XCU_VERSION: self::_bindgen_ty_77 = 90;
    pub const _SC_XOPEN_UNIX: self::_bindgen_ty_77 = 91;
    pub const _SC_XOPEN_CRYPT: self::_bindgen_ty_77 = 92;
    pub const _SC_XOPEN_ENH_I18N: self::_bindgen_ty_77 = 93;
    pub const _SC_XOPEN_SHM: self::_bindgen_ty_77 = 94;
    pub const _SC_2_CHAR_TERM: self::_bindgen_ty_77 = 95;
    pub const _SC_2_C_VERSION: self::_bindgen_ty_77 = 96;
    pub const _SC_2_UPE: self::_bindgen_ty_77 = 97;
    pub const _SC_XOPEN_XPG2: self::_bindgen_ty_77 = 98;
    pub const _SC_XOPEN_XPG3: self::_bindgen_ty_77 = 99;
    pub const _SC_XOPEN_XPG4: self::_bindgen_ty_77 = 100;
    pub const _SC_CHAR_BIT: self::_bindgen_ty_77 = 101;
    pub const _SC_CHAR_MAX: self::_bindgen_ty_77 = 102;
    pub const _SC_CHAR_MIN: self::_bindgen_ty_77 = 103;
    pub const _SC_INT_MAX: self::_bindgen_ty_77 = 104;
    pub const _SC_INT_MIN: self::_bindgen_ty_77 = 105;
    pub const _SC_LONG_BIT: self::_bindgen_ty_77 = 106;
    pub const _SC_WORD_BIT: self::_bindgen_ty_77 = 107;
    pub const _SC_MB_LEN_MAX: self::_bindgen_ty_77 = 108;
    pub const _SC_NZERO: self::_bindgen_ty_77 = 109;
    pub const _SC_SSIZE_MAX: self::_bindgen_ty_77 = 110;
    pub const _SC_SCHAR_MAX: self::_bindgen_ty_77 = 111;
    pub const _SC_SCHAR_MIN: self::_bindgen_ty_77 = 112;
    pub const _SC_SHRT_MAX: self::_bindgen_ty_77 = 113;
    pub const _SC_SHRT_MIN: self::_bindgen_ty_77 = 114;
    pub const _SC_UCHAR_MAX: self::_bindgen_ty_77 = 115;
    pub const _SC_UINT_MAX: self::_bindgen_ty_77 = 116;
    pub const _SC_ULONG_MAX: self::_bindgen_ty_77 = 117;
    pub const _SC_USHRT_MAX: self::_bindgen_ty_77 = 118;
    pub const _SC_NL_ARGMAX: self::_bindgen_ty_77 = 119;
    pub const _SC_NL_LANGMAX: self::_bindgen_ty_77 = 120;
    pub const _SC_NL_MSGMAX: self::_bindgen_ty_77 = 121;
    pub const _SC_NL_NMAX: self::_bindgen_ty_77 = 122;
    pub const _SC_NL_SETMAX: self::_bindgen_ty_77 = 123;
    pub const _SC_NL_TEXTMAX: self::_bindgen_ty_77 = 124;
    pub const _SC_XBS5_ILP32_OFF32: self::_bindgen_ty_77 = 125;
    pub const _SC_XBS5_ILP32_OFFBIG: self::_bindgen_ty_77 = 126;
    pub const _SC_XBS5_LP64_OFF64: self::_bindgen_ty_77 = 127;
    pub const _SC_XBS5_LPBIG_OFFBIG: self::_bindgen_ty_77 = 128;
    pub const _SC_XOPEN_LEGACY: self::_bindgen_ty_77 = 129;
    pub const _SC_XOPEN_REALTIME: self::_bindgen_ty_77 = 130;
    pub const _SC_XOPEN_REALTIME_THREADS: self::_bindgen_ty_77 = 131;
    pub const _SC_ADVISORY_INFO: self::_bindgen_ty_77 = 132;
    pub const _SC_BARRIERS: self::_bindgen_ty_77 = 133;
    pub const _SC_BASE: self::_bindgen_ty_77 = 134;
    pub const _SC_C_LANG_SUPPORT: self::_bindgen_ty_77 = 135;
    pub const _SC_C_LANG_SUPPORT_R: self::_bindgen_ty_77 = 136;
    pub const _SC_CLOCK_SELECTION: self::_bindgen_ty_77 = 137;
    pub const _SC_CPUTIME: self::_bindgen_ty_77 = 138;
    pub const _SC_THREAD_CPUTIME: self::_bindgen_ty_77 = 139;
    pub const _SC_DEVICE_IO: self::_bindgen_ty_77 = 140;
    pub const _SC_DEVICE_SPECIFIC: self::_bindgen_ty_77 = 141;
    pub const _SC_DEVICE_SPECIFIC_R: self::_bindgen_ty_77 = 142;
    pub const _SC_FD_MGMT: self::_bindgen_ty_77 = 143;
    pub const _SC_FIFO: self::_bindgen_ty_77 = 144;
    pub const _SC_PIPE: self::_bindgen_ty_77 = 145;
    pub const _SC_FILE_ATTRIBUTES: self::_bindgen_ty_77 = 146;
    pub const _SC_FILE_LOCKING: self::_bindgen_ty_77 = 147;
    pub const _SC_FILE_SYSTEM: self::_bindgen_ty_77 = 148;
    pub const _SC_MONOTONIC_CLOCK: self::_bindgen_ty_77 = 149;
    pub const _SC_MULTI_PROCESS: self::_bindgen_ty_77 = 150;
    pub const _SC_SINGLE_PROCESS: self::_bindgen_ty_77 = 151;
    pub const _SC_NETWORKING: self::_bindgen_ty_77 = 152;
    pub const _SC_READER_WRITER_LOCKS: self::_bindgen_ty_77 = 153;
    pub const _SC_SPIN_LOCKS: self::_bindgen_ty_77 = 154;
    pub const _SC_REGEXP: self::_bindgen_ty_77 = 155;
    pub const _SC_REGEX_VERSION: self::_bindgen_ty_77 = 156;
    pub const _SC_SHELL: self::_bindgen_ty_77 = 157;
    pub const _SC_SIGNALS: self::_bindgen_ty_77 = 158;
    pub const _SC_SPAWN: self::_bindgen_ty_77 = 159;
    pub const _SC_SPORADIC_SERVER: self::_bindgen_ty_77 = 160;
    pub const _SC_THREAD_SPORADIC_SERVER: self::_bindgen_ty_77 = 161;
    pub const _SC_SYSTEM_DATABASE: self::_bindgen_ty_77 = 162;
    pub const _SC_SYSTEM_DATABASE_R: self::_bindgen_ty_77 = 163;
    pub const _SC_TIMEOUTS: self::_bindgen_ty_77 = 164;
    pub const _SC_TYPED_MEMORY_OBJECTS: self::_bindgen_ty_77 = 165;
    pub const _SC_USER_GROUPS: self::_bindgen_ty_77 = 166;
    pub const _SC_USER_GROUPS_R: self::_bindgen_ty_77 = 167;
    pub const _SC_2_PBS: self::_bindgen_ty_77 = 168;
    pub const _SC_2_PBS_ACCOUNTING: self::_bindgen_ty_77 = 169;
    pub const _SC_2_PBS_LOCATE: self::_bindgen_ty_77 = 170;
    pub const _SC_2_PBS_MESSAGE: self::_bindgen_ty_77 = 171;
    pub const _SC_2_PBS_TRACK: self::_bindgen_ty_77 = 172;
    pub const _SC_SYMLOOP_MAX: self::_bindgen_ty_77 = 173;
    pub const _SC_STREAMS: self::_bindgen_ty_77 = 174;
    pub const _SC_2_PBS_CHECKPOINT: self::_bindgen_ty_77 = 175;
    pub const _SC_V6_ILP32_OFF32: self::_bindgen_ty_77 = 176;
    pub const _SC_V6_ILP32_OFFBIG: self::_bindgen_ty_77 = 177;
    pub const _SC_V6_LP64_OFF64: self::_bindgen_ty_77 = 178;
    pub const _SC_V6_LPBIG_OFFBIG: self::_bindgen_ty_77 = 179;
    pub const _SC_HOST_NAME_MAX: self::_bindgen_ty_77 = 180;
    pub const _SC_TRACE: self::_bindgen_ty_77 = 181;
    pub const _SC_TRACE_EVENT_FILTER: self::_bindgen_ty_77 = 182;
    pub const _SC_TRACE_INHERIT: self::_bindgen_ty_77 = 183;
    pub const _SC_TRACE_LOG: self::_bindgen_ty_77 = 184;
    pub const _SC_LEVEL1_ICACHE_SIZE: self::_bindgen_ty_77 = 185;
    pub const _SC_LEVEL1_ICACHE_ASSOC: self::_bindgen_ty_77 = 186;
    pub const _SC_LEVEL1_ICACHE_LINESIZE: self::_bindgen_ty_77 = 187;
    pub const _SC_LEVEL1_DCACHE_SIZE: self::_bindgen_ty_77 = 188;
    pub const _SC_LEVEL1_DCACHE_ASSOC: self::_bindgen_ty_77 = 189;
    pub const _SC_LEVEL1_DCACHE_LINESIZE: self::_bindgen_ty_77 = 190;
    pub const _SC_LEVEL2_CACHE_SIZE: self::_bindgen_ty_77 = 191;
    pub const _SC_LEVEL2_CACHE_ASSOC: self::_bindgen_ty_77 = 192;
    pub const _SC_LEVEL2_CACHE_LINESIZE: self::_bindgen_ty_77 = 193;
    pub const _SC_LEVEL3_CACHE_SIZE: self::_bindgen_ty_77 = 194;
    pub const _SC_LEVEL3_CACHE_ASSOC: self::_bindgen_ty_77 = 195;
    pub const _SC_LEVEL3_CACHE_LINESIZE: self::_bindgen_ty_77 = 196;
    pub const _SC_LEVEL4_CACHE_SIZE: self::_bindgen_ty_77 = 197;
    pub const _SC_LEVEL4_CACHE_ASSOC: self::_bindgen_ty_77 = 198;
    pub const _SC_LEVEL4_CACHE_LINESIZE: self::_bindgen_ty_77 = 199;
    pub const _SC_IPV6: self::_bindgen_ty_77 = 235;
    pub const _SC_RAW_SOCKETS: self::_bindgen_ty_77 = 236;
    pub const _SC_V7_ILP32_OFF32: self::_bindgen_ty_77 = 237;
    pub const _SC_V7_ILP32_OFFBIG: self::_bindgen_ty_77 = 238;
    pub const _SC_V7_LP64_OFF64: self::_bindgen_ty_77 = 239;
    pub const _SC_V7_LPBIG_OFFBIG: self::_bindgen_ty_77 = 240;
    pub const _SC_SS_REPL_MAX: self::_bindgen_ty_77 = 241;
    pub const _SC_TRACE_EVENT_NAME_MAX: self::_bindgen_ty_77 = 242;
    pub const _SC_TRACE_NAME_MAX: self::_bindgen_ty_77 = 243;
    pub const _SC_TRACE_SYS_MAX: self::_bindgen_ty_77 = 244;
    pub const _SC_TRACE_USER_EVENT_MAX: self::_bindgen_ty_77 = 245;
    pub const _SC_XOPEN_STREAMS: self::_bindgen_ty_77 = 246;
    pub const _SC_THREAD_ROBUST_PRIO_INHERIT: self::_bindgen_ty_77 = 247;
    pub const _SC_THREAD_ROBUST_PRIO_PROTECT: self::_bindgen_ty_77 = 248;
    pub type _bindgen_ty_77 = u32;
    pub const _CS_PATH: self::_bindgen_ty_78 = 0;
    pub const _CS_V6_WIDTH_RESTRICTED_ENVS: self::_bindgen_ty_78 = 1;
    pub const _CS_GNU_LIBC_VERSION: self::_bindgen_ty_78 = 2;
    pub const _CS_GNU_LIBPTHREAD_VERSION: self::_bindgen_ty_78 = 3;
    pub const _CS_V5_WIDTH_RESTRICTED_ENVS: self::_bindgen_ty_78 = 4;
    pub const _CS_V7_WIDTH_RESTRICTED_ENVS: self::_bindgen_ty_78 = 5;
    pub const _CS_LFS_CFLAGS: self::_bindgen_ty_78 = 1000;
    pub const _CS_LFS_LDFLAGS: self::_bindgen_ty_78 = 1001;
    pub const _CS_LFS_LIBS: self::_bindgen_ty_78 = 1002;
    pub const _CS_LFS_LINTFLAGS: self::_bindgen_ty_78 = 1003;
    pub const _CS_LFS64_CFLAGS: self::_bindgen_ty_78 = 1004;
    pub const _CS_LFS64_LDFLAGS: self::_bindgen_ty_78 = 1005;
    pub const _CS_LFS64_LIBS: self::_bindgen_ty_78 = 1006;
    pub const _CS_LFS64_LINTFLAGS: self::_bindgen_ty_78 = 1007;
    pub const _CS_XBS5_ILP32_OFF32_CFLAGS: self::_bindgen_ty_78 = 1100;
    pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: self::_bindgen_ty_78 = 1101;
    pub const _CS_XBS5_ILP32_OFF32_LIBS: self::_bindgen_ty_78 = 1102;
    pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: self::_bindgen_ty_78 = 1103;
    pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: self::_bindgen_ty_78 = 1104;
    pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: self::_bindgen_ty_78 = 1105;
    pub const _CS_XBS5_ILP32_OFFBIG_LIBS: self::_bindgen_ty_78 = 1106;
    pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: self::_bindgen_ty_78 = 1107;
    pub const _CS_XBS5_LP64_OFF64_CFLAGS: self::_bindgen_ty_78 = 1108;
    pub const _CS_XBS5_LP64_OFF64_LDFLAGS: self::_bindgen_ty_78 = 1109;
    pub const _CS_XBS5_LP64_OFF64_LIBS: self::_bindgen_ty_78 = 1110;
    pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: self::_bindgen_ty_78 = 1111;
    pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: self::_bindgen_ty_78 = 1112;
    pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: self::_bindgen_ty_78 = 1113;
    pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: self::_bindgen_ty_78 = 1114;
    pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: self::_bindgen_ty_78 = 1115;
    pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: self::_bindgen_ty_78 = 1116;
    pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: self::_bindgen_ty_78 = 1117;
    pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: self::_bindgen_ty_78 = 1118;
    pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: self::_bindgen_ty_78 = 1119;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: self::_bindgen_ty_78 = 1120;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: self::_bindgen_ty_78 = 1121;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: self::_bindgen_ty_78 = 1122;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: self::_bindgen_ty_78 = 1123;
    pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: self::_bindgen_ty_78 = 1124;
    pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: self::_bindgen_ty_78 = 1125;
    pub const _CS_POSIX_V6_LP64_OFF64_LIBS: self::_bindgen_ty_78 = 1126;
    pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: self::_bindgen_ty_78 = 1127;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: self::_bindgen_ty_78 = 1128;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: self::_bindgen_ty_78 = 1129;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: self::_bindgen_ty_78 = 1130;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: self::_bindgen_ty_78 = 1131;
    pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: self::_bindgen_ty_78 = 1132;
    pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: self::_bindgen_ty_78 = 1133;
    pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: self::_bindgen_ty_78 = 1134;
    pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: self::_bindgen_ty_78 = 1135;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: self::_bindgen_ty_78 = 1136;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: self::_bindgen_ty_78 = 1137;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: self::_bindgen_ty_78 = 1138;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: self::_bindgen_ty_78 = 1139;
    pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: self::_bindgen_ty_78 = 1140;
    pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: self::_bindgen_ty_78 = 1141;
    pub const _CS_POSIX_V7_LP64_OFF64_LIBS: self::_bindgen_ty_78 = 1142;
    pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: self::_bindgen_ty_78 = 1143;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: self::_bindgen_ty_78 = 1144;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: self::_bindgen_ty_78 = 1145;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: self::_bindgen_ty_78 = 1146;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: self::_bindgen_ty_78 = 1147;
    pub const _CS_V6_ENV: self::_bindgen_ty_78 = 1148;
    pub const _CS_V7_ENV: self::_bindgen_ty_78 = 1149;
    pub type _bindgen_ty_78 = u32;
    extern "C" {
        pub fn pathconf(__path: *const c_char, __name: c_int) -> c_long;
    }
    extern "C" {
        pub fn fpathconf(__fd: c_int, __name: c_int) -> c_long;
    }
    extern "C" {
        pub fn sysconf(__name: c_int) -> c_long;
    }
    extern "C" {
        pub fn confstr(__name: c_int, __buf: *mut c_char, __len: usize) -> usize;
    }
    extern "C" {
        pub fn getpid() -> self::__pid_t;
    }
    extern "C" {
        pub fn getppid() -> self::__pid_t;
    }
    extern "C" {
        pub fn getpgrp() -> self::__pid_t;
    }
    extern "C" {
        pub fn __getpgid(__pid: self::__pid_t) -> self::__pid_t;
    }
    extern "C" {
        pub fn getpgid(__pid: self::__pid_t) -> self::__pid_t;
    }
    extern "C" {
        pub fn setpgid(__pid: self::__pid_t, __pgid: self::__pid_t) -> c_int;
    }
    extern "C" {
        pub fn setpgrp() -> c_int;
    }
    extern "C" {
        pub fn setsid() -> self::__pid_t;
    }
    extern "C" {
        pub fn getsid(__pid: self::__pid_t) -> self::__pid_t;
    }
    extern "C" {
        pub fn getuid() -> self::__uid_t;
    }
    extern "C" {
        pub fn geteuid() -> self::__uid_t;
    }
    extern "C" {
        pub fn getgid() -> self::__gid_t;
    }
    extern "C" {
        pub fn getegid() -> self::__gid_t;
    }
    extern "C" {
        pub fn getgroups(__size: c_int, __list: *mut self::__gid_t) -> c_int;
    }
    extern "C" {
        pub fn group_member(__gid: self::__gid_t) -> c_int;
    }
    extern "C" {
        pub fn setuid(__uid: self::__uid_t) -> c_int;
    }
    extern "C" {
        pub fn setreuid(__ruid: self::__uid_t, __euid: self::__uid_t) -> c_int;
    }
    extern "C" {
        pub fn seteuid(__uid: self::__uid_t) -> c_int;
    }
    extern "C" {
        pub fn setgid(__gid: self::__gid_t) -> c_int;
    }
    extern "C" {
        pub fn setregid(__rgid: self::__gid_t, __egid: self::__gid_t) -> c_int;
    }
    extern "C" {
        pub fn setegid(__gid: self::__gid_t) -> c_int;
    }
    extern "C" {
        pub fn getresuid(
            __ruid: *mut self::__uid_t,
            __euid: *mut self::__uid_t,
            __suid: *mut self::__uid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn getresgid(
            __rgid: *mut self::__gid_t,
            __egid: *mut self::__gid_t,
            __sgid: *mut self::__gid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn setresuid(
            __ruid: self::__uid_t,
            __euid: self::__uid_t,
            __suid: self::__uid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn setresgid(
            __rgid: self::__gid_t,
            __egid: self::__gid_t,
            __sgid: self::__gid_t,
        ) -> c_int;
    }
    extern "C" {
        pub fn fork() -> self::__pid_t;
    }
    extern "C" {
        pub fn vfork() -> self::__pid_t;
    }
    extern "C" {
        pub fn ttyname(__fd: c_int) -> *mut c_char;
    }
    extern "C" {
        pub fn ttyname_r(__fd: c_int, __buf: *mut c_char, __buflen: usize) -> c_int;
    }
    extern "C" {
        pub fn isatty(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn ttyslot() -> c_int;
    }
    extern "C" {
        pub fn link(__from: *const c_char, __to: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn linkat(
            __fromfd: c_int,
            __from: *const c_char,
            __tofd: c_int,
            __to: *const c_char,
            __flags: c_int,
        ) -> c_int;
    }
    extern "C" {
        pub fn symlink(__from: *const c_char, __to: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn readlink(__path: *const c_char, __buf: *mut c_char, __len: usize) -> isize;
    }
    extern "C" {
        pub fn symlinkat(__from: *const c_char, __tofd: c_int, __to: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn readlinkat(
            __fd: c_int,
            __path: *const c_char,
            __buf: *mut c_char,
            __len: usize,
        ) -> isize;
    }
    extern "C" {
        pub fn unlink(__name: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn unlinkat(__fd: c_int, __name: *const c_char, __flag: c_int) -> c_int;
    }
    extern "C" {
        pub fn rmdir(__path: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn tcgetpgrp(__fd: c_int) -> self::__pid_t;
    }
    extern "C" {
        pub fn tcsetpgrp(__fd: c_int, __pgrp_id: self::__pid_t) -> c_int;
    }
    extern "C" {
        pub fn getlogin() -> *mut c_char;
    }
    extern "C" {
        pub fn getlogin_r(__name: *mut c_char, __name_len: usize) -> c_int;
    }
    extern "C" {
        pub fn setlogin(__name: *const c_char) -> c_int;
    }
    extern "C" {
        pub static mut optarg: *mut c_char;
    }
    extern "C" {
        pub static mut optind: c_int;
    }
    extern "C" {
        pub static mut opterr: c_int;
    }
    extern "C" {
        pub static mut optopt: c_int;
    }
    extern "C" {
        pub fn getopt(
            ___argc: c_int,
            ___argv: *const *mut c_char,
            __shortopts: *const c_char,
        ) -> c_int;
    }
    extern "C" {
        pub fn gethostname(__name: *mut c_char, __len: usize) -> c_int;
    }
    extern "C" {
        pub fn sethostname(__name: *const c_char, __len: usize) -> c_int;
    }
    extern "C" {
        pub fn sethostid(__id: c_long) -> c_int;
    }
    extern "C" {
        pub fn getdomainname(__name: *mut c_char, __len: usize) -> c_int;
    }
    extern "C" {
        pub fn setdomainname(__name: *const c_char, __len: usize) -> c_int;
    }
    extern "C" {
        pub fn vhangup() -> c_int;
    }
    extern "C" {
        pub fn revoke(__file: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn profil(
            __sample_buffer: *mut c_ushort,
            __size: usize,
            __offset: usize,
            __scale: c_uint,
        ) -> c_int;
    }
    extern "C" {
        pub fn acct(__name: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn getusershell() -> *mut c_char;
    }
    extern "C" {
        pub fn endusershell();
    }
    extern "C" {
        pub fn setusershell();
    }
    extern "C" {
        pub fn daemon(__nochdir: c_int, __noclose: c_int) -> c_int;
    }
    extern "C" {
        pub fn chroot(__path: *const c_char) -> c_int;
    }
    extern "C" {
        pub fn getpass(__prompt: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn fsync(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn syncfs(__fd: c_int) -> c_int;
    }
    extern "C" {
        pub fn gethostid() -> c_long;
    }
    extern "C" {
        pub fn sync();
    }
    extern "C" {
        pub fn getpagesize() -> c_int;
    }
    extern "C" {
        pub fn getdtablesize() -> c_int;
    }
    extern "C" {
        pub fn truncate(__file: *const c_char, __length: self::__off_t) -> c_int;
    }
    extern "C" {
        pub fn truncate64(__file: *const c_char, __length: self::__off64_t) -> c_int;
    }
    extern "C" {
        pub fn ftruncate(__fd: c_int, __length: self::__off_t) -> c_int;
    }
    extern "C" {
        pub fn ftruncate64(__fd: c_int, __length: self::__off64_t) -> c_int;
    }
    extern "C" {
        pub fn brk(__addr: *mut c_void) -> c_int;
    }
    extern "C" {
        pub fn sbrk(__delta: isize) -> *mut c_void;
    }
    extern "C" {
        pub fn syscall(__sysno: c_long, ...) -> c_long;
    }
    extern "C" {
        pub fn lockf(__fd: c_int, __cmd: c_int, __len: self::__off_t) -> c_int;
    }
    extern "C" {
        pub fn lockf64(__fd: c_int, __cmd: c_int, __len: self::__off64_t) -> c_int;
    }
    extern "C" {
        pub fn copy_file_range(
            __infd: c_int,
            __pinoff: *mut self::__off64_t,
            __outfd: c_int,
            __poutoff: *mut self::__off64_t,
            __length: usize,
            __flags: c_uint,
        ) -> isize;
    }
    extern "C" {
        pub fn fdatasync(__fildes: c_int) -> c_int;
    }
    extern "C" {
        pub fn crypt(__key: *const c_char, __salt: *const c_char) -> *mut c_char;
    }
    extern "C" {
        pub fn swab(__from: *const c_void, __to: *mut c_void, __n: isize);
    }
    extern "C" {
        pub fn getentropy(__buffer: *mut c_void, __length: usize) -> c_int;
    }
    extern "C" {
        pub fn init_shell(
            shell: *mut self::Chuck_Shell,
            ui: *mut self::Chuck_Shell_UI,
            vm: *mut self::Chuck_VM,
        ) -> c_ulong;
    }
    extern "C" {
        pub fn go(argc: c_int, argv: *mut *const c_char) -> bool;
    }
    extern "C" {
        pub fn global_cleanup();
    }
    extern "C" {
        pub fn all_stop();
    }
    extern "C" {
        pub fn all_detach();
    }
    extern "C" {
        pub fn usage();
    }
    extern "C" {
        pub fn get_count(arg: *const c_char, out: *mut c_ulong) -> c_ulong;
    }
    extern "C" {
        pub fn cb(
            in_: *mut f64,
            out: *mut f64,
            numFrames: c_ulong,
            numInChans: c_ulong,
            numOutChans: c_ulong,
            data: *mut c_void,
        );
    }
    extern "C" {
        pub fn signal_int(sig_num: c_int);
    }
    extern "C" {
        pub fn signal_pipe(sig_num: c_int);
    }
    extern "C" {
        pub static mut the_chuck: *mut self::ChucK;
    }
    pub const g_tid_shell: self::pthread_t = 0;
    pub const g_otf_dest: &'static [u8; 10usize] = b"127.0.0.1\0";
    pub const g_otf_port: c_long = 8888;
    extern "C" {
        pub static mut g_shell: *mut self::Chuck_Shell;
    }
    pub const g_sigpipe_mode: c_ulong = 0;
    pub const g_enable_system_cmd: c_ulong = 0;
    pub const g_enable_shell: c_ulong = 0;
    pub const g_enable_realtime_audio: c_ulong = 1;
    extern "C" {
        pub static mut g_main_thread_hook: self::f_mainthreadhook;
    }
    extern "C" {
        pub static mut g_main_thread_quit: self::f_mainthreadquit;
    }
    extern "C" {
        pub static mut g_main_thread_bindle: *mut c_void;
    }
    pub const g_num_vms_running: c_ulong = 0;
    pub const g_priority: c_long = 2147483647;
    pub const g_priority_low: c_long = 2147483647;
    extern "C" {
        pub fn main(argc: c_int, argv: *mut *const c_char) -> c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __locale_data {
        pub _address: u8,
    }
    pub type __builtin_va_list = [self::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __va_list_tag {
        pub gp_offset: c_uint,
        pub fp_offset: c_uint,
        pub overflow_arg_area: *mut c_void,
        pub reg_save_area: *mut c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    impl Default for __va_list_tag {
        fn default() -> Self {
            unsafe { zeroed() }
        }
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_3 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_4 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_5 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_6 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_7 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_8 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_9 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_10 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_31 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_32 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_33 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_34 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_35 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_36 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_37 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_38 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_ios<c_char>>(),
            264usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ios<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_ios<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ios<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_streambuf<c_char>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_streambuf<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_istream<c_char>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_istream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_ostream<c_char>>(),
            272usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ostream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_ostream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ostream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_4() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_iostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_iostream<c_char>>(),
            288usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_iostream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_iostream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_iostream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_5() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringbuf_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_stringbuf<c_char>>(),
            104usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringbuf<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_stringbuf<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringbuf<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_6() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_istringstream<c_char>>(),
            384usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_istringstream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_istringstream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_istringstream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_7() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_ostringstream<c_char>>(),
            376usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_ostringstream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_ostringstream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_ostringstream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_8() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_stringstream<c_char>>(),
            392usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringstream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_stringstream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringstream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_9() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_4() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_filebuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_filebuf<c_char>>(),
            240usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_filebuf<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_filebuf<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_filebuf<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_10() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ifstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_ifstream<c_char>>(),
            520usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ifstream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_ifstream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ifstream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_11() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ofstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_ofstream<c_char>>(),
            512usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ofstream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_ofstream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ofstream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_12() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_fstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_fstream<c_char>>(),
            528usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_fstream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_fstream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_fstream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_13() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_ios<u32>>(),
            264usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ios<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_ios<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ios<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_ostream<u32>>(),
            272usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ostream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_ostream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ostream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_4() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_iostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_iostream<u32>>(),
            288usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_iostream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_iostream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_iostream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_5() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringbuf_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_stringbuf<u32>>(),
            104usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringbuf<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_stringbuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringbuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_6() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_istringstream<u32>>(),
            384usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_istringstream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_istringstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_istringstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_7() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
            376usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_ostringstream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_ostringstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_8() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_stringstream<u32>>(),
            392usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringstream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_stringstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_9() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_4() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_filebuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_filebuf<u32>>(),
            240usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_filebuf<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_filebuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_filebuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_10() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ifstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_ifstream<u32>>(),
            520usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ifstream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_ifstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ifstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_11() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ofstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_ofstream<u32>>(),
            512usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ofstream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_ofstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ofstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_12() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_fstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_fstream<u32>>(),
            528usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_fstream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_fstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_fstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_13() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_50 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<c_char>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_14() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u32>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_14() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char16_t_char_traits_open1_char16_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u16>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u16>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char32_t_char_traits_open1_char32_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u32>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<c_char>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_15() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<c_char>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_16() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u32>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_15() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_view_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u32>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_16() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char16_t_char_traits_open1_char16_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u16>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u16>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char16_t_char_traits_open2_char16_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char16_t_char_traits_open1_char16_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u16>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u16>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char32_t_char_traits_open1_char32_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u32>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char32_t_char_traits_open2_char32_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_view_open0_char32_t_char_traits_open1_char32_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::basic_string_view<u32>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_string_view<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_string_view<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::basic_istream<c_char>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_istream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_17() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_18() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_5() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::basic_istream<c_char>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_istream<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_19() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_17() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_18() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_5() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_19() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_20() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_6() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_21() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_7() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_20() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_6() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_21() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_7() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_4() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_5() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_4() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_5() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }

    #[test]
    fn __bindgen_test_layout_iterator_open0_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }

    pub type iterator = self::std::_Bit_iterator;
    #[test]
    fn __bindgen_test_layout_vector_open0_SyntaxToken_allocator_open1_SyntaxToken_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_SyntaxToken_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    pub type SyntaxTokenList_size_type = usize;
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_22() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_8() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_51 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_52 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_WvOut_ptr_WvOut__bindgen_ty_id_84346_open1_ptr_WvOut_close1_allocator_open1_pair_open2_ptr_WvOut_ptr_WvOut_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_WvOut_ptr_WvOut_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_WvOut_ptr_WvOut_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::pair<*mut self::WvOut, *mut self::WvOut>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut self::WvOut, *mut self::WvOut>)
            )
        );
        assert_eq!(
            align_of::<root::std::pair<*mut self::WvOut, *mut self::WvOut>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut self::WvOut, *mut self::WvOut>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::basic_streambuf<c_char>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_streambuf<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_23() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::basic_streambuf<c_char>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_streambuf<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_24() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_22() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_23() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_25() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_24() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_26() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_27() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_25() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_26() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_28() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_27() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_29() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_28() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    pub type char_type = c_char;

    pub type int_type = c_int;

    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_30() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_31() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_29() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_30() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout___basic_file_open0_char_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::__basic_file>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__basic_file)
            )
        );
        assert_eq!(
            align_of::<root::std::__basic_file>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__basic_file)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_32() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_33() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_34() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_35() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_31() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_32() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_33() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_34() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_36() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_9() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_37() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_10() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_38() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_11() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_39() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_12() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_35() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_8() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_36() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_9() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_37() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_10() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_38() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_11() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Func_allocator_open1_ptr_Chuck_Func_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Func_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_long_allocator_open1_unsigned_long_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_long_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_unsigned_long_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_long_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_40() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_13() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_long_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_41() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_14() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_double_allocator_open1_double_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_double_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_double_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_double_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_42() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_15() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_double_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_43() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_16() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_t_CKCOMPLEX_allocator_open1_t_CKCOMPLEX_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_t_CKCOMPLEX_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_t_CKCOMPLEX_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_t_CKCOMPLEX_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_44() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_17() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_t_CKCOMPLEX_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_45() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_18() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_t_CKVEC3_allocator_open1_t_CKVEC3_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_t_CKVEC3_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_t_CKVEC3_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_t_CKVEC3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_46() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_19() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_t_CKVEC3_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_12(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_47() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_20() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_t_CKVEC4_allocator_open1_t_CKVEC4_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_t_CKVEC4_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_t_CKVEC4_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_t_CKVEC4_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_13(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_48() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_21() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_t_CKVEC4_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_14(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_49() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_22() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_queue_open0_ptr_Chuck_VM_Shred_deque_open1_ptr_Chuck_VM_Shred_allocator_open2_ptr_Chuck_VM_Shred_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::queue<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
        assert_eq!(
            align_of::<root::std::queue<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_ptr_Chuck_VM_Shred_allocator_open1_ptr_Chuck_VM_Shred_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Shred_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Class_allocator_open1_ptr_Chuck_DL_Class_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Class_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Class_allocator_open1_ptr_Chuck_DL_Class_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Class_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Func_allocator_open1_ptr_Chuck_DL_Func_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Func_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Func_allocator_open1_ptr_Chuck_DL_Func_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Func_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Func_allocator_open1_ptr_Chuck_DL_Func_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Func_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Value_allocator_open1_ptr_Chuck_DL_Value_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Value_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Value_allocator_open1_ptr_Chuck_DL_Value_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Value_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Ctrl_allocator_open1_ptr_Chuck_DL_Ctrl_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Ctrl_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Class_allocator_open1_ptr_Chuck_DL_Class_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Class_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_15(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_50() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_23() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Value_allocator_open1_ptr_Chuck_DL_Value_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Value_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_16(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_51() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_24() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_map_allocator_open1_ptr_map_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_S_Symbol_ptr_Chuck_VM_Object__bindgen_ty_id_87466_open1_ptr_S_Symbol__close1_allocator_open1_pair_open2_ptr_S_Symbol__ptr_Chuck_VM_Object_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_S_Symbol__ptr_Chuck_VM_Object_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_S_Symbol__ptr_Chuck_VM_Object_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>)
            )
        );
        assert_eq!(
            align_of::<root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_map_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_S_Symbol__ptr_Chuck_VM_Object__bindgen_ty_id_87486_open1_ptr_S_Symbol__close1_allocator_open1_pair_open2_ptr_S_Symbol__ptr_Chuck_VM_Object_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_S_Symbol__ptr_Chuck_VM_Object_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_S_Symbol__ptr_Chuck_VM_Object_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>)
            )
        );
        assert_eq!(
            align_of::<root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_S_Symbol_ptr_Chuck_VM_Object__bindgen_ty_id_87505_open1_ptr_S_Symbol__close1_allocator_open1_pair_open2_ptr_S_Symbol__ptr_Chuck_VM_Object_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_S_Symbol__ptr_Chuck_VM_Object_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_S_Symbol__ptr_Chuck_VM_Object_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>)
            )
        );
        assert_eq!(
            align_of::<root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut self::S_Symbol_, *mut self::Chuck_VM_Object>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Chuck_Scope_open0_ptr_Chuck_Type_close0_instantiation() {
        assert_eq!(
            size_of::<root::Chuck_Scope>(),
            72usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
        assert_eq!(
            align_of::<root::Chuck_Scope>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Chuck_Scope_open0_ptr_Chuck_Value_close0_instantiation() {
        assert_eq!(
            size_of::<root::Chuck_Scope>(),
            72usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
        assert_eq!(
            align_of::<root::Chuck_Scope>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Chuck_Scope_open0_ptr_Chuck_Func_close0_instantiation() {
        assert_eq!(
            size_of::<root::Chuck_Scope>(),
            72usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
        assert_eq!(
            align_of::<root::Chuck_Scope>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Type_allocator_open1_ptr_Chuck_Type_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Type_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Func_allocator_open1_ptr_Chuck_Func_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Func_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation_4() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_Chuck_Namespace_ptr_Chuck_Namespace__bindgen_ty_id_87628_open1_ptr_Chuck_Namespace_close1_allocator_open1_pair_open2_ptr_Chuck_Namespace_ptr_Chuck_Namespace_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_Chuck_Namespace_ptr_Chuck_Namespace_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_Chuck_Namespace_ptr_Chuck_Namespace_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<self::std::pair<*mut self::Chuck_Namespace, *mut self::Chuck_Namespace>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut self::Chuck_Namespace, *mut self::Chuck_Namespace>)
            )
        );
        assert_eq!(
            align_of::<self::std::pair<*mut self::Chuck_Namespace, *mut self::Chuck_Namespace>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut self::Chuck_Namespace, *mut self::Chuck_Namespace>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Namespace_allocator_open1_ptr_Chuck_Namespace_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Namespace_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Type_allocator_open1_ptr_Chuck_Type_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Type_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Context_allocator_open1_ptr_Chuck_Context_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Context_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_a_Stmt_allocator_open1_ptr_a_Stmt__close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_a_Stmt__close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_unsigned_long_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_long_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_17(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_52() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_25() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_long_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_18(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_53() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_26() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_unsigned_long_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_long_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_19(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_54() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_27() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_long_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_20(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_55() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_28() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_unsigned_long_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_long_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_21(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_56() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_29() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_long_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_22(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_57() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_30() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_23(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_58() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_31() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_24(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_59() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_32() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_25(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_60() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_33() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_26(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_61() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_34() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Local_allocator_open1_ptr_Chuck_Local_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Local_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Local_allocator_open1_ptr_Chuck_Local_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Local_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Local_allocator_open1_ptr_Chuck_Local_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Local_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Instr_allocator_open1_ptr_Chuck_Instr_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Instr_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Instr_Goto_allocator_open1_ptr_Chuck_Instr_Goto_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Instr_Goto_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Instr_Goto_allocator_open1_ptr_Chuck_Instr_Goto_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Instr_Goto_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Instr_Goto_allocator_open1_ptr_Chuck_Instr_Goto_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Instr_Goto_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Code_allocator_open1_ptr_Chuck_Code_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Code_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Local_allocator_open1_ptr_Chuck_Local_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Local_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_CBufferAdvance_ReadOffset_allocator_open1_CBufferAdvance_ReadOffset_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_CBufferAdvance_ReadOffset_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_queue_open0_unsigned_long_deque_open1_unsigned_long_allocator_open2_unsigned_long_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::queue<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
        assert_eq!(
            align_of::<root::std::queue<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_unsigned_long_allocator_open1_unsigned_long_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_long_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_queue_open0_double_deque_open1_double_allocator_open2_double_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::queue<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
        assert_eq!(
            align_of::<root::std::queue<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_double_allocator_open1_double_close1_close0_instantiation()
    {
        assert_eq!(
            size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_double_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_queue_open0_unsigned_long_deque_open1_unsigned_long_allocator_open2_unsigned_long_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::queue<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
        assert_eq!(
            align_of::<root::std::queue<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_unsigned_long_allocator_open1_unsigned_long_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_long_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Shred_Stat_allocator_open1_ptr_Shred_Stat_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Shred_Stat_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Shred_Stat_allocator_open1_ptr_Shred_Stat_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Shred_Stat_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_Shred_Activation_allocator_open1_Shred_Activation_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_Shred_Activation_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_Shred_Activation_allocator_open1_Shred_Activation_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_Shred_Activation_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Shred_Stat_allocator_open1_ptr_Shred_Stat_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Shred_Stat_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_unsigned_long_ptr_Shred_Stat_less_open1_unsigned_long_close1_allocator_open1_pair_open2_const_unsigned_long_ptr_Shred_Stat_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_unsigned_long_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_const_unsigned_long_ptr_Shred_Stat_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_const_unsigned_long_ptr_Shred_Stat_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::pair<c_ulong, *mut self::Shred_Stat>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify ! ( root :: std :: pair < :: std :: os :: raw :: c_ulong , * mut root :: Shred_Stat > )
            )
        );
        assert_eq!(
            align_of::<root::std::pair<c_ulong, *mut self::Shred_Stat>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify ! ( root :: std :: pair < :: std :: os :: raw :: c_ulong , * mut root :: Shred_Stat > )
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Shred_Stat_allocator_open1_ptr_Shred_Stat_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Shred_Stat_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_unsigned_long_ptr_Chuck_VM_Shred_less_open1_unsigned_long_close1_allocator_open1_pair_open2_const_unsigned_long_ptr_Chuck_VM_Shred_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_unsigned_long_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_const_unsigned_long_ptr_Chuck_VM_Shred_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_Chuck_UGen_ptr_Chuck_UGen__bindgen_ty_id_88917_open1_ptr_Chuck_UGen_close1_allocator_open1_pair_open2_ptr_Chuck_UGen_ptr_Chuck_UGen_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_Chuck_UGen_ptr_Chuck_UGen_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Object_allocator_open1_ptr_Chuck_Object_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Object_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_27(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_62() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_35() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_unsigned_long_allocator_open1_ptr_unsigned_long_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_unsigned_long_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Shred_Status_allocator_open1_ptr_Chuck_VM_Shred_Status_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Shred_Status_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_Chuck_VM_Shred_ptr_Chuck_VM_Shred__bindgen_ty_id_89031_open1_ptr_Chuck_VM_Shred_close1_allocator_open1_pair_open2_ptr_Chuck_VM_Shred_ptr_Chuck_VM_Shred_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_Chuck_VM_Shred_ptr_Chuck_VM_Shred_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Shred_allocator_open1_ptr_Chuck_VM_Shred_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Shred_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_ptr_CBufferSimple_allocator_open1_ptr_CBufferSimple_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_CBufferSimple_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Chuck_Global_Int_Container_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Chuck_Global_Int_Container_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_28(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_63() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_36() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Chuck_Global_Int_Container_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_29(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_64() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_37() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Chuck_Global_Float_Container_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Chuck_Global_Float_Container_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_30(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_65() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_38() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Chuck_Global_Float_Container_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_31(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_66() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_39() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Chuck_Global_Event_Container_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Chuck_Global_Event_Container_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_32(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_67() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_40() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Chuck_Global_Event_Container_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_33(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_68() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_41() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_XCircleBuffer_open0_Chuck_Global_Request_close0_instantiation() {
        assert_eq!(
            size_of::<root::XCircleBuffer<root::Chuck_Global_Request>>(),
            40usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::XCircleBuffer<root::Chuck_Global_Request>)
            )
        );
        assert_eq!(
            align_of::<root::XCircleBuffer<root::Chuck_Global_Request>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::XCircleBuffer<root::Chuck_Global_Request>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_34(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_69() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_42() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_35(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_70() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_43() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Chuck_Context_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Chuck_Context_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_12(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_36(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_71() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_44() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Chuck_Context_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_37(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_72() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_45() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_ptr_Chuck_DLL_allocator_open1_ptr_Chuck_DLL_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DLL_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_38(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_73() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_46() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_39(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_74() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_47() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_40(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_75() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_48() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Shell_VM_allocator_open1_ptr_Chuck_Shell_VM_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Shell_VM_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_13(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_41(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_76() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_49() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_42(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_77() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_50() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_43(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_78() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_51() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_14(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_44(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_79() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_52() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_45(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_80() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_53() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_46(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_81() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_54() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Command_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Command_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_15(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_47(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_82() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_55() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Command_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_48(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_83() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_56() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Command_allocator_open1_ptr_Command_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Command_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_16(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_49(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_84() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_57() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_50(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_85() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_58() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_51(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_86() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_59() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_52(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_87() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_60() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_53(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_88() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_61() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_54(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_89() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_62() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Command_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Command_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_17(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_55(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_90() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_63() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Command_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_56(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_91() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_64() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Command_allocator_open1_ptr_Command_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Command_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_12(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_57(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_92() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_65() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_13(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_58(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_93() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_66() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_14(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_59(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_94() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_67() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_12(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_15(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_60(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_95() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_68() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_13(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_16(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_61(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_96() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_69() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_14(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_17(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_62(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_97() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_70() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_15(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_18(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_63(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_98() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_71() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_16(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_19(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_64(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_99() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_72() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_17(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_20(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_65(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_100() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_73() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_18(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_21(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_66(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_101() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_74() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_19(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_22(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_67(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_102() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_75() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_20(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_23(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_68(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_103() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_76() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_21(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_24(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_69(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_104() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_77() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_22(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_25(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_70(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_105() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_78() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_23(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_26(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_71(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_106() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_79() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_24(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_27(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_72(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_107() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_80() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_25(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_28(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_73(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_108() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_81() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_26(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_29(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_74(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_109() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_82() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_27(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_30(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_75(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_110() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_83() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_28(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_31(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_76(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_111() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_84() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_29(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_32(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_77(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_112() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_85() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_30(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_33(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_78(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_113() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_86() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Command_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Command_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_18(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_79(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_114() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_87() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Command_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_80(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_115() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_88() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Command_allocator_open1_ptr_Command_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Command_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_31(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_34(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_81(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_116() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_89() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_32(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_35(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_82(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_117() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_90() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_33(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_36(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_83(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_118() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_91() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_34(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_37(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_84(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_119() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_92() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_35(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_38(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_85(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_120() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_93() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_36(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_39(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_86(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_121() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_94() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_37(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_40(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_87(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_122() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_95() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_38(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_41(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_88(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_123() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_96() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_39(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_42(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_89(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_124() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_97() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_40(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_43(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_90(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_125() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_98() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_41(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_44(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_91(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_126() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_99() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_42(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_45(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_92(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_127() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_100() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_43(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_46(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_93(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_128() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_101() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_44(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_47(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_94(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_129() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_102() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_45(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_48(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_95(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_130() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_103() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_46(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_49(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_96(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_131() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_104() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_50(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_97(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_132() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_105() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_2() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_3() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_queue_open0_RtMidiIn_MidiMessage_deque_open1_RtMidiIn_MidiMessage_allocator_open2_RtMidiIn_MidiMessage_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::queue<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
        assert_eq!(
            align_of::<root::std::queue<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_RtMidiIn_MidiMessage_allocator_open1_RtMidiIn_MidiMessage_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_RtMidiIn_MidiMessage_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_4() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_5() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_6() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_51(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_98(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_133() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_106() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_52(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_99(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_134() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_107() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_19(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_100(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_135() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_108() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_101(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_136() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_109() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_102(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_137() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_110() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_list_open1_string_allocator_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_list_open3_basic_string_open4_char_char_traits_open5_char_close5_allocator_open5_char_close5_close4_allocator_open4_basic_string_open5_char_char_traits_open6_char_close6_allocator_open6_char_close6_close5_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_53(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_103(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_138() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_111() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_20(
    ) {
        assert_eq!(
            size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_104(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_139() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_112() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_list_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_allocator_open3_basic_string_open4_char_char_traits_open5_char_close5_allocator_open5_char_close5_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_105(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_140() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_113() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_106(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_141() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_114() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_54(
    ) {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_107(
    ) {
        assert_eq!(
            size_of::<root::std::__cxx11::basic_string<c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
        assert_eq!(
            align_of::<root::std::__cxx11::basic_string<c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_142() {
        assert_eq!(
            size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_115() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_int_allocator_open1_unsigned_int_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_int_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_int_allocator_open1_int_close1_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_int_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_int_allocator_open1_int_close1_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_int_close0_instantiation_1() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_RtAudio_DeviceInfo_allocator_open1_RtAudio_DeviceInfo_close1_close0_instantiation(
    ) {
        assert_eq!(
            size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_RtAudio_DeviceInfo_close0_instantiation() {
        assert_eq!(
            size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
}
