/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> Hash for __BindgenUnionField<T> {
    fn hash<H: Hasher>(&self, _state: &mut H) {}
}
impl<T> PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> Eq for __BindgenUnionField<T> {}

pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 8;
pub const __clang_minor__: u32 = 0;
pub const __clang_patchlevel__: u32 = 0;
pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
pub const __GNUC_MINOR__: u32 = 2;
pub const __GNUC_PATCHLEVEL__: u32 = 1;
pub const __GNUC__: u32 = 4;
pub const __GXX_ABI_VERSION: u32 = 1002;
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
pub const __STRICT_ANSI__: u32 = 1;
pub const __GXX_EXPERIMENTAL_CXX0X__: u32 = 1;
pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
pub const __cpp_rtti: u32 = 199711;
pub const __cpp_exceptions: u32 = 199711;
pub const __cpp_unicode_characters: u32 = 200704;
pub const __cpp_raw_strings: u32 = 200710;
pub const __cpp_unicode_literals: u32 = 200710;
pub const __cpp_user_defined_literals: u32 = 200809;
pub const __cpp_lambdas: u32 = 200907;
pub const __cpp_constexpr: u32 = 201603;
pub const __cpp_range_based_for: u32 = 201603;
pub const __cpp_static_assert: u32 = 201411;
pub const __cpp_decltype: u32 = 200707;
pub const __cpp_attributes: u32 = 200809;
pub const __cpp_rvalue_references: u32 = 200610;
pub const __cpp_variadic_templates: u32 = 200704;
pub const __cpp_initializer_lists: u32 = 200806;
pub const __cpp_delegating_constructors: u32 = 200604;
pub const __cpp_nsdmi: u32 = 200809;
pub const __cpp_inheriting_constructors: u32 = 201511;
pub const __cpp_ref_qualifiers: u32 = 200710;
pub const __cpp_alias_templates: u32 = 200704;
pub const __cpp_threadsafe_static_init: u32 = 200806;
pub const __cpp_binary_literals: u32 = 201304;
pub const __cpp_digit_separators: u32 = 201309;
pub const __cpp_init_captures: u32 = 201304;
pub const __cpp_generic_lambdas: u32 = 201304;
pub const __cpp_decltype_auto: u32 = 201304;
pub const __cpp_return_type_deduction: u32 = 201304;
pub const __cpp_aggregate_nsdmi: u32 = 201304;
pub const __cpp_variable_templates: u32 = 201304;
pub const __cpp_hex_float: u32 = 201603;
pub const __cpp_inline_variables: u32 = 201606;
pub const __cpp_noexcept_function_type: u32 = 201510;
pub const __cpp_capture_star_this: u32 = 201603;
pub const __cpp_if_constexpr: u32 = 201606;
pub const __cpp_deduction_guides: u32 = 201703;
pub const __cpp_template_auto: u32 = 201606;
pub const __cpp_namespace_attributes: u32 = 201411;
pub const __cpp_enumerator_attributes: u32 = 201411;
pub const __cpp_nested_namespace_definitions: u32 = 201411;
pub const __cpp_variadic_using: u32 = 201611;
pub const __cpp_aggregate_bases: u32 = 201603;
pub const __cpp_structured_bindings: u32 = 201606;
pub const __cpp_nontype_template_args: u32 = 201411;
pub const __cpp_fold_expressions: u32 = 201603;
pub const __cpp_guaranteed_copy_elision: u32 = 201606;
pub const __cpp_nontype_template_parameter_auto: u32 = 201606;
pub const __cpp_aligned_new: u32 = 201606;
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __EXCEPTIONS: u32 = 1;
pub const __GXX_RTTI: u32 = 1;
pub const __DEPRECATED: u32 = 1;
pub const __GNUG__: u32 = 4;
pub const __GXX_WEAK__: u32 = 1;
pub const __OPTIMIZE__: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _LP64: u32 = 1;
pub const __LP64__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u64 = 9223372036854775807;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 2147483647;
pub const __WINT_MAX__: u32 = 4294967295;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: i32 = -1;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
pub const __INTPTR_MAX__: u64 = 9223372036854775807;
pub const __UINTPTR_MAX__: i32 = -1;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 8;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 8;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
pub const __SIZEOF_SIZE_T__: u32 = 8;
pub const __SIZEOF_WCHAR_T__: u32 = 4;
pub const __SIZEOF_WINT_T__: u32 = 4;
pub const __SIZEOF_INT128__: u32 = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __PTRDIFF_WIDTH__: u32 = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __INTPTR_WIDTH__: u32 = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __SIZE_WIDTH__: u32 = 64;
pub const __WCHAR_WIDTH__: u32 = 32;
pub const __WINT_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINTPTR_WIDTH__: u32 = 64;
pub const __FLT16_HAS_DENORM__: u32 = 1;
pub const __FLT16_DIG__: u32 = 3;
pub const __FLT16_DECIMAL_DIG__: u32 = 5;
pub const __FLT16_HAS_INFINITY__: u32 = 1;
pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT16_MANT_DIG__: u32 = 11;
pub const __FLT16_MAX_10_EXP__: u32 = 4;
pub const __FLT16_MAX_EXP__: u32 = 15;
pub const __FLT16_MIN_10_EXP__: i32 = -13;
pub const __FLT16_MIN_EXP__: i32 = -14;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 18;
pub const __LDBL_DECIMAL_DIG__: u32 = 21;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 64;
pub const __LDBL_MAX_10_EXP__: u32 = 4932;
pub const __LDBL_MAX_EXP__: u32 = 16384;
pub const __LDBL_MIN_10_EXP__: i32 = -4931;
pub const __LDBL_MIN_EXP__: i32 = -16381;
pub const __POINTER_WIDTH__: u32 = 64;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __GNUC_GNU_INLINE__: u32 = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __PIC__: u32 = 2;
pub const __pic__: u32 = 2;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 21;
pub const __SSP_STRONG__: u32 = 2;
pub const __code_model_small_: u32 = 1;
pub const __amd64__: u32 = 1;
pub const __amd64: u32 = 1;
pub const __x86_64: u32 = 1;
pub const __x86_64__: u32 = 1;
pub const __bdver2: u32 = 1;
pub const __bdver2__: u32 = 1;
pub const __tune_bdver2__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __AES__: u32 = 1;
pub const __PCLMUL__: u32 = 1;
pub const __LZCNT__: u32 = 1;
pub const __BMI__: u32 = 1;
pub const __POPCNT__: u32 = 1;
pub const __PRFCHW__: u32 = 1;
pub const __TBM__: u32 = 1;
pub const __LWP__: u32 = 1;
pub const __XOP__: u32 = 1;
pub const __FMA4__: u32 = 1;
pub const __SSE4A__: u32 = 1;
pub const __FMA__: u32 = 1;
pub const __F16C__: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __XSAVE__: u32 = 1;
pub const __AVX__: u32 = 1;
pub const __SSE4_2__: u32 = 1;
pub const __SSE4_1__: u32 = 1;
pub const __SSSE3__: u32 = 1;
pub const __SSE3__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
pub const __SIZEOF_FLOAT128__: u32 = 16;
pub const __unix: u32 = 1;
pub const __unix__: u32 = 1;
pub const __linux: u32 = 1;
pub const __linux__: u32 = 1;
pub const __gnu_linux__: u32 = 1;
pub const __ELF__: u32 = 1;
pub const _GNU_SOURCE: u32 = 1;
pub const __FLOAT128__: u32 = 1;
pub const __STDC__: u32 = 1;
pub const __STDC_HOSTED__: u32 = 1;
pub const __cplusplus: u32 = 201703;
pub const __STDCPP_DEFAULT_NEW_ALIGNMENT__: u32 = 16;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub const HAVE_CONFIG_H: u32 = 1;
pub const HAVE_POLL: u32 = 1;
pub const HAVE_LIBPTHREAD: u32 = 1;
pub const ENABLE_THREADS: u32 = 1;
pub const __PLATFORM_LINUX__: u32 = 1;
pub const __LINUX_ALSA__: u32 = 1;
pub const __UNIX_JACK__: u32 = 1;
pub const USE_ALSA: u32 = 1;
pub const USE_DLTRICK_ALSA: u32 = 1;
pub const USE_OSS: u32 = 1;
pub const _GLIBCXX_STDLIB_H: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 8;
pub const __GLIBCXX__: u32 = 20181127;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __USE_EXTERN_INLINES: u32 = 1;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_WEAK_REF: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const STDC_HEADERS: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MEMORY_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const sz_VOID: u32 = 0;
pub const sz_WORD: u32 = 4;
pub const kindof_VOID: u32 = 0;
pub const kindof_INT: u32 = 1;
pub const kindof_FLOAT: u32 = 2;
pub const kindof_COMPLEX: u32 = 3;
pub const kindof_VEC3: u32 = 4;
pub const kindof_VEC4: u32 = 5;
pub const SILENCE: f64 = 0.0;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const ONE_PI: f64 = 3.141592653589793;
pub const TWO_PI: f64 = 6.283185307179586;
pub const SQRT2: f64 = 1.4142135623730951;
pub const __CHUCK_STAT_TRACK__: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _BITS_STDIO_H: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const _GLIBCXX_MAP: u32 = 1;
pub const _STL_TREE_H: u32 = 1;
pub const _STL_ALGOBASE_H: u32 = 1;
pub const _FUNCTEXCEPT_H: u32 = 1;
pub const _EXCEPTION_DEFINES_H: u32 = 1;
pub const _CPP_TYPE_TRAITS_H: u32 = 1;
pub const _EXT_TYPE_TRAITS: u32 = 1;
pub const _EXT_NUMERIC_TRAITS: u32 = 1;
pub const _STL_PAIR_H: u32 = 1;
pub const _MOVE_H: u32 = 1;
pub const _CONCEPT_CHECK_H: u32 = 1;
pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
pub const _STL_ITERATOR_H: u32 = 1;
pub const _PTR_TRAITS_H: u32 = 1;
pub const __cpp_lib_array_constexpr: u32 = 201603;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const _ALLOCATOR_H: u32 = 1;
pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
pub const _NEW_ALLOCATOR_H: u32 = 1;
pub const __EXCEPTION_H: u32 = 1;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
pub const _HASH_BYTES_H: u32 = 1;
pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const __cpp_lib_launder: u32 = 201606;
pub const _MEMORYFWD_H: u32 = 1;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_allocator_is_always_equal: u32 = 201411;
pub const _STL_FUNCTION_H: u32 = 1;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const _BACKWARD_BINDERS_H: u32 = 1;
pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
pub const _ALLOC_TRAITS_H: u32 = 1;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const _ALIGNED_BUFFER_H: u32 = 1;
pub const _NODE_HANDLE: u32 = 1;
pub const __cpp_lib_node_extract: u32 = 201606;
pub const _GLIBCXX_OPTIONAL: u32 = 1;
pub const _GLIBCXX_UTILITY: u32 = 1;
pub const _STL_RELOPS_H: u32 = 1;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const _GLIBCXX_USE_MAKE_INTEGER_SEQ: u32 = 1;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_as_const: u32 = 201510;
pub const _GLIBCXX_STDEXCEPT: u32 = 1;
pub const _GLIBCXX_STRING: u32 = 1;
pub const _STRINGFWD_H: u32 = 1;
pub const _CHAR_TRAITS_H: u32 = 1;
pub const _GLIBCXX_POSTYPES_H: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WEOF: u32 = 4294967295;
pub const _GLIBCXX_CWCHAR: u32 = 1;
pub const __cpp_lib_constexpr_char_traits: u32 = 201611;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _LOCALE_FWD_H: u32 = 1;
pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const _GLIBCXX_CLOCALE: u32 = 1;
pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
pub const _GLIBCXX_IOSFWD: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _GLIBCXX_CCTYPE: u32 = 1;
pub const _OSTREAM_INSERT_H: u32 = 1;
pub const _CXXABI_FORCED_H: u32 = 1;
pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const _BASIC_STRING_H: u32 = 1;
pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 1;
pub const __GTHREADS: u32 = 1;
pub const __GTHREADS_CXX0X: u32 = 1;
pub const __GTHREAD_HAS_COND: u32 = 1;
pub const __GTHREAD_ONCE_INIT: u32 = 0;
pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
pub const _GLIBCXX_STRING_VIEW: u32 = 1;
pub const _GLIBCXX_NUMERIC_LIMITS: u32 = 1;
pub const _FUNCTIONAL_HASH_H: u32 = 1;
pub const __cpp_lib_string_view: u32 = 201603;
pub const _GLIBCXX_STRING_VIEW_TCC: u32 = 1;
pub const _STRING_CONVERSIONS_H: u32 = 1;
pub const _GLIBCXX_CSTDIO: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const _GLIBCXX_CERRNO: u32 = 1;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const _BASIC_STRING_TCC: u32 = 1;
pub const _ENABLE_SPECIAL_MEMBERS_H: u32 = 1;
pub const __cpp_lib_optional: u32 = 201603;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const _STL_MAP_H: u32 = 1;
pub const _GLIBCXX_TUPLE: u32 = 1;
pub const _GLIBCXX_ARRAY: u32 = 1;
pub const _USES_ALLOCATOR_H: u32 = 1;
pub const _GLIBCXX_INVOKE_H: u32 = 1;
pub const __cpp_lib_apply: u32 = 201603;
pub const __cpp_lib_make_from_tuple: u32 = 201606;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_map_insertion: u32 = 201411;
pub const _STL_MULTIMAP_H: u32 = 1;
pub const _GLIBCXX_VECTOR: u32 = 1;
pub const _STL_CONSTRUCT_H: u32 = 1;
pub const _STL_UNINITIALIZED_H: u32 = 1;
pub const _STL_VECTOR_H: u32 = 1;
pub const _STL_BVECTOR_H: u32 = 1;
pub const _VECTOR_TCC: u32 = 1;
pub const _GLIBCXX_QUEUE: u32 = 1;
pub const _GLIBCXX_DEQUE: u32 = 1;
pub const _STL_DEQUE_H: u32 = 1;
pub const _GLIBCXX_DEQUE_BUF_SIZE: u32 = 512;
pub const _DEQUE_TCC: u32 = 1;
pub const _STL_HEAP_H: u32 = 1;
pub const _STL_QUEUE_H: u32 = 1;
pub const _GLIBCXX_FSTREAM: u32 = 1;
pub const _GLIBCXX_ISTREAM: u32 = 1;
pub const _GLIBCXX_IOS: u32 = 1;
pub const _IOS_BASE_H: u32 = 1;
pub const _LOCALE_CLASSES_H: u32 = 1;
pub const _LOCALE_CLASSES_TCC: u32 = 1;
pub const _GLIBCXX_SYSTEM_ERROR: u32 = 1;
pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
pub const _GLIBXX_STREAMBUF: u32 = 1;
pub const _STREAMBUF_TCC: u32 = 1;
pub const _BASIC_IOS_H: u32 = 1;
pub const _LOCALE_FACETS_H: u32 = 1;
pub const _WCTYPE_H: u32 = 1;
pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_CWCTYPE: u32 = 1;
pub const _STREAMBUF_ITERATOR_H: u32 = 1;
pub const _GLIBCXX_NUM_FACETS: u32 = 28;
pub const _GLIBCXX_NUM_CXX11_FACETS: u32 = 16;
pub const _GLIBCXX_NUM_UNICODE_FACETS: u32 = 2;
pub const _LOCALE_FACETS_TCC: u32 = 1;
pub const _BASIC_IOS_TCC: u32 = 1;
pub const _GLIBCXX_OSTREAM: u32 = 1;
pub const _OSTREAM_TCC: u32 = 1;
pub const _ISTREAM_TCC: u32 = 1;
pub const _CODECVT_H: u32 = 1;
pub const _GLIBCXX_BASIC_FILE_STDIO_H: u32 = 1;
pub const _GLIBCXX_CXX_IO_H: u32 = 1;
pub const _FSTREAM_TCC: u32 = 1;
pub const _GLIBCXX_SSTREAM: u32 = 1;
pub const _SSTREAM_TCC: u32 = 1;
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_FD_SETSIZE: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_QLIMIT: u32 = 1;
pub const _POSIX_HIWAT: u32 = 512;
pub const _POSIX_UIO_MAXIOV: u32 = 16;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const MAXNAMLEN: u32 = 255;
pub const CHUCK_ARRAY4_DATAKIND: u32 = 1;
pub const CHUCK_ARRAY8_DATAKIND: u32 = 2;
pub const CHUCK_ARRAY16_DATAKIND: u32 = 3;
pub const CHUCK_ARRAY24_DATAKIND: u32 = 4;
pub const CHUCK_ARRAY32_DATAKIND: u32 = 5;
pub const CK_DLL_VERSION_MAJOR: u32 = 7;
pub const CK_DLL_VERSION_MINOR: u32 = 0;
pub const CK_QUERY_FUNC: &'static [u8; 9usize] = b"ck_query\0";
pub const CK_DECLVERSION_FUNC: &'static [u8; 11usize] = b"ck_version\0";
pub const CK_INVALID_OFFSET: u32 = 4294967295;
pub const _DLFCN_H: u32 = 1;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_BINDING_MASK: u32 = 3;
pub const RTLD_NOLOAD: u32 = 4;
pub const RTLD_DEEPBIND: u32 = 8;
pub const RTLD_GLOBAL: u32 = 256;
pub const RTLD_LOCAL: u32 = 0;
pub const RTLD_NODELETE: u32 = 4096;
pub const LM_ID_BASE: u32 = 0;
pub const LM_ID_NEWLM: i32 = -1;
pub const UGEN_OP_PASS: i32 = -1;
pub const UGEN_OP_STOP: u32 = 0;
pub const UGEN_OP_TICK: u32 = 1;
pub const _GLIBCXX_IOSTREAM: u32 = 1;
pub const _GLIBCXX_LIST: u32 = 1;
pub const _STL_LIST_H: u32 = 1;
pub const _ALLOCATED_PTR_H: u32 = 1;
pub const _LIST_TCC: u32 = 1;
pub const CK_DEBUG_MEMORY_MGMT: u32 = 0;
pub const CVM_MEM_STACK_SIZE: u32 = 65536;
pub const CVM_REG_STACK_SIZE: u32 = 16384;
pub mod std {

    pub type nullptr_t = *const ::std::os::raw::c_void;
    pub mod __cxx11 {

        pub type string = root::std::__cxx11::basic_string<::std::os::raw::c_char>;
        pub type wstring = root::std::__cxx11::basic_string<u32>;
        pub type u16string = root::std::__cxx11::basic_string<u16>;
        pub type u32string = root::std::__cxx11::basic_string<u32>;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct time_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct time_get_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct money_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct money_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct messages {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct messages_byname {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct basic_string<_CharT> {
            pub _M_dataplus: root::std::__cxx11::basic_string__Alloc_hider,
            pub _M_string_length: root::std::__cxx11::basic_string_size_type,
            pub __bindgen_anon_1: root::std::__cxx11::basic_string__bindgen_ty_2<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_string__Char_alloc_type = [u8; 0usize];
        pub type basic_string__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type basic_string_traits_type<_Traits> = _Traits;
        pub type basic_string_value_type = [u8; 0usize];
        pub type basic_string_allocator_type = root::std::__cxx11::basic_string__Char_alloc_type;
        pub type basic_string_size_type = [u8; 0usize];
        pub type basic_string_difference_type = [u8; 0usize];
        pub type basic_string_reference = [u8; 0usize];
        pub type basic_string_const_reference = [u8; 0usize];
        pub type basic_string_pointer = [u8; 0usize];
        pub type basic_string_const_pointer = [u8; 0usize];
        pub type basic_string_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::__cxx11::basic_string_pointer>;
        pub type basic_string_const_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::__cxx11::basic_string_const_pointer>;
        pub type basic_string_const_reverse_iterator =
            root::std::reverse_iterator<root::std::__cxx11::basic_string_const_iterator>;
        pub type basic_string_reverse_iterator =
            root::std::reverse_iterator<root::std::__cxx11::basic_string_iterator>;
        pub type basic_string___const_iterator = root::std::__cxx11::basic_string_const_iterator;
        pub type basic_string___sv_type<_CharT> = root::std::basic_string_view<_CharT>;
        pub type basic_string__If_sv = root::std::enable_if_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_string___sv_wrapper<_CharT> {
            pub _M_sv: root::std::__cxx11::basic_string___sv_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for basic_string___sv_wrapper<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_string__Alloc_hider {
            pub _M_p: root::std::__cxx11::basic_string_pointer,
        }
        impl Default for basic_string__Alloc_hider {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for basic_string__Alloc_hider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_string__Alloc_hider {{  }}")
            }
        }
        impl PartialEq for basic_string__Alloc_hider {
            fn eq(&self, other: &basic_string__Alloc_hider) -> bool {
                self._M_p == other._M_p
            }
        }
        pub const basic_string__S_local_capacity: root::std::__cxx11::basic_string__bindgen_ty_1 =
            0;
        pub type basic_string__bindgen_ty_1 = i32;
        #[repr(C)]
        pub struct basic_string__bindgen_ty_2<_CharT> {
            pub _M_local_buf: root::__BindgenUnionField<*mut _CharT>,
            pub _M_allocated_capacity:
                root::__BindgenUnionField<root::std::__cxx11::basic_string_size_type>,
            pub bindgen_union_field: u64,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for basic_string__bindgen_ty_2<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_string__bindgen_ty_2<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_string__bindgen_ty_2 {{ union }}")
            }
        }
        impl<_CharT> Default for basic_string<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_string<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "basic_string {{ _M_dataplus: {:?}, __bindgen_anon_1: {:?} }}",
                    self._M_dataplus, self.__bindgen_anon_1
                )
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct collate {
            pub _base: root::std::locale_facet,
            pub _M_c_locale_collate: root::std::__c_locale,
        }
        pub type collate_char_type<_CharT> = _CharT;
        pub type collate_string_type = root::std::__cxx11::basic_string<_CharT>;
        impl Default for collate {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct collate_byname {
            pub _base: root::std::__cxx11::collate,
        }
        pub type collate_byname_char_type<_CharT> = _CharT;
        pub type collate_byname_string_type = root::std::__cxx11::basic_string<_CharT>;
        impl Default for collate_byname {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct numpunct<_CharT> {
            pub _base: root::std::locale_facet,
            pub _M_data: *mut root::std::__cxx11::numpunct___cache_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type numpunct_char_type<_CharT> = _CharT;
        pub type numpunct_string_type = root::std::__cxx11::basic_string<_CharT>;
        pub type numpunct___cache_type<_CharT> = root::std::__numpunct_cache<_CharT>;
        impl<_CharT> Default for numpunct<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            pub static mut id: root::std::locale_id;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct numpunct_byname<_CharT> {
            pub _base: root::std::__cxx11::numpunct<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type numpunct_byname_char_type<_CharT> = _CharT;
        pub type numpunct_byname_string_type = root::std::__cxx11::basic_string<_CharT>;
        impl<_CharT> Default for numpunct_byname<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_stringbuf<_CharT> {
            pub _base: root::std::basic_streambuf<_CharT>,
            pub _M_mode: root::std::ios_base_openmode,
            pub _M_string: root::std::__cxx11::basic_stringbuf___string_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_stringbuf_char_type<_CharT> = _CharT;
        pub type basic_stringbuf_traits_type<_Traits> = _Traits;
        pub type basic_stringbuf_allocator_type<_Alloc> = _Alloc;
        pub type basic_stringbuf_int_type = [u8; 0usize];
        pub type basic_stringbuf_pos_type = [u8; 0usize];
        pub type basic_stringbuf_off_type = [u8; 0usize];
        pub type basic_stringbuf___streambuf_type<_CharT> =
            root::std::basic_streambuf<root::std::__cxx11::basic_stringbuf_char_type<_CharT>>;
        pub type basic_stringbuf___string_type<_CharT> =
            root::std::__cxx11::basic_string<root::std::__cxx11::basic_stringbuf_char_type<_CharT>>;
        pub type basic_stringbuf___size_type<_CharT> =
            root::std::__cxx11::basic_stringbuf___string_type<_CharT>;
        #[repr(C)]
        pub struct basic_stringbuf___xfer_bufptrs<_CharT> {
            pub _M_to: *mut root::std::__cxx11::basic_stringbuf<_CharT>,
            pub _M_goff: [self::std::__cxx11::basic_stringbuf_off_type; 3usize],
            pub _M_poff: [self::std::__cxx11::basic_stringbuf_off_type; 3usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for basic_stringbuf___xfer_bufptrs<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_stringbuf___xfer_bufptrs<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write ! ( f , "basic_stringbuf___xfer_bufptrs {{ _M_to: {:?}, _M_goff: {:?}, _M_poff: {:?} }}" , self . _M_to , self . _M_goff , self . _M_poff )
            }
        }
        impl<_CharT> Default for basic_stringbuf<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_stringbuf<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "basic_stringbuf {{ _M_mode: {:?}, _M_string: {:?} }}",
                    self._M_mode, self._M_string
                )
            }
        }
        #[repr(C)]
        pub struct basic_istringstream<_CharT> {
            pub _base: root::std::basic_istream<_CharT>,
            pub _M_stringbuf: root::std::__cxx11::basic_istringstream___stringbuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_istringstream_char_type<_CharT> = _CharT;
        pub type basic_istringstream_traits_type<_Traits> = _Traits;
        pub type basic_istringstream_allocator_type<_Alloc> = _Alloc;
        pub type basic_istringstream_int_type = [u8; 0usize];
        pub type basic_istringstream_pos_type = [u8; 0usize];
        pub type basic_istringstream_off_type = [u8; 0usize];
        pub type basic_istringstream___string_type<_CharT> =
            root::std::__cxx11::basic_string<_CharT>;
        pub type basic_istringstream___stringbuf_type<_CharT> =
            root::std::__cxx11::basic_stringbuf<_CharT>;
        pub type basic_istringstream___istream_type<_CharT> =
            root::std::basic_istream<root::std::__cxx11::basic_istringstream_char_type<_CharT>>;
        impl<_CharT> Default for basic_istringstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_istringstream<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "basic_istringstream {{ _M_stringbuf: {:?} }}",
                    self._M_stringbuf
                )
            }
        }
        #[repr(C)]
        pub struct basic_ostringstream<_CharT> {
            pub _base: root::std::basic_ostream<_CharT>,
            pub _M_stringbuf: root::std::__cxx11::basic_ostringstream___stringbuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_ostringstream_char_type<_CharT> = _CharT;
        pub type basic_ostringstream_traits_type<_Traits> = _Traits;
        pub type basic_ostringstream_allocator_type<_Alloc> = _Alloc;
        pub type basic_ostringstream_int_type = [u8; 0usize];
        pub type basic_ostringstream_pos_type = [u8; 0usize];
        pub type basic_ostringstream_off_type = [u8; 0usize];
        pub type basic_ostringstream___string_type<_CharT> =
            root::std::__cxx11::basic_string<_CharT>;
        pub type basic_ostringstream___stringbuf_type<_CharT> =
            root::std::__cxx11::basic_stringbuf<_CharT>;
        pub type basic_ostringstream___ostream_type<_CharT> =
            root::std::basic_ostream<root::std::__cxx11::basic_ostringstream_char_type<_CharT>>;
        impl<_CharT> Default for basic_ostringstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_ostringstream<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "basic_ostringstream {{ _M_stringbuf: {:?} }}",
                    self._M_stringbuf
                )
            }
        }
        #[repr(C)]
        pub struct basic_stringstream<_CharT> {
            pub _base: root::std::basic_iostream<_CharT>,
            pub _M_stringbuf: root::std::__cxx11::basic_stringstream___stringbuf_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_stringstream_char_type<_CharT> = _CharT;
        pub type basic_stringstream_traits_type<_Traits> = _Traits;
        pub type basic_stringstream_allocator_type<_Alloc> = _Alloc;
        pub type basic_stringstream_int_type = [u8; 0usize];
        pub type basic_stringstream_pos_type = [u8; 0usize];
        pub type basic_stringstream_off_type = [u8; 0usize];
        pub type basic_stringstream___string_type<_CharT> =
            root::std::__cxx11::basic_string<_CharT>;
        pub type basic_stringstream___stringbuf_type<_CharT> =
            root::std::__cxx11::basic_stringbuf<_CharT>;
        pub type basic_stringstream___iostream_type<_CharT> =
            root::std::basic_iostream<root::std::__cxx11::basic_stringstream_char_type<_CharT>>;
        impl<_CharT> Default for basic_stringstream<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_stringstream<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "basic_stringstream {{ _M_stringbuf: {:?} }}",
                    self._M_stringbuf
                )
            }
        }
        #[repr(C)]
        pub struct _List_base {
            pub _M_impl: root::std::__cxx11::_List_base__List_impl,
        }
        pub type _List_base__Tp_alloc_type = [u8; 0usize];
        pub type _List_base__Tp_alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _List_base__Node_alloc_type = [u8; 0usize];
        pub type _List_base__Node_alloc_traits = root::__gnu_cxx::__alloc_traits;
        #[repr(C)]
        pub struct _List_base__List_impl {
            pub _M_node: root::std::__detail::_List_node_header,
        }
        impl Default for _List_base__List_impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _List_base__List_impl {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_List_base__List_impl {{ _M_node: {:?} }}", self._M_node)
            }
        }
        impl PartialEq for _List_base__List_impl {
            fn eq(&self, other: &_List_base__List_impl) -> bool {
                self._M_node == other._M_node
            }
        }
        pub type _List_base_allocator_type<_Alloc> = _Alloc;
        impl Default for _List_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _List_base {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_List_base {{ _M_impl: {:?} }}", self._M_impl)
            }
        }
        impl PartialEq for _List_base {
            fn eq(&self, other: &_List_base) -> bool {
                self._M_impl == other._M_impl
            }
        }
        #[repr(C)]
        pub struct list {
            pub _base: root::std::__cxx11::_List_base,
        }
        pub type list__Base = root::std::__cxx11::_List_base;
        pub type list__Tp_alloc_type = root::std::__cxx11::list__Base;
        pub type list__Tp_alloc_traits = root::std::__cxx11::list__Base;
        pub type list__Node_alloc_type = root::std::__cxx11::list__Base;
        pub type list__Node_alloc_traits = root::std::__cxx11::list__Base;
        pub type list_value_type<_Tp> = _Tp;
        pub type list_pointer = root::std::__cxx11::list__Tp_alloc_traits;
        pub type list_const_pointer = root::std::__cxx11::list__Tp_alloc_traits;
        pub type list_reference = root::std::__cxx11::list__Tp_alloc_traits;
        pub type list_const_reference = root::std::__cxx11::list__Tp_alloc_traits;
        pub type list_iterator = root::std::_List_iterator;
        pub type list_const_iterator = root::std::_List_const_iterator;
        pub type list_const_reverse_iterator =
            root::std::reverse_iterator<root::std::__cxx11::list_const_iterator>;
        pub type list_reverse_iterator =
            root::std::reverse_iterator<root::std::__cxx11::list_iterator>;
        pub type list_size_type = usize;
        pub type list_difference_type = isize;
        pub type list_allocator_type<_Alloc> = _Alloc;
        pub type list__Node = root::std::_List_node;
        impl Default for list {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for list {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "list {{  }}")
            }
        }
        impl PartialEq for list {
            fn eq(&self, other: &list) -> bool {
                self._base == other._base
            }
        }
    }
    extern "C" {
        pub fn __throw_bad_exception();
    }
    extern "C" {
        pub fn __throw_bad_alloc();
    }
    extern "C" {
        pub fn __throw_bad_cast();
    }
    extern "C" {
        pub fn __throw_bad_typeid();
    }
    extern "C" {
        pub fn __throw_logic_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_domain_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_invalid_argument(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_length_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_out_of_range(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_out_of_range_fmt(arg1: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        pub fn __throw_runtime_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_range_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_overflow_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_underflow_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_ios_failure(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_system_error(arg1: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn __throw_future_error(arg1: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn __throw_bad_function_call();
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __true_type {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___true_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__true_type>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__true_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__true_type>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__true_type))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __false_type {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___false_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__false_type>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__false_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__false_type>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__false_type))
    //     );
    // }
    pub type __truth_type___type = root::std::__false_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __traitor {
        pub _address: u8,
    }
    pub const __traitor___value: root::std::__traitor__bindgen_ty_1 = 0;
    pub type __traitor__bindgen_ty_1 = i32;
    pub type __traitor___type = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __are_same {
        pub _address: u8,
    }
    pub const __are_same___value: root::std::__are_same__bindgen_ty_1 = 0;
    pub type __are_same__bindgen_ty_1 = i32;
    pub type __are_same___type = root::std::__false_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_void {
        pub _address: u8,
    }
    pub const __is_void___value: root::std::__is_void__bindgen_ty_1 = 0;
    pub type __is_void__bindgen_ty_1 = i32;
    pub type __is_void___type = root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_void_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_void>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_void)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_void>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_void)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_integer {
        pub _address: u8,
    }
    pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 = 0;
    pub type __is_integer__bindgen_ty_1 = i32;
    pub type __is_integer___type = root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_bool__close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_floating {
        pub _address: u8,
    }
    pub const __is_floating___value: root::std::__is_floating__bindgen_ty_1 = 0;
    pub type __is_floating__bindgen_ty_1 = i32;
    pub type __is_floating___type = root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_floating_open0_float_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_floating_open0_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_floating_open0_long_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_pointer {
        pub _address: u8,
    }
    pub const __is_pointer___value: root::std::__is_pointer__bindgen_ty_1 = 0;
    pub type __is_pointer__bindgen_ty_1 = i32;
    pub type __is_pointer___type = root::std::__false_type;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_arithmetic {
        pub _address: u8,
    }
    impl Default for __is_arithmetic {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_scalar {
        pub _address: u8,
    }
    impl Default for __is_scalar {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_char {
        pub _address: u8,
    }
    pub const __is_char___value: root::std::__is_char__bindgen_ty_1 = 0;
    pub type __is_char__bindgen_ty_1 = i32;
    pub type __is_char___type = root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_char_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_char>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_char)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_char>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_char)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_char_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_char>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_char)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_char>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_char)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_byte {
        pub _address: u8,
    }
    pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 = 0;
    pub type __is_byte__bindgen_ty_1 = i32;
    pub type __is_byte___type = root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_byte_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_byte_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_byte_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    // }
    pub type byte = u8;
    // #[test]
    // fn __bindgen_test_layout___is_byte_open0_byte_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_move_iterator {
        pub _address: u8,
    }
    pub const __is_move_iterator___value: root::std::__is_move_iterator__bindgen_ty_1 = 0;
    pub type __is_move_iterator__bindgen_ty_1 = i32;
    pub type __is_move_iterator___type = root::std::__false_type;
    pub type integral_constant_value_type<_Tp> = _Tp;
    pub type integral_constant_type = u8;
    extern "C" {
        pub static value: _Tp;
    }
    pub type true_type = u8;
    pub type false_type = u8;
    pub type __bool_constant = u8;
    pub type bool_constant = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __or_ {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___or__open0_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__or_>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__or_)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__or_>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__or_)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __and_ {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___and__open0_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__and_>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__and_)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__and_>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__and_)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __not_ {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct conjunction {
        pub _address: u8,
    }
    impl Default for conjunction {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct disjunction {
        pub _address: u8,
    }
    impl Default for disjunction {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct negation {
        pub _address: u8,
    }
    impl Default for negation {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __success_type {
        pub _address: u8,
    }
    pub type __success_type_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __failure_type {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___failure_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__failure_type>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__failure_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__failure_type>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__failure_type))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_void_helper {
        pub _base: root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_void_helper_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_void_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_void_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_void_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_void_helper)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_void {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_integral_helper {
        pub _base: root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_bool__close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_long_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_integral {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_floating_point_helper {
        pub _base: root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_floating_point_helper_open0_float_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_floating_point_helper_open0_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_floating_point_helper_open0_long_double_close0_instantiation()
    // {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_floating_point {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_array {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_pointer_helper {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_lvalue_reference {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_rvalue_reference {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_member_object_pointer_helper {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_member_object_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_member_function_pointer_helper {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_member_function_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_enum {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_union {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_class {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_function {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_null_pointer_helper {
        pub _base: root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_null_pointer_helper_open0_nullptr_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_null_pointer_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_null_pointer_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_null_pointer_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_null_pointer_helper)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_null_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nullptr_t {
        pub _address: u8,
    }
    impl Default for __is_nullptr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_reference {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_arithmetic {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_fundamental {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_object {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_scalar {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_compound {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_member_pointer_helper {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_member_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_referenceable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_const {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_volatile {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivial {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_copyable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_standard_layout {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_pod {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_literal_type {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_empty {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_polymorphic {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_final {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_abstract {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_signed {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_unsigned {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_array_known_bounds {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_array_unknown_bounds {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_is_destructible_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_is_destructible_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_is_destructible_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_is_destructible_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_is_destructible_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__do_is_destructible_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_destructible_impl {
        pub _address: u8,
    }
    pub type __is_destructible_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_destructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_is_nt_destructible_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_is_nt_destructible_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_is_nt_destructible_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_is_nt_destructible_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_is_nt_destructible_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__do_is_nt_destructible_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_destructible_impl {
        pub _address: u8,
    }
    pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_destructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_is_default_constructible_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_is_default_constructible_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_is_default_constructible_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_is_default_constructible_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_is_default_constructible_impl>(),
    //         1usize,
    //         concat!(
    //             "Alignment of ",
    //             stringify!(__do_is_default_constructible_impl)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_default_constructible_impl {
        pub _address: u8,
    }
    pub type __is_default_constructible_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_default_constructible_atom {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_default_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_copy_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_move_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_default_constructible_atom {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_default_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_constructible_impl {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_copy_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_move_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_copy_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_move_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_assignable_impl {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_copy_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_move_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_default_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_is_implicitly_default_constructible_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_is_implicitly_default_constructible_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_is_implicitly_default_constructible_impl>(),
    //         1usize,
    //         concat!(
    //             "Size of: ",
    //             stringify!(__do_is_implicitly_default_constructible_impl)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_is_implicitly_default_constructible_impl>(),
    //         1usize,
    //         concat!(
    //             "Alignment of ",
    //             stringify!(__do_is_implicitly_default_constructible_impl)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}__test"]
        pub fn __do_is_implicitly_default_constructible_impl___test() -> root::std::false_type;
    }
    impl __do_is_implicitly_default_constructible_impl {
        #[inline]
        pub unsafe fn __test() -> root::std::false_type {
            __do_is_implicitly_default_constructible_impl___test()
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_implicitly_default_constructible_impl {
        pub _address: u8,
    }
    pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_implicitly_default_constructible_safe {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_implicitly_default_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_copy_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_move_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_copy_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_move_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_destructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct has_virtual_destructor {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct alignment_of {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct rank {
        pub _base: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_same {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_base_of {
        pub _address: u8,
    }
    pub type __is_convertible_helper_type = root::std::is_void;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_convertible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_const {
        pub _address: u8,
    }
    pub type remove_const_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_volatile {
        pub _address: u8,
    }
    pub type remove_volatile_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_cv {
        pub _address: u8,
    }
    pub type remove_cv_type = root::std::remove_const;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_const {
        pub _address: u8,
    }
    pub type add_const_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_volatile {
        pub _address: u8,
    }
    pub type add_volatile_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_cv {
        pub _address: u8,
    }
    pub type add_cv_type = root::std::add_const;
    pub type remove_const_t = root::std::remove_const;
    pub type remove_volatile_t = root::std::remove_volatile;
    pub type remove_cv_t = root::std::remove_cv;
    pub type add_const_t = root::std::add_const;
    pub type add_volatile_t = root::std::add_volatile;
    pub type add_cv_t = root::std::add_cv;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_reference {
        pub _address: u8,
    }
    pub type remove_reference_type<_Tp> = _Tp;
    pub type __add_lvalue_reference_helper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_lvalue_reference {
        pub _address: u8,
    }
    pub type __add_rvalue_reference_helper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_rvalue_reference {
        pub _address: u8,
    }
    pub type remove_reference_t = root::std::remove_reference;
    pub type add_lvalue_reference_t = root::std::add_lvalue_reference;
    pub type add_rvalue_reference_t = root::std::add_rvalue_reference;
    pub type __match_cv_qualifiers___match = u8;
    pub type __match_cv_qualifiers___type = root::std::__match_cv_qualifiers___match;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __make_unsigned {
        pub _address: u8,
    }
    pub type __make_unsigned___type<_Tp> = _Tp;
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct make_unsigned {
        pub _address: u8,
    }
    pub type make_unsigned_type = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __make_signed {
        pub _address: u8,
    }
    pub type __make_signed___type<_Tp> = _Tp;
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct make_signed {
        pub _address: u8,
    }
    pub type make_signed_type = u8;
    pub type make_signed_t = root::std::make_signed;
    pub type make_unsigned_t = root::std::make_unsigned;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_extent {
        pub _address: u8,
    }
    pub type remove_extent_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_all_extents {
        pub _address: u8,
    }
    pub type remove_all_extents_type<_Tp> = _Tp;
    pub type remove_extent_t = root::std::remove_extent;
    pub type remove_all_extents_t = root::std::remove_all_extents;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __remove_pointer_helper {
        pub _address: u8,
    }
    pub type __remove_pointer_helper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_pointer {
        pub _address: u8,
    }
    impl Default for remove_pointer {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __add_pointer_helper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_pointer {
        pub _address: u8,
    }
    pub type remove_pointer_t = root::std::remove_pointer;
    pub type add_pointer_t = root::std::add_pointer;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __aligned_storage_msa___type {
        pub __data: *mut ::std::os::raw::c_uchar,
        pub __align: root::std::__aligned_storage_msa___type__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __aligned_storage_msa___type__bindgen_ty_1 {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___aligned_storage_msa___type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__aligned_storage_msa___type>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(__aligned_storage_msa___type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__aligned_storage_msa___type>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(__aligned_storage_msa___type))
    //     );
    // }
    impl Default for __aligned_storage_msa___type {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __aligned_storage_msa___type {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__aligned_storage_msa___type {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union aligned_storage_type {
        pub __data: *mut ::std::os::raw::c_uchar,
        pub __align: root::std::aligned_storage_type__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct aligned_storage_type__bindgen_ty_1 {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_aligned_storage_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<aligned_storage_type>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(aligned_storage_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<aligned_storage_type>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(aligned_storage_type))
    //     );
    // }
    impl Default for aligned_storage_type {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for aligned_storage_type {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "aligned_storage_type {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __strictest_alignment {
        pub _address: u8,
    }
    pub type aligned_union___strictest = root::std::__strictest_alignment;
    pub type aligned_union_type = u8;
    extern "C" {
        pub static alignment_value: usize;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct decay {
        pub _address: u8,
    }
    pub type decay___remove_type = root::std::remove_reference;
    pub type decay_type = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct reference_wrapper {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __strip_reference_wrapper {
        pub _address: u8,
    }
    pub type __strip_reference_wrapper___type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __decay_and_strip {
        pub _address: u8,
    }
    pub type __decay_and_strip___type = root::std::__strip_reference_wrapper;
    pub type _Require = u8;
    pub type conditional_type<_Iftrue> = _Iftrue;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct common_type {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_common_type_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_common_type_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_common_type_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_common_type_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_common_type_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__do_common_type_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __common_type_impl {
        pub _address: u8,
    }
    pub type __common_type_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_member_type_wrapper {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_member_type_wrapper() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_member_type_wrapper>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_member_type_wrapper))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_member_type_wrapper>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__do_member_type_wrapper))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __member_type_wrapper {
        pub _address: u8,
    }
    pub type __member_type_wrapper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __expanded_common_type_wrapper {
        pub _address: u8,
    }
    pub type __expanded_common_type_wrapper_type = root::std::common_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct underlying_type {
        pub _address: u8,
    }
    pub type underlying_type_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __declval_protector {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct result_of {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_memfun_ref {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_memfun_ref() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_memfun_ref>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_memfun_ref))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_memfun_ref>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_memfun_ref))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_memfun_deref {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_memfun_deref() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_memfun_deref>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_memfun_deref))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_memfun_deref>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_memfun_deref))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_memobj_ref {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_memobj_ref() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_memobj_ref>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_memobj_ref))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_memobj_ref>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_memobj_ref))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_memobj_deref {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_memobj_deref() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_memobj_deref>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_memobj_deref))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_memobj_deref>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_memobj_deref))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_other {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_other() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_other>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_other))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_other>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_other))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_success {
        pub _address: u8,
    }
    pub type __result_of_success___invoke_type<_Tag> = _Tag;
    impl Default for __result_of_success {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun_ref_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_memfun_ref_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_memfun_ref_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_memfun_ref_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_memfun_ref_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_memfun_ref_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun_ref {
        pub _address: u8,
    }
    pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun_deref_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_memfun_deref_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_memfun_deref_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_memfun_deref_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_memfun_deref_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_memfun_deref_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun_deref {
        pub _address: u8,
    }
    pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj_ref_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_memobj_ref_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_memobj_ref_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_memobj_ref_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_memobj_ref_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_memobj_ref_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj_ref {
        pub _address: u8,
    }
    pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj_deref_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_memobj_deref_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_memobj_deref_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_memobj_deref_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_memobj_deref_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_memobj_deref_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj_deref {
        pub _address: u8,
    }
    pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __inv_unwrap {
        pub _address: u8,
    }
    pub type __inv_unwrap_type<_Tp> = _Tp;
    pub type __result_of_impl_type = root::std::__failure_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_other_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_other_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_other_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_other_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_other_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_other_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_result {
        pub _address: u8,
    }
    pub type aligned_storage_t = u8;
    pub type aligned_union_t = u8;
    pub type decay_t = root::std::decay;
    pub type enable_if_t = u8;
    pub type conditional_t = u8;
    pub type common_type_t = root::std::common_type;
    pub type underlying_type_t = root::std::underlying_type;
    pub type result_of_t = root::std::result_of;
    pub type __enable_if_t = u8;
    pub type __void_t = ::std::os::raw::c_void;
    pub type void_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __detector {
        pub _address: u8,
    }
    pub type __detector_value_t = root::std::false_type;
    pub type __detector_type<_Default> = _Default;
    pub type __detected_or = root::std::__detector;
    pub type __detected_or_t = root::std::__detected_or;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_tuple_like_impl {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_tuple_like {
        pub _address: u8,
    }
    pub mod __swappable_details {

        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_swappable_impl {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout___do_is_swappable_impl() {
        //     assert_eq!(
        //         ::std::mem::size_of::<__do_is_swappable_impl>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(__do_is_swappable_impl))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<__do_is_swappable_impl>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(__do_is_swappable_impl))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_nothrow_swappable_impl {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout___do_is_nothrow_swappable_impl() {
        //     assert_eq!(
        //         ::std::mem::size_of::<__do_is_nothrow_swappable_impl>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(__do_is_nothrow_swappable_impl))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<__do_is_nothrow_swappable_impl>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(__do_is_nothrow_swappable_impl))
        //     );
        // }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_swappable_impl {
        pub _address: u8,
    }
    pub type __is_swappable_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_swappable_impl {
        pub _address: u8,
    }
    pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_swappable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_swappable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_swappable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_swappable {
        pub _address: u8,
    }
    pub mod __swappable_with_details {

        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_swappable_with_impl {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout___do_is_swappable_with_impl() {
        //     assert_eq!(
        //         ::std::mem::size_of::<__do_is_swappable_with_impl>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(__do_is_swappable_with_impl))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<__do_is_swappable_with_impl>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(__do_is_swappable_with_impl))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_nothrow_swappable_with_impl {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout___do_is_nothrow_swappable_with_impl() {
        //     assert_eq!(
        //         ::std::mem::size_of::<__do_is_nothrow_swappable_with_impl>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(__do_is_nothrow_swappable_with_impl))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<__do_is_nothrow_swappable_with_impl>(),
        //         1usize,
        //         concat!(
        //             "Alignment of ",
        //             stringify!(__do_is_nothrow_swappable_with_impl)
        //         )
        //     );
        // }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_swappable_with_impl {
        pub _address: u8,
    }
    pub type __is_swappable_with_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_swappable_with_impl {
        pub _address: u8,
    }
    pub type __is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_swappable_with {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_swappable_with {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_invocable_impl {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_invocable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __call_is_nothrow {
        pub _address: u8,
    }
    pub type __call_is_nothrow_ = root::std::__call_is_nothrow;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_invocable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __nonesuch {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___nonesuch() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__nonesuch>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__nonesuch))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__nonesuch>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__nonesuch))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct invoke_result {
        pub _address: u8,
    }
    impl Default for invoke_result {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type invoke_result_t = root::std::invoke_result;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_invocable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_invocable_r {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_invocable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_invocable_impl {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_invocable_r {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct has_unique_object_representations {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_aggregate {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __move_if_noexcept_cond {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct piecewise_construct_t {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_piecewise_construct_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<piecewise_construct_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(piecewise_construct_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<piecewise_construct_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(piecewise_construct_t))
    //     );
    // }
    extern "C" {
        pub static piecewise_construct: root::std::piecewise_construct_t;
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __nonesuch_no_braces {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___nonesuch_no_braces() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__nonesuch_no_braces>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__nonesuch_no_braces))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__nonesuch_no_braces>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__nonesuch_no_braces))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pair_base {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pair<_T1, _T2> {
        pub first: _T1,
        pub second: _T2,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
    }
    pub type pair_first_type<_T1> = _T1;
    pub type pair_second_type<_T2> = _T2;
    pub type pair__PCCP = u8;
    pub type pair__PCCFP = u8;
    impl<_T1, _T2> Default for pair<_T1, _T2> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct input_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_input_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<input_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(input_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<input_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(input_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct output_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_output_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<output_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(output_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<output_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(output_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct forward_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_forward_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<forward_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(forward_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<forward_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(forward_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bidirectional_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_bidirectional_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bidirectional_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(bidirectional_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bidirectional_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(bidirectional_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct random_access_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_random_access_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<random_access_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(random_access_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<random_access_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(random_access_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct iterator {
        pub _address: u8,
    }
    pub type iterator_iterator_category<_Category> = _Category;
    pub type iterator_value_type<_Tp> = _Tp;
    pub type iterator_difference_type<_Distance> = _Distance;
    pub type iterator_pointer<_Pointer> = _Pointer;
    pub type iterator_reference<_Reference> = _Reference;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __iterator_traits {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct iterator_traits {
        pub _address: u8,
    }
    pub type _RequireInputIter = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __undefined {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __get_first_arg {
        pub _address: u8,
    }
    pub type __get_first_arg_type = root::std::__undefined;
    pub type __get_first_arg_t = root::std::__get_first_arg;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __replace_first_arg {
        pub _address: u8,
    }
    pub type __replace_first_arg_t = root::std::__replace_first_arg;
    pub type __make_not_void = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pointer_traits {
        pub _address: u8,
    }
    pub type pointer_traits___element_type = [u8; 0usize];
    pub type pointer_traits___difference_type = [u8; 0usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pointer_traits___rebind {
        pub _address: u8,
    }
    impl Default for pointer_traits___rebind {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type pointer_traits_pointer<_Ptr> = _Ptr;
    pub type pointer_traits_element_type = root::std::__detected_or_t;
    pub type pointer_traits_difference_type = root::std::__detected_or_t;
    pub type pointer_traits_rebind = root::std::pointer_traits___rebind;
    pub type __ptr_rebind = root::std::pointer_traits;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct reverse_iterator<_Iterator> {
        pub current: _Iterator,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    }
    pub type reverse_iterator___traits_type = root::std::iterator_traits;
    pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
    pub type reverse_iterator_difference_type = root::std::reverse_iterator___traits_type;
    pub type reverse_iterator_pointer = root::std::reverse_iterator___traits_type;
    pub type reverse_iterator_reference = root::std::reverse_iterator___traits_type;
    impl<_Iterator> Default for reverse_iterator<_Iterator> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct back_insert_iterator<_Container> {
        pub container: *mut _Container,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    }
    pub type back_insert_iterator_container_type<_Container> = _Container;
    impl<_Container> Default for back_insert_iterator<_Container> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct front_insert_iterator<_Container> {
        pub container: *mut _Container,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    }
    pub type front_insert_iterator_container_type<_Container> = _Container;
    impl<_Container> Default for front_insert_iterator<_Container> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct insert_iterator<_Container> {
        pub container: *mut _Container,
        pub iter: [u8; 0usize],
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    }
    pub type insert_iterator_container_type<_Container> = _Container;
    impl<_Container> Default for insert_iterator<_Container> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_Container> ::std::fmt::Debug for insert_iterator<_Container> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "insert_iterator {{ container: {:?} }}", self.container)
        }
    }
    impl<_Container> PartialEq for insert_iterator<_Container>
    where
        _Container: PartialEq,
    {
        fn eq(&self, other: &insert_iterator<_Container>) -> bool {
            self.container == other.container && self.iter == other.iter
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct move_iterator<_Iterator> {
        pub _M_current: _Iterator,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    }
    pub type move_iterator___traits_type = root::std::iterator_traits;
    pub type move_iterator___base_ref = root::std::move_iterator___traits_type;
    pub type move_iterator_iterator_type<_Iterator> = _Iterator;
    pub type move_iterator_iterator_category = root::std::move_iterator___traits_type;
    pub type move_iterator_value_type = root::std::move_iterator___traits_type;
    pub type move_iterator_difference_type = root::std::move_iterator___traits_type;
    pub type move_iterator_pointer<_Iterator> = _Iterator;
    pub type move_iterator_reference = u8;
    impl<_Iterator> Default for move_iterator<_Iterator> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __iter_key_t = root::std::remove_const_t;
    pub type __iter_val_t = root::std::iterator_traits;
    pub type __iter_to_alloc_t = root::std::pair<root::std::add_const_t, root::std::__iter_val_t>;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __lc_rai {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__lc_rai>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__lc_rai)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__lc_rai>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__lc_rai)
    //         )
    //     );
    // }
    #[repr(C)]
    pub struct exception__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct exception {
        pub vtable_: *const exception__bindgen_vtable,
    }
    // #[test]
    // fn bindgen_test_layout_exception() {
    //     assert_eq!(
    //         ::std::mem::size_of::<exception>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(exception))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<exception>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(exception))
    //     );
    // }
    impl Default for exception {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}exception_destructor"]
        pub fn exception_exception_destructor(this: *mut root::std::exception);
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_exception {
        pub _base: root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_exception() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_exception>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_exception))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_exception>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_exception))
    //     );
    // }
    impl Default for bad_exception {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_exception_destructor"]
        pub fn bad_exception_bad_exception_destructor(this: *mut root::std::bad_exception);
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_exception_what(
            this: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char;
    }
    pub type terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
    pub type unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
    extern "C" {
        pub fn set_terminate(arg1: root::std::terminate_handler) -> root::std::terminate_handler;
    }
    extern "C" {
        pub fn get_terminate() -> root::std::terminate_handler;
    }
    extern "C" {
        pub fn terminate();
    }
    extern "C" {
        pub fn set_unexpected(arg1: root::std::unexpected_handler)
            -> root::std::unexpected_handler;
    }
    extern "C" {
        pub fn get_unexpected() -> root::std::unexpected_handler;
    }
    extern "C" {
        pub fn unexpected();
    }
    extern "C" {
        pub fn uncaught_exception() -> bool;
    }
    extern "C" {
        pub fn uncaught_exceptions() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _Hash_bytes(
            __ptr: *const ::std::os::raw::c_void,
            __len: usize,
            __seed: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn _Fnv_hash_bytes(
            __ptr: *const ::std::os::raw::c_void,
            __len: usize,
            __seed: usize,
        ) -> usize;
    }
    #[repr(C)]
    pub struct type_info__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct type_info {
        pub vtable_: *const type_info__bindgen_vtable,
        pub __name: *const ::std::os::raw::c_char,
    }
    // #[test]
    // fn bindgen_test_layout_type_info() {
    //     assert_eq!(
    //         ::std::mem::size_of::<type_info>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(type_info))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<type_info>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(type_info))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<type_info>())).__name as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(type_info),
    //             "::",
    //             stringify!(__name)
    //         )
    //     );
    // }
    impl Default for type_info {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}type_info_destructor"]
        pub fn type_info_type_info_destructor(this: *mut root::std::type_info);
    }
    extern "C" {
        #[link_name = "\u{1}__is_pointer_p"]
        pub fn type_info___is_pointer_p(this: *mut ::std::os::raw::c_void) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__is_function_p"]
        pub fn type_info___is_function_p(this: *mut ::std::os::raw::c_void) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__do_catch"]
        pub fn type_info___do_catch(
            this: *mut ::std::os::raw::c_void,
            __thr_type: *const root::std::type_info,
            __thr_obj: *mut *mut ::std::os::raw::c_void,
            __outer: ::std::os::raw::c_uint,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__do_upcast"]
        pub fn type_info___do_upcast(
            this: *mut ::std::os::raw::c_void,
            __target: *const root::__cxxabiv1::__class_type_info,
            __obj_ptr: *mut *mut ::std::os::raw::c_void,
        ) -> bool;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_cast {
        pub _base: root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_cast() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_cast>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_cast))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_cast>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_cast))
    //     );
    // }
    impl Default for bad_cast {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_cast_destructor"]
        pub fn bad_cast_bad_cast_destructor(this: *mut root::std::bad_cast);
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_cast_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_typeid {
        pub _base: root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_typeid() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_typeid>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_typeid))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_typeid>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_typeid))
    //     );
    // }
    impl Default for bad_typeid {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_typeid_destructor"]
        pub fn bad_typeid_bad_typeid_destructor(this: *mut root::std::bad_typeid);
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_typeid_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
    }
    pub mod __exception_ptr {

        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct exception_ptr {
            pub _M_exception_object: *mut ::std::os::raw::c_void,
        }
        // #[test]
        // fn bindgen_test_layout_exception_ptr() {
        //     assert_eq!(
        //         ::std::mem::size_of::<exception_ptr>(),
        //         8usize,
        //         concat!("Size of: ", stringify!(exception_ptr))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<exception_ptr>(),
        //         8usize,
        //         concat!("Alignment of ", stringify!(exception_ptr))
        //     );
        //     assert_eq!(
        //         unsafe {
        //             &(*(::std::ptr::null::<exception_ptr>()))._M_exception_object as *const _
        //                 as usize
        //         },
        //         0usize,
        //         concat!(
        //             "Offset of field: ",
        //             stringify!(exception_ptr),
        //             "::",
        //             stringify!(_M_exception_object)
        //         )
        //     );
        // }
        extern "C" {
            #[link_name = "\u{1}swap"]
            pub fn exception_ptr_swap(
                this: *mut root::std::__exception_ptr::exception_ptr,
                arg1: *mut root::std::__exception_ptr::exception_ptr,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__cxa_exception_type"]
            pub fn exception_ptr___cxa_exception_type(
                this: *const root::std::__exception_ptr::exception_ptr,
            ) -> *const root::std::type_info;
        }
        extern "C" {
            #[link_name = "\u{1}exception_ptr"]
            pub fn exception_ptr_exception_ptr(
                this: *mut root::std::__exception_ptr::exception_ptr,
            );
        }
        extern "C" {
            #[link_name = "\u{1}exception_ptr"]
            pub fn exception_ptr_exception_ptr1(
                this: *mut root::std::__exception_ptr::exception_ptr,
                arg1: *const root::std::__exception_ptr::exception_ptr,
            );
        }
        extern "C" {
            #[link_name = "\u{1}exception_ptr_destructor"]
            pub fn exception_ptr_exception_ptr_destructor(
                this: *mut root::std::__exception_ptr::exception_ptr,
            );
        }
        impl Default for exception_ptr {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl exception_ptr {
            #[inline]
            pub unsafe fn swap(&mut self, arg1: *mut root::std::__exception_ptr::exception_ptr) {
                exception_ptr_swap(self, arg1)
            }
            #[inline]
            pub unsafe fn __cxa_exception_type(&self) -> *const root::std::type_info {
                exception_ptr___cxa_exception_type(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                exception_ptr_exception_ptr(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::__exception_ptr::exception_ptr) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                exception_ptr_exception_ptr1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                exception_ptr_exception_ptr_destructor(self)
            }
        }
    }
    extern "C" {
        pub fn current_exception() -> root::std::__exception_ptr::exception_ptr;
    }
    extern "C" {
        pub fn rethrow_exception(arg1: root::std::__exception_ptr::exception_ptr);
    }
    #[repr(C)]
    pub struct nested_exception__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct nested_exception {
        pub vtable_: *const nested_exception__bindgen_vtable,
        pub _M_ptr: root::std::__exception_ptr::exception_ptr,
    }
    // #[test]
    // fn bindgen_test_layout_nested_exception() {
    //     assert_eq!(
    //         ::std::mem::size_of::<nested_exception>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(nested_exception))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<nested_exception>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(nested_exception))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<nested_exception>()))._M_ptr as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(nested_exception),
    //             "::",
    //             stringify!(_M_ptr)
    //         )
    //     );
    // }
    impl Default for nested_exception {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}nested_exception_destructor"]
        pub fn nested_exception_nested_exception_destructor(this: *mut root::std::nested_exception);
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Nested_exception<_Except> {
        pub _base: _Except,
        pub _base_1: root::std::nested_exception,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
    }
    impl<_Except> Default for _Nested_exception<_Except> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __rethrow_if_nested_cond = u8;
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_alloc {
        pub _base: root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_alloc() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_alloc>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_alloc))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_alloc>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_alloc))
    //     );
    // }
    impl Default for bad_alloc {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_alloc_destructor"]
        pub fn bad_alloc_bad_alloc_destructor(this: *mut root::std::bad_alloc);
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_alloc_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_array_new_length {
        pub _base: root::std::bad_alloc,
    }
    // #[test]
    // fn bindgen_test_layout_bad_array_new_length() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_array_new_length>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_array_new_length))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_array_new_length>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_array_new_length))
    //     );
    // }
    impl Default for bad_array_new_length {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_array_new_length_destructor"]
        pub fn bad_array_new_length_bad_array_new_length_destructor(
            this: *mut root::std::bad_array_new_length,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_array_new_length_what(
            this: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char;
    }
    pub type align_val_t = u64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct nothrow_t {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_nothrow_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<nothrow_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(nothrow_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<nothrow_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(nothrow_t))
    //     );
    // }
    extern "C" {
        pub static nothrow: root::std::nothrow_t;
    }
    pub type new_handler = ::std::option::Option<unsafe extern "C" fn()>;
    extern "C" {
        pub fn set_new_handler(arg1: root::std::new_handler) -> root::std::new_handler;
    }
    extern "C" {
        pub fn get_new_handler() -> root::std::new_handler;
    }
    pub type __allocator_base = root::__gnu_cxx::new_allocator;
    // #[test]
    // fn __bindgen_test_layout_allocator_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator {
        pub _address: u8,
    }
    pub type allocator_size_type = usize;
    pub type allocator_difference_type = isize;
    pub type allocator_pointer<_Tp> = *mut _Tp;
    pub type allocator_const_pointer<_Tp> = *const _Tp;
    pub type allocator_reference<_Tp> = *mut _Tp;
    pub type allocator_const_reference<_Tp> = *const _Tp;
    pub type allocator_value_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_rebind {
        pub _address: u8,
    }
    pub type allocator_rebind_other = root::std::allocator;
    pub type allocator_propagate_on_container_move_assignment = root::std::true_type;
    pub type allocator_is_always_equal = root::std::true_type;
    impl Default for allocator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct unary_function {
        pub _address: u8,
    }
    pub type unary_function_argument_type<_Arg> = _Arg;
    pub type unary_function_result_type<_Result> = _Result;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct binary_function {
        pub _address: u8,
    }
    pub type binary_function_first_argument_type<_Arg1> = _Arg1;
    pub type binary_function_second_argument_type<_Arg2> = _Arg2;
    pub type binary_function_result_type<_Result> = _Result;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __is_transparent {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct plus {
        pub _address: u8,
    }
    impl Default for plus {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct minus {
        pub _address: u8,
    }
    impl Default for minus {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct multiplies {
        pub _address: u8,
    }
    impl Default for multiplies {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct divides {
        pub _address: u8,
    }
    impl Default for divides {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct modulus {
        pub _address: u8,
    }
    impl Default for modulus {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct negate {
        pub _address: u8,
    }
    impl Default for negate {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_plus_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::plus>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::plus)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::plus>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::plus)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_minus_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::minus>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::minus)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::minus>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::minus)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_multiplies_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::multiplies>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::multiplies)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::multiplies>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::multiplies)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_divides_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::divides>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::divides)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::divides>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::divides)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_modulus_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::modulus>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::modulus)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::modulus>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::modulus)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_negate_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::negate>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::negate)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::negate>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::negate)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct equal_to {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct not_equal_to {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct greater {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct less {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct greater_equal {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct less_equal {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout_equal_to_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::equal_to>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::equal_to)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::equal_to>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::equal_to)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_not_equal_to_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::not_equal_to>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::not_equal_to)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::not_equal_to>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::not_equal_to)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_greater_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::greater>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::greater)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::greater>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::greater)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_less_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::less>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::less)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::less>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::less)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_greater_equal_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::greater_equal>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::greater_equal)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::greater_equal>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::greater_equal)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_less_equal_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::less_equal>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::less_equal)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::less_equal>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::less_equal)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct logical_and {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct logical_or {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct logical_not {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout_logical_and_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::logical_and>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::logical_and)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::logical_and>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::logical_and)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_logical_or_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::logical_or>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::logical_or)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::logical_or>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::logical_or)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_logical_not_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::logical_not>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::logical_not)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::logical_not>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::logical_not)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bit_and {
        pub _address: u8,
    }
    impl Default for bit_and {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bit_or {
        pub _address: u8,
    }
    impl Default for bit_or {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bit_xor {
        pub _address: u8,
    }
    impl Default for bit_xor {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bit_not {
        pub _address: u8,
    }
    impl Default for bit_not {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_bit_and_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::bit_and>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::bit_and)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::bit_and>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::bit_and)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_bit_or_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::bit_or>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::bit_or)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::bit_or>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::bit_or)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_bit_xor_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::bit_xor>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::bit_xor)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::bit_xor>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::bit_xor)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_bit_not_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::bit_not>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::bit_not)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::bit_not>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::bit_not)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct unary_negate<_Predicate> {
        pub _M_pred: _Predicate,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    }
    impl<_Predicate> Default for unary_negate<_Predicate> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct binary_negate<_Predicate> {
        pub _M_pred: _Predicate,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    }
    impl<_Predicate> Default for binary_negate<_Predicate> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pointer_to_unary_function<_Arg, _Result> {
        pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    }
    impl<_Arg, _Result> Default for pointer_to_unary_function<_Arg, _Result> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
        pub _M_ptr:
            ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
        pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    }
    impl<_Arg1, _Arg2, _Result> Default for pointer_to_binary_function<_Arg1, _Arg2, _Result> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Identity {
        pub _address: u8,
    }
    impl Default for _Identity {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Select1st {
        pub _address: u8,
    }
    impl Default for _Select1st {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Select2nd {
        pub _address: u8,
    }
    impl Default for _Select2nd {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mem_fun_t<_Ret> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    }
    impl<_Ret> Default for mem_fun_t<_Ret> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct const_mem_fun_t<_Ret> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    }
    impl<_Ret> Default for const_mem_fun_t<_Ret> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mem_fun_ref_t<_Ret> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    }
    impl<_Ret> Default for mem_fun_ref_t<_Ret> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct const_mem_fun_ref_t<_Ret> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    }
    impl<_Ret> Default for const_mem_fun_ref_t<_Ret> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mem_fun1_t<_Ret, _Arg> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    }
    impl<_Ret, _Arg> Default for mem_fun1_t<_Ret, _Arg> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct const_mem_fun1_t<_Ret, _Arg> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    }
    impl<_Ret, _Arg> Default for const_mem_fun1_t<_Ret, _Arg> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mem_fun1_ref_t<_Ret, _Arg> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    }
    impl<_Ret, _Arg> Default for mem_fun1_ref_t<_Ret, _Arg> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    }
    impl<_Ret, _Arg> Default for const_mem_fun1_ref_t<_Ret, _Arg> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct binder1st<_Operation> {
        pub op: _Operation,
        pub value: [u8; 0usize],
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    }
    impl<_Operation> Default for binder1st<_Operation> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_Operation> ::std::fmt::Debug for binder1st<_Operation> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "binder1st {{ op: Non-debuggable generic }}")
        }
    }
    impl<_Operation> PartialEq for binder1st<_Operation>
    where
        _Operation: PartialEq,
    {
        fn eq(&self, other: &binder1st<_Operation>) -> bool {
            self.op == other.op && self.value == other.value
        }
    }
    #[repr(C)]
    pub struct binder2nd<_Operation> {
        pub op: _Operation,
        pub value: [u8; 0usize],
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    }
    impl<_Operation> Default for binder2nd<_Operation> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_Operation> ::std::fmt::Debug for binder2nd<_Operation> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "binder2nd {{ op: Non-debuggable generic }}")
        }
    }
    impl<_Operation> PartialEq for binder2nd<_Operation>
    where
        _Operation: PartialEq,
    {
        fn eq(&self, other: &binder2nd<_Operation>) -> bool {
            self.op == other.op && self.value == other.value
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __allocator_traits_base {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __allocator_traits_base___rebind {
        pub _address: u8,
    }
    impl Default for __allocator_traits_base___rebind {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __allocator_traits_base___pointer = [u8; 0usize];
    pub type __allocator_traits_base___c_pointer = [u8; 0usize];
    pub type __allocator_traits_base___v_pointer = [u8; 0usize];
    pub type __allocator_traits_base___cv_pointer = [u8; 0usize];
    pub type __allocator_traits_base___pocca = [u8; 0usize];
    pub type __allocator_traits_base___pocma = [u8; 0usize];
    pub type __allocator_traits_base___pocs = [u8; 0usize];
    pub type __allocator_traits_base___equal = [u8; 0usize];
    // #[test]
    // fn bindgen_test_layout___allocator_traits_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__allocator_traits_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__allocator_traits_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__allocator_traits_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__allocator_traits_base))
    //     );
    // }
    pub type __alloc_rebind = root::std::__allocator_traits_base;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits {
        pub _address: u8,
    }
    pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
    pub type allocator_traits_value_type = [u8; 0usize];
    pub type allocator_traits_pointer = root::std::__detected_or_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits__Ptr {
        pub _address: u8,
    }
    pub type allocator_traits__Ptr_type = [u8; 0usize];
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits__Diff {
        pub _address: u8,
    }
    pub type allocator_traits__Diff_type = root::std::pointer_traits;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits__Size {
        pub _address: u8,
    }
    impl Default for allocator_traits__Size {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type allocator_traits_const_pointer = [u8; 0usize];
    pub type allocator_traits_void_pointer = root::std::allocator_traits__Ptr;
    pub type allocator_traits_const_void_pointer = root::std::allocator_traits__Ptr;
    pub type allocator_traits_difference_type = [u8; 0usize];
    pub type allocator_traits_size_type = [u8; 0usize];
    pub type allocator_traits_propagate_on_container_copy_assignment = root::std::__detected_or_t;
    pub type allocator_traits_propagate_on_container_move_assignment = root::std::__detected_or_t;
    pub type allocator_traits_propagate_on_container_swap = root::std::__detected_or_t;
    pub type allocator_traits_is_always_equal = root::std::__detected_or_t;
    pub type allocator_traits_rebind_alloc = root::std::__alloc_rebind;
    pub type allocator_traits_rebind_traits = root::std::allocator_traits;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits___construct_helper {
        pub _address: u8,
    }
    pub type allocator_traits___construct_helper_type<_Alloc> = _Alloc;
    pub type allocator_traits___has_construct = root::std::allocator_traits___construct_helper;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_copy_insertable_impl {
        pub _address: u8,
    }
    pub type __is_copy_insertable_impl__Traits = root::std::allocator_traits;
    pub type __is_copy_insertable_impl_type<_Alloc> = _Alloc;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_copy_insertable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_allocator {
        pub _base: root::std::false_type,
    }
    pub type _RequireAllocator = u8;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct initializer_list<_E> {
        pub _M_array: root::std::initializer_list_iterator<_E>,
        pub _M_len: root::std::initializer_list_size_type,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
    }
    pub type initializer_list_value_type<_E> = _E;
    pub type initializer_list_reference<_E> = *const _E;
    pub type initializer_list_const_reference<_E> = *const _E;
    pub type initializer_list_size_type = usize;
    pub type initializer_list_iterator<_E> = *const _E;
    pub type initializer_list_const_iterator<_E> = *const _E;
    impl<_E> Default for initializer_list<_E> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct tuple_size {
        pub _address: u8,
    }
    pub type __enable_if_has_tuple_size<_Tp> = _Tp;
    pub type __tuple_element_t = u8;
    pub type tuple_element_t = u8;
    pub type _Build_index_tuple__IdxTuple = u8;
    pub type _Build_index_tuple___type = u8;
    pub type integer_sequence_value_type<_Tp> = _Tp;
    pub type make_integer_sequence = u8;
    pub type index_sequence = u8;
    pub type make_index_sequence = root::std::make_integer_sequence;
    pub type index_sequence_for = root::std::make_index_sequence;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_place_t {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_in_place_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<in_place_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(in_place_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<in_place_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(in_place_t))
    //     );
    // }
    extern "C" {
        pub static in_place: root::std::in_place_t;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_place_type_t {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_in_place_type_impl {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_in_place_type {
        pub _base: root::std::__is_in_place_type_impl,
    }
    impl Default for __is_in_place_type {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type streamoff = ::std::os::raw::c_long;
    pub type streamsize = isize;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct fpos<_StateT> {
        pub _M_off: root::std::streamoff,
        pub _M_state: _StateT,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
    }
    impl<_StateT> Default for fpos<_StateT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type streampos = root::std::fpos<root::mbstate_t>;
    pub type wstreampos = root::std::fpos<root::mbstate_t>;
    pub type u16streampos = root::std::fpos<root::mbstate_t>;
    pub type u32streampos = root::std::fpos<root::mbstate_t>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct char_traits {
        pub _address: u8,
    }
    impl Default for char_traits {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    pub type __c_locale = root::__locale_t;
    pub type ios = root::std::basic_ios<::std::os::raw::c_char>;
    pub type streambuf = root::std::basic_streambuf<::std::os::raw::c_char>;
    pub type istream = root::std::basic_istream<::std::os::raw::c_char>;
    pub type ostream = root::std::basic_ostream<::std::os::raw::c_char>;
    pub type iostream = root::std::basic_iostream<::std::os::raw::c_char>;
    pub type stringbuf = root::std::__cxx11::basic_stringbuf<::std::os::raw::c_char>;
    pub type istringstream = root::std::__cxx11::basic_istringstream<::std::os::raw::c_char>;
    pub type ostringstream = root::std::__cxx11::basic_ostringstream<::std::os::raw::c_char>;
    pub type stringstream = root::std::__cxx11::basic_stringstream<::std::os::raw::c_char>;
    pub type filebuf = root::std::basic_filebuf<::std::os::raw::c_char>;
    pub type ifstream = root::std::basic_ifstream<::std::os::raw::c_char>;
    pub type ofstream = root::std::basic_ofstream<::std::os::raw::c_char>;
    pub type fstream = root::std::basic_fstream<::std::os::raw::c_char>;
    pub type wios = root::std::basic_ios<u32>;
    pub type wstreambuf = root::std::basic_streambuf<u32>;
    pub type wistream = root::std::basic_istream<u32>;
    pub type wostream = root::std::basic_ostream<u32>;
    pub type wiostream = root::std::basic_iostream<u32>;
    pub type wstringbuf = root::std::__cxx11::basic_stringbuf<u32>;
    pub type wistringstream = root::std::__cxx11::basic_istringstream<u32>;
    pub type wostringstream = root::std::__cxx11::basic_ostringstream<u32>;
    pub type wstringstream = root::std::__cxx11::basic_stringstream<u32>;
    pub type wfilebuf = root::std::basic_filebuf<u32>;
    pub type wifstream = root::std::basic_ifstream<u32>;
    pub type wofstream = root::std::basic_ofstream<u32>;
    pub type wfstream = root::std::basic_fstream<u32>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct time_base {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct time_put {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct time_put_byname {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct money_base {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct messages_base {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct valarray {
        pub _address: u8,
    }
    pub const float_round_style_round_indeterminate: root::std::float_round_style = -1;
    pub const float_round_style_round_toward_zero: root::std::float_round_style = 0;
    pub const float_round_style_round_to_nearest: root::std::float_round_style = 1;
    pub const float_round_style_round_toward_infinity: root::std::float_round_style = 2;
    pub const float_round_style_round_toward_neg_infinity: root::std::float_round_style = 3;
    pub type float_round_style = i32;
    pub const float_denorm_style_denorm_indeterminate: root::std::float_denorm_style = -1;
    pub const float_denorm_style_denorm_absent: root::std::float_denorm_style = 0;
    pub const float_denorm_style_denorm_present: root::std::float_denorm_style = 1;
    pub type float_denorm_style = i32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __numeric_limits_base {
        pub _address: u8,
    }
    pub const __numeric_limits_base_is_specialized: bool = false;
    pub const __numeric_limits_base_digits: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_digits10: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_max_digits10: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_is_signed: bool = false;
    pub const __numeric_limits_base_is_integer: bool = false;
    pub const __numeric_limits_base_is_exact: bool = false;
    pub const __numeric_limits_base_radix: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_min_exponent: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_min_exponent10: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_max_exponent: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_max_exponent10: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_has_infinity: bool = false;
    pub const __numeric_limits_base_has_quiet_NaN: bool = false;
    pub const __numeric_limits_base_has_signaling_NaN: bool = false;
    extern "C" {
        #[link_name = "\u{1}has_denorm"]
        pub static __numeric_limits_base_has_denorm: root::std::float_denorm_style;
    }
    pub const __numeric_limits_base_has_denorm_loss: bool = false;
    pub const __numeric_limits_base_is_iec559: bool = false;
    pub const __numeric_limits_base_is_bounded: bool = false;
    pub const __numeric_limits_base_is_modulo: bool = false;
    pub const __numeric_limits_base_traps: bool = false;
    pub const __numeric_limits_base_tinyness_before: bool = false;
    extern "C" {
        #[link_name = "\u{1}round_style"]
        pub static __numeric_limits_base_round_style: root::std::float_round_style;
    }
    // #[test]
    // fn bindgen_test_layout___numeric_limits_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__numeric_limits_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__numeric_limits_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__numeric_limits_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__numeric_limits_base))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct numeric_limits {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_bool__close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_float_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_long_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __hash_base {
        pub _address: u8,
    }
    pub type __hash_base_result_type<_Result> = _Result;
    pub type __hash_base_argument_type<_Arg> = _Arg;
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __poison_hash {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct hash {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_bool__close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Hash_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout__Hash_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Hash_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(_Hash_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Hash_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(_Hash_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Fnv_hash_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout__Fnv_hash_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Fnv_hash_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(_Fnv_hash_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Fnv_hash_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(_Fnv_hash_impl))
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_float_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_fast_hash {
        pub _base: root::std::true_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_long_double_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_string_view<_CharT> {
        pub _M_len: usize,
        pub _M_str: *const _CharT,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_string_view_traits_type<_Traits> = _Traits;
    pub type basic_string_view_value_type<_CharT> = _CharT;
    pub type basic_string_view_pointer<_CharT> = *const _CharT;
    pub type basic_string_view_const_pointer<_CharT> = *const _CharT;
    pub type basic_string_view_reference<_CharT> = *const _CharT;
    pub type basic_string_view_const_reference<_CharT> = *const _CharT;
    pub type basic_string_view_const_iterator<_CharT> = *const _CharT;
    pub type basic_string_view_iterator<_CharT> =
        root::std::basic_string_view_const_iterator<_CharT>;
    pub type basic_string_view_const_reverse_iterator<_CharT> =
        root::std::reverse_iterator<root::std::basic_string_view_const_iterator<_CharT>>;
    pub type basic_string_view_reverse_iterator<_CharT> =
        root::std::basic_string_view_const_reverse_iterator<_CharT>;
    pub type basic_string_view_size_type = usize;
    pub type basic_string_view_difference_type = isize;
    impl<_CharT> Default for basic_string_view<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub mod __detail {

        pub type __idt = root::std::common_type_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _List_node_base {
            pub _M_next: *mut root::std::__detail::_List_node_base,
            pub _M_prev: *mut root::std::__detail::_List_node_base,
        }
        // #[test]
        // fn bindgen_test_layout__List_node_base() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_List_node_base>(),
        //         16usize,
        //         concat!("Size of: ", stringify!(_List_node_base))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_List_node_base>(),
        //         8usize,
        //         concat!("Alignment of ", stringify!(_List_node_base))
        //     );
        //     assert_eq!(
        //         unsafe {
        //             &(*(::std::ptr::null::<_List_node_base>()))._M_next as *const _ as usize
        //         },
        //         0usize,
        //         concat!(
        //             "Offset of field: ",
        //             stringify!(_List_node_base),
        //             "::",
        //             stringify!(_M_next)
        //         )
        //     );
        //     assert_eq!(
        //         unsafe {
        //             &(*(::std::ptr::null::<_List_node_base>()))._M_prev as *const _ as usize
        //         },
        //         8usize,
        //         concat!(
        //             "Offset of field: ",
        //             stringify!(_List_node_base),
        //             "::",
        //             stringify!(_M_prev)
        //         )
        //     );
        // }
        extern "C" {
            #[link_name = "\u{1}swap"]
            pub fn _List_node_base_swap(
                __x: *mut root::std::__detail::_List_node_base,
                __y: *mut root::std::__detail::_List_node_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_M_transfer"]
            pub fn _List_node_base__M_transfer(
                this: *mut root::std::__detail::_List_node_base,
                __first: *mut root::std::__detail::_List_node_base,
                __last: *mut root::std::__detail::_List_node_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_M_reverse"]
            pub fn _List_node_base__M_reverse(this: *mut root::std::__detail::_List_node_base);
        }
        extern "C" {
            #[link_name = "\u{1}_M_hook"]
            pub fn _List_node_base__M_hook(
                this: *mut root::std::__detail::_List_node_base,
                __position: *mut root::std::__detail::_List_node_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_M_unhook"]
            pub fn _List_node_base__M_unhook(this: *mut root::std::__detail::_List_node_base);
        }
        impl Default for _List_node_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl _List_node_base {
            #[inline]
            pub unsafe fn swap(
                __x: *mut root::std::__detail::_List_node_base,
                __y: *mut root::std::__detail::_List_node_base,
            ) {
                _List_node_base_swap(__x, __y)
            }
            #[inline]
            pub unsafe fn _M_transfer(
                &mut self,
                __first: *mut root::std::__detail::_List_node_base,
                __last: *mut root::std::__detail::_List_node_base,
            ) {
                _List_node_base__M_transfer(self, __first, __last)
            }
            #[inline]
            pub unsafe fn _M_reverse(&mut self) {
                _List_node_base__M_reverse(self)
            }
            #[inline]
            pub unsafe fn _M_hook(
                &mut self,
                __position: *mut root::std::__detail::_List_node_base,
            ) {
                _List_node_base__M_hook(self, __position)
            }
            #[inline]
            pub unsafe fn _M_unhook(&mut self) {
                _List_node_base__M_unhook(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _List_node_header {
            pub _base: root::std::__detail::_List_node_base,
            pub _M_size: usize,
        }
        // #[test]
        // fn bindgen_test_layout__List_node_header() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_List_node_header>(),
        //         24usize,
        //         concat!("Size of: ", stringify!(_List_node_header))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_List_node_header>(),
        //         8usize,
        //         concat!("Alignment of ", stringify!(_List_node_header))
        //     );
        //     assert_eq!(
        //         unsafe {
        //             &(*(::std::ptr::null::<_List_node_header>()))._M_size as *const _ as usize
        //         },
        //         16usize,
        //         concat!(
        //             "Offset of field: ",
        //             stringify!(_List_node_header),
        //             "::",
        //             stringify!(_M_size)
        //         )
        //     );
        // }
        impl Default for _List_node_header {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
    }
    pub type string_view = root::std::basic_string_view<::std::os::raw::c_char>;
    pub type wstring_view = root::std::basic_string_view<u32>;
    pub type u16string_view = root::std::basic_string_view<u16>;
    pub type u32string_view = root::std::basic_string_view<u32>;
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char_char_traits_open3_char_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_view_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_wchar_t_char_traits_open3_wchar_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char16_t_char_traits_open2_char16_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char16_t_char_traits_open3_char16_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char32_t_char_traits_open2_char32_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char32_t_char_traits_open3_char32_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    pub mod literals {}
    extern "C" {
        pub fn getline(
            __in: *mut root::std::basic_istream<::std::os::raw::c_char>,
            __str: *mut root::std::__cxx11::basic_string<::std::os::raw::c_char>,
            __delim: ::std::os::raw::c_char,
        ) -> *mut root::std::basic_istream<::std::os::raw::c_char>;
    }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_wchar_t_char_traits_open3_wchar_t_close3_allocator_open3_wchar_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char16_t_char_traits_open3_char16_t_close3_allocator_open3_char16_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char32_t_char_traits_open3_char32_t_close3_allocator_open3_char32_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    extern "C" {
        pub static npos: root::std::__cxx11::basic_string_size_type;
    }

    #[repr(C)]
    pub struct __cow_string {
        pub __bindgen_anon_1: root::std::__cow_string__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __cow_string__bindgen_ty_1 {
        pub _M_p: *const ::std::os::raw::c_char,
        pub _M_bytes: [::std::os::raw::c_char; 8usize],
        _bindgen_union_align: u64,
    }
    // #[test]
    // fn bindgen_test_layout___cow_string__bindgen_ty_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__cow_string__bindgen_ty_1>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(__cow_string__bindgen_ty_1))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__cow_string__bindgen_ty_1>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(__cow_string__bindgen_ty_1))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_p as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(__cow_string__bindgen_ty_1),
    //             "::",
    //             stringify!(_M_p)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_bytes as *const _
    //                 as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(__cow_string__bindgen_ty_1),
    //             "::",
    //             stringify!(_M_bytes)
    //         )
    //     );
    // }
    impl Default for __cow_string__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __cow_string__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__cow_string__bindgen_ty_1 {{ union }}")
        }
    }
    // #[test]
    // fn bindgen_test_layout___cow_string() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__cow_string>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(__cow_string))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__cow_string>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(__cow_string))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string(this: *mut root::std::__cow_string);
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string1(
            this: *mut root::std::__cow_string,
            arg1: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string2(
            this: *mut root::std::__cow_string,
            arg1: *const ::std::os::raw::c_char,
            arg2: usize,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string3(
            this: *mut root::std::__cow_string,
            arg1: *const root::std::__cow_string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string4(
            this: *mut root::std::__cow_string,
            arg1: *mut root::std::__cow_string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string_destructor"]
        pub fn __cow_string___cow_string_destructor(this: *mut root::std::__cow_string);
    }
    impl Default for __cow_string {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __cow_string {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "__cow_string {{ __bindgen_anon_1: {:?} }}",
                self.__bindgen_anon_1
            )
        }
    }
    impl __cow_string {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: usize) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string2(&mut __bindgen_tmp, arg1, arg2);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(arg1: *const root::std::__cow_string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string3(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(arg1: *mut root::std::__cow_string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string4(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            __cow_string___cow_string_destructor(self)
        }
    }
    pub type __sso_string = root::std::__cxx11::basic_string<::std::os::raw::c_char>;
    #[repr(C)]
    pub struct logic_error {
        pub _base: root::std::exception,
        pub _M_msg: root::std::__cow_string,
    }
    // #[test]
    // fn bindgen_test_layout_logic_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<logic_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(logic_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<logic_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(logic_error))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<logic_error>()))._M_msg as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(logic_error),
    //             "::",
    //             stringify!(_M_msg)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}logic_error"]
        pub fn logic_error_logic_error(
            this: *mut root::std::logic_error,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}logic_error"]
        pub fn logic_error_logic_error1(
            this: *mut root::std::logic_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}logic_error"]
        pub fn logic_error_logic_error2(
            this: *mut root::std::logic_error,
            arg1: *const root::std::logic_error,
        );
    }
    impl Default for logic_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for logic_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "logic_error {{ _M_msg: {:?} }}", self._M_msg)
        }
    }
    impl logic_error {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            logic_error_logic_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            logic_error_logic_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(arg1: *const root::std::logic_error) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            logic_error_logic_error2(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}logic_error_destructor"]
        pub fn logic_error_logic_error_destructor(this: *mut root::std::logic_error);
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn logic_error_what(this: *mut ::std::os::raw::c_void)
            -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    pub struct domain_error {
        pub _base: root::std::logic_error,
    }
    // #[test]
    // fn bindgen_test_layout_domain_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<domain_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(domain_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<domain_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(domain_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}domain_error"]
        pub fn domain_error_domain_error(
            this: *mut root::std::domain_error,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}domain_error"]
        pub fn domain_error_domain_error1(
            this: *mut root::std::domain_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for domain_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for domain_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "domain_error {{  }}")
        }
    }
    impl domain_error {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            domain_error_domain_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            domain_error_domain_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}domain_error_destructor"]
        pub fn domain_error_domain_error_destructor(this: *mut root::std::domain_error);
    }
    #[repr(C)]
    pub struct invalid_argument {
        pub _base: root::std::logic_error,
    }
    // #[test]
    // fn bindgen_test_layout_invalid_argument() {
    //     assert_eq!(
    //         ::std::mem::size_of::<invalid_argument>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(invalid_argument))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<invalid_argument>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(invalid_argument))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}invalid_argument"]
        pub fn invalid_argument_invalid_argument(
            this: *mut root::std::invalid_argument,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}invalid_argument"]
        pub fn invalid_argument_invalid_argument1(
            this: *mut root::std::invalid_argument,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for invalid_argument {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for invalid_argument {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "invalid_argument {{  }}")
        }
    }
    impl invalid_argument {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            invalid_argument_invalid_argument(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            invalid_argument_invalid_argument1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}invalid_argument_destructor"]
        pub fn invalid_argument_invalid_argument_destructor(this: *mut root::std::invalid_argument);
    }
    #[repr(C)]
    pub struct length_error {
        pub _base: root::std::logic_error,
    }
    // #[test]
    // fn bindgen_test_layout_length_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<length_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(length_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<length_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(length_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}length_error"]
        pub fn length_error_length_error(
            this: *mut root::std::length_error,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}length_error"]
        pub fn length_error_length_error1(
            this: *mut root::std::length_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for length_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for length_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "length_error {{  }}")
        }
    }
    impl length_error {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            length_error_length_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            length_error_length_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}length_error_destructor"]
        pub fn length_error_length_error_destructor(this: *mut root::std::length_error);
    }
    #[repr(C)]
    pub struct out_of_range {
        pub _base: root::std::logic_error,
    }
    // #[test]
    // fn bindgen_test_layout_out_of_range() {
    //     assert_eq!(
    //         ::std::mem::size_of::<out_of_range>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(out_of_range))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<out_of_range>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(out_of_range))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}out_of_range"]
        pub fn out_of_range_out_of_range(
            this: *mut root::std::out_of_range,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}out_of_range"]
        pub fn out_of_range_out_of_range1(
            this: *mut root::std::out_of_range,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for out_of_range {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for out_of_range {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "out_of_range {{  }}")
        }
    }
    impl out_of_range {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            out_of_range_out_of_range(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            out_of_range_out_of_range1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}out_of_range_destructor"]
        pub fn out_of_range_out_of_range_destructor(this: *mut root::std::out_of_range);
    }
    #[repr(C)]
    pub struct runtime_error {
        pub _base: root::std::exception,
        pub _M_msg: root::std::__cow_string,
    }
    // #[test]
    // fn bindgen_test_layout_runtime_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<runtime_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(runtime_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<runtime_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(runtime_error))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<runtime_error>()))._M_msg as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(runtime_error),
    //             "::",
    //             stringify!(_M_msg)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}runtime_error"]
        pub fn runtime_error_runtime_error(
            this: *mut root::std::runtime_error,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}runtime_error"]
        pub fn runtime_error_runtime_error1(
            this: *mut root::std::runtime_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}runtime_error"]
        pub fn runtime_error_runtime_error2(
            this: *mut root::std::runtime_error,
            arg1: *const root::std::runtime_error,
        );
    }
    impl Default for runtime_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for runtime_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "runtime_error {{ _M_msg: {:?} }}", self._M_msg)
        }
    }
    impl runtime_error {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            runtime_error_runtime_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            runtime_error_runtime_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(arg1: *const root::std::runtime_error) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            runtime_error_runtime_error2(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}runtime_error_destructor"]
        pub fn runtime_error_runtime_error_destructor(this: *mut root::std::runtime_error);
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn runtime_error_what(
            this: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    pub struct range_error {
        pub _base: root::std::runtime_error,
    }
    // #[test]
    // fn bindgen_test_layout_range_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<range_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(range_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<range_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(range_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}range_error"]
        pub fn range_error_range_error(
            this: *mut root::std::range_error,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}range_error"]
        pub fn range_error_range_error1(
            this: *mut root::std::range_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for range_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for range_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "range_error {{  }}")
        }
    }
    impl range_error {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            range_error_range_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            range_error_range_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}range_error_destructor"]
        pub fn range_error_range_error_destructor(this: *mut root::std::range_error);
    }
    #[repr(C)]
    pub struct overflow_error {
        pub _base: root::std::runtime_error,
    }
    // #[test]
    // fn bindgen_test_layout_overflow_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<overflow_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(overflow_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<overflow_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(overflow_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}overflow_error"]
        pub fn overflow_error_overflow_error(
            this: *mut root::std::overflow_error,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}overflow_error"]
        pub fn overflow_error_overflow_error1(
            this: *mut root::std::overflow_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for overflow_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for overflow_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "overflow_error {{  }}")
        }
    }
    impl overflow_error {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            overflow_error_overflow_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            overflow_error_overflow_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}overflow_error_destructor"]
        pub fn overflow_error_overflow_error_destructor(this: *mut root::std::overflow_error);
    }
    #[repr(C)]
    pub struct underflow_error {
        pub _base: root::std::runtime_error,
    }
    // #[test]
    // fn bindgen_test_layout_underflow_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<underflow_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(underflow_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<underflow_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(underflow_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}underflow_error"]
        pub fn underflow_error_underflow_error(
            this: *mut root::std::underflow_error,
            __arg: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}underflow_error"]
        pub fn underflow_error_underflow_error1(
            this: *mut root::std::underflow_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for underflow_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for underflow_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "underflow_error {{  }}")
        }
    }
    impl underflow_error {
        #[inline]
        pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            underflow_error_underflow_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            underflow_error_underflow_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}underflow_error_destructor"]
        pub fn underflow_error_underflow_error_destructor(this: *mut root::std::underflow_error);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Enable_default_constructor_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout__Enable_default_constructor_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Enable_default_constructor_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(_Enable_default_constructor_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Enable_default_constructor_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(_Enable_default_constructor_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct nullopt_t {
        pub _address: u8,
    }
    pub const nullopt_t__Construct__Token: root::std::nullopt_t__Construct = 0;
    pub type nullopt_t__Construct = i32;
    // #[test]
    // fn bindgen_test_layout_nullopt_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<nullopt_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(nullopt_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<nullopt_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(nullopt_t))
    //     );
    // }
    extern "C" {
        pub static nullopt: root::std::nullopt_t;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_optional_access {
        pub _base: root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_optional_access() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_optional_access>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_optional_access))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_optional_access>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_optional_access))
    //     );
    // }
    impl Default for bad_optional_access {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn __throw_bad_optional_access();
    }
    pub type _Optional_payload__Stored_type = root::std::remove_const_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Optional_payload__Empty_byte {
        pub _address: u8,
    }
    #[repr(C)]
    pub union _Optional_payload__bindgen_ty_1 {
        pub _M_empty: root::std::_Optional_payload__Empty_byte,
        pub _M_payload: root::std::_Optional_payload__Stored_type,
        _bindgen_union_align: [u8; 0usize],
    }
    impl Default for _Optional_payload__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Optional_payload__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Optional_payload__bindgen_ty_1 {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Optional_base_impl {
        pub _address: u8,
    }
    pub type _Optional_base_impl__Stored_type = root::std::remove_const_t;
    pub type __converts_from_optional = root::std::__or_;
    pub type __assigns_from_optional = root::std::__or_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct optional {
        pub _address: u8,
    }
    pub type optional__Base = u8;
    pub type optional_value_type<_Tp> = _Tp;
    pub type __optional_relop_t = root::std::enable_if_t;
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Node_handle_common {
        pub _M_ptr: root::std::_Node_handle_common__AllocTraits,
        pub _M_alloc: root::std::optional,
    }
    pub type _Node_handle_common__AllocTraits = root::std::allocator_traits;
    pub type _Node_handle_common_allocator_type = root::std::__alloc_rebind;
    impl Default for _Node_handle_common {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Node_handle {
        pub _base: root::std::_Node_handle_common,
        pub _M_pkey: root::std::_Node_handle___pointer,
        pub _M_pmapped: root::std::_Node_handle___pointer,
    }
    pub type _Node_handle_key_type<_Key> = _Key;
    pub type _Node_handle_mapped_type = [u8; 0usize];
    pub type _Node_handle__AllocTraits = root::std::allocator_traits;
    pub type _Node_handle___pointer = root::std::__ptr_rebind;
    impl Default for _Node_handle {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Node_insert_return<_Iterator, _NodeHandle> {
        pub position: _Iterator,
        pub inserted: bool,
        pub node: _NodeHandle,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeHandle>>,
    }
    impl<_Iterator, _NodeHandle> Default for _Node_insert_return<_Iterator, _NodeHandle> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const _Rb_tree_color__S_red: root::std::_Rb_tree_color = 0;
    pub const _Rb_tree_color__S_black: root::std::_Rb_tree_color = 1;
    pub type _Rb_tree_color = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree_node_base {
        pub _M_color: root::std::_Rb_tree_color,
        pub _M_parent: root::std::_Rb_tree_node_base__Base_ptr,
        pub _M_left: root::std::_Rb_tree_node_base__Base_ptr,
        pub _M_right: root::std::_Rb_tree_node_base__Base_ptr,
    }
    pub type _Rb_tree_node_base__Base_ptr = *mut root::std::_Rb_tree_node_base;
    pub type _Rb_tree_node_base__Const_Base_ptr = *const root::std::_Rb_tree_node_base;
    // #[test]
    // fn bindgen_test_layout__Rb_tree_node_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Rb_tree_node_base>(),
    //         32usize,
    //         concat!("Size of: ", stringify!(_Rb_tree_node_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Rb_tree_node_base>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Rb_tree_node_base))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_color as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Rb_tree_node_base),
    //             "::",
    //             stringify!(_M_color)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_parent as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Rb_tree_node_base),
    //             "::",
    //             stringify!(_M_parent)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_left as *const _ as usize
    //         },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Rb_tree_node_base),
    //             "::",
    //             stringify!(_M_left)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_right as *const _ as usize
    //         },
    //         24usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Rb_tree_node_base),
    //             "::",
    //             stringify!(_M_right)
    //         )
    //     );
    // }
    impl Default for _Rb_tree_node_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree_key_compare<_Key_compare> {
        pub _M_key_compare: _Key_compare,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key_compare>>,
    }
    impl<_Key_compare> Default for _Rb_tree_key_compare<_Key_compare> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree_header {
        pub _M_header: root::std::_Rb_tree_node_base,
        pub _M_node_count: usize,
    }
    // #[test]
    // fn bindgen_test_layout__Rb_tree_header() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Rb_tree_header>(),
    //         40usize,
    //         concat!("Size of: ", stringify!(_Rb_tree_header))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Rb_tree_header>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Rb_tree_header))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<_Rb_tree_header>()))._M_header as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Rb_tree_header),
    //             "::",
    //             stringify!(_M_header)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<_Rb_tree_header>()))._M_node_count as *const _ as usize
    //         },
    //         32usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Rb_tree_header),
    //             "::",
    //             stringify!(_M_node_count)
    //         )
    //     );
    // }
    impl Default for _Rb_tree_header {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree_node {
        pub _base: root::std::_Rb_tree_node_base,
        pub _M_storage: root::__gnu_cxx::__aligned_membuf,
    }
    pub type _Rb_tree_node__Link_type = *mut root::std::_Rb_tree_node;
    impl Default for _Rb_tree_node {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn _Rb_tree_increment(
            __x: *mut root::std::_Rb_tree_node_base,
        ) -> *mut root::std::_Rb_tree_node_base;
    }
    extern "C" {
        pub fn _Rb_tree_decrement(
            __x: *mut root::std::_Rb_tree_node_base,
        ) -> *mut root::std::_Rb_tree_node_base;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree_iterator {
        pub _M_node: root::std::_Rb_tree_iterator__Base_ptr,
    }
    pub type _Rb_tree_iterator_value_type<_Tp> = _Tp;
    pub type _Rb_tree_iterator_reference<_Tp> = *mut _Tp;
    pub type _Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
    pub type _Rb_tree_iterator_iterator_category = root::std::bidirectional_iterator_tag;
    pub type _Rb_tree_iterator_difference_type = isize;
    pub type _Rb_tree_iterator__Self = root::std::_Rb_tree_iterator;
    pub type _Rb_tree_iterator__Base_ptr = root::std::_Rb_tree_node_base__Base_ptr;
    pub type _Rb_tree_iterator__Link_type = *mut root::std::_Rb_tree_node;
    impl Default for _Rb_tree_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree_const_iterator {
        pub _M_node: root::std::_Rb_tree_const_iterator__Base_ptr,
    }
    pub type _Rb_tree_const_iterator_value_type<_Tp> = _Tp;
    pub type _Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
    pub type _Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
    pub type _Rb_tree_const_iterator_iterator = root::std::_Rb_tree_iterator;
    pub type _Rb_tree_const_iterator_iterator_category = root::std::bidirectional_iterator_tag;
    pub type _Rb_tree_const_iterator_difference_type = isize;
    pub type _Rb_tree_const_iterator__Self = root::std::_Rb_tree_const_iterator;
    pub type _Rb_tree_const_iterator__Base_ptr = root::std::_Rb_tree_node_base__Const_Base_ptr;
    pub type _Rb_tree_const_iterator__Link_type = *const root::std::_Rb_tree_node;
    impl Default for _Rb_tree_const_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn _Rb_tree_insert_and_rebalance(
            __insert_left: bool,
            __x: *mut root::std::_Rb_tree_node_base,
            __p: *mut root::std::_Rb_tree_node_base,
            __header: *mut root::std::_Rb_tree_node_base,
        );
    }
    extern "C" {
        pub fn _Rb_tree_rebalance_for_erase(
            __z: *mut root::std::_Rb_tree_node_base,
            __header: *mut root::std::_Rb_tree_node_base,
        ) -> *mut root::std::_Rb_tree_node_base;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __has_is_transparent {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree_merge_helper {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree {
        pub _M_impl: u8,
    }
    pub type _Rb_tree__Node_allocator = [u8; 0usize];
    pub type _Rb_tree__Alloc_traits = root::__gnu_cxx::__alloc_traits;
    pub type _Rb_tree__Base_ptr = *mut root::std::_Rb_tree_node_base;
    pub type _Rb_tree__Const_Base_ptr = *const root::std::_Rb_tree_node_base;
    pub type _Rb_tree__Link_type = *mut root::std::_Rb_tree_node;
    pub type _Rb_tree__Const_Link_type = *const root::std::_Rb_tree_node;
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree__Reuse_or_alloc_node {
        pub _M_root: root::std::_Rb_tree__Base_ptr,
        pub _M_nodes: root::std::_Rb_tree__Base_ptr,
        pub _M_t: *mut root::std::_Rb_tree,
    }
    impl Default for _Rb_tree__Reuse_or_alloc_node {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Rb_tree__Alloc_node {
        pub _M_t: *mut root::std::_Rb_tree,
    }
    impl Default for _Rb_tree__Alloc_node {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type _Rb_tree_key_type<_Key> = _Key;
    pub type _Rb_tree_value_type<_Val> = _Val;
    pub type _Rb_tree_pointer<_Val> = *mut root::std::_Rb_tree_value_type<_Val>;
    pub type _Rb_tree_const_pointer<_Val> = *const root::std::_Rb_tree_value_type<_Val>;
    pub type _Rb_tree_reference<_Val> = *mut root::std::_Rb_tree_value_type<_Val>;
    pub type _Rb_tree_const_reference<_Val> = *const root::std::_Rb_tree_value_type<_Val>;
    pub type _Rb_tree_size_type = usize;
    pub type _Rb_tree_difference_type = isize;
    pub type _Rb_tree_allocator_type<_Alloc> = _Alloc;
    pub type _Rb_tree_reverse_iterator = root::std::reverse_iterator<root::std::_Rb_tree_iterator>;
    pub type _Rb_tree_const_reverse_iterator =
        root::std::reverse_iterator<root::std::_Rb_tree_const_iterator>;
    pub type _Rb_tree_node_type = root::std::_Node_handle;
    pub type _Rb_tree_insert_return_type = root::std::_Node_insert_return<_Iterator, _NodeHandle>;
    pub type _Rb_tree__Compatible_tree = root::std::_Rb_tree;
    pub type _Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> =
        root::std::_Rb_tree_key_compare<_Key_compare>;
    extern "C" {
        pub fn _Rb_tree_black_count(
            __node: *const root::std::_Rb_tree_node_base,
            __root: *const root::std::_Rb_tree_node_base,
        ) -> ::std::os::raw::c_uint;
    }
    pub type __array_traits__Type<_Tp> = *mut _Tp;
    pub type __array_traits__Is_swappable = root::std::__is_swappable;
    pub type __array_traits__Is_nothrow_swappable = root::std::__is_nothrow_swappable;
    pub type array_value_type<_Tp> = _Tp;
    pub type array_pointer<_Tp> = *mut root::std::array_value_type<_Tp>;
    pub type array_const_pointer<_Tp> = *const root::std::array_value_type<_Tp>;
    pub type array_reference<_Tp> = *mut root::std::array_value_type<_Tp>;
    pub type array_const_reference<_Tp> = *const root::std::array_value_type<_Tp>;
    pub type array_iterator<_Tp> = *mut root::std::array_value_type<_Tp>;
    pub type array_const_iterator<_Tp> = *const root::std::array_value_type<_Tp>;
    pub type array_size_type = usize;
    pub type array_difference_type = isize;
    pub type array_reverse_iterator<_Tp> =
        root::std::reverse_iterator<root::std::array_iterator<_Tp>>;
    pub type array_const_reverse_iterator<_Tp> =
        root::std::reverse_iterator<root::std::array_const_iterator<_Tp>>;
    pub type array__AT_Type = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __erased_type {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___erased_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__erased_type>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__erased_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__erased_type>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__erased_type))
    //     );
    // }
    pub type __is_erased_or_convertible = root::std::__or_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_arg_t {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_allocator_arg_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<allocator_arg_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(allocator_arg_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<allocator_arg_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(allocator_arg_t))
    //     );
    // }
    extern "C" {
        pub static allocator_arg: root::std::allocator_arg_t;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_allocator_helper {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct uses_allocator {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc_base {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___uses_alloc_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__uses_alloc_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__uses_alloc_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__uses_alloc_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__uses_alloc_base))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc0 {
        pub _M_a: root::std::__uses_alloc0__Sink,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc0__Sink {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___uses_alloc0__Sink() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__uses_alloc0__Sink>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__uses_alloc0__Sink))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__uses_alloc0__Sink>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__uses_alloc0__Sink))
    //     );
    // }
    // #[test]
    // fn bindgen_test_layout___uses_alloc0() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__uses_alloc0>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__uses_alloc0))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__uses_alloc0>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__uses_alloc0))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<__uses_alloc0>()))._M_a as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(__uses_alloc0),
    //             "::",
    //             stringify!(_M_a)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc1<_Alloc> {
        pub _M_a: *const _Alloc,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    }
    impl<_Alloc> Default for __uses_alloc1<_Alloc> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc2<_Alloc> {
        pub _M_a: *const _Alloc,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    }
    impl<_Alloc> Default for __uses_alloc2<_Alloc> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __uses_alloc_t = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_uses_allocator_predicate {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_uses_allocator_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_uses_allocator_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_empty_non_tuple {
        pub _address: u8,
    }
    impl Default for __is_empty_non_tuple {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __empty_not_final = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct tuple {
        pub _address: u8,
    }
    pub type tuple__Inherited = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct tuple__TC2 {
        pub _address: u8,
    }
    pub type tuple__TCC = u8;
    pub type tuple__TMC = u8;
    pub type tuple__TMCT = u8;
    pub type tuple__TNTC = u8;
    // #[test]
    // fn __bindgen_test_layout_tuple_open0_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::tuple>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::tuple)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::tuple>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::tuple)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_make_tuple {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __make_tuple {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __combine_tuples {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___combine_tuples_open0_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__combine_tuples>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__combine_tuples)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__combine_tuples>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__combine_tuples)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __tuple_cat_result {
        pub _address: u8,
    }
    pub type __tuple_cat_result___type = root::std::__combine_tuples;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __make_1st_indices {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___make_1st_indices_open0_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_1st_indices>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_1st_indices)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_1st_indices>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_1st_indices)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __tuple_concater {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Swallow_assign {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout__Swallow_assign() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Swallow_assign>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(_Swallow_assign))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Swallow_assign>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(_Swallow_assign))
    //     );
    // }
    extern "C" {
        pub static ignore: root::std::_Swallow_assign;
    }
    #[repr(C)]
    pub struct map {
        pub _M_t: root::std::map__Rep_type,
    }
    pub type map_key_type<_Key> = _Key;
    pub type map_mapped_type<_Tp> = _Tp;
    pub type map_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
    pub type map_key_compare<_Compare> = _Compare;
    pub type map_allocator_type<_Alloc> = _Alloc;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct map_value_compare<_Compare> {
        pub comp: _Compare,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    }
    impl<_Compare> Default for map_value_compare<_Compare> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type map__Pair_alloc_type = [u8; 0usize];
    pub type map__Rep_type = root::std::_Rb_tree;
    pub type map__Alloc_traits = root::__gnu_cxx::__alloc_traits;
    pub type map_pointer = [u8; 0usize];
    pub type map_const_pointer = [u8; 0usize];
    pub type map_reference = [u8; 0usize];
    pub type map_const_reference = [u8; 0usize];
    pub type map_iterator = [u8; 0usize];
    pub type map_const_iterator = [u8; 0usize];
    pub type map_size_type = [u8; 0usize];
    pub type map_difference_type = [u8; 0usize];
    pub type map_reverse_iterator = [u8; 0usize];
    pub type map_const_reverse_iterator = [u8; 0usize];
    pub type map_node_type = [u8; 0usize];
    pub type map_insert_return_type = [u8; 0usize];
    impl Default for map {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for map {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "map {{ _M_t: {:?} }}", self._M_t)
        }
    }
    impl PartialEq for map {
        fn eq(&self, other: &map) -> bool {
            self._M_t == other._M_t
        }
    }
    #[repr(C)]
    pub struct multimap {
        pub _M_t: root::std::multimap__Rep_type,
    }
    pub type multimap_key_type<_Key> = _Key;
    pub type multimap_mapped_type<_Tp> = _Tp;
    pub type multimap_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
    pub type multimap_key_compare<_Compare> = _Compare;
    pub type multimap_allocator_type<_Alloc> = _Alloc;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct multimap_value_compare<_Compare> {
        pub comp: _Compare,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    }
    impl<_Compare> Default for multimap_value_compare<_Compare> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type multimap__Pair_alloc_type = [u8; 0usize];
    pub type multimap__Rep_type = root::std::_Rb_tree;
    pub type multimap__Alloc_traits = root::__gnu_cxx::__alloc_traits;
    pub type multimap_pointer = [u8; 0usize];
    pub type multimap_const_pointer = [u8; 0usize];
    pub type multimap_reference = [u8; 0usize];
    pub type multimap_const_reference = [u8; 0usize];
    pub type multimap_iterator = [u8; 0usize];
    pub type multimap_const_iterator = [u8; 0usize];
    pub type multimap_size_type = [u8; 0usize];
    pub type multimap_difference_type = [u8; 0usize];
    pub type multimap_reverse_iterator = [u8; 0usize];
    pub type multimap_const_reverse_iterator = [u8; 0usize];
    pub type multimap_node_type = [u8; 0usize];
    impl Default for multimap {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for multimap {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "multimap {{ _M_t: {:?} }}", self._M_t)
        }
    }
    impl PartialEq for multimap {
        fn eq(&self, other: &multimap) -> bool {
            self._M_t == other._M_t
        }
    }
    #[repr(C)]
    pub struct _Vector_base {
        pub _M_impl: root::std::_Vector_base__Vector_impl,
    }
    pub type _Vector_base__Tp_alloc_type = [u8; 0usize];
    pub type _Vector_base_pointer = [u8; 0usize];
    #[repr(C)]
    pub struct _Vector_base__Vector_impl {
        pub _M_start: root::std::_Vector_base_pointer,
        pub _M_finish: root::std::_Vector_base_pointer,
        pub _M_end_of_storage: root::std::_Vector_base_pointer,
    }
    impl Default for _Vector_base__Vector_impl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Vector_base__Vector_impl {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Vector_base__Vector_impl {{  }}")
        }
    }
    impl PartialEq for _Vector_base__Vector_impl {
        fn eq(&self, other: &_Vector_base__Vector_impl) -> bool {
            self._M_start == other._M_start
                && self._M_finish == other._M_finish
                && self._M_end_of_storage == other._M_end_of_storage
        }
    }
    pub type _Vector_base_allocator_type<_Alloc> = _Alloc;
    impl Default for _Vector_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Vector_base {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Vector_base {{ _M_impl: {:?} }}", self._M_impl)
        }
    }
    impl PartialEq for _Vector_base {
        fn eq(&self, other: &_Vector_base) -> bool {
            self._M_impl == other._M_impl
        }
    }
    #[repr(C)]
    pub struct vector {
        pub _base: root::std::_Vector_base,
    }
    pub type vector__Base = root::std::_Vector_base;
    pub type vector__Tp_alloc_type = root::std::vector__Base;
    pub type vector__Alloc_traits = root::__gnu_cxx::__alloc_traits;
    pub type vector_value_type<_Tp> = _Tp;
    pub type vector_pointer = root::std::vector__Base;
    pub type vector_const_pointer = root::std::vector__Alloc_traits;
    pub type vector_reference = root::std::vector__Alloc_traits;
    pub type vector_const_reference = root::std::vector__Alloc_traits;
    pub type vector_iterator = root::__gnu_cxx::__normal_iterator<root::std::vector_pointer>;
    pub type vector_const_iterator =
        root::__gnu_cxx::__normal_iterator<root::std::vector_const_pointer>;
    pub type vector_const_reverse_iterator =
        root::std::reverse_iterator<root::std::vector_const_iterator>;
    pub type vector_reverse_iterator = root::std::reverse_iterator<root::std::vector_iterator>;
    pub type vector_size_type = usize;
    pub type vector_difference_type = isize;
    pub type vector_allocator_type<_Alloc> = _Alloc;
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct vector__Temporary_value {
        pub _M_this: *mut root::std::vector,
        pub __buf: u8,
    }
    impl Default for vector__Temporary_value {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Default for vector {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for vector {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "vector {{  }}")
        }
    }
    impl PartialEq for vector {
        fn eq(&self, other: &vector) -> bool {
            self._base == other._base
        }
    }
    pub type _Bit_type = ::std::os::raw::c_ulong;
    pub const std__S_word_bit: root::std::_bindgen_ty_1 = 64;
    pub type _bindgen_ty_1 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Bit_reference {
        pub _M_p: *mut root::std::_Bit_type,
        pub _M_mask: root::std::_Bit_type,
    }
    // #[test]
    // fn bindgen_test_layout__Bit_reference() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Bit_reference>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(_Bit_reference))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Bit_reference>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Bit_reference))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_Bit_reference>()))._M_p as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Bit_reference),
    //             "::",
    //             stringify!(_M_p)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_Bit_reference>()))._M_mask as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Bit_reference),
    //             "::",
    //             stringify!(_M_mask)
    //         )
    //     );
    // }
    impl Default for _Bit_reference {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Bit_iterator_base {
        pub _M_p: *mut root::std::_Bit_type,
        pub _M_offset: ::std::os::raw::c_uint,
    }
    // #[test]
    // fn bindgen_test_layout__Bit_iterator_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Bit_iterator_base>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(_Bit_iterator_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Bit_iterator_base>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Bit_iterator_base))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_p as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Bit_iterator_base),
    //             "::",
    //             stringify!(_M_p)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_offset as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Bit_iterator_base),
    //             "::",
    //             stringify!(_M_offset)
    //         )
    //     );
    // }
    impl Default for _Bit_iterator_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Bit_iterator {
        pub _base: root::std::_Bit_iterator_base,
    }
    pub type _Bit_iterator_reference = root::std::_Bit_reference;
    pub type _Bit_iterator_pointer = *mut root::std::_Bit_reference;
    pub type _Bit_iterator_iterator = root::std::_Bit_iterator;
    // #[test]
    // fn bindgen_test_layout__Bit_iterator() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Bit_iterator>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(_Bit_iterator))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Bit_iterator>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Bit_iterator))
    //     );
    // }
    impl Default for _Bit_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Bit_const_iterator {
        pub _base: root::std::_Bit_iterator_base,
    }
    pub type _Bit_const_iterator_reference = bool;
    pub type _Bit_const_iterator_const_reference = bool;
    pub type _Bit_const_iterator_pointer = *const bool;
    pub type _Bit_const_iterator_const_iterator = root::std::_Bit_const_iterator;
    // #[test]
    // fn bindgen_test_layout__Bit_const_iterator() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Bit_const_iterator>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(_Bit_const_iterator))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Bit_const_iterator>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Bit_const_iterator))
    //     );
    // }
    impl Default for _Bit_const_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct _Bvector_base {
        pub _M_impl: root::std::_Bvector_base__Bvector_impl,
    }
    pub type _Bvector_base__Bit_alloc_type = [u8; 0usize];
    pub type _Bvector_base__Bit_alloc_traits = root::__gnu_cxx::__alloc_traits;
    pub type _Bvector_base__Bit_pointer = [u8; 0usize];
    #[repr(C)]
    pub struct _Bvector_base__Bvector_impl_data {
        pub _M_start: root::std::_Bit_iterator,
        pub _M_finish: root::std::_Bit_iterator,
        pub _M_end_of_storage: root::std::_Bvector_base__Bit_pointer,
    }
    impl Default for _Bvector_base__Bvector_impl_data {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Bvector_base__Bvector_impl_data {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_Bvector_base__Bvector_impl_data {{ _M_start: {:?}, _M_finish: {:?} }}",
                self._M_start, self._M_finish
            )
        }
    }
    impl PartialEq for _Bvector_base__Bvector_impl_data {
        fn eq(&self, other: &_Bvector_base__Bvector_impl_data) -> bool {
            self._M_start == other._M_start
                && self._M_finish == other._M_finish
                && self._M_end_of_storage == other._M_end_of_storage
        }
    }
    #[repr(C)]
    pub struct _Bvector_base__Bvector_impl {
        pub _base_1: root::std::_Bvector_base__Bvector_impl_data,
    }
    impl Default for _Bvector_base__Bvector_impl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Bvector_base__Bvector_impl {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Bvector_base__Bvector_impl {{  }}")
        }
    }
    impl PartialEq for _Bvector_base__Bvector_impl {
        fn eq(&self, other: &_Bvector_base__Bvector_impl) -> bool {
            self._base_1 == other._base_1
        }
    }
    pub type _Bvector_base_allocator_type<_Alloc> = _Alloc;
    impl Default for _Bvector_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Bvector_base {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Bvector_base {{ _M_impl: {:?} }}", self._M_impl)
        }
    }
    impl PartialEq for _Bvector_base {
        fn eq(&self, other: &_Bvector_base) -> bool {
            self._M_impl == other._M_impl
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Deque_iterator {
        pub _M_cur: root::std::_Deque_iterator__Elt_pointer,
        pub _M_first: root::std::_Deque_iterator__Elt_pointer,
        pub _M_last: root::std::_Deque_iterator__Elt_pointer,
        pub _M_node: root::std::_Deque_iterator__Map_pointer,
    }
    pub type _Deque_iterator___ptr_to = root::std::pointer_traits;
    pub type _Deque_iterator___iter = root::std::_Deque_iterator;
    pub type _Deque_iterator_iterator = root::std::_Deque_iterator___iter;
    pub type _Deque_iterator_const_iterator = root::std::_Deque_iterator___iter;
    pub type _Deque_iterator__Elt_pointer = root::std::_Deque_iterator___ptr_to;
    pub type _Deque_iterator__Map_pointer = root::std::_Deque_iterator___ptr_to;
    pub type _Deque_iterator_iterator_category = root::std::random_access_iterator_tag;
    pub type _Deque_iterator_value_type<_Tp> = _Tp;
    pub type _Deque_iterator_pointer<_Ptr> = _Ptr;
    pub type _Deque_iterator_reference<_Ref> = _Ref;
    pub type _Deque_iterator_size_type = usize;
    pub type _Deque_iterator_difference_type = isize;
    pub type _Deque_iterator__Self = root::std::_Deque_iterator;
    impl Default for _Deque_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct _Deque_base {
        pub _M_impl: root::std::_Deque_base__Deque_impl,
    }
    pub type _Deque_base__Tp_alloc_type = [u8; 0usize];
    pub type _Deque_base__Alloc_traits = root::__gnu_cxx::__alloc_traits;
    pub type _Deque_base__Ptr = [u8; 0usize];
    pub type _Deque_base__Ptr_const = [u8; 0usize];
    pub type _Deque_base__Map_alloc_type = [u8; 0usize];
    pub type _Deque_base__Map_alloc_traits = root::__gnu_cxx::__alloc_traits;
    pub type _Deque_base_allocator_type<_Alloc> = _Alloc;
    pub type _Deque_base_size_type = [u8; 0usize];
    pub type _Deque_base_iterator = root::std::_Deque_iterator;
    pub type _Deque_base_const_iterator = root::std::_Deque_iterator;
    pub type _Deque_base__Map_pointer = [u8; 0usize];
    #[repr(C)]
    pub struct _Deque_base__Deque_impl {
        pub _M_map: root::std::_Deque_base__Map_pointer,
        pub _M_map_size: usize,
        pub _M_start: root::std::_Deque_base_iterator,
        pub _M_finish: root::std::_Deque_base_iterator,
    }
    impl Default for _Deque_base__Deque_impl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Deque_base__Deque_impl {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_Deque_base__Deque_impl {{ _M_map_size: {:?}, _M_start: {:?}, _M_finish: {:?} }}",
                self._M_map_size, self._M_start, self._M_finish
            )
        }
    }
    impl PartialEq for _Deque_base__Deque_impl {
        fn eq(&self, other: &_Deque_base__Deque_impl) -> bool {
            self._M_map == other._M_map
                && self._M_map_size == other._M_map_size
                && self._M_start == other._M_start
                && self._M_finish == other._M_finish
        }
    }
    pub const _Deque_base__S_initial_map_size: root::std::_Deque_base__bindgen_ty_1 = 0;
    pub type _Deque_base__bindgen_ty_1 = i32;
    impl Default for _Deque_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Deque_base {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Deque_base {{ _M_impl: {:?} }}", self._M_impl)
        }
    }
    impl PartialEq for _Deque_base {
        fn eq(&self, other: &_Deque_base) -> bool {
            self._M_impl == other._M_impl
        }
    }
    #[repr(C)]
    pub struct deque {
        pub _base: root::std::_Deque_base,
    }
    pub type deque__Base = root::std::_Deque_base;
    pub type deque__Tp_alloc_type = root::std::deque__Base;
    pub type deque__Alloc_traits = root::std::deque__Base;
    pub type deque__Map_pointer = root::std::deque__Base;
    pub type deque_value_type<_Tp> = _Tp;
    pub type deque_pointer = root::std::deque__Alloc_traits;
    pub type deque_const_pointer = root::std::deque__Alloc_traits;
    pub type deque_reference = root::std::deque__Alloc_traits;
    pub type deque_const_reference = root::std::deque__Alloc_traits;
    pub type deque_iterator = root::std::deque__Base;
    pub type deque_const_iterator = root::std::deque__Base;
    pub type deque_const_reverse_iterator =
        root::std::reverse_iterator<root::std::deque_const_iterator>;
    pub type deque_reverse_iterator = root::std::reverse_iterator<root::std::deque_iterator>;
    pub type deque_size_type = usize;
    pub type deque_difference_type = isize;
    pub type deque_allocator_type<_Alloc> = _Alloc;
    impl Default for deque {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for deque {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "deque {{  }}")
        }
    }
    impl PartialEq for deque {
        fn eq(&self, other: &deque) -> bool {
            self._base == other._base
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct queue<_Sequence> {
        pub c: _Sequence,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
    }
    pub type queue__Uses = u8;
    pub type queue_value_type = [u8; 0usize];
    pub type queue_reference = [u8; 0usize];
    pub type queue_const_reference = [u8; 0usize];
    pub type queue_size_type = [u8; 0usize];
    pub type queue_container_type<_Sequence> = _Sequence;
    impl<_Sequence> Default for queue<_Sequence> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct priority_queue<_Sequence, _Compare> {
        pub c: _Sequence,
        pub comp: _Compare,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    }
    pub type priority_queue__Uses = u8;
    pub type priority_queue_value_type = [u8; 0usize];
    pub type priority_queue_reference = [u8; 0usize];
    pub type priority_queue_const_reference = [u8; 0usize];
    pub type priority_queue_size_type = [u8; 0usize];
    pub type priority_queue_container_type<_Sequence> = _Sequence;
    pub type priority_queue_value_compare<_Compare> = _Compare;
    impl<_Sequence, _Compare> Default for priority_queue<_Sequence, _Compare> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct locale {
        pub _M_impl: *mut root::std::locale__Impl,
    }
    pub type locale_category = ::std::os::raw::c_int;
    pub const locale__S_categories_size: root::std::locale__bindgen_ty_1 = 12;
    pub type locale__bindgen_ty_1 = u32;
    pub const locale_none: root::std::locale_category = 0;
    pub const locale_ctype: root::std::locale_category = 1;
    pub const locale_numeric: root::std::locale_category = 2;
    pub const locale_collate: root::std::locale_category = 4;
    pub const locale_time: root::std::locale_category = 8;
    pub const locale_monetary: root::std::locale_category = 16;
    pub const locale_messages: root::std::locale_category = 32;
    pub const locale_all: root::std::locale_category = 63;
    extern "C" {
        #[link_name = "\u{1}_S_classic"]
        pub static mut locale__S_classic: *mut root::std::locale__Impl;
    }
    extern "C" {
        #[link_name = "\u{1}_S_global"]
        pub static mut locale__S_global: *mut root::std::locale__Impl;
    }
    extern "C" {
        #[link_name = "\u{1}_S_categories"]
        pub static locale__S_categories: *const *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_S_once"]
        pub static mut locale__S_once: root::__gthread_once_t;
    }
    extern "C" {
        #[link_name = "\u{1}_S_twinned_facets"]
        pub static mut locale__S_twinned_facets: [*const root::std::locale_id; 0usize];
    }
    // #[test]
    // fn bindgen_test_layout_locale() {
    //     assert_eq!(
    //         ::std::mem::size_of::<locale>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(locale))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<locale>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(locale))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale>()))._M_impl as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale),
    //             "::",
    //             stringify!(_M_impl)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}name"]
        pub fn locale_name(this: *const root::std::locale) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}global"]
        pub fn locale_global(__loc: *const root::std::locale) -> root::std::locale;
    }
    extern "C" {
        #[link_name = "\u{1}classic"]
        pub fn locale_classic() -> *const root::std::locale;
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale(this: *mut root::std::locale);
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale1(this: *mut root::std::locale, __other: *const root::std::locale);
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale2(this: *mut root::std::locale, __s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale3(
            this: *mut root::std::locale,
            __base: *const root::std::locale,
            __s: *const ::std::os::raw::c_char,
            __cat: root::std::locale_category,
        );
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale4(
            this: *mut root::std::locale,
            __base: *const root::std::locale,
            __add: *const root::std::locale,
            __cat: root::std::locale_category,
        );
    }
    extern "C" {
        #[link_name = "\u{1}locale_destructor"]
        pub fn locale_locale_destructor(this: *mut root::std::locale);
    }
    impl Default for locale {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl locale {
        #[inline]
        pub unsafe fn name(&self) -> root::std::__cxx11::string {
            locale_name(self)
        }
        #[inline]
        pub unsafe fn global(__loc: *const root::std::locale) -> root::std::locale {
            locale_global(__loc)
        }
        #[inline]
        pub unsafe fn classic() -> *const root::std::locale {
            locale_classic()
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(__other: *const root::std::locale) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale1(&mut __bindgen_tmp, __other);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(__s: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale2(&mut __bindgen_tmp, __s);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(
            __base: *const root::std::locale,
            __s: *const ::std::os::raw::c_char,
            __cat: root::std::locale_category,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale3(&mut __bindgen_tmp, __base, __s, __cat);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(
            __base: *const root::std::locale,
            __add: *const root::std::locale,
            __cat: root::std::locale_category,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale4(&mut __bindgen_tmp, __base, __add, __cat);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            locale_locale_destructor(self)
        }
    }
    #[repr(C)]
    pub struct locale_facet__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct locale_facet {
        pub vtable_: *const locale_facet__bindgen_vtable,
        pub _M_refcount: root::_Atomic_word,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct locale_facet___shim {
        _unused: [u8; 0],
    }
    extern "C" {
        #[link_name = "\u{1}_S_c_locale"]
        pub static mut locale_facet__S_c_locale: root::std::__c_locale;
    }
    extern "C" {
        #[link_name = "\u{1}_S_c_name"]
        pub static mut locale_facet__S_c_name: [::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_once"]
        pub static mut locale_facet__S_once: root::__gthread_once_t;
    }
    // #[test]
    // fn bindgen_test_layout_locale_facet() {
    //     assert_eq!(
    //         ::std::mem::size_of::<locale_facet>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(locale_facet))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<locale_facet>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(locale_facet))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<locale_facet>()))._M_refcount as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale_facet),
    //             "::",
    //             stringify!(_M_refcount)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}_S_create_c_locale"]
        pub fn locale_facet__S_create_c_locale(
            __cloc: *mut root::std::__c_locale,
            __s: *const ::std::os::raw::c_char,
            __old: root::std::__c_locale,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_S_clone_c_locale"]
        pub fn locale_facet__S_clone_c_locale(
            __cloc: *mut root::std::__c_locale,
        ) -> root::std::__c_locale;
    }
    extern "C" {
        #[link_name = "\u{1}_S_destroy_c_locale"]
        pub fn locale_facet__S_destroy_c_locale(__cloc: *mut root::std::__c_locale);
    }
    extern "C" {
        #[link_name = "\u{1}_S_lc_ctype_c_locale"]
        pub fn locale_facet__S_lc_ctype_c_locale(
            __cloc: root::std::__c_locale,
            __s: *const ::std::os::raw::c_char,
        ) -> root::std::__c_locale;
    }
    extern "C" {
        #[link_name = "\u{1}_S_get_c_locale"]
        pub fn locale_facet__S_get_c_locale() -> root::std::__c_locale;
    }
    extern "C" {
        #[link_name = "\u{1}_S_get_c_name"]
        pub fn locale_facet__S_get_c_name() -> *const ::std::os::raw::c_char;
    }
    impl Default for locale_facet {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl locale_facet {
        #[inline]
        pub unsafe fn _S_create_c_locale(
            __cloc: *mut root::std::__c_locale,
            __s: *const ::std::os::raw::c_char,
            __old: root::std::__c_locale,
        ) {
            locale_facet__S_create_c_locale(__cloc, __s, __old)
        }
        #[inline]
        pub unsafe fn _S_clone_c_locale(
            __cloc: *mut root::std::__c_locale,
        ) -> root::std::__c_locale {
            locale_facet__S_clone_c_locale(__cloc)
        }
        #[inline]
        pub unsafe fn _S_destroy_c_locale(__cloc: *mut root::std::__c_locale) {
            locale_facet__S_destroy_c_locale(__cloc)
        }
        #[inline]
        pub unsafe fn _S_lc_ctype_c_locale(
            __cloc: root::std::__c_locale,
            __s: *const ::std::os::raw::c_char,
        ) -> root::std::__c_locale {
            locale_facet__S_lc_ctype_c_locale(__cloc, __s)
        }
        #[inline]
        pub unsafe fn _S_get_c_locale() -> root::std::__c_locale {
            locale_facet__S_get_c_locale()
        }
        #[inline]
        pub unsafe fn _S_get_c_name() -> *const ::std::os::raw::c_char {
            locale_facet__S_get_c_name()
        }
    }
    extern "C" {
        #[link_name = "\u{1}facet_destructor"]
        pub fn locale_facet_facet_destructor(this: *mut root::std::locale_facet);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct locale_id {
        pub _M_index: usize,
    }
    extern "C" {
        #[link_name = "\u{1}_S_refcount"]
        pub static mut locale_id__S_refcount: root::_Atomic_word;
    }
    // #[test]
    // fn bindgen_test_layout_locale_id() {
    //     assert_eq!(
    //         ::std::mem::size_of::<locale_id>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(locale_id))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<locale_id>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(locale_id))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale_id>()))._M_index as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale_id),
    //             "::",
    //             stringify!(_M_index)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}_M_id"]
        pub fn locale_id__M_id(this: *const root::std::locale_id) -> usize;
    }
    impl locale_id {
        #[inline]
        pub unsafe fn _M_id(&self) -> usize {
            locale_id__M_id(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct locale__Impl {
        pub _M_refcount: root::_Atomic_word,
        pub _M_facets: *mut *const root::std::locale_facet,
        pub _M_facets_size: usize,
        pub _M_caches: *mut *const root::std::locale_facet,
        pub _M_names: *mut *mut ::std::os::raw::c_char,
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_ctype"]
        pub static mut locale__Impl__S_id_ctype: [*const root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_numeric"]
        pub static mut locale__Impl__S_id_numeric: [*const root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_collate"]
        pub static mut locale__Impl__S_id_collate: [*const root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_time"]
        pub static mut locale__Impl__S_id_time: [*const root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_monetary"]
        pub static mut locale__Impl__S_id_monetary: [*const root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_messages"]
        pub static mut locale__Impl__S_id_messages: [*const root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_facet_categories"]
        pub static mut locale__Impl__S_facet_categories:
            [*const *const root::std::locale_id; 0usize];
    }
    // #[test]
    // fn bindgen_test_layout_locale__Impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<locale__Impl>(),
    //         40usize,
    //         concat!("Size of: ", stringify!(locale__Impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<locale__Impl>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(locale__Impl))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<locale__Impl>()))._M_refcount as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_refcount)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_facets as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_facets)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<locale__Impl>()))._M_facets_size as *const _ as usize
    //         },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_facets_size)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_caches as *const _ as usize },
    //         24usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_caches)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_names as *const _ as usize },
    //         32usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_names)
    //         )
    //     );
    // }
    impl Default for locale__Impl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type collate_char_type<_CharT> = _CharT;
    pub type collate_string_type = root::std::__cxx11::basic_string<_CharT>;
    extern "C" {
        pub static mut id: root::std::locale_id;
    }
    pub type collate_byname_char_type<_CharT> = _CharT;
    pub type collate_byname_string_type = root::std::__cxx11::basic_string<_CharT>;
    // #[test]
    // fn __bindgen_test_layout_collate_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::collate>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::collate)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::collate>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::collate)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_collate_byname_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::collate_byname>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::collate_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::collate_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::collate_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_collate_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::collate>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::collate)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::collate>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::collate)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_collate_byname_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::collate_byname>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::collate_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::collate_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::collate_byname)
    //         )
    //     );
    // }
    pub const errc_address_family_not_supported: root::std::errc = 97;
    pub const errc_address_in_use: root::std::errc = 98;
    pub const errc_address_not_available: root::std::errc = 99;
    pub const errc_already_connected: root::std::errc = 106;
    pub const errc_argument_list_too_long: root::std::errc = 7;
    pub const errc_argument_out_of_domain: root::std::errc = 33;
    pub const errc_bad_address: root::std::errc = 14;
    pub const errc_bad_file_descriptor: root::std::errc = 9;
    pub const errc_bad_message: root::std::errc = 74;
    pub const errc_broken_pipe: root::std::errc = 32;
    pub const errc_connection_aborted: root::std::errc = 103;
    pub const errc_connection_already_in_progress: root::std::errc = 114;
    pub const errc_connection_refused: root::std::errc = 111;
    pub const errc_connection_reset: root::std::errc = 104;
    pub const errc_cross_device_link: root::std::errc = 18;
    pub const errc_destination_address_required: root::std::errc = 89;
    pub const errc_device_or_resource_busy: root::std::errc = 16;
    pub const errc_directory_not_empty: root::std::errc = 39;
    pub const errc_executable_format_error: root::std::errc = 8;
    pub const errc_file_exists: root::std::errc = 17;
    pub const errc_file_too_large: root::std::errc = 27;
    pub const errc_filename_too_long: root::std::errc = 36;
    pub const errc_function_not_supported: root::std::errc = 38;
    pub const errc_host_unreachable: root::std::errc = 113;
    pub const errc_identifier_removed: root::std::errc = 43;
    pub const errc_illegal_byte_sequence: root::std::errc = 84;
    pub const errc_inappropriate_io_control_operation: root::std::errc = 25;
    pub const errc_interrupted: root::std::errc = 4;
    pub const errc_invalid_argument: root::std::errc = 22;
    pub const errc_invalid_seek: root::std::errc = 29;
    pub const errc_io_error: root::std::errc = 5;
    pub const errc_is_a_directory: root::std::errc = 21;
    pub const errc_message_size: root::std::errc = 90;
    pub const errc_network_down: root::std::errc = 100;
    pub const errc_network_reset: root::std::errc = 102;
    pub const errc_network_unreachable: root::std::errc = 101;
    pub const errc_no_buffer_space: root::std::errc = 105;
    pub const errc_no_child_process: root::std::errc = 10;
    pub const errc_no_link: root::std::errc = 67;
    pub const errc_no_lock_available: root::std::errc = 37;
    pub const errc_no_message_available: root::std::errc = 61;
    pub const errc_no_message: root::std::errc = 42;
    pub const errc_no_protocol_option: root::std::errc = 92;
    pub const errc_no_space_on_device: root::std::errc = 28;
    pub const errc_no_stream_resources: root::std::errc = 63;
    pub const errc_no_such_device_or_address: root::std::errc = 6;
    pub const errc_no_such_device: root::std::errc = 19;
    pub const errc_no_such_file_or_directory: root::std::errc = 2;
    pub const errc_no_such_process: root::std::errc = 3;
    pub const errc_not_a_directory: root::std::errc = 20;
    pub const errc_not_a_socket: root::std::errc = 88;
    pub const errc_not_a_stream: root::std::errc = 60;
    pub const errc_not_connected: root::std::errc = 107;
    pub const errc_not_enough_memory: root::std::errc = 12;
    pub const errc_not_supported: root::std::errc = 95;
    pub const errc_operation_canceled: root::std::errc = 125;
    pub const errc_operation_in_progress: root::std::errc = 115;
    pub const errc_operation_not_permitted: root::std::errc = 1;
    pub const errc_operation_not_supported: root::std::errc = 95;
    pub const errc_operation_would_block: root::std::errc = 11;
    pub const errc_owner_dead: root::std::errc = 130;
    pub const errc_permission_denied: root::std::errc = 13;
    pub const errc_protocol_error: root::std::errc = 71;
    pub const errc_protocol_not_supported: root::std::errc = 93;
    pub const errc_read_only_file_system: root::std::errc = 30;
    pub const errc_resource_deadlock_would_occur: root::std::errc = 35;
    pub const errc_resource_unavailable_try_again: root::std::errc = 11;
    pub const errc_result_out_of_range: root::std::errc = 34;
    pub const errc_state_not_recoverable: root::std::errc = 131;
    pub const errc_stream_timeout: root::std::errc = 62;
    pub const errc_text_file_busy: root::std::errc = 26;
    pub const errc_timed_out: root::std::errc = 110;
    pub const errc_too_many_files_open_in_system: root::std::errc = 23;
    pub const errc_too_many_files_open: root::std::errc = 24;
    pub const errc_too_many_links: root::std::errc = 31;
    pub const errc_too_many_symbolic_link_levels: root::std::errc = 40;
    pub const errc_value_too_large: root::std::errc = 75;
    pub const errc_wrong_protocol_type: root::std::errc = 91;
    pub type errc = i32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_error_code_enum {
        pub _base: root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_error_condition_enum {
        pub _base: root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout_is_error_condition_enum_open0_errc_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::is_error_condition_enum>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::is_error_condition_enum)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::is_error_condition_enum>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::is_error_condition_enum)
    //         )
    //     );
    // }
    pub mod _V2 {

        #[repr(C)]
        pub struct error_category__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct error_category {
            pub vtable_: *const error_category__bindgen_vtable,
        }
        // #[test]
        // fn bindgen_test_layout_error_category() {
        //     assert_eq!(
        //         ::std::mem::size_of::<error_category>(),
        //         8usize,
        //         concat!("Size of: ", stringify!(error_category))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<error_category>(),
        //         8usize,
        //         concat!("Alignment of ", stringify!(error_category))
        //     );
        // }
        impl Default for error_category {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}error_category_destructor"]
            pub fn error_category_error_category_destructor(
                this: *mut root::std::_V2::error_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}default_error_condition"]
            pub fn error_category_default_error_condition(
                this: *mut ::std::os::raw::c_void,
                __i: ::std::os::raw::c_int,
            ) -> root::std::error_condition;
        }
        extern "C" {
            #[link_name = "\u{1}equivalent"]
            pub fn error_category_equivalent(
                this: *mut ::std::os::raw::c_void,
                __i: ::std::os::raw::c_int,
                __cond: *const root::std::error_condition,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}equivalent"]
            pub fn error_category_equivalent1(
                this: *mut ::std::os::raw::c_void,
                __code: *const root::std::error_code,
                __i: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            pub fn system_category() -> *const root::std::_V2::error_category;
        }
        extern "C" {
            pub fn generic_category() -> *const root::std::_V2::error_category;
        }
    }
    extern "C" {
        pub fn make_error_code(arg1: root::std::errc) -> root::std::error_code;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct error_code {
        pub _M_value: ::std::os::raw::c_int,
        pub _M_cat: *const root::std::_V2::error_category,
    }
    // #[test]
    // fn bindgen_test_layout_error_code() {
    //     assert_eq!(
    //         ::std::mem::size_of::<error_code>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(error_code))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<error_code>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(error_code))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<error_code>()))._M_value as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(error_code),
    //             "::",
    //             stringify!(_M_value)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<error_code>()))._M_cat as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(error_code),
    //             "::",
    //             stringify!(_M_cat)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}default_error_condition"]
        pub fn error_code_default_error_condition(
            this: *const root::std::error_code,
        ) -> root::std::error_condition;
    }
    impl Default for error_code {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl error_code {
        #[inline]
        pub unsafe fn default_error_condition(&self) -> root::std::error_condition {
            error_code_default_error_condition(self)
        }
    }
    extern "C" {
        pub fn make_error_condition(arg1: root::std::errc) -> root::std::error_condition;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct error_condition {
        pub _M_value: ::std::os::raw::c_int,
        pub _M_cat: *const root::std::_V2::error_category,
    }
    // #[test]
    // fn bindgen_test_layout_error_condition() {
    //     assert_eq!(
    //         ::std::mem::size_of::<error_condition>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(error_condition))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<error_condition>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(error_condition))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<error_condition>()))._M_value as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(error_condition),
    //             "::",
    //             stringify!(_M_value)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<error_condition>()))._M_cat as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(error_condition),
    //             "::",
    //             stringify!(_M_cat)
    //         )
    //     );
    // }
    impl Default for error_condition {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct system_error {
        pub _base: root::std::runtime_error,
        pub _M_code: root::std::error_code,
    }
    // #[test]
    // fn bindgen_test_layout_system_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<system_error>(),
    //         32usize,
    //         concat!("Size of: ", stringify!(system_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<system_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(system_error))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<system_error>()))._M_code as *const _ as usize },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(system_error),
    //             "::",
    //             stringify!(_M_code)
    //         )
    //     );
    // }
    impl Default for system_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for system_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "system_error {{ _M_code: {:?} }}", self._M_code)
        }
    }
    extern "C" {
        #[link_name = "\u{1}system_error_destructor"]
        pub fn system_error_system_error_destructor(this: *mut root::std::system_error);
    }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_error_code_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_error_condition_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    pub const _Ios_Fmtflags__S_boolalpha: root::std::_Ios_Fmtflags = 1;
    pub const _Ios_Fmtflags__S_dec: root::std::_Ios_Fmtflags = 2;
    pub const _Ios_Fmtflags__S_fixed: root::std::_Ios_Fmtflags = 4;
    pub const _Ios_Fmtflags__S_hex: root::std::_Ios_Fmtflags = 8;
    pub const _Ios_Fmtflags__S_internal: root::std::_Ios_Fmtflags = 16;
    pub const _Ios_Fmtflags__S_left: root::std::_Ios_Fmtflags = 32;
    pub const _Ios_Fmtflags__S_oct: root::std::_Ios_Fmtflags = 64;
    pub const _Ios_Fmtflags__S_right: root::std::_Ios_Fmtflags = 128;
    pub const _Ios_Fmtflags__S_scientific: root::std::_Ios_Fmtflags = 256;
    pub const _Ios_Fmtflags__S_showbase: root::std::_Ios_Fmtflags = 512;
    pub const _Ios_Fmtflags__S_showpoint: root::std::_Ios_Fmtflags = 1024;
    pub const _Ios_Fmtflags__S_showpos: root::std::_Ios_Fmtflags = 2048;
    pub const _Ios_Fmtflags__S_skipws: root::std::_Ios_Fmtflags = 4096;
    pub const _Ios_Fmtflags__S_unitbuf: root::std::_Ios_Fmtflags = 8192;
    pub const _Ios_Fmtflags__S_uppercase: root::std::_Ios_Fmtflags = 16384;
    pub const _Ios_Fmtflags__S_adjustfield: root::std::_Ios_Fmtflags = 176;
    pub const _Ios_Fmtflags__S_basefield: root::std::_Ios_Fmtflags = 74;
    pub const _Ios_Fmtflags__S_floatfield: root::std::_Ios_Fmtflags = 260;
    pub const _Ios_Fmtflags__S_ios_fmtflags_end: root::std::_Ios_Fmtflags = 65536;
    pub const _Ios_Fmtflags__S_ios_fmtflags_max: root::std::_Ios_Fmtflags = 2147483647;
    pub const _Ios_Fmtflags__S_ios_fmtflags_min: root::std::_Ios_Fmtflags = -2147483648;
    pub type _Ios_Fmtflags = i32;
    pub const _Ios_Openmode__S_app: root::std::_Ios_Openmode = 1;
    pub const _Ios_Openmode__S_ate: root::std::_Ios_Openmode = 2;
    pub const _Ios_Openmode__S_bin: root::std::_Ios_Openmode = 4;
    pub const _Ios_Openmode__S_in: root::std::_Ios_Openmode = 8;
    pub const _Ios_Openmode__S_out: root::std::_Ios_Openmode = 16;
    pub const _Ios_Openmode__S_trunc: root::std::_Ios_Openmode = 32;
    pub const _Ios_Openmode__S_ios_openmode_end: root::std::_Ios_Openmode = 65536;
    pub const _Ios_Openmode__S_ios_openmode_max: root::std::_Ios_Openmode = 2147483647;
    pub const _Ios_Openmode__S_ios_openmode_min: root::std::_Ios_Openmode = -2147483648;
    pub type _Ios_Openmode = i32;
    pub const _Ios_Iostate__S_goodbit: root::std::_Ios_Iostate = 0;
    pub const _Ios_Iostate__S_badbit: root::std::_Ios_Iostate = 1;
    pub const _Ios_Iostate__S_eofbit: root::std::_Ios_Iostate = 2;
    pub const _Ios_Iostate__S_failbit: root::std::_Ios_Iostate = 4;
    pub const _Ios_Iostate__S_ios_iostate_end: root::std::_Ios_Iostate = 65536;
    pub const _Ios_Iostate__S_ios_iostate_max: root::std::_Ios_Iostate = 2147483647;
    pub const _Ios_Iostate__S_ios_iostate_min: root::std::_Ios_Iostate = -2147483648;
    pub type _Ios_Iostate = i32;
    pub const _Ios_Seekdir__S_beg: root::std::_Ios_Seekdir = 0;
    pub const _Ios_Seekdir__S_cur: root::std::_Ios_Seekdir = 1;
    pub const _Ios_Seekdir__S_end: root::std::_Ios_Seekdir = 2;
    pub const _Ios_Seekdir__S_ios_seekdir_end: root::std::_Ios_Seekdir = 65536;
    pub type _Ios_Seekdir = u32;
    pub const io_errc_stream: root::std::io_errc = 1;
    pub type io_errc = i32;
    // #[test]
    // fn __bindgen_test_layout_is_error_code_enum_open0_io_errc_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::is_error_code_enum>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::is_error_code_enum)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::is_error_code_enum>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::is_error_code_enum)
    //         )
    //     );
    // }
    extern "C" {
        pub fn iostream_category() -> *const root::std::_V2::error_category;
    }
    #[repr(C)]
    pub struct ios_base__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ios_base {
        pub vtable_: *const ios_base__bindgen_vtable,
        pub _M_precision: root::std::streamsize,
        pub _M_width: root::std::streamsize,
        pub _M_flags: root::std::ios_base_fmtflags,
        pub _M_exception: root::std::ios_base_iostate,
        pub _M_streambuf_state: root::std::ios_base_iostate,
        pub _M_callbacks: *mut root::std::ios_base__Callback_list,
        pub _M_word_zero: root::std::ios_base__Words,
        pub _M_local_word: [self::std::ios_base__Words; 8usize],
        pub _M_word_size: ::std::os::raw::c_int,
        pub _M_word: *mut root::std::ios_base__Words,
        pub _M_ios_locale: root::std::locale,
    }
    #[repr(C)]
    pub struct ios_base_failure {
        pub _base: root::std::system_error,
    }
    // #[test]
    // fn bindgen_test_layout_ios_base_failure() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base_failure>(),
    //         32usize,
    //         concat!("Size of: ", stringify!(ios_base_failure))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base_failure>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(ios_base_failure))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}failure"]
        pub fn ios_base_failure_failure(
            this: *mut root::std::ios_base_failure,
            __str: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}failure"]
        pub fn ios_base_failure_failure1(
            this: *mut root::std::ios_base_failure,
            arg1: *const root::std::__cxx11::string,
            arg2: *const root::std::error_code,
        );
    }
    extern "C" {
        #[link_name = "\u{1}failure"]
        pub fn ios_base_failure_failure2(
            this: *mut root::std::ios_base_failure,
            arg1: *const ::std::os::raw::c_char,
            arg2: *const root::std::error_code,
        );
    }
    impl Default for ios_base_failure {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for ios_base_failure {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "ios_base_failure {{  }}")
        }
    }
    impl ios_base_failure {
        #[inline]
        pub unsafe fn new(__str: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_failure_failure(&mut __bindgen_tmp, __str);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            arg1: *const root::std::__cxx11::string,
            arg2: *const root::std::error_code,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_failure_failure1(&mut __bindgen_tmp, arg1, arg2);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const root::std::error_code,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_failure_failure2(&mut __bindgen_tmp, arg1, arg2);
            __bindgen_tmp
        }
    }
    pub use std::_Ios_Fmtflags as ios_base_fmtflags;
    pub use std::_Ios_Iostate as ios_base_iostate;
    pub use std::_Ios_Openmode as ios_base_openmode;
    pub use std::_Ios_Seekdir as ios_base_seekdir;
    pub const ios_base_event_erase_event: root::std::ios_base_event = 0;
    pub const ios_base_event_imbue_event: root::std::ios_base_event = 1;
    pub const ios_base_event_copyfmt_event: root::std::ios_base_event = 2;
    pub type ios_base_event = u32;
    pub type ios_base_event_callback = ::std::option::Option<
        unsafe extern "C" fn(
            __e: root::std::ios_base_event,
            __b: *mut root::std::ios_base,
            __i: ::std::os::raw::c_int,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ios_base__Callback_list {
        pub _M_next: *mut root::std::ios_base__Callback_list,
        pub _M_fn: root::std::ios_base_event_callback,
        pub _M_index: ::std::os::raw::c_int,
        pub _M_refcount: root::_Atomic_word,
    }
    // #[test]
    // fn bindgen_test_layout_ios_base__Callback_list() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base__Callback_list>(),
    //         24usize,
    //         concat!("Size of: ", stringify!(ios_base__Callback_list))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base__Callback_list>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(ios_base__Callback_list))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_next as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Callback_list),
    //             "::",
    //             stringify!(_M_next)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_fn as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Callback_list),
    //             "::",
    //             stringify!(_M_fn)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_index as *const _
    //                 as usize
    //         },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Callback_list),
    //             "::",
    //             stringify!(_M_index)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_refcount as *const _
    //                 as usize
    //         },
    //         20usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Callback_list),
    //             "::",
    //             stringify!(_M_refcount)
    //         )
    //     );
    // }
    impl Default for ios_base__Callback_list {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ios_base__Words {
        pub _M_pword: *mut ::std::os::raw::c_void,
        pub _M_iword: ::std::os::raw::c_long,
    }
    // #[test]
    // fn bindgen_test_layout_ios_base__Words() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base__Words>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(ios_base__Words))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base__Words>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(ios_base__Words))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Words>()))._M_pword as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Words),
    //             "::",
    //             stringify!(_M_pword)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Words>()))._M_iword as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Words),
    //             "::",
    //             stringify!(_M_iword)
    //         )
    //     );
    // }
    impl Default for ios_base__Words {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const ios_base__S_local_word_size: root::std::ios_base__bindgen_ty_1 = 8;
    pub type ios_base__bindgen_ty_1 = u32;
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ios_base_Init {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_S_refcount"]
        pub static mut ios_base_Init__S_refcount: root::_Atomic_word;
    }
    extern "C" {
        #[link_name = "\u{1}_S_synced_with_stdio"]
        pub static mut ios_base_Init__S_synced_with_stdio: bool;
    }
    // #[test]
    // fn bindgen_test_layout_ios_base_Init() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base_Init>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(ios_base_Init))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base_Init>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(ios_base_Init))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}Init"]
        pub fn ios_base_Init_Init(this: *mut root::std::ios_base_Init);
    }
    extern "C" {
        #[link_name = "\u{1}Init_destructor"]
        pub fn ios_base_Init_Init_destructor(this: *mut root::std::ios_base_Init);
    }
    impl ios_base_Init {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_Init_Init(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ios_base_Init_Init_destructor(self)
        }
    }
    extern "C" {
        #[link_name = "\u{1}boolalpha"]
        pub static ios_base_boolalpha: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}dec"]
        pub static ios_base_dec: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}fixed"]
        pub static ios_base_fixed: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}hex"]
        pub static ios_base_hex: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}internal"]
        pub static ios_base_internal: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}left"]
        pub static ios_base_left: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}oct"]
        pub static ios_base_oct: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}right"]
        pub static ios_base_right: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}scientific"]
        pub static ios_base_scientific: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}showbase"]
        pub static ios_base_showbase: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}showpoint"]
        pub static ios_base_showpoint: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}showpos"]
        pub static ios_base_showpos: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}skipws"]
        pub static ios_base_skipws: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}unitbuf"]
        pub static ios_base_unitbuf: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}uppercase"]
        pub static ios_base_uppercase: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}adjustfield"]
        pub static ios_base_adjustfield: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}basefield"]
        pub static ios_base_basefield: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}floatfield"]
        pub static ios_base_floatfield: root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}badbit"]
        pub static ios_base_badbit: root::std::ios_base_iostate;
    }
    extern "C" {
        #[link_name = "\u{1}eofbit"]
        pub static ios_base_eofbit: root::std::ios_base_iostate;
    }
    extern "C" {
        #[link_name = "\u{1}failbit"]
        pub static ios_base_failbit: root::std::ios_base_iostate;
    }
    extern "C" {
        #[link_name = "\u{1}goodbit"]
        pub static ios_base_goodbit: root::std::ios_base_iostate;
    }
    extern "C" {
        #[link_name = "\u{1}app"]
        pub static ios_base_app: root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}ate"]
        pub static ios_base_ate: root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}binary"]
        pub static ios_base_binary: root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}in"]
        pub static ios_base_in: root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}out"]
        pub static ios_base_out: root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}trunc"]
        pub static ios_base_trunc: root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}beg"]
        pub static ios_base_beg: root::std::ios_base_seekdir;
    }
    extern "C" {
        #[link_name = "\u{1}cur"]
        pub static ios_base_cur: root::std::ios_base_seekdir;
    }
    extern "C" {
        #[link_name = "\u{1}end"]
        pub static ios_base_end: root::std::ios_base_seekdir;
    }
    // #[test]
    // fn bindgen_test_layout_ios_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base>(),
    //         216usize,
    //         concat!("Size of: ", stringify!(ios_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(ios_base))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_precision as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_precision)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_width as *const _ as usize },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_width)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_flags as *const _ as usize },
    //         24usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_flags)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_exception as *const _ as usize },
    //         28usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_exception)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base>()))._M_streambuf_state as *const _ as usize
    //         },
    //         32usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_streambuf_state)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_callbacks as *const _ as usize },
    //         40usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_callbacks)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word_zero as *const _ as usize },
    //         48usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_word_zero)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_local_word as *const _ as usize },
    //         64usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_local_word)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word_size as *const _ as usize },
    //         192usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_word_size)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word as *const _ as usize },
    //         200usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_word)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_ios_locale as *const _ as usize },
    //         208usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_ios_locale)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}register_callback"]
        pub fn ios_base_register_callback(
            this: *mut root::std::ios_base,
            __fn: root::std::ios_base_event_callback,
            __index: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_M_call_callbacks"]
        pub fn ios_base__M_call_callbacks(
            this: *mut root::std::ios_base,
            __ev: root::std::ios_base_event,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_M_dispose_callbacks"]
        pub fn ios_base__M_dispose_callbacks(this: *mut root::std::ios_base);
    }
    extern "C" {
        #[link_name = "\u{1}_M_grow_words"]
        pub fn ios_base__M_grow_words(
            this: *mut root::std::ios_base,
            __index: ::std::os::raw::c_int,
            __iword: bool,
        ) -> *mut root::std::ios_base__Words;
    }
    extern "C" {
        #[link_name = "\u{1}_M_init"]
        pub fn ios_base__M_init(this: *mut root::std::ios_base);
    }
    extern "C" {
        #[link_name = "\u{1}sync_with_stdio"]
        pub fn ios_base_sync_with_stdio(__sync: bool) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}imbue"]
        pub fn ios_base_imbue(
            this: *mut root::std::ios_base,
            __loc: *const root::std::locale,
        ) -> root::std::locale;
    }
    extern "C" {
        #[link_name = "\u{1}xalloc"]
        pub fn ios_base_xalloc() -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_M_move"]
        pub fn ios_base__M_move(this: *mut root::std::ios_base, arg1: *mut root::std::ios_base);
    }
    extern "C" {
        #[link_name = "\u{1}_M_swap"]
        pub fn ios_base__M_swap(this: *mut root::std::ios_base, __rhs: *mut root::std::ios_base);
    }
    extern "C" {
        #[link_name = "\u{1}ios_base"]
        pub fn ios_base_ios_base(this: *mut root::std::ios_base);
    }
    impl Default for ios_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ios_base {
        #[inline]
        pub unsafe fn register_callback(
            &mut self,
            __fn: root::std::ios_base_event_callback,
            __index: ::std::os::raw::c_int,
        ) {
            ios_base_register_callback(self, __fn, __index)
        }
        #[inline]
        pub unsafe fn _M_call_callbacks(&mut self, __ev: root::std::ios_base_event) {
            ios_base__M_call_callbacks(self, __ev)
        }
        #[inline]
        pub unsafe fn _M_dispose_callbacks(&mut self) {
            ios_base__M_dispose_callbacks(self)
        }
        #[inline]
        pub unsafe fn _M_grow_words(
            &mut self,
            __index: ::std::os::raw::c_int,
            __iword: bool,
        ) -> *mut root::std::ios_base__Words {
            ios_base__M_grow_words(self, __index, __iword)
        }
        #[inline]
        pub unsafe fn _M_init(&mut self) {
            ios_base__M_init(self)
        }
        #[inline]
        pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
            ios_base_sync_with_stdio(__sync)
        }
        #[inline]
        pub unsafe fn imbue(&mut self, __loc: *const root::std::locale) -> root::std::locale {
            ios_base_imbue(self, __loc)
        }
        #[inline]
        pub unsafe fn xalloc() -> ::std::os::raw::c_int {
            ios_base_xalloc()
        }
        #[inline]
        pub unsafe fn _M_move(&mut self, arg1: *mut root::std::ios_base) {
            ios_base__M_move(self, arg1)
        }
        #[inline]
        pub unsafe fn _M_swap(&mut self, __rhs: *mut root::std::ios_base) {
            ios_base__M_swap(self, __rhs)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_ios_base(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}failure_destructor"]
        pub fn ios_base_failure_failure_destructor(this: *mut root::std::ios_base_failure);
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn ios_base_failure_what(
            this: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}ios_base_destructor"]
        pub fn ios_base_ios_base_destructor(this: *mut root::std::ios_base);
    }
    #[repr(C)]
    pub struct basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_streambuf<_CharT> {
        pub vtable_: *const basic_streambuf__bindgen_vtable,
        pub _M_in_beg: *mut root::std::basic_streambuf_char_type<_CharT>,
        pub _M_in_cur: *mut root::std::basic_streambuf_char_type<_CharT>,
        pub _M_in_end: *mut root::std::basic_streambuf_char_type<_CharT>,
        pub _M_out_beg: *mut root::std::basic_streambuf_char_type<_CharT>,
        pub _M_out_cur: *mut root::std::basic_streambuf_char_type<_CharT>,
        pub _M_out_end: *mut root::std::basic_streambuf_char_type<_CharT>,
        pub _M_buf_locale: root::std::locale,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_streambuf_char_type<_CharT> = _CharT;
    pub type basic_streambuf_traits_type<_Traits> = _Traits;
    pub type basic_streambuf_int_type = [u8; 0usize];
    pub type basic_streambuf_pos_type = [u8; 0usize];
    pub type basic_streambuf_off_type = [u8; 0usize];
    pub type basic_streambuf___streambuf_type<_CharT> =
        root::std::basic_streambuf<root::std::basic_streambuf_char_type<_CharT>>;
    impl<_CharT> Default for basic_streambuf<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn __copy_streambufs_eof(
            __sbin: *mut root::std::basic_streambuf<::std::os::raw::c_char>,
            __sbout: *mut root::std::basic_streambuf<::std::os::raw::c_char>,
            __ineof: *mut bool,
        ) -> root::std::streamsize;
    }
    // #[test]
    // fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
    //         64usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
    //         64usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_streambuf<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_streambuf<u32>)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ctype_base {
        pub _address: u8,
    }
    pub type ctype_base___to_type = *const ::std::os::raw::c_int;
    pub type ctype_base_mask = ::std::os::raw::c_ushort;
    pub const ctype_base_upper: root::std::ctype_base_mask = 256;
    pub const ctype_base_lower: root::std::ctype_base_mask = 512;
    pub const ctype_base_alpha: root::std::ctype_base_mask = 1024;
    pub const ctype_base_digit: root::std::ctype_base_mask = 2048;
    pub const ctype_base_xdigit: root::std::ctype_base_mask = 4096;
    pub const ctype_base_space: root::std::ctype_base_mask = 8192;
    pub const ctype_base_print: root::std::ctype_base_mask = 16384;
    pub const ctype_base_graph: root::std::ctype_base_mask = 3076;
    pub const ctype_base_cntrl: root::std::ctype_base_mask = 2;
    pub const ctype_base_punct: root::std::ctype_base_mask = 4;
    pub const ctype_base_alnum: root::std::ctype_base_mask = 3072;
    pub const ctype_base_blank: root::std::ctype_base_mask = 1;
    // #[test]
    // fn bindgen_test_layout_ctype_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ctype_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(ctype_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ctype_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(ctype_base))
    //     );
    // }
    #[repr(C)]
    pub struct istreambuf_iterator<_CharT> {
        pub _M_sbuf: *mut root::std::istreambuf_iterator_streambuf_type<_CharT>,
        pub _M_c: root::std::istreambuf_iterator_int_type,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type istreambuf_iterator_char_type<_CharT> = _CharT;
    pub type istreambuf_iterator_traits_type<_Traits> = _Traits;
    pub type istreambuf_iterator_int_type = [u8; 0usize];
    pub type istreambuf_iterator_streambuf_type<_CharT> = root::std::basic_streambuf<_CharT>;
    pub type istreambuf_iterator_istream_type<_CharT> = root::std::basic_istream<_CharT>;
    impl<_CharT> Default for istreambuf_iterator<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_CharT> ::std::fmt::Debug for istreambuf_iterator<_CharT> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "istreambuf_iterator {{ _M_sbuf: {:?} }}", self._M_sbuf)
        }
    }
    impl<_CharT> PartialEq for istreambuf_iterator<_CharT>
    where
        _CharT: PartialEq,
    {
        fn eq(&self, other: &istreambuf_iterator<_CharT>) -> bool {
            self._M_sbuf == other._M_sbuf && self._M_c == other._M_c
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ostreambuf_iterator<_CharT> {
        pub _M_sbuf: *mut root::std::ostreambuf_iterator_streambuf_type<_CharT>,
        pub _M_failed: bool,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type ostreambuf_iterator_char_type<_CharT> = _CharT;
    pub type ostreambuf_iterator_traits_type<_Traits> = _Traits;
    pub type ostreambuf_iterator_streambuf_type<_CharT> = root::std::basic_streambuf<_CharT>;
    pub type ostreambuf_iterator_ostream_type<_CharT> = root::std::basic_ostream<_CharT>;
    impl<_CharT> Default for ostreambuf_iterator<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn __convert_to_v(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut f32,
            arg3: *mut root::std::ios_base_iostate,
            arg4: *const root::std::__c_locale,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pad {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __ctype_abstract_base {
        pub _base: root::std::locale_facet,
    }
    pub type __ctype_abstract_base_char_type<_CharT> = _CharT;
    impl Default for __ctype_abstract_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ctype {
        pub _base: root::std::__ctype_abstract_base,
    }
    pub type ctype_char_type<_CharT> = _CharT;
    pub type ctype_mask = root::std::__ctype_abstract_base;
    impl Default for ctype {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_ctype_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype>(),
    //         576usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype>(),
    //         1344usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ctype_byname {
        pub _base: root::std::ctype,
    }
    pub type ctype_byname_mask = root::std::ctype;
    impl Default for ctype_byname {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype_byname>(),
    //         576usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype_byname>(),
    //         1344usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __num_base {
        pub _address: u8,
    }
    pub const __num_base__S_ominus: root::std::__num_base__bindgen_ty_1 = 0;
    pub const __num_base__S_oplus: root::std::__num_base__bindgen_ty_1 = 1;
    pub const __num_base__S_ox: root::std::__num_base__bindgen_ty_1 = 2;
    pub const __num_base__S_oX: root::std::__num_base__bindgen_ty_1 = 3;
    pub const __num_base__S_odigits: root::std::__num_base__bindgen_ty_1 = 4;
    pub const __num_base__S_odigits_end: root::std::__num_base__bindgen_ty_1 = 20;
    pub const __num_base__S_oudigits: root::std::__num_base__bindgen_ty_1 = 20;
    pub const __num_base__S_oudigits_end: root::std::__num_base__bindgen_ty_1 = 36;
    pub const __num_base__S_oe: root::std::__num_base__bindgen_ty_1 = 18;
    pub const __num_base__S_oE: root::std::__num_base__bindgen_ty_1 = 34;
    pub const __num_base__S_oend: root::std::__num_base__bindgen_ty_1 = 36;
    pub type __num_base__bindgen_ty_1 = u32;
    pub const __num_base__S_iminus: root::std::__num_base__bindgen_ty_2 = 0;
    pub const __num_base__S_iplus: root::std::__num_base__bindgen_ty_2 = 1;
    pub const __num_base__S_ix: root::std::__num_base__bindgen_ty_2 = 2;
    pub const __num_base__S_iX: root::std::__num_base__bindgen_ty_2 = 3;
    pub const __num_base__S_izero: root::std::__num_base__bindgen_ty_2 = 4;
    pub const __num_base__S_ie: root::std::__num_base__bindgen_ty_2 = 18;
    pub const __num_base__S_iE: root::std::__num_base__bindgen_ty_2 = 24;
    pub const __num_base__S_iend: root::std::__num_base__bindgen_ty_2 = 26;
    pub type __num_base__bindgen_ty_2 = u32;
    extern "C" {
        #[link_name = "\u{1}_S_atoms_out"]
        pub static mut __num_base__S_atoms_out: *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_S_atoms_in"]
        pub static mut __num_base__S_atoms_in: *const ::std::os::raw::c_char;
    }
    // #[test]
    // fn bindgen_test_layout___num_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__num_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__num_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__num_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__num_base))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}_S_format_float"]
        pub fn __num_base__S_format_float(
            __io: *const root::std::ios_base,
            __fptr: *mut ::std::os::raw::c_char,
            __mod: ::std::os::raw::c_char,
        );
    }
    impl __num_base {
        #[inline]
        pub unsafe fn _S_format_float(
            __io: *const root::std::ios_base,
            __fptr: *mut ::std::os::raw::c_char,
            __mod: ::std::os::raw::c_char,
        ) {
            __num_base__S_format_float(__io, __fptr, __mod)
        }
    }
    #[repr(C)]
    pub struct __numpunct_cache<_CharT> {
        pub _base: root::std::locale_facet,
        pub _M_grouping: *const ::std::os::raw::c_char,
        pub _M_grouping_size: usize,
        pub _M_use_grouping: bool,
        pub _M_truename: *const _CharT,
        pub _M_truename_size: usize,
        pub _M_falsename: *const _CharT,
        pub _M_falsename_size: usize,
        pub _M_decimal_point: _CharT,
        pub _M_thousands_sep: _CharT,
        pub _M_atoms_out: [_CharT; 36usize],
        pub _M_atoms_in: [_CharT; 26usize],
        pub _M_allocated: bool,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    impl<_CharT> Default for __numpunct_cache<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_CharT> ::std::fmt::Debug for __numpunct_cache<_CharT> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "__numpunct_cache {{ _M_grouping: {:?}, _M_grouping_size: {:?}, _M_use_grouping: {:?}, _M_truename: {:?}, _M_truename_size: {:?}, _M_falsename: {:?}, _M_falsename_size: {:?}, _M_decimal_point: Non-debuggable generic, _M_thousands_sep: Non-debuggable generic, _M_atoms_out: Array with length 36, _M_atoms_in: Array with length 26, _M_allocated: {:?} }}" , self . _M_grouping , self . _M_grouping_size , self . _M_use_grouping , self . _M_truename , self . _M_truename_size , self . _M_falsename , self . _M_falsename_size , self . _M_allocated )
        }
    }
    impl<_CharT> PartialEq for __numpunct_cache<_CharT>
    where
        _CharT: PartialEq,
    {
        fn eq(&self, other: &__numpunct_cache<_CharT>) -> bool {
            self._base == other._base
                && self._M_grouping == other._M_grouping
                && self._M_grouping_size == other._M_grouping_size
                && self._M_use_grouping == other._M_use_grouping
                && self._M_truename == other._M_truename
                && self._M_truename_size == other._M_truename_size
                && self._M_falsename == other._M_falsename
                && self._M_falsename_size == other._M_falsename_size
                && self._M_decimal_point == other._M_decimal_point
                && self._M_thousands_sep == other._M_thousands_sep
                && &self._M_atoms_out[..] == &other._M_atoms_out[..]
                && self._M_atoms_in == other._M_atoms_in
                && self._M_allocated == other._M_allocated
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct num_get {
        pub _base: root::std::locale_facet,
    }
    pub type num_get_char_type<_CharT> = _CharT;
    pub type num_get_iter_type<_InIter> = _InIter;
    impl Default for num_get {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct num_put {
        pub _base: root::std::locale_facet,
    }
    pub type num_put_char_type<_CharT> = _CharT;
    pub type num_put_iter_type<_OutIter> = _OutIter;
    impl Default for num_put {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __use_cache {
        pub _address: u8,
    }
    extern "C" {
        pub fn __verify_grouping(
            __grouping: *const ::std::os::raw::c_char,
            __grouping_size: usize,
            __grouping_tmp: *const root::std::__cxx11::string,
        ) -> bool;
    }
    // #[test]
    // fn __bindgen_test_layout_numpunct_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::numpunct<::std::os::raw::c_char>>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::numpunct<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numpunct_byname_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::numpunct_byname<::std::os::raw::c_char>>(
    //         ),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct_byname<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::numpunct_byname<::std::os::raw::c_char>>(
    //         ),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct_byname<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_num_get_open0_char_istreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::num_get>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::num_get)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::num_get>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::num_get)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_num_put_open0_char_ostreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::num_put>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::num_put)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::num_put>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::num_put)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numpunct_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::numpunct<u32>>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::numpunct<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numpunct_byname_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::numpunct_byname<u32>>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct_byname<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::numpunct_byname<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct_byname<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_num_get_open0_wchar_t_istreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::num_get>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::num_get)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::num_get>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::num_get)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_num_put_open0_wchar_t_ostreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::num_put>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::num_put)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::num_put>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::num_put)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_ios<_CharT> {
        pub _base: root::std::ios_base,
        pub _M_tie: *mut root::std::basic_ostream<_CharT>,
        pub _M_fill: root::std::basic_ios_char_type<_CharT>,
        pub _M_fill_init: bool,
        pub _M_streambuf: *mut root::std::basic_streambuf<_CharT>,
        pub _M_ctype: *const root::std::basic_ios___ctype_type,
        pub _M_num_put: *const root::std::basic_ios___num_put_type,
        pub _M_num_get: *const root::std::basic_ios___num_get_type,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_ios_char_type<_CharT> = _CharT;
    pub type basic_ios_int_type = [u8; 0usize];
    pub type basic_ios_pos_type = [u8; 0usize];
    pub type basic_ios_off_type = [u8; 0usize];
    pub type basic_ios_traits_type<_Traits> = _Traits;
    pub type basic_ios___ctype_type = root::std::ctype;
    pub type basic_ios___num_put_type = root::std::num_put;
    pub type basic_ios___num_get_type = root::std::num_get;
    impl<_CharT> Default for basic_ios<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ios<::std::os::raw::c_char>>(),
    //         264usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ios<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ios<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ios<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ios<u32>>(),
    //         264usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ios<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ios<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ios<u32>)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_ostream<_CharT> {
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_ostream_char_type<_CharT> = _CharT;
    pub type basic_ostream_int_type = [u8; 0usize];
    pub type basic_ostream_pos_type = [u8; 0usize];
    pub type basic_ostream_off_type = [u8; 0usize];
    pub type basic_ostream_traits_type<_Traits> = _Traits;
    pub type basic_ostream___streambuf_type<_CharT> = root::std::basic_streambuf<_CharT>;
    pub type basic_ostream___ios_type<_CharT> = root::std::basic_ios<_CharT>;
    pub type basic_ostream___ostream_type<_CharT> = root::std::basic_ostream<_CharT>;
    pub type basic_ostream___num_put_type = root::std::num_put;
    pub type basic_ostream___ctype_type = root::std::ctype;
    impl<_CharT> Default for basic_ostream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_ostream_sentry {
        pub _M_ok: bool,
        pub _M_os: *mut root::std::basic_ostream<_CharT>,
    }
    impl Default for basic_ostream_sentry {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_convertible_to_basic_ostream_impl {
        pub _address: u8,
    }
    pub type __is_convertible_to_basic_ostream_impl___ostream_type = ::std::os::raw::c_void;
    pub type __do_is_convertible_to_basic_ostream_impl = root::std::remove_reference;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_convertible_to_basic_ostream {
        pub _address: u8,
    }
    pub type __is_convertible_to_basic_ostream_type = root::std::__not_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_insertable {
        pub _base: root::std::false_type,
    }
    pub type __rvalue_ostream_type = root::std::__is_convertible_to_basic_ostream;
    // #[test]
    // fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ostream<::std::os::raw::c_char>>(),
    //         272usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ostream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ostream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ostream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ostream<u32>>(),
    //         272usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ostream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ostream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ostream<u32>)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_istream<_CharT> {
        pub _M_gcount: root::std::streamsize,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_istream_char_type<_CharT> = _CharT;
    pub type basic_istream_int_type = [u8; 0usize];
    pub type basic_istream_pos_type = [u8; 0usize];
    pub type basic_istream_off_type = [u8; 0usize];
    pub type basic_istream_traits_type<_Traits> = _Traits;
    pub type basic_istream___streambuf_type<_CharT> = root::std::basic_streambuf<_CharT>;
    pub type basic_istream___ios_type<_CharT> = root::std::basic_ios<_CharT>;
    pub type basic_istream___istream_type<_CharT> = root::std::basic_istream<_CharT>;
    pub type basic_istream___num_get_type = root::std::num_get;
    pub type basic_istream___ctype_type = root::std::ctype;
    impl<_CharT> Default for basic_istream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_istream_sentry {
        pub _M_ok: bool,
    }
    pub type basic_istream_sentry_traits_type = _Traits;
    pub type basic_istream_sentry___streambuf_type = root::std::basic_streambuf<_CharT>;
    pub type basic_istream_sentry___istream_type = root::std::basic_istream<_CharT>;
    pub type basic_istream_sentry___ctype_type = root::std::basic_istream___ctype_type;
    pub type basic_istream_sentry___int_type = [u8; 0usize];
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_iostream<_CharT> {
        pub _base: root::std::basic_istream<_CharT>,
        pub _base_1: root::std::basic_ostream<_CharT>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_iostream_char_type<_CharT> = _CharT;
    pub type basic_iostream_int_type = [u8; 0usize];
    pub type basic_iostream_pos_type = [u8; 0usize];
    pub type basic_iostream_off_type = [u8; 0usize];
    pub type basic_iostream_traits_type<_Traits> = _Traits;
    pub type basic_iostream___istream_type<_CharT> = root::std::basic_istream<_CharT>;
    pub type basic_iostream___ostream_type<_CharT> = root::std::basic_ostream<_CharT>;
    impl<_CharT> Default for basic_iostream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_convertible_to_basic_istream_impl {
        pub _address: u8,
    }
    pub type __is_convertible_to_basic_istream_impl___istream_type = ::std::os::raw::c_void;
    pub type __do_is_convertible_to_basic_istream_impl = root::std::remove_reference;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_convertible_to_basic_istream {
        pub _address: u8,
    }
    pub type __is_convertible_to_basic_istream_type = root::std::__not_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_extractable {
        pub _base: root::std::false_type,
    }
    pub type __rvalue_istream_type = root::std::__is_convertible_to_basic_istream;
    // #[test]
    // fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
    //         280usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_iostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_iostream<::std::os::raw::c_char>>(),
    //         288usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_iostream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_iostream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_iostream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_istream<u32>>(),
    //         280usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_istream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_istream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_istream<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_iostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_iostream<u32>>(),
    //         288usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_iostream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_iostream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_iostream<u32>)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct codecvt_base {
        pub _address: u8,
    }
    pub const codecvt_base_result_ok: root::std::codecvt_base_result = 0;
    pub const codecvt_base_result_partial: root::std::codecvt_base_result = 1;
    pub const codecvt_base_result_error: root::std::codecvt_base_result = 2;
    pub const codecvt_base_result_noconv: root::std::codecvt_base_result = 3;
    pub type codecvt_base_result = u32;
    // #[test]
    // fn bindgen_test_layout_codecvt_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<codecvt_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(codecvt_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<codecvt_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(codecvt_base))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __codecvt_abstract_base {
        pub _base: root::std::locale_facet,
    }
    pub use std::codecvt_base_result as __codecvt_abstract_base_result;
    pub type __codecvt_abstract_base_intern_type<_InternT> = _InternT;
    pub type __codecvt_abstract_base_extern_type<_ExternT> = _ExternT;
    pub type __codecvt_abstract_base_state_type<_StateT> = _StateT;
    impl Default for __codecvt_abstract_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct codecvt {
        pub _base: root::std::__codecvt_abstract_base,
        pub _M_c_locale_codecvt: root::std::__c_locale,
    }
    pub use std::codecvt_base_result as codecvt_result;
    pub type codecvt_intern_type<_InternT> = _InternT;
    pub type codecvt_extern_type<_ExternT> = _ExternT;
    pub type codecvt_state_type<_StateT> = _StateT;
    impl Default for codecvt {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_codecvt_open0_char_char___mbstate_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_open0_wchar_t_char___mbstate_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_open0_char16_t_char___mbstate_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_open0_char32_t_char___mbstate_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct codecvt_byname {
        pub _base: root::std::codecvt,
    }
    impl Default for codecvt_byname {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_codecvt_byname_open0_char16_t_char___mbstate_t_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt_byname>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_byname_open0_char32_t_char___mbstate_t_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt_byname>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_byname_open0_char_char___mbstate_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt_byname>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_byname_open0_wchar_t_char___mbstate_t_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt_byname>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    // }
    pub type __c_lock = root::__gthread_mutex_t;
    pub type __c_file = root::FILE;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __basic_file {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___basic_file_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__basic_file>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__basic_file)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__basic_file>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__basic_file)
    //         )
    //     );
    // }
    pub type _If_fs_path = root::std::enable_if_t;
    #[repr(C)]
    pub struct basic_filebuf<_CharT> {
        pub _base: root::std::basic_streambuf<_CharT>,
        pub _M_lock: root::std::__c_lock,
        pub _M_file: root::std::basic_filebuf___file_type,
        pub _M_mode: root::std::ios_base_openmode,
        pub _M_state_beg: root::std::basic_filebuf___state_type,
        pub _M_state_cur: root::std::basic_filebuf___state_type,
        pub _M_state_last: root::std::basic_filebuf___state_type,
        pub _M_buf: *mut root::std::basic_filebuf_char_type<_CharT>,
        pub _M_buf_size: usize,
        pub _M_buf_allocated: bool,
        pub _M_reading: bool,
        pub _M_writing: bool,
        pub _M_pback: root::std::basic_filebuf_char_type<_CharT>,
        pub _M_pback_cur_save: *mut root::std::basic_filebuf_char_type<_CharT>,
        pub _M_pback_end_save: *mut root::std::basic_filebuf_char_type<_CharT>,
        pub _M_pback_init: bool,
        pub _M_codecvt: *const root::std::basic_filebuf___codecvt_type,
        pub _M_ext_buf: *mut ::std::os::raw::c_char,
        pub _M_ext_buf_size: root::std::streamsize,
        pub _M_ext_next: *const ::std::os::raw::c_char,
        pub _M_ext_end: *mut ::std::os::raw::c_char,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_filebuf___chk_state = root::std::__and_;
    pub type basic_filebuf_char_type<_CharT> = _CharT;
    pub type basic_filebuf_traits_type<_Traits> = _Traits;
    pub type basic_filebuf_int_type = [u8; 0usize];
    pub type basic_filebuf_pos_type = [u8; 0usize];
    pub type basic_filebuf_off_type = [u8; 0usize];
    pub type basic_filebuf___streambuf_type<_CharT> =
        root::std::basic_streambuf<root::std::basic_filebuf_char_type<_CharT>>;
    pub type basic_filebuf___filebuf_type<_CharT> =
        root::std::basic_filebuf<root::std::basic_filebuf_char_type<_CharT>>;
    pub type basic_filebuf___file_type = root::std::__basic_file;
    pub type basic_filebuf___state_type = [u8; 0usize];
    pub type basic_filebuf___codecvt_type = root::std::codecvt;
    impl<_CharT> Default for basic_filebuf<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_CharT> ::std::fmt::Debug for basic_filebuf<_CharT> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "basic_filebuf {{ _M_lock: {:?}, _M_file: {:?}, _M_mode: {:?}, _M_buf: {:?}, _M_buf_size: {:?}, _M_buf_allocated: {:?}, _M_reading: {:?}, _M_writing: {:?}, _M_pback: Non-debuggable generic, _M_pback_cur_save: {:?}, _M_pback_end_save: {:?}, _M_pback_init: {:?}, _M_codecvt: {:?}, _M_ext_buf: {:?}, _M_ext_buf_size: {:?}, _M_ext_next: {:?}, _M_ext_end: {:?} }}" , self . _M_lock , self . _M_file , self . _M_mode , self . _M_buf , self . _M_buf_size , self . _M_buf_allocated , self . _M_reading , self . _M_writing , self . _M_pback_cur_save , self . _M_pback_end_save , self . _M_pback_init , self . _M_codecvt , self . _M_ext_buf , self . _M_ext_buf_size , self . _M_ext_next , self . _M_ext_end )
        }
    }
    #[repr(C)]
    pub struct basic_ifstream<_CharT> {
        pub _base: root::std::basic_istream<_CharT>,
        pub _M_filebuf: root::std::basic_ifstream___filebuf_type<_CharT>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_ifstream_char_type<_CharT> = _CharT;
    pub type basic_ifstream_traits_type<_Traits> = _Traits;
    pub type basic_ifstream_int_type = [u8; 0usize];
    pub type basic_ifstream_pos_type = [u8; 0usize];
    pub type basic_ifstream_off_type = [u8; 0usize];
    pub type basic_ifstream___filebuf_type<_CharT> =
        root::std::basic_filebuf<root::std::basic_ifstream_char_type<_CharT>>;
    pub type basic_ifstream___istream_type<_CharT> =
        root::std::basic_istream<root::std::basic_ifstream_char_type<_CharT>>;
    impl<_CharT> Default for basic_ifstream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_CharT> ::std::fmt::Debug for basic_ifstream<_CharT> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "basic_ifstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
        }
    }
    #[repr(C)]
    pub struct basic_ofstream<_CharT> {
        pub _base: root::std::basic_ostream<_CharT>,
        pub _M_filebuf: root::std::basic_ofstream___filebuf_type<_CharT>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_ofstream_char_type<_CharT> = _CharT;
    pub type basic_ofstream_traits_type<_Traits> = _Traits;
    pub type basic_ofstream_int_type = [u8; 0usize];
    pub type basic_ofstream_pos_type = [u8; 0usize];
    pub type basic_ofstream_off_type = [u8; 0usize];
    pub type basic_ofstream___filebuf_type<_CharT> =
        root::std::basic_filebuf<root::std::basic_ofstream_char_type<_CharT>>;
    pub type basic_ofstream___ostream_type<_CharT> =
        root::std::basic_ostream<root::std::basic_ofstream_char_type<_CharT>>;
    impl<_CharT> Default for basic_ofstream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_CharT> ::std::fmt::Debug for basic_ofstream<_CharT> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "basic_ofstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
        }
    }
    #[repr(C)]
    pub struct basic_fstream<_CharT> {
        pub _base: root::std::basic_iostream<_CharT>,
        pub _M_filebuf: root::std::basic_fstream___filebuf_type<_CharT>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_fstream_char_type<_CharT> = _CharT;
    pub type basic_fstream_traits_type<_Traits> = _Traits;
    pub type basic_fstream_int_type = [u8; 0usize];
    pub type basic_fstream_pos_type = [u8; 0usize];
    pub type basic_fstream_off_type = [u8; 0usize];
    pub type basic_fstream___filebuf_type<_CharT> =
        root::std::basic_filebuf<root::std::basic_fstream_char_type<_CharT>>;
    pub type basic_fstream___ios_type<_CharT> =
        root::std::basic_ios<root::std::basic_fstream_char_type<_CharT>>;
    pub type basic_fstream___iostream_type<_CharT> =
        root::std::basic_iostream<root::std::basic_fstream_char_type<_CharT>>;
    impl<_CharT> Default for basic_fstream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_CharT> ::std::fmt::Debug for basic_fstream<_CharT> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "basic_fstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
        }
    }
    // #[test]
    // fn __bindgen_test_layout_basic_filebuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_filebuf<::std::os::raw::c_char>>(),
    //         240usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_filebuf<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_filebuf<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_filebuf<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ifstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ifstream<::std::os::raw::c_char>>(),
    //         520usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ifstream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ifstream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ifstream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ofstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ofstream<::std::os::raw::c_char>>(),
    //         512usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ofstream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ofstream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ofstream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_fstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_fstream<::std::os::raw::c_char>>(),
    //         528usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_fstream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_fstream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_fstream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_filebuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_filebuf<u32>>(),
    //         240usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_filebuf<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_filebuf<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_filebuf<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ifstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ifstream<u32>>(),
    //         520usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ifstream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ifstream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ifstream<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ofstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ofstream<u32>>(),
    //         512usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ofstream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ofstream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ofstream<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_fstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_fstream<u32>>(),
    //         528usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_fstream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_fstream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_fstream<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_stringbuf_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::basic_stringbuf<::std::os::raw::c_char>>(
    //         ),
    //         104usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_stringbuf<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::basic_stringbuf<::std::os::raw::c_char>>(
    //         ),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_stringbuf<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_istringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<
    //             root::std::__cxx11::basic_istringstream<::std::os::raw::c_char>,
    //         >(),
    //         384usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_istringstream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<
    //             root::std::__cxx11::basic_istringstream<::std::os::raw::c_char>,
    //         >(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_istringstream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ostringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<
    //             root::std::__cxx11::basic_ostringstream<::std::os::raw::c_char>,
    //         >(),
    //         376usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_ostringstream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<
    //             root::std::__cxx11::basic_ostringstream<::std::os::raw::c_char>,
    //         >(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_ostringstream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_stringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::basic_stringstream<::std::os::raw::c_char>>(
    //         ),
    //         392usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_stringstream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<
    //             root::std::__cxx11::basic_stringstream<::std::os::raw::c_char>,
    //         >(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_stringstream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_stringbuf_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::basic_stringbuf<u32>>(),
    //         104usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_stringbuf<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::basic_stringbuf<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_stringbuf<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_istringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::basic_istringstream<u32>>(),
    //         384usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_istringstream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::basic_istringstream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_istringstream<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ostringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
    //         376usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_ostringstream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_ostringstream<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_stringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::basic_stringstream<u32>>(),
    //         392usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_stringstream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::basic_stringstream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::basic_stringstream<u32>)
    //         )
    //     );
    // }
    extern "C" {
        pub static mut cin: root::std::istream;
    }
    extern "C" {
        pub static mut cout: root::std::ostream;
    }
    extern "C" {
        pub static mut cerr: root::std::ostream;
    }
    extern "C" {
        pub static mut clog: root::std::ostream;
    }
    extern "C" {
        pub static mut wcin: root::std::wistream;
    }
    extern "C" {
        pub static mut wcout: root::std::wostream;
    }
    extern "C" {
        pub static mut wcerr: root::std::wostream;
    }
    extern "C" {
        pub static mut wclog: root::std::wostream;
    }
    extern "C" {
        pub static mut __ioinit: root::std::ios_base_Init;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __allocated_ptr<_Alloc> {
        pub _M_alloc: *mut _Alloc,
        pub _M_ptr: root::std::__allocated_ptr_pointer,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    }
    pub type __allocated_ptr_pointer = root::std::allocator_traits;
    pub type __allocated_ptr_value_type = root::std::allocator_traits;
    impl<_Alloc> Default for __allocated_ptr<_Alloc> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _List_node {
        pub _base: root::std::__detail::_List_node_base,
        pub _M_storage: root::__gnu_cxx::__aligned_membuf,
    }
    impl Default for _List_node {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _List_iterator {
        pub _M_node: *mut root::std::__detail::_List_node_base,
    }
    pub type _List_iterator__Self = root::std::_List_iterator;
    pub type _List_iterator__Node = root::std::_List_node;
    pub type _List_iterator_difference_type = isize;
    pub type _List_iterator_iterator_category = root::std::bidirectional_iterator_tag;
    pub type _List_iterator_value_type<_Tp> = _Tp;
    pub type _List_iterator_pointer<_Tp> = *mut _Tp;
    pub type _List_iterator_reference<_Tp> = *mut _Tp;
    impl Default for _List_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _List_const_iterator {
        pub _M_node: *const root::std::__detail::_List_node_base,
    }
    pub type _List_const_iterator__Self = root::std::_List_const_iterator;
    pub type _List_const_iterator__Node = root::std::_List_node;
    pub type _List_const_iterator_iterator = root::std::_List_iterator;
    pub type _List_const_iterator_difference_type = isize;
    pub type _List_const_iterator_iterator_category = root::std::bidirectional_iterator_tag;
    pub type _List_const_iterator_value_type<_Tp> = _Tp;
    pub type _List_const_iterator_pointer<_Tp> = *const _Tp;
    pub type _List_const_iterator_reference<_Tp> = *const _Tp;
    impl Default for _List_const_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_allocator_open0_void_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_open0_char_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype>(),
    //         576usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype>(),
    //         1344usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_open0_char_char___mbstate_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_open0_wchar_t_char___mbstate_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype_byname>(),
    //         576usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype_byname>(),
    //         1344usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_byname_open0_char16_t_char___mbstate_t_close0_instantiation_1(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt_byname>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_codecvt_byname_open0_char32_t_char___mbstate_t_close0_instantiation_1(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::codecvt_byname>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::codecvt_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::codecvt_byname)
    //         )
    //     );
    // }
}
pub mod __gnu_cxx {

    pub type __conditional_type___type<_Iftrue> = _Iftrue;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __add_unsigned {
        pub _address: u8,
    }
    pub type __add_unsigned___if_type = u8;
    pub type __add_unsigned___type = root::__gnu_cxx::__add_unsigned___if_type;
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __remove_unsigned {
        pub _address: u8,
    }
    pub type __remove_unsigned___if_type = u8;
    pub type __remove_unsigned___type = root::__gnu_cxx::__remove_unsigned___if_type;
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    pub type __promote___type = f64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __promote_2 {
        pub _address: u8,
    }
    pub type __promote_2___type<_Tp2> = _Tp2;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __promote_3 {
        pub _address: u8,
    }
    pub type __promote_3___type<_Tp2> = _Tp2;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __promote_4 {
        pub _address: u8,
    }
    pub type __promote_4___type<_Tp2> = _Tp2;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __numeric_traits_integer {
        pub _address: u8,
    }
    extern "C" {
        pub static __min: _Value;
    }
    extern "C" {
        pub static __max: _Value;
    }
    extern "C" {
        pub static __is_signed: bool;
    }
    extern "C" {
        pub static __digits: ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __numeric_traits_floating {
        pub _address: u8,
    }
    extern "C" {
        pub static __max_digits10: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static __digits10: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static __max_exponent10: ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __numeric_traits {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __normal_iterator<_Iterator> {
        pub _M_current: _Iterator,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    }
    pub type __normal_iterator___traits_type = root::std::iterator_traits;
    pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
    pub type __normal_iterator_iterator_category = root::__gnu_cxx::__normal_iterator___traits_type;
    pub type __normal_iterator_value_type = root::__gnu_cxx::__normal_iterator___traits_type;
    pub type __normal_iterator_difference_type = root::__gnu_cxx::__normal_iterator___traits_type;
    pub type __normal_iterator_reference = root::__gnu_cxx::__normal_iterator___traits_type;
    pub type __normal_iterator_pointer = root::__gnu_cxx::__normal_iterator___traits_type;
    impl<_Iterator> Default for __normal_iterator<_Iterator> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub mod __ops {

        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_less_iter {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Iter_less_iter() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Iter_less_iter>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Iter_less_iter))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Iter_less_iter>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Iter_less_iter))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_less_val {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Iter_less_val() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Iter_less_val>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Iter_less_val))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Iter_less_val>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Iter_less_val))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Val_less_iter {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Val_less_iter() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Val_less_iter>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Val_less_iter))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Val_less_iter>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Val_less_iter))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_equal_to_iter {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Iter_equal_to_iter() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Iter_equal_to_iter>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Iter_equal_to_iter))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Iter_equal_to_iter>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Iter_equal_to_iter))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_equal_to_val {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Iter_equal_to_val() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Iter_equal_to_val>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Iter_equal_to_val))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Iter_equal_to_val>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Iter_equal_to_val))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_comp_iter<_Compare> {
            pub _M_comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for _Iter_comp_iter<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_comp_val<_Compare> {
            pub _M_comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for _Iter_comp_val<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Val_comp_iter<_Compare> {
            pub _M_comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for _Val_comp_iter<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_equals_val<_Value> {
            pub _M_value: *mut _Value,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
        }
        impl<_Value> Default for _Iter_equals_val<_Value> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_equals_iter<_Iterator1> {
            pub _M_it1: _Iterator1,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
        }
        impl<_Iterator1> Default for _Iter_equals_iter<_Iterator1> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_pred<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for _Iter_pred<_Predicate> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_comp_to_val<_Compare, _Value> {
            pub _M_comp: _Compare,
            pub _M_value: *mut _Value,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
        }
        impl<_Compare, _Value> Default for _Iter_comp_to_val<_Compare, _Value> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
            pub _M_comp: _Compare,
            pub _M_it1: _Iterator1,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
        }
        impl<_Compare, _Iterator1> Default for _Iter_comp_to_iter<_Compare, _Iterator1> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for _Iter_negate<_Predicate> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
    }
    extern "C" {
        pub fn __verbose_terminate_handler();
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct new_allocator {
        pub _address: u8,
    }
    pub type new_allocator_size_type = usize;
    pub type new_allocator_difference_type = isize;
    pub type new_allocator_pointer<_Tp> = *mut _Tp;
    pub type new_allocator_const_pointer<_Tp> = *const _Tp;
    pub type new_allocator_reference<_Tp> = *mut _Tp;
    pub type new_allocator_const_reference<_Tp> = *const _Tp;
    pub type new_allocator_value_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct new_allocator_rebind {
        pub _address: u8,
    }
    pub type new_allocator_rebind_other = root::__gnu_cxx::new_allocator;
    pub type new_allocator_propagate_on_container_move_assignment = root::std::true_type;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __alloc_traits {
        pub _address: u8,
    }
    pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
    pub type __alloc_traits__Base_type = root::std::allocator_traits;
    pub type __alloc_traits_value_type = root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_const_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_size_type = root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_difference_type = root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_reference = *mut root::__gnu_cxx::__alloc_traits_value_type;
    pub type __alloc_traits_const_reference = *const root::__gnu_cxx::__alloc_traits_value_type;
    pub type __alloc_traits___is_custom_pointer = root::std::__and_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __alloc_traits_rebind {
        pub _address: u8,
    }
    pub type __alloc_traits_rebind_other = root::__gnu_cxx::__alloc_traits__Base_type;
    impl Default for __alloc_traits {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __aligned_membuf {
        pub _M_storage: *mut ::std::os::raw::c_uchar,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __aligned_membuf__Tp2<_Tp> {
        pub _M_t: _Tp,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    }
    impl<_Tp> Default for __aligned_membuf__Tp2<_Tp> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Default for __aligned_membuf {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __aligned_buffer {
        pub _M_storage: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Char_types {
        pub _address: u8,
    }
    pub type _Char_types_int_type = ::std::os::raw::c_ulong;
    pub type _Char_types_pos_type = root::std::streampos;
    pub type _Char_types_off_type = root::std::streamoff;
    pub type _Char_types_state_type = root::mbstate_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct char_traits {
        pub _address: u8,
    }
    pub type char_traits_char_type<_CharT> = _CharT;
    pub type char_traits_int_type = root::__gnu_cxx::_Char_types;
    pub type char_traits_pos_type = root::__gnu_cxx::_Char_types;
    pub type char_traits_off_type = root::__gnu_cxx::_Char_types;
    pub type char_traits_state_type = root::__gnu_cxx::_Char_types;
    extern "C" {
        pub fn __uselocale(arg1: root::locale_t) -> root::locale_t;
    }
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = f64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_div_t() {
//     assert_eq!(
//         ::std::mem::size_of::<div_t>(),
//         8usize,
//         concat!("Size of: ", stringify!(div_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<div_t>(),
//         4usize,
//         concat!("Alignment of ", stringify!(div_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(div_t),
//             "::",
//             stringify!(quot)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(div_t),
//             "::",
//             stringify!(rem)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
// #[test]
// fn bindgen_test_layout_ldiv_t() {
//     assert_eq!(
//         ::std::mem::size_of::<ldiv_t>(),
//         16usize,
//         concat!("Size of: ", stringify!(ldiv_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<ldiv_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(ldiv_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(ldiv_t),
//             "::",
//             stringify!(quot)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(ldiv_t),
//             "::",
//             stringify!(rem)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
// #[test]
// fn bindgen_test_layout_lldiv_t() {
//     assert_eq!(
//         ::std::mem::size_of::<lldiv_t>(),
//         16usize,
//         concat!("Size of: ", stringify!(lldiv_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<lldiv_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(lldiv_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lldiv_t),
//             "::",
//             stringify!(quot)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lldiv_t),
//             "::",
//             stringify!(rem)
//         )
//     );
// }
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> root::_Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> root::_Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> root::_Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> root::_Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: root::_Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: root::_Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: root::_Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: root::_Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __locale_struct {
    pub __locales: [*mut root::__locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
// #[test]
// fn bindgen_test_layout___locale_struct() {
//     assert_eq!(
//         ::std::mem::size_of::<__locale_struct>(),
//         232usize,
//         concat!("Size of: ", stringify!(__locale_struct))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__locale_struct>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__locale_struct))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__locales)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
//         104usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__ctype_b)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize
//         },
//         112usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__ctype_tolower)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize
//         },
//         120usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__ctype_toupper)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
//         128usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__names)
//         )
//     );
// }
impl Default for __locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut root::__locale_struct;
pub type locale_t = root::__locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: root::locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: root::locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: root::locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: root::locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: root::locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: root::locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: root::locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: root::locale_t,
    ) -> root::_Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: root::locale_t,
    ) -> root::_Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: root::locale_t,
    ) -> root::_Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: root::locale_t,
    ) -> root::_Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = root::__int8_t;
pub type __uint_least8_t = root::__uint8_t;
pub type __int_least16_t = root::__int16_t;
pub type __uint_least16_t = root::__uint16_t;
pub type __int_least32_t = root::__int32_t;
pub type __uint_least32_t = root::__uint32_t;
pub type __int_least64_t = root::__int64_t;
pub type __uint_least64_t = root::__uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
// #[test]
// fn bindgen_test_layout___fsid_t() {
//     assert_eq!(
//         ::std::mem::size_of::<__fsid_t>(),
//         8usize,
//         concat!("Size of: ", stringify!(__fsid_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__fsid_t>(),
//         4usize,
//         concat!("Alignment of ", stringify!(__fsid_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__fsid_t),
//             "::",
//             stringify!(__val)
//         )
//     );
// }
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = root::__off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = root::__u_char;
pub type u_short = root::__u_short;
pub type u_int = root::__u_int;
pub type u_long = root::__u_long;
pub type quad_t = root::__quad_t;
pub type u_quad_t = root::__u_quad_t;
pub type fsid_t = root::__fsid_t;
pub type loff_t = root::__loff_t;
pub type ino_t = root::__ino_t;
pub type ino64_t = root::__ino64_t;
pub type dev_t = root::__dev_t;
pub type gid_t = root::__gid_t;
pub type mode_t = root::__mode_t;
pub type nlink_t = root::__nlink_t;
pub type uid_t = root::__uid_t;
pub type off_t = root::__off_t;
pub type off64_t = root::__off64_t;
pub type pid_t = root::__pid_t;
pub type id_t = root::__id_t;
pub type daddr_t = root::__daddr_t;
pub type caddr_t = root::__caddr_t;
pub type key_t = root::__key_t;
pub type clock_t = root::__clock_t;
pub type clockid_t = root::__clockid_t;
pub type time_t = root::__time_t;
pub type timer_t = root::__timer_t;
pub type useconds_t = root::__useconds_t;
pub type suseconds_t = root::__suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
// #[test]
// fn bindgen_test_layout___sigset_t() {
//     assert_eq!(
//         ::std::mem::size_of::<__sigset_t>(),
//         128usize,
//         concat!("Size of: ", stringify!(__sigset_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__sigset_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__sigset_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__sigset_t),
//             "::",
//             stringify!(__val)
//         )
//     );
// }
pub type sigset_t = root::__sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct timeval {
    pub tv_sec: root::__time_t,
    pub tv_usec: root::__suseconds_t,
}
// #[test]
// fn bindgen_test_layout_timeval() {
//     assert_eq!(
//         ::std::mem::size_of::<timeval>(),
//         16usize,
//         concat!("Size of: ", stringify!(timeval))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<timeval>(),
//         8usize,
//         concat!("Alignment of ", stringify!(timeval))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timeval),
//             "::",
//             stringify!(tv_sec)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timeval),
//             "::",
//             stringify!(tv_usec)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct timespec {
    pub tv_sec: root::__time_t,
    pub tv_nsec: root::__syscall_slong_t,
}
// #[test]
// fn bindgen_test_layout_timespec() {
//     assert_eq!(
//         ::std::mem::size_of::<timespec>(),
//         16usize,
//         concat!("Size of: ", stringify!(timespec))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<timespec>(),
//         8usize,
//         concat!("Alignment of ", stringify!(timespec))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timespec),
//             "::",
//             stringify!(tv_sec)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timespec),
//             "::",
//             stringify!(tv_nsec)
//         )
//     );
// }
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct fd_set {
    pub fds_bits: [self::__fd_mask; 16usize],
}
// #[test]
// fn bindgen_test_layout_fd_set() {
//     assert_eq!(
//         ::std::mem::size_of::<fd_set>(),
//         128usize,
//         concat!("Size of: ", stringify!(fd_set))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<fd_set>(),
//         8usize,
//         concat!("Alignment of ", stringify!(fd_set))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(fd_set),
//             "::",
//             stringify!(fds_bits)
//         )
//     );
// }
pub type fd_mask = root::__fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut root::fd_set,
        __writefds: *mut root::fd_set,
        __exceptfds: *mut root::fd_set,
        __timeout: *mut root::timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut root::fd_set,
        __writefds: *mut root::fd_set,
        __exceptfds: *mut root::fd_set,
        __timeout: *const root::timespec,
        __sigmask: *const root::__sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = root::__blksize_t;
pub type blkcnt_t = root::__blkcnt_t;
pub type fsblkcnt_t = root::__fsblkcnt_t;
pub type fsfilcnt_t = root::__fsfilcnt_t;
pub type blkcnt64_t = root::__blkcnt64_t;
pub type fsblkcnt64_t = root::__fsblkcnt64_t;
pub type fsfilcnt64_t = root::__fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
// #[test]
// fn bindgen_test_layout___pthread_rwlock_arch_t() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
//         56usize,
//         concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__readers)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
//         },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__writers)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _
//                 as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__wrphase_futex)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _
//                 as usize
//         },
//         12usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__writers_futex)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize
//         },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__pad3)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize
//         },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__pad4)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _
//                 as usize
//         },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__cur_writer)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
//         },
//         28usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__shared)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
//         },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__rwelision)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize
//         },
//         33usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__pad1)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize
//         },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__pad2)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize
//         },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__flags)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_internal_list {
    pub __prev: *mut root::__pthread_internal_list,
    pub __next: *mut root::__pthread_internal_list,
}
// #[test]
// fn bindgen_test_layout___pthread_internal_list() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_internal_list>(),
//         16usize,
//         concat!("Size of: ", stringify!(__pthread_internal_list))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_internal_list>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_internal_list))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_internal_list),
//             "::",
//             stringify!(__prev)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_internal_list),
//             "::",
//             stringify!(__next)
//         )
//     );
// }
impl Default for __pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = root::__pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: root::__pthread_list_t,
}
// #[test]
// fn bindgen_test_layout___pthread_mutex_s() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_mutex_s>(),
//         40usize,
//         concat!("Size of: ", stringify!(__pthread_mutex_s))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_mutex_s>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_mutex_s))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__lock)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__count)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__owner)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
//         12usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__nusers)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__kind)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__spins)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
//         22usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__elision)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__list)
//         )
//     );
// }
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: root::__pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: root::__pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: root::__pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
// #[test]
// fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
//         8usize,
//         concat!(
//             "Size of: ",
//             stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
//         4usize,
//         concat!(
//             "Alignment of ",
//             stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
//                 as *const _ as usize
