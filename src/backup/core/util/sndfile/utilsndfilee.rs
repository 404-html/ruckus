/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {

    pub const __llvm__: u32 = 1;
    pub const __clang__: u32 = 1;
    pub const __clang_major__: u32 = 8;
    pub const __clang_minor__: u32 = 0;
    pub const __clang_patchlevel__: u32 = 0;
    pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __GNUC_MINOR__: u32 = 2;
    pub const __GNUC_PATCHLEVEL__: u32 = 1;
    pub const __GNUC__: u32 = 4;
    pub const __GXX_ABI_VERSION: u32 = 1002;
    pub const __ATOMIC_RELAXED: u32 = 0;
    pub const __ATOMIC_CONSUME: u32 = 1;
    pub const __ATOMIC_ACQUIRE: u32 = 2;
    pub const __ATOMIC_RELEASE: u32 = 3;
    pub const __ATOMIC_ACQ_REL: u32 = 4;
    pub const __ATOMIC_SEQ_CST: u32 = 5;
    pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
    pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
    pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
    pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
    pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
    pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
    pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __STRICT_ANSI__: u32 = 1;
    pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
    pub const __CONSTANT_CFSTRINGS__: u32 = 1;
    pub const __OPTIMIZE__: u32 = 1;
    pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
    pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
    pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
    pub const __BYTE_ORDER__: u32 = 1234;
    pub const __LITTLE_ENDIAN__: u32 = 1;
    pub const _LP64: u32 = 1;
    pub const __LP64__: u32 = 1;
    pub const __CHAR_BIT__: u32 = 8;
    pub const __SCHAR_MAX__: u32 = 127;
    pub const __SHRT_MAX__: u32 = 32767;
    pub const __INT_MAX__: u32 = 2147483647;
    pub const __LONG_MAX__: u64 = 9223372036854775807;
    pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
    pub const __WCHAR_MAX__: u32 = 2147483647;
    pub const __WINT_MAX__: u32 = 4294967295;
    pub const __INTMAX_MAX__: u64 = 9223372036854775807;
    pub const __SIZE_MAX__: i32 = -1;
    pub const __UINTMAX_MAX__: i32 = -1;
    pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
    pub const __INTPTR_MAX__: u64 = 9223372036854775807;
    pub const __UINTPTR_MAX__: i32 = -1;
    pub const __SIZEOF_DOUBLE__: u32 = 8;
    pub const __SIZEOF_FLOAT__: u32 = 4;
    pub const __SIZEOF_INT__: u32 = 4;
    pub const __SIZEOF_LONG__: u32 = 8;
    pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
    pub const __SIZEOF_LONG_LONG__: u32 = 8;
    pub const __SIZEOF_POINTER__: u32 = 8;
    pub const __SIZEOF_SHORT__: u32 = 2;
    pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
    pub const __SIZEOF_SIZE_T__: u32 = 8;
    pub const __SIZEOF_WCHAR_T__: u32 = 4;
    pub const __SIZEOF_WINT_T__: u32 = 4;
    pub const __SIZEOF_INT128__: u32 = 16;
    pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INTMAX_WIDTH__: u32 = 64;
    pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __PTRDIFF_WIDTH__: u32 = 64;
    pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __INTPTR_WIDTH__: u32 = 64;
    pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __SIZE_WIDTH__: u32 = 64;
    pub const __WCHAR_WIDTH__: u32 = 32;
    pub const __WINT_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
    pub const __UINTMAX_WIDTH__: u32 = 64;
    pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINTPTR_WIDTH__: u32 = 64;
    pub const __FLT16_HAS_DENORM__: u32 = 1;
    pub const __FLT16_DIG__: u32 = 3;
    pub const __FLT16_DECIMAL_DIG__: u32 = 5;
    pub const __FLT16_HAS_INFINITY__: u32 = 1;
    pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT16_MANT_DIG__: u32 = 11;
    pub const __FLT16_MAX_10_EXP__: u32 = 4;
    pub const __FLT16_MAX_EXP__: u32 = 15;
    pub const __FLT16_MIN_10_EXP__: i32 = -13;
    pub const __FLT16_MIN_EXP__: i32 = -14;
    pub const __FLT_HAS_DENORM__: u32 = 1;
    pub const __FLT_DIG__: u32 = 6;
    pub const __FLT_DECIMAL_DIG__: u32 = 9;
    pub const __FLT_HAS_INFINITY__: u32 = 1;
    pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT_MANT_DIG__: u32 = 24;
    pub const __FLT_MAX_10_EXP__: u32 = 38;
    pub const __FLT_MAX_EXP__: u32 = 128;
    pub const __FLT_MIN_10_EXP__: i32 = -37;
    pub const __FLT_MIN_EXP__: i32 = -125;
    pub const __DBL_HAS_DENORM__: u32 = 1;
    pub const __DBL_DIG__: u32 = 15;
    pub const __DBL_DECIMAL_DIG__: u32 = 17;
    pub const __DBL_HAS_INFINITY__: u32 = 1;
    pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __DBL_MANT_DIG__: u32 = 53;
    pub const __DBL_MAX_10_EXP__: u32 = 308;
    pub const __DBL_MAX_EXP__: u32 = 1024;
    pub const __DBL_MIN_10_EXP__: i32 = -307;
    pub const __DBL_MIN_EXP__: i32 = -1021;
    pub const __LDBL_HAS_DENORM__: u32 = 1;
    pub const __LDBL_DIG__: u32 = 18;
    pub const __LDBL_DECIMAL_DIG__: u32 = 21;
    pub const __LDBL_HAS_INFINITY__: u32 = 1;
    pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __LDBL_MANT_DIG__: u32 = 64;
    pub const __LDBL_MAX_10_EXP__: u32 = 4932;
    pub const __LDBL_MAX_EXP__: u32 = 16384;
    pub const __LDBL_MIN_10_EXP__: i32 = -4931;
    pub const __LDBL_MIN_EXP__: i32 = -16381;
    pub const __POINTER_WIDTH__: u32 = 64;
    pub const __BIGGEST_ALIGNMENT__: u32 = 16;
    pub const __WINT_UNSIGNED__: u32 = 1;
    pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __UINT8_MAX__: u32 = 255;
    pub const __INT8_MAX__: u32 = 127;
    pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __UINT16_MAX__: u32 = 65535;
    pub const __INT16_MAX__: u32 = 32767;
    pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __UINT32_MAX__: u32 = 4294967295;
    pub const __INT32_MAX__: u32 = 2147483647;
    pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINT64_MAX__: i32 = -1;
    pub const __INT64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST8_MAX__: u32 = 127;
    pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_LEAST8_MAX__: u32 = 255;
    pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_LEAST16_MAX__: u32 = 32767;
    pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_LEAST16_MAX__: u32 = 65535;
    pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_LEAST32_MAX__: u32 = 2147483647;
    pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
    pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_LEAST64_MAX__: i32 = -1;
    pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INT_FAST8_MAX__: u32 = 127;
    pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_FAST8_MAX__: u32 = 255;
    pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_FAST16_MAX__: u32 = 32767;
    pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_FAST16_MAX__: u32 = 65535;
    pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_FAST32_MAX__: u32 = 2147483647;
    pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_FAST32_MAX__: u32 = 4294967295;
    pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_FAST64_MAX__: i32 = -1;
    pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __FINITE_MATH_ONLY__: u32 = 0;
    pub const __GNUC_STDC_INLINE__: u32 = 1;
    pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
    pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __PIC__: u32 = 2;
    pub const __pic__: u32 = 2;
    pub const __FLT_EVAL_METHOD__: u32 = 0;
    pub const __FLT_RADIX__: u32 = 2;
    pub const __DECIMAL_DIG__: u32 = 21;
    pub const __SSP_STRONG__: u32 = 2;
    pub const __code_model_small_: u32 = 1;
    pub const __amd64__: u32 = 1;
    pub const __amd64: u32 = 1;
    pub const __x86_64: u32 = 1;
    pub const __x86_64__: u32 = 1;
    pub const __bdver2: u32 = 1;
    pub const __bdver2__: u32 = 1;
    pub const __tune_bdver2__: u32 = 1;
    pub const __NO_MATH_INLINES: u32 = 1;
    pub const __AES__: u32 = 1;
    pub const __PCLMUL__: u32 = 1;
    pub const __LZCNT__: u32 = 1;
    pub const __BMI__: u32 = 1;
    pub const __POPCNT__: u32 = 1;
    pub const __PRFCHW__: u32 = 1;
    pub const __TBM__: u32 = 1;
    pub const __LWP__: u32 = 1;
    pub const __XOP__: u32 = 1;
    pub const __FMA4__: u32 = 1;
    pub const __SSE4A__: u32 = 1;
    pub const __FMA__: u32 = 1;
    pub const __F16C__: u32 = 1;
    pub const __FXSR__: u32 = 1;
    pub const __XSAVE__: u32 = 1;
    pub const __AVX__: u32 = 1;
    pub const __SSE4_2__: u32 = 1;
    pub const __SSE4_1__: u32 = 1;
    pub const __SSSE3__: u32 = 1;
    pub const __SSE3__: u32 = 1;
    pub const __SSE2__: u32 = 1;
    pub const __SSE2_MATH__: u32 = 1;
    pub const __SSE__: u32 = 1;
    pub const __SSE_MATH__: u32 = 1;
    pub const __MMX__: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
    pub const __SIZEOF_FLOAT128__: u32 = 16;
    pub const __unix: u32 = 1;
    pub const __unix__: u32 = 1;
    pub const __linux: u32 = 1;
    pub const __linux__: u32 = 1;
    pub const __gnu_linux__: u32 = 1;
    pub const __ELF__: u32 = 1;
    pub const __FLOAT128__: u32 = 1;
    pub const __STDC__: u32 = 1;
    pub const __STDC_HOSTED__: u32 = 1;
    pub const __STDC_VERSION__: u32 = 201112;
    pub const __STDC_UTF_16__: u32 = 1;
    pub const __STDC_UTF_32__: u32 = 1;
    pub const HAVE_CONFIG_H: u32 = 1;
    pub const HAVE_POLL: u32 = 1;
    pub const HAVE_LIBPTHREAD: u32 = 1;
    pub const ENABLE_THREADS: u32 = 1;
    pub const __PLATFORM_LINUX__: u32 = 1;
    pub const __LINUX_ALSA__: u32 = 1;
    pub const __UNIX_JACK__: u32 = 1;
    pub const USE_ALSA: u32 = 1;
    pub const USE_DLTRICK_ALSA: u32 = 1;
    pub const USE_OSS: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const FOPEN_MAX: u32 = 16;
    pub const _BITS_STDIO_H: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const COMPILER_IS_GCC: u32 = 1;
    pub const CPU_CLIPS_NEGATIVE: u32 = 0;
    pub const CPU_CLIPS_POSITIVE: u32 = 0;
    pub const CPU_IS_BIG_ENDIAN: u32 = 0;
    pub const CPU_IS_LITTLE_ENDIAN: u32 = 1;
    pub const ENABLE_EXPERIMENTAL_CODE: u32 = 0;
    pub const HAVE_ALSA: u32 = 1;
    pub const HAVE_ALSA_ASOUNDLIB_H: u32 = 1;
    pub const HAVE_BYTESWAP_H: u32 = 1;
    pub const HAVE_CALLOC: u32 = 1;
    pub const HAVE_CEIL: u32 = 1;
    pub const HAVE_DECL_S_IRGRP: u32 = 1;
    pub const HAVE_DLFCN_H: u32 = 1;
    pub const HAVE_ENDIAN_H: u32 = 1;
    pub const HAVE_EXTERNAL_XIPH_LIBS: u32 = 1;
    pub const HAVE_FLOOR: u32 = 1;
    pub const HAVE_FMOD: u32 = 1;
    pub const HAVE_FREE: u32 = 1;
    pub const HAVE_FSTAT: u32 = 1;
    pub const HAVE_FSTAT64: u32 = 1;
    pub const HAVE_FSYNC: u32 = 1;
    pub const HAVE_FTRUNCATE: u32 = 1;
    pub const HAVE_GETPAGESIZE: u32 = 1;
    pub const HAVE_GETTIMEOFDAY: u32 = 1;
    pub const HAVE_GMTIME: u32 = 1;
    pub const HAVE_GMTIME_R: u32 = 1;
    pub const HAVE_INTTYPES_H: u32 = 1;
    pub const HAVE_LOCALE_H: u32 = 1;
    pub const HAVE_LOCALTIME: u32 = 1;
    pub const HAVE_LOCALTIME_R: u32 = 1;
    pub const HAVE_LRINT: u32 = 1;
    pub const HAVE_LRINTF: u32 = 1;
    pub const HAVE_LSEEK: u32 = 1;
    pub const HAVE_LSEEK64: u32 = 1;
    pub const HAVE_MALLOC: u32 = 1;
    pub const HAVE_MEMORY_H: u32 = 1;
    pub const HAVE_MMAP: u32 = 1;
    pub const HAVE_OPEN: u32 = 1;
    pub const HAVE_PIPE: u32 = 1;
    pub const HAVE_READ: u32 = 1;
    pub const HAVE_REALLOC: u32 = 1;
    pub const HAVE_SETLOCALE: u32 = 1;
    pub const HAVE_SNDIO_H: u32 = 0;
    pub const HAVE_SNPRINTF: u32 = 1;
    pub const HAVE_SQLITE3: u32 = 1;
    pub const HAVE_STDINT_H: u32 = 1;
    pub const HAVE_STDLIB_H: u32 = 1;
    pub const HAVE_STRINGS_H: u32 = 1;
    pub const HAVE_STRING_H: u32 = 1;
    pub const HAVE_SYS_STAT_H: u32 = 1;
    pub const HAVE_SYS_TIME_H: u32 = 1;
    pub const HAVE_SYS_TYPES_H: u32 = 1;
    pub const HAVE_SYS_WAIT_H: u32 = 1;
    pub const HAVE_UNISTD_H: u32 = 1;
    pub const HAVE_VSNPRINTF: u32 = 1;
    pub const HAVE_WAITPID: u32 = 1;
    pub const HAVE_WRITE: u32 = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
    pub const OS_IS_OPENBSD: u32 = 0;
    pub const OS_IS_WIN32: u32 = 0;
    pub const PACKAGE: &'static [u8; 11usize] = b"libsndfile\0";
    pub const PACKAGE_BUGREPORT: &'static [u8; 22usize] = b"sndfile@mega-nerd.com\0";
    pub const PACKAGE_NAME: &'static [u8; 11usize] = b"libsndfile\0";
    pub const PACKAGE_STRING: &'static [u8; 22usize] = b"libsndfile 1.0.29pre1\0";
    pub const PACKAGE_TARNAME: &'static [u8; 11usize] = b"libsndfile\0";
    pub const PACKAGE_URL: &'static [u8; 37usize] = b"http://www.mega-nerd.com/libsndfile/\0";
    pub const PACKAGE_VERSION: &'static [u8; 11usize] = b"1.0.29pre1\0";
    pub const SF_COUNT_MAX: u64 = 9223372036854775807;
    pub const SIZEOF_DOUBLE: u32 = 8;
    pub const SIZEOF_FLOAT: u32 = 4;
    pub const SIZEOF_INT: u32 = 4;
    pub const SIZEOF_INT64_T: u32 = 8;
    pub const SIZEOF_LONG: u32 = 8;
    pub const SIZEOF_LONG_LONG: u32 = 8;
    pub const SIZEOF_OFF_T: u32 = 8;
    pub const SIZEOF_SF_COUNT_T: u32 = 8;
    pub const SIZEOF_SHORT: u32 = 2;
    pub const SIZEOF_SIZE_T: u32 = 8;
    pub const SIZEOF_VOIDP: u32 = 8;
    pub const SIZEOF_WCHAR_T: u32 = 4;
    pub const STDC_HEADERS: u32 = 1;
    pub const _ALL_SOURCE: u32 = 1;
    pub const _POSIX_PTHREAD_SEMANTICS: u32 = 1;
    pub const _TANDEM_SOURCE: u32 = 1;
    pub const __EXTENSIONS__: u32 = 1;
    pub const USE_WINDOWS_API: u32 = 0;
    pub const VERSION: &'static [u8; 11usize] = b"1.0.29pre1\0";
    pub const WIN32_TARGET_DLL: u32 = 0;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const __WCHAR_MAX: u32 = 2147483647;
    pub const __WCHAR_MIN: i32 = -2147483648;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WCHAR_MIN: i32 = -2147483648;
    pub const WCHAR_MAX: u32 = 2147483647;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const HAVE_PREAD: u32 = 1;
    pub const HAVE_PWRITE: u32 = 1;
    pub const OS_IS_MACOSX: u32 = 0;
    pub const SIZEOF_OFF64_T: u32 = 0;
    pub const SIZEOF_LOFF_T: u32 = 8;
    pub const _FILE_OFFSET_BITS: u32 = 64;
    pub const HAVE_FDATASYNC: u32 = 1;
    pub const HAVE_SSIZE_T: u32 = 1;
    pub type __gnuc_va_list = root::__builtin_va_list;
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    impl Default for __mbstate_t__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    impl Default for __mbstate_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "__mbstate_t {{ __count: {:?}, __value: {:?} }}",
                self.__count, self.__value
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos64_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos64_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::std::os::raw::c_void,
        pub __pad5: usize,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    impl Default for _IO_FILE {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type fpos_t = root::__fpos_t;
    extern "C" {
        pub static mut stdin: *mut root::FILE;
    }
    extern "C" {
        pub static mut stdout: *mut root::FILE;
    }
    extern "C" {
        pub static mut stderr: *mut root::FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fgetpos(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(
            __stream: *mut root::FILE,
            __pos: *const root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(
            arg1: *mut root::FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type wchar_t = ::std::os::raw::c_int;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = f64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut root::wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(
            __s: *mut ::std::os::raw::c_char,
            __wchar: root::wchar_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(
            __pwcs: *mut root::wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn wcstombs(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const root::wchar_t,
            __n: usize,
        ) -> usize;
    }
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub type ino_t = root::__ino_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type pid_t = root::__pid_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulong;
    pub type register_t = ::std::os::raw::c_long;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub const SF_FORMAT_WAV: root::_bindgen_ty_1 = 65536;
    pub const SF_FORMAT_AIFF: root::_bindgen_ty_1 = 131072;
    pub const SF_FORMAT_AU: root::_bindgen_ty_1 = 196608;
    pub const SF_FORMAT_RAW: root::_bindgen_ty_1 = 262144;
    pub const SF_FORMAT_PAF: root::_bindgen_ty_1 = 327680;
    pub const SF_FORMAT_SVX: root::_bindgen_ty_1 = 393216;
    pub const SF_FORMAT_NIST: root::_bindgen_ty_1 = 458752;
    pub const SF_FORMAT_VOC: root::_bindgen_ty_1 = 524288;
    pub const SF_FORMAT_IRCAM: root::_bindgen_ty_1 = 655360;
    pub const SF_FORMAT_W64: root::_bindgen_ty_1 = 720896;
    pub const SF_FORMAT_MAT4: root::_bindgen_ty_1 = 786432;
    pub const SF_FORMAT_MAT5: root::_bindgen_ty_1 = 851968;
    pub const SF_FORMAT_PVF: root::_bindgen_ty_1 = 917504;
    pub const SF_FORMAT_XI: root::_bindgen_ty_1 = 983040;
    pub const SF_FORMAT_HTK: root::_bindgen_ty_1 = 1048576;
    pub const SF_FORMAT_SDS: root::_bindgen_ty_1 = 1114112;
    pub const SF_FORMAT_AVR: root::_bindgen_ty_1 = 1179648;
    pub const SF_FORMAT_WAVEX: root::_bindgen_ty_1 = 1245184;
    pub const SF_FORMAT_SD2: root::_bindgen_ty_1 = 1441792;
    pub const SF_FORMAT_FLAC: root::_bindgen_ty_1 = 1507328;
    pub const SF_FORMAT_CAF: root::_bindgen_ty_1 = 1572864;
    pub const SF_FORMAT_WVE: root::_bindgen_ty_1 = 1638400;
    pub const SF_FORMAT_OGG: root::_bindgen_ty_1 = 2097152;
    pub const SF_FORMAT_MPC2K: root::_bindgen_ty_1 = 2162688;
    pub const SF_FORMAT_RF64: root::_bindgen_ty_1 = 2228224;
    pub const SF_FORMAT_PCM_S8: root::_bindgen_ty_1 = 1;
    pub const SF_FORMAT_PCM_16: root::_bindgen_ty_1 = 2;
    pub const SF_FORMAT_PCM_24: root::_bindgen_ty_1 = 3;
    pub const SF_FORMAT_PCM_32: root::_bindgen_ty_1 = 4;
    pub const SF_FORMAT_PCM_U8: root::_bindgen_ty_1 = 5;
    pub const SF_FORMAT_FLOAT: root::_bindgen_ty_1 = 6;
    pub const SF_FORMAT_DOUBLE: root::_bindgen_ty_1 = 7;
    pub const SF_FORMAT_ULAW: root::_bindgen_ty_1 = 16;
    pub const SF_FORMAT_ALAW: root::_bindgen_ty_1 = 17;
    pub const SF_FORMAT_IMA_ADPCM: root::_bindgen_ty_1 = 18;
    pub const SF_FORMAT_MS_ADPCM: root::_bindgen_ty_1 = 19;
    pub const SF_FORMAT_GSM610: root::_bindgen_ty_1 = 32;
    pub const SF_FORMAT_VOX_ADPCM: root::_bindgen_ty_1 = 33;
    pub const SF_FORMAT_NMS_ADPCM_16: root::_bindgen_ty_1 = 34;
    pub const SF_FORMAT_NMS_ADPCM_24: root::_bindgen_ty_1 = 35;
    pub const SF_FORMAT_NMS_ADPCM_32: root::_bindgen_ty_1 = 36;
    pub const SF_FORMAT_G721_32: root::_bindgen_ty_1 = 48;
    pub const SF_FORMAT_G723_24: root::_bindgen_ty_1 = 49;
    pub const SF_FORMAT_G723_40: root::_bindgen_ty_1 = 50;
    pub const SF_FORMAT_DWVW_12: root::_bindgen_ty_1 = 64;
    pub const SF_FORMAT_DWVW_16: root::_bindgen_ty_1 = 65;
    pub const SF_FORMAT_DWVW_24: root::_bindgen_ty_1 = 66;
    pub const SF_FORMAT_DWVW_N: root::_bindgen_ty_1 = 67;
    pub const SF_FORMAT_DPCM_8: root::_bindgen_ty_1 = 80;
    pub const SF_FORMAT_DPCM_16: root::_bindgen_ty_1 = 81;
    pub const SF_FORMAT_VORBIS: root::_bindgen_ty_1 = 96;
    pub const SF_FORMAT_ALAC_16: root::_bindgen_ty_1 = 112;
    pub const SF_FORMAT_ALAC_20: root::_bindgen_ty_1 = 113;
    pub const SF_FORMAT_ALAC_24: root::_bindgen_ty_1 = 114;
    pub const SF_FORMAT_ALAC_32: root::_bindgen_ty_1 = 115;
    pub const SF_ENDIAN_FILE: root::_bindgen_ty_1 = 0;
    pub const SF_ENDIAN_LITTLE: root::_bindgen_ty_1 = 268435456;
    pub const SF_ENDIAN_BIG: root::_bindgen_ty_1 = 536870912;
    pub const SF_ENDIAN_CPU: root::_bindgen_ty_1 = 805306368;
    pub const SF_FORMAT_SUBMASK: root::_bindgen_ty_1 = 65535;
    pub const SF_FORMAT_TYPEMASK: root::_bindgen_ty_1 = 268369920;
    pub const SF_FORMAT_ENDMASK: root::_bindgen_ty_1 = 805306368;
    pub type _bindgen_ty_1 = u32;
    pub const SFC_GET_LIB_VERSION: root::_bindgen_ty_2 = 4096;
    pub const SFC_GET_LOG_INFO: root::_bindgen_ty_2 = 4097;
    pub const SFC_GET_CURRENT_SF_INFO: root::_bindgen_ty_2 = 4098;
    pub const SFC_GET_NORM_DOUBLE: root::_bindgen_ty_2 = 4112;
    pub const SFC_GET_NORM_FLOAT: root::_bindgen_ty_2 = 4113;
    pub const SFC_SET_NORM_DOUBLE: root::_bindgen_ty_2 = 4114;
    pub const SFC_SET_NORM_FLOAT: root::_bindgen_ty_2 = 4115;
    pub const SFC_SET_SCALE_FLOAT_INT_READ: root::_bindgen_ty_2 = 4116;
    pub const SFC_SET_SCALE_INT_FLOAT_WRITE: root::_bindgen_ty_2 = 4117;
    pub const SFC_GET_SIMPLE_FORMAT_COUNT: root::_bindgen_ty_2 = 4128;
    pub const SFC_GET_SIMPLE_FORMAT: root::_bindgen_ty_2 = 4129;
    pub const SFC_GET_FORMAT_INFO: root::_bindgen_ty_2 = 4136;
    pub const SFC_GET_FORMAT_MAJOR_COUNT: root::_bindgen_ty_2 = 4144;
    pub const SFC_GET_FORMAT_MAJOR: root::_bindgen_ty_2 = 4145;
    pub const SFC_GET_FORMAT_SUBTYPE_COUNT: root::_bindgen_ty_2 = 4146;
    pub const SFC_GET_FORMAT_SUBTYPE: root::_bindgen_ty_2 = 4147;
    pub const SFC_CALC_SIGNAL_MAX: root::_bindgen_ty_2 = 4160;
    pub const SFC_CALC_NORM_SIGNAL_MAX: root::_bindgen_ty_2 = 4161;
    pub const SFC_CALC_MAX_ALL_CHANNELS: root::_bindgen_ty_2 = 4162;
    pub const SFC_CALC_NORM_MAX_ALL_CHANNELS: root::_bindgen_ty_2 = 4163;
    pub const SFC_GET_SIGNAL_MAX: root::_bindgen_ty_2 = 4164;
    pub const SFC_GET_MAX_ALL_CHANNELS: root::_bindgen_ty_2 = 4165;
    pub const SFC_SET_ADD_PEAK_CHUNK: root::_bindgen_ty_2 = 4176;
    pub const SFC_UPDATE_HEADER_NOW: root::_bindgen_ty_2 = 4192;
    pub const SFC_SET_UPDATE_HEADER_AUTO: root::_bindgen_ty_2 = 4193;
    pub const SFC_FILE_TRUNCATE: root::_bindgen_ty_2 = 4224;
    pub const SFC_SET_RAW_START_OFFSET: root::_bindgen_ty_2 = 4240;
    pub const SFC_SET_DITHER_ON_WRITE: root::_bindgen_ty_2 = 4256;
    pub const SFC_SET_DITHER_ON_READ: root::_bindgen_ty_2 = 4257;
    pub const SFC_GET_DITHER_INFO_COUNT: root::_bindgen_ty_2 = 4258;
    pub const SFC_GET_DITHER_INFO: root::_bindgen_ty_2 = 4259;
    pub const SFC_GET_EMBED_FILE_INFO: root::_bindgen_ty_2 = 4272;
    pub const SFC_SET_CLIPPING: root::_bindgen_ty_2 = 4288;
    pub const SFC_GET_CLIPPING: root::_bindgen_ty_2 = 4289;
    pub const SFC_GET_CUE_COUNT: root::_bindgen_ty_2 = 4301;
    pub const SFC_GET_CUE: root::_bindgen_ty_2 = 4302;
    pub const SFC_SET_CUE: root::_bindgen_ty_2 = 4303;
    pub const SFC_GET_INSTRUMENT: root::_bindgen_ty_2 = 4304;
    pub const SFC_SET_INSTRUMENT: root::_bindgen_ty_2 = 4305;
    pub const SFC_GET_LOOP_INFO: root::_bindgen_ty_2 = 4320;
    pub const SFC_GET_BROADCAST_INFO: root::_bindgen_ty_2 = 4336;
    pub const SFC_SET_BROADCAST_INFO: root::_bindgen_ty_2 = 4337;
    pub const SFC_GET_CHANNEL_MAP_INFO: root::_bindgen_ty_2 = 4352;
    pub const SFC_SET_CHANNEL_MAP_INFO: root::_bindgen_ty_2 = 4353;
    pub const SFC_RAW_DATA_NEEDS_ENDSWAP: root::_bindgen_ty_2 = 4368;
    pub const SFC_WAVEX_SET_AMBISONIC: root::_bindgen_ty_2 = 4608;
    pub const SFC_WAVEX_GET_AMBISONIC: root::_bindgen_ty_2 = 4609;
    pub const SFC_RF64_AUTO_DOWNGRADE: root::_bindgen_ty_2 = 4624;
    pub const SFC_SET_VBR_ENCODING_QUALITY: root::_bindgen_ty_2 = 4864;
    pub const SFC_SET_COMPRESSION_LEVEL: root::_bindgen_ty_2 = 4865;
    pub const SFC_SET_CART_INFO: root::_bindgen_ty_2 = 5120;
    pub const SFC_GET_CART_INFO: root::_bindgen_ty_2 = 5121;
    pub const SFC_TEST_IEEE_FLOAT_REPLACE: root::_bindgen_ty_2 = 24577;
    pub const SFC_SET_ADD_HEADER_PAD_CHUNK: root::_bindgen_ty_2 = 4177;
    pub const SFC_SET_ADD_DITHER_ON_WRITE: root::_bindgen_ty_2 = 4208;
    pub const SFC_SET_ADD_DITHER_ON_READ: root::_bindgen_ty_2 = 4209;
    pub type _bindgen_ty_2 = u32;
    pub const SF_STR_TITLE: root::_bindgen_ty_3 = 1;
    pub const SF_STR_COPYRIGHT: root::_bindgen_ty_3 = 2;
    pub const SF_STR_SOFTWARE: root::_bindgen_ty_3 = 3;
    pub const SF_STR_ARTIST: root::_bindgen_ty_3 = 4;
    pub const SF_STR_COMMENT: root::_bindgen_ty_3 = 5;
    pub const SF_STR_DATE: root::_bindgen_ty_3 = 6;
    pub const SF_STR_ALBUM: root::_bindgen_ty_3 = 7;
    pub const SF_STR_LICENSE: root::_bindgen_ty_3 = 8;
    pub const SF_STR_TRACKNUMBER: root::_bindgen_ty_3 = 9;
    pub const SF_STR_GENRE: root::_bindgen_ty_3 = 16;
    pub type _bindgen_ty_3 = u32;
    pub const SF_FALSE: root::_bindgen_ty_4 = 0;
    pub const SF_TRUE: root::_bindgen_ty_4 = 1;
    pub const SFM_READ: root::_bindgen_ty_4 = 16;
    pub const SFM_WRITE: root::_bindgen_ty_4 = 32;
    pub const SFM_RDWR: root::_bindgen_ty_4 = 48;
    pub const SF_AMBISONIC_NONE: root::_bindgen_ty_4 = 64;
    pub const SF_AMBISONIC_B_FORMAT: root::_bindgen_ty_4 = 65;
    pub type _bindgen_ty_4 = u32;
    pub const SF_ERR_NO_ERROR: root::_bindgen_ty_5 = 0;
    pub const SF_ERR_UNRECOGNISED_FORMAT: root::_bindgen_ty_5 = 1;
    pub const SF_ERR_SYSTEM: root::_bindgen_ty_5 = 2;
    pub const SF_ERR_MALFORMED_FILE: root::_bindgen_ty_5 = 3;
    pub const SF_ERR_UNSUPPORTED_ENCODING: root::_bindgen_ty_5 = 4;
    pub type _bindgen_ty_5 = u32;
    pub const SF_CHANNEL_MAP_INVALID: root::_bindgen_ty_6 = 0;
    pub const SF_CHANNEL_MAP_MONO: root::_bindgen_ty_6 = 1;
    pub const SF_CHANNEL_MAP_LEFT: root::_bindgen_ty_6 = 2;
    pub const SF_CHANNEL_MAP_RIGHT: root::_bindgen_ty_6 = 3;
    pub const SF_CHANNEL_MAP_CENTER: root::_bindgen_ty_6 = 4;
    pub const SF_CHANNEL_MAP_FRONT_LEFT: root::_bindgen_ty_6 = 5;
    pub const SF_CHANNEL_MAP_FRONT_RIGHT: root::_bindgen_ty_6 = 6;
    pub const SF_CHANNEL_MAP_FRONT_CENTER: root::_bindgen_ty_6 = 7;
    pub const SF_CHANNEL_MAP_REAR_CENTER: root::_bindgen_ty_6 = 8;
    pub const SF_CHANNEL_MAP_REAR_LEFT: root::_bindgen_ty_6 = 9;
    pub const SF_CHANNEL_MAP_REAR_RIGHT: root::_bindgen_ty_6 = 10;
    pub const SF_CHANNEL_MAP_LFE: root::_bindgen_ty_6 = 11;
    pub const SF_CHANNEL_MAP_FRONT_LEFT_OF_CENTER: root::_bindgen_ty_6 = 12;
    pub const SF_CHANNEL_MAP_FRONT_RIGHT_OF_CENTER: root::_bindgen_ty_6 = 13;
    pub const SF_CHANNEL_MAP_SIDE_LEFT: root::_bindgen_ty_6 = 14;
    pub const SF_CHANNEL_MAP_SIDE_RIGHT: root::_bindgen_ty_6 = 15;
    pub const SF_CHANNEL_MAP_TOP_CENTER: root::_bindgen_ty_6 = 16;
    pub const SF_CHANNEL_MAP_TOP_FRONT_LEFT: root::_bindgen_ty_6 = 17;
    pub const SF_CHANNEL_MAP_TOP_FRONT_RIGHT: root::_bindgen_ty_6 = 18;
    pub const SF_CHANNEL_MAP_TOP_FRONT_CENTER: root::_bindgen_ty_6 = 19;
    pub const SF_CHANNEL_MAP_TOP_REAR_LEFT: root::_bindgen_ty_6 = 20;
    pub const SF_CHANNEL_MAP_TOP_REAR_RIGHT: root::_bindgen_ty_6 = 21;
    pub const SF_CHANNEL_MAP_TOP_REAR_CENTER: root::_bindgen_ty_6 = 22;
    pub const SF_CHANNEL_MAP_AMBISONIC_B_W: root::_bindgen_ty_6 = 23;
    pub const SF_CHANNEL_MAP_AMBISONIC_B_X: root::_bindgen_ty_6 = 24;
    pub const SF_CHANNEL_MAP_AMBISONIC_B_Y: root::_bindgen_ty_6 = 25;
    pub const SF_CHANNEL_MAP_AMBISONIC_B_Z: root::_bindgen_ty_6 = 26;
    pub const SF_CHANNEL_MAP_MAX: root::_bindgen_ty_6 = 27;
    pub type _bindgen_ty_6 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SNDFILE_tag {
        _unused: [u8; 0],
    }
    pub type SNDFILE = root::SNDFILE_tag;
    pub type sf_count_t = i64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SF_INFO {
        pub frames: root::sf_count_t,
        pub samplerate: ::std::os::raw::c_int,
        pub channels: ::std::os::raw::c_int,
        pub format: ::std::os::raw::c_int,
        pub sections: ::std::os::raw::c_int,
        pub seekable: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_SF_INFO() {
        assert_eq!(
            ::std::mem::size_of::<SF_INFO>(),
            32usize,
            concat!("Size of: ", stringify!(SF_INFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_INFO>(),
            8usize,
            concat!("Alignment of ", stringify!(SF_INFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INFO>())).frames as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INFO),
                "::",
                stringify!(frames)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INFO>())).samplerate as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INFO),
                "::",
                stringify!(samplerate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INFO>())).channels as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INFO),
                "::",
                stringify!(channels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INFO>())).format as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INFO),
                "::",
                stringify!(format)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INFO>())).sections as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INFO),
                "::",
                stringify!(sections)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INFO>())).seekable as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INFO),
                "::",
                stringify!(seekable)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SF_FORMAT_INFO {
        pub format: ::std::os::raw::c_int,
        pub name: *const ::std::os::raw::c_char,
        pub extension: *const ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_SF_FORMAT_INFO() {
        assert_eq!(
            ::std::mem::size_of::<SF_FORMAT_INFO>(),
            24usize,
            concat!("Size of: ", stringify!(SF_FORMAT_INFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_FORMAT_INFO>(),
            8usize,
            concat!("Alignment of ", stringify!(SF_FORMAT_INFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_FORMAT_INFO>())).format as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_FORMAT_INFO),
                "::",
                stringify!(format)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_FORMAT_INFO>())).name as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_FORMAT_INFO),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_FORMAT_INFO>())).extension as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_FORMAT_INFO),
                "::",
                stringify!(extension)
            )
        );
    }
    impl Default for SF_FORMAT_INFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const SFD_DEFAULT_LEVEL: root::_bindgen_ty_7 = 0;
    pub const SFD_CUSTOM_LEVEL: root::_bindgen_ty_7 = 1073741824;
    pub const SFD_NO_DITHER: root::_bindgen_ty_7 = 500;
    pub const SFD_WHITE: root::_bindgen_ty_7 = 501;
    pub const SFD_TRIANGULAR_PDF: root::_bindgen_ty_7 = 502;
    pub type _bindgen_ty_7 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
    pub struct SF_DITHER_INFO {
        pub type_: ::std::os::raw::c_int,
        pub level: f64,
        pub name: *const ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_SF_DITHER_INFO() {
        assert_eq!(
            ::std::mem::size_of::<SF_DITHER_INFO>(),
            24usize,
            concat!("Size of: ", stringify!(SF_DITHER_INFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_DITHER_INFO>(),
            8usize,
            concat!("Alignment of ", stringify!(SF_DITHER_INFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_DITHER_INFO>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_DITHER_INFO),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_DITHER_INFO>())).level as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_DITHER_INFO),
                "::",
                stringify!(level)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_DITHER_INFO>())).name as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_DITHER_INFO),
                "::",
                stringify!(name)
            )
        );
    }
    impl Default for SF_DITHER_INFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SF_EMBED_FILE_INFO {
        pub offset: root::sf_count_t,
        pub length: root::sf_count_t,
    }
    #[test]
    fn bindgen_test_layout_SF_EMBED_FILE_INFO() {
        assert_eq!(
            ::std::mem::size_of::<SF_EMBED_FILE_INFO>(),
            16usize,
            concat!("Size of: ", stringify!(SF_EMBED_FILE_INFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_EMBED_FILE_INFO>(),
            8usize,
            concat!("Alignment of ", stringify!(SF_EMBED_FILE_INFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_EMBED_FILE_INFO>())).offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_EMBED_FILE_INFO),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_EMBED_FILE_INFO>())).length as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_EMBED_FILE_INFO),
                "::",
                stringify!(length)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_CUE_POINT {
        pub indx: i32,
        pub position: u32,
        pub fcc_chunk: i32,
        pub chunk_start: i32,
        pub block_start: i32,
        pub sample_offset: u32,
        pub name: [::std::os::raw::c_char; 256usize],
    }
    #[test]
    fn bindgen_test_layout_SF_CUE_POINT() {
        assert_eq!(
            ::std::mem::size_of::<SF_CUE_POINT>(),
            280usize,
            concat!("Size of: ", stringify!(SF_CUE_POINT))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_CUE_POINT>(),
            4usize,
            concat!("Alignment of ", stringify!(SF_CUE_POINT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUE_POINT>())).indx as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUE_POINT),
                "::",
                stringify!(indx)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUE_POINT>())).position as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUE_POINT),
                "::",
                stringify!(position)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUE_POINT>())).fcc_chunk as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUE_POINT),
                "::",
                stringify!(fcc_chunk)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUE_POINT>())).chunk_start as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUE_POINT),
                "::",
                stringify!(chunk_start)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUE_POINT>())).block_start as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUE_POINT),
                "::",
                stringify!(block_start)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUE_POINT>())).sample_offset as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUE_POINT),
                "::",
                stringify!(sample_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUE_POINT>())).name as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUE_POINT),
                "::",
                stringify!(name)
            )
        );
    }
    impl Default for SF_CUE_POINT {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for SF_CUE_POINT {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "SF_CUE_POINT {{ indx: {:?}, position: {:?}, fcc_chunk: {:?}, chunk_start: {:?}, block_start: {:?}, sample_offset: {:?}, name: [{}] }}" , self . indx , self . position , self . fcc_chunk , self . chunk_start , self . block_start , self . sample_offset , self . name . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
        }
    }
    impl PartialEq for SF_CUE_POINT {
        fn eq(&self, other: &SF_CUE_POINT) -> bool {
            self.indx == other.indx
                && self.position == other.position
                && self.fcc_chunk == other.fcc_chunk
                && self.chunk_start == other.chunk_start
                && self.block_start == other.block_start
                && self.sample_offset == other.sample_offset
                && &self.name[..] == &other.name[..]
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_CUES {
        pub cue_count: u32,
        pub cue_points: [self::SF_CUE_POINT; 100usize],
    }
    #[test]
    fn bindgen_test_layout_SF_CUES() {
        assert_eq!(
            ::std::mem::size_of::<SF_CUES>(),
            28004usize,
            concat!("Size of: ", stringify!(SF_CUES))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_CUES>(),
            4usize,
            concat!("Alignment of ", stringify!(SF_CUES))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUES>())).cue_count as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUES),
                "::",
                stringify!(cue_count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CUES>())).cue_points as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CUES),
                "::",
                stringify!(cue_points)
            )
        );
    }
    impl Default for SF_CUES {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for SF_CUES {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "SF_CUES {{ cue_count: {:?}, cue_points: [{}] }}",
                self.cue_count,
                self.cue_points
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>()
            )
        }
    }
    pub const SF_LOOP_NONE: root::_bindgen_ty_8 = 800;
    pub const SF_LOOP_FORWARD: root::_bindgen_ty_8 = 801;
    pub const SF_LOOP_BACKWARD: root::_bindgen_ty_8 = 802;
    pub const SF_LOOP_ALTERNATING: root::_bindgen_ty_8 = 803;
    pub type _bindgen_ty_8 = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SF_INSTRUMENT {
        pub gain: ::std::os::raw::c_int,
        pub basenote: ::std::os::raw::c_char,
        pub detune: ::std::os::raw::c_char,
        pub velocity_lo: ::std::os::raw::c_char,
        pub velocity_hi: ::std::os::raw::c_char,
        pub key_lo: ::std::os::raw::c_char,
        pub key_hi: ::std::os::raw::c_char,
        pub loop_count: ::std::os::raw::c_int,
        pub loops: [self::SF_INSTRUMENT__bindgen_ty_1; 16usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SF_INSTRUMENT__bindgen_ty_1 {
        pub mode: ::std::os::raw::c_int,
        pub start: u32,
        pub end: u32,
        pub count: u32,
    }
    #[test]
    fn bindgen_test_layout_SF_INSTRUMENT__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<SF_INSTRUMENT__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(SF_INSTRUMENT__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_INSTRUMENT__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(SF_INSTRUMENT__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_INSTRUMENT__bindgen_ty_1>())).mode as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT__bindgen_ty_1),
                "::",
                stringify!(mode)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_INSTRUMENT__bindgen_ty_1>())).start as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT__bindgen_ty_1),
                "::",
                stringify!(start)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_INSTRUMENT__bindgen_ty_1>())).end as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT__bindgen_ty_1),
                "::",
                stringify!(end)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_INSTRUMENT__bindgen_ty_1>())).count as *const _ as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT__bindgen_ty_1),
                "::",
                stringify!(count)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_SF_INSTRUMENT() {
        assert_eq!(
            ::std::mem::size_of::<SF_INSTRUMENT>(),
            272usize,
            concat!("Size of: ", stringify!(SF_INSTRUMENT))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_INSTRUMENT>(),
            4usize,
            concat!("Alignment of ", stringify!(SF_INSTRUMENT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).gain as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(gain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).basenote as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(basenote)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).detune as *const _ as usize },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(detune)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).velocity_lo as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(velocity_lo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).velocity_hi as *const _ as usize },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(velocity_hi)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).key_lo as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(key_lo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).key_hi as *const _ as usize },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(key_hi)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).loop_count as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(loop_count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_INSTRUMENT>())).loops as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_INSTRUMENT),
                "::",
                stringify!(loops)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct SF_LOOP_INFO {
        pub time_sig_num: ::std::os::raw::c_short,
        pub time_sig_den: ::std::os::raw::c_short,
        pub loop_mode: ::std::os::raw::c_int,
        pub num_beats: ::std::os::raw::c_int,
        pub bpm: f32,
        pub root_key: ::std::os::raw::c_int,
        pub future: [::std::os::raw::c_int; 6usize],
    }
    #[test]
    fn bindgen_test_layout_SF_LOOP_INFO() {
        assert_eq!(
            ::std::mem::size_of::<SF_LOOP_INFO>(),
            44usize,
            concat!("Size of: ", stringify!(SF_LOOP_INFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_LOOP_INFO>(),
            4usize,
            concat!("Alignment of ", stringify!(SF_LOOP_INFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_LOOP_INFO>())).time_sig_num as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_LOOP_INFO),
                "::",
                stringify!(time_sig_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_LOOP_INFO>())).time_sig_den as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_LOOP_INFO),
                "::",
                stringify!(time_sig_den)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_LOOP_INFO>())).loop_mode as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_LOOP_INFO),
                "::",
                stringify!(loop_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_LOOP_INFO>())).num_beats as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_LOOP_INFO),
                "::",
                stringify!(num_beats)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_LOOP_INFO>())).bpm as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_LOOP_INFO),
                "::",
                stringify!(bpm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_LOOP_INFO>())).root_key as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_LOOP_INFO),
                "::",
                stringify!(root_key)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_LOOP_INFO>())).future as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_LOOP_INFO),
                "::",
                stringify!(future)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_BROADCAST_INFO {
        pub description: [::std::os::raw::c_char; 256usize],
        pub originator: [::std::os::raw::c_char; 32usize],
        pub originator_reference: [::std::os::raw::c_char; 32usize],
        pub origination_date: [::std::os::raw::c_char; 10usize],
        pub origination_time: [::std::os::raw::c_char; 8usize],
        pub time_reference_low: u32,
        pub time_reference_high: u32,
        pub version: ::std::os::raw::c_short,
        pub umid: [::std::os::raw::c_char; 64usize],
        pub reserved: [::std::os::raw::c_char; 190usize],
        pub coding_history_size: u32,
        pub coding_history: [::std::os::raw::c_char; 256usize],
    }
    #[test]
    fn bindgen_test_layout_SF_BROADCAST_INFO() {
        assert_eq!(
            ::std::mem::size_of::<SF_BROADCAST_INFO>(),
            864usize,
            concat!("Size of: ", stringify!(SF_BROADCAST_INFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_BROADCAST_INFO>(),
            4usize,
            concat!("Alignment of ", stringify!(SF_BROADCAST_INFO))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).description as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(description)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).originator as *const _ as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(originator)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).originator_reference as *const _
                    as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(originator_reference)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).origination_date as *const _ as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(origination_date)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).origination_time as *const _ as usize
            },
            330usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(origination_time)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).time_reference_low as *const _
                    as usize
            },
            340usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(time_reference_low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).time_reference_high as *const _
                    as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(time_reference_high)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).version as *const _ as usize },
            348usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(version)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).umid as *const _ as usize },
            350usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(umid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).reserved as *const _ as usize },
            414usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(reserved)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).coding_history_size as *const _
                    as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(coding_history_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_BROADCAST_INFO>())).coding_history as *const _ as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_BROADCAST_INFO),
                "::",
                stringify!(coding_history)
            )
        );
    }
    impl Default for SF_BROADCAST_INFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for SF_BROADCAST_INFO {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "SF_BROADCAST_INFO {{ description: [{}], originator: [{}], originator_reference: [{}], origination_date: {:?}, origination_time: {:?}, time_reference_low: {:?}, time_reference_high: {:?}, version: {:?}, umid: [{}], reserved: [{}], coding_history_size: {:?}, coding_history: [{}] }}" , self . description . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . originator . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . originator_reference . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . origination_date , self . origination_time , self . time_reference_low , self . time_reference_high , self . version , self . umid . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . reserved . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . coding_history_size , self . coding_history . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
        }
    }
    impl PartialEq for SF_BROADCAST_INFO {
        fn eq(&self, other: &SF_BROADCAST_INFO) -> bool {
            &self.description[..] == &other.description[..]
                && self.originator == other.originator
                && self.originator_reference == other.originator_reference
                && self.origination_date == other.origination_date
                && self.origination_time == other.origination_time
                && self.time_reference_low == other.time_reference_low
                && self.time_reference_high == other.time_reference_high
                && self.version == other.version
                && &self.umid[..] == &other.umid[..]
                && &self.reserved[..] == &other.reserved[..]
                && self.coding_history_size == other.coding_history_size
                && &self.coding_history[..] == &other.coding_history[..]
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SF_CART_TIMER {
        pub usage: [::std::os::raw::c_char; 4usize],
        pub value: i32,
    }
    #[test]
    fn bindgen_test_layout_SF_CART_TIMER() {
        assert_eq!(
            ::std::mem::size_of::<SF_CART_TIMER>(),
            8usize,
            concat!("Size of: ", stringify!(SF_CART_TIMER))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_CART_TIMER>(),
            4usize,
            concat!("Alignment of ", stringify!(SF_CART_TIMER))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_TIMER>())).usage as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_TIMER),
                "::",
                stringify!(usage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_TIMER>())).value as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_TIMER),
                "::",
                stringify!(value)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_CART_INFO {
        pub version: [::std::os::raw::c_char; 4usize],
        pub title: [::std::os::raw::c_char; 64usize],
        pub artist: [::std::os::raw::c_char; 64usize],
        pub cut_id: [::std::os::raw::c_char; 64usize],
        pub client_id: [::std::os::raw::c_char; 64usize],
        pub category: [::std::os::raw::c_char; 64usize],
        pub classification: [::std::os::raw::c_char; 64usize],
        pub out_cue: [::std::os::raw::c_char; 64usize],
        pub start_date: [::std::os::raw::c_char; 10usize],
        pub start_time: [::std::os::raw::c_char; 8usize],
        pub end_date: [::std::os::raw::c_char; 10usize],
        pub end_time: [::std::os::raw::c_char; 8usize],
        pub producer_app_id: [::std::os::raw::c_char; 64usize],
        pub producer_app_version: [::std::os::raw::c_char; 64usize],
        pub user_def: [::std::os::raw::c_char; 64usize],
        pub level_reference: i32,
        pub post_timers: [self::SF_CART_TIMER; 8usize],
        pub reserved: [::std::os::raw::c_char; 276usize],
        pub url: [::std::os::raw::c_char; 1024usize],
        pub tag_text_size: u32,
        pub tag_text: [::std::os::raw::c_char; 256usize],
    }
    #[test]
    fn bindgen_test_layout_SF_CART_INFO() {
        assert_eq!(
            ::std::mem::size_of::<SF_CART_INFO>(),
            2308usize,
            concat!("Size of: ", stringify!(SF_CART_INFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_CART_INFO>(),
            4usize,
            concat!("Alignment of ", stringify!(SF_CART_INFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).version as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(version)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).title as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(title)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).artist as *const _ as usize },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(artist)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).cut_id as *const _ as usize },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(cut_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).client_id as *const _ as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(client_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).category as *const _ as usize },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(category)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).classification as *const _ as usize },
            324usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(classification)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).out_cue as *const _ as usize },
            388usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(out_cue)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).start_date as *const _ as usize },
            452usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(start_date)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).start_time as *const _ as usize },
            462usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(start_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).end_date as *const _ as usize },
            470usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(end_date)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).end_time as *const _ as usize },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(end_time)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_CART_INFO>())).producer_app_id as *const _ as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(producer_app_id)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_CART_INFO>())).producer_app_version as *const _ as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(producer_app_version)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).user_def as *const _ as usize },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(user_def)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<SF_CART_INFO>())).level_reference as *const _ as usize
            },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(level_reference)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).post_timers as *const _ as usize },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(post_timers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).reserved as *const _ as usize },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(reserved)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).url as *const _ as usize },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(url)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).tag_text_size as *const _ as usize },
            2048usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(tag_text_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CART_INFO>())).tag_text as *const _ as usize },
            2052usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CART_INFO),
                "::",
                stringify!(tag_text)
            )
        );
    }
    impl Default for SF_CART_INFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for SF_CART_INFO {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "SF_CART_INFO {{ version: {:?}, title: [{}], artist: [{}], cut_id: [{}], client_id: [{}], category: [{}], classification: [{}], out_cue: [{}], start_date: {:?}, start_time: {:?}, end_date: {:?}, end_time: {:?}, producer_app_id: [{}], producer_app_version: [{}], user_def: [{}], level_reference: {:?}, post_timers: {:?}, reserved: [{}], url: [{}], tag_text_size: {:?}, tag_text: [{}] }}" , self . version , self . title . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . artist . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . cut_id . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . client_id . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . category . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . classification . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . out_cue . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . start_date , self . start_time , self . end_date , self . end_time , self . producer_app_id . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . producer_app_version . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . user_def . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . level_reference , self . post_timers , self . reserved . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . url . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . tag_text_size , self . tag_text . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
        }
    }
    impl PartialEq for SF_CART_INFO {
        fn eq(&self, other: &SF_CART_INFO) -> bool {
            self.version == other.version
                && &self.title[..] == &other.title[..]
                && &self.artist[..] == &other.artist[..]
                && &self.cut_id[..] == &other.cut_id[..]
                && &self.client_id[..] == &other.client_id[..]
                && &self.category[..] == &other.category[..]
                && &self.classification[..] == &other.classification[..]
                && &self.out_cue[..] == &other.out_cue[..]
                && self.start_date == other.start_date
                && self.start_time == other.start_time
                && self.end_date == other.end_date
                && self.end_time == other.end_time
                && &self.producer_app_id[..] == &other.producer_app_id[..]
                && &self.producer_app_version[..] == &other.producer_app_version[..]
                && &self.user_def[..] == &other.user_def[..]
                && self.level_reference == other.level_reference
                && self.post_timers == other.post_timers
                && &self.reserved[..] == &other.reserved[..]
                && &self.url[..] == &other.url[..]
                && self.tag_text_size == other.tag_text_size
                && &self.tag_text[..] == &other.tag_text[..]
        }
    }
    pub type sf_vio_get_filelen = ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> root::sf_count_t,
    >;
    pub type sf_vio_seek = ::std::option::Option<
        unsafe extern "C" fn(
            offset: root::sf_count_t,
            whence: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ) -> root::sf_count_t,
    >;
    pub type sf_vio_read = ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            count: root::sf_count_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> root::sf_count_t,
    >;
    pub type sf_vio_write = ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const ::std::os::raw::c_void,
            count: root::sf_count_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> root::sf_count_t,
    >;
    pub type sf_vio_tell = ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> root::sf_count_t,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SF_VIRTUAL_IO {
        pub get_filelen: root::sf_vio_get_filelen,
        pub seek: root::sf_vio_seek,
        pub read: root::sf_vio_read,
        pub write: root::sf_vio_write,
        pub tell: root::sf_vio_tell,
    }
    #[test]
    fn bindgen_test_layout_SF_VIRTUAL_IO() {
        assert_eq!(
            ::std::mem::size_of::<SF_VIRTUAL_IO>(),
            40usize,
            concat!("Size of: ", stringify!(SF_VIRTUAL_IO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_VIRTUAL_IO>(),
            8usize,
            concat!("Alignment of ", stringify!(SF_VIRTUAL_IO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_VIRTUAL_IO>())).get_filelen as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_VIRTUAL_IO),
                "::",
                stringify!(get_filelen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_VIRTUAL_IO>())).seek as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_VIRTUAL_IO),
                "::",
                stringify!(seek)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_VIRTUAL_IO>())).read as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_VIRTUAL_IO),
                "::",
                stringify!(read)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_VIRTUAL_IO>())).write as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_VIRTUAL_IO),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_VIRTUAL_IO>())).tell as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_VIRTUAL_IO),
                "::",
                stringify!(tell)
            )
        );
    }
    impl Default for SF_VIRTUAL_IO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn sf_open(
            path: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
            sfinfo: *mut root::SF_INFO,
        ) -> *mut root::SNDFILE;
    }
    extern "C" {
        pub fn sf_open_fd(
            fd: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
            sfinfo: *mut root::SF_INFO,
            close_desc: ::std::os::raw::c_int,
        ) -> *mut root::SNDFILE;
    }
    extern "C" {
        pub fn sf_open_virtual(
            sfvirtual: *mut root::SF_VIRTUAL_IO,
            mode: ::std::os::raw::c_int,
            sfinfo: *mut root::SF_INFO,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut root::SNDFILE;
    }
    extern "C" {
        pub fn sf_error(sndfile: *mut root::SNDFILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_strerror(sndfile: *mut root::SNDFILE) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn sf_error_number(errnum: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn sf_perror(sndfile: *mut root::SNDFILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_error_str(
            sndfile: *mut root::SNDFILE,
            str: *mut ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_command(
            sndfile: *mut root::SNDFILE,
            command: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            datasize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_format_check(info: *const root::SF_INFO) -> ::std::os::raw::c_int;
    }
    pub const SF_SEEK_SET: root::_bindgen_ty_9 = 0;
    pub const SF_SEEK_CUR: root::_bindgen_ty_9 = 1;
    pub const SF_SEEK_END: root::_bindgen_ty_9 = 2;
    pub type _bindgen_ty_9 = u32;
    extern "C" {
        pub fn sf_seek(
            sndfile: *mut root::SNDFILE,
            frames: root::sf_count_t,
            whence: ::std::os::raw::c_int,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_set_string(
            sndfile: *mut root::SNDFILE,
            str_type: ::std::os::raw::c_int,
            str: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_get_string(
            sndfile: *mut root::SNDFILE,
            str_type: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn sf_version_string() -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn sf_current_byterate(sndfile: *mut root::SNDFILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_read_raw(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_void,
            bytes: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_raw(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_void,
            bytes: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_readf_short(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_short,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_writef_short(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_short,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_readf_int(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_int,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_writef_int(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_int,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_readf_float(
            sndfile: *mut root::SNDFILE,
            ptr: *mut f32,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_writef_float(
            sndfile: *mut root::SNDFILE,
            ptr: *const f32,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_readf_double(
            sndfile: *mut root::SNDFILE,
            ptr: *mut f64,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_writef_double(
            sndfile: *mut root::SNDFILE,
            ptr: *const f64,
            frames: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_read_short(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_short,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_short(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_short,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_read_int(
            sndfile: *mut root::SNDFILE,
            ptr: *mut ::std::os::raw::c_int,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_int(
            sndfile: *mut root::SNDFILE,
            ptr: *const ::std::os::raw::c_int,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_read_float(
            sndfile: *mut root::SNDFILE,
            ptr: *mut f32,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_float(
            sndfile: *mut root::SNDFILE,
            ptr: *const f32,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_read_double(
            sndfile: *mut root::SNDFILE,
            ptr: *mut f64,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_write_double(
            sndfile: *mut root::SNDFILE,
            ptr: *const f64,
            items: root::sf_count_t,
        ) -> root::sf_count_t;
    }
    extern "C" {
        pub fn sf_close(sndfile: *mut root::SNDFILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_write_sync(sndfile: *mut root::SNDFILE);
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct SF_CHUNK_INFO {
        pub id: [::std::os::raw::c_char; 64usize],
        pub id_size: ::std::os::raw::c_uint,
        pub datalen: ::std::os::raw::c_uint,
        pub data: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_SF_CHUNK_INFO() {
        assert_eq!(
            ::std::mem::size_of::<SF_CHUNK_INFO>(),
            80usize,
            concat!("Size of: ", stringify!(SF_CHUNK_INFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SF_CHUNK_INFO>(),
            8usize,
            concat!("Alignment of ", stringify!(SF_CHUNK_INFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CHUNK_INFO>())).id as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CHUNK_INFO),
                "::",
                stringify!(id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CHUNK_INFO>())).id_size as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CHUNK_INFO),
                "::",
                stringify!(id_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CHUNK_INFO>())).datalen as *const _ as usize },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CHUNK_INFO),
                "::",
                stringify!(datalen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SF_CHUNK_INFO>())).data as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(SF_CHUNK_INFO),
                "::",
                stringify!(data)
            )
        );
    }
    impl Default for SF_CHUNK_INFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for SF_CHUNK_INFO {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "SF_CHUNK_INFO {{ id: [{}], id_size: {:?}, datalen: {:?}, data: {:?} }}",
                self.id
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>(),
                self.id_size,
                self.datalen,
                self.data
            )
        }
    }
    impl PartialEq for SF_CHUNK_INFO {
        fn eq(&self, other: &SF_CHUNK_INFO) -> bool {
            &self.id[..] == &other.id[..]
                && self.id_size == other.id_size
                && self.datalen == other.datalen
                && self.data == other.data
        }
    }
    extern "C" {
        pub fn sf_set_chunk(
            sndfile: *mut root::SNDFILE,
            chunk_info: *const root::SF_CHUNK_INFO,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SF_CHUNK_ITERATOR {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn sf_get_chunk_iterator(
            sndfile: *mut root::SNDFILE,
            chunk_info: *const root::SF_CHUNK_INFO,
        ) -> *mut root::SF_CHUNK_ITERATOR;
    }
    extern "C" {
        pub fn sf_next_chunk_iterator(
            iterator: *mut root::SF_CHUNK_ITERATOR,
        ) -> *mut root::SF_CHUNK_ITERATOR;
    }
    extern "C" {
        pub fn sf_get_chunk_size(
            it: *const root::SF_CHUNK_ITERATOR,
            chunk_info: *mut root::SF_CHUNK_INFO,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sf_get_chunk_data(
            it: *const root::SF_CHUNK_ITERATOR,
            chunk_info: *mut root::SF_CHUNK_INFO,
        ) -> ::std::os::raw::c_int;
    }
    pub type __builtin_va_list = [self::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            ::std::mem::size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    impl Default for __va_list_tag {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
}
