/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        storage: Storage,
        align: [Align; 0],
    }
    impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn new(storage: Storage) -> Self {
            Self { storage, align: [] }
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }

    pub const __llvm__: u32 = 1;
    pub const __clang__: u32 = 1;
    pub const __clang_major__: u32 = 8;
    pub const __clang_minor__: u32 = 0;
    pub const __clang_patchlevel__: u32 = 0;
    pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __GNUC_MINOR__: u32 = 2;
    pub const __GNUC_PATCHLEVEL__: u32 = 1;
    pub const __GNUC__: u32 = 4;
    pub const __GXX_ABI_VERSION: u32 = 1002;
    pub const __ATOMIC_RELAXED: u32 = 0;
    pub const __ATOMIC_CONSUME: u32 = 1;
    pub const __ATOMIC_ACQUIRE: u32 = 2;
    pub const __ATOMIC_RELEASE: u32 = 3;
    pub const __ATOMIC_ACQ_REL: u32 = 4;
    pub const __ATOMIC_SEQ_CST: u32 = 5;
    pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
    pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
    pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
    pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
    pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
    pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
    pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __STRICT_ANSI__: u32 = 1;
    pub const __GXX_EXPERIMENTAL_CXX0X__: u32 = 1;
    pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
    pub const __cpp_rtti: u32 = 199711;
    pub const __cpp_exceptions: u32 = 199711;
    pub const __cpp_unicode_characters: u32 = 200704;
    pub const __cpp_raw_strings: u32 = 200710;
    pub const __cpp_unicode_literals: u32 = 200710;
    pub const __cpp_user_defined_literals: u32 = 200809;
    pub const __cpp_lambdas: u32 = 200907;
    pub const __cpp_constexpr: u32 = 201603;
    pub const __cpp_range_based_for: u32 = 201603;
    pub const __cpp_static_assert: u32 = 201411;
    pub const __cpp_decltype: u32 = 200707;
    pub const __cpp_attributes: u32 = 200809;
    pub const __cpp_rvalue_references: u32 = 200610;
    pub const __cpp_variadic_templates: u32 = 200704;
    pub const __cpp_initializer_lists: u32 = 200806;
    pub const __cpp_delegating_constructors: u32 = 200604;
    pub const __cpp_nsdmi: u32 = 200809;
    pub const __cpp_inheriting_constructors: u32 = 201511;
    pub const __cpp_ref_qualifiers: u32 = 200710;
    pub const __cpp_alias_templates: u32 = 200704;
    pub const __cpp_threadsafe_static_init: u32 = 200806;
    pub const __cpp_binary_literals: u32 = 201304;
    pub const __cpp_digit_separators: u32 = 201309;
    pub const __cpp_init_captures: u32 = 201304;
    pub const __cpp_generic_lambdas: u32 = 201304;
    pub const __cpp_decltype_auto: u32 = 201304;
    pub const __cpp_return_type_deduction: u32 = 201304;
    pub const __cpp_aggregate_nsdmi: u32 = 201304;
    pub const __cpp_variable_templates: u32 = 201304;
    pub const __cpp_hex_float: u32 = 201603;
    pub const __cpp_inline_variables: u32 = 201606;
    pub const __cpp_noexcept_function_type: u32 = 201510;
    pub const __cpp_capture_star_this: u32 = 201603;
    pub const __cpp_if_constexpr: u32 = 201606;
    pub const __cpp_deduction_guides: u32 = 201703;
    pub const __cpp_template_auto: u32 = 201606;
    pub const __cpp_namespace_attributes: u32 = 201411;
    pub const __cpp_enumerator_attributes: u32 = 201411;
    pub const __cpp_nested_namespace_definitions: u32 = 201411;
    pub const __cpp_variadic_using: u32 = 201611;
    pub const __cpp_aggregate_bases: u32 = 201603;
    pub const __cpp_structured_bindings: u32 = 201606;
    pub const __cpp_nontype_template_args: u32 = 201411;
    pub const __cpp_fold_expressions: u32 = 201603;
    pub const __cpp_guaranteed_copy_elision: u32 = 201606;
    pub const __cpp_nontype_template_parameter_auto: u32 = 201606;
    pub const __cpp_aligned_new: u32 = 201606;
    pub const __CONSTANT_CFSTRINGS__: u32 = 1;
    pub const __EXCEPTIONS: u32 = 1;
    pub const __GXX_RTTI: u32 = 1;
    pub const __DEPRECATED: u32 = 1;
    pub const __GNUG__: u32 = 4;
    pub const __GXX_WEAK__: u32 = 1;
    pub const __OPTIMIZE__: u32 = 1;
    pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
    pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
    pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
    pub const __BYTE_ORDER__: u32 = 1234;
    pub const __LITTLE_ENDIAN__: u32 = 1;
    pub const _LP64: u32 = 1;
    pub const __LP64__: u32 = 1;
    pub const __CHAR_BIT__: u32 = 8;
    pub const __SCHAR_MAX__: u32 = 127;
    pub const __SHRT_MAX__: u32 = 32767;
    pub const __INT_MAX__: u32 = 2147483647;
    pub const __LONG_MAX__: u64 = 9223372036854775807;
    pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
    pub const __WCHAR_MAX__: u32 = 2147483647;
    pub const __WINT_MAX__: u32 = 4294967295;
    pub const __INTMAX_MAX__: u64 = 9223372036854775807;
    pub const __SIZE_MAX__: i32 = -1;
    pub const __UINTMAX_MAX__: i32 = -1;
    pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
    pub const __INTPTR_MAX__: u64 = 9223372036854775807;
    pub const __UINTPTR_MAX__: i32 = -1;
    pub const __SIZEOF_DOUBLE__: u32 = 8;
    pub const __SIZEOF_FLOAT__: u32 = 4;
    pub const __SIZEOF_INT__: u32 = 4;
    pub const __SIZEOF_LONG__: u32 = 8;
    pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
    pub const __SIZEOF_LONG_LONG__: u32 = 8;
    pub const __SIZEOF_POINTER__: u32 = 8;
    pub const __SIZEOF_SHORT__: u32 = 2;
    pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
    pub const __SIZEOF_SIZE_T__: u32 = 8;
    pub const __SIZEOF_WCHAR_T__: u32 = 4;
    pub const __SIZEOF_WINT_T__: u32 = 4;
    pub const __SIZEOF_INT128__: u32 = 16;
    pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INTMAX_WIDTH__: u32 = 64;
    pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __PTRDIFF_WIDTH__: u32 = 64;
    pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __INTPTR_WIDTH__: u32 = 64;
    pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __SIZE_WIDTH__: u32 = 64;
    pub const __WCHAR_WIDTH__: u32 = 32;
    pub const __WINT_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
    pub const __UINTMAX_WIDTH__: u32 = 64;
    pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINTPTR_WIDTH__: u32 = 64;
    pub const __FLT16_HAS_DENORM__: u32 = 1;
    pub const __FLT16_DIG__: u32 = 3;
    pub const __FLT16_DECIMAL_DIG__: u32 = 5;
    pub const __FLT16_HAS_INFINITY__: u32 = 1;
    pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT16_MANT_DIG__: u32 = 11;
    pub const __FLT16_MAX_10_EXP__: u32 = 4;
    pub const __FLT16_MAX_EXP__: u32 = 15;
    pub const __FLT16_MIN_10_EXP__: i32 = -13;
    pub const __FLT16_MIN_EXP__: i32 = -14;
    pub const __FLT_HAS_DENORM__: u32 = 1;
    pub const __FLT_DIG__: u32 = 6;
    pub const __FLT_DECIMAL_DIG__: u32 = 9;
    pub const __FLT_HAS_INFINITY__: u32 = 1;
    pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT_MANT_DIG__: u32 = 24;
    pub const __FLT_MAX_10_EXP__: u32 = 38;
    pub const __FLT_MAX_EXP__: u32 = 128;
    pub const __FLT_MIN_10_EXP__: i32 = -37;
    pub const __FLT_MIN_EXP__: i32 = -125;
    pub const __DBL_HAS_DENORM__: u32 = 1;
    pub const __DBL_DIG__: u32 = 15;
    pub const __DBL_DECIMAL_DIG__: u32 = 17;
    pub const __DBL_HAS_INFINITY__: u32 = 1;
    pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __DBL_MANT_DIG__: u32 = 53;
    pub const __DBL_MAX_10_EXP__: u32 = 308;
    pub const __DBL_MAX_EXP__: u32 = 1024;
    pub const __DBL_MIN_10_EXP__: i32 = -307;
    pub const __DBL_MIN_EXP__: i32 = -1021;
    pub const __LDBL_HAS_DENORM__: u32 = 1;
    pub const __LDBL_DIG__: u32 = 18;
    pub const __LDBL_DECIMAL_DIG__: u32 = 21;
    pub const __LDBL_HAS_INFINITY__: u32 = 1;
    pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __LDBL_MANT_DIG__: u32 = 64;
    pub const __LDBL_MAX_10_EXP__: u32 = 4932;
    pub const __LDBL_MAX_EXP__: u32 = 16384;
    pub const __LDBL_MIN_10_EXP__: i32 = -4931;
    pub const __LDBL_MIN_EXP__: i32 = -16381;
    pub const __POINTER_WIDTH__: u32 = 64;
    pub const __BIGGEST_ALIGNMENT__: u32 = 16;
    pub const __WINT_UNSIGNED__: u32 = 1;
    pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __UINT8_MAX__: u32 = 255;
    pub const __INT8_MAX__: u32 = 127;
    pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __UINT16_MAX__: u32 = 65535;
    pub const __INT16_MAX__: u32 = 32767;
    pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __UINT32_MAX__: u32 = 4294967295;
    pub const __INT32_MAX__: u32 = 2147483647;
    pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINT64_MAX__: i32 = -1;
    pub const __INT64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST8_MAX__: u32 = 127;
    pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_LEAST8_MAX__: u32 = 255;
    pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_LEAST16_MAX__: u32 = 32767;
    pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_LEAST16_MAX__: u32 = 65535;
    pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_LEAST32_MAX__: u32 = 2147483647;
    pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
    pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_LEAST64_MAX__: i32 = -1;
    pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INT_FAST8_MAX__: u32 = 127;
    pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_FAST8_MAX__: u32 = 255;
    pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_FAST16_MAX__: u32 = 32767;
    pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_FAST16_MAX__: u32 = 65535;
    pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_FAST32_MAX__: u32 = 2147483647;
    pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_FAST32_MAX__: u32 = 4294967295;
    pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_FAST64_MAX__: i32 = -1;
    pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __FINITE_MATH_ONLY__: u32 = 0;
    pub const __GNUC_GNU_INLINE__: u32 = 1;
    pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
    pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __PIC__: u32 = 2;
    pub const __pic__: u32 = 2;
    pub const __FLT_EVAL_METHOD__: u32 = 0;
    pub const __FLT_RADIX__: u32 = 2;
    pub const __DECIMAL_DIG__: u32 = 21;
    pub const __SSP_STRONG__: u32 = 2;
    pub const __code_model_small_: u32 = 1;
    pub const __amd64__: u32 = 1;
    pub const __amd64: u32 = 1;
    pub const __x86_64: u32 = 1;
    pub const __x86_64__: u32 = 1;
    pub const __bdver2: u32 = 1;
    pub const __bdver2__: u32 = 1;
    pub const __tune_bdver2__: u32 = 1;
    pub const __NO_MATH_INLINES: u32 = 1;
    pub const __AES__: u32 = 1;
    pub const __PCLMUL__: u32 = 1;
    pub const __LZCNT__: u32 = 1;
    pub const __BMI__: u32 = 1;
    pub const __POPCNT__: u32 = 1;
    pub const __PRFCHW__: u32 = 1;
    pub const __TBM__: u32 = 1;
    pub const __LWP__: u32 = 1;
    pub const __XOP__: u32 = 1;
    pub const __FMA4__: u32 = 1;
    pub const __SSE4A__: u32 = 1;
    pub const __FMA__: u32 = 1;
    pub const __F16C__: u32 = 1;
    pub const __FXSR__: u32 = 1;
    pub const __XSAVE__: u32 = 1;
    pub const __AVX__: u32 = 1;
    pub const __SSE4_2__: u32 = 1;
    pub const __SSE4_1__: u32 = 1;
    pub const __SSSE3__: u32 = 1;
    pub const __SSE3__: u32 = 1;
    pub const __SSE2__: u32 = 1;
    pub const __SSE2_MATH__: u32 = 1;
    pub const __SSE__: u32 = 1;
    pub const __SSE_MATH__: u32 = 1;
    pub const __MMX__: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
    pub const __SIZEOF_FLOAT128__: u32 = 16;
    pub const __unix: u32 = 1;
    pub const __unix__: u32 = 1;
    pub const __linux: u32 = 1;
    pub const __linux__: u32 = 1;
    pub const __gnu_linux__: u32 = 1;
    pub const __ELF__: u32 = 1;
    pub const _GNU_SOURCE: u32 = 1;
    pub const __FLOAT128__: u32 = 1;
    pub const __STDC__: u32 = 1;
    pub const __STDC_HOSTED__: u32 = 1;
    pub const __cplusplus: u32 = 201703;
    pub const __STDCPP_DEFAULT_NEW_ALIGNMENT__: u32 = 16;
    pub const __STDC_UTF_16__: u32 = 1;
    pub const __STDC_UTF_32__: u32 = 1;
    pub const HAVE_CONFIG_H: u32 = 1;
    pub const HAVE_POLL: u32 = 1;
    pub const HAVE_LIBPTHREAD: u32 = 1;
    pub const ENABLE_THREADS: u32 = 1;
    pub const __PLATFORM_LINUX__: u32 = 1;
    pub const __LINUX_ALSA__: u32 = 1;
    pub const __UNIX_JACK__: u32 = 1;
    pub const USE_ALSA: u32 = 1;
    pub const USE_DLTRICK_ALSA: u32 = 1;
    pub const USE_OSS: u32 = 1;
    pub const _GLIBCXX_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 8;
    pub const __GLIBCXX__: u32 = 20181127;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_USE_WEAK_REF: u32 = 1;
    pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
    pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
    pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
    pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
    pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
    pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
    pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
    pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
    pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
    pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
    pub const STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_HOSTED: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INT128: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
    pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
    pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
    pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const _MEMORY_H: u32 = 1;
    pub const _STRING_H: u32 = 1;
    pub const _STRINGS_H: u32 = 1;
    pub const _ASSERT_H: u32 = 1;
    pub const sz_VOID: u32 = 0;
    pub const sz_WORD: u32 = 4;
    pub const kindof_VOID: u32 = 0;
    pub const kindof_INT: u32 = 1;
    pub const kindof_FLOAT: u32 = 2;
    pub const kindof_COMPLEX: u32 = 3;
    pub const kindof_VEC3: u32 = 4;
    pub const kindof_VEC4: u32 = 5;
    pub const SILENCE: f64 = 0.0;
    pub const TRUE: u32 = 1;
    pub const FALSE: u32 = 0;
    pub const ONE_PI: f64 = 3.141592653589793;
    pub const TWO_PI: f64 = 6.283185307179586;
    pub const SQRT2: f64 = 1.4142135623730951;
    pub const __CHUCK_STAT_TRACK__: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const __cookie_io_functions_t_defined: u32 = 1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const RENAME_NOREPLACE: u32 = 1;
    pub const RENAME_EXCHANGE: u32 = 2;
    pub const RENAME_WHITEOUT: u32 = 4;
    pub const _BITS_STDIO_H: u32 = 1;
    pub const _PTHREAD_H: u32 = 1;
    pub const _SCHED_H: u32 = 1;
    pub const _BITS_SCHED_H: u32 = 1;
    pub const SCHED_OTHER: u32 = 0;
    pub const SCHED_FIFO: u32 = 1;
    pub const SCHED_RR: u32 = 2;
    pub const SCHED_BATCH: u32 = 3;
    pub const SCHED_ISO: u32 = 4;
    pub const SCHED_IDLE: u32 = 5;
    pub const SCHED_DEADLINE: u32 = 6;
    pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
    pub const CSIGNAL: u32 = 255;
    pub const CLONE_VM: u32 = 256;
    pub const CLONE_FS: u32 = 512;
    pub const CLONE_FILES: u32 = 1024;
    pub const CLONE_SIGHAND: u32 = 2048;
    pub const CLONE_PTRACE: u32 = 8192;
    pub const CLONE_VFORK: u32 = 16384;
    pub const CLONE_PARENT: u32 = 32768;
    pub const CLONE_THREAD: u32 = 65536;
    pub const CLONE_NEWNS: u32 = 131072;
    pub const CLONE_SYSVSEM: u32 = 262144;
    pub const CLONE_SETTLS: u32 = 524288;
    pub const CLONE_PARENT_SETTID: u32 = 1048576;
    pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
    pub const CLONE_DETACHED: u32 = 4194304;
    pub const CLONE_UNTRACED: u32 = 8388608;
    pub const CLONE_CHILD_SETTID: u32 = 16777216;
    pub const CLONE_NEWCGROUP: u32 = 33554432;
    pub const CLONE_NEWUTS: u32 = 67108864;
    pub const CLONE_NEWIPC: u32 = 134217728;
    pub const CLONE_NEWUSER: u32 = 268435456;
    pub const CLONE_NEWPID: u32 = 536870912;
    pub const CLONE_NEWNET: u32 = 1073741824;
    pub const CLONE_IO: u32 = 2147483648;
    pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
    pub const _BITS_CPU_SET_H: u32 = 1;
    pub const __CPU_SETSIZE: u32 = 1024;
    pub const CPU_SETSIZE: u32 = 1024;
    pub const _TIME_H: u32 = 1;
    pub const _BITS_TIME_H: u32 = 1;
    pub const CLOCK_REALTIME: u32 = 0;
    pub const CLOCK_MONOTONIC: u32 = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const CLOCK_REALTIME_COARSE: u32 = 5;
    pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const CLOCK_BOOTTIME: u32 = 7;
    pub const CLOCK_REALTIME_ALARM: u32 = 8;
    pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const CLOCK_TAI: u32 = 11;
    pub const TIMER_ABSTIME: u32 = 1;
    pub const _BITS_TIMEX_H: u32 = 1;
    pub const ADJ_OFFSET: u32 = 1;
    pub const ADJ_FREQUENCY: u32 = 2;
    pub const ADJ_MAXERROR: u32 = 4;
    pub const ADJ_ESTERROR: u32 = 8;
    pub const ADJ_STATUS: u32 = 16;
    pub const ADJ_TIMECONST: u32 = 32;
    pub const ADJ_TAI: u32 = 128;
    pub const ADJ_SETOFFSET: u32 = 256;
    pub const ADJ_MICRO: u32 = 4096;
    pub const ADJ_NANO: u32 = 8192;
    pub const ADJ_TICK: u32 = 16384;
    pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const MOD_OFFSET: u32 = 1;
    pub const MOD_FREQUENCY: u32 = 2;
    pub const MOD_MAXERROR: u32 = 4;
    pub const MOD_ESTERROR: u32 = 8;
    pub const MOD_STATUS: u32 = 16;
    pub const MOD_TIMECONST: u32 = 32;
    pub const MOD_CLKB: u32 = 16384;
    pub const MOD_CLKA: u32 = 32769;
    pub const MOD_TAI: u32 = 128;
    pub const MOD_MICRO: u32 = 4096;
    pub const MOD_NANO: u32 = 8192;
    pub const STA_PLL: u32 = 1;
    pub const STA_PPSFREQ: u32 = 2;
    pub const STA_PPSTIME: u32 = 4;
    pub const STA_FLL: u32 = 8;
    pub const STA_INS: u32 = 16;
    pub const STA_DEL: u32 = 32;
    pub const STA_UNSYNC: u32 = 64;
    pub const STA_FREQHOLD: u32 = 128;
    pub const STA_PPSSIGNAL: u32 = 256;
    pub const STA_PPSJITTER: u32 = 512;
    pub const STA_PPSWANDER: u32 = 1024;
    pub const STA_PPSERROR: u32 = 2048;
    pub const STA_CLOCKERR: u32 = 4096;
    pub const STA_NANO: u32 = 8192;
    pub const STA_MODE: u32 = 16384;
    pub const STA_CLK: u32 = 32768;
    pub const STA_RONLY: u32 = 65280;
    pub const __struct_tm_defined: u32 = 1;
    pub const __itimerspec_defined: u32 = 1;
    pub const TIME_UTC: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const PTHREAD_ONCE_INIT: u32 = 0;
    pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
    pub mod std {

        pub type nullptr_t = *const ::std::os::raw::c_void;
    }
    pub mod __gnu_cxx {}
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = f64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof32(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strfromd(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: f32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfroml(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32x,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64x,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::std::os::raw::c_ushort,
        pub __ctype_tolower: *const ::std::os::raw::c_int,
        pub __ctype_toupper: *const ::std::os::raw::c_int,
        pub __names: [*const ::std::os::raw::c_char; 13usize],
    }
    #[test]
    fn bindgen_test_layout___locale_struct() {
        assert_eq!(
            ::std::mem::size_of::<__locale_struct>(),
            232usize,
            concat!("Size of: ", stringify!(__locale_struct))
        );
        assert_eq!(
            ::std::mem::align_of::<__locale_struct>(),
            8usize,
            concat!("Alignment of ", stringify!(__locale_struct))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__locales)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_b)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_tolower)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_toupper)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__names)
            )
        );
    }
    impl Default for __locale_struct {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    extern "C" {
        pub fn strtol_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtod_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type pid_t = root::__pid_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type useconds_t = root::__useconds_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::std::os::raw::c_ulong;
    pub type ushort = ::std::os::raw::c_ushort;
    pub type uint = ::std::os::raw::c_uint;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulong;
    pub type register_t = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __sigset_t {
        pub __val: [::std::os::raw::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        assert_eq!(
            ::std::mem::size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        assert_eq!(
            ::std::mem::size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[test]
    fn bindgen_test_layout_timespec() {
        assert_eq!(
            ::std::mem::size_of::<timespec>(),
            16usize,
            concat!("Size of: ", stringify!(timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(timespec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    pub type __fd_mask = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct fd_set {
        pub fds_bits: [self::__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    pub type fd_mask = root::__fd_mask;
    extern "C" {
        pub fn select(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::std::os::raw::c_uint,
        pub __writers: ::std::os::raw::c_uint,
        pub __wrphase_futex: ::std::os::raw::c_uint,
        pub __writers_futex: ::std::os::raw::c_uint,
        pub __pad3: ::std::os::raw::c_uint,
        pub __pad4: ::std::os::raw::c_uint,
        pub __cur_writer: ::std::os::raw::c_int,
        pub __shared: ::std::os::raw::c_int,
        pub __rwelision: ::std::os::raw::c_schar,
        pub __pad1: [::std::os::raw::c_uchar; 7usize],
        pub __pad2: ::std::os::raw::c_ulong,
        pub __flags: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_rwlock_arch_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
            56usize,
            concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _
                    as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _
                    as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    impl Default for __pthread_internal_list {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_short,
        pub __elision: ::std::os::raw::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    impl Default for __pthread_mutex_s {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __bindgen_anon_1: root::__pthread_cond_s__bindgen_ty_1,
        pub __bindgen_anon_2: root::__pthread_cond_s__bindgen_ty_2,
        pub __g_refs: [::std::os::raw::c_uint; 2usize],
        pub __g_size: [::std::os::raw::c_uint; 2usize],
        pub __g1_orig_size: ::std::os::raw::c_uint,
        pub __wrefs: ::std::os::raw::c_uint,
        pub __g_signals: [::std::os::raw::c_uint; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_1 {
        pub __wseq: ::std::os::raw::c_ulonglong,
        pub __wseq32: root::__pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq32)
            )
        );
    }
    impl Default for __pthread_cond_s__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__pthread_cond_s__bindgen_ty_1 {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_2 {
        pub __g1_start: ::std::os::raw::c_ulonglong,
        pub __g1_start32: root::__pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start32)
            )
        );
    }
    impl Default for __pthread_cond_s__bindgen_ty_2 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_2 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__pthread_cond_s__bindgen_ty_2 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s>(),
            48usize,
            concat!("Size of: ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    impl Default for __pthread_cond_s {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "__pthread_cond_s {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals )
        }
    }
    pub type pthread_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutexattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_mutexattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_mutexattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_mutexattr_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_condattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_condattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_condattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_condattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_condattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_condattr_t {{ union }}")
        }
    }
    pub type pthread_key_t = ::std::os::raw::c_uint;
    pub type pthread_once_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_attr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_attr_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_attr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_attr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_attr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_attr_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::std::os::raw::c_char; 40usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 5usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_mutex_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_mutex_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_mutex_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::std::os::raw::c_char; 48usize],
        pub __align: ::std::os::raw::c_longlong,
        _bindgen_union_align: [u64; 6usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_cond_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_cond_t>(),
            48usize,
            concat!("Size of: ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_cond_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_cond_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_cond_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_cond_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlock_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlock_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlock_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_rwlock_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_rwlock_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_rwlock_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::std::os::raw::c_char; 8usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlockattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Size of: ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_rwlockattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_rwlockattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_rwlockattr_t {{ union }}")
        }
    }
    pub type pthread_spinlock_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::std::os::raw::c_char; 32usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_barrier_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrier_t>(),
            32usize,
            concat!("Size of: ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrier_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_barrier_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_barrier_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_barrier_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrierattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_barrierattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_barrierattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_barrierattr_t {{ union }}")
        }
    }
    extern "C" {
        pub fn random() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srandom(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn initstate(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::std::os::raw::c_int,
        pub rand_deg: ::std::os::raw::c_int,
        pub rand_sep: ::std::os::raw::c_int,
        pub end_ptr: *mut i32,
    }
    #[test]
    fn bindgen_test_layout_random_data() {
        assert_eq!(
            ::std::mem::size_of::<random_data>(),
            48usize,
            concat!("Size of: ", stringify!(random_data))
        );
        assert_eq!(
            ::std::mem::align_of::<random_data>(),
            8usize,
            concat!("Alignment of ", stringify!(random_data))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(fptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_deg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_sep)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(end_ptr)
            )
        );
    }
    impl Default for random_data {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srandom_r(
            __seed: ::std::os::raw::c_uint,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn initstate_r(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::std::os::raw::c_char,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    }
    extern "C" {
        pub fn lrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn mrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srand48(__seedval: ::std::os::raw::c_long);
    }
    extern "C" {
        pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct drand48_data {
        pub __x: [::std::os::raw::c_ushort; 3usize],
        pub __old_x: [::std::os::raw::c_ushort; 3usize],
        pub __c: ::std::os::raw::c_ushort,
        pub __init: ::std::os::raw::c_ushort,
        pub __a: ::std::os::raw::c_ulonglong,
    }
    #[test]
    fn bindgen_test_layout_drand48_data() {
        assert_eq!(
            ::std::mem::size_of::<drand48_data>(),
            24usize,
            concat!("Size of: ", stringify!(drand48_data))
        );
        assert_eq!(
            ::std::mem::align_of::<drand48_data>(),
            8usize,
            concat!("Alignment of ", stringify!(drand48_data))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__old_x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__c)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__init)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__a)
            )
        );
    }
    extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand48_r(
            __seedval: ::std::os::raw::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lcong48_r(
            __param: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn on_exit(
            __func: ::std::option::Option<
                unsafe extern "C" fn(
                    __status: ::std::os::raw::c_int,
                    __arg: *mut ::std::os::raw::c_void,
                ),
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setenv(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __replace: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearenv() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkostemp(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemp64(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn realpath(
            __name: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn qsort_r(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qecvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qfcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qgcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qecvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qfcvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    extern "C" {
        pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __valuep: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ptsname_r(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpt() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getloadavg(
            __loadavg: *mut f64,
            __nelem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memmove(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memccpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn rawmemchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memrchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcoll(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn strcoll_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm_l(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
            __l: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strndup(
            __string: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strchrnul(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcspn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> usize;
    }
    extern "C" {
        pub fn strspn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> usize;
    }
    extern "C" {
        pub fn strpbrk(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strstr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcasestr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn memmem(
            __haystack: *const ::std::os::raw::c_void,
            __haystacklen: usize,
            __needle: *const ::std::os::raw::c_void,
            __needlelen: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn __mempcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn mempcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
    }
    extern "C" {
        pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
    }
    extern "C" {
        pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strerror_r(
            __errnum: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strerror_l(
            __errnum: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn bcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bcopy(
            __src: *const ::std::os::raw::c_void,
            __dest: *mut ::std::os::raw::c_void,
            __n: usize,
        );
    }
    extern "C" {
        pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
    }
    extern "C" {
        pub fn index(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn rindex(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcasecmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncasecmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcasecmp_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncasecmp_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
    }
    extern "C" {
        pub fn strsep(
            __stringp: *mut *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __stpcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn stpcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __stpncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn stpncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strverscmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize)
            -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn basename(__filename: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __assert_fail(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert_perror_fail(
            __errnum: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_int,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(im)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKPOLAR {
        pub modulus: f64,
        pub phase: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKPOLAR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKPOLAR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKPOLAR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).modulus as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(modulus)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(phase)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC3 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC3() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC3>(),
            24usize,
            concat!("Size of: ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC3>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(z)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC4 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
        pub w: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC4() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC4>(),
            32usize,
            concat!("Size of: ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC4>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(z)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).w as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(w)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct t_CKVECTOR {
        pub N: ::std::os::raw::c_ulong,
        pub values: *mut f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVECTOR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVECTOR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVECTOR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).N as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(N)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).values as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(values)
            )
        );
    }
    impl Default for t_CKVECTOR {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type c_str = *mut ::std::os::raw::c_char;
    pub type c_constr = *const ::std::os::raw::c_char;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX_SAMPLE {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX_SAMPLE() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX_SAMPLE>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX_SAMPLE>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(im)
            )
        );
    }
    pub type __gnuc_va_list = root::__builtin_va_list;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    impl Default for __mbstate_t__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    impl Default for __mbstate_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "__mbstate_t {{ __count: {:?}, __value: {:?} }}",
                self.__count, self.__value
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos64_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos64_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::std::os::raw::c_void,
        pub __pad5: usize,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    impl Default for _IO_FILE {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type cookie_read_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_write_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *const ::std::os::raw::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_seek_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __pos: *mut root::__off64_t,
            __w: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
    pub type cookie_close_function_t = ::std::option::Option<
        unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::cookie_read_function_t,
        pub write: root::cookie_write_function_t,
        pub seek: root::cookie_seek_function_t,
        pub close: root::cookie_close_function_t,
    }
    #[test]
    fn bindgen_test_layout__IO_cookie_io_functions_t() {
        assert_eq!(
            ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
            32usize,
            concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(read)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(seek)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(close)
            )
        );
    }
    impl Default for _IO_cookie_io_functions_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    pub type va_list = root::__gnuc_va_list;
    pub type fpos_t = root::__fpos_t;
    pub type fpos64_t = root::__fpos64_t;
    extern "C" {
        pub static mut stdin: *mut root::FILE;
    }
    extern "C" {
        pub static mut stdout: *mut root::FILE;
    }
    extern "C" {
        pub static mut stderr: *mut root::FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn renameat(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn renameat2(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tempnam(
            __dir: *const ::std::os::raw::c_char,
            __pfx: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcloseall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fdopen(
            __fd: ::std::os::raw::c_int,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut ::std::os::raw::c_void,
            __modes: *const ::std::os::raw::c_char,
            __io_funcs: root::cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fmemopen(
            __s: *mut ::std::os::raw::c_void,
            __len: usize,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn open_memstream(
            __bufloc: *mut *mut ::std::os::raw::c_char,
            __sizeloc: *mut usize,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setbuffer(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        );
    }
    extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __f: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __asprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn asprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vdprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fgets_unlocked(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getline(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fputs_unlocked(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    extern "C" {
        pub fn fgetpos(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(
            __stream: *mut root::FILE,
            __pos: *const root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    extern "C" {
        pub fn fgetpos64(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos64(
            __stream: *mut root::FILE,
            __pos: *const root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub static mut sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        pub static mut _sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fileno_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn popen(
            __command: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            __args: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(
            arg1: *mut root::FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FastCircularBuffer {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct CircularBuffer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sched_param {
        pub sched_priority: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_sched_param() {
        assert_eq!(
            ::std::mem::size_of::<sched_param>(),
            4usize,
            concat!("Size of: ", stringify!(sched_param))
        );
        assert_eq!(
            ::std::mem::align_of::<sched_param>(),
            4usize,
            concat!("Alignment of ", stringify!(sched_param))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_param),
                "::",
                stringify!(sched_priority)
            )
        );
    }
    extern "C" {
        pub fn clone(
            __fn: ::std::option::Option<
                unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
            >,
            __child_stack: *mut ::std::os::raw::c_void,
            __flags: ::std::os::raw::c_int,
            __arg: *mut ::std::os::raw::c_void,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getcpu() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setns(
            __fd: ::std::os::raw::c_int,
            __nstype: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type __cpu_mask = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct cpu_set_t {
        pub __bits: [self::__cpu_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_cpu_set_t() {
        assert_eq!(
            ::std::mem::size_of::<cpu_set_t>(),
            128usize,
            concat!("Size of: ", stringify!(cpu_set_t))
        );
        assert_eq!(
            ::std::mem::align_of::<cpu_set_t>(),
            8usize,
            concat!("Alignment of ", stringify!(cpu_set_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cpu_set_t),
                "::",
                stringify!(__bits)
            )
        );
    }
    extern "C" {
        pub fn __sched_cpucount(
            __setsize: usize,
            __setp: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __sched_cpualloc(__count: usize) -> *mut root::cpu_set_t;
    }
    extern "C" {
        pub fn __sched_cpufree(__set: *mut root::cpu_set_t);
    }
    extern "C" {
        pub fn sched_setparam(
            __pid: root::__pid_t,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getparam(
            __pid: root::__pid_t,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_setscheduler(
            __pid: root::__pid_t,
            __policy: ::std::os::raw::c_int,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getscheduler(__pid: root::__pid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_rr_get_interval(
            __pid: root::__pid_t,
            __t: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_setaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_getaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timex {
        pub modes: ::std::os::raw::c_uint,
        pub offset: root::__syscall_slong_t,
        pub freq: root::__syscall_slong_t,
        pub maxerror: root::__syscall_slong_t,
        pub esterror: root::__syscall_slong_t,
        pub status: ::std::os::raw::c_int,
        pub constant: root::__syscall_slong_t,
        pub precision: root::__syscall_slong_t,
        pub tolerance: root::__syscall_slong_t,
        pub time: root::timeval,
        pub tick: root::__syscall_slong_t,
        pub ppsfreq: root::__syscall_slong_t,
        pub jitter: root::__syscall_slong_t,
        pub shift: ::std::os::raw::c_int,
        pub stabil: root::__syscall_slong_t,
        pub jitcnt: root::__syscall_slong_t,
        pub calcnt: root::__syscall_slong_t,
        pub errcnt: root::__syscall_slong_t,
        pub stbcnt: root::__syscall_slong_t,
        pub tai: ::std::os::raw::c_int,
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 44usize], u8>,
    }
    #[test]
    fn bindgen_test_layout_timex() {
        assert_eq!(
            ::std::mem::size_of::<timex>(),
            208usize,
            concat!("Size of: ", stringify!(timex))
        );
        assert_eq!(
            ::std::mem::align_of::<timex>(),
            8usize,
            concat!("Alignment of ", stringify!(timex))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).modes as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(modes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).offset as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).freq as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(freq)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(maxerror)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(esterror)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).status as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(status)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).constant as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(constant)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).precision as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(precision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tolerance)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).time as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tick as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(ppsfreq)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(jitter)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).shift as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(shift)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(stabil)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(jitcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(calcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(errcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(stbcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tai as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tai)
            )
        );
    }
    impl timex {
        #[inline]
        pub fn new_bitfield_1() -> root::__BindgenBitfieldUnit<[u8; 44usize], u8> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 44usize], u8> =
                Default::default();
            __bindgen_bitfield_unit
        }
    }
    extern "C" {
        pub fn clock_adjtime(
            __clock_id: root::__clockid_t,
            __utx: *mut root::timex,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct tm {
        pub tm_sec: ::std::os::raw::c_int,
        pub tm_min: ::std::os::raw::c_int,
        pub tm_hour: ::std::os::raw::c_int,
        pub tm_mday: ::std::os::raw::c_int,
        pub tm_mon: ::std::os::raw::c_int,
        pub tm_year: ::std::os::raw::c_int,
        pub tm_wday: ::std::os::raw::c_int,
        pub tm_yday: ::std::os::raw::c_int,
        pub tm_isdst: ::std::os::raw::c_int,
        pub tm_gmtoff: ::std::os::raw::c_long,
        pub tm_zone: *const ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_tm() {
        assert_eq!(
            ::std::mem::size_of::<tm>(),
            56usize,
            concat!("Size of: ", stringify!(tm))
        );
        assert_eq!(
            ::std::mem::align_of::<tm>(),
            8usize,
            concat!("Alignment of ", stringify!(tm))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_min)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_hour)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mon)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_year)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_wday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_yday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_isdst)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_gmtoff)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_zone)
            )
        );
    }
    impl Default for tm {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct itimerspec {
        pub it_interval: root::timespec,
        pub it_value: root::timespec,
    }
    #[test]
    fn bindgen_test_layout_itimerspec() {
        assert_eq!(
            ::std::mem::size_of::<itimerspec>(),
            32usize,
            concat!("Size of: ", stringify!(itimerspec))
        );
        assert_eq!(
            ::std::mem::align_of::<itimerspec>(),
            8usize,
            concat!("Alignment of ", stringify!(itimerspec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerspec),
                "::",
                stringify!(it_interval)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerspec),
                "::",
                stringify!(it_value)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigevent {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn clock() -> root::clock_t;
    }
    extern "C" {
        pub fn time(__timer: *mut root::time_t) -> root::time_t;
    }
    extern "C" {
        pub fn difftime(__time1: root::time_t, __time0: root::time_t) -> f64;
    }
    extern "C" {
        pub fn mktime(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn strftime(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: usize,
            __format: *const ::std::os::raw::c_char,
            __tp: *const root::tm,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __tp: *mut root::tm,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strftime_l(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: usize,
            __format: *const ::std::os::raw::c_char,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime_l(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __tp: *mut root::tm,
            __loc: root::locale_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gmtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn gmtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn asctime(__tp: *const root::tm) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime(__timer: *const root::time_t) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn asctime_r(
            __tp: *const root::tm,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime_r(
            __timer: *const root::time_t,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        pub static mut __daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut __timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        pub fn tzset();
    }
    extern "C" {
        pub static mut daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn stime(__when: *const root::time_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timegm(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn timelocal(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nanosleep(
            __requested_time: *const root::timespec,
            __remaining: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getres(
            __clock_id: root::clockid_t,
            __res: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_gettime(
            __clock_id: root::clockid_t,
            __tp: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_settime(
            __clock_id: root::clockid_t,
            __tp: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_nanosleep(
            __clock_id: root::clockid_t,
            __flags: ::std::os::raw::c_int,
            __req: *const root::timespec,
            __rem: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_getcpuclockid(
            __pid: root::pid_t,
            __clock_id: *mut root::clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_create(
            __clock_id: root::clockid_t,
            __evp: *mut root::sigevent,
            __timerid: *mut root::timer_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_delete(__timerid: root::timer_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_settime(
            __timerid: root::timer_t,
            __flags: ::std::os::raw::c_int,
            __value: *const root::itimerspec,
            __ovalue: *mut root::itimerspec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_gettime(
            __timerid: root::timer_t,
            __value: *mut root::itimerspec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timer_getoverrun(__timerid: root::timer_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timespec_get(
            __ts: *mut root::timespec,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut getdate_err: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut root::tm;
    }
    extern "C" {
        pub fn getdate_r(
            __string: *const ::std::os::raw::c_char,
            __resbufp: *mut root::tm,
        ) -> ::std::os::raw::c_int;
    }
    pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
    pub const PTHREAD_CREATE_JOINABLE: root::_bindgen_ty_1 = 0;
    pub const PTHREAD_CREATE_DETACHED: root::_bindgen_ty_1 = 1;
    pub type _bindgen_ty_1 = u32;
    pub const PTHREAD_MUTEX_TIMED_NP: root::_bindgen_ty_2 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE_NP: root::_bindgen_ty_2 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK_NP: root::_bindgen_ty_2 = 2;
    pub const PTHREAD_MUTEX_ADAPTIVE_NP: root::_bindgen_ty_2 = 3;
    pub const PTHREAD_MUTEX_NORMAL: root::_bindgen_ty_2 = 0;
    pub const PTHREAD_MUTEX_RECURSIVE: root::_bindgen_ty_2 = 1;
    pub const PTHREAD_MUTEX_ERRORCHECK: root::_bindgen_ty_2 = 2;
    pub const PTHREAD_MUTEX_DEFAULT: root::_bindgen_ty_2 = 0;
    pub const PTHREAD_MUTEX_FAST_NP: root::_bindgen_ty_2 = 0;
    pub type _bindgen_ty_2 = u32;
    pub const PTHREAD_MUTEX_STALLED: root::_bindgen_ty_3 = 0;
    pub const PTHREAD_MUTEX_STALLED_NP: root::_bindgen_ty_3 = 0;
    pub const PTHREAD_MUTEX_ROBUST: root::_bindgen_ty_3 = 1;
    pub const PTHREAD_MUTEX_ROBUST_NP: root::_bindgen_ty_3 = 1;
    pub type _bindgen_ty_3 = u32;
    pub const PTHREAD_PRIO_NONE: root::_bindgen_ty_4 = 0;
    pub const PTHREAD_PRIO_INHERIT: root::_bindgen_ty_4 = 1;
    pub const PTHREAD_PRIO_PROTECT: root::_bindgen_ty_4 = 2;
    pub type _bindgen_ty_4 = u32;
    pub const PTHREAD_RWLOCK_PREFER_READER_NP: root::_bindgen_ty_5 = 0;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: root::_bindgen_ty_5 = 1;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: root::_bindgen_ty_5 = 2;
    pub const PTHREAD_RWLOCK_DEFAULT_NP: root::_bindgen_ty_5 = 0;
    pub type _bindgen_ty_5 = u32;
    pub const PTHREAD_INHERIT_SCHED: root::_bindgen_ty_6 = 0;
    pub const PTHREAD_EXPLICIT_SCHED: root::_bindgen_ty_6 = 1;
    pub type _bindgen_ty_6 = u32;
    pub const PTHREAD_SCOPE_SYSTEM: root::_bindgen_ty_7 = 0;
    pub const PTHREAD_SCOPE_PROCESS: root::_bindgen_ty_7 = 1;
    pub type _bindgen_ty_7 = u32;
    pub const PTHREAD_PROCESS_PRIVATE: root::_bindgen_ty_8 = 0;
    pub const PTHREAD_PROCESS_SHARED: root::_bindgen_ty_8 = 1;
    pub type _bindgen_ty_8 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _pthread_cleanup_buffer {
        pub __routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __arg: *mut ::std::os::raw::c_void,
        pub __canceltype: ::std::os::raw::c_int,
        pub __prev: *mut root::_pthread_cleanup_buffer,
    }
    #[test]
    fn bindgen_test_layout__pthread_cleanup_buffer() {
        assert_eq!(
            ::std::mem::size_of::<_pthread_cleanup_buffer>(),
            32usize,
            concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            ::std::mem::align_of::<_pthread_cleanup_buffer>(),
            8usize,
            concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__canceltype)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__prev)
            )
        );
    }
    impl Default for _pthread_cleanup_buffer {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const PTHREAD_CANCEL_ENABLE: root::_bindgen_ty_9 = 0;
    pub const PTHREAD_CANCEL_DISABLE: root::_bindgen_ty_9 = 1;
    pub type _bindgen_ty_9 = u32;
    pub const PTHREAD_CANCEL_DEFERRED: root::_bindgen_ty_10 = 0;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: root::_bindgen_ty_10 = 1;
    pub type _bindgen_ty_10 = u32;
    extern "C" {
        pub fn pthread_create(
            __newthread: *mut root::pthread_t,
            __attr: *const root::pthread_attr_t,
            __start_routine: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn pthread_join(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_tryjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_timedjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_detach(__th: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_self() -> root::pthread_t;
    }
    extern "C" {
        pub fn pthread_equal(
            __thread1: root::pthread_t,
            __thread2: root::pthread_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_init(__attr: *mut root::pthread_attr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_destroy(__attr: *mut root::pthread_attr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getdetachstate(
            __attr: *const root::pthread_attr_t,
            __detachstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setdetachstate(
            __attr: *mut root::pthread_attr_t,
            __detachstate: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getguardsize(
            __attr: *const root::pthread_attr_t,
            __guardsize: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setguardsize(
            __attr: *mut root::pthread_attr_t,
            __guardsize: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedparam(
            __attr: *const root::pthread_attr_t,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedparam(
            __attr: *mut root::pthread_attr_t,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedpolicy(
            __attr: *const root::pthread_attr_t,
            __policy: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedpolicy(
            __attr: *mut root::pthread_attr_t,
            __policy: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getinheritsched(
            __attr: *const root::pthread_attr_t,
            __inherit: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setinheritsched(
            __attr: *mut root::pthread_attr_t,
            __inherit: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getscope(
            __attr: *const root::pthread_attr_t,
            __scope: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setscope(
            __attr: *mut root::pthread_attr_t,
            __scope: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstackaddr(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstackaddr(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstacksize(
            __attr: *const root::pthread_attr_t,
            __stacksize: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstacksize(
            __attr: *mut root::pthread_attr_t,
            __stacksize: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstack(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut ::std::os::raw::c_void,
            __stacksize: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstack(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
            __stacksize: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setaffinity_np(
            __attr: *mut root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getaffinity_np(
            __attr: *const root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_default_np(
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setattr_default_np(
            __attr: *const root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_np(
            __th: root::pthread_t,
            __attr: *mut root::pthread_attr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedparam(
            __target_thread: root::pthread_t,
            __policy: ::std::os::raw::c_int,
            __param: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getschedparam(
            __target_thread: root::pthread_t,
            __policy: *mut ::std::os::raw::c_int,
            __param: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedprio(
            __target_thread: root::pthread_t,
            __prio: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getname_np(
            __target_thread: root::pthread_t,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setname_np(
            __target_thread: root::pthread_t,
            __name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_once(
            __once_control: *mut root::pthread_once_t,
            __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcancelstate(
            __state: ::std::os::raw::c_int,
            __oldstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcanceltype(
            __type: ::std::os::raw::c_int,
            __oldtype: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cancel(__th: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_testcancel();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_unwind_buf_t {
        pub __cancel_jmp_buf: [self::__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
        pub __pad: [*mut ::std::os::raw::c_void; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
        pub __cancel_jmp_buf: root::__jmp_buf,
        pub __mask_was_saved: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
            72usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
                "::",
                stringify!(__cancel_jmp_buf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                    as *const _ as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
                "::",
                stringify!(__mask_was_saved)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_unwind_buf_t>(),
            104usize,
            concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_unwind_buf_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t),
                "::",
                stringify!(__cancel_jmp_buf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t),
                "::",
                stringify!(__pad)
            )
        );
    }
    impl Default for __pthread_unwind_buf_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cleanup_frame {
        pub __cancel_routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_frame() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cleanup_frame>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cleanup_frame>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__do_it)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _
                    as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_type)
            )
        );
    }
    impl Default for __pthread_cleanup_frame {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cleanup_class {
        pub __cancel_routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_class() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cleanup_class>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cleanup_class>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_routine as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_arg as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__do_it as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__do_it)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_type as *const _
                    as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_type)
            )
        );
    }
    impl Default for __pthread_cleanup_class {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn __sigsetjmp(
            __env: *mut root::__jmp_buf_tag,
            __savemask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_init(
            __mutex: *mut root::pthread_mutex_t,
            __mutexattr: *const root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_destroy(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_trylock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_lock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_timedlock(
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_unlock(__mutex: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_getprioceiling(
            __mutex: *const root::pthread_mutex_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_setprioceiling(
            __mutex: *mut root::pthread_mutex_t,
            __prioceiling: ::std::os::raw::c_int,
            __old_ceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent_np(
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_init(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_destroy(
            __attr: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getpshared(
            __attr: *const root::pthread_mutexattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setpshared(
            __attr: *mut root::pthread_mutexattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_gettype(
            __attr: *const root::pthread_mutexattr_t,
            __kind: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_settype(
            __attr: *mut root::pthread_mutexattr_t,
            __kind: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            __attr: *const root::pthread_mutexattr_t,
            __protocol: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            __attr: *mut root::pthread_mutexattr_t,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            __attr: *const root::pthread_mutexattr_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            __attr: *mut root::pthread_mutexattr_t,
            __prioceiling: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust_np(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust_np(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_init(
            __rwlock: *mut root::pthread_rwlock_t,
            __attr: *const root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_destroy(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_rdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_tryrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_wrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_trywrlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_unlock(
            __rwlock: *mut root::pthread_rwlock_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_init(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_destroy(
            __attr: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            __attr: *const root::pthread_rwlockattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            __attr: *mut root::pthread_rwlockattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getkind_np(
            __attr: *const root::pthread_rwlockattr_t,
            __pref: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setkind_np(
            __attr: *mut root::pthread_rwlockattr_t,
            __pref: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_init(
            __cond: *mut root::pthread_cond_t,
            __cond_attr: *const root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_destroy(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_signal(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_broadcast(__cond: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_wait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_timedwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_init(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_destroy(
            __attr: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getpshared(
            __attr: *const root::pthread_condattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setpshared(
            __attr: *mut root::pthread_condattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getclock(
            __attr: *const root::pthread_condattr_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setclock(
            __attr: *mut root::pthread_condattr_t,
            __clock_id: root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_init(
            __lock: *mut root::pthread_spinlock_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_destroy(__lock: *mut root::pthread_spinlock_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_lock(__lock: *mut root::pthread_spinlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_trylock(__lock: *mut root::pthread_spinlock_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_spin_unlock(__lock: *mut root::pthread_spinlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_init(
            __barrier: *mut root::pthread_barrier_t,
            __attr: *const root::pthread_barrierattr_t,
            __count: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_destroy(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_wait(
            __barrier: *mut root::pthread_barrier_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_init(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_destroy(
            __attr: *mut root::pthread_barrierattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_getpshared(
            __attr: *const root::pthread_barrierattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_setpshared(
            __attr: *mut root::pthread_barrierattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_create(
            __key: *mut root::pthread_key_t,
            __destr_function: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_delete(__key: root::pthread_key_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getspecific(__key: root::pthread_key_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn pthread_setspecific(
            __key: root::pthread_key_t,
            __pointer: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getcpuclockid(
            __thread_id: root::pthread_t,
            __clock_id: *mut root::__clockid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_atfork(
            __prepare: ::std::option::Option<unsafe extern "C" fn()>,
            __parent: ::std::option::Option<unsafe extern "C" fn()>,
            __child: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    pub type THREAD_HANDLE = root::pthread_t;
    pub type THREAD_RETURN = *mut ::std::os::raw::c_void;
    pub type THREAD_FUNCTION = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >;
    pub type MUTEX = root::pthread_mutex_t;
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XThread {
        pub thread: root::THREAD_HANDLE,
    }
    #[test]
    fn bindgen_test_layout_XThread() {
        assert_eq!(
            ::std::mem::size_of::<XThread>(),
            8usize,
            concat!("Size of: ", stringify!(XThread))
        );
        assert_eq!(
            ::std::mem::align_of::<XThread>(),
            8usize,
            concat!("Alignment of ", stringify!(XThread))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XThread>())).thread as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XThread),
                "::",
                stringify!(thread)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}start"]
        pub fn XThread_start(
            this: *mut root::XThread,
            routine: root::THREAD_FUNCTION,
            ptr: *mut ::std::os::raw::c_void,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}wait"]
        pub fn XThread_wait(
            this: *mut root::XThread,
            milliseconds: ::std::os::raw::c_long,
            cancel: bool,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}test"]
        pub fn XThread_test();
    }
    extern "C" {
        #[link_name = "\u{1}XThread"]
        pub fn XThread_XThread(this: *mut root::XThread);
    }
    extern "C" {
        #[link_name = "\u{1}XThread_destructor"]
        pub fn XThread_XThread_destructor(this: *mut root::XThread);
    }
    impl XThread {
        #[inline]
        pub unsafe fn start(
            &mut self,
            routine: root::THREAD_FUNCTION,
            ptr: *mut ::std::os::raw::c_void,
        ) -> bool {
            XThread_start(self, routine, ptr)
        }
        #[inline]
        pub unsafe fn wait(&mut self, milliseconds: ::std::os::raw::c_long, cancel: bool) -> bool {
            XThread_wait(self, milliseconds, cancel)
        }
        #[inline]
        pub unsafe fn test() {
            XThread_test()
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XThread_XThread(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            XThread_XThread_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XThreadUtil {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}our_priority"]
        pub static mut XThreadUtil_our_priority: ::std::os::raw::c_long;
    }
    #[test]
    fn bindgen_test_layout_XThreadUtil() {
        assert_eq!(
            ::std::mem::size_of::<XThreadUtil>(),
            1usize,
            concat!("Size of: ", stringify!(XThreadUtil))
        );
        assert_eq!(
            ::std::mem::align_of::<XThreadUtil>(),
            1usize,
            concat!("Alignment of ", stringify!(XThreadUtil))
        );
    }
    extern "C" {
        #[link_name = "\u{1}set_priority"]
        pub fn XThreadUtil_set_priority(
            tid: root::pthread_t,
            priority: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}set_priority"]
        pub fn XThreadUtil_set_priority1(
            priority: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong;
    }
    impl XThreadUtil {
        #[inline]
        pub unsafe fn set_priority(
            tid: root::pthread_t,
            priority: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_ulong {
            XThreadUtil_set_priority(tid, priority)
        }
        #[inline]
        pub unsafe fn set_priority1(priority: ::std::os::raw::c_long) -> ::std::os::raw::c_ulong {
            XThreadUtil_set_priority1(priority)
        }
    }
    #[repr(C)]
    pub struct XMutex {
        pub mutex: root::MUTEX,
    }
    #[test]
    fn bindgen_test_layout_XMutex() {
        assert_eq!(
            ::std::mem::size_of::<XMutex>(),
            40usize,
            concat!("Size of: ", stringify!(XMutex))
        );
        assert_eq!(
            ::std::mem::align_of::<XMutex>(),
            8usize,
            concat!("Alignment of ", stringify!(XMutex))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XMutex>())).mutex as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XMutex),
                "::",
                stringify!(mutex)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}acquire"]
        pub fn XMutex_acquire(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}release"]
        pub fn XMutex_release(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}XMutex"]
        pub fn XMutex_XMutex(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}XMutex_destructor"]
        pub fn XMutex_XMutex_destructor(this: *mut root::XMutex);
    }
    impl Default for XMutex {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for XMutex {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "XMutex {{ mutex: {:?} }}", self.mutex)
        }
    }
    impl XMutex {
        #[inline]
        pub unsafe fn acquire(&mut self) {
            XMutex_acquire(self)
        }
        #[inline]
        pub unsafe fn release(&mut self) {
            XMutex_release(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XMutex_XMutex(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            XMutex_XMutex_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread {
        pub m_thread_exit: ::std::os::raw::c_ulong,
        pub m_thread: root::XThread,
        pub m_data_buffer: *mut root::FastCircularBuffer,
        pub m_bytes_in_buffer: usize,
        pub m_thread_buffer: *mut ::std::os::raw::c_uchar,
        pub m_stream: *mut root::FILE,
        pub m_msg_buffer: *mut root::CircularBuffer,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct XWriteThread_Message {
        pub operation: root::XWriteThread_Message__bindgen_ty_1,
        pub file: *mut root::FILE,
        pub __bindgen_anon_1: root::XWriteThread_Message__bindgen_ty_2,
    }
    pub const XWriteThread_Message_WRITE: root::XWriteThread_Message__bindgen_ty_1 = 0;
    pub const XWriteThread_Message_SEEK: root::XWriteThread_Message__bindgen_ty_1 = 1;
    pub const XWriteThread_Message_FLUSH: root::XWriteThread_Message__bindgen_ty_1 = 2;
    pub const XWriteThread_Message_CLOSE: root::XWriteThread_Message__bindgen_ty_1 = 3;
    pub const XWriteThread_Message_SHUTDOWN: root::XWriteThread_Message__bindgen_ty_1 = 4;
    pub type XWriteThread_Message__bindgen_ty_1 = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union XWriteThread_Message__bindgen_ty_2 {
        pub write: root::XWriteThread_Message__bindgen_ty_2__bindgen_ty_1,
        pub seek: root::XWriteThread_Message__bindgen_ty_2__bindgen_ty_2,
        _bindgen_union_align: [u64; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread_Message__bindgen_ty_2__bindgen_ty_1 {
        pub data_size: usize,
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>()))
                    .data_size as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(data_size)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread_Message__bindgen_ty_2__bindgen_ty_2 {
        pub offset: ::std::os::raw::c_long,
        pub whence: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>())).offset
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>())).whence
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2),
                "::",
                stringify!(whence)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread_Message__bindgen_ty_2>(),
            16usize,
            concat!("Size of: ", stringify!(XWriteThread_Message__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread_Message__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2>())).write as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2>())).seek as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2),
                "::",
                stringify!(seek)
            )
        );
    }
    impl Default for XWriteThread_Message__bindgen_ty_2 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for XWriteThread_Message__bindgen_ty_2 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "XWriteThread_Message__bindgen_ty_2 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread_Message>(),
            32usize,
            concat!("Size of: ", stringify!(XWriteThread_Message))
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread_Message>(),
            8usize,
            concat!("Alignment of ", stringify!(XWriteThread_Message))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message>())).operation as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message),
                "::",
                stringify!(operation)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread_Message>())).file as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message),
                "::",
                stringify!(file)
            )
        );
    }
    impl Default for XWriteThread_Message {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for XWriteThread_Message {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "XWriteThread_Message {{ operation: {:?}, file: {:?}, __bindgen_anon_1: {:?} }}",
                self.operation, self.file, self.__bindgen_anon_1
            )
        }
    }
    extern "C" {
        #[link_name = "\u{1}PRODUCER_BUFFER_SIZE"]
        pub static XWriteThread_PRODUCER_BUFFER_SIZE: usize;
    }
    extern "C" {
        #[link_name = "\u{1}o_defaultWriteThread"]
        pub static mut XWriteThread_o_defaultWriteThread: *mut root::XWriteThread;
    }
    #[test]
    fn bindgen_test_layout_XWriteThread() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread>(),
            56usize,
            concat!("Size of: ", stringify!(XWriteThread))
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread>(),
            8usize,
            concat!("Alignment of ", stringify!(XWriteThread))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_thread_exit as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread_exit)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_thread as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_data_buffer as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_data_buffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread>())).m_bytes_in_buffer as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_bytes_in_buffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread>())).m_thread_buffer as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_stream as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_stream)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_msg_buffer as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_msg_buffer)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}shared"]
        pub fn XWriteThread_shared() -> *mut root::XWriteThread;
    }
    extern "C" {
        #[link_name = "\u{1}fwrite"]
        pub fn XWriteThread_fwrite(
            this: *mut root::XWriteThread,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        #[link_name = "\u{1}fseek"]
        pub fn XWriteThread_fseek(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
            offset: ::std::os::raw::c_long,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}fflush"]
        pub fn XWriteThread_fflush(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}fclose"]
        pub fn XWriteThread_fclose(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}shutdown"]
        pub fn XWriteThread_shutdown(this: *mut root::XWriteThread);
    }
    extern "C" {
        #[link_name = "\u{1}XWriteThread"]
        pub fn XWriteThread_XWriteThread(
            this: *mut root::XWriteThread,
            data_buffer_size: usize,
            msg_buffer_size: usize,
        );
    }
    impl Default for XWriteThread {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl XWriteThread {
        #[inline]
        pub unsafe fn shared() -> *mut root::XWriteThread {
            XWriteThread_shared()
        }
        #[inline]
        pub unsafe fn fwrite(
            &mut self,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize {
            XWriteThread_fwrite(self, ptr, size, nitems, stream)
        }
        #[inline]
        pub unsafe fn fseek(
            &mut self,
            stream: *mut root::FILE,
            offset: ::std::os::raw::c_long,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int {
            XWriteThread_fseek(self, stream, offset, whence)
        }
        #[inline]
        pub unsafe fn fflush(&mut self, stream: *mut root::FILE) -> ::std::os::raw::c_int {
            XWriteThread_fflush(self, stream)
        }
        #[inline]
        pub unsafe fn fclose(&mut self, stream: *mut root::FILE) -> ::std::os::raw::c_int {
            XWriteThread_fclose(self, stream)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) {
            XWriteThread_shutdown(self)
        }
        #[inline]
        pub unsafe fn new(data_buffer_size: usize, msg_buffer_size: usize) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XWriteThread_XWriteThread(&mut __bindgen_tmp, data_buffer_size, msg_buffer_size);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __locale_data {
        pub _address: u8,
    }
    pub type __builtin_va_list = [self::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            ::std::mem::size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    impl Default for __va_list_tag {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
}
