/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Default)]
    pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
    impl<T> __IncompleteArrayField<T> {
        #[inline]
        pub fn new() -> Self {
            __IncompleteArrayField(::std::marker::PhantomData, [])
        }
        #[inline]
        pub unsafe fn as_ptr(&self) -> *const T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_slice(&self, len: usize) -> &[T] {
            ::std::slice::from_raw_parts(self.as_ptr(), len)
        }
        #[inline]
        pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
            ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
        }
    }
    impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__IncompleteArrayField")
        }
    }
    impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }

    pub const __llvm__: u32 = 1;
    pub const __clang__: u32 = 1;
    pub const __clang_major__: u32 = 8;
    pub const __clang_minor__: u32 = 0;
    pub const __clang_patchlevel__: u32 = 0;
    pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __GNUC_MINOR__: u32 = 2;
    pub const __GNUC_PATCHLEVEL__: u32 = 1;
    pub const __GNUC__: u32 = 4;
    pub const __GXX_ABI_VERSION: u32 = 1002;
    pub const __ATOMIC_RELAXED: u32 = 0;
    pub const __ATOMIC_CONSUME: u32 = 1;
    pub const __ATOMIC_ACQUIRE: u32 = 2;
    pub const __ATOMIC_RELEASE: u32 = 3;
    pub const __ATOMIC_ACQ_REL: u32 = 4;
    pub const __ATOMIC_SEQ_CST: u32 = 5;
    pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
    pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
    pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
    pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
    pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
    pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
    pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __STRICT_ANSI__: u32 = 1;
    pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
    pub const __CONSTANT_CFSTRINGS__: u32 = 1;
    pub const __OPTIMIZE__: u32 = 1;
    pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
    pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
    pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
    pub const __BYTE_ORDER__: u32 = 1234;
    pub const __LITTLE_ENDIAN__: u32 = 1;
    pub const _LP64: u32 = 1;
    pub const __LP64__: u32 = 1;
    pub const __CHAR_BIT__: u32 = 8;
    pub const __SCHAR_MAX__: u32 = 127;
    pub const __SHRT_MAX__: u32 = 32767;
    pub const __INT_MAX__: u32 = 2147483647;
    pub const __LONG_MAX__: u64 = 9223372036854775807;
    pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
    pub const __WCHAR_MAX__: u32 = 2147483647;
    pub const __WINT_MAX__: u32 = 4294967295;
    pub const __INTMAX_MAX__: u64 = 9223372036854775807;
    pub const __SIZE_MAX__: i32 = -1;
    pub const __UINTMAX_MAX__: i32 = -1;
    pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
    pub const __INTPTR_MAX__: u64 = 9223372036854775807;
    pub const __UINTPTR_MAX__: i32 = -1;
    pub const __SIZEOF_DOUBLE__: u32 = 8;
    pub const __SIZEOF_FLOAT__: u32 = 4;
    pub const __SIZEOF_INT__: u32 = 4;
    pub const __SIZEOF_LONG__: u32 = 8;
    pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
    pub const __SIZEOF_LONG_LONG__: u32 = 8;
    pub const __SIZEOF_POINTER__: u32 = 8;
    pub const __SIZEOF_SHORT__: u32 = 2;
    pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
    pub const __SIZEOF_SIZE_T__: u32 = 8;
    pub const __SIZEOF_WCHAR_T__: u32 = 4;
    pub const __SIZEOF_WINT_T__: u32 = 4;
    pub const __SIZEOF_INT128__: u32 = 16;
    pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INTMAX_WIDTH__: u32 = 64;
    pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __PTRDIFF_WIDTH__: u32 = 64;
    pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __INTPTR_WIDTH__: u32 = 64;
    pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __SIZE_WIDTH__: u32 = 64;
    pub const __WCHAR_WIDTH__: u32 = 32;
    pub const __WINT_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
    pub const __UINTMAX_WIDTH__: u32 = 64;
    pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINTPTR_WIDTH__: u32 = 64;
    pub const __FLT16_HAS_DENORM__: u32 = 1;
    pub const __FLT16_DIG__: u32 = 3;
    pub const __FLT16_DECIMAL_DIG__: u32 = 5;
    pub const __FLT16_HAS_INFINITY__: u32 = 1;
    pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT16_MANT_DIG__: u32 = 11;
    pub const __FLT16_MAX_10_EXP__: u32 = 4;
    pub const __FLT16_MAX_EXP__: u32 = 15;
    pub const __FLT16_MIN_10_EXP__: i32 = -13;
    pub const __FLT16_MIN_EXP__: i32 = -14;
    pub const __FLT_HAS_DENORM__: u32 = 1;
    pub const __FLT_DIG__: u32 = 6;
    pub const __FLT_DECIMAL_DIG__: u32 = 9;
    pub const __FLT_HAS_INFINITY__: u32 = 1;
    pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT_MANT_DIG__: u32 = 24;
    pub const __FLT_MAX_10_EXP__: u32 = 38;
    pub const __FLT_MAX_EXP__: u32 = 128;
    pub const __FLT_MIN_10_EXP__: i32 = -37;
    pub const __FLT_MIN_EXP__: i32 = -125;
    pub const __DBL_HAS_DENORM__: u32 = 1;
    pub const __DBL_DIG__: u32 = 15;
    pub const __DBL_DECIMAL_DIG__: u32 = 17;
    pub const __DBL_HAS_INFINITY__: u32 = 1;
    pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __DBL_MANT_DIG__: u32 = 53;
    pub const __DBL_MAX_10_EXP__: u32 = 308;
    pub const __DBL_MAX_EXP__: u32 = 1024;
    pub const __DBL_MIN_10_EXP__: i32 = -307;
    pub const __DBL_MIN_EXP__: i32 = -1021;
    pub const __LDBL_HAS_DENORM__: u32 = 1;
    pub const __LDBL_DIG__: u32 = 18;
    pub const __LDBL_DECIMAL_DIG__: u32 = 21;
    pub const __LDBL_HAS_INFINITY__: u32 = 1;
    pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __LDBL_MANT_DIG__: u32 = 64;
    pub const __LDBL_MAX_10_EXP__: u32 = 4932;
    pub const __LDBL_MAX_EXP__: u32 = 16384;
    pub const __LDBL_MIN_10_EXP__: i32 = -4931;
    pub const __LDBL_MIN_EXP__: i32 = -16381;
    pub const __POINTER_WIDTH__: u32 = 64;
    pub const __BIGGEST_ALIGNMENT__: u32 = 16;
    pub const __WINT_UNSIGNED__: u32 = 1;
    pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __UINT8_MAX__: u32 = 255;
    pub const __INT8_MAX__: u32 = 127;
    pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __UINT16_MAX__: u32 = 65535;
    pub const __INT16_MAX__: u32 = 32767;
    pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __UINT32_MAX__: u32 = 4294967295;
    pub const __INT32_MAX__: u32 = 2147483647;
    pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINT64_MAX__: i32 = -1;
    pub const __INT64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST8_MAX__: u32 = 127;
    pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_LEAST8_MAX__: u32 = 255;
    pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_LEAST16_MAX__: u32 = 32767;
    pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_LEAST16_MAX__: u32 = 65535;
    pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_LEAST32_MAX__: u32 = 2147483647;
    pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
    pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_LEAST64_MAX__: i32 = -1;
    pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INT_FAST8_MAX__: u32 = 127;
    pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_FAST8_MAX__: u32 = 255;
    pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_FAST16_MAX__: u32 = 32767;
    pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_FAST16_MAX__: u32 = 65535;
    pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_FAST32_MAX__: u32 = 2147483647;
    pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_FAST32_MAX__: u32 = 4294967295;
    pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_FAST64_MAX__: i32 = -1;
    pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __FINITE_MATH_ONLY__: u32 = 0;
    pub const __GNUC_STDC_INLINE__: u32 = 1;
    pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
    pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __PIC__: u32 = 2;
    pub const __pic__: u32 = 2;
    pub const __FLT_EVAL_METHOD__: u32 = 0;
    pub const __FLT_RADIX__: u32 = 2;
    pub const __DECIMAL_DIG__: u32 = 21;
    pub const __SSP_STRONG__: u32 = 2;
    pub const __code_model_small_: u32 = 1;
    pub const __amd64__: u32 = 1;
    pub const __amd64: u32 = 1;
    pub const __x86_64: u32 = 1;
    pub const __x86_64__: u32 = 1;
    pub const __bdver2: u32 = 1;
    pub const __bdver2__: u32 = 1;
    pub const __tune_bdver2__: u32 = 1;
    pub const __NO_MATH_INLINES: u32 = 1;
    pub const __AES__: u32 = 1;
    pub const __PCLMUL__: u32 = 1;
    pub const __LZCNT__: u32 = 1;
    pub const __BMI__: u32 = 1;
    pub const __POPCNT__: u32 = 1;
    pub const __PRFCHW__: u32 = 1;
    pub const __TBM__: u32 = 1;
    pub const __XOP__: u32 = 1;
    pub const __FMA4__: u32 = 1;
    pub const __SSE4A__: u32 = 1;
    pub const __FMA__: u32 = 1;
    pub const __F16C__: u32 = 1;
    pub const __FXSR__: u32 = 1;
    pub const __XSAVE__: u32 = 1;
    pub const __AVX__: u32 = 1;
    pub const __SSE4_2__: u32 = 1;
    pub const __SSE4_1__: u32 = 1;
    pub const __SSSE3__: u32 = 1;
    pub const __SSE3__: u32 = 1;
    pub const __SSE2__: u32 = 1;
    pub const __SSE2_MATH__: u32 = 1;
    pub const __SSE__: u32 = 1;
    pub const __SSE_MATH__: u32 = 1;
    pub const __MMX__: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
    pub const __SIZEOF_FLOAT128__: u32 = 16;
    pub const __unix: u32 = 1;
    pub const __unix__: u32 = 1;
    pub const __linux: u32 = 1;
    pub const __linux__: u32 = 1;
    pub const __gnu_linux__: u32 = 1;
    pub const __ELF__: u32 = 1;
    pub const __FLOAT128__: u32 = 1;
    pub const __STDC__: u32 = 1;
    pub const __STDC_HOSTED__: u32 = 1;
    pub const __STDC_VERSION__: u32 = 201112;
    pub const __STDC_UTF_16__: u32 = 1;
    pub const __STDC_UTF_32__: u32 = 1;
    pub const HAVE_CONFIG_H: u32 = 1;
    pub const HAVE_POLL: u32 = 1;
    pub const HAVE_LIBPTHREAD: u32 = 1;
    pub const ENABLE_THREADS: u32 = 1;
    pub const __PLATFORM_LINUX__: u32 = 1;
    pub const __LINUX_ALSA__: u32 = 1;
    pub const __UNIX_JACK__: u32 = 1;
    pub const USE_ALSA: u32 = 1;
    pub const USE_DLTRICK_ALSA: u32 = 1;
    pub const USE_OSS: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _SYS_SOCKET_H: u32 = 1;
    pub const __iovec_defined: u32 = 1;
    pub const PF_UNSPEC: u32 = 0;
    pub const PF_LOCAL: u32 = 1;
    pub const PF_UNIX: u32 = 1;
    pub const PF_FILE: u32 = 1;
    pub const PF_INET: u32 = 2;
    pub const PF_AX25: u32 = 3;
    pub const PF_IPX: u32 = 4;
    pub const PF_APPLETALK: u32 = 5;
    pub const PF_NETROM: u32 = 6;
    pub const PF_BRIDGE: u32 = 7;
    pub const PF_ATMPVC: u32 = 8;
    pub const PF_X25: u32 = 9;
    pub const PF_INET6: u32 = 10;
    pub const PF_ROSE: u32 = 11;
    pub const PF_DECnet: u32 = 12;
    pub const PF_NETBEUI: u32 = 13;
    pub const PF_SECURITY: u32 = 14;
    pub const PF_KEY: u32 = 15;
    pub const PF_NETLINK: u32 = 16;
    pub const PF_ROUTE: u32 = 16;
    pub const PF_PACKET: u32 = 17;
    pub const PF_ASH: u32 = 18;
    pub const PF_ECONET: u32 = 19;
    pub const PF_ATMSVC: u32 = 20;
    pub const PF_RDS: u32 = 21;
    pub const PF_SNA: u32 = 22;
    pub const PF_IRDA: u32 = 23;
    pub const PF_PPPOX: u32 = 24;
    pub const PF_WANPIPE: u32 = 25;
    pub const PF_LLC: u32 = 26;
    pub const PF_IB: u32 = 27;
    pub const PF_MPLS: u32 = 28;
    pub const PF_CAN: u32 = 29;
    pub const PF_TIPC: u32 = 30;
    pub const PF_BLUETOOTH: u32 = 31;
    pub const PF_IUCV: u32 = 32;
    pub const PF_RXRPC: u32 = 33;
    pub const PF_ISDN: u32 = 34;
    pub const PF_PHONET: u32 = 35;
    pub const PF_IEEE802154: u32 = 36;
    pub const PF_CAIF: u32 = 37;
    pub const PF_ALG: u32 = 38;
    pub const PF_NFC: u32 = 39;
    pub const PF_VSOCK: u32 = 40;
    pub const PF_KCM: u32 = 41;
    pub const PF_QIPCRTR: u32 = 42;
    pub const PF_SMC: u32 = 43;
    pub const PF_MAX: u32 = 44;
    pub const AF_UNSPEC: u32 = 0;
    pub const AF_LOCAL: u32 = 1;
    pub const AF_UNIX: u32 = 1;
    pub const AF_FILE: u32 = 1;
    pub const AF_INET: u32 = 2;
    pub const AF_AX25: u32 = 3;
    pub const AF_IPX: u32 = 4;
    pub const AF_APPLETALK: u32 = 5;
    pub const AF_NETROM: u32 = 6;
    pub const AF_BRIDGE: u32 = 7;
    pub const AF_ATMPVC: u32 = 8;
    pub const AF_X25: u32 = 9;
    pub const AF_INET6: u32 = 10;
    pub const AF_ROSE: u32 = 11;
    pub const AF_DECnet: u32 = 12;
    pub const AF_NETBEUI: u32 = 13;
    pub const AF_SECURITY: u32 = 14;
    pub const AF_KEY: u32 = 15;
    pub const AF_NETLINK: u32 = 16;
    pub const AF_ROUTE: u32 = 16;
    pub const AF_PACKET: u32 = 17;
    pub const AF_ASH: u32 = 18;
    pub const AF_ECONET: u32 = 19;
    pub const AF_ATMSVC: u32 = 20;
    pub const AF_RDS: u32 = 21;
    pub const AF_SNA: u32 = 22;
    pub const AF_IRDA: u32 = 23;
    pub const AF_PPPOX: u32 = 24;
    pub const AF_WANPIPE: u32 = 25;
    pub const AF_LLC: u32 = 26;
    pub const AF_IB: u32 = 27;
    pub const AF_MPLS: u32 = 28;
    pub const AF_CAN: u32 = 29;
    pub const AF_TIPC: u32 = 30;
    pub const AF_BLUETOOTH: u32 = 31;
    pub const AF_IUCV: u32 = 32;
    pub const AF_RXRPC: u32 = 33;
    pub const AF_ISDN: u32 = 34;
    pub const AF_PHONET: u32 = 35;
    pub const AF_IEEE802154: u32 = 36;
    pub const AF_CAIF: u32 = 37;
    pub const AF_ALG: u32 = 38;
    pub const AF_NFC: u32 = 39;
    pub const AF_VSOCK: u32 = 40;
    pub const AF_KCM: u32 = 41;
    pub const AF_QIPCRTR: u32 = 42;
    pub const AF_SMC: u32 = 43;
    pub const AF_MAX: u32 = 44;
    pub const SOL_RAW: u32 = 255;
    pub const SOL_DECNET: u32 = 261;
    pub const SOL_X25: u32 = 262;
    pub const SOL_PACKET: u32 = 263;
    pub const SOL_ATM: u32 = 264;
    pub const SOL_AAL: u32 = 265;
    pub const SOL_IRDA: u32 = 266;
    pub const SOL_NETBEUI: u32 = 267;
    pub const SOL_LLC: u32 = 268;
    pub const SOL_DCCP: u32 = 269;
    pub const SOL_NETLINK: u32 = 270;
    pub const SOL_TIPC: u32 = 271;
    pub const SOL_RXRPC: u32 = 272;
    pub const SOL_PPPOL2TP: u32 = 273;
    pub const SOL_BLUETOOTH: u32 = 274;
    pub const SOL_PNPIPE: u32 = 275;
    pub const SOL_RDS: u32 = 276;
    pub const SOL_IUCV: u32 = 277;
    pub const SOL_CAIF: u32 = 278;
    pub const SOL_ALG: u32 = 279;
    pub const SOL_NFC: u32 = 280;
    pub const SOL_KCM: u32 = 281;
    pub const SOL_TLS: u32 = 282;
    pub const SOMAXCONN: u32 = 128;
    pub const _BITS_SOCKADDR_H: u32 = 1;
    pub const _SS_SIZE: u32 = 128;
    pub const FIOSETOWN: u32 = 35073;
    pub const SIOCSPGRP: u32 = 35074;
    pub const FIOGETOWN: u32 = 35075;
    pub const SIOCGPGRP: u32 = 35076;
    pub const SIOCATMARK: u32 = 35077;
    pub const SIOCGSTAMP: u32 = 35078;
    pub const SIOCGSTAMPNS: u32 = 35079;
    pub const SOL_SOCKET: u32 = 1;
    pub const SO_DEBUG: u32 = 1;
    pub const SO_REUSEADDR: u32 = 2;
    pub const SO_TYPE: u32 = 3;
    pub const SO_ERROR: u32 = 4;
    pub const SO_DONTROUTE: u32 = 5;
    pub const SO_BROADCAST: u32 = 6;
    pub const SO_SNDBUF: u32 = 7;
    pub const SO_RCVBUF: u32 = 8;
    pub const SO_SNDBUFFORCE: u32 = 32;
    pub const SO_RCVBUFFORCE: u32 = 33;
    pub const SO_KEEPALIVE: u32 = 9;
    pub const SO_OOBINLINE: u32 = 10;
    pub const SO_NO_CHECK: u32 = 11;
    pub const SO_PRIORITY: u32 = 12;
    pub const SO_LINGER: u32 = 13;
    pub const SO_BSDCOMPAT: u32 = 14;
    pub const SO_REUSEPORT: u32 = 15;
    pub const SO_PASSCRED: u32 = 16;
    pub const SO_PEERCRED: u32 = 17;
    pub const SO_RCVLOWAT: u32 = 18;
    pub const SO_SNDLOWAT: u32 = 19;
    pub const SO_RCVTIMEO: u32 = 20;
    pub const SO_SNDTIMEO: u32 = 21;
    pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
    pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
    pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
    pub const SO_BINDTODEVICE: u32 = 25;
    pub const SO_ATTACH_FILTER: u32 = 26;
    pub const SO_DETACH_FILTER: u32 = 27;
    pub const SO_GET_FILTER: u32 = 26;
    pub const SO_PEERNAME: u32 = 28;
    pub const SO_TIMESTAMP: u32 = 29;
    pub const SCM_TIMESTAMP: u32 = 29;
    pub const SO_ACCEPTCONN: u32 = 30;
    pub const SO_PEERSEC: u32 = 31;
    pub const SO_PASSSEC: u32 = 34;
    pub const SO_TIMESTAMPNS: u32 = 35;
    pub const SCM_TIMESTAMPNS: u32 = 35;
    pub const SO_MARK: u32 = 36;
    pub const SO_TIMESTAMPING: u32 = 37;
    pub const SCM_TIMESTAMPING: u32 = 37;
    pub const SO_PROTOCOL: u32 = 38;
    pub const SO_DOMAIN: u32 = 39;
    pub const SO_RXQ_OVFL: u32 = 40;
    pub const SO_WIFI_STATUS: u32 = 41;
    pub const SCM_WIFI_STATUS: u32 = 41;
    pub const SO_PEEK_OFF: u32 = 42;
    pub const SO_NOFCS: u32 = 43;
    pub const SO_LOCK_FILTER: u32 = 44;
    pub const SO_SELECT_ERR_QUEUE: u32 = 45;
    pub const SO_BUSY_POLL: u32 = 46;
    pub const SO_MAX_PACING_RATE: u32 = 47;
    pub const SO_BPF_EXTENSIONS: u32 = 48;
    pub const SO_INCOMING_CPU: u32 = 49;
    pub const SO_ATTACH_BPF: u32 = 50;
    pub const SO_DETACH_BPF: u32 = 27;
    pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
    pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
    pub const SO_CNX_ADVICE: u32 = 53;
    pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
    pub const SO_MEMINFO: u32 = 55;
    pub const SO_INCOMING_NAPI_ID: u32 = 56;
    pub const SO_COOKIE: u32 = 57;
    pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
    pub const SO_PEERGROUPS: u32 = 59;
    pub const SO_ZEROCOPY: u32 = 60;
    pub const _NETINET_IN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
    pub const IP_OPTIONS: u32 = 4;
    pub const IP_HDRINCL: u32 = 3;
    pub const IP_TOS: u32 = 1;
    pub const IP_TTL: u32 = 2;
    pub const IP_RECVOPTS: u32 = 6;
    pub const IP_RETOPTS: u32 = 7;
    pub const IP_MULTICAST_IF: u32 = 32;
    pub const IP_MULTICAST_TTL: u32 = 33;
    pub const IP_MULTICAST_LOOP: u32 = 34;
    pub const IP_ADD_MEMBERSHIP: u32 = 35;
    pub const IP_DROP_MEMBERSHIP: u32 = 36;
    pub const IP_UNBLOCK_SOURCE: u32 = 37;
    pub const IP_BLOCK_SOURCE: u32 = 38;
    pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
    pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
    pub const IP_MSFILTER: u32 = 41;
    pub const IP_ROUTER_ALERT: u32 = 5;
    pub const IP_PKTINFO: u32 = 8;
    pub const IP_PKTOPTIONS: u32 = 9;
    pub const IP_PMTUDISC: u32 = 10;
    pub const IP_MTU_DISCOVER: u32 = 10;
    pub const IP_RECVERR: u32 = 11;
    pub const IP_RECVTTL: u32 = 12;
    pub const IP_RECVTOS: u32 = 13;
    pub const IP_MTU: u32 = 14;
    pub const IP_FREEBIND: u32 = 15;
    pub const IP_IPSEC_POLICY: u32 = 16;
    pub const IP_XFRM_POLICY: u32 = 17;
    pub const IP_PASSSEC: u32 = 18;
    pub const IP_TRANSPARENT: u32 = 19;
    pub const IP_MULTICAST_ALL: u32 = 49;
    pub const IP_ORIGDSTADDR: u32 = 20;
    pub const IP_RECVORIGDSTADDR: u32 = 20;
    pub const IP_MINTTL: u32 = 21;
    pub const IP_NODEFRAG: u32 = 22;
    pub const IP_CHECKSUM: u32 = 23;
    pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
    pub const IP_RECVFRAGSIZE: u32 = 25;
    pub const IP_PMTUDISC_DONT: u32 = 0;
    pub const IP_PMTUDISC_WANT: u32 = 1;
    pub const IP_PMTUDISC_DO: u32 = 2;
    pub const IP_PMTUDISC_PROBE: u32 = 3;
    pub const IP_PMTUDISC_INTERFACE: u32 = 4;
    pub const IP_PMTUDISC_OMIT: u32 = 5;
    pub const IP_UNICAST_IF: u32 = 50;
    pub const SOL_IP: u32 = 0;
    pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
    pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
    pub const IP_MAX_MEMBERSHIPS: u32 = 20;
    pub const IPV6_ADDRFORM: u32 = 1;
    pub const IPV6_2292PKTINFO: u32 = 2;
    pub const IPV6_2292HOPOPTS: u32 = 3;
    pub const IPV6_2292DSTOPTS: u32 = 4;
    pub const IPV6_2292RTHDR: u32 = 5;
    pub const IPV6_2292PKTOPTIONS: u32 = 6;
    pub const IPV6_CHECKSUM: u32 = 7;
    pub const IPV6_2292HOPLIMIT: u32 = 8;
    pub const IPV6_NEXTHOP: u32 = 9;
    pub const IPV6_AUTHHDR: u32 = 10;
    pub const IPV6_UNICAST_HOPS: u32 = 16;
    pub const IPV6_MULTICAST_IF: u32 = 17;
    pub const IPV6_MULTICAST_HOPS: u32 = 18;
    pub const IPV6_MULTICAST_LOOP: u32 = 19;
    pub const IPV6_JOIN_GROUP: u32 = 20;
    pub const IPV6_LEAVE_GROUP: u32 = 21;
    pub const IPV6_ROUTER_ALERT: u32 = 22;
    pub const IPV6_MTU_DISCOVER: u32 = 23;
    pub const IPV6_MTU: u32 = 24;
    pub const IPV6_RECVERR: u32 = 25;
    pub const IPV6_V6ONLY: u32 = 26;
    pub const IPV6_JOIN_ANYCAST: u32 = 27;
    pub const IPV6_LEAVE_ANYCAST: u32 = 28;
    pub const IPV6_IPSEC_POLICY: u32 = 34;
    pub const IPV6_XFRM_POLICY: u32 = 35;
    pub const IPV6_HDRINCL: u32 = 36;
    pub const IPV6_RECVPKTINFO: u32 = 49;
    pub const IPV6_PKTINFO: u32 = 50;
    pub const IPV6_RECVHOPLIMIT: u32 = 51;
    pub const IPV6_HOPLIMIT: u32 = 52;
    pub const IPV6_RECVHOPOPTS: u32 = 53;
    pub const IPV6_HOPOPTS: u32 = 54;
    pub const IPV6_RTHDRDSTOPTS: u32 = 55;
    pub const IPV6_RECVRTHDR: u32 = 56;
    pub const IPV6_RTHDR: u32 = 57;
    pub const IPV6_RECVDSTOPTS: u32 = 58;
    pub const IPV6_DSTOPTS: u32 = 59;
    pub const IPV6_RECVPATHMTU: u32 = 60;
    pub const IPV6_PATHMTU: u32 = 61;
    pub const IPV6_DONTFRAG: u32 = 62;
    pub const IPV6_RECVTCLASS: u32 = 66;
    pub const IPV6_TCLASS: u32 = 67;
    pub const IPV6_AUTOFLOWLABEL: u32 = 70;
    pub const IPV6_ADDR_PREFERENCES: u32 = 72;
    pub const IPV6_MINHOPCOUNT: u32 = 73;
    pub const IPV6_ORIGDSTADDR: u32 = 74;
    pub const IPV6_RECVORIGDSTADDR: u32 = 74;
    pub const IPV6_TRANSPARENT: u32 = 75;
    pub const IPV6_UNICAST_IF: u32 = 76;
    pub const IPV6_RECVFRAGSIZE: u32 = 77;
    pub const IPV6_FREEBIND: u32 = 78;
    pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
    pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
    pub const IPV6_RXHOPOPTS: u32 = 54;
    pub const IPV6_RXDSTOPTS: u32 = 59;
    pub const IPV6_PMTUDISC_DONT: u32 = 0;
    pub const IPV6_PMTUDISC_WANT: u32 = 1;
    pub const IPV6_PMTUDISC_DO: u32 = 2;
    pub const IPV6_PMTUDISC_PROBE: u32 = 3;
    pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
    pub const IPV6_PMTUDISC_OMIT: u32 = 5;
    pub const SOL_IPV6: u32 = 41;
    pub const SOL_ICMPV6: u32 = 58;
    pub const IPV6_RTHDR_LOOSE: u32 = 0;
    pub const IPV6_RTHDR_STRICT: u32 = 1;
    pub const IPV6_RTHDR_TYPE_0: u32 = 0;
    pub const IN_CLASSA_NET: u32 = 4278190080;
    pub const IN_CLASSA_NSHIFT: u32 = 24;
    pub const IN_CLASSA_HOST: u32 = 16777215;
    pub const IN_CLASSA_MAX: u32 = 128;
    pub const IN_CLASSB_NET: u32 = 4294901760;
    pub const IN_CLASSB_NSHIFT: u32 = 16;
    pub const IN_CLASSB_HOST: u32 = 65535;
    pub const IN_CLASSB_MAX: u32 = 65536;
    pub const IN_CLASSC_NET: u32 = 4294967040;
    pub const IN_CLASSC_NSHIFT: u32 = 8;
    pub const IN_CLASSC_HOST: u32 = 255;
    pub const IN_LOOPBACKNET: u32 = 127;
    pub const INET_ADDRSTRLEN: u32 = 16;
    pub const INET6_ADDRSTRLEN: u32 = 46;
    pub const _ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _STDLIB_H: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _MEMORY_H: u32 = 1;
    pub const _STRING_H: u32 = 1;
    pub const _ASSERT_H: u32 = 1;
    pub const sz_VOID: u32 = 0;
    pub const sz_WORD: u32 = 4;
    pub const kindof_VOID: u32 = 0;
    pub const kindof_INT: u32 = 1;
    pub const kindof_FLOAT: u32 = 2;
    pub const kindof_COMPLEX: u32 = 3;
    pub const kindof_VEC3: u32 = 4;
    pub const kindof_VEC4: u32 = 5;
    pub const SILENCE: f64 = 0.0;
    pub const TRUE: u32 = 1;
    pub const FALSE: u32 = 0;
    pub const ONE_PI: f64 = 3.141592653589793;
    pub const TWO_PI: f64 = 6.283185307179586;
    pub const SQRT2: f64 = 1.4142135623730951;
    pub const __CHUCK_STAT_TRACK__: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const FOPEN_MAX: u32 = 16;
    pub const _BITS_STDIO_H: u32 = 1;
    pub const _SYS_TIME_H: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
    pub const __sigset_t_defined: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _UNISTD_H: u32 = 1;
    pub const _POSIX_VERSION: u32 = 199009;
    pub const __POSIX2_THIS_VERSION: u32 = 199209;
    pub const _POSIX2_VERSION: u32 = 199209;
    pub const _POSIX2_C_VERSION: u32 = 199209;
    pub const _POSIX2_C_BIND: u32 = 199209;
    pub const _POSIX2_C_DEV: u32 = 199209;
    pub const _POSIX2_SW_DEV: u32 = 199209;
    pub const _POSIX2_LOCALEDEF: u32 = 199209;
    pub const _XOPEN_VERSION: u32 = 4;
    pub const _XOPEN_XCU_VERSION: u32 = 4;
    pub const _XOPEN_XPG2: u32 = 1;
    pub const _XOPEN_XPG3: u32 = 1;
    pub const _XOPEN_XPG4: u32 = 1;
    pub const _XOPEN_UNIX: u32 = 1;
    pub const _XOPEN_ENH_I18N: u32 = 1;
    pub const _XOPEN_LEGACY: u32 = 1;
    pub const _BITS_POSIX_OPT_H: u32 = 1;
    pub const _POSIX_JOB_CONTROL: u32 = 1;
    pub const _POSIX_SAVED_IDS: u32 = 1;
    pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
    pub const _POSIX_FSYNC: u32 = 200809;
    pub const _POSIX_MAPPED_FILES: u32 = 200809;
    pub const _POSIX_MEMLOCK: u32 = 200809;
    pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
    pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
    pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
    pub const _POSIX_VDISABLE: u8 = 0u8;
    pub const _POSIX_NO_TRUNC: u32 = 1;
    pub const _XOPEN_REALTIME: u32 = 1;
    pub const _XOPEN_REALTIME_THREADS: u32 = 1;
    pub const _XOPEN_SHM: u32 = 1;
    pub const _POSIX_THREADS: u32 = 200809;
    pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
    pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
    pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
    pub const _POSIX_SEMAPHORES: u32 = 200809;
    pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
    pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
    pub const _POSIX_ASYNC_IO: u32 = 1;
    pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
    pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
    pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
    pub const _LFS_LARGEFILE: u32 = 1;
    pub const _LFS64_LARGEFILE: u32 = 1;
    pub const _LFS64_STDIO: u32 = 1;
    pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
    pub const _POSIX_CPUTIME: u32 = 0;
    pub const _POSIX_THREAD_CPUTIME: u32 = 0;
    pub const _POSIX_REGEXP: u32 = 1;
    pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
    pub const _POSIX_SHELL: u32 = 1;
    pub const _POSIX_TIMEOUTS: u32 = 200809;
    pub const _POSIX_SPIN_LOCKS: u32 = 200809;
    pub const _POSIX_SPAWN: u32 = 200809;
    pub const _POSIX_TIMERS: u32 = 200809;
    pub const _POSIX_BARRIERS: u32 = 200809;
    pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
    pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
    pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
    pub const _POSIX_ADVISORY_INFO: u32 = 200809;
    pub const _POSIX_IPV6: u32 = 200809;
    pub const _POSIX_RAW_SOCKETS: u32 = 200809;
    pub const _POSIX2_CHAR_TERM: u32 = 200809;
    pub const _POSIX_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_TRACE: i32 = -1;
    pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
    pub const _POSIX_TRACE_INHERIT: i32 = -1;
    pub const _POSIX_TRACE_LOG: i32 = -1;
    pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
    pub const STDIN_FILENO: u32 = 0;
    pub const STDOUT_FILENO: u32 = 1;
    pub const STDERR_FILENO: u32 = 2;
    pub const R_OK: u32 = 4;
    pub const W_OK: u32 = 2;
    pub const X_OK: u32 = 1;
    pub const F_OK: u32 = 0;
    pub const _NETINET_TCP_H: u32 = 1;
    pub const TCP_NODELAY: u32 = 1;
    pub const TCP_MAXSEG: u32 = 2;
    pub const TCP_CORK: u32 = 3;
    pub const TCP_KEEPIDLE: u32 = 4;
    pub const TCP_KEEPINTVL: u32 = 5;
    pub const TCP_KEEPCNT: u32 = 6;
    pub const TCP_SYNCNT: u32 = 7;
    pub const TCP_LINGER2: u32 = 8;
    pub const TCP_DEFER_ACCEPT: u32 = 9;
    pub const TCP_WINDOW_CLAMP: u32 = 10;
    pub const TCP_INFO: u32 = 11;
    pub const TCP_QUICKACK: u32 = 12;
    pub const TCP_CONGESTION: u32 = 13;
    pub const TCP_MD5SIG: u32 = 14;
    pub const TCP_COOKIE_TRANSACTIONS: u32 = 15;
    pub const TCP_THIN_LINEAR_TIMEOUTS: u32 = 16;
    pub const TCP_THIN_DUPACK: u32 = 17;
    pub const TCP_USER_TIMEOUT: u32 = 18;
    pub const TCP_REPAIR: u32 = 19;
    pub const TCP_REPAIR_QUEUE: u32 = 20;
    pub const TCP_QUEUE_SEQ: u32 = 21;
    pub const TCP_REPAIR_OPTIONS: u32 = 22;
    pub const TCP_FASTOPEN: u32 = 23;
    pub const TCP_TIMESTAMP: u32 = 24;
    pub const TCP_NOTSENT_LOWAT: u32 = 25;
    pub const TCP_CC_INFO: u32 = 26;
    pub const TCP_SAVE_SYN: u32 = 27;
    pub const TCP_SAVED_SYN: u32 = 28;
    pub const TCP_REPAIR_WINDOW: u32 = 29;
    pub const TCP_FASTOPEN_CONNECT: u32 = 30;
    pub const TCP_ULP: u32 = 31;
    pub const TCP_MD5SIG_EXT: u32 = 32;
    pub const TCP_FASTOPEN_KEY: u32 = 33;
    pub const TCP_FASTOPEN_NO_COOKIE: u32 = 34;
    pub const _ARPA_INET_H: u32 = 1;
    pub const _NETDB_H: u32 = 1;
    pub const _PATH_HEQUIV: &'static [u8; 17usize] = b"/etc/hosts.equiv\0";
    pub const _PATH_HOSTS: &'static [u8; 11usize] = b"/etc/hosts\0";
    pub const _PATH_NETWORKS: &'static [u8; 14usize] = b"/etc/networks\0";
    pub const _PATH_NSSWITCH_CONF: &'static [u8; 19usize] = b"/etc/nsswitch.conf\0";
    pub const _PATH_PROTOCOLS: &'static [u8; 15usize] = b"/etc/protocols\0";
    pub const _PATH_SERVICES: &'static [u8; 14usize] = b"/etc/services\0";
    pub const HOST_NOT_FOUND: u32 = 1;
    pub const TRY_AGAIN: u32 = 2;
    pub const NO_RECOVERY: u32 = 3;
    pub const NO_DATA: u32 = 4;
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type ino_t = root::__ino_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type pid_t = root::__pid_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulong;
    pub type register_t = ::std::os::raw::c_long;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct iovec {
        pub iov_base: *mut ::std::os::raw::c_void,
        pub iov_len: usize,
    }
    #[test]
    fn bindgen_test_layout_iovec() {
        assert_eq!(
            ::std::mem::size_of::<iovec>(),
            16usize,
            concat!("Size of: ", stringify!(iovec))
        );
        assert_eq!(
            ::std::mem::align_of::<iovec>(),
            8usize,
            concat!("Alignment of ", stringify!(iovec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iovec),
                "::",
                stringify!(iov_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(iovec),
                "::",
                stringify!(iov_len)
            )
        );
    }
    impl Default for iovec {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type socklen_t = root::__socklen_t;
    pub const __socket_type_SOCK_STREAM: root::__socket_type = 1;
    pub const __socket_type_SOCK_DGRAM: root::__socket_type = 2;
    pub const __socket_type_SOCK_RAW: root::__socket_type = 3;
    pub const __socket_type_SOCK_RDM: root::__socket_type = 4;
    pub const __socket_type_SOCK_SEQPACKET: root::__socket_type = 5;
    pub const __socket_type_SOCK_DCCP: root::__socket_type = 6;
    pub const __socket_type_SOCK_PACKET: root::__socket_type = 10;
    pub const __socket_type_SOCK_CLOEXEC: root::__socket_type = 524288;
    pub const __socket_type_SOCK_NONBLOCK: root::__socket_type = 2048;
    pub type __socket_type = u32;
    pub type sa_family_t = ::std::os::raw::c_ushort;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sockaddr {
        pub sa_family: root::sa_family_t,
        pub sa_data: [::std::os::raw::c_char; 14usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(sockaddr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr),
                "::",
                stringify!(sa_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr),
                "::",
                stringify!(sa_data)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_storage {
        pub ss_family: root::sa_family_t,
        pub __ss_padding: [::std::os::raw::c_char; 118usize],
        pub __ss_align: ::std::os::raw::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_storage() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_storage>(),
            128usize,
            concat!("Size of: ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_storage>(),
            8usize,
            concat!("Alignment of ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(ss_family)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(__ss_padding)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(__ss_align)
            )
        );
    }
    impl Default for sockaddr_storage {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for sockaddr_storage {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "sockaddr_storage {{ ss_family: {:?}, __ss_padding: [{}], __ss_align: {:?} }}",
                self.ss_family,
                self.__ss_padding
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>(),
                self.__ss_align
            )
        }
    }
    impl PartialEq for sockaddr_storage {
        fn eq(&self, other: &sockaddr_storage) -> bool {
            self.ss_family == other.ss_family
                && &self.__ss_padding[..] == &other.__ss_padding[..]
                && self.__ss_align == other.__ss_align
        }
    }
    pub const MSG_OOB: root::_bindgen_ty_1 = 1;
    pub const MSG_PEEK: root::_bindgen_ty_1 = 2;
    pub const MSG_DONTROUTE: root::_bindgen_ty_1 = 4;
    pub const MSG_CTRUNC: root::_bindgen_ty_1 = 8;
    pub const MSG_PROXY: root::_bindgen_ty_1 = 16;
    pub const MSG_TRUNC: root::_bindgen_ty_1 = 32;
    pub const MSG_DONTWAIT: root::_bindgen_ty_1 = 64;
    pub const MSG_EOR: root::_bindgen_ty_1 = 128;
    pub const MSG_WAITALL: root::_bindgen_ty_1 = 256;
    pub const MSG_FIN: root::_bindgen_ty_1 = 512;
    pub const MSG_SYN: root::_bindgen_ty_1 = 1024;
    pub const MSG_CONFIRM: root::_bindgen_ty_1 = 2048;
    pub const MSG_RST: root::_bindgen_ty_1 = 4096;
    pub const MSG_ERRQUEUE: root::_bindgen_ty_1 = 8192;
    pub const MSG_NOSIGNAL: root::_bindgen_ty_1 = 16384;
    pub const MSG_MORE: root::_bindgen_ty_1 = 32768;
    pub const MSG_WAITFORONE: root::_bindgen_ty_1 = 65536;
    pub const MSG_BATCH: root::_bindgen_ty_1 = 262144;
    pub const MSG_ZEROCOPY: root::_bindgen_ty_1 = 67108864;
    pub const MSG_FASTOPEN: root::_bindgen_ty_1 = 536870912;
    pub const MSG_CMSG_CLOEXEC: root::_bindgen_ty_1 = 1073741824;
    pub type _bindgen_ty_1 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct msghdr {
        pub msg_name: *mut ::std::os::raw::c_void,
        pub msg_namelen: root::socklen_t,
        pub msg_iov: *mut root::iovec,
        pub msg_iovlen: usize,
        pub msg_control: *mut ::std::os::raw::c_void,
        pub msg_controllen: usize,
        pub msg_flags: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_msghdr() {
        assert_eq!(
            ::std::mem::size_of::<msghdr>(),
            56usize,
            concat!("Size of: ", stringify!(msghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<msghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(msghdr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_namelen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_iov)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_iovlen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_control)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_controllen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_flags)
            )
        );
    }
    impl Default for msghdr {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default)]
    pub struct cmsghdr {
        pub cmsg_len: usize,
        pub cmsg_level: ::std::os::raw::c_int,
        pub cmsg_type: ::std::os::raw::c_int,
        pub __cmsg_data: root::__IncompleteArrayField<::std::os::raw::c_uchar>,
    }
    #[test]
    fn bindgen_test_layout_cmsghdr() {
        assert_eq!(
            ::std::mem::size_of::<cmsghdr>(),
            16usize,
            concat!("Size of: ", stringify!(cmsghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<cmsghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(cmsghdr))
        );
    }
    extern "C" {
        pub fn __cmsg_nxthdr(
            __mhdr: *mut root::msghdr,
            __cmsg: *mut root::cmsghdr,
        ) -> *mut root::cmsghdr;
    }
    pub const SCM_RIGHTS: root::_bindgen_ty_2 = 1;
    pub type _bindgen_ty_2 = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct linger {
        pub l_onoff: ::std::os::raw::c_int,
        pub l_linger: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_linger() {
        assert_eq!(
            ::std::mem::size_of::<linger>(),
            8usize,
            concat!("Size of: ", stringify!(linger))
        );
        assert_eq!(
            ::std::mem::align_of::<linger>(),
            4usize,
            concat!("Alignment of ", stringify!(linger))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(linger),
                "::",
                stringify!(l_onoff)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(linger),
                "::",
                stringify!(l_linger)
            )
        );
    }
    pub const SHUT_RD: root::_bindgen_ty_3 = 0;
    pub const SHUT_WR: root::_bindgen_ty_3 = 1;
    pub const SHUT_RDWR: root::_bindgen_ty_3 = 2;
    pub type _bindgen_ty_3 = u32;
    extern "C" {
        pub fn socket(
            __domain: ::std::os::raw::c_int,
            __type: ::std::os::raw::c_int,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn socketpair(
            __domain: ::std::os::raw::c_int,
            __type: ::std::os::raw::c_int,
            __protocol: ::std::os::raw::c_int,
            __fds: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bind(
            __fd: ::std::os::raw::c_int,
            __addr: *const root::sockaddr,
            __len: root::socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getsockname(
            __fd: ::std::os::raw::c_int,
            __addr: *mut root::sockaddr,
            __len: *mut root::socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn connect(
            __fd: ::std::os::raw::c_int,
            __addr: *const root::sockaddr,
            __len: root::socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpeername(
            __fd: ::std::os::raw::c_int,
            __addr: *mut root::sockaddr,
            __len: *mut root::socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn send(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn recv(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn sendto(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
            __addr: *const root::sockaddr,
            __addr_len: root::socklen_t,
        ) -> isize;
    }
    extern "C" {
        pub fn recvfrom(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
            __addr: *mut root::sockaddr,
            __addr_len: *mut root::socklen_t,
        ) -> isize;
    }
    extern "C" {
        pub fn sendmsg(
            __fd: ::std::os::raw::c_int,
            __message: *const root::msghdr,
            __flags: ::std::os::raw::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn recvmsg(
            __fd: ::std::os::raw::c_int,
            __message: *mut root::msghdr,
            __flags: ::std::os::raw::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn getsockopt(
            __fd: ::std::os::raw::c_int,
            __level: ::std::os::raw::c_int,
            __optname: ::std::os::raw::c_int,
            __optval: *mut ::std::os::raw::c_void,
            __optlen: *mut root::socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setsockopt(
            __fd: ::std::os::raw::c_int,
            __level: ::std::os::raw::c_int,
            __optname: ::std::os::raw::c_int,
            __optval: *const ::std::os::raw::c_void,
            __optlen: root::socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn listen(
            __fd: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn accept(
            __fd: ::std::os::raw::c_int,
            __addr: *mut root::sockaddr,
            __addr_len: *mut root::socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn shutdown(
            __fd: ::std::os::raw::c_int,
            __how: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type in_addr_t = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_addr {
        pub s_addr: root::in_addr_t,
    }
    #[test]
    fn bindgen_test_layout_in_addr() {
        assert_eq!(
            ::std::mem::size_of::<in_addr>(),
            4usize,
            concat!("Size of: ", stringify!(in_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<in_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(in_addr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in_addr),
                "::",
                stringify!(s_addr)
            )
        );
    }
    pub const IPPROTO_IP: root::_bindgen_ty_4 = 0;
    pub const IPPROTO_ICMP: root::_bindgen_ty_4 = 1;
    pub const IPPROTO_IGMP: root::_bindgen_ty_4 = 2;
    pub const IPPROTO_IPIP: root::_bindgen_ty_4 = 4;
    pub const IPPROTO_TCP: root::_bindgen_ty_4 = 6;
    pub const IPPROTO_EGP: root::_bindgen_ty_4 = 8;
    pub const IPPROTO_PUP: root::_bindgen_ty_4 = 12;
    pub const IPPROTO_UDP: root::_bindgen_ty_4 = 17;
    pub const IPPROTO_IDP: root::_bindgen_ty_4 = 22;
    pub const IPPROTO_TP: root::_bindgen_ty_4 = 29;
    pub const IPPROTO_DCCP: root::_bindgen_ty_4 = 33;
    pub const IPPROTO_IPV6: root::_bindgen_ty_4 = 41;
    pub const IPPROTO_RSVP: root::_bindgen_ty_4 = 46;
    pub const IPPROTO_GRE: root::_bindgen_ty_4 = 47;
    pub const IPPROTO_ESP: root::_bindgen_ty_4 = 50;
    pub const IPPROTO_AH: root::_bindgen_ty_4 = 51;
    pub const IPPROTO_MTP: root::_bindgen_ty_4 = 92;
    pub const IPPROTO_BEETPH: root::_bindgen_ty_4 = 94;
    pub const IPPROTO_ENCAP: root::_bindgen_ty_4 = 98;
    pub const IPPROTO_PIM: root::_bindgen_ty_4 = 103;
    pub const IPPROTO_COMP: root::_bindgen_ty_4 = 108;
    pub const IPPROTO_SCTP: root::_bindgen_ty_4 = 132;
    pub const IPPROTO_UDPLITE: root::_bindgen_ty_4 = 136;
    pub const IPPROTO_MPLS: root::_bindgen_ty_4 = 137;
    pub const IPPROTO_RAW: root::_bindgen_ty_4 = 255;
    pub const IPPROTO_MAX: root::_bindgen_ty_4 = 256;
    pub type _bindgen_ty_4 = u32;
    pub const IPPROTO_HOPOPTS: root::_bindgen_ty_5 = 0;
    pub const IPPROTO_ROUTING: root::_bindgen_ty_5 = 43;
    pub const IPPROTO_FRAGMENT: root::_bindgen_ty_5 = 44;
    pub const IPPROTO_ICMPV6: root::_bindgen_ty_5 = 58;
    pub const IPPROTO_NONE: root::_bindgen_ty_5 = 59;
    pub const IPPROTO_DSTOPTS: root::_bindgen_ty_5 = 60;
    pub const IPPROTO_MH: root::_bindgen_ty_5 = 135;
    pub type _bindgen_ty_5 = u32;
    pub type in_port_t = u16;
    pub const IPPORT_ECHO: root::_bindgen_ty_6 = 7;
    pub const IPPORT_DISCARD: root::_bindgen_ty_6 = 9;
    pub const IPPORT_SYSTAT: root::_bindgen_ty_6 = 11;
    pub const IPPORT_DAYTIME: root::_bindgen_ty_6 = 13;
    pub const IPPORT_NETSTAT: root::_bindgen_ty_6 = 15;
    pub const IPPORT_FTP: root::_bindgen_ty_6 = 21;
    pub const IPPORT_TELNET: root::_bindgen_ty_6 = 23;
    pub const IPPORT_SMTP: root::_bindgen_ty_6 = 25;
    pub const IPPORT_TIMESERVER: root::_bindgen_ty_6 = 37;
    pub const IPPORT_NAMESERVER: root::_bindgen_ty_6 = 42;
    pub const IPPORT_WHOIS: root::_bindgen_ty_6 = 43;
    pub const IPPORT_MTP: root::_bindgen_ty_6 = 57;
    pub const IPPORT_TFTP: root::_bindgen_ty_6 = 69;
    pub const IPPORT_RJE: root::_bindgen_ty_6 = 77;
    pub const IPPORT_FINGER: root::_bindgen_ty_6 = 79;
    pub const IPPORT_TTYLINK: root::_bindgen_ty_6 = 87;
    pub const IPPORT_SUPDUP: root::_bindgen_ty_6 = 95;
    pub const IPPORT_EXECSERVER: root::_bindgen_ty_6 = 512;
    pub const IPPORT_LOGINSERVER: root::_bindgen_ty_6 = 513;
    pub const IPPORT_CMDSERVER: root::_bindgen_ty_6 = 514;
    pub const IPPORT_EFSSERVER: root::_bindgen_ty_6 = 520;
    pub const IPPORT_BIFFUDP: root::_bindgen_ty_6 = 512;
    pub const IPPORT_WHOSERVER: root::_bindgen_ty_6 = 513;
    pub const IPPORT_ROUTESERVER: root::_bindgen_ty_6 = 520;
    pub const IPPORT_RESERVED: root::_bindgen_ty_6 = 1024;
    pub const IPPORT_USERRESERVED: root::_bindgen_ty_6 = 5000;
    pub type _bindgen_ty_6 = u32;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct in6_addr {
        pub __in6_u: root::in6_addr__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union in6_addr__bindgen_ty_1 {
        pub __u6_addr8: [u8; 16usize],
        pub __u6_addr16: [u16; 8usize],
        pub __u6_addr32: [u32; 4usize],
        _bindgen_union_align: [u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr8)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr16)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr32)
            )
        );
    }
    impl Default for in6_addr__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_addr__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "in6_addr__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_in6_addr() {
        assert_eq!(
            ::std::mem::size_of::<in6_addr>(),
            16usize,
            concat!("Size of: ", stringify!(in6_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<in6_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_addr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr),
                "::",
                stringify!(__in6_u)
            )
        );
    }
    impl Default for in6_addr {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_addr {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "in6_addr {{ __in6_u: {:?} }}", self.__in6_u)
        }
    }
    extern "C" {
        pub static in6addr_any: root::in6_addr;
    }
    extern "C" {
        pub static in6addr_loopback: root::in6_addr;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sockaddr_in {
        pub sin_family: root::sa_family_t,
        pub sin_port: root::in_port_t,
        pub sin_addr: root::in_addr,
        pub sin_zero: [::std::os::raw::c_uchar; 8usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr_in() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_in>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr_in))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_in>(),
            4usize,
            concat!("Alignment of ", stringify!(sockaddr_in))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_zero)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_in6 {
        pub sin6_family: root::sa_family_t,
        pub sin6_port: root::in_port_t,
        pub sin6_flowinfo: u32,
        pub sin6_addr: root::in6_addr,
        pub sin6_scope_id: u32,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_in6() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_in6>(),
            28usize,
            concat!("Size of: ", stringify!(sockaddr_in6))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_in6>(),
            4usize,
            concat!("Alignment of ", stringify!(sockaddr_in6))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_flowinfo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_scope_id)
            )
        );
    }
    impl Default for sockaddr_in6 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for sockaddr_in6 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "sockaddr_in6 {{ sin6_family: {:?}, sin6_port: {:?}, sin6_flowinfo: {:?}, sin6_addr: {:?}, sin6_scope_id: {:?} }}" , self . sin6_family , self . sin6_port , self . sin6_flowinfo , self . sin6_addr , self . sin6_scope_id )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ipv6_mreq {
        pub ipv6mr_multiaddr: root::in6_addr,
        pub ipv6mr_interface: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_ipv6_mreq() {
        assert_eq!(
            ::std::mem::size_of::<ipv6_mreq>(),
            20usize,
            concat!("Size of: ", stringify!(ipv6_mreq))
        );
        assert_eq!(
            ::std::mem::align_of::<ipv6_mreq>(),
            4usize,
            concat!("Alignment of ", stringify!(ipv6_mreq))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ipv6_mreq),
                "::",
                stringify!(ipv6mr_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ipv6_mreq),
                "::",
                stringify!(ipv6mr_interface)
            )
        );
    }
    impl Default for ipv6_mreq {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for ipv6_mreq {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ipv6_mreq {{ ipv6mr_multiaddr: {:?}, ipv6mr_interface: {:?} }}",
                self.ipv6mr_multiaddr, self.ipv6mr_interface
            )
        }
    }
    extern "C" {
        pub fn ntohl(__netlong: u32) -> u32;
    }
    extern "C" {
        pub fn ntohs(__netshort: u16) -> u16;
    }
    extern "C" {
        pub fn htonl(__hostlong: u32) -> u32;
    }
    extern "C" {
        pub fn htons(__hostshort: u16) -> u16;
    }
    pub type wchar_t = ::std::os::raw::c_int;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = f64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut root::wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(
            __s: *mut ::std::os::raw::c_char,
            __wchar: root::wchar_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(
            __pwcs: *mut root::wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn wcstombs(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const root::wchar_t,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn memcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memmove(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcoll(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcspn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strspn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strpbrk(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strstr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __assert_fail(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert_perror_fail(
            __errnum: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_int,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(im)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKPOLAR {
        pub modulus: f64,
        pub phase: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKPOLAR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKPOLAR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKPOLAR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).modulus as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(modulus)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(phase)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC3 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC3() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC3>(),
            24usize,
            concat!("Size of: ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC3>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(z)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC4 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
        pub w: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC4() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC4>(),
            32usize,
            concat!("Size of: ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC4>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(z)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).w as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(w)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct t_CKVECTOR {
        pub N: ::std::os::raw::c_ulong,
        pub values: *mut f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVECTOR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVECTOR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVECTOR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).N as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(N)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).values as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(values)
            )
        );
    }
    impl Default for t_CKVECTOR {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type c_str = *mut ::std::os::raw::c_char;
    pub type c_constr = *const ::std::os::raw::c_char;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX_SAMPLE {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX_SAMPLE() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX_SAMPLE>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX_SAMPLE>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(im)
            )
        );
    }
    pub type ck_socket = *mut root::ck_socket_;
    extern "C" {
        pub fn ck_udp_create() -> root::ck_socket;
    }
    extern "C" {
        pub fn ck_tcp_create(flags: ::std::os::raw::c_int) -> root::ck_socket;
    }
    extern "C" {
        pub fn ck_connect(
            sock: root::ck_socket,
            hostname: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ck_connect2(
            sock: root::ck_socket,
            serv_addr: *const root::sockaddr,
            addrlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ck_bind(
            sock: root::ck_socket,
            port: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ck_listen(
            sock: root::ck_socket,
            backlog: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ck_accept(sock: root::ck_socket) -> root::ck_socket;
    }
    extern "C" {
        pub fn ck_send(
            sock: root::ck_socket,
            buffer: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_send2(
            sock: root::ck_socket,
            buffer: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_sendto(
            sock: root::ck_socket,
            buffer: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            to: *const root::sockaddr,
            tolen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_recv(
            sock: root::ck_socket,
            buffer: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_recv2(
            sock: root::ck_socket,
            buffer: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_recvfrom(
            sock: root::ck_socket,
            buffer: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            from: *mut root::sockaddr,
            fromlen: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_send_timeout(
            sock: root::ck_socket,
            sec: ::std::os::raw::c_long,
            usec: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_recv_timeout(
            sock: root::ck_socket,
            sec: ::std::os::raw::c_long,
            usec: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_close(sock: root::ck_socket);
    }
    pub type U_boolList = *mut root::U_boolList_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct U_boolList_ {
        pub head: ::std::os::raw::c_ulong,
        pub tail: root::U_boolList,
    }
    #[test]
    fn bindgen_test_layout_U_boolList_() {
        assert_eq!(
            ::std::mem::size_of::<U_boolList_>(),
            16usize,
            concat!("Size of: ", stringify!(U_boolList_))
        );
        assert_eq!(
            ::std::mem::align_of::<U_boolList_>(),
            8usize,
            concat!("Alignment of ", stringify!(U_boolList_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<U_boolList_>())).head as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(U_boolList_),
                "::",
                stringify!(head)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<U_boolList_>())).tail as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(U_boolList_),
                "::",
                stringify!(tail)
            )
        );
    }
    impl Default for U_boolList_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn checked_malloc(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn cc_str(arg1: *mut ::std::os::raw::c_char) -> root::c_str;
    }
    extern "C" {
        pub fn U_BoolList(
            head: ::std::os::raw::c_ulong,
            tail: root::U_boolList,
        ) -> root::U_boolList;
    }
    pub type __gnuc_va_list = root::__builtin_va_list;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    impl Default for __mbstate_t__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    impl Default for __mbstate_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "__mbstate_t {{ __count: {:?}, __value: {:?} }}",
                self.__count, self.__value
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos64_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos64_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut ::std::os::raw::c_void,
        pub __pad5: usize,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    impl Default for _IO_FILE {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type fpos_t = root::__fpos_t;
    extern "C" {
        pub static mut stdin: *mut root::FILE;
    }
    extern "C" {
        pub static mut stdout: *mut root::FILE;
    }
    extern "C" {
        pub static mut stderr: *mut root::FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut root::FILE)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fgetpos(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(
            __stream: *mut root::FILE,
            __pos: *const root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(
            arg1: *mut root::FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        assert_eq!(
            ::std::mem::size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    pub type suseconds_t = root::__suseconds_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __sigset_t {
        pub __val: [::std::os::raw::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        assert_eq!(
            ::std::mem::size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type sigset_t = root::__sigset_t;
    pub type __fd_mask = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct fd_set {
        pub __fds_bits: [self::__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(__fds_bits)
            )
        );
    }
    extern "C" {
        pub fn select(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::std::os::raw::c_int;
    }
    pub type __timezone_ptr_t = *mut ::std::os::raw::c_void;
    extern "C" {
        pub fn gettimeofday(
            __tv: *mut root::timeval,
            __tz: root::__timezone_ptr_t,
        ) -> ::std::os::raw::c_int;
    }
    pub const __itimer_which_ITIMER_REAL: root::__itimer_which = 0;
    pub const __itimer_which_ITIMER_VIRTUAL: root::__itimer_which = 1;
    pub const __itimer_which_ITIMER_PROF: root::__itimer_which = 2;
    pub type __itimer_which = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct itimerval {
        pub it_interval: root::timeval,
        pub it_value: root::timeval,
    }
    #[test]
    fn bindgen_test_layout_itimerval() {
        assert_eq!(
            ::std::mem::size_of::<itimerval>(),
            32usize,
            concat!("Size of: ", stringify!(itimerval))
        );
        assert_eq!(
            ::std::mem::align_of::<itimerval>(),
            8usize,
            concat!("Alignment of ", stringify!(itimerval))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerval),
                "::",
                stringify!(it_interval)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerval),
                "::",
                stringify!(it_value)
            )
        );
    }
    pub type __itimer_which_t = ::std::os::raw::c_int;
    extern "C" {
        pub fn getitimer(
            __which: root::__itimer_which_t,
            __value: *mut root::itimerval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setitimer(
            __which: root::__itimer_which_t,
            __new: *const root::itimerval,
            __old: *mut root::itimerval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn utimes(
            __file: *const ::std::os::raw::c_char,
            __tvp: *const root::timeval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn access(
            __name: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lseek(
            __fd: ::std::os::raw::c_int,
            __offset: root::__off_t,
            __whence: ::std::os::raw::c_int,
        ) -> root::__off_t;
    }
    extern "C" {
        pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn read(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: usize,
        ) -> isize;
    }
    extern "C" {
        pub fn write(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> isize;
    }
    extern "C" {
        pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn pause() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chown(
            __file: *const ::std::os::raw::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getcwd(
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dup2(
            __fd: ::std::os::raw::c_int,
            __fd2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut __environ: *mut *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn execve(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execv(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execle(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execl(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execvp(
            __file: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execlp(
            __file: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _exit(__status: ::std::os::raw::c_int);
    }
    pub const _PC_LINK_MAX: root::_bindgen_ty_7 = 0;
    pub const _PC_MAX_CANON: root::_bindgen_ty_7 = 1;
    pub const _PC_MAX_INPUT: root::_bindgen_ty_7 = 2;
    pub const _PC_NAME_MAX: root::_bindgen_ty_7 = 3;
    pub const _PC_PATH_MAX: root::_bindgen_ty_7 = 4;
    pub const _PC_PIPE_BUF: root::_bindgen_ty_7 = 5;
    pub const _PC_CHOWN_RESTRICTED: root::_bindgen_ty_7 = 6;
    pub const _PC_NO_TRUNC: root::_bindgen_ty_7 = 7;
    pub const _PC_VDISABLE: root::_bindgen_ty_7 = 8;
    pub const _PC_SYNC_IO: root::_bindgen_ty_7 = 9;
    pub const _PC_ASYNC_IO: root::_bindgen_ty_7 = 10;
    pub const _PC_PRIO_IO: root::_bindgen_ty_7 = 11;
    pub const _PC_SOCK_MAXBUF: root::_bindgen_ty_7 = 12;
    pub const _PC_FILESIZEBITS: root::_bindgen_ty_7 = 13;
    pub const _PC_REC_INCR_XFER_SIZE: root::_bindgen_ty_7 = 14;
    pub const _PC_REC_MAX_XFER_SIZE: root::_bindgen_ty_7 = 15;
    pub const _PC_REC_MIN_XFER_SIZE: root::_bindgen_ty_7 = 16;
    pub const _PC_REC_XFER_ALIGN: root::_bindgen_ty_7 = 17;
    pub const _PC_ALLOC_SIZE_MIN: root::_bindgen_ty_7 = 18;
    pub const _PC_SYMLINK_MAX: root::_bindgen_ty_7 = 19;
    pub const _PC_2_SYMLINKS: root::_bindgen_ty_7 = 20;
    pub type _bindgen_ty_7 = u32;
    pub const _SC_ARG_MAX: root::_bindgen_ty_8 = 0;
    pub const _SC_CHILD_MAX: root::_bindgen_ty_8 = 1;
    pub const _SC_CLK_TCK: root::_bindgen_ty_8 = 2;
    pub const _SC_NGROUPS_MAX: root::_bindgen_ty_8 = 3;
    pub const _SC_OPEN_MAX: root::_bindgen_ty_8 = 4;
    pub const _SC_STREAM_MAX: root::_bindgen_ty_8 = 5;
    pub const _SC_TZNAME_MAX: root::_bindgen_ty_8 = 6;
    pub const _SC_JOB_CONTROL: root::_bindgen_ty_8 = 7;
    pub const _SC_SAVED_IDS: root::_bindgen_ty_8 = 8;
    pub const _SC_REALTIME_SIGNALS: root::_bindgen_ty_8 = 9;
    pub const _SC_PRIORITY_SCHEDULING: root::_bindgen_ty_8 = 10;
    pub const _SC_TIMERS: root::_bindgen_ty_8 = 11;
    pub const _SC_ASYNCHRONOUS_IO: root::_bindgen_ty_8 = 12;
    pub const _SC_PRIORITIZED_IO: root::_bindgen_ty_8 = 13;
    pub const _SC_SYNCHRONIZED_IO: root::_bindgen_ty_8 = 14;
    pub const _SC_FSYNC: root::_bindgen_ty_8 = 15;
    pub const _SC_MAPPED_FILES: root::_bindgen_ty_8 = 16;
    pub const _SC_MEMLOCK: root::_bindgen_ty_8 = 17;
    pub const _SC_MEMLOCK_RANGE: root::_bindgen_ty_8 = 18;
    pub const _SC_MEMORY_PROTECTION: root::_bindgen_ty_8 = 19;
    pub const _SC_MESSAGE_PASSING: root::_bindgen_ty_8 = 20;
    pub const _SC_SEMAPHORES: root::_bindgen_ty_8 = 21;
    pub const _SC_SHARED_MEMORY_OBJECTS: root::_bindgen_ty_8 = 22;
    pub const _SC_AIO_LISTIO_MAX: root::_bindgen_ty_8 = 23;
    pub const _SC_AIO_MAX: root::_bindgen_ty_8 = 24;
    pub const _SC_AIO_PRIO_DELTA_MAX: root::_bindgen_ty_8 = 25;
    pub const _SC_DELAYTIMER_MAX: root::_bindgen_ty_8 = 26;
    pub const _SC_MQ_OPEN_MAX: root::_bindgen_ty_8 = 27;
    pub const _SC_MQ_PRIO_MAX: root::_bindgen_ty_8 = 28;
    pub const _SC_VERSION: root::_bindgen_ty_8 = 29;
    pub const _SC_PAGESIZE: root::_bindgen_ty_8 = 30;
    pub const _SC_RTSIG_MAX: root::_bindgen_ty_8 = 31;
    pub const _SC_SEM_NSEMS_MAX: root::_bindgen_ty_8 = 32;
    pub const _SC_SEM_VALUE_MAX: root::_bindgen_ty_8 = 33;
    pub const _SC_SIGQUEUE_MAX: root::_bindgen_ty_8 = 34;
    pub const _SC_TIMER_MAX: root::_bindgen_ty_8 = 35;
    pub const _SC_BC_BASE_MAX: root::_bindgen_ty_8 = 36;
    pub const _SC_BC_DIM_MAX: root::_bindgen_ty_8 = 37;
    pub const _SC_BC_SCALE_MAX: root::_bindgen_ty_8 = 38;
    pub const _SC_BC_STRING_MAX: root::_bindgen_ty_8 = 39;
    pub const _SC_COLL_WEIGHTS_MAX: root::_bindgen_ty_8 = 40;
    pub const _SC_EQUIV_CLASS_MAX: root::_bindgen_ty_8 = 41;
    pub const _SC_EXPR_NEST_MAX: root::_bindgen_ty_8 = 42;
    pub const _SC_LINE_MAX: root::_bindgen_ty_8 = 43;
    pub const _SC_RE_DUP_MAX: root::_bindgen_ty_8 = 44;
    pub const _SC_CHARCLASS_NAME_MAX: root::_bindgen_ty_8 = 45;
    pub const _SC_2_VERSION: root::_bindgen_ty_8 = 46;
    pub const _SC_2_C_BIND: root::_bindgen_ty_8 = 47;
    pub const _SC_2_C_DEV: root::_bindgen_ty_8 = 48;
    pub const _SC_2_FORT_DEV: root::_bindgen_ty_8 = 49;
    pub const _SC_2_FORT_RUN: root::_bindgen_ty_8 = 50;
    pub const _SC_2_SW_DEV: root::_bindgen_ty_8 = 51;
    pub const _SC_2_LOCALEDEF: root::_bindgen_ty_8 = 52;
    pub const _SC_PII: root::_bindgen_ty_8 = 53;
    pub const _SC_PII_XTI: root::_bindgen_ty_8 = 54;
    pub const _SC_PII_SOCKET: root::_bindgen_ty_8 = 55;
    pub const _SC_PII_INTERNET: root::_bindgen_ty_8 = 56;
    pub const _SC_PII_OSI: root::_bindgen_ty_8 = 57;
    pub const _SC_POLL: root::_bindgen_ty_8 = 58;
    pub const _SC_SELECT: root::_bindgen_ty_8 = 59;
    pub const _SC_UIO_MAXIOV: root::_bindgen_ty_8 = 60;
    pub const _SC_IOV_MAX: root::_bindgen_ty_8 = 60;
    pub const _SC_PII_INTERNET_STREAM: root::_bindgen_ty_8 = 61;
    pub const _SC_PII_INTERNET_DGRAM: root::_bindgen_ty_8 = 62;
    pub const _SC_PII_OSI_COTS: root::_bindgen_ty_8 = 63;
    pub const _SC_PII_OSI_CLTS: root::_bindgen_ty_8 = 64;
    pub const _SC_PII_OSI_M: root::_bindgen_ty_8 = 65;
    pub const _SC_T_IOV_MAX: root::_bindgen_ty_8 = 66;
    pub const _SC_THREADS: root::_bindgen_ty_8 = 67;
    pub const _SC_THREAD_SAFE_FUNCTIONS: root::_bindgen_ty_8 = 68;
    pub const _SC_GETGR_R_SIZE_MAX: root::_bindgen_ty_8 = 69;
    pub const _SC_GETPW_R_SIZE_MAX: root::_bindgen_ty_8 = 70;
    pub const _SC_LOGIN_NAME_MAX: root::_bindgen_ty_8 = 71;
    pub const _SC_TTY_NAME_MAX: root::_bindgen_ty_8 = 72;
    pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: root::_bindgen_ty_8 = 73;
    pub const _SC_THREAD_KEYS_MAX: root::_bindgen_ty_8 = 74;
    pub const _SC_THREAD_STACK_MIN: root::_bindgen_ty_8 = 75;
    pub const _SC_THREAD_THREADS_MAX: root::_bindgen_ty_8 = 76;
    pub const _SC_THREAD_ATTR_STACKADDR: root::_bindgen_ty_8 = 77;
    pub const _SC_THREAD_ATTR_STACKSIZE: root::_bindgen_ty_8 = 78;
    pub const _SC_THREAD_PRIORITY_SCHEDULING: root::_bindgen_ty_8 = 79;
    pub const _SC_THREAD_PRIO_INHERIT: root::_bindgen_ty_8 = 80;
    pub const _SC_THREAD_PRIO_PROTECT: root::_bindgen_ty_8 = 81;
    pub const _SC_THREAD_PROCESS_SHARED: root::_bindgen_ty_8 = 82;
    pub const _SC_NPROCESSORS_CONF: root::_bindgen_ty_8 = 83;
    pub const _SC_NPROCESSORS_ONLN: root::_bindgen_ty_8 = 84;
    pub const _SC_PHYS_PAGES: root::_bindgen_ty_8 = 85;
    pub const _SC_AVPHYS_PAGES: root::_bindgen_ty_8 = 86;
    pub const _SC_ATEXIT_MAX: root::_bindgen_ty_8 = 87;
    pub const _SC_PASS_MAX: root::_bindgen_ty_8 = 88;
    pub const _SC_XOPEN_VERSION: root::_bindgen_ty_8 = 89;
    pub const _SC_XOPEN_XCU_VERSION: root::_bindgen_ty_8 = 90;
    pub const _SC_XOPEN_UNIX: root::_bindgen_ty_8 = 91;
    pub const _SC_XOPEN_CRYPT: root::_bindgen_ty_8 = 92;
    pub const _SC_XOPEN_ENH_I18N: root::_bindgen_ty_8 = 93;
    pub const _SC_XOPEN_SHM: root::_bindgen_ty_8 = 94;
    pub const _SC_2_CHAR_TERM: root::_bindgen_ty_8 = 95;
    pub const _SC_2_C_VERSION: root::_bindgen_ty_8 = 96;
    pub const _SC_2_UPE: root::_bindgen_ty_8 = 97;
    pub const _SC_XOPEN_XPG2: root::_bindgen_ty_8 = 98;
    pub const _SC_XOPEN_XPG3: root::_bindgen_ty_8 = 99;
    pub const _SC_XOPEN_XPG4: root::_bindgen_ty_8 = 100;
    pub const _SC_CHAR_BIT: root::_bindgen_ty_8 = 101;
    pub const _SC_CHAR_MAX: root::_bindgen_ty_8 = 102;
    pub const _SC_CHAR_MIN: root::_bindgen_ty_8 = 103;
    pub const _SC_INT_MAX: root::_bindgen_ty_8 = 104;
    pub const _SC_INT_MIN: root::_bindgen_ty_8 = 105;
    pub const _SC_LONG_BIT: root::_bindgen_ty_8 = 106;
    pub const _SC_WORD_BIT: root::_bindgen_ty_8 = 107;
    pub const _SC_MB_LEN_MAX: root::_bindgen_ty_8 = 108;
    pub const _SC_NZERO: root::_bindgen_ty_8 = 109;
    pub const _SC_SSIZE_MAX: root::_bindgen_ty_8 = 110;
    pub const _SC_SCHAR_MAX: root::_bindgen_ty_8 = 111;
    pub const _SC_SCHAR_MIN: root::_bindgen_ty_8 = 112;
    pub const _SC_SHRT_MAX: root::_bindgen_ty_8 = 113;
    pub const _SC_SHRT_MIN: root::_bindgen_ty_8 = 114;
    pub const _SC_UCHAR_MAX: root::_bindgen_ty_8 = 115;
    pub const _SC_UINT_MAX: root::_bindgen_ty_8 = 116;
    pub const _SC_ULONG_MAX: root::_bindgen_ty_8 = 117;
    pub const _SC_USHRT_MAX: root::_bindgen_ty_8 = 118;
    pub const _SC_NL_ARGMAX: root::_bindgen_ty_8 = 119;
    pub const _SC_NL_LANGMAX: root::_bindgen_ty_8 = 120;
    pub const _SC_NL_MSGMAX: root::_bindgen_ty_8 = 121;
    pub const _SC_NL_NMAX: root::_bindgen_ty_8 = 122;
    pub const _SC_NL_SETMAX: root::_bindgen_ty_8 = 123;
    pub const _SC_NL_TEXTMAX: root::_bindgen_ty_8 = 124;
    pub const _SC_XBS5_ILP32_OFF32: root::_bindgen_ty_8 = 125;
    pub const _SC_XBS5_ILP32_OFFBIG: root::_bindgen_ty_8 = 126;
    pub const _SC_XBS5_LP64_OFF64: root::_bindgen_ty_8 = 127;
    pub const _SC_XBS5_LPBIG_OFFBIG: root::_bindgen_ty_8 = 128;
    pub const _SC_XOPEN_LEGACY: root::_bindgen_ty_8 = 129;
    pub const _SC_XOPEN_REALTIME: root::_bindgen_ty_8 = 130;
    pub const _SC_XOPEN_REALTIME_THREADS: root::_bindgen_ty_8 = 131;
    pub const _SC_ADVISORY_INFO: root::_bindgen_ty_8 = 132;
    pub const _SC_BARRIERS: root::_bindgen_ty_8 = 133;
    pub const _SC_BASE: root::_bindgen_ty_8 = 134;
    pub const _SC_C_LANG_SUPPORT: root::_bindgen_ty_8 = 135;
    pub const _SC_C_LANG_SUPPORT_R: root::_bindgen_ty_8 = 136;
    pub const _SC_CLOCK_SELECTION: root::_bindgen_ty_8 = 137;
    pub const _SC_CPUTIME: root::_bindgen_ty_8 = 138;
    pub const _SC_THREAD_CPUTIME: root::_bindgen_ty_8 = 139;
    pub const _SC_DEVICE_IO: root::_bindgen_ty_8 = 140;
    pub const _SC_DEVICE_SPECIFIC: root::_bindgen_ty_8 = 141;
    pub const _SC_DEVICE_SPECIFIC_R: root::_bindgen_ty_8 = 142;
    pub const _SC_FD_MGMT: root::_bindgen_ty_8 = 143;
    pub const _SC_FIFO: root::_bindgen_ty_8 = 144;
    pub const _SC_PIPE: root::_bindgen_ty_8 = 145;
    pub const _SC_FILE_ATTRIBUTES: root::_bindgen_ty_8 = 146;
    pub const _SC_FILE_LOCKING: root::_bindgen_ty_8 = 147;
    pub const _SC_FILE_SYSTEM: root::_bindgen_ty_8 = 148;
    pub const _SC_MONOTONIC_CLOCK: root::_bindgen_ty_8 = 149;
    pub const _SC_MULTI_PROCESS: root::_bindgen_ty_8 = 150;
    pub const _SC_SINGLE_PROCESS: root::_bindgen_ty_8 = 151;
    pub const _SC_NETWORKING: root::_bindgen_ty_8 = 152;
    pub const _SC_READER_WRITER_LOCKS: root::_bindgen_ty_8 = 153;
    pub const _SC_SPIN_LOCKS: root::_bindgen_ty_8 = 154;
    pub const _SC_REGEXP: root::_bindgen_ty_8 = 155;
    pub const _SC_REGEX_VERSION: root::_bindgen_ty_8 = 156;
    pub const _SC_SHELL: root::_bindgen_ty_8 = 157;
    pub const _SC_SIGNALS: root::_bindgen_ty_8 = 158;
    pub const _SC_SPAWN: root::_bindgen_ty_8 = 159;
    pub const _SC_SPORADIC_SERVER: root::_bindgen_ty_8 = 160;
    pub const _SC_THREAD_SPORADIC_SERVER: root::_bindgen_ty_8 = 161;
    pub const _SC_SYSTEM_DATABASE: root::_bindgen_ty_8 = 162;
    pub const _SC_SYSTEM_DATABASE_R: root::_bindgen_ty_8 = 163;
    pub const _SC_TIMEOUTS: root::_bindgen_ty_8 = 164;
    pub const _SC_TYPED_MEMORY_OBJECTS: root::_bindgen_ty_8 = 165;
    pub const _SC_USER_GROUPS: root::_bindgen_ty_8 = 166;
    pub const _SC_USER_GROUPS_R: root::_bindgen_ty_8 = 167;
    pub const _SC_2_PBS: root::_bindgen_ty_8 = 168;
    pub const _SC_2_PBS_ACCOUNTING: root::_bindgen_ty_8 = 169;
    pub const _SC_2_PBS_LOCATE: root::_bindgen_ty_8 = 170;
    pub const _SC_2_PBS_MESSAGE: root::_bindgen_ty_8 = 171;
    pub const _SC_2_PBS_TRACK: root::_bindgen_ty_8 = 172;
    pub const _SC_SYMLOOP_MAX: root::_bindgen_ty_8 = 173;
    pub const _SC_STREAMS: root::_bindgen_ty_8 = 174;
    pub const _SC_2_PBS_CHECKPOINT: root::_bindgen_ty_8 = 175;
    pub const _SC_V6_ILP32_OFF32: root::_bindgen_ty_8 = 176;
    pub const _SC_V6_ILP32_OFFBIG: root::_bindgen_ty_8 = 177;
    pub const _SC_V6_LP64_OFF64: root::_bindgen_ty_8 = 178;
    pub const _SC_V6_LPBIG_OFFBIG: root::_bindgen_ty_8 = 179;
    pub const _SC_HOST_NAME_MAX: root::_bindgen_ty_8 = 180;
    pub const _SC_TRACE: root::_bindgen_ty_8 = 181;
    pub const _SC_TRACE_EVENT_FILTER: root::_bindgen_ty_8 = 182;
    pub const _SC_TRACE_INHERIT: root::_bindgen_ty_8 = 183;
    pub const _SC_TRACE_LOG: root::_bindgen_ty_8 = 184;
    pub const _SC_LEVEL1_ICACHE_SIZE: root::_bindgen_ty_8 = 185;
    pub const _SC_LEVEL1_ICACHE_ASSOC: root::_bindgen_ty_8 = 186;
    pub const _SC_LEVEL1_ICACHE_LINESIZE: root::_bindgen_ty_8 = 187;
    pub const _SC_LEVEL1_DCACHE_SIZE: root::_bindgen_ty_8 = 188;
    pub const _SC_LEVEL1_DCACHE_ASSOC: root::_bindgen_ty_8 = 189;
    pub const _SC_LEVEL1_DCACHE_LINESIZE: root::_bindgen_ty_8 = 190;
    pub const _SC_LEVEL2_CACHE_SIZE: root::_bindgen_ty_8 = 191;
    pub const _SC_LEVEL2_CACHE_ASSOC: root::_bindgen_ty_8 = 192;
    pub const _SC_LEVEL2_CACHE_LINESIZE: root::_bindgen_ty_8 = 193;
    pub const _SC_LEVEL3_CACHE_SIZE: root::_bindgen_ty_8 = 194;
    pub const _SC_LEVEL3_CACHE_ASSOC: root::_bindgen_ty_8 = 195;
    pub const _SC_LEVEL3_CACHE_LINESIZE: root::_bindgen_ty_8 = 196;
    pub const _SC_LEVEL4_CACHE_SIZE: root::_bindgen_ty_8 = 197;
    pub const _SC_LEVEL4_CACHE_ASSOC: root::_bindgen_ty_8 = 198;
    pub const _SC_LEVEL4_CACHE_LINESIZE: root::_bindgen_ty_8 = 199;
    pub const _SC_IPV6: root::_bindgen_ty_8 = 235;
    pub const _SC_RAW_SOCKETS: root::_bindgen_ty_8 = 236;
    pub const _SC_V7_ILP32_OFF32: root::_bindgen_ty_8 = 237;
    pub const _SC_V7_ILP32_OFFBIG: root::_bindgen_ty_8 = 238;
    pub const _SC_V7_LP64_OFF64: root::_bindgen_ty_8 = 239;
    pub const _SC_V7_LPBIG_OFFBIG: root::_bindgen_ty_8 = 240;
    pub const _SC_SS_REPL_MAX: root::_bindgen_ty_8 = 241;
    pub const _SC_TRACE_EVENT_NAME_MAX: root::_bindgen_ty_8 = 242;
    pub const _SC_TRACE_NAME_MAX: root::_bindgen_ty_8 = 243;
    pub const _SC_TRACE_SYS_MAX: root::_bindgen_ty_8 = 244;
    pub const _SC_TRACE_USER_EVENT_MAX: root::_bindgen_ty_8 = 245;
    pub const _SC_XOPEN_STREAMS: root::_bindgen_ty_8 = 246;
    pub const _SC_THREAD_ROBUST_PRIO_INHERIT: root::_bindgen_ty_8 = 247;
    pub const _SC_THREAD_ROBUST_PRIO_PROTECT: root::_bindgen_ty_8 = 248;
    pub type _bindgen_ty_8 = u32;
    pub const _CS_PATH: root::_bindgen_ty_9 = 0;
    pub const _CS_V6_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_9 = 1;
    pub const _CS_GNU_LIBC_VERSION: root::_bindgen_ty_9 = 2;
    pub const _CS_GNU_LIBPTHREAD_VERSION: root::_bindgen_ty_9 = 3;
    pub const _CS_V5_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_9 = 4;
    pub const _CS_V7_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_9 = 5;
    pub const _CS_LFS_CFLAGS: root::_bindgen_ty_9 = 1000;
    pub const _CS_LFS_LDFLAGS: root::_bindgen_ty_9 = 1001;
    pub const _CS_LFS_LIBS: root::_bindgen_ty_9 = 1002;
    pub const _CS_LFS_LINTFLAGS: root::_bindgen_ty_9 = 1003;
    pub const _CS_LFS64_CFLAGS: root::_bindgen_ty_9 = 1004;
    pub const _CS_LFS64_LDFLAGS: root::_bindgen_ty_9 = 1005;
    pub const _CS_LFS64_LIBS: root::_bindgen_ty_9 = 1006;
    pub const _CS_LFS64_LINTFLAGS: root::_bindgen_ty_9 = 1007;
    pub const _CS_XBS5_ILP32_OFF32_CFLAGS: root::_bindgen_ty_9 = 1100;
    pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_9 = 1101;
    pub const _CS_XBS5_ILP32_OFF32_LIBS: root::_bindgen_ty_9 = 1102;
    pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_9 = 1103;
    pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_9 = 1104;
    pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_9 = 1105;
    pub const _CS_XBS5_ILP32_OFFBIG_LIBS: root::_bindgen_ty_9 = 1106;
    pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_9 = 1107;
    pub const _CS_XBS5_LP64_OFF64_CFLAGS: root::_bindgen_ty_9 = 1108;
    pub const _CS_XBS5_LP64_OFF64_LDFLAGS: root::_bindgen_ty_9 = 1109;
    pub const _CS_XBS5_LP64_OFF64_LIBS: root::_bindgen_ty_9 = 1110;
    pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_9 = 1111;
    pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_9 = 1112;
    pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_9 = 1113;
    pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_9 = 1114;
    pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_9 = 1115;
    pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: root::_bindgen_ty_9 = 1116;
    pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_9 = 1117;
    pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: root::_bindgen_ty_9 = 1118;
    pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_9 = 1119;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_9 = 1120;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_9 = 1121;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: root::_bindgen_ty_9 = 1122;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_9 = 1123;
    pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: root::_bindgen_ty_9 = 1124;
    pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: root::_bindgen_ty_9 = 1125;
    pub const _CS_POSIX_V6_LP64_OFF64_LIBS: root::_bindgen_ty_9 = 1126;
    pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_9 = 1127;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_9 = 1128;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_9 = 1129;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_9 = 1130;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_9 = 1131;
    pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: root::_bindgen_ty_9 = 1132;
    pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_9 = 1133;
    pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: root::_bindgen_ty_9 = 1134;
    pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_9 = 1135;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_9 = 1136;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_9 = 1137;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: root::_bindgen_ty_9 = 1138;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_9 = 1139;
    pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: root::_bindgen_ty_9 = 1140;
    pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: root::_bindgen_ty_9 = 1141;
    pub const _CS_POSIX_V7_LP64_OFF64_LIBS: root::_bindgen_ty_9 = 1142;
    pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_9 = 1143;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_9 = 1144;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_9 = 1145;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_9 = 1146;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_9 = 1147;
    pub const _CS_V6_ENV: root::_bindgen_ty_9 = 1148;
    pub const _CS_V7_ENV: root::_bindgen_ty_9 = 1149;
    pub type _bindgen_ty_9 = u32;
    extern "C" {
        pub fn pathconf(
            __path: *const ::std::os::raw::c_char,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn fpathconf(
            __fd: ::std::os::raw::c_int,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn getpid() -> root::__pid_t;
    }
    extern "C" {
        pub fn getppid() -> root::__pid_t;
    }
    extern "C" {
        pub fn getpgrp() -> root::__pid_t;
    }
    extern "C" {
        pub fn __getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    extern "C" {
        pub fn setpgid(__pid: root::__pid_t, __pgid: root::__pid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setsid() -> root::__pid_t;
    }
    extern "C" {
        pub fn getuid() -> root::__uid_t;
    }
    extern "C" {
        pub fn geteuid() -> root::__uid_t;
    }
    extern "C" {
        pub fn getgid() -> root::__gid_t;
    }
    extern "C" {
        pub fn getegid() -> root::__gid_t;
    }
    extern "C" {
        pub fn getgroups(
            __size: ::std::os::raw::c_int,
            __list: *mut root::__gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setuid(__uid: root::__uid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setgid(__gid: root::__gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fork() -> root::__pid_t;
    }
    extern "C" {
        pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ttyname_r(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn link(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> root::__pid_t;
    }
    extern "C" {
        pub fn tcsetpgrp(
            __fd: ::std::os::raw::c_int,
            __pgrp_id: root::__pid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getlogin() -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> root::in_addr_t;
    }
    extern "C" {
        pub fn inet_lnaof(__in: root::in_addr) -> root::in_addr_t;
    }
    extern "C" {
        pub fn inet_makeaddr(__net: root::in_addr_t, __host: root::in_addr_t) -> root::in_addr;
    }
    extern "C" {
        pub fn inet_netof(__in: root::in_addr) -> root::in_addr_t;
    }
    extern "C" {
        pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> root::in_addr_t;
    }
    extern "C" {
        pub fn inet_ntoa(__in: root::in_addr) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn inet_pton(
            __af: ::std::os::raw::c_int,
            __cp: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn inet_ntop(
            __af: ::std::os::raw::c_int,
            __cp: *const ::std::os::raw::c_void,
            __buf: *mut ::std::os::raw::c_char,
            __len: root::socklen_t,
        ) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct netent {
        pub n_name: *mut ::std::os::raw::c_char,
        pub n_aliases: *mut *mut ::std::os::raw::c_char,
        pub n_addrtype: ::std::os::raw::c_int,
        pub n_net: u32,
    }
    #[test]
    fn bindgen_test_layout_netent() {
        assert_eq!(
            ::std::mem::size_of::<netent>(),
            24usize,
            concat!("Size of: ", stringify!(netent))
        );
        assert_eq!(
            ::std::mem::align_of::<netent>(),
            8usize,
            concat!("Alignment of ", stringify!(netent))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<netent>())).n_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(netent),
                "::",
                stringify!(n_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<netent>())).n_aliases as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(netent),
                "::",
                stringify!(n_aliases)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<netent>())).n_addrtype as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(netent),
                "::",
                stringify!(n_addrtype)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<netent>())).n_net as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(netent),
                "::",
                stringify!(n_net)
            )
        );
    }
    impl Default for netent {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct hostent {
        pub h_name: *mut ::std::os::raw::c_char,
        pub h_aliases: *mut *mut ::std::os::raw::c_char,
        pub h_addrtype: ::std::os::raw::c_int,
        pub h_length: ::std::os::raw::c_int,
        pub h_addr_list: *mut *mut ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_hostent() {
        assert_eq!(
            ::std::mem::size_of::<hostent>(),
            32usize,
            concat!("Size of: ", stringify!(hostent))
        );
        assert_eq!(
            ::std::mem::align_of::<hostent>(),
            8usize,
            concat!("Alignment of ", stringify!(hostent))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<hostent>())).h_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(hostent),
                "::",
                stringify!(h_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<hostent>())).h_aliases as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(hostent),
                "::",
                stringify!(h_aliases)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<hostent>())).h_addrtype as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(hostent),
                "::",
                stringify!(h_addrtype)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<hostent>())).h_length as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(hostent),
                "::",
                stringify!(h_length)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<hostent>())).h_addr_list as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(hostent),
                "::",
                stringify!(h_addr_list)
            )
        );
    }
    impl Default for hostent {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn sethostent(__stay_open: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn endhostent();
    }
    extern "C" {
        pub fn gethostent() -> *mut root::hostent;
    }
    extern "C" {
        pub fn gethostbyaddr(
            __addr: *const ::std::os::raw::c_void,
            __len: root::__socklen_t,
            __type: ::std::os::raw::c_int,
        ) -> *mut root::hostent;
    }
    extern "C" {
        pub fn gethostbyname(__name: *const ::std::os::raw::c_char) -> *mut root::hostent;
    }
    extern "C" {
        pub fn setnetent(__stay_open: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn endnetent();
    }
    extern "C" {
        pub fn getnetent() -> *mut root::netent;
    }
    extern "C" {
        pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int) -> *mut root::netent;
    }
    extern "C" {
        pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut root::netent;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct servent {
        pub s_name: *mut ::std::os::raw::c_char,
        pub s_aliases: *mut *mut ::std::os::raw::c_char,
        pub s_port: ::std::os::raw::c_int,
        pub s_proto: *mut ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_servent() {
        assert_eq!(
            ::std::mem::size_of::<servent>(),
            32usize,
            concat!("Size of: ", stringify!(servent))
        );
        assert_eq!(
            ::std::mem::align_of::<servent>(),
            8usize,
            concat!("Alignment of ", stringify!(servent))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<servent>())).s_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(servent),
                "::",
                stringify!(s_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<servent>())).s_aliases as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(servent),
                "::",
                stringify!(s_aliases)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<servent>())).s_port as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(servent),
                "::",
                stringify!(s_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<servent>())).s_proto as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(servent),
                "::",
                stringify!(s_proto)
            )
        );
    }
    impl Default for servent {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn setservent(__stay_open: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn endservent();
    }
    extern "C" {
        pub fn getservent() -> *mut root::servent;
    }
    extern "C" {
        pub fn getservbyname(
            __name: *const ::std::os::raw::c_char,
            __proto: *const ::std::os::raw::c_char,
        ) -> *mut root::servent;
    }
    extern "C" {
        pub fn getservbyport(
            __port: ::std::os::raw::c_int,
            __proto: *const ::std::os::raw::c_char,
        ) -> *mut root::servent;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct protoent {
        pub p_name: *mut ::std::os::raw::c_char,
        pub p_aliases: *mut *mut ::std::os::raw::c_char,
        pub p_proto: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_protoent() {
        assert_eq!(
            ::std::mem::size_of::<protoent>(),
            24usize,
            concat!("Size of: ", stringify!(protoent))
        );
        assert_eq!(
            ::std::mem::align_of::<protoent>(),
            8usize,
            concat!("Alignment of ", stringify!(protoent))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<protoent>())).p_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(protoent),
                "::",
                stringify!(p_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<protoent>())).p_aliases as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(protoent),
                "::",
                stringify!(p_aliases)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<protoent>())).p_proto as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(protoent),
                "::",
                stringify!(p_proto)
            )
        );
    }
    impl Default for protoent {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn endprotoent();
    }
    extern "C" {
        pub fn getprotoent() -> *mut root::protoent;
    }
    extern "C" {
        pub fn getprotobyname(__name: *const ::std::os::raw::c_char) -> *mut root::protoent;
    }
    extern "C" {
        pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut root::protoent;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ck_socket_ {
        pub sock: ::std::os::raw::c_int,
        pub prot: ::std::os::raw::c_int,
        pub sock_in: root::sockaddr_in,
        pub len: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_ck_socket_() {
        assert_eq!(
            ::std::mem::size_of::<ck_socket_>(),
            28usize,
            concat!("Size of: ", stringify!(ck_socket_))
        );
        assert_eq!(
            ::std::mem::align_of::<ck_socket_>(),
            4usize,
            concat!("Alignment of ", stringify!(ck_socket_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ck_socket_>())).sock as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ck_socket_),
                "::",
                stringify!(sock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ck_socket_>())).prot as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ck_socket_),
                "::",
                stringify!(prot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ck_socket_>())).sock_in as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ck_socket_),
                "::",
                stringify!(sock_in)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ck_socket_>())).len as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ck_socket_),
                "::",
                stringify!(len)
            )
        );
    }
    pub type __builtin_va_list = [self::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            ::std::mem::size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    impl Default for __va_list_tag {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
}
