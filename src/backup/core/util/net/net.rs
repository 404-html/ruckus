/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Default)]
    pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
    impl<T> __IncompleteArrayField<T> {
        #[inline]
        pub fn new() -> Self {
            __IncompleteArrayField(::std::marker::PhantomData, [])
        }
        #[inline]
        pub unsafe fn as_ptr(&self) -> *const T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_slice(&self, len: usize) -> &[T] {
            ::std::slice::from_raw_parts(self.as_ptr(), len)
        }
        #[inline]
        pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
            ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
        }
    }
    impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__IncompleteArrayField")
        }
    }
    impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }

    pub const __llvm__: u32 = 1;
    pub const __clang__: u32 = 1;
    pub const __clang_major__: u32 = 8;
    pub const __clang_minor__: u32 = 0;
    pub const __clang_patchlevel__: u32 = 0;
    pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __GNUC_MINOR__: u32 = 2;
    pub const __GNUC_PATCHLEVEL__: u32 = 1;
    pub const __GNUC__: u32 = 4;
    pub const __GXX_ABI_VERSION: u32 = 1002;
    pub const __ATOMIC_RELAXED: u32 = 0;
    pub const __ATOMIC_CONSUME: u32 = 1;
    pub const __ATOMIC_ACQUIRE: u32 = 2;
    pub const __ATOMIC_RELEASE: u32 = 3;
    pub const __ATOMIC_ACQ_REL: u32 = 4;
    pub const __ATOMIC_SEQ_CST: u32 = 5;
    pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
    pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
    pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
    pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
    pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
    pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
    pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __STRICT_ANSI__: u32 = 1;
    pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
    pub const __CONSTANT_CFSTRINGS__: u32 = 1;
    pub const __OPTIMIZE__: u32 = 1;
    pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
    pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
    pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
    pub const __BYTE_ORDER__: u32 = 1234;
    pub const __LITTLE_ENDIAN__: u32 = 1;
    pub const _LP64: u32 = 1;
    pub const __LP64__: u32 = 1;
    pub const __CHAR_BIT__: u32 = 8;
    pub const __SCHAR_MAX__: u32 = 127;
    pub const __SHRT_MAX__: u32 = 32767;
    pub const __INT_MAX__: u32 = 2147483647;
    pub const __LONG_MAX__: u64 = 9223372036854775807;
    pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
    pub const __WCHAR_MAX__: u32 = 2147483647;
    pub const __WINT_MAX__: u32 = 4294967295;
    pub const __INTMAX_MAX__: u64 = 9223372036854775807;
    pub const __SIZE_MAX__: i32 = -1;
    pub const __UINTMAX_MAX__: i32 = -1;
    pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
    pub const __INTPTR_MAX__: u64 = 9223372036854775807;
    pub const __UINTPTR_MAX__: i32 = -1;
    pub const __SIZEOF_DOUBLE__: u32 = 8;
    pub const __SIZEOF_FLOAT__: u32 = 4;
    pub const __SIZEOF_INT__: u32 = 4;
    pub const __SIZEOF_LONG__: u32 = 8;
    pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
    pub const __SIZEOF_LONG_LONG__: u32 = 8;
    pub const __SIZEOF_POINTER__: u32 = 8;
    pub const __SIZEOF_SHORT__: u32 = 2;
    pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
    pub const __SIZEOF_SIZE_T__: u32 = 8;
    pub const __SIZEOF_WCHAR_T__: u32 = 4;
    pub const __SIZEOF_WINT_T__: u32 = 4;
    pub const __SIZEOF_INT128__: u32 = 16;
    pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INTMAX_WIDTH__: u32 = 64;
    pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __PTRDIFF_WIDTH__: u32 = 64;
    pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __INTPTR_WIDTH__: u32 = 64;
    pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __SIZE_WIDTH__: u32 = 64;
    pub const __WCHAR_WIDTH__: u32 = 32;
    pub const __WINT_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
    pub const __UINTMAX_WIDTH__: u32 = 64;
    pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINTPTR_WIDTH__: u32 = 64;
    pub const __FLT16_HAS_DENORM__: u32 = 1;
    pub const __FLT16_DIG__: u32 = 3;
    pub const __FLT16_DECIMAL_DIG__: u32 = 5;
    pub const __FLT16_HAS_INFINITY__: u32 = 1;
    pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT16_MANT_DIG__: u32 = 11;
    pub const __FLT16_MAX_10_EXP__: u32 = 4;
    pub const __FLT16_MAX_EXP__: u32 = 15;
    pub const __FLT16_MIN_10_EXP__: i32 = -13;
    pub const __FLT16_MIN_EXP__: i32 = -14;
    pub const __FLT_HAS_DENORM__: u32 = 1;
    pub const __FLT_DIG__: u32 = 6;
    pub const __FLT_DECIMAL_DIG__: u32 = 9;
    pub const __FLT_HAS_INFINITY__: u32 = 1;
    pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT_MANT_DIG__: u32 = 24;
    pub const __FLT_MAX_10_EXP__: u32 = 38;
    pub const __FLT_MAX_EXP__: u32 = 128;
    pub const __FLT_MIN_10_EXP__: i32 = -37;
    pub const __FLT_MIN_EXP__: i32 = -125;
    pub const __DBL_HAS_DENORM__: u32 = 1;
    pub const __DBL_DIG__: u32 = 15;
    pub const __DBL_DECIMAL_DIG__: u32 = 17;
    pub const __DBL_HAS_INFINITY__: u32 = 1;
    pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __DBL_MANT_DIG__: u32 = 53;
    pub const __DBL_MAX_10_EXP__: u32 = 308;
    pub const __DBL_MAX_EXP__: u32 = 1024;
    pub const __DBL_MIN_10_EXP__: i32 = -307;
    pub const __DBL_MIN_EXP__: i32 = -1021;
    pub const __LDBL_HAS_DENORM__: u32 = 1;
    pub const __LDBL_DIG__: u32 = 18;
    pub const __LDBL_DECIMAL_DIG__: u32 = 21;
    pub const __LDBL_HAS_INFINITY__: u32 = 1;
    pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __LDBL_MANT_DIG__: u32 = 64;
    pub const __LDBL_MAX_10_EXP__: u32 = 4932;
    pub const __LDBL_MAX_EXP__: u32 = 16384;
    pub const __LDBL_MIN_10_EXP__: i32 = -4931;
    pub const __LDBL_MIN_EXP__: i32 = -16381;
    pub const __POINTER_WIDTH__: u32 = 64;
    pub const __BIGGEST_ALIGNMENT__: u32 = 16;
    pub const __WINT_UNSIGNED__: u32 = 1;
    pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __UINT8_MAX__: u32 = 255;
    pub const __INT8_MAX__: u32 = 127;
    pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __UINT16_MAX__: u32 = 65535;
    pub const __INT16_MAX__: u32 = 32767;
    pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __UINT32_MAX__: u32 = 4294967295;
    pub const __INT32_MAX__: u32 = 2147483647;
    pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINT64_MAX__: i32 = -1;
    pub const __INT64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST8_MAX__: u32 = 127;
    pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_LEAST8_MAX__: u32 = 255;
    pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_LEAST16_MAX__: u32 = 32767;
    pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_LEAST16_MAX__: u32 = 65535;
    pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_LEAST32_MAX__: u32 = 2147483647;
    pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
    pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_LEAST64_MAX__: i32 = -1;
    pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INT_FAST8_MAX__: u32 = 127;
    pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_FAST8_MAX__: u32 = 255;
    pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_FAST16_MAX__: u32 = 32767;
    pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_FAST16_MAX__: u32 = 65535;
    pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_FAST32_MAX__: u32 = 2147483647;
    pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_FAST32_MAX__: u32 = 4294967295;
    pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_FAST64_MAX__: i32 = -1;
    pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __FINITE_MATH_ONLY__: u32 = 0;
    pub const __GNUC_STDC_INLINE__: u32 = 1;
    pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
    pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __PIC__: u32 = 2;
    pub const __pic__: u32 = 2;
    pub const __FLT_EVAL_METHOD__: u32 = 0;
    pub const __FLT_RADIX__: u32 = 2;
    pub const __DECIMAL_DIG__: u32 = 21;
    pub const __SSP_STRONG__: u32 = 2;
    pub const __code_model_small_: u32 = 1;
    pub const __amd64__: u32 = 1;
    pub const __amd64: u32 = 1;
    pub const __x86_64: u32 = 1;
    pub const __x86_64__: u32 = 1;
    pub const __bdver2: u32 = 1;
    pub const __bdver2__: u32 = 1;
    pub const __tune_bdver2__: u32 = 1;
    pub const __NO_MATH_INLINES: u32 = 1;
    pub const __AES__: u32 = 1;
    pub const __PCLMUL__: u32 = 1;
    pub const __LZCNT__: u32 = 1;
    pub const __BMI__: u32 = 1;
    pub const __POPCNT__: u32 = 1;
    pub const __PRFCHW__: u32 = 1;
    pub const __TBM__: u32 = 1;
    pub const __XOP__: u32 = 1;
    pub const __FMA4__: u32 = 1;
    pub const __SSE4A__: u32 = 1;
    pub const __FMA__: u32 = 1;
    pub const __F16C__: u32 = 1;
    pub const __FXSR__: u32 = 1;
    pub const __XSAVE__: u32 = 1;
    pub const __AVX__: u32 = 1;
    pub const __SSE4_2__: u32 = 1;
    pub const __SSE4_1__: u32 = 1;
    pub const __SSSE3__: u32 = 1;
    pub const __SSE3__: u32 = 1;
    pub const __SSE2__: u32 = 1;
    pub const __SSE2_MATH__: u32 = 1;
    pub const __SSE__: u32 = 1;
    pub const __SSE_MATH__: u32 = 1;
    pub const __MMX__: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
    pub const __SIZEOF_FLOAT128__: u32 = 16;
    pub const __unix: u32 = 1;
    pub const __unix__: u32 = 1;
    pub const __linux: u32 = 1;
    pub const __linux__: u32 = 1;
    pub const __gnu_linux__: u32 = 1;
    pub const __ELF__: u32 = 1;
    pub const __FLOAT128__: u32 = 1;
    pub const __STDC__: u32 = 1;
    pub const __STDC_HOSTED__: u32 = 1;
    pub const __STDC_VERSION__: u32 = 201112;
    pub const __STDC_UTF_16__: u32 = 1;
    pub const __STDC_UTF_32__: u32 = 1;
    pub const HAVE_CONFIG_H: u32 = 1;
    pub const HAVE_POLL: u32 = 1;
    pub const HAVE_LIBPTHREAD: u32 = 1;
    pub const ENABLE_THREADS: u32 = 1;
    pub const __PLATFORM_LINUX__: u32 = 1;
    pub const __LINUX_ALSA__: u32 = 1;
    pub const __UNIX_JACK__: u32 = 1;
    pub const USE_ALSA: u32 = 1;
    pub const USE_DLTRICK_ALSA: u32 = 1;
    pub const USE_OSS: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _SYS_SOCKET_H: u32 = 1;
    pub const __iovec_defined: u32 = 1;
    pub const PF_UNSPEC: u32 = 0;
    pub const PF_LOCAL: u32 = 1;
    pub const PF_UNIX: u32 = 1;
    pub const PF_FILE: u32 = 1;
    pub const PF_INET: u32 = 2;
    pub const PF_AX25: u32 = 3;
    pub const PF_IPX: u32 = 4;
    pub const PF_APPLETALK: u32 = 5;
    pub const PF_NETROM: u32 = 6;
    pub const PF_BRIDGE: u32 = 7;
    pub const PF_ATMPVC: u32 = 8;
    pub const PF_X25: u32 = 9;
    pub const PF_INET6: u32 = 10;
    pub const PF_ROSE: u32 = 11;
    pub const PF_DECnet: u32 = 12;
    pub const PF_NETBEUI: u32 = 13;
    pub const PF_SECURITY: u32 = 14;
    pub const PF_KEY: u32 = 15;
    pub const PF_NETLINK: u32 = 16;
    pub const PF_ROUTE: u32 = 16;
    pub const PF_PACKET: u32 = 17;
    pub const PF_ASH: u32 = 18;
    pub const PF_ECONET: u32 = 19;
    pub const PF_ATMSVC: u32 = 20;
    pub const PF_RDS: u32 = 21;
    pub const PF_SNA: u32 = 22;
    pub const PF_IRDA: u32 = 23;
    pub const PF_PPPOX: u32 = 24;
    pub const PF_WANPIPE: u32 = 25;
    pub const PF_LLC: u32 = 26;
    pub const PF_IB: u32 = 27;
    pub const PF_MPLS: u32 = 28;
    pub const PF_CAN: u32 = 29;
    pub const PF_TIPC: u32 = 30;
    pub const PF_BLUETOOTH: u32 = 31;
    pub const PF_IUCV: u32 = 32;
    pub const PF_RXRPC: u32 = 33;
    pub const PF_ISDN: u32 = 34;
    pub const PF_PHONET: u32 = 35;
    pub const PF_IEEE802154: u32 = 36;
    pub const PF_CAIF: u32 = 37;
    pub const PF_ALG: u32 = 38;
    pub const PF_NFC: u32 = 39;
    pub const PF_VSOCK: u32 = 40;
    pub const PF_KCM: u32 = 41;
    pub const PF_QIPCRTR: u32 = 42;
    pub const PF_SMC: u32 = 43;
    pub const PF_MAX: u32 = 44;
    pub const AF_UNSPEC: u32 = 0;
    pub const AF_LOCAL: u32 = 1;
    pub const AF_UNIX: u32 = 1;
    pub const AF_FILE: u32 = 1;
    pub const AF_INET: u32 = 2;
    pub const AF_AX25: u32 = 3;
    pub const AF_IPX: u32 = 4;
    pub const AF_APPLETALK: u32 = 5;
    pub const AF_NETROM: u32 = 6;
    pub const AF_BRIDGE: u32 = 7;
    pub const AF_ATMPVC: u32 = 8;
    pub const AF_X25: u32 = 9;
    pub const AF_INET6: u32 = 10;
    pub const AF_ROSE: u32 = 11;
    pub const AF_DECnet: u32 = 12;
    pub const AF_NETBEUI: u32 = 13;
    pub const AF_SECURITY: u32 = 14;
    pub const AF_KEY: u32 = 15;
    pub const AF_NETLINK: u32 = 16;
    pub const AF_ROUTE: u32 = 16;
    pub const AF_PACKET: u32 = 17;
    pub const AF_ASH: u32 = 18;
    pub const AF_ECONET: u32 = 19;
    pub const AF_ATMSVC: u32 = 20;
    pub const AF_RDS: u32 = 21;
    pub const AF_SNA: u32 = 22;
    pub const AF_IRDA: u32 = 23;
    pub const AF_PPPOX: u32 = 24;
    pub const AF_WANPIPE: u32 = 25;
    pub const AF_LLC: u32 = 26;
    pub const AF_IB: u32 = 27;
    pub const AF_MPLS: u32 = 28;
    pub const AF_CAN: u32 = 29;
    pub const AF_TIPC: u32 = 30;
    pub const AF_BLUETOOTH: u32 = 31;
    pub const AF_IUCV: u32 = 32;
    pub const AF_RXRPC: u32 = 33;
    pub const AF_ISDN: u32 = 34;
    pub const AF_PHONET: u32 = 35;
    pub const AF_IEEE802154: u32 = 36;
    pub const AF_CAIF: u32 = 37;
    pub const AF_ALG: u32 = 38;
    pub const AF_NFC: u32 = 39;
    pub const AF_VSOCK: u32 = 40;
    pub const AF_KCM: u32 = 41;
    pub const AF_QIPCRTR: u32 = 42;
    pub const AF_SMC: u32 = 43;
    pub const AF_MAX: u32 = 44;
    pub const SOL_RAW: u32 = 255;
    pub const SOL_DECNET: u32 = 261;
    pub const SOL_X25: u32 = 262;
    pub const SOL_PACKET: u32 = 263;
    pub const SOL_ATM: u32 = 264;
    pub const SOL_AAL: u32 = 265;
    pub const SOL_IRDA: u32 = 266;
    pub const SOL_NETBEUI: u32 = 267;
    pub const SOL_LLC: u32 = 268;
    pub const SOL_DCCP: u32 = 269;
    pub const SOL_NETLINK: u32 = 270;
    pub const SOL_TIPC: u32 = 271;
    pub const SOL_RXRPC: u32 = 272;
    pub const SOL_PPPOL2TP: u32 = 273;
    pub const SOL_BLUETOOTH: u32 = 274;
    pub const SOL_PNPIPE: u32 = 275;
    pub const SOL_RDS: u32 = 276;
    pub const SOL_IUCV: u32 = 277;
    pub const SOL_CAIF: u32 = 278;
    pub const SOL_ALG: u32 = 279;
    pub const SOL_NFC: u32 = 280;
    pub const SOL_KCM: u32 = 281;
    pub const SOL_TLS: u32 = 282;
    pub const SOMAXCONN: u32 = 128;
    pub const _BITS_SOCKADDR_H: u32 = 1;
    pub const _SS_SIZE: u32 = 128;
    pub const FIOSETOWN: u32 = 35073;
    pub const SIOCSPGRP: u32 = 35074;
    pub const FIOGETOWN: u32 = 35075;
    pub const SIOCGPGRP: u32 = 35076;
    pub const SIOCATMARK: u32 = 35077;
    pub const SIOCGSTAMP: u32 = 35078;
    pub const SIOCGSTAMPNS: u32 = 35079;
    pub const SOL_SOCKET: u32 = 1;
    pub const SO_DEBUG: u32 = 1;
    pub const SO_REUSEADDR: u32 = 2;
    pub const SO_TYPE: u32 = 3;
    pub const SO_ERROR: u32 = 4;
    pub const SO_DONTROUTE: u32 = 5;
    pub const SO_BROADCAST: u32 = 6;
    pub const SO_SNDBUF: u32 = 7;
    pub const SO_RCVBUF: u32 = 8;
    pub const SO_SNDBUFFORCE: u32 = 32;
    pub const SO_RCVBUFFORCE: u32 = 33;
    pub const SO_KEEPALIVE: u32 = 9;
    pub const SO_OOBINLINE: u32 = 10;
    pub const SO_NO_CHECK: u32 = 11;
    pub const SO_PRIORITY: u32 = 12;
    pub const SO_LINGER: u32 = 13;
    pub const SO_BSDCOMPAT: u32 = 14;
    pub const SO_REUSEPORT: u32 = 15;
    pub const SO_PASSCRED: u32 = 16;
    pub const SO_PEERCRED: u32 = 17;
    pub const SO_RCVLOWAT: u32 = 18;
    pub const SO_SNDLOWAT: u32 = 19;
    pub const SO_RCVTIMEO: u32 = 20;
    pub const SO_SNDTIMEO: u32 = 21;
    pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
    pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
    pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
    pub const SO_BINDTODEVICE: u32 = 25;
    pub const SO_ATTACH_FILTER: u32 = 26;
    pub const SO_DETACH_FILTER: u32 = 27;
    pub const SO_GET_FILTER: u32 = 26;
    pub const SO_PEERNAME: u32 = 28;
    pub const SO_TIMESTAMP: u32 = 29;
    pub const SCM_TIMESTAMP: u32 = 29;
    pub const SO_ACCEPTCONN: u32 = 30;
    pub const SO_PEERSEC: u32 = 31;
    pub const SO_PASSSEC: u32 = 34;
    pub const SO_TIMESTAMPNS: u32 = 35;
    pub const SCM_TIMESTAMPNS: u32 = 35;
    pub const SO_MARK: u32 = 36;
    pub const SO_TIMESTAMPING: u32 = 37;
    pub const SCM_TIMESTAMPING: u32 = 37;
    pub const SO_PROTOCOL: u32 = 38;
    pub const SO_DOMAIN: u32 = 39;
    pub const SO_RXQ_OVFL: u32 = 40;
    pub const SO_WIFI_STATUS: u32 = 41;
    pub const SCM_WIFI_STATUS: u32 = 41;
    pub const SO_PEEK_OFF: u32 = 42;
    pub const SO_NOFCS: u32 = 43;
    pub const SO_LOCK_FILTER: u32 = 44;
    pub const SO_SELECT_ERR_QUEUE: u32 = 45;
    pub const SO_BUSY_POLL: u32 = 46;
    pub const SO_MAX_PACING_RATE: u32 = 47;
    pub const SO_BPF_EXTENSIONS: u32 = 48;
    pub const SO_INCOMING_CPU: u32 = 49;
    pub const SO_ATTACH_BPF: u32 = 50;
    pub const SO_DETACH_BPF: u32 = 27;
    pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
    pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
    pub const SO_CNX_ADVICE: u32 = 53;
    pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
    pub const SO_MEMINFO: u32 = 55;
    pub const SO_INCOMING_NAPI_ID: u32 = 56;
    pub const SO_COOKIE: u32 = 57;
    pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
    pub const SO_PEERGROUPS: u32 = 59;
    pub const SO_ZEROCOPY: u32 = 60;
    pub const _NETINET_IN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
    pub const IP_OPTIONS: u32 = 4;
    pub const IP_HDRINCL: u32 = 3;
    pub const IP_TOS: u32 = 1;
    pub const IP_TTL: u32 = 2;
    pub const IP_RECVOPTS: u32 = 6;
    pub const IP_RETOPTS: u32 = 7;
    pub const IP_MULTICAST_IF: u32 = 32;
    pub const IP_MULTICAST_TTL: u32 = 33;
    pub const IP_MULTICAST_LOOP: u32 = 34;
    pub const IP_ADD_MEMBERSHIP: u32 = 35;
    pub const IP_DROP_MEMBERSHIP: u32 = 36;
    pub const IP_UNBLOCK_SOURCE: u32 = 37;
    pub const IP_BLOCK_SOURCE: u32 = 38;
    pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
    pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
    pub const IP_MSFILTER: u32 = 41;
    pub const IP_ROUTER_ALERT: u32 = 5;
    pub const IP_PKTINFO: u32 = 8;
    pub const IP_PKTOPTIONS: u32 = 9;
    pub const IP_PMTUDISC: u32 = 10;
    pub const IP_MTU_DISCOVER: u32 = 10;
    pub const IP_RECVERR: u32 = 11;
    pub const IP_RECVTTL: u32 = 12;
    pub const IP_RECVTOS: u32 = 13;
    pub const IP_MTU: u32 = 14;
    pub const IP_FREEBIND: u32 = 15;
    pub const IP_IPSEC_POLICY: u32 = 16;
    pub const IP_XFRM_POLICY: u32 = 17;
    pub const IP_PASSSEC: u32 = 18;
    pub const IP_TRANSPARENT: u32 = 19;
    pub const IP_MULTICAST_ALL: u32 = 49;
    pub const IP_ORIGDSTADDR: u32 = 20;
    pub const IP_RECVORIGDSTADDR: u32 = 20;
    pub const IP_MINTTL: u32 = 21;
    pub const IP_NODEFRAG: u32 = 22;
    pub const IP_CHECKSUM: u32 = 23;
    pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
    pub const IP_RECVFRAGSIZE: u32 = 25;
    pub const IP_PMTUDISC_DONT: u32 = 0;
    pub const IP_PMTUDISC_WANT: u32 = 1;
    pub const IP_PMTUDISC_DO: u32 = 2;
    pub const IP_PMTUDISC_PROBE: u32 = 3;
    pub const IP_PMTUDISC_INTERFACE: u32 = 4;
    pub const IP_PMTUDISC_OMIT: u32 = 5;
    pub const IP_UNICAST_IF: u32 = 50;
    pub const SOL_IP: u32 = 0;
    pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
    pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
    pub const IP_MAX_MEMBERSHIPS: u32 = 20;
    pub const IPV6_ADDRFORM: u32 = 1;
    pub const IPV6_2292PKTINFO: u32 = 2;
    pub const IPV6_2292HOPOPTS: u32 = 3;
    pub const IPV6_2292DSTOPTS: u32 = 4;
    pub const IPV6_2292RTHDR: u32 = 5;
    pub const IPV6_2292PKTOPTIONS: u32 = 6;
    pub const IPV6_CHECKSUM: u32 = 7;
    pub const IPV6_2292HOPLIMIT: u32 = 8;
    pub const IPV6_NEXTHOP: u32 = 9;
    pub const IPV6_AUTHHDR: u32 = 10;
    pub const IPV6_UNICAST_HOPS: u32 = 16;
    pub const IPV6_MULTICAST_IF: u32 = 17;
    pub const IPV6_MULTICAST_HOPS: u32 = 18;
    pub const IPV6_MULTICAST_LOOP: u32 = 19;
    pub const IPV6_JOIN_GROUP: u32 = 20;
    pub const IPV6_LEAVE_GROUP: u32 = 21;
    pub const IPV6_ROUTER_ALERT: u32 = 22;
    pub const IPV6_MTU_DISCOVER: u32 = 23;
    pub const IPV6_MTU: u32 = 24;
    pub const IPV6_RECVERR: u32 = 25;
    pub const IPV6_V6ONLY: u32 = 26;
    pub const IPV6_JOIN_ANYCAST: u32 = 27;
    pub const IPV6_LEAVE_ANYCAST: u32 = 28;
    pub const IPV6_IPSEC_POLICY: u32 = 34;
    pub const IPV6_XFRM_POLICY: u32 = 35;
    pub const IPV6_HDRINCL: u32 = 36;
    pub const IPV6_RECVPKTINFO: u32 = 49;
    pub const IPV6_PKTINFO: u32 = 50;
    pub const IPV6_RECVHOPLIMIT: u32 = 51;
    pub const IPV6_HOPLIMIT: u32 = 52;
    pub const IPV6_RECVHOPOPTS: u32 = 53;
    pub const IPV6_HOPOPTS: u32 = 54;
    pub const IPV6_RTHDRDSTOPTS: u32 = 55;
    pub const IPV6_RECVRTHDR: u32 = 56;
    pub const IPV6_RTHDR: u32 = 57;
    pub const IPV6_RECVDSTOPTS: u32 = 58;
    pub const IPV6_DSTOPTS: u32 = 59;
    pub const IPV6_RECVPATHMTU: u32 = 60;
    pub const IPV6_PATHMTU: u32 = 61;
    pub const IPV6_DONTFRAG: u32 = 62;
    pub const IPV6_RECVTCLASS: u32 = 66;
    pub const IPV6_TCLASS: u32 = 67;
    pub const IPV6_AUTOFLOWLABEL: u32 = 70;
    pub const IPV6_ADDR_PREFERENCES: u32 = 72;
    pub const IPV6_MINHOPCOUNT: u32 = 73;
    pub const IPV6_ORIGDSTADDR: u32 = 74;
    pub const IPV6_RECVORIGDSTADDR: u32 = 74;
    pub const IPV6_TRANSPARENT: u32 = 75;
    pub const IPV6_UNICAST_IF: u32 = 76;
    pub const IPV6_RECVFRAGSIZE: u32 = 77;
    pub const IPV6_FREEBIND: u32 = 78;
    pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
    pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
    pub const IPV6_RXHOPOPTS: u32 = 54;
    pub const IPV6_RXDSTOPTS: u32 = 59;
    pub const IPV6_PMTUDISC_DONT: u32 = 0;
    pub const IPV6_PMTUDISC_WANT: u32 = 1;
    pub const IPV6_PMTUDISC_DO: u32 = 2;
    pub const IPV6_PMTUDISC_PROBE: u32 = 3;
    pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
    pub const IPV6_PMTUDISC_OMIT: u32 = 5;
    pub const SOL_IPV6: u32 = 41;
    pub const SOL_ICMPV6: u32 = 58;
    pub const IPV6_RTHDR_LOOSE: u32 = 0;
    pub const IPV6_RTHDR_STRICT: u32 = 1;
    pub const IPV6_RTHDR_TYPE_0: u32 = 0;
    pub const IN_CLASSA_NET: u32 = 4278190080;
    pub const IN_CLASSA_NSHIFT: u32 = 24;
    pub const IN_CLASSA_HOST: u32 = 16777215;
    pub const IN_CLASSA_MAX: u32 = 128;
    pub const IN_CLASSB_NET: u32 = 4294901760;
    pub const IN_CLASSB_NSHIFT: u32 = 16;
    pub const IN_CLASSB_HOST: u32 = 65535;
    pub const IN_CLASSB_MAX: u32 = 65536;
    pub const IN_CLASSC_NET: u32 = 4294967040;
    pub const IN_CLASSC_NSHIFT: u32 = 8;
    pub const IN_CLASSC_HOST: u32 = 255;
    pub const IN_LOOPBACKNET: u32 = 127;
    pub const INET_ADDRSTRLEN: u32 = 16;
    pub const INET6_ADDRSTRLEN: u32 = 46;
    pub const _ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _STDLIB_H: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _MEMORY_H: u32 = 1;
    pub const _STRING_H: u32 = 1;
    pub const _ASSERT_H: u32 = 1;
    pub const sz_VOID: u32 = 0;
    pub const sz_WORD: u32 = 4;
    pub const kindof_VOID: u32 = 0;
    pub const kindof_INT: u32 = 1;
    pub const kindof_FLOAT: u32 = 2;
    pub const kindof_COMPLEX: u32 = 3;
    pub const kindof_VEC3: u32 = 4;
    pub const kindof_VEC4: u32 = 5;
    pub const SILENCE: f64 = 0.0;
    pub const TRUE: u32 = 1;
    pub const FALSE: u32 = 0;
    pub const ONE_PI: f64 = 3.141592653589793;
    pub const TWO_PI: f64 = 6.283185307179586;
    pub const SQRT2: f64 = 1.4142135623730951;
    pub const __CHUCK_STAT_TRACK__: u32 = 1;
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = __int8_t;
    pub type __uint_least8_t = __uint8_t;
    pub type __int_least16_t = __int16_t;
    pub type __uint_least16_t = __uint16_t;
    pub type __int_least32_t = __int32_t;
    pub type __uint_least32_t = __uint32_t;
    pub type __int_least64_t = __int64_t;
    pub type __uint_least64_t = __uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = __off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type ino_t = __ino_t;
    pub type dev_t = __dev_t;
    pub type gid_t = __gid_t;
    pub type mode_t = __mode_t;
    pub type nlink_t = __nlink_t;
    pub type uid_t = __uid_t;
    pub type off_t = __off_t;
    pub type pid_t = __pid_t;
    pub type clockid_t = __clockid_t;
    pub type time_t = __time_t;
    pub type timer_t = __timer_t;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulong;
    pub type register_t = ::std::os::raw::c_long;
    pub type blkcnt_t = __blkcnt_t;
    pub type fsblkcnt_t = __fsblkcnt_t;
    pub type fsfilcnt_t = __fsfilcnt_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct iovec {
        pub iov_base: *mut ::std::os::raw::c_void,
        pub iov_len: usize,
    }
    #[test]
    fn bindgen_test_layout_iovec() {
        assert_eq!(
            ::std::mem::size_of::<iovec>(),
            16usize,
            concat!("Size of: ", stringify!(iovec))
        );
        assert_eq!(
            ::std::mem::align_of::<iovec>(),
            8usize,
            concat!("Alignment of ", stringify!(iovec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iovec),
                "::",
                stringify!(iov_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(iovec),
                "::",
                stringify!(iov_len)
            )
        );
    }
    impl Default for iovec {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type socklen_t = __socklen_t;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum __socket_type {
        SOCK_STREAM = 1,
        SOCK_DGRAM = 2,
        SOCK_RAW = 3,
        SOCK_RDM = 4,
        SOCK_SEQPACKET = 5,
        SOCK_DCCP = 6,
        SOCK_PACKET = 10,
        SOCK_CLOEXEC = 524288,
        SOCK_NONBLOCK = 2048,
    }
    pub type sa_family_t = ::std::os::raw::c_ushort;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sockaddr {
        pub sa_family: sa_family_t,
        pub sa_data: [::std::os::raw::c_char; 14usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(sockaddr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr),
                "::",
                stringify!(sa_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr),
                "::",
                stringify!(sa_data)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_storage {
        pub ss_family: sa_family_t,
        pub __ss_padding: [::std::os::raw::c_char; 118usize],
        pub __ss_align: ::std::os::raw::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_storage() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_storage>(),
            128usize,
            concat!("Size of: ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_storage>(),
            8usize,
            concat!("Alignment of ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(ss_family)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(__ss_padding)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(__ss_align)
            )
        );
    }
    impl Default for sockaddr_storage {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for sockaddr_storage {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "sockaddr_storage {{ ss_family: {:?}, __ss_padding: [{}], __ss_align: {:?} }}",
                self.ss_family,
                self.__ss_padding
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>(),
                self.__ss_align
            )
        }
    }
    impl ::std::cmp::PartialEq for sockaddr_storage {
        fn eq(&self, other: &sockaddr_storage) -> bool {
            self.ss_family == other.ss_family
                && &self.__ss_padding[..] == &other.__ss_padding[..]
                && self.__ss_align == other.__ss_align
        }
    }
    pub const MSG_OOB: _bindgen_ty_1 = _bindgen_ty_1::MSG_OOB;
    pub const MSG_PEEK: _bindgen_ty_1 = _bindgen_ty_1::MSG_PEEK;
    pub const MSG_DONTROUTE: _bindgen_ty_1 = _bindgen_ty_1::MSG_DONTROUTE;
    pub const MSG_CTRUNC: _bindgen_ty_1 = _bindgen_ty_1::MSG_CTRUNC;
    pub const MSG_PROXY: _bindgen_ty_1 = _bindgen_ty_1::MSG_PROXY;
    pub const MSG_TRUNC: _bindgen_ty_1 = _bindgen_ty_1::MSG_TRUNC;
    pub const MSG_DONTWAIT: _bindgen_ty_1 = _bindgen_ty_1::MSG_DONTWAIT;
    pub const MSG_EOR: _bindgen_ty_1 = _bindgen_ty_1::MSG_EOR;
    pub const MSG_WAITALL: _bindgen_ty_1 = _bindgen_ty_1::MSG_WAITALL;
    pub const MSG_FIN: _bindgen_ty_1 = _bindgen_ty_1::MSG_FIN;
    pub const MSG_SYN: _bindgen_ty_1 = _bindgen_ty_1::MSG_SYN;
    pub const MSG_CONFIRM: _bindgen_ty_1 = _bindgen_ty_1::MSG_CONFIRM;
    pub const MSG_RST: _bindgen_ty_1 = _bindgen_ty_1::MSG_RST;
    pub const MSG_ERRQUEUE: _bindgen_ty_1 = _bindgen_ty_1::MSG_ERRQUEUE;
    pub const MSG_NOSIGNAL: _bindgen_ty_1 = _bindgen_ty_1::MSG_NOSIGNAL;
    pub const MSG_MORE: _bindgen_ty_1 = _bindgen_ty_1::MSG_MORE;
    pub const MSG_WAITFORONE: _bindgen_ty_1 = _bindgen_ty_1::MSG_WAITFORONE;
    pub const MSG_BATCH: _bindgen_ty_1 = _bindgen_ty_1::MSG_BATCH;
    pub const MSG_ZEROCOPY: _bindgen_ty_1 = _bindgen_ty_1::MSG_ZEROCOPY;
    pub const MSG_FASTOPEN: _bindgen_ty_1 = _bindgen_ty_1::MSG_FASTOPEN;
    pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = _bindgen_ty_1::MSG_CMSG_CLOEXEC;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_1 {
        MSG_OOB = 1,
        MSG_PEEK = 2,
        MSG_DONTROUTE = 4,
        MSG_CTRUNC = 8,
        MSG_PROXY = 16,
        MSG_TRUNC = 32,
        MSG_DONTWAIT = 64,
        MSG_EOR = 128,
        MSG_WAITALL = 256,
        MSG_FIN = 512,
        MSG_SYN = 1024,
        MSG_CONFIRM = 2048,
        MSG_RST = 4096,
        MSG_ERRQUEUE = 8192,
        MSG_NOSIGNAL = 16384,
        MSG_MORE = 32768,
        MSG_WAITFORONE = 65536,
        MSG_BATCH = 262144,
        MSG_ZEROCOPY = 67108864,
        MSG_FASTOPEN = 536870912,
        MSG_CMSG_CLOEXEC = 1073741824,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct msghdr {
        pub msg_name: *mut ::std::os::raw::c_void,
        pub msg_namelen: socklen_t,
        pub msg_iov: *mut iovec,
        pub msg_iovlen: usize,
        pub msg_control: *mut ::std::os::raw::c_void,
        pub msg_controllen: usize,
        pub msg_flags: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_msghdr() {
        assert_eq!(
            ::std::mem::size_of::<msghdr>(),
            56usize,
            concat!("Size of: ", stringify!(msghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<msghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(msghdr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_namelen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_iov)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_iovlen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_control)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_controllen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_flags)
            )
        );
    }
    impl Default for msghdr {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default)]
    pub struct cmsghdr {
        pub cmsg_len: usize,
        pub cmsg_level: ::std::os::raw::c_int,
        pub cmsg_type: ::std::os::raw::c_int,
        pub __cmsg_data:
            crate::core::util::net::net::root::__IncompleteArrayField<::std::os::raw::c_uchar>,
    }
    #[test]
    fn bindgen_test_layout_cmsghdr() {
        assert_eq!(
            ::std::mem::size_of::<cmsghdr>(),
            16usize,
            concat!("Size of: ", stringify!(cmsghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<cmsghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(cmsghdr))
        );
    }
    extern "C" {
        pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
    }
    pub const SCM_RIGHTS: _bindgen_ty_2 = _bindgen_ty_2::SCM_RIGHTS;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_2 {
        SCM_RIGHTS = 1,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct linger {
        pub l_onoff: ::std::os::raw::c_int,
        pub l_linger: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_linger() {
        assert_eq!(
            ::std::mem::size_of::<linger>(),
            8usize,
            concat!("Size of: ", stringify!(linger))
        );
        assert_eq!(
            ::std::mem::align_of::<linger>(),
            4usize,
            concat!("Alignment of ", stringify!(linger))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(linger),
                "::",
                stringify!(l_onoff)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(linger),
                "::",
                stringify!(l_linger)
            )
        );
    }
    pub const SHUT_RD: _bindgen_ty_3 = _bindgen_ty_3::SHUT_RD;
    pub const SHUT_WR: _bindgen_ty_3 = _bindgen_ty_3::SHUT_WR;
    pub const SHUT_RDWR: _bindgen_ty_3 = _bindgen_ty_3::SHUT_RDWR;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_3 {
        SHUT_RD = 0,
        SHUT_WR = 1,
        SHUT_RDWR = 2,
    }
    extern "C" {
        pub fn socket(
            __domain: ::std::os::raw::c_int,
            __type: ::std::os::raw::c_int,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn socketpair(
            __domain: ::std::os::raw::c_int,
            __type: ::std::os::raw::c_int,
            __protocol: ::std::os::raw::c_int,
            __fds: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bind(
            __fd: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __len: socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getsockname(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __len: *mut socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn connect(
            __fd: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __len: socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpeername(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __len: *mut socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn send(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn recv(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn sendto(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __addr_len: socklen_t,
        ) -> isize;
    }
    extern "C" {
        pub fn recvfrom(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __addr_len: *mut socklen_t,
        ) -> isize;
    }
    extern "C" {
        pub fn sendmsg(
            __fd: ::std::os::raw::c_int,
            __message: *const msghdr,
            __flags: ::std::os::raw::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn recvmsg(
            __fd: ::std::os::raw::c_int,
            __message: *mut msghdr,
            __flags: ::std::os::raw::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn getsockopt(
            __fd: ::std::os::raw::c_int,
            __level: ::std::os::raw::c_int,
            __optname: ::std::os::raw::c_int,
            __optval: *mut ::std::os::raw::c_void,
            __optlen: *mut socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setsockopt(
            __fd: ::std::os::raw::c_int,
            __level: ::std::os::raw::c_int,
            __optname: ::std::os::raw::c_int,
            __optval: *const ::std::os::raw::c_void,
            __optlen: socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn listen(
            __fd: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn accept(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __addr_len: *mut socklen_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn shutdown(
            __fd: ::std::os::raw::c_int,
            __how: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type in_addr_t = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_addr {
        pub s_addr: in_addr_t,
    }
    #[test]
    fn bindgen_test_layout_in_addr() {
        assert_eq!(
            ::std::mem::size_of::<in_addr>(),
            4usize,
            concat!("Size of: ", stringify!(in_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<in_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(in_addr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in_addr),
                "::",
                stringify!(s_addr)
            )
        );
    }
    pub const IPPROTO_IP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_IP;
    pub const IPPROTO_ICMP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_ICMP;
    pub const IPPROTO_IGMP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_IGMP;
    pub const IPPROTO_IPIP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_IPIP;
    pub const IPPROTO_TCP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_TCP;
    pub const IPPROTO_EGP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_EGP;
    pub const IPPROTO_PUP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_PUP;
    pub const IPPROTO_UDP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_UDP;
    pub const IPPROTO_IDP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_IDP;
    pub const IPPROTO_TP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_TP;
    pub const IPPROTO_DCCP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_DCCP;
    pub const IPPROTO_IPV6: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_IPV6;
    pub const IPPROTO_RSVP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_RSVP;
    pub const IPPROTO_GRE: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_GRE;
    pub const IPPROTO_ESP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_ESP;
    pub const IPPROTO_AH: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_AH;
    pub const IPPROTO_MTP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_MTP;
    pub const IPPROTO_BEETPH: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_BEETPH;
    pub const IPPROTO_ENCAP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_ENCAP;
    pub const IPPROTO_PIM: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_PIM;
    pub const IPPROTO_COMP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_COMP;
    pub const IPPROTO_SCTP: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_SCTP;
    pub const IPPROTO_UDPLITE: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_UDPLITE;
    pub const IPPROTO_MPLS: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_MPLS;
    pub const IPPROTO_RAW: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_RAW;
    pub const IPPROTO_MAX: _bindgen_ty_4 = _bindgen_ty_4::IPPROTO_MAX;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_4 {
        IPPROTO_IP = 0,
        IPPROTO_ICMP = 1,
        IPPROTO_IGMP = 2,
        IPPROTO_IPIP = 4,
        IPPROTO_TCP = 6,
        IPPROTO_EGP = 8,
        IPPROTO_PUP = 12,
        IPPROTO_UDP = 17,
        IPPROTO_IDP = 22,
        IPPROTO_TP = 29,
        IPPROTO_DCCP = 33,
        IPPROTO_IPV6 = 41,
        IPPROTO_RSVP = 46,
        IPPROTO_GRE = 47,
        IPPROTO_ESP = 50,
        IPPROTO_AH = 51,
        IPPROTO_MTP = 92,
        IPPROTO_BEETPH = 94,
        IPPROTO_ENCAP = 98,
        IPPROTO_PIM = 103,
        IPPROTO_COMP = 108,
        IPPROTO_SCTP = 132,
        IPPROTO_UDPLITE = 136,
        IPPROTO_MPLS = 137,
        IPPROTO_RAW = 255,
        IPPROTO_MAX = 256,
    }
    pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = _bindgen_ty_5::IPPROTO_HOPOPTS;
    pub const IPPROTO_ROUTING: _bindgen_ty_5 = _bindgen_ty_5::IPPROTO_ROUTING;
    pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = _bindgen_ty_5::IPPROTO_FRAGMENT;
    pub const IPPROTO_ICMPV6: _bindgen_ty_5 = _bindgen_ty_5::IPPROTO_ICMPV6;
    pub const IPPROTO_NONE: _bindgen_ty_5 = _bindgen_ty_5::IPPROTO_NONE;
    pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = _bindgen_ty_5::IPPROTO_DSTOPTS;
    pub const IPPROTO_MH: _bindgen_ty_5 = _bindgen_ty_5::IPPROTO_MH;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_5 {
        IPPROTO_HOPOPTS = 0,
        IPPROTO_ROUTING = 43,
        IPPROTO_FRAGMENT = 44,
        IPPROTO_ICMPV6 = 58,
        IPPROTO_NONE = 59,
        IPPROTO_DSTOPTS = 60,
        IPPROTO_MH = 135,
    }
    pub type in_port_t = u16;
    pub const IPPORT_ECHO: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_ECHO;
    pub const IPPORT_DISCARD: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_DISCARD;
    pub const IPPORT_SYSTAT: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_SYSTAT;
    pub const IPPORT_DAYTIME: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_DAYTIME;
    pub const IPPORT_NETSTAT: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_NETSTAT;
    pub const IPPORT_FTP: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_FTP;
    pub const IPPORT_TELNET: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_TELNET;
    pub const IPPORT_SMTP: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_SMTP;
    pub const IPPORT_TIMESERVER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_TIMESERVER;
    pub const IPPORT_NAMESERVER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_NAMESERVER;
    pub const IPPORT_WHOIS: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_WHOIS;
    pub const IPPORT_MTP: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_MTP;
    pub const IPPORT_TFTP: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_TFTP;
    pub const IPPORT_RJE: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_RJE;
    pub const IPPORT_FINGER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_FINGER;
    pub const IPPORT_TTYLINK: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_TTYLINK;
    pub const IPPORT_SUPDUP: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_SUPDUP;
    pub const IPPORT_EXECSERVER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_EXECSERVER;
    pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_LOGINSERVER;
    pub const IPPORT_CMDSERVER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_CMDSERVER;
    pub const IPPORT_EFSSERVER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_EFSSERVER;
    pub const IPPORT_BIFFUDP: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_EXECSERVER;
    pub const IPPORT_WHOSERVER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_LOGINSERVER;
    pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_EFSSERVER;
    pub const IPPORT_RESERVED: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_RESERVED;
    pub const IPPORT_USERRESERVED: _bindgen_ty_6 = _bindgen_ty_6::IPPORT_USERRESERVED;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_6 {
        IPPORT_ECHO = 7,
        IPPORT_DISCARD = 9,
        IPPORT_SYSTAT = 11,
        IPPORT_DAYTIME = 13,
        IPPORT_NETSTAT = 15,
        IPPORT_FTP = 21,
        IPPORT_TELNET = 23,
        IPPORT_SMTP = 25,
        IPPORT_TIMESERVER = 37,
        IPPORT_NAMESERVER = 42,
        IPPORT_WHOIS = 43,
        IPPORT_MTP = 57,
        IPPORT_TFTP = 69,
        IPPORT_RJE = 77,
        IPPORT_FINGER = 79,
        IPPORT_TTYLINK = 87,
        IPPORT_SUPDUP = 95,
        IPPORT_EXECSERVER = 512,
        IPPORT_LOGINSERVER = 513,
        IPPORT_CMDSERVER = 514,
        IPPORT_EFSSERVER = 520,
        IPPORT_RESERVED = 1024,
        IPPORT_USERRESERVED = 5000,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct in6_addr {
        pub __in6_u: in6_addr__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union in6_addr__bindgen_ty_1 {
        pub __u6_addr8: [u8; 16usize],
        pub __u6_addr16: [u16; 8usize],
        pub __u6_addr32: [u32; 4usize],
        _bindgen_union_align: [u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr8)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr16)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr32)
            )
        );
    }
    impl Default for in6_addr__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_addr__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "in6_addr__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_in6_addr() {
        assert_eq!(
            ::std::mem::size_of::<in6_addr>(),
            16usize,
            concat!("Size of: ", stringify!(in6_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<in6_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_addr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr),
                "::",
                stringify!(__in6_u)
            )
        );
    }
    impl Default for in6_addr {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_addr {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "in6_addr {{ __in6_u: {:?} }}", self.__in6_u)
        }
    }
    extern "C" {
        pub static in6addr_any: in6_addr;
    }
    extern "C" {
        pub static in6addr_loopback: in6_addr;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sockaddr_in {
        pub sin_family: sa_family_t,
        pub sin_port: in_port_t,
        pub sin_addr: in_addr,
        pub sin_zero: [::std::os::raw::c_uchar; 8usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr_in() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_in>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr_in))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_in>(),
            4usize,
            concat!("Alignment of ", stringify!(sockaddr_in))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_zero)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_in6 {
        pub sin6_family: sa_family_t,
        pub sin6_port: in_port_t,
        pub sin6_flowinfo: u32,
        pub sin6_addr: in6_addr,
        pub sin6_scope_id: u32,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_in6() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_in6>(),
            28usize,
            concat!("Size of: ", stringify!(sockaddr_in6))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_in6>(),
            4usize,
            concat!("Alignment of ", stringify!(sockaddr_in6))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_flowinfo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_scope_id)
            )
        );
    }
    impl Default for sockaddr_in6 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for sockaddr_in6 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "sockaddr_in6 {{ sin6_family: {:?}, sin6_port: {:?}, sin6_flowinfo: {:?}, sin6_addr: {:?}, sin6_scope_id: {:?} }}" , self . sin6_family , self . sin6_port , self . sin6_flowinfo , self . sin6_addr , self . sin6_scope_id )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ipv6_mreq {
        pub ipv6mr_multiaddr: in6_addr,
        pub ipv6mr_interface: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_ipv6_mreq() {
        assert_eq!(
            ::std::mem::size_of::<ipv6_mreq>(),
            20usize,
            concat!("Size of: ", stringify!(ipv6_mreq))
        );
        assert_eq!(
            ::std::mem::align_of::<ipv6_mreq>(),
            4usize,
            concat!("Alignment of ", stringify!(ipv6_mreq))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ipv6_mreq),
                "::",
                stringify!(ipv6mr_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ipv6_mreq),
                "::",
                stringify!(ipv6mr_interface)
            )
        );
    }
    impl Default for ipv6_mreq {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for ipv6_mreq {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ipv6_mreq {{ ipv6mr_multiaddr: {:?}, ipv6mr_interface: {:?} }}",
                self.ipv6mr_multiaddr, self.ipv6mr_interface
            )
        }
    }
    extern "C" {
        pub fn ntohl(__netlong: u32) -> u32;
    }
    extern "C" {
        pub fn ntohs(__netshort: u16) -> u16;
    }
    extern "C" {
        pub fn htonl(__hostlong: u32) -> u32;
    }
    extern "C" {
        pub fn htons(__hostshort: u16) -> u16;
    }
    pub type wchar_t = ::std::os::raw::c_int;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> u128;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(
            __nmemb: ::std::os::raw::c_ulong,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: __compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: __compar_fn_t,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
    }
    extern "C" {
        pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> lldiv_t;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(
            __pwcs: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn wcstombs(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const wchar_t,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn memcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memmove(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcoll(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcspn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strspn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strpbrk(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strstr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __assert_fail(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert_perror_fail(
            __errnum: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_int,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(im)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKPOLAR {
        pub modulus: f64,
        pub phase: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKPOLAR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKPOLAR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKPOLAR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).modulus as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(modulus)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(phase)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC3 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC3() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC3>(),
            24usize,
            concat!("Size of: ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC3>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(z)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC4 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
        pub w: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC4() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC4>(),
            32usize,
            concat!("Size of: ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC4>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(z)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).w as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(w)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct t_CKVECTOR {
        pub N: ::std::os::raw::c_ulong,
        pub values: *mut f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVECTOR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVECTOR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVECTOR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).N as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(N)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).values as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(values)
            )
        );
    }
    impl Default for t_CKVECTOR {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type c_str = *mut ::std::os::raw::c_char;
    pub type c_constr = *const ::std::os::raw::c_char;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX_SAMPLE {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX_SAMPLE() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX_SAMPLE>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX_SAMPLE>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(im)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ck_socket_ {
        _unused: [u8; 0],
    }
    pub type ck_socket = *mut ck_socket_;
    extern "C" {
        pub fn ck_udp_create() -> ck_socket;
    }
    extern "C" {
        pub fn ck_tcp_create(flags: ::std::os::raw::c_int) -> ck_socket;
    }
    extern "C" {
        pub fn ck_connect(
            sock: ck_socket,
            hostname: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ck_connect2(
            sock: ck_socket,
            serv_addr: *const sockaddr,
            addrlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ck_bind(sock: ck_socket, port: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ck_listen(
            sock: ck_socket,
            backlog: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ck_accept(sock: ck_socket) -> ck_socket;
    }
    extern "C" {
        pub fn ck_send(
            sock: ck_socket,
            buffer: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_send2(
            sock: ck_socket,
            buffer: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_sendto(
            sock: ck_socket,
            buffer: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            to: *const sockaddr,
            tolen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_recv(
            sock: ck_socket,
            buffer: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_recv2(
            sock: ck_socket,
            buffer: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_recvfrom(
            sock: ck_socket,
            buffer: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            from: *mut sockaddr,
            fromlen: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_send_timeout(
            sock: ck_socket,
            sec: ::std::os::raw::c_long,
            usec: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_recv_timeout(
            sock: ck_socket,
            sec: ::std::os::raw::c_long,
            usec: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ck_close(sock: ck_socket);
    }
}
