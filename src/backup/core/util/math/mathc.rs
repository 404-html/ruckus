/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {

    pub const __llvm__: u32 = 1;
    pub const __clang__: u32 = 1;
    pub const __clang_major__: u32 = 8;
    pub const __clang_minor__: u32 = 0;
    pub const __clang_patchlevel__: u32 = 0;
    pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __GNUC_MINOR__: u32 = 2;
    pub const __GNUC_PATCHLEVEL__: u32 = 1;
    pub const __GNUC__: u32 = 4;
    pub const __GXX_ABI_VERSION: u32 = 1002;
    pub const __ATOMIC_RELAXED: u32 = 0;
    pub const __ATOMIC_CONSUME: u32 = 1;
    pub const __ATOMIC_ACQUIRE: u32 = 2;
    pub const __ATOMIC_RELEASE: u32 = 3;
    pub const __ATOMIC_ACQ_REL: u32 = 4;
    pub const __ATOMIC_SEQ_CST: u32 = 5;
    pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
    pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
    pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
    pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
    pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
    pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
    pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __STRICT_ANSI__: u32 = 1;
    pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
    pub const __CONSTANT_CFSTRINGS__: u32 = 1;
    pub const __OPTIMIZE__: u32 = 1;
    pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
    pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
    pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
    pub const __BYTE_ORDER__: u32 = 1234;
    pub const __LITTLE_ENDIAN__: u32 = 1;
    pub const _LP64: u32 = 1;
    pub const __LP64__: u32 = 1;
    pub const __CHAR_BIT__: u32 = 8;
    pub const __SCHAR_MAX__: u32 = 127;
    pub const __SHRT_MAX__: u32 = 32767;
    pub const __INT_MAX__: u32 = 2147483647;
    pub const __LONG_MAX__: u64 = 9223372036854775807;
    pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
    pub const __WCHAR_MAX__: u32 = 2147483647;
    pub const __WINT_MAX__: u32 = 4294967295;
    pub const __INTMAX_MAX__: u64 = 9223372036854775807;
    pub const __SIZE_MAX__: i32 = -1;
    pub const __UINTMAX_MAX__: i32 = -1;
    pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
    pub const __INTPTR_MAX__: u64 = 9223372036854775807;
    pub const __UINTPTR_MAX__: i32 = -1;
    pub const __SIZEOF_DOUBLE__: u32 = 8;
    pub const __SIZEOF_FLOAT__: u32 = 4;
    pub const __SIZEOF_INT__: u32 = 4;
    pub const __SIZEOF_LONG__: u32 = 8;
    pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
    pub const __SIZEOF_LONG_LONG__: u32 = 8;
    pub const __SIZEOF_POINTER__: u32 = 8;
    pub const __SIZEOF_SHORT__: u32 = 2;
    pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
    pub const __SIZEOF_SIZE_T__: u32 = 8;
    pub const __SIZEOF_WCHAR_T__: u32 = 4;
    pub const __SIZEOF_WINT_T__: u32 = 4;
    pub const __SIZEOF_INT128__: u32 = 16;
    pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INTMAX_WIDTH__: u32 = 64;
    pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __PTRDIFF_WIDTH__: u32 = 64;
    pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __INTPTR_WIDTH__: u32 = 64;
    pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __SIZE_WIDTH__: u32 = 64;
    pub const __WCHAR_WIDTH__: u32 = 32;
    pub const __WINT_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
    pub const __UINTMAX_WIDTH__: u32 = 64;
    pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINTPTR_WIDTH__: u32 = 64;
    pub const __FLT16_HAS_DENORM__: u32 = 1;
    pub const __FLT16_DIG__: u32 = 3;
    pub const __FLT16_DECIMAL_DIG__: u32 = 5;
    pub const __FLT16_HAS_INFINITY__: u32 = 1;
    pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT16_MANT_DIG__: u32 = 11;
    pub const __FLT16_MAX_10_EXP__: u32 = 4;
    pub const __FLT16_MAX_EXP__: u32 = 15;
    pub const __FLT16_MIN_10_EXP__: i32 = -13;
    pub const __FLT16_MIN_EXP__: i32 = -14;
    pub const __FLT_HAS_DENORM__: u32 = 1;
    pub const __FLT_DIG__: u32 = 6;
    pub const __FLT_DECIMAL_DIG__: u32 = 9;
    pub const __FLT_HAS_INFINITY__: u32 = 1;
    pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT_MANT_DIG__: u32 = 24;
    pub const __FLT_MAX_10_EXP__: u32 = 38;
    pub const __FLT_MAX_EXP__: u32 = 128;
    pub const __FLT_MIN_10_EXP__: i32 = -37;
    pub const __FLT_MIN_EXP__: i32 = -125;
    pub const __DBL_HAS_DENORM__: u32 = 1;
    pub const __DBL_DIG__: u32 = 15;
    pub const __DBL_DECIMAL_DIG__: u32 = 17;
    pub const __DBL_HAS_INFINITY__: u32 = 1;
    pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __DBL_MANT_DIG__: u32 = 53;
    pub const __DBL_MAX_10_EXP__: u32 = 308;
    pub const __DBL_MAX_EXP__: u32 = 1024;
    pub const __DBL_MIN_10_EXP__: i32 = -307;
    pub const __DBL_MIN_EXP__: i32 = -1021;
    pub const __LDBL_HAS_DENORM__: u32 = 1;
    pub const __LDBL_DIG__: u32 = 18;
    pub const __LDBL_DECIMAL_DIG__: u32 = 21;
    pub const __LDBL_HAS_INFINITY__: u32 = 1;
    pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __LDBL_MANT_DIG__: u32 = 64;
    pub const __LDBL_MAX_10_EXP__: u32 = 4932;
    pub const __LDBL_MAX_EXP__: u32 = 16384;
    pub const __LDBL_MIN_10_EXP__: i32 = -4931;
    pub const __LDBL_MIN_EXP__: i32 = -16381;
    pub const __POINTER_WIDTH__: u32 = 64;
    pub const __BIGGEST_ALIGNMENT__: u32 = 16;
    pub const __WINT_UNSIGNED__: u32 = 1;
    pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __UINT8_MAX__: u32 = 255;
    pub const __INT8_MAX__: u32 = 127;
    pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __UINT16_MAX__: u32 = 65535;
    pub const __INT16_MAX__: u32 = 32767;
    pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __UINT32_MAX__: u32 = 4294967295;
    pub const __INT32_MAX__: u32 = 2147483647;
    pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINT64_MAX__: i32 = -1;
    pub const __INT64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST8_MAX__: u32 = 127;
    pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_LEAST8_MAX__: u32 = 255;
    pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_LEAST16_MAX__: u32 = 32767;
    pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_LEAST16_MAX__: u32 = 65535;
    pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_LEAST32_MAX__: u32 = 2147483647;
    pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
    pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_LEAST64_MAX__: i32 = -1;
    pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INT_FAST8_MAX__: u32 = 127;
    pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_FAST8_MAX__: u32 = 255;
    pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_FAST16_MAX__: u32 = 32767;
    pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_FAST16_MAX__: u32 = 65535;
    pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_FAST32_MAX__: u32 = 2147483647;
    pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_FAST32_MAX__: u32 = 4294967295;
    pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_FAST64_MAX__: i32 = -1;
    pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __FINITE_MATH_ONLY__: u32 = 0;
    pub const __GNUC_STDC_INLINE__: u32 = 1;
    pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
    pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __PIC__: u32 = 2;
    pub const __pic__: u32 = 2;
    pub const __FLT_EVAL_METHOD__: u32 = 0;
    pub const __FLT_RADIX__: u32 = 2;
    pub const __DECIMAL_DIG__: u32 = 21;
    pub const __SSP_STRONG__: u32 = 2;
    pub const __code_model_small_: u32 = 1;
    pub const __amd64__: u32 = 1;
    pub const __amd64: u32 = 1;
    pub const __x86_64: u32 = 1;
    pub const __x86_64__: u32 = 1;
    pub const __bdver2: u32 = 1;
    pub const __bdver2__: u32 = 1;
    pub const __tune_bdver2__: u32 = 1;
    pub const __NO_MATH_INLINES: u32 = 1;
    pub const __AES__: u32 = 1;
    pub const __PCLMUL__: u32 = 1;
    pub const __LZCNT__: u32 = 1;
    pub const __BMI__: u32 = 1;
    pub const __POPCNT__: u32 = 1;
    pub const __PRFCHW__: u32 = 1;
    pub const __TBM__: u32 = 1;
    pub const __LWP__: u32 = 1;
    pub const __XOP__: u32 = 1;
    pub const __FMA4__: u32 = 1;
    pub const __SSE4A__: u32 = 1;
    pub const __FMA__: u32 = 1;
    pub const __F16C__: u32 = 1;
    pub const __FXSR__: u32 = 1;
    pub const __XSAVE__: u32 = 1;
    pub const __AVX__: u32 = 1;
    pub const __SSE4_2__: u32 = 1;
    pub const __SSE4_1__: u32 = 1;
    pub const __SSSE3__: u32 = 1;
    pub const __SSE3__: u32 = 1;
    pub const __SSE2__: u32 = 1;
    pub const __SSE2_MATH__: u32 = 1;
    pub const __SSE__: u32 = 1;
    pub const __SSE_MATH__: u32 = 1;
    pub const __MMX__: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
    pub const __SIZEOF_FLOAT128__: u32 = 16;
    pub const __unix: u32 = 1;
    pub const __unix__: u32 = 1;
    pub const __linux: u32 = 1;
    pub const __linux__: u32 = 1;
    pub const __gnu_linux__: u32 = 1;
    pub const __ELF__: u32 = 1;
    pub const __FLOAT128__: u32 = 1;
    pub const __STDC__: u32 = 1;
    pub const __STDC_HOSTED__: u32 = 1;
    pub const __STDC_VERSION__: u32 = 201112;
    pub const __STDC_UTF_16__: u32 = 1;
    pub const __STDC_UTF_32__: u32 = 1;
    pub const HAVE_CONFIG_H: u32 = 1;
    pub const HAVE_POLL: u32 = 1;
    pub const HAVE_LIBPTHREAD: u32 = 1;
    pub const ENABLE_THREADS: u32 = 1;
    pub const __PLATFORM_LINUX__: u32 = 1;
    pub const __LINUX_ALSA__: u32 = 1;
    pub const __UNIX_JACK__: u32 = 1;
    pub const USE_ALSA: u32 = 1;
    pub const USE_DLTRICK_ALSA: u32 = 1;
    pub const USE_OSS: u32 = 1;
    pub const _MATH_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __GLIBC_FLT_EVAL_METHOD: u32 = 0;
    pub const __FP_LOGB0_IS_MIN: u32 = 1;
    pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
    pub const FP_ILOGB0: i32 = -2147483648;
    pub const FP_ILOGBNAN: i32 = -2147483648;
    pub const __MATH_DECLARING_DOUBLE: u32 = 1;
    pub const __MATH_DECLARING_FLOATN: u32 = 0;
    pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
    pub const FP_NAN: u32 = 0;
    pub const FP_INFINITE: u32 = 1;
    pub const FP_ZERO: u32 = 2;
    pub const FP_SUBNORMAL: u32 = 3;
    pub const FP_NORMAL: u32 = 4;
    pub const MATH_ERRNO: u32 = 1;
    pub const MATH_ERREXCEPT: u32 = 2;
    pub const math_errhandling: u32 = 3;
    pub const LOGTWO: f64 = 0.6931471805599453;
    pub const LOGTEN: f64 = 2.302585092994;
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = __int8_t;
    pub type __uint_least8_t = __uint8_t;
    pub type __int_least16_t = __int16_t;
    pub type __uint_least16_t = __uint16_t;
    pub type __int_least32_t = __int32_t;
    pub type __uint_least32_t = __uint32_t;
    pub type __int_least64_t = __int64_t;
    pub type __uint_least64_t = __uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = __off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    pub type float_t = f32;
    pub type double_t = f64;
    extern "C" {
        pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn acos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __acos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn asin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __asin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __atan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atan2(__y: f64, __x: f64) -> f64;
    }
    extern "C" {
        pub fn __atan2(__y: f64, __x: f64) -> f64;
    }
    extern "C" {
        pub fn cos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn tan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __tan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn cosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn tanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __tanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn acosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __acosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn asinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __asinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __atanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn exp(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp(__x: f64) -> f64;
    }
    extern "C" {
        pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn log(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
    }
    extern "C" {
        pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
    }
    extern "C" {
        pub fn expm1(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __expm1(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log1p(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log1p(__x: f64) -> f64;
    }
    extern "C" {
        pub fn logb(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __logb(__x: f64) -> f64;
    }
    extern "C" {
        pub fn exp2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn pow(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __pow(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn sqrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sqrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn hypot(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __hypot(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn cbrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cbrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn ceil(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __ceil(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fabs(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __fabs(__x: f64) -> f64;
    }
    extern "C" {
        pub fn floor(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __floor(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fmod(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmod(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn copysign(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __copysign(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn erf(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __erf(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __erfc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __lgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __tgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn rint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __rint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn nextafter(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __nextafter(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nexttoward(__x: f64, __y: u128) -> f64;
    }
    extern "C" {
        pub fn __nexttoward(__x: f64, __y: u128) -> f64;
    }
    extern "C" {
        pub fn remainder(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __remainder(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    }
    extern "C" {
        pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    }
    extern "C" {
        pub fn nearbyint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nearbyint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn round(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __round(__x: f64) -> f64;
    }
    extern "C" {
        pub fn trunc(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __trunc(__x: f64) -> f64;
    }
    extern "C" {
        pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn lround(__x: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn fdim(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fdim(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fmax(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmax(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fmin(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmin(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
    }
    extern "C" {
        pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
    }
    extern "C" {
        pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn acosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __acosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn asinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __asinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __atanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atan2f(__y: f32, __x: f32) -> f32;
    }
    extern "C" {
        pub fn __atan2f(__y: f32, __x: f32) -> f32;
    }
    extern "C" {
        pub fn cosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __cosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn sinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn tanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __tanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn coshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __coshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn sinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn tanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __tanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn acoshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __acoshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn asinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __asinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __atanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn expf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __expf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn logf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __logf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
    }
    extern "C" {
        pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
    }
    extern "C" {
        pub fn expm1f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __expm1f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log1pf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log1pf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn logbf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __logbf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn exp2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __exp2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn powf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __powf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn sqrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sqrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn hypotf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __hypotf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn cbrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __cbrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn ceilf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __ceilf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn fabsf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __fabsf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn floorf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __floorf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn fmodf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fmodf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn copysignf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __copysignf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
    }
    extern "C" {
        pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
    }
    extern "C" {
        pub fn erff(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __erff(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn erfcf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __erfcf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn lgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __lgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn tgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __tgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn rintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __rintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn nextafterf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __nextafterf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn nexttowardf(__x: f32, __y: u128) -> f32;
    }
    extern "C" {
        pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
    }
    extern "C" {
        pub fn remainderf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __remainderf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
    }
    extern "C" {
        pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
    }
    extern "C" {
        pub fn nearbyintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __nearbyintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn roundf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __roundf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn truncf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __truncf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn fdimf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fdimf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fmaxf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fmaxf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fminf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fminf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    }
    extern "C" {
        pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    }
    extern "C" {
        pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn acosl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __acosl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn asinl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __asinl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn atanl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __atanl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn atan2l(__y: u128, __x: u128) -> u128;
    }
    extern "C" {
        pub fn __atan2l(__y: u128, __x: u128) -> u128;
    }
    extern "C" {
        pub fn cosl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __cosl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn sinl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __sinl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn tanl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __tanl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn coshl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __coshl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn sinhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __sinhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn tanhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __tanhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn acoshl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __acoshl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn asinhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __asinhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn atanhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __atanhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn expl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __expl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
    }
    extern "C" {
        pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
    }
    extern "C" {
        pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
    }
    extern "C" {
        pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
    }
    extern "C" {
        pub fn logl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __logl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn log10l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __log10l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
    }
    extern "C" {
        pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
    }
    extern "C" {
        pub fn expm1l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __expm1l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn log1pl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __log1pl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn logbl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __logbl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn exp2l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __exp2l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn log2l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __log2l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn powl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __powl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn sqrtl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __sqrtl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn hypotl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __hypotl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn cbrtl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __cbrtl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn ceill(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __ceill(__x: u128) -> u128;
    }
    extern "C" {
        pub fn fabsl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __fabsl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn floorl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __floorl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn fmodl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fmodl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn copysignl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __copysignl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
    }
    extern "C" {
        pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
    }
    extern "C" {
        pub fn erfl(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __erfl(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn erfcl(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __erfcl(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn lgammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __lgammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn tgammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __tgammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn rintl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __rintl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn nextafterl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __nextafterl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn nexttowardl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn remainderl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __remainderl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
    }
    extern "C" {
        pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
    }
    extern "C" {
        pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
    }
    extern "C" {
        pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
    }
    extern "C" {
        pub fn nearbyintl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __nearbyintl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn roundl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __roundl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn truncl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __truncl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
    }
    extern "C" {
        pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
    }
    extern "C" {
        pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn fdiml(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fdiml(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn fmaxl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fmaxl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn fminl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fminl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
    }
    extern "C" {
        pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
    }
    // pub const FP_NAN: _bindgen_ty_1 = _bindgen_ty_1::FP_NAN;
    // pub const FP_INFINITE: _bindgen_ty_1 = _bindgen_ty_1::FP_INFINITE;
    // pub const FP_ZERO: _bindgen_ty_1 = _bindgen_ty_1::FP_ZERO;
    // pub const FP_SUBNORMAL: _bindgen_ty_1 = _bindgen_ty_1::FP_SUBNORMAL;
    // pub const FP_NORMAL: _bindgen_ty_1 = _bindgen_ty_1::FP_NORMAL;
    // #[repr(u32)]
    // #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    // pub enum _bindgen_ty_1 {
    //     FP_NAN = 0,
    //     FP_INFINITE = 1,
    //     FP_ZERO = 2,
    //     FP_SUBNORMAL = 3,
    //     FP_NORMAL = 4,
    // }
    extern "C" {
        pub fn mtof(f: f64) -> f64;
    }
    extern "C" {
        pub fn ftom(f: f64) -> f64;
    }
    extern "C" {
        pub fn powtodb(f: f64) -> f64;
    }
    extern "C" {
        pub fn rmstodb(f: f64) -> f64;
    }
    extern "C" {
        pub fn dbtopow(f: f64) -> f64;
    }
    extern "C" {
        pub fn dbtorms(f: f64) -> f64;
    }
    extern "C" {
        pub fn nextpow2(i: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn ensurepow2(i: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
    }
}
