/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {

    pub const __llvm__: u32 = 1;
    pub const __clang__: u32 = 1;
    pub const __clang_major__: u32 = 8;
    pub const __clang_minor__: u32 = 0;
    pub const __clang_patchlevel__: u32 = 0;
    pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __GNUC_MINOR__: u32 = 2;
    pub const __GNUC_PATCHLEVEL__: u32 = 1;
    pub const __GNUC__: u32 = 4;
    pub const __GXX_ABI_VERSION: u32 = 1002;
    pub const __ATOMIC_RELAXED: u32 = 0;
    pub const __ATOMIC_CONSUME: u32 = 1;
    pub const __ATOMIC_ACQUIRE: u32 = 2;
    pub const __ATOMIC_RELEASE: u32 = 3;
    pub const __ATOMIC_ACQ_REL: u32 = 4;
    pub const __ATOMIC_SEQ_CST: u32 = 5;
    pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
    pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
    pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
    pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
    pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
    pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
    pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
    pub const __STRICT_ANSI__: u32 = 1;
    pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
    pub const __CONSTANT_CFSTRINGS__: u32 = 1;
    pub const __OPTIMIZE__: u32 = 1;
    pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
    pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
    pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
    pub const __BYTE_ORDER__: u32 = 1234;
    pub const __LITTLE_ENDIAN__: u32 = 1;
    pub const _LP64: u32 = 1;
    pub const __LP64__: u32 = 1;
    pub const __CHAR_BIT__: u32 = 8;
    pub const __SCHAR_MAX__: u32 = 127;
    pub const __SHRT_MAX__: u32 = 32767;
    pub const __INT_MAX__: u32 = 2147483647;
    pub const __LONG_MAX__: u64 = 9223372036854775807;
    pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
    pub const __WCHAR_MAX__: u32 = 2147483647;
    pub const __WINT_MAX__: u32 = 4294967295;
    pub const __INTMAX_MAX__: u64 = 9223372036854775807;
    pub const __SIZE_MAX__: i32 = -1;
    pub const __UINTMAX_MAX__: i32 = -1;
    pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
    pub const __INTPTR_MAX__: u64 = 9223372036854775807;
    pub const __UINTPTR_MAX__: i32 = -1;
    pub const __SIZEOF_DOUBLE__: u32 = 8;
    pub const __SIZEOF_FLOAT__: u32 = 4;
    pub const __SIZEOF_INT__: u32 = 4;
    pub const __SIZEOF_LONG__: u32 = 8;
    pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
    pub const __SIZEOF_LONG_LONG__: u32 = 8;
    pub const __SIZEOF_POINTER__: u32 = 8;
    pub const __SIZEOF_SHORT__: u32 = 2;
    pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
    pub const __SIZEOF_SIZE_T__: u32 = 8;
    pub const __SIZEOF_WCHAR_T__: u32 = 4;
    pub const __SIZEOF_WINT_T__: u32 = 4;
    pub const __SIZEOF_INT128__: u32 = 16;
    pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INTMAX_WIDTH__: u32 = 64;
    pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __PTRDIFF_WIDTH__: u32 = 64;
    pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __INTPTR_WIDTH__: u32 = 64;
    pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __SIZE_WIDTH__: u32 = 64;
    pub const __WCHAR_WIDTH__: u32 = 32;
    pub const __WINT_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
    pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
    pub const __UINTMAX_WIDTH__: u32 = 64;
    pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINTPTR_WIDTH__: u32 = 64;
    pub const __FLT16_HAS_DENORM__: u32 = 1;
    pub const __FLT16_DIG__: u32 = 3;
    pub const __FLT16_DECIMAL_DIG__: u32 = 5;
    pub const __FLT16_HAS_INFINITY__: u32 = 1;
    pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT16_MANT_DIG__: u32 = 11;
    pub const __FLT16_MAX_10_EXP__: u32 = 4;
    pub const __FLT16_MAX_EXP__: u32 = 15;
    pub const __FLT16_MIN_10_EXP__: i32 = -13;
    pub const __FLT16_MIN_EXP__: i32 = -14;
    pub const __FLT_HAS_DENORM__: u32 = 1;
    pub const __FLT_DIG__: u32 = 6;
    pub const __FLT_DECIMAL_DIG__: u32 = 9;
    pub const __FLT_HAS_INFINITY__: u32 = 1;
    pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
    pub const __FLT_MANT_DIG__: u32 = 24;
    pub const __FLT_MAX_10_EXP__: u32 = 38;
    pub const __FLT_MAX_EXP__: u32 = 128;
    pub const __FLT_MIN_10_EXP__: i32 = -37;
    pub const __FLT_MIN_EXP__: i32 = -125;
    pub const __DBL_HAS_DENORM__: u32 = 1;
    pub const __DBL_DIG__: u32 = 15;
    pub const __DBL_DECIMAL_DIG__: u32 = 17;
    pub const __DBL_HAS_INFINITY__: u32 = 1;
    pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __DBL_MANT_DIG__: u32 = 53;
    pub const __DBL_MAX_10_EXP__: u32 = 308;
    pub const __DBL_MAX_EXP__: u32 = 1024;
    pub const __DBL_MIN_10_EXP__: i32 = -307;
    pub const __DBL_MIN_EXP__: i32 = -1021;
    pub const __LDBL_HAS_DENORM__: u32 = 1;
    pub const __LDBL_DIG__: u32 = 18;
    pub const __LDBL_DECIMAL_DIG__: u32 = 21;
    pub const __LDBL_HAS_INFINITY__: u32 = 1;
    pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
    pub const __LDBL_MANT_DIG__: u32 = 64;
    pub const __LDBL_MAX_10_EXP__: u32 = 4932;
    pub const __LDBL_MAX_EXP__: u32 = 16384;
    pub const __LDBL_MIN_10_EXP__: i32 = -4931;
    pub const __LDBL_MIN_EXP__: i32 = -16381;
    pub const __POINTER_WIDTH__: u32 = 64;
    pub const __BIGGEST_ALIGNMENT__: u32 = 16;
    pub const __WINT_UNSIGNED__: u32 = 1;
    pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __UINT8_MAX__: u32 = 255;
    pub const __INT8_MAX__: u32 = 127;
    pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __UINT16_MAX__: u32 = 65535;
    pub const __INT16_MAX__: u32 = 32767;
    pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __UINT32_MAX__: u32 = 4294967295;
    pub const __INT32_MAX__: u32 = 2147483647;
    pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __UINT64_MAX__: i32 = -1;
    pub const __INT64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST8_MAX__: u32 = 127;
    pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_LEAST8_MAX__: u32 = 255;
    pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_LEAST16_MAX__: u32 = 32767;
    pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_LEAST16_MAX__: u32 = 65535;
    pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_LEAST32_MAX__: u32 = 2147483647;
    pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
    pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_LEAST64_MAX__: i32 = -1;
    pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __INT_FAST8_MAX__: u32 = 127;
    pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
    pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
    pub const __UINT_FAST8_MAX__: u32 = 255;
    pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
    pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
    pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
    pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
    pub const __INT_FAST16_MAX__: u32 = 32767;
    pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
    pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
    pub const __UINT_FAST16_MAX__: u32 = 65535;
    pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
    pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
    pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
    pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
    pub const __INT_FAST32_MAX__: u32 = 2147483647;
    pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
    pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
    pub const __UINT_FAST32_MAX__: u32 = 4294967295;
    pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
    pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
    pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
    pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
    pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
    pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
    pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
    pub const __UINT_FAST64_MAX__: i32 = -1;
    pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
    pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
    pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
    pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
    pub const __FINITE_MATH_ONLY__: u32 = 0;
    pub const __GNUC_STDC_INLINE__: u32 = 1;
    pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
    pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
    pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
    pub const __PIC__: u32 = 2;
    pub const __pic__: u32 = 2;
    pub const __FLT_EVAL_METHOD__: u32 = 0;
    pub const __FLT_RADIX__: u32 = 2;
    pub const __DECIMAL_DIG__: u32 = 21;
    pub const __SSP_STRONG__: u32 = 2;
    pub const __code_model_small_: u32 = 1;
    pub const __amd64__: u32 = 1;
    pub const __amd64: u32 = 1;
    pub const __x86_64: u32 = 1;
    pub const __x86_64__: u32 = 1;
    pub const __bdver2: u32 = 1;
    pub const __bdver2__: u32 = 1;
    pub const __tune_bdver2__: u32 = 1;
    pub const __NO_MATH_INLINES: u32 = 1;
    pub const __AES__: u32 = 1;
    pub const __PCLMUL__: u32 = 1;
    pub const __LZCNT__: u32 = 1;
    pub const __BMI__: u32 = 1;
    pub const __POPCNT__: u32 = 1;
    pub const __PRFCHW__: u32 = 1;
    pub const __TBM__: u32 = 1;
    pub const __LWP__: u32 = 1;
    pub const __XOP__: u32 = 1;
    pub const __FMA4__: u32 = 1;
    pub const __SSE4A__: u32 = 1;
    pub const __FMA__: u32 = 1;
    pub const __F16C__: u32 = 1;
    pub const __FXSR__: u32 = 1;
    pub const __XSAVE__: u32 = 1;
    pub const __AVX__: u32 = 1;
    pub const __SSE4_2__: u32 = 1;
    pub const __SSE4_1__: u32 = 1;
    pub const __SSSE3__: u32 = 1;
    pub const __SSE3__: u32 = 1;
    pub const __SSE2__: u32 = 1;
    pub const __SSE2_MATH__: u32 = 1;
    pub const __SSE__: u32 = 1;
    pub const __SSE_MATH__: u32 = 1;
    pub const __MMX__: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
    pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
    pub const __SIZEOF_FLOAT128__: u32 = 16;
    pub const __unix: u32 = 1;
    pub const __unix__: u32 = 1;
    pub const __linux: u32 = 1;
    pub const __linux__: u32 = 1;
    pub const __gnu_linux__: u32 = 1;
    pub const __ELF__: u32 = 1;
    pub const __FLOAT128__: u32 = 1;
    pub const __STDC__: u32 = 1;
    pub const __STDC_HOSTED__: u32 = 1;
    pub const __STDC_VERSION__: u32 = 201112;
    pub const __STDC_UTF_16__: u32 = 1;
    pub const __STDC_UTF_32__: u32 = 1;
    pub const HAVE_CONFIG_H: u32 = 1;
    pub const HAVE_POLL: u32 = 1;
    pub const HAVE_LIBPTHREAD: u32 = 1;
    pub const ENABLE_THREADS: u32 = 1;
    pub const __PLATFORM_LINUX__: u32 = 1;
    pub const __LINUX_ALSA__: u32 = 1;
    pub const __UNIX_JACK__: u32 = 1;
    pub const USE_ALSA: u32 = 1;
    pub const USE_DLTRICK_ALSA: u32 = 1;
    pub const USE_OSS: u32 = 1;
    pub const YYBISON: u32 = 1;
    pub const YYBISON_VERSION: &'static [u8; 4usize] = b"3.2\0";
    pub const YYSKELETON_NAME: &'static [u8; 7usize] = b"yacc.c\0";
    pub const YYPURE: u32 = 0;
    pub const YYPUSH: u32 = 0;
    pub const YYPULL: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const FOPEN_MAX: u32 = 16;
    pub const _BITS_STDIO_H: u32 = 1;
    pub const _STRING_H: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _MEMORY_H: u32 = 1;
    pub const _ASSERT_H: u32 = 1;
    pub const sz_VOID: u32 = 0;
    pub const sz_WORD: u32 = 4;
    pub const kindof_VOID: u32 = 0;
    pub const kindof_INT: u32 = 1;
    pub const kindof_FLOAT: u32 = 2;
    pub const kindof_COMPLEX: u32 = 3;
    pub const kindof_VEC3: u32 = 4;
    pub const kindof_VEC4: u32 = 5;
    pub const SILENCE: f64 = 0.0;
    pub const TRUE: u32 = 1;
    pub const FALSE: u32 = 0;
    pub const ONE_PI: f64 = 3.141592653589793;
    pub const TWO_PI: f64 = 6.283185307179586;
    pub const SQRT2: f64 = 1.4142135623730951;
    pub const __CHUCK_STAT_TRACK__: u32 = 1;
    pub const CK_LOG_CRAZY: u32 = 10;
    pub const CK_LOG_FINEST: u32 = 9;
    pub const CK_LOG_FINER: u32 = 8;
    pub const CK_LOG_FINE: u32 = 7;
    pub const CK_LOG_CONFIG: u32 = 6;
    pub const CK_LOG_INFO: u32 = 5;
    pub const CK_LOG_WARNING: u32 = 4;
    pub const CK_LOG_SEVERE: u32 = 3;
    pub const CK_LOG_SYSTEM: u32 = 2;
    pub const CK_LOG_CORE: u32 = 1;
    pub const CK_LOG_NONE: u32 = 0;
    pub const YYERROR_VERBOSE: u32 = 0;
    pub const YYDEBUG: u32 = 0;
    pub const YYSTYPE_IS_TRIVIAL: u32 = 1;
    pub const YYSTYPE_IS_DECLARED: u32 = 1;
    pub const YYCOPY_NEEDED: u32 = 1;
    pub const YYFINAL: u32 = 122;
    pub const YYLAST: u32 = 1181;
    pub const YYNTOKENS: u32 = 112;
    pub const YYNNTS: u32 = 58;
    pub const YYNRULES: u32 = 184;
    pub const YYNSTATES: u32 = 319;
    pub const YYUNDEFTOK: u32 = 2;
    pub const YYMAXUTOK: u32 = 366;
    pub const YYPACT_NINF: i32 = -246;
    pub const YYTABLE_NINF: i32 = -42;
    pub const YYEMPTY: i32 = -2;
    pub const YYEOF: u32 = 0;
    pub const YYTERROR: u32 = 1;
    pub const YYERRCODE: u32 = 256;
    pub const YYINITDEPTH: u32 = 200;
    pub const YYMAXDEPTH: u32 = 10000;
    pub type __gnuc_va_list = __builtin_va_list;
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = __int8_t;
    pub type __uint_least8_t = __uint8_t;
    pub type __int_least16_t = __int16_t;
    pub type __uint_least16_t = __uint16_t;
    pub type __int_least32_t = __int32_t;
    pub type __uint_least32_t = __uint32_t;
    pub type __int_least64_t = __int64_t;
    pub type __uint_least64_t = __uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = __off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: __mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    impl Default for __mbstate_t__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    impl Default for __mbstate_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "__mbstate_t {{ __count: {:?}, __value: {:?} }}",
                self.__count, self.__value
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: __off_t,
        pub __state: __mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos_t = _G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: __off64_t,
        pub __state: __mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos64_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos64_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos64_t = _G_fpos64_t;
    pub type __FILE = _IO_FILE;
    pub type FILE = _IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut _IO_marker,
        pub _chain: *mut _IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: __off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut _IO_lock_t,
        pub _offset: __off64_t,
        pub _codecvt: *mut _IO_codecvt,
        pub _wide_data: *mut _IO_wide_data,
        pub _freeres_list: *mut _IO_FILE,
        pub _freeres_buf: *mut ::std::os::raw::c_void,
        pub __pad5: usize,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    impl Default for _IO_FILE {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type fpos_t = __fpos_t;
    extern "C" {
        pub static mut stdin: *mut FILE;
    }
    extern "C" {
        pub static mut stdout: *mut FILE;
    }
    extern "C" {
        pub static mut stderr: *mut FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut FILE,
        ) -> *mut FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: ::std::os::raw::c_ulong,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: ::std::os::raw::c_ulong,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
            __n: ::std::os::raw::c_ulong,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
            __n: ::std::os::raw::c_ulong,
            __s: *mut FILE,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut FILE);
    }
    extern "C" {
        pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memmove(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcoll(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcspn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strspn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strpbrk(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strstr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    pub type wchar_t = ::std::os::raw::c_int;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> u128;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(
            __nmemb: ::std::os::raw::c_ulong,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: __compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: __compar_fn_t,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
    }
    extern "C" {
        pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> lldiv_t;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(
            __pwcs: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn wcstombs(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const wchar_t,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn __assert_fail(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert_perror_fail(
            __errnum: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn __assert(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_int,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(im)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKPOLAR {
        pub modulus: f64,
        pub phase: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKPOLAR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKPOLAR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKPOLAR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).modulus as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(modulus)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(phase)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC3 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC3() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC3>(),
            24usize,
            concat!("Size of: ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC3>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(z)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC4 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
        pub w: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC4() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC4>(),
            32usize,
            concat!("Size of: ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC4>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(z)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).w as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(w)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct t_CKVECTOR {
        pub N: ::std::os::raw::c_ulong,
        pub values: *mut f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVECTOR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVECTOR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVECTOR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).N as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(N)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).values as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(values)
            )
        );
    }
    impl Default for t_CKVECTOR {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type c_str = *mut ::std::os::raw::c_char;
    pub type c_constr = *const ::std::os::raw::c_char;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX_SAMPLE {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX_SAMPLE() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX_SAMPLE>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX_SAMPLE>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(im)
            )
        );
    }
    pub type U_boolList = *mut U_boolList_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct U_boolList_ {
        pub head: ::std::os::raw::c_ulong,
        pub tail: U_boolList,
    }
    #[test]
    fn bindgen_test_layout_U_boolList_() {
        assert_eq!(
            ::std::mem::size_of::<U_boolList_>(),
            16usize,
            concat!("Size of: ", stringify!(U_boolList_))
        );
        assert_eq!(
            ::std::mem::align_of::<U_boolList_>(),
            8usize,
            concat!("Alignment of ", stringify!(U_boolList_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<U_boolList_>())).head as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(U_boolList_),
                "::",
                stringify!(head)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<U_boolList_>())).tail as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(U_boolList_),
                "::",
                stringify!(tail)
            )
        );
    }
    impl Default for U_boolList_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn checked_malloc(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn cc_str(arg1: *mut ::std::os::raw::c_char) -> c_str;
    }
    extern "C" {
        pub fn U_BoolList(head: ::std::os::raw::c_ulong, tail: U_boolList) -> U_boolList;
    }
    pub type va_list = __gnuc_va_list;
    extern "C" {
        pub static mut EM_anyErrors: ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub static mut EM_tokPos: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut EM_lineNum: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut EM_extLineNum: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn EM_newline();
    }
    extern "C" {
        pub fn ck_fprintf_stdout(format: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        pub fn ck_fprintf_stderr(format: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        pub fn ck_fflush_stdout();
    }
    extern "C" {
        pub fn ck_fflush_stderr();
    }
    extern "C" {
        pub fn ck_vfprintf_stdout(format: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
    }
    extern "C" {
        pub fn ck_vfprintf_stderr(format: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
    }
    extern "C" {
        pub fn ck_set_stdout_callback(
            callback: ::std::option::Option<
                unsafe extern "C" fn(callback: *const ::std::os::raw::c_char),
            >,
        );
    }
    extern "C" {
        pub fn ck_set_stderr_callback(
            callback: ::std::option::Option<
                unsafe extern "C" fn(callback: *const ::std::os::raw::c_char),
            >,
        );
    }
    extern "C" {
        pub fn EM_log(arg1: ::std::os::raw::c_long, arg2: c_constr, ...);
    }
    extern "C" {
        pub fn EM_setlog(arg1: ::std::os::raw::c_long);
    }
    extern "C" {
        pub fn EM_pushlog();
    }
    extern "C" {
        pub fn EM_poplog();
    }
    extern "C" {
        pub static mut g_loglevel: ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn EM_error(arg1: ::std::os::raw::c_int, arg2: c_constr, ...);
    }
    extern "C" {
        pub fn EM_error2(arg1: ::std::os::raw::c_int, arg2: c_constr, ...);
    }
    extern "C" {
        pub fn EM_error2b(arg1: ::std::os::raw::c_int, arg2: c_constr, ...);
    }
    extern "C" {
        pub fn EM_error3(arg1: c_constr, ...);
    }
    extern "C" {
        pub fn EM_impossible(arg1: c_constr, ...);
    }
    extern "C" {
        pub fn EM_reset(filename: c_constr, fd: *mut FILE) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn EM_change_file(filename: c_constr);
    }
    extern "C" {
        pub fn EM_lasterror() -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn EM_reset_msg();
    }
    extern "C" {
        pub fn mini(str: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mini_type(str: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct S_Symbol_ {
        _unused: [u8; 0],
    }
    pub type S_Symbol = *mut S_Symbol_;
    extern "C" {
        pub fn insert_symbol(arg1: c_constr) -> S_Symbol;
    }
    extern "C" {
        pub fn S_name(arg1: S_Symbol) -> c_str;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TAB_table_ {
        _unused: [u8; 0],
    }
    pub type S_table = *mut TAB_table_;
    extern "C" {
        pub fn S_empty() -> S_table;
    }
    extern "C" {
        pub fn S_empty2(size: ::std::os::raw::c_uint) -> S_table;
    }
    extern "C" {
        pub fn S_enter(t: S_table, sym: S_Symbol, value: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn S_enter2(t: S_table, str: c_constr, value: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn S_look(t: S_table, sym: S_Symbol) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn S_look2(t: S_table, str: c_constr) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn S_beginScope(t: S_table);
    }
    extern "C" {
        pub fn S_endScope(t: S_table);
    }
    extern "C" {
        pub fn S_pop(t: S_table);
    }
    pub type a_Pos = ::std::os::raw::c_int;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Operator {
        ae_op_plus = 0,
        ae_op_minus = 1,
        ae_op_times = 2,
        ae_op_divide = 3,
        ae_op_eq = 4,
        ae_op_neq = 5,
        ae_op_lt = 6,
        ae_op_le = 7,
        ae_op_gt = 8,
        ae_op_ge = 9,
        ae_op_and = 10,
        ae_op_or = 11,
        ae_op_s_or = 12,
        ae_op_s_and = 13,
        ae_op_shift_left = 14,
        ae_op_shift_right = 15,
        ae_op_percent = 16,
        ae_op_s_xor = 17,
        ae_op_chuck = 18,
        ae_op_plus_chuck = 19,
        ae_op_minus_chuck = 20,
        ae_op_times_chuck = 21,
        ae_op_divide_chuck = 22,
        ae_op_s_and_chuck = 23,
        ae_op_s_or_chuck = 24,
        ae_op_s_xor_chuck = 25,
        ae_op_shift_right_chuck = 26,
        ae_op_shift_left_chuck = 27,
        ae_op_percent_chuck = 28,
        ae_op_s_chuck = 29,
        ae_op_plusplus = 30,
        ae_op_minusminus = 31,
        ae_op_tilda = 32,
        ae_op_exclamation = 33,
        ae_op_at_chuck = 34,
        ae_op_unchuck = 35,
        ae_op_upchuck = 36,
        ae_op_spork = 37,
        ae_op_typeof = 38,
        ae_op_sizeof = 39,
        ae_op_new = 40,
        ae_op_arrow_left = 41,
        ae_op_arrow_right = 42,
    }
    extern "C" {
        pub fn op2str(op: ae_Operator) -> *const ::std::os::raw::c_char;
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Keyword {
        ae_key_this = 0,
        ae_key_me = 1,
        ae_key_func = 2,
        ae_key_public = 3,
        ae_key_protected = 4,
        ae_key_private = 5,
        ae_key_static = 6,
        ae_key_instance = 7,
        ae_key_abstract = 8,
    }
    pub type a_Program = *mut a_Program_;
    pub type a_Section = *mut a_Section_;
    pub type a_Stmt_List = *mut a_Stmt_List_;
    pub type a_Class_Def = *mut a_Class_Def_;
    pub type a_Func_Def = *mut a_Func_Def_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Code_Segment_ {
        _unused: [u8; 0],
    }
    pub type a_Code_Segment = *mut a_Code_Segment_;
    pub type a_Stmt = *mut a_Stmt_;
    pub type a_Exp = *mut a_Exp_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Exp_Chuck_ {
        _unused: [u8; 0],
    }
    pub type a_Exp_Chuck = *mut a_Exp_Chuck_;
    pub type a_Exp_Binary = *mut a_Exp_Binary_;
    pub type a_Exp_Cast = *mut a_Exp_Cast_;
    pub type a_Exp_Unary = *mut a_Exp_Unary_;
    pub type a_Exp_Postfix = *mut a_Exp_Postfix_;
    pub type a_Exp_Primary = *mut a_Exp_Primary_;
    pub type a_Exp_Dur = *mut a_Exp_Dur_;
    pub type a_Exp_Array = *mut a_Exp_Array_;
    pub type a_Exp_Func_Call = *mut a_Exp_Func_Call_;
    pub type a_Exp_Dot_Member = *mut a_Exp_Dot_Member_;
    pub type a_Exp_If = *mut a_Exp_If_;
    pub type a_Exp_Decl = *mut a_Exp_Decl_;
    pub type a_Exp_Hack = *mut a_Exp_Hack_;
    pub type a_Stmt_Code = *mut a_Stmt_Code_;
    pub type a_Stmt_If = *mut a_Stmt_If_;
    pub type a_Stmt_While = *mut a_Stmt_While_;
    pub type a_Stmt_Until = *mut a_Stmt_Until_;
    pub type a_Stmt_For = *mut a_Stmt_For_;
    pub type a_Stmt_Loop = *mut a_Stmt_Loop_;
    pub type a_Stmt_Switch = *mut a_Stmt_Switch_;
    pub type a_Stmt_Break = *mut a_Stmt_Break_;
    pub type a_Stmt_Continue = *mut a_Stmt_Continue_;
    pub type a_Stmt_Return = *mut a_Stmt_Return_;
    pub type a_Stmt_Case = *mut a_Stmt_Case_;
    pub type a_Stmt_GotoLabel = *mut a_Stmt_GotoLabel_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Decl_ {
        _unused: [u8; 0],
    }
    pub type a_Decl = *mut a_Decl_;
    pub type a_Var_Decl = *mut a_Var_Decl_;
    pub type a_Var_Decl_List = *mut a_Var_Decl_List_;
    pub type a_Type_Decl = *mut a_Type_Decl_;
    pub type a_Arg_List = *mut a_Arg_List_;
    pub type a_Id_List = *mut a_Id_List_;
    pub type a_Class_Ext = *mut a_Class_Ext_;
    pub type a_Class_Body = *mut a_Class_Body_;
    pub type a_Array_Sub = *mut a_Array_Sub_;
    pub type a_Complex = *mut a_Complex_;
    pub type a_Polar = *mut a_Polar_;
    pub type a_Vec = *mut a_Vec_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Type {
        _unused: [u8; 0],
    }
    pub type t_CKTYPE = *mut Chuck_Type;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Value {
        _unused: [u8; 0],
    }
    pub type t_CKVALUE = *mut Chuck_Value;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Func {
        _unused: [u8; 0],
    }
    pub type t_CKFUNC = *mut Chuck_Func;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Namespace {
        _unused: [u8; 0],
    }
    pub type t_CKNSPC = *mut Chuck_Namespace;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM_Code {
        _unused: [u8; 0],
    }
    pub type t_CKVMCODE = *mut Chuck_VM_Code;
    extern "C" {
        pub fn new_program(section: a_Section, pos: ::std::os::raw::c_int) -> a_Program;
    }
    extern "C" {
        pub fn prepend_program(
            section: a_Section,
            program: a_Program,
            pos: ::std::os::raw::c_int,
        ) -> a_Program;
    }
    extern "C" {
        pub fn new_section_stmt(stmt_list: a_Stmt_List, pos: ::std::os::raw::c_int) -> a_Section;
    }
    extern "C" {
        pub fn new_section_func_def(func_def: a_Func_Def, pos: ::std::os::raw::c_int) -> a_Section;
    }
    extern "C" {
        pub fn new_section_class_def(
            class_def: a_Class_Def,
            pos: ::std::os::raw::c_int,
        ) -> a_Section;
    }
    extern "C" {
        pub fn new_stmt_list(stmt: a_Stmt, pos: ::std::os::raw::c_int) -> a_Stmt_List;
    }
    extern "C" {
        pub fn prepend_stmt_list(
            stmt: a_Stmt,
            stmt_list: a_Stmt_List,
            pos: ::std::os::raw::c_int,
        ) -> a_Stmt_List;
    }
    extern "C" {
        pub fn new_stmt_from_expression(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_code(code: a_Stmt_List, pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_while(cond: a_Exp, body: a_Stmt, pos: ::std::os::raw::c_int)
            -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_do_while(
            cond: a_Exp,
            body: a_Stmt,
            pos: ::std::os::raw::c_int,
        ) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_until(cond: a_Exp, body: a_Stmt, pos: ::std::os::raw::c_int)
            -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_do_until(
            cond: a_Exp,
            body: a_Stmt,
            pos: ::std::os::raw::c_int,
        ) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_for(
            c1: a_Stmt,
            c2: a_Stmt,
            c3: a_Exp,
            body: a_Stmt,
            pos: ::std::os::raw::c_int,
        ) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_loop(cond: a_Exp, body: a_Stmt, pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_if(
            cond: a_Exp,
            if_body: a_Stmt,
            else_body: a_Stmt,
            pos: ::std::os::raw::c_int,
        ) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_switch(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_break(pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_continue(pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_return(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_label(xid: c_str, pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_case(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Stmt;
    }
    extern "C" {
        pub fn prepend_expression(exp: a_Exp, list: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_binary(
            lhs: a_Exp,
            oper: ae_Operator,
            rhs: a_Exp,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary(
            oper: ae_Operator,
            exp: a_Exp,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary2(
            oper: ae_Operator,
            type_: a_Type_Decl,
            array: a_Array_Sub,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary3(
            oper: ae_Operator,
            code: a_Stmt,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_cast(
            type_: a_Type_Decl,
            exp: a_Exp,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_array(
            base: a_Exp,
            indices: a_Array_Sub,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_array_lit(exp_list: a_Array_Sub, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_func_call(
            base: a_Exp,
            args: a_Exp,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_member_dot(
            base: a_Exp,
            member: c_str,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_postfix(
            base: a_Exp,
            op: ae_Operator,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_dur(base: a_Exp, unit: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_id(xid: c_str, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_int(num: ::std::os::raw::c_long, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_uint(num: ::std::os::raw::c_ulong, pos: ::std::os::raw::c_int)
            -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_float(num: f64, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_str(str: c_str, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_char(chr: c_str, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_if(
            cond: a_Exp,
            lhs: a_Exp,
            rhs: a_Exp,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_complex(arg1: a_Complex, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_polar(arg1: a_Polar, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_vec(arg1: a_Vec, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl_external(
            type_decl: a_Type_Decl,
            var_decl_list: a_Var_Decl_List,
            is_static: ::std::os::raw::c_int,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl_global(
            type_decl: a_Type_Decl,
            var_decl_list: a_Var_Decl_List,
            is_static: ::std::os::raw::c_int,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl(
            type_decl: a_Type_Decl,
            var_decl_list: a_Var_Decl_List,
            is_static: ::std::os::raw::c_int,
            pos: ::std::os::raw::c_int,
        ) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_hack(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_nil(pos: ::std::os::raw::c_int) -> a_Exp;
    }
    extern "C" {
        pub fn new_var_decl_list(
            var_decl: a_Var_Decl,
            pos: ::std::os::raw::c_int,
        ) -> a_Var_Decl_List;
    }
    extern "C" {
        pub fn prepend_var_decl_list(
            var_decl: a_Var_Decl,
            list: a_Var_Decl_List,
            pos: ::std::os::raw::c_int,
        ) -> a_Var_Decl_List;
    }
    extern "C" {
        pub fn new_var_decl(
            xid: c_constr,
            array: a_Array_Sub,
            pos: ::std::os::raw::c_int,
        ) -> a_Var_Decl;
    }
    extern "C" {
        pub fn new_type_decl(
            xid: a_Id_List,
            ref_: ::std::os::raw::c_int,
            pos: ::std::os::raw::c_int,
        ) -> a_Type_Decl;
    }
    extern "C" {
        pub fn add_type_decl_array(
            type_decl: a_Type_Decl,
            array: a_Array_Sub,
            pos: ::std::os::raw::c_int,
        ) -> a_Type_Decl;
    }
    extern "C" {
        pub fn new_arg_list(
            type_decl: a_Type_Decl,
            var_decl: a_Var_Decl,
            pos: ::std::os::raw::c_int,
        ) -> a_Arg_List;
    }
    extern "C" {
        pub fn prepend_arg_list(
            type_decl: a_Type_Decl,
            var_decl: a_Var_Decl,
            arg_list: a_Arg_List,
            pos: ::std::os::raw::c_int,
        ) -> a_Arg_List;
    }
    extern "C" {
        pub fn new_array_sub(exp: a_Exp, pos: ::std::os::raw::c_int) -> a_Array_Sub;
    }
    extern "C" {
        pub fn prepend_array_sub(
            array: a_Array_Sub,
            exp: a_Exp,
            pos: ::std::os::raw::c_int,
        ) -> a_Array_Sub;
    }
    extern "C" {
        pub fn new_complex(re: a_Exp, pos: ::std::os::raw::c_int) -> a_Complex;
    }
    extern "C" {
        pub fn new_polar(mod_: a_Exp, pos: ::std::os::raw::c_int) -> a_Polar;
    }
    extern "C" {
        pub fn new_vec(e: a_Exp, pos: ::std::os::raw::c_int) -> a_Vec;
    }
    extern "C" {
        pub fn new_class_def(
            class_decl: ae_Keyword,
            xid: a_Id_List,
            ext: a_Class_Ext,
            body: a_Class_Body,
            pos: ::std::os::raw::c_int,
        ) -> a_Class_Def;
    }
    extern "C" {
        pub fn new_class_body(section: a_Section, pos: ::std::os::raw::c_int) -> a_Class_Body;
    }
    extern "C" {
        pub fn prepend_class_body(
            section: a_Section,
            body: a_Class_Body,
            pos: ::std::os::raw::c_int,
        ) -> a_Class_Body;
    }
    extern "C" {
        pub fn new_class_ext(
            extend_id: a_Id_List,
            impl_list: a_Id_List,
            pos: ::std::os::raw::c_int,
        ) -> a_Class_Ext;
    }
    extern "C" {
        pub fn new_iface_def(
            class_decl: ae_Keyword,
            xid: a_Id_List,
            ext: a_Class_Ext,
            body: a_Class_Body,
            pos: ::std::os::raw::c_int,
        ) -> a_Class_Def;
    }
    extern "C" {
        pub fn new_id_list(xid: c_constr, pos: ::std::os::raw::c_int) -> a_Id_List;
    }
    extern "C" {
        pub fn prepend_id_list(
            xid: c_constr,
            list: a_Id_List,
            pos: ::std::os::raw::c_int,
        ) -> a_Id_List;
    }
    extern "C" {
        pub fn clean_exp(exp: a_Exp);
    }
    extern "C" {
        pub fn new_func_def(
            func_decl: ae_Keyword,
            static_decl: ae_Keyword,
            type_decl: a_Type_Decl,
            name: c_str,
            arg_list: a_Arg_List,
            code: a_Stmt,
            pos: ::std::os::raw::c_int,
        ) -> a_Func_Def;
    }
    extern "C" {
        pub fn delete_id_list(x: a_Id_List);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Binary_ {
        pub lhs: a_Exp,
        pub op: ae_Operator,
        pub rhs: a_Exp,
        pub ck_func: t_CKFUNC,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Binary_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Binary_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Exp_Binary_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Binary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Binary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).lhs as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(lhs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).op as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).rhs as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(rhs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).ck_func as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Binary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Cast_ {
        pub type_: a_Type_Decl,
        pub exp: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Cast_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Cast_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Cast_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Cast_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Cast_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Cast_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Unary_ {
        pub op: ae_Operator,
        pub exp: a_Exp,
        pub type_: a_Type_Decl,
        pub array: a_Array_Sub,
        pub code: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Unary_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Unary_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Unary_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Unary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Unary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).op as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).type_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).array as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).code as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Unary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Postfix_ {
        pub exp: a_Exp,
        pub op: ae_Operator,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Postfix_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Postfix_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Exp_Postfix_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Postfix_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Postfix_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).op as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).linepos as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Postfix_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Dur_ {
        pub base: a_Exp,
        pub unit: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Dur_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Dur_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Dur_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Dur_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Dur_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).unit as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(unit)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Dur_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Array_ {
        pub base: a_Exp,
        pub indices: a_Array_Sub,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Array_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Array_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Array_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Array_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Array_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).indices as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(indices)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Array_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Func_Call_ {
        pub func: a_Exp,
        pub args: a_Exp,
        pub ret_type: t_CKTYPE,
        pub ck_func: t_CKFUNC,
        pub ck_vm_code: t_CKVMCODE,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Func_Call_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Func_Call_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Func_Call_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Func_Call_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Func_Call_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).func as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).args as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ret_type as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ret_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_func as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_vm_code as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ck_vm_code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Func_Call_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Dot_Member_ {
        pub base: a_Exp,
        pub t_base: t_CKTYPE,
        pub xid: S_Symbol,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Dot_Member_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Dot_Member_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_Dot_Member_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Dot_Member_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Dot_Member_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).t_base as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(t_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).xid as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Dot_Member_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_If_ {
        pub cond: a_Exp,
        pub if_exp: a_Exp,
        pub else_exp: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_If_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_If_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_If_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_If_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_If_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).if_exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(if_exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).else_exp as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(else_exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_If_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Decl_ {
        pub type_: a_Type_Decl,
        pub var_decl_list: a_Var_Decl_List,
        pub num_var_decls: ::std::os::raw::c_int,
        pub is_static: ::std::os::raw::c_int,
        pub is_global: ::std::os::raw::c_int,
        pub ck_type: t_CKTYPE,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Decl_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Decl_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Decl_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).var_decl_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(var_decl_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).num_var_decls as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(num_var_decls)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_static as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(is_static)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_global as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(is_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).ck_type as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(ck_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Hack_ {
        pub exp: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Hack_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Hack_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Exp_Hack_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Hack_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Hack_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Hack_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Var_Decl_List_ {
        pub var_decl: a_Var_Decl,
        pub next: a_Var_Decl_List,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Var_Decl_List_() {
        assert_eq!(
            ::std::mem::size_of::<a_Var_Decl_List_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Var_Decl_List_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Var_Decl_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Var_Decl_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).var_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Var_Decl_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Var_Decl_ {
        pub xid: S_Symbol,
        pub var_decl: a_Var_Decl,
        pub array: a_Array_Sub,
        pub value: t_CKVALUE,
        pub addr: *mut ::std::os::raw::c_void,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Var_Decl_() {
        assert_eq!(
            ::std::mem::size_of::<a_Var_Decl_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Var_Decl_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Var_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Var_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).var_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).array as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).value as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).addr as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Var_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Type_Decl_ {
        pub xid: a_Id_List,
        pub array: a_Array_Sub,
        pub ref_: ::std::os::raw::c_int,
        pub linepos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Type_Decl_() {
        assert_eq!(
            ::std::mem::size_of::<a_Type_Decl_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Type_Decl_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Type_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Type_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).array as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).ref_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(ref_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).linepos as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Type_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Array_Sub_ {
        pub depth: ::std::os::raw::c_ulong,
        pub exp_list: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
        pub err_num: ::std::os::raw::c_int,
        pub err_pos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Array_Sub_() {
        assert_eq!(
            ::std::mem::size_of::<a_Array_Sub_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Array_Sub_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Array_Sub_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Array_Sub_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).depth as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).exp_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(exp_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(self_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_num as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(err_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_pos as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(err_pos)
            )
        );
    }
    impl Default for a_Array_Sub_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Arg_List_ {
        pub type_decl: a_Type_Decl,
        pub var_decl: a_Var_Decl,
        pub type_: t_CKTYPE,
        pub next: a_Arg_List,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Arg_List_() {
        assert_eq!(
            ::std::mem::size_of::<a_Arg_List_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Arg_List_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Arg_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Arg_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(type_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).var_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).next as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Arg_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Complex_ {
        pub re: a_Exp,
        pub im: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Complex_() {
        assert_eq!(
            ::std::mem::size_of::<a_Complex_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Complex_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Complex_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Complex_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(im)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Complex_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Polar_ {
        pub mod_: a_Exp,
        pub phase: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Polar_() {
        assert_eq!(
            ::std::mem::size_of::<a_Polar_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Polar_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Polar_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Polar_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).mod_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(mod_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(phase)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Polar_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Vec_ {
        pub args: a_Exp,
        pub numdims: ::std::os::raw::c_int,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Vec_() {
        assert_eq!(
            ::std::mem::size_of::<a_Vec_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Vec_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Vec_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Vec_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).args as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).numdims as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(numdims)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).linepos as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Vec_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Primary_Type {
        ae_primary_var = 0,
        ae_primary_num = 1,
        ae_primary_float = 2,
        ae_primary_str = 3,
        ae_primary_array = 4,
        ae_primary_exp = 5,
        ae_primary_hack = 6,
        ae_primary_complex = 7,
        ae_primary_polar = 8,
        ae_primary_vec = 9,
        ae_primary_char = 10,
        ae_primary_nil = 11,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Exp_Primary_ {
        pub s_type: ae_Exp_Primary_Type,
        pub value: t_CKVALUE,
        pub __bindgen_anon_1: a_Exp_Primary___bindgen_ty_1,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Exp_Primary___bindgen_ty_1 {
        pub var: S_Symbol,
        pub num: ::std::os::raw::c_long,
        pub fnum: f64,
        pub str: c_str,
        pub chr: c_str,
        pub array: a_Array_Sub,
        pub exp: a_Exp,
        pub complex: a_Complex,
        pub polar: a_Polar,
        pub vec: a_Vec,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Primary___bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Primary___bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(a_Exp_Primary___bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Primary___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Primary___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).var as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(var)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).num as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(num)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).fnum as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(fnum)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).str as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(str)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).chr as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(chr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).array as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).exp as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).complex as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(complex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).polar as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(polar)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).vec as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(vec)
            )
        );
    }
    impl Default for a_Exp_Primary___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_Primary___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Exp_Primary___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Primary_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Primary_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_Primary_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Primary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Primary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).value as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Primary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_Primary_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "a_Exp_Primary_ {{ s_type: {:?}, value: {:?}, __bindgen_anon_1: {:?}, linepos: {:?}, self: {:?} }}" , self . s_type , self . value , self . __bindgen_anon_1 , self . linepos , self . self_ )
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Type {
        ae_exp_binary = 0,
        ae_exp_unary = 1,
        ae_exp_cast = 2,
        ae_exp_postfix = 3,
        ae_exp_dur = 4,
        ae_exp_primary = 5,
        ae_exp_array = 6,
        ae_exp_func_call = 7,
        ae_exp_dot_member = 8,
        ae_exp_if = 9,
        ae_exp_decl = 10,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Meta {
        ae_meta_value = 0,
        ae_meta_var = 1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Exp_ {
        pub s_type: ae_Exp_Type,
        pub s_meta: ae_Exp_Meta,
        pub type_: t_CKTYPE,
        pub owner: t_CKNSPC,
        pub next: a_Exp,
        pub group_size: ::std::os::raw::c_ulong,
        pub cast_to: t_CKTYPE,
        pub emit_var: ::std::os::raw::c_ulong,
        pub __bindgen_anon_1: a_Exp___bindgen_ty_1,
        pub linepos: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Exp___bindgen_ty_1 {
        pub binary: a_Exp_Binary_,
        pub unary: a_Exp_Unary_,
        pub cast: a_Exp_Cast_,
        pub postfix: a_Exp_Postfix_,
        pub dur: a_Exp_Dur_,
        pub primary: a_Exp_Primary_,
        pub array: a_Exp_Array_,
        pub func_call: a_Exp_Func_Call_,
        pub dot_member: a_Exp_Dot_Member_,
        pub exp_if: a_Exp_If_,
        pub decl: a_Exp_Decl_,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_a_Exp___bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp___bindgen_ty_1>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp___bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp___bindgen_ty_1))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).binary as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(binary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).unary as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(unary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).cast as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(cast)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).postfix as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(postfix)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dur as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(dur)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).primary as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(primary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).array as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).func_call as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(func_call)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dot_member as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(dot_member)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).exp_if as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(exp_if)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(decl)
            )
        );
    }
    impl Default for a_Exp___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Exp___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Exp_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_>(),
            120usize,
            concat!("Size of: ", stringify!(a_Exp_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_meta as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(s_meta)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).type_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).owner as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).next as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).group_size as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(group_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).cast_to as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(cast_to)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).emit_var as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(emit_var)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).linepos as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Exp_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "a_Exp_ {{ s_type: {:?}, s_meta: {:?}, type: {:?}, owner: {:?}, next: {:?}, group_size: {:?}, cast_to: {:?}, emit_var: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}" , self . s_type , self . s_meta , self . type_ , self . owner , self . next , self . group_size , self . cast_to , self . emit_var , self . __bindgen_anon_1 , self . linepos )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_While_ {
        pub is_do: ::std::os::raw::c_int,
        pub cond: a_Exp,
        pub body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_While_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_While_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_While_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_While_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_While_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).is_do as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(is_do)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).cond as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_While_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Until_ {
        pub is_do: ::std::os::raw::c_int,
        pub cond: a_Exp,
        pub body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Until_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Until_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_Until_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Until_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Until_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).is_do as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(is_do)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).cond as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Until_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_For_ {
        pub c1: a_Stmt,
        pub c2: a_Stmt,
        pub c3: a_Exp,
        pub body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_For_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_For_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Stmt_For_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_For_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_For_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c1 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c2 as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c3 as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).body as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_For_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Loop_ {
        pub cond: a_Exp,
        pub body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Loop_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Loop_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Stmt_Loop_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Loop_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Loop_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).body as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Loop_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Code_ {
        pub stmt_list: a_Stmt_List,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Code_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Code_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Code_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Code_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Code_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).stmt_list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(stmt_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Code_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_If_ {
        pub cond: a_Exp,
        pub if_body: a_Stmt,
        pub else_body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_If_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_If_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_If_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_If_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_If_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).if_body as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(if_body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).else_body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(else_body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_If_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Switch_ {
        pub val: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Switch_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Switch_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Switch_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Switch_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Switch_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(val)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Switch_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Break_ {
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Break_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Break_>(),
            16usize,
            concat!("Size of: ", stringify!(a_Stmt_Break_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Break_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Break_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).linepos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Break_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).self_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Break_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Break_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Continue_ {
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Continue_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Continue_>(),
            16usize,
            concat!("Size of: ", stringify!(a_Stmt_Continue_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Continue_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Continue_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).linepos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Continue_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).self_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Continue_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Continue_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Return_ {
        pub val: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Return_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Return_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Return_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Return_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Return_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(val)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Return_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Case_ {
        pub exp: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Case_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Case_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Case_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Case_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Case_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Case_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_GotoLabel_ {
        pub name: S_Symbol,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_GotoLabel_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_GotoLabel_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_GotoLabel_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_GotoLabel_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_GotoLabel_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_GotoLabel_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Stmt_Type {
        ae_stmt_exp = 0,
        ae_stmt_while = 1,
        ae_stmt_until = 2,
        ae_stmt_for = 3,
        ae_stmt_loop = 4,
        ae_stmt_if = 5,
        ae_stmt_code = 6,
        ae_stmt_switch = 7,
        ae_stmt_break = 8,
        ae_stmt_continue = 9,
        ae_stmt_return = 10,
        ae_stmt_case = 11,
        ae_stmt_gotolabel = 12,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Stmt_ {
        pub s_type: ae_Stmt_Type,
        pub skip: ::std::os::raw::c_int,
        pub __bindgen_anon_1: a_Stmt___bindgen_ty_1,
        pub linepos: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Stmt___bindgen_ty_1 {
        pub stmt_exp: a_Exp,
        pub stmt_code: a_Stmt_Code_,
        pub stmt_while: a_Stmt_While_,
        pub stmt_until: a_Stmt_Until_,
        pub stmt_loop: a_Stmt_Loop_,
        pub stmt_for: a_Stmt_For_,
        pub stmt_if: a_Stmt_If_,
        pub stmt_switch: a_Stmt_Switch_,
        pub stmt_break: a_Stmt_Break_,
        pub stmt_continue: a_Stmt_Continue_,
        pub stmt_return: a_Stmt_Return_,
        pub stmt_case: a_Stmt_Case_,
        pub stmt_gotolabel: a_Stmt_GotoLabel_,
        _bindgen_union_align: [u64; 6usize],
    }
    #[test]
    fn bindgen_test_layout_a_Stmt___bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt___bindgen_ty_1>(),
            48usize,
            concat!("Size of: ", stringify!(a_Stmt___bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_exp as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_exp)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_code as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_code)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_while as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_while)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_until as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_until)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_loop as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_loop)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_for as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_for)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_if as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_if)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_switch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_switch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_break as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_break)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_continue as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_continue)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_return as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_return)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_case as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_case)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_gotolabel as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_gotolabel)
            )
        );
    }
    impl Default for a_Stmt___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Stmt___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Stmt___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_>(),
            64usize,
            concat!("Size of: ", stringify!(a_Stmt_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).skip as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(skip)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).linepos as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Stmt_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Stmt_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "a_Stmt_ {{ s_type: {:?}, skip: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
                self.s_type, self.skip, self.__bindgen_anon_1, self.linepos
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_List_ {
        pub stmt: a_Stmt,
        pub next: a_Stmt_List,
        pub linepos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_List_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_List_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_List_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).stmt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(stmt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Stmt_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Def_ {
        pub decl: ae_Keyword,
        pub name: a_Id_List,
        pub ext: a_Class_Ext,
        pub body: a_Class_Body,
        pub type_: t_CKTYPE,
        pub iface: ::std::os::raw::c_int,
        pub home: t_CKNSPC,
        pub linepos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Def_() {
        assert_eq!(
            ::std::mem::size_of::<a_Class_Def_>(),
            64usize,
            concat!("Size of: ", stringify!(a_Class_Def_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Class_Def_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Def_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).name as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).ext as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(ext)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).body as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).iface as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(iface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).home as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(home)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).linepos as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Def_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Ext_ {
        pub extend_id: a_Id_List,
        pub impl_list: a_Id_List,
        pub linepos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Ext_() {
        assert_eq!(
            ::std::mem::size_of::<a_Class_Ext_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Class_Ext_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Class_Ext_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Ext_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).extend_id as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(extend_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).impl_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(impl_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Ext_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Body_ {
        pub section: a_Section,
        pub next: a_Class_Body,
        pub linepos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Body_() {
        assert_eq!(
            ::std::mem::size_of::<a_Class_Body_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Class_Body_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Class_Body_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Body_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).section as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(section)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Body_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Id_List_ {
        pub xid: S_Symbol,
        pub next: a_Id_List,
        pub linepos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Id_List_() {
        assert_eq!(
            ::std::mem::size_of::<a_Id_List_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Id_List_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Id_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Id_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Id_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Func_Type {
        ae_func_user = 0,
        ae_func_builtin = 1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Func_Def_ {
        pub func_decl: ae_Keyword,
        pub static_decl: ae_Keyword,
        pub type_decl: a_Type_Decl,
        pub ret_type: t_CKTYPE,
        pub name: S_Symbol,
        pub arg_list: a_Arg_List,
        pub code: a_Stmt,
        pub ck_func: t_CKFUNC,
        pub global: ::std::os::raw::c_uint,
        pub s_type: ::std::os::raw::c_uint,
        pub stack_depth: ::std::os::raw::c_uint,
        pub dl_func_ptr: *mut ::std::os::raw::c_void,
        pub linepos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Func_Def_() {
        assert_eq!(
            ::std::mem::size_of::<a_Func_Def_>(),
            88usize,
            concat!("Size of: ", stringify!(a_Func_Def_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Func_Def_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Func_Def_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).func_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(func_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).static_decl as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(static_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).type_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(type_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ret_type as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(ret_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).name as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).arg_list as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(arg_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).code as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ck_func as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).global as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).s_type as *const _ as usize },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).stack_depth as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(stack_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).dl_func_ptr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(dl_func_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).linepos as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Func_Def_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Section_Type {
        ae_section_stmt = 0,
        ae_section_func = 1,
        ae_section_class = 2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Section_ {
        pub s_type: ae_Section_Type,
        pub __bindgen_anon_1: a_Section___bindgen_ty_1,
        pub linepos: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Section___bindgen_ty_1 {
        pub stmt_list: a_Stmt_List,
        pub class_def: a_Class_Def,
        pub func_def: a_Func_Def,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_a_Section___bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<a_Section___bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(a_Section___bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Section___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Section___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).stmt_list as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(stmt_list)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).class_def as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(class_def)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).func_def as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(func_def)
            )
        );
    }
    impl Default for a_Section___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Section___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Section___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Section_() {
        assert_eq!(
            ::std::mem::size_of::<a_Section_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Section_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Section_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Section_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Section_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Section_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Section_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Section_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "a_Section_ {{ s_type: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
                self.s_type, self.__bindgen_anon_1, self.linepos
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Program_ {
        pub section: a_Section,
        pub next: a_Program,
        pub linepos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Program_() {
        assert_eq!(
            ::std::mem::size_of::<a_Program_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Program_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Program_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Program_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).section as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(section)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Program_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn yylex() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn yyerror(s: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub static mut g_program: a_Program;
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum yytokentype {
        ID = 258,
        STRING_LIT = 259,
        CHAR_LIT = 260,
        NUM = 261,
        FLOAT = 262,
        POUND = 263,
        COMMA = 264,
        COLON = 265,
        SEMICOLON = 266,
        LPAREN = 267,
        RPAREN = 268,
        LBRACK = 269,
        RBRACK = 270,
        LBRACE = 271,
        RBRACE = 272,
        DOT = 273,
        PLUS = 274,
        MINUS = 275,
        TIMES = 276,
        DIVIDE = 277,
        PERCENT = 278,
        EQ = 279,
        NEQ = 280,
        LT = 281,
        LE = 282,
        GT = 283,
        GE = 284,
        AND = 285,
        OR = 286,
        ASSIGN = 287,
        IF = 288,
        THEN = 289,
        ELSE = 290,
        WHILE = 291,
        FOR = 292,
        DO = 293,
        LOOP = 294,
        BREAK = 295,
        CONTINUE = 296,
        NULL_TOK = 297,
        FUNCTION = 298,
        RETURN = 299,
        QUESTION = 300,
        EXCLAMATION = 301,
        S_OR = 302,
        S_AND = 303,
        S_XOR = 304,
        PLUSPLUS = 305,
        MINUSMINUS = 306,
        DOLLAR = 307,
        POUNDPAREN = 308,
        PERCENTPAREN = 309,
        ATPAREN = 310,
        SIMULT = 311,
        PATTERN = 312,
        CODE = 313,
        TRANSPORT = 314,
        HOST = 315,
        TIME = 316,
        WHENEVER = 317,
        NEXT = 318,
        UNTIL = 319,
        EXTERNAL = 320,
        GLOBAL = 321,
        EVERY = 322,
        BEFORE = 323,
        AFTER = 324,
        AT = 325,
        AT_SYM = 326,
        ATAT_SYM = 327,
        NEW = 328,
        SIZEOF = 329,
        TYPEOF = 330,
        SAME = 331,
        PLUS_CHUCK = 332,
        MINUS_CHUCK = 333,
        TIMES_CHUCK = 334,
        DIVIDE_CHUCK = 335,
        S_AND_CHUCK = 336,
        S_OR_CHUCK = 337,
        S_XOR_CHUCK = 338,
        SHIFT_RIGHT_CHUCK = 339,
        SHIFT_LEFT_CHUCK = 340,
        PERCENT_CHUCK = 341,
        SHIFT_RIGHT = 342,
        SHIFT_LEFT = 343,
        TILDA = 344,
        CHUCK = 345,
        COLONCOLON = 346,
        S_CHUCK = 347,
        AT_CHUCK = 348,
        LEFT_S_CHUCK = 349,
        UNCHUCK = 350,
        UPCHUCK = 351,
        CLASS = 352,
        INTERFACE = 353,
        EXTENDS = 354,
        IMPLEMENTS = 355,
        PUBLIC = 356,
        PROTECTED = 357,
        PRIVATE = 358,
        STATIC = 359,
        ABSTRACT = 360,
        CONST = 361,
        SPORK = 362,
        ARROW_RIGHT = 363,
        ARROW_LEFT = 364,
        L_HACK = 365,
        R_HACK = 366,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union YYSTYPE {
        pub pos: ::std::os::raw::c_int,
        pub ival: ::std::os::raw::c_int,
        pub fval: f64,
        pub sval: c_str,
        pub program: a_Program,
        pub program_section: a_Section,
        pub stmt_list: a_Stmt_List,
        pub class_def: a_Class_Def,
        pub class_ext: a_Class_Ext,
        pub class_body: a_Class_Body,
        pub stmt: a_Stmt,
        pub exp: a_Exp,
        pub func_def: a_Func_Def,
        pub var_decl_list: a_Var_Decl_List,
        pub var_decl: a_Var_Decl,
        pub type_decl: a_Type_Decl,
        pub arg_list: a_Arg_List,
        pub id_list: a_Id_List,
        pub array_sub: a_Array_Sub,
        pub complex_exp: a_Complex,
        pub polar_exp: a_Polar,
        pub vec_exp: a_Vec,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_YYSTYPE() {
        assert_eq!(
            ::std::mem::size_of::<YYSTYPE>(),
            8usize,
            concat!("Size of: ", stringify!(YYSTYPE))
        );
        assert_eq!(
            ::std::mem::align_of::<YYSTYPE>(),
            8usize,
            concat!("Alignment of ", stringify!(YYSTYPE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).ival as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(ival)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).fval as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(fval)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).sval as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(sval)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).program as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(program)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).program_section as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(program_section)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).stmt_list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(stmt_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).class_def as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(class_def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).class_ext as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(class_ext)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).class_body as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(class_body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).stmt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(stmt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).func_def as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(func_def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).var_decl_list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(var_decl_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).var_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).type_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(type_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).arg_list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(arg_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).id_list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(id_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).array_sub as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(array_sub)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).complex_exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(complex_exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).polar_exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(polar_exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<YYSTYPE>())).vec_exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(YYSTYPE),
                "::",
                stringify!(vec_exp)
            )
        );
    }
    impl Default for YYSTYPE {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for YYSTYPE {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "YYSTYPE {{ union }}")
        }
    }
    extern "C" {
        pub static mut yylval: YYSTYPE;
    }
    extern "C" {
        pub fn yyparse() -> ::std::os::raw::c_int;
    }
    pub type yytype_uint8 = ::std::os::raw::c_uchar;
    pub type yytype_int8 = ::std::os::raw::c_schar;
    pub type yytype_uint16 = ::std::os::raw::c_ushort;
    pub type yytype_int16 = ::std::os::raw::c_short;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union yyalloc {
        pub yyss_alloc: yytype_int16,
        pub yyvs_alloc: YYSTYPE,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_yyalloc() {
        assert_eq!(
            ::std::mem::size_of::<yyalloc>(),
            8usize,
            concat!("Size of: ", stringify!(yyalloc))
        );
        assert_eq!(
            ::std::mem::align_of::<yyalloc>(),
            8usize,
            concat!("Alignment of ", stringify!(yyalloc))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<yyalloc>())).yyss_alloc as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(yyalloc),
                "::",
                stringify!(yyss_alloc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<yyalloc>())).yyvs_alloc as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(yyalloc),
                "::",
                stringify!(yyvs_alloc)
            )
        );
    }
    impl Default for yyalloc {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for yyalloc {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "yyalloc {{ union }}")
        }
    }
    extern "C" {
        pub static mut yytranslate: [yytype_uint8; 367usize];
    }
    extern "C" {
        pub static mut yypact: [yytype_int16; 319usize];
    }
    extern "C" {
        pub static mut yydefact: [yytype_uint8; 319usize];
    }
    extern "C" {
        pub static mut yypgoto: [yytype_int16; 58usize];
    }
    extern "C" {
        pub static mut yydefgoto: [yytype_int16; 58usize];
    }
    extern "C" {
        pub static mut yytable: [yytype_int16; 1182usize];
    }
    extern "C" {
        pub static mut yycheck: [yytype_int16; 1182usize];
    }
    extern "C" {
        pub static mut yystos: [yytype_uint8; 319usize];
    }
    extern "C" {
        pub static mut yyr1: [yytype_uint8; 185usize];
    }
    extern "C" {
        pub static mut yyr2: [yytype_uint8; 185usize];
    }
    extern "C" {
        pub static mut yychar: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut yynerrs: ::std::os::raw::c_int;
    }
    pub type __builtin_va_list = [__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            ::std::mem::size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    impl Default for __va_list_tag {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
}
