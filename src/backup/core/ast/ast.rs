/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    type c_str = *mut ::std::os::raw::c_char;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct S_Symbol_ {
        _unused: [u8; 0],
    }
    pub type S_Symbol = *mut S_Symbol_;
    pub type a_Pos = ::std::os::raw::c_int;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Operator {
        ae_op_plus = 0,
        ae_op_minus = 1,
        ae_op_times = 2,
        ae_op_divide = 3,
        ae_op_eq = 4,
        ae_op_neq = 5,
        ae_op_lt = 6,
        ae_op_le = 7,
        ae_op_gt = 8,
        ae_op_ge = 9,
        ae_op_and = 10,
        ae_op_or = 11,
        ae_op_s_or = 12,
        ae_op_s_and = 13,
        ae_op_shift_left = 14,
        ae_op_shift_right = 15,
        ae_op_percent = 16,
        ae_op_s_xor = 17,
        ae_op_chuck = 18,
        ae_op_plus_chuck = 19,
        ae_op_minus_chuck = 20,
        ae_op_times_chuck = 21,
        ae_op_divide_chuck = 22,
        ae_op_s_and_chuck = 23,
        ae_op_s_or_chuck = 24,
        ae_op_s_xor_chuck = 25,
        ae_op_shift_right_chuck = 26,
        ae_op_shift_left_chuck = 27,
        ae_op_percent_chuck = 28,
        ae_op_s_chuck = 29,
        ae_op_plusplus = 30,
        ae_op_minusminus = 31,
        ae_op_tilda = 32,
        ae_op_exclamation = 33,
        ae_op_at_chuck = 34,
        ae_op_unchuck = 35,
        ae_op_upchuck = 36,
        ae_op_spork = 37,
        ae_op_typeof = 38,
        ae_op_sizeof = 39,
        ae_op_new = 40,
        ae_op_arrow_left = 41,
        ae_op_arrow_right = 42,
    }
    extern "C" {
        pub fn op2str(op: ae_Operator) -> *const ::std::os::raw::c_char;
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Keyword {
        ae_key_this = 0,
        ae_key_me = 1,
        ae_key_func = 2,
        ae_key_public = 3,
        ae_key_protected = 4,
        ae_key_private = 5,
        ae_key_static = 6,
        ae_key_instance = 7,
        ae_key_abstract = 8,
    }
    pub type a_Program = *mut a_Program_;
    pub type a_Section = *mut a_Section_;
    pub type a_Stmt_List = *mut a_Stmt_List_;
    pub type a_Class_Def = *mut a_Class_Def_;
    pub type a_Func_Def = *mut a_Func_Def_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Code_Segment_ {
        _unused: [u8; 0],
    }
    pub type a_Code_Segment = *mut a_Code_Segment_;
    pub type a_Stmt = *mut a_Stmt_;
    pub type a_Exp = *mut a_Exp_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Exp_Chuck_ {
        _unused: [u8; 0],
    }
    pub type a_Exp_Chuck = *mut a_Exp_Chuck_;
    pub type a_Exp_Binary = *mut a_Exp_Binary_;
    pub type a_Exp_Cast = *mut a_Exp_Cast_;
    pub type a_Exp_Unary = *mut a_Exp_Unary_;
    pub type a_Exp_Postfix = *mut a_Exp_Postfix_;
    pub type a_Exp_Primary = *mut a_Exp_Primary_;
    pub type a_Exp_Dur = *mut a_Exp_Dur_;
    pub type a_Exp_Array = *mut a_Exp_Array_;
    pub type a_Exp_Func_Call = *mut a_Exp_Func_Call_;
    pub type a_Exp_Dot_Member = *mut a_Exp_Dot_Member_;
    pub type a_Exp_If = *mut a_Exp_If_;
    pub type a_Exp_Decl = *mut a_Exp_Decl_;
    pub type a_Exp_Hack = *mut a_Exp_Hack_;
    pub type a_Stmt_Code = *mut a_Stmt_Code_;
    pub type a_Stmt_If = *mut a_Stmt_If_;
    pub type a_Stmt_While = *mut a_Stmt_While_;
    pub type a_Stmt_Until = *mut a_Stmt_Until_;
    pub type a_Stmt_For = *mut a_Stmt_For_;
    pub type a_Stmt_Loop = *mut a_Stmt_Loop_;
    pub type a_Stmt_Switch = *mut a_Stmt_Switch_;
    pub type a_Stmt_Break = *mut a_Stmt_Break_;
    pub type a_Stmt_Continue = *mut a_Stmt_Continue_;
    pub type a_Stmt_Return = *mut a_Stmt_Return_;
    pub type a_Stmt_Case = *mut a_Stmt_Case_;
    pub type a_Stmt_GotoLabel = *mut a_Stmt_GotoLabel_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Decl_ {
        _unused: [u8; 0],
    }
    pub type a_Decl = *mut a_Decl_;
    pub type a_Var_Decl = *mut a_Var_Decl_;
    pub type a_Var_Decl_List = *mut a_Var_Decl_List_;
    pub type a_Type_Decl = *mut a_Type_Decl_;
    pub type a_Arg_List = *mut a_Arg_List_;
    pub type a_Id_List = *mut a_Id_List_;
    pub type a_Class_Ext = *mut a_Class_Ext_;
    pub type a_Class_Body = *mut a_Class_Body_;
    pub type a_Array_Sub = *mut a_Array_Sub_;
    pub type a_Complex = *mut a_Complex_;
    pub type a_Polar = *mut a_Polar_;
    pub type a_Vec = *mut a_Vec_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Type {
        _unused: [u8; 0],
    }
    pub type t_CKTYPE = *mut Chuck_Type;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Value {
        _unused: [u8; 0],
    }
    pub type t_CKVALUE = *mut Chuck_Value;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Func {
        _unused: [u8; 0],
    }
    pub type t_CKFUNC = *mut Chuck_Func;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Namespace {
        _unused: [u8; 0],
    }
    pub type t_CKNSPC = *mut Chuck_Namespace;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM_Code {
        _unused: [u8; 0],
    }
    pub type t_CKVMCODE = *mut Chuck_VM_Code;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Binary_ {
        pub lhs: a_Exp,
        pub op: ae_Operator,
        pub rhs: a_Exp,
        pub ck_func: t_CKFUNC,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Binary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Cast_ {
        pub type_: a_Type_Decl,
        pub exp: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Cast_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Unary_ {
        pub op: ae_Operator,
        pub exp: a_Exp,
        pub type_: a_Type_Decl,
        pub array: a_Array_Sub,
        pub code: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Unary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Postfix_ {
        pub exp: a_Exp,
        pub op: ae_Operator,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Postfix_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Dur_ {
        pub base: a_Exp,
        pub unit: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Dur_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Array_ {
        pub base: a_Exp,
        pub indices: a_Array_Sub,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Array_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Func_Call_ {
        pub func: a_Exp,
        pub args: a_Exp,
        pub ret_type: t_CKTYPE,
        pub ck_func: t_CKFUNC,
        pub ck_vm_code: t_CKVMCODE,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Func_Call_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Dot_Member_ {
        pub base: a_Exp,
        pub t_base: t_CKTYPE,
        pub xid: S_Symbol,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Dot_Member_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_If_ {
        pub cond: a_Exp,
        pub if_exp: a_Exp,
        pub else_exp: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_If_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Decl_ {
        pub type_: a_Type_Decl,
        pub var_decl_list: a_Var_Decl_List,
        pub num_var_decls: ::std::os::raw::c_int,
        pub is_static: ::std::os::raw::c_int,
        pub is_global: ::std::os::raw::c_int,
        pub ck_type: t_CKTYPE,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Hack_ {
        pub exp: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Exp_Hack_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Var_Decl_List_ {
        pub var_decl: a_Var_Decl,
        pub next: a_Var_Decl_List,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Var_Decl_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Var_Decl_ {
        pub xid: S_Symbol,
        pub var_decl: a_Var_Decl,
        pub array: a_Array_Sub,
        pub value: t_CKVALUE,
        pub addr: *mut ::std::os::raw::c_void,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Var_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Type_Decl_ {
        pub xid: a_Id_List,
        pub array: a_Array_Sub,
        pub ref_: ::std::os::raw::c_int,
        pub linepos: ::std::os::raw::c_int,
    }
    impl Default for a_Type_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Array_Sub_ {
        pub depth: ::std::os::raw::c_ulong,
        pub exp_list: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
        pub err_num: ::std::os::raw::c_int,
        pub err_pos: ::std::os::raw::c_int,
    }
    impl Default for a_Array_Sub_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Arg_List_ {
        pub type_decl: a_Type_Decl,
        pub var_decl: a_Var_Decl,
        pub type_: t_CKTYPE,
        pub next: a_Arg_List,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Arg_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Complex_ {
        pub re: a_Exp,
        pub im: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Complex_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Polar_ {
        pub mod_: a_Exp,
        pub phase: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Polar_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Vec_ {
        pub args: a_Exp,
        pub numdims: ::std::os::raw::c_int,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    impl Default for a_Vec_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Primary_Type {
        ae_primary_var = 0,
        ae_primary_num = 1,
        ae_primary_float = 2,
        ae_primary_str = 3,
        ae_primary_array = 4,
        ae_primary_exp = 5,
        ae_primary_hack = 6,
        ae_primary_complex = 7,
        ae_primary_polar = 8,
        ae_primary_vec = 9,
        ae_primary_char = 10,
        ae_primary_nil = 11,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Exp_Primary_ {
        pub s_type: ae_Exp_Primary_Type,
        pub value: t_CKVALUE,
        __bindgen_anon_1: a_Exp_Primary___bindgen_ty_1,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Exp,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Exp_Primary___bindgen_ty_1 {
        pub var: S_Symbol,
        pub num: ::std::os::raw::c_long,
        pub fnum: f64,
        pub str: c_str,
        pub chr: c_str,
        pub array: a_Array_Sub,
        pub exp: a_Exp,
        pub complex: a_Complex,
        pub polar: a_Polar,
        pub vec: a_Vec,
        _bindgen_union_align: u64,
    }
    impl Default for a_Exp_Primary___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_Primary___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Exp_Primary___bindgen_ty_1 {{ union }}")
        }
    }
    impl Default for a_Exp_Primary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_Primary_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "a_Exp_Primary_ {{ s_type: {:?}, value: {:?}, __bindgen_anon_1: {:?}, linepos: {:?}, self: {:?} }}" , self . s_type , self . value , self . __bindgen_anon_1 , self . linepos , self . self_ )
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Type {
        ae_exp_binary = 0,
        ae_exp_unary = 1,
        ae_exp_cast = 2,
        ae_exp_postfix = 3,
        ae_exp_dur = 4,
        ae_exp_primary = 5,
        ae_exp_array = 6,
        ae_exp_func_call = 7,
        ae_exp_dot_member = 8,
        ae_exp_if = 9,
        ae_exp_decl = 10,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Meta {
        ae_meta_value = 0,
        ae_meta_var = 1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Exp_ {
        pub s_type: ae_Exp_Type,
        pub s_meta: ae_Exp_Meta,
        pub type_: t_CKTYPE,
        pub owner: t_CKNSPC,
        pub next: a_Exp,
        pub group_size: ::std::os::raw::c_ulong,
        pub cast_to: t_CKTYPE,
        pub emit_var: ::std::os::raw::c_ulong,
        __bindgen_anon_1: a_Exp___bindgen_ty_1,
        pub linepos: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    union a_Exp___bindgen_ty_1 {
        pub binary: a_Exp_Binary_,
        pub unary: a_Exp_Unary_,
        pub cast: a_Exp_Cast_,
        pub postfix: a_Exp_Postfix_,
        pub dur: a_Exp_Dur_,
        pub primary: a_Exp_Primary_,
        pub array: a_Exp_Array_,
        pub func_call: a_Exp_Func_Call_,
        pub dot_member: a_Exp_Dot_Member_,
        pub exp_if: a_Exp_If_,
        pub decl: a_Exp_Decl_,
        _bindgen_union_align: [u64; 7usize],
    }
    impl Default for a_Exp___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Exp___bindgen_ty_1 {{ union }}")
        }
    }
    impl Default for a_Exp_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "a_Exp_ {{ s_type: {:?}, s_meta: {:?}, type: {:?}, owner: {:?}, next: {:?}, group_size: {:?}, cast_to: {:?}, emit_var: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}" , self . s_type , self . s_meta , self . type_ , self . owner , self . next , self . group_size , self . cast_to , self . emit_var , self . __bindgen_anon_1 , self . linepos )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_While_ {
        pub is_do: ::std::os::raw::c_int,
        pub cond: a_Exp,
        pub body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_While_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Until_ {
        pub is_do: ::std::os::raw::c_int,
        pub cond: a_Exp,
        pub body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_Until_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_For_ {
        pub c1: a_Stmt,
        pub c2: a_Stmt,
        pub c3: a_Exp,
        pub body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_For_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Loop_ {
        pub cond: a_Exp,
        pub body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_Loop_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Code_ {
        pub stmt_list: a_Stmt_List,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_Code_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_If_ {
        pub cond: a_Exp,
        pub if_body: a_Stmt,
        pub else_body: a_Stmt,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_If_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Switch_ {
        pub val: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_Switch_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Break_ {
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_Break_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Continue_ {
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_Continue_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Return_ {
        pub val: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_Return_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Case_ {
        pub exp: a_Exp,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_Case_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_GotoLabel_ {
        pub name: S_Symbol,
        pub linepos: ::std::os::raw::c_int,
        pub self_: a_Stmt,
    }
    impl Default for a_Stmt_GotoLabel_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Stmt_Type {
        ae_stmt_exp = 0,
        ae_stmt_while = 1,
        ae_stmt_until = 2,
        ae_stmt_for = 3,
        ae_stmt_loop = 4,
        ae_stmt_if = 5,
        ae_stmt_code = 6,
        ae_stmt_switch = 7,
        ae_stmt_break = 8,
        ae_stmt_continue = 9,
        ae_stmt_return = 10,
        ae_stmt_case = 11,
        ae_stmt_gotolabel = 12,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Stmt_ {
        pub s_type: ae_Stmt_Type,
        pub skip: ::std::os::raw::c_int,
        __bindgen_anon_1: a_Stmt___bindgen_ty_1,
        pub linepos: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    union a_Stmt___bindgen_ty_1 {
        stmt_exp: a_Exp,
        stmt_code: a_Stmt_Code_,
        stmt_while: a_Stmt_While_,
        stmt_until: a_Stmt_Until_,
        stmt_loop: a_Stmt_Loop_,
        stmt_for: a_Stmt_For_,
        stmt_if: a_Stmt_If_,
        stmt_switch: a_Stmt_Switch_,
        stmt_break: a_Stmt_Break_,
        stmt_continue: a_Stmt_Continue_,
        stmt_return: a_Stmt_Return_,
        stmt_case: a_Stmt_Case_,
        stmt_gotolabel: a_Stmt_GotoLabel_,
        _bindgen_union_align: [u64; 6usize],
    }
    impl Default for a_Stmt___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Stmt___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Stmt___bindgen_ty_1 {{ union }}")
        }
    }
    impl Default for a_Stmt_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Stmt_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "a_Stmt_ {{ s_type: {:?}, skip: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
                self.s_type, self.skip, self.__bindgen_anon_1, self.linepos
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_List_ {
        pub stmt: a_Stmt,
        pub next: a_Stmt_List,
        pub linepos: ::std::os::raw::c_int,
    }
    impl Default for a_Stmt_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Def_ {
        pub decl: ae_Keyword,
        pub name: a_Id_List,
        pub ext: a_Class_Ext,
        pub body: a_Class_Body,
        pub type_: t_CKTYPE,
        pub iface: ::std::os::raw::c_int,
        pub home: t_CKNSPC,
        pub linepos: ::std::os::raw::c_int,
    }
    impl Default for a_Class_Def_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Ext_ {
        pub extend_id: a_Id_List,
        pub impl_list: a_Id_List,
        pub linepos: ::std::os::raw::c_int,
    }
    impl Default for a_Class_Ext_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Body_ {
        pub section: a_Section,
        pub next: a_Class_Body,
        pub linepos: ::std::os::raw::c_int,
    }
    impl Default for a_Class_Body_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Id_List_ {
        pub xid: S_Symbol,
        pub next: a_Id_List,
        pub linepos: ::std::os::raw::c_int,
    }
    impl Default for a_Id_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Func_Type {
        ae_func_user = 0,
        ae_func_builtin = 1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Func_Def_ {
        pub func_decl: ae_Keyword,
        pub static_decl: ae_Keyword,
        pub type_decl: a_Type_Decl,
        pub ret_type: t_CKTYPE,
        pub name: S_Symbol,
        pub arg_list: a_Arg_List,
        pub code: a_Stmt,
        pub ck_func: t_CKFUNC,
        pub global: ::std::os::raw::c_uint,
        pub s_type: ::std::os::raw::c_uint,
        pub stack_depth: ::std::os::raw::c_uint,
        pub dl_func_ptr: *mut ::std::os::raw::c_void,
        pub linepos: ::std::os::raw::c_int,
    }
    impl Default for a_Func_Def_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Section_Type {
        ae_section_stmt = 0,
        ae_section_func = 1,
        ae_section_class = 2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Section_ {
        pub s_type: ae_Section_Type,
        __bindgen_anon_1: a_Section___bindgen_ty_1,
        pub linepos: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Section___bindgen_ty_1 {
        pub stmt_list: a_Stmt_List,
        pub class_def: a_Class_Def,
        pub func_def: a_Func_Def,
        _bindgen_union_align: u64,
    }
    impl Default for a_Section___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Section___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Section___bindgen_ty_1 {{ union }}")
        }
    }
    impl Default for a_Section_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Section_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "a_Section_ {{ s_type: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
                self.s_type, self.__bindgen_anon_1, self.linepos
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Program_ {
        pub section: a_Section,
        pub next: a_Program,
        pub linepos: ::std::os::raw::c_int,
    }
    impl Default for a_Program_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
}
