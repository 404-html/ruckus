/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub type c_str = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S_Symbol_ {
    _unused: [u8; 0],
}
pub type S_Symbol = *mut root::S_Symbol_;
pub type a_Pos = ::std::os::raw::c_int;
pub const ae_Operator_ae_op_plus: root::ae_Operator = 0;
pub const ae_Operator_ae_op_minus: root::ae_Operator = 1;
pub const ae_Operator_ae_op_times: root::ae_Operator = 2;
pub const ae_Operator_ae_op_divide: root::ae_Operator = 3;
pub const ae_Operator_ae_op_eq: root::ae_Operator = 4;
pub const ae_Operator_ae_op_neq: root::ae_Operator = 5;
pub const ae_Operator_ae_op_lt: root::ae_Operator = 6;
pub const ae_Operator_ae_op_le: root::ae_Operator = 7;
pub const ae_Operator_ae_op_gt: root::ae_Operator = 8;
pub const ae_Operator_ae_op_ge: root::ae_Operator = 9;
pub const ae_Operator_ae_op_and: root::ae_Operator = 10;
pub const ae_Operator_ae_op_or: root::ae_Operator = 11;
pub const ae_Operator_ae_op_s_or: root::ae_Operator = 12;
pub const ae_Operator_ae_op_s_and: root::ae_Operator = 13;
pub const ae_Operator_ae_op_shift_left: root::ae_Operator = 14;
pub const ae_Operator_ae_op_shift_right: root::ae_Operator = 15;
pub const ae_Operator_ae_op_percent: root::ae_Operator = 16;
pub const ae_Operator_ae_op_s_xor: root::ae_Operator = 17;
pub const ae_Operator_ae_op_chuck: root::ae_Operator = 18;
pub const ae_Operator_ae_op_plus_chuck: root::ae_Operator = 19;
pub const ae_Operator_ae_op_minus_chuck: root::ae_Operator = 20;
pub const ae_Operator_ae_op_times_chuck: root::ae_Operator = 21;
pub const ae_Operator_ae_op_divide_chuck: root::ae_Operator = 22;
pub const ae_Operator_ae_op_s_and_chuck: root::ae_Operator = 23;
pub const ae_Operator_ae_op_s_or_chuck: root::ae_Operator = 24;
pub const ae_Operator_ae_op_s_xor_chuck: root::ae_Operator = 25;
pub const ae_Operator_ae_op_shift_right_chuck: root::ae_Operator = 26;
pub const ae_Operator_ae_op_shift_left_chuck: root::ae_Operator = 27;
pub const ae_Operator_ae_op_percent_chuck: root::ae_Operator = 28;
pub const ae_Operator_ae_op_s_chuck: root::ae_Operator = 29;
pub const ae_Operator_ae_op_plusplus: root::ae_Operator = 30;
pub const ae_Operator_ae_op_minusminus: root::ae_Operator = 31;
pub const ae_Operator_ae_op_tilda: root::ae_Operator = 32;
pub const ae_Operator_ae_op_exclamation: root::ae_Operator = 33;
pub const ae_Operator_ae_op_at_chuck: root::ae_Operator = 34;
pub const ae_Operator_ae_op_unchuck: root::ae_Operator = 35;
pub const ae_Operator_ae_op_upchuck: root::ae_Operator = 36;
pub const ae_Operator_ae_op_spork: root::ae_Operator = 37;
pub const ae_Operator_ae_op_typeof: root::ae_Operator = 38;
pub const ae_Operator_ae_op_sizeof: root::ae_Operator = 39;
pub const ae_Operator_ae_op_new: root::ae_Operator = 40;
pub const ae_Operator_ae_op_arrow_left: root::ae_Operator = 41;
pub const ae_Operator_ae_op_arrow_right: root::ae_Operator = 42;
pub type ae_Operator = u32;
extern "C" {
    pub fn op2str(op: root::ae_Operator) -> *const ::std::os::raw::c_char;
}
pub const ae_Keyword_ae_key_this: root::ae_Keyword = 0;
pub const ae_Keyword_ae_key_me: root::ae_Keyword = 1;
pub const ae_Keyword_ae_key_func: root::ae_Keyword = 2;
pub const ae_Keyword_ae_key_public: root::ae_Keyword = 3;
pub const ae_Keyword_ae_key_protected: root::ae_Keyword = 4;
pub const ae_Keyword_ae_key_private: root::ae_Keyword = 5;
pub const ae_Keyword_ae_key_static: root::ae_Keyword = 6;
pub const ae_Keyword_ae_key_instance: root::ae_Keyword = 7;
pub const ae_Keyword_ae_key_abstract: root::ae_Keyword = 8;
pub type ae_Keyword = u32;
pub type a_Program = *mut root::a_Program_;
pub type a_Section = *mut root::a_Section_;
pub type a_Stmt_List = *mut root::a_Stmt_List_;
pub type a_Class_Def = *mut root::a_Class_Def_;
pub type a_Func_Def = *mut root::a_Func_Def_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Code_Segment_ {
    _unused: [u8; 0],
}
pub type a_Code_Segment = *mut root::a_Code_Segment_;
pub type a_Stmt = *mut root::a_Stmt_;
pub type a_Exp = *mut root::a_Exp_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Exp_Chuck_ {
    _unused: [u8; 0],
}
pub type a_Exp_Chuck = *mut root::a_Exp_Chuck_;
pub type a_Exp_Binary = *mut root::a_Exp_Binary_;
pub type a_Exp_Cast = *mut root::a_Exp_Cast_;
pub type a_Exp_Unary = *mut root::a_Exp_Unary_;
pub type a_Exp_Postfix = *mut root::a_Exp_Postfix_;
pub type a_Exp_Primary = *mut root::a_Exp_Primary_;
pub type a_Exp_Dur = *mut root::a_Exp_Dur_;
pub type a_Exp_Array = *mut root::a_Exp_Array_;
pub type a_Exp_Func_Call = *mut root::a_Exp_Func_Call_;
pub type a_Exp_Dot_Member = *mut root::a_Exp_Dot_Member_;
pub type a_Exp_If = *mut root::a_Exp_If_;
pub type a_Exp_Decl = *mut root::a_Exp_Decl_;
pub type a_Exp_Hack = *mut root::a_Exp_Hack_;
pub type a_Stmt_Code = *mut root::a_Stmt_Code_;
pub type a_Stmt_If = *mut root::a_Stmt_If_;
pub type a_Stmt_While = *mut root::a_Stmt_While_;
pub type a_Stmt_Until = *mut root::a_Stmt_Until_;
pub type a_Stmt_For = *mut root::a_Stmt_For_;
pub type a_Stmt_Loop = *mut root::a_Stmt_Loop_;
pub type a_Stmt_Switch = *mut root::a_Stmt_Switch_;
pub type a_Stmt_Break = *mut root::a_Stmt_Break_;
pub type a_Stmt_Continue = *mut root::a_Stmt_Continue_;
pub type a_Stmt_Return = *mut root::a_Stmt_Return_;
pub type a_Stmt_Case = *mut root::a_Stmt_Case_;
pub type a_Stmt_GotoLabel = *mut root::a_Stmt_GotoLabel_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a_Decl_ {
    _unused: [u8; 0],
}
pub type a_Decl = *mut root::a_Decl_;
pub type a_Var_Decl = *mut root::a_Var_Decl_;
pub type a_Var_Decl_List = *mut root::a_Var_Decl_List_;
pub type a_Type_Decl = *mut root::a_Type_Decl_;
pub type a_Arg_List = *mut root::a_Arg_List_;
pub type a_Id_List = *mut root::a_Id_List_;
pub type a_Class_Ext = *mut root::a_Class_Ext_;
pub type a_Class_Body = *mut root::a_Class_Body_;
pub type a_Array_Sub = *mut root::a_Array_Sub_;
pub type a_Complex = *mut root::a_Complex_;
pub type a_Polar = *mut root::a_Polar_;
pub type a_Vec = *mut root::a_Vec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_Type {
    _unused: [u8; 0],
}
pub type t_CKTYPE = *mut root::Chuck_Type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_Value {
    _unused: [u8; 0],
}
pub type t_CKVALUE = *mut root::Chuck_Value;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_Func {
    _unused: [u8; 0],
}
pub type t_CKFUNC = *mut root::Chuck_Func;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_Namespace {
    _unused: [u8; 0],
}
pub type t_CKNSPC = *mut root::Chuck_Namespace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Chuck_VM_Code {
    _unused: [u8; 0],
}
pub type t_CKVMCODE = *mut root::Chuck_VM_Code;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Binary_ {
    pub lhs: root::a_Exp,
    pub op: root::ae_Operator,
    pub rhs: root::a_Exp,
    pub ck_func: root::t_CKFUNC,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Binary_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Binary_>(),
//         48usize,
//         concat!("Size of: ", stringify!(a_Exp_Binary_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Binary_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Binary_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).lhs as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Binary_),
//             "::",
//             stringify!(lhs)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).op as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Binary_),
//             "::",
//             stringify!(op)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).rhs as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Binary_),
//             "::",
//             stringify!(rhs)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).ck_func as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Binary_),
//             "::",
//             stringify!(ck_func)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).linepos as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Binary_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).self_ as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Binary_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Binary_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Cast_ {
    pub type_: root::a_Type_Decl,
    pub exp: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Cast_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Cast_>(),
//         32usize,
//         concat!("Size of: ", stringify!(a_Exp_Cast_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Cast_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Cast_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).type_ as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Cast_),
//             "::",
//             stringify!(type_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).exp as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Cast_),
//             "::",
//             stringify!(exp)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Cast_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).self_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Cast_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Cast_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Unary_ {
    pub op: root::ae_Operator,
    pub exp: root::a_Exp,
    pub type_: root::a_Type_Decl,
    pub array: root::a_Array_Sub,
    pub code: root::a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Unary_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Unary_>(),
//         56usize,
//         concat!("Size of: ", stringify!(a_Exp_Unary_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Unary_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Unary_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).op as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Unary_),
//             "::",
//             stringify!(op)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).exp as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Unary_),
//             "::",
//             stringify!(exp)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).type_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Unary_),
//             "::",
//             stringify!(type_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).array as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Unary_),
//             "::",
//             stringify!(array)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).code as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Unary_),
//             "::",
//             stringify!(code)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).linepos as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Unary_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).self_ as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Unary_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Unary_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Postfix_ {
    pub exp: root::a_Exp,
    pub op: root::ae_Operator,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Postfix_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Postfix_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Exp_Postfix_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Postfix_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Postfix_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).exp as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Postfix_),
//             "::",
//             stringify!(exp)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).op as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Postfix_),
//             "::",
//             stringify!(op)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).linepos as *const _ as usize },
//         12usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Postfix_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).self_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Postfix_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Postfix_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Dur_ {
    pub base: root::a_Exp,
    pub unit: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Dur_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Dur_>(),
//         32usize,
//         concat!("Size of: ", stringify!(a_Exp_Dur_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Dur_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Dur_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).base as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dur_),
//             "::",
//             stringify!(base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).unit as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dur_),
//             "::",
//             stringify!(unit)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dur_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).self_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dur_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Dur_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Array_ {
    pub base: root::a_Exp,
    pub indices: root::a_Array_Sub,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Array_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Array_>(),
//         32usize,
//         concat!("Size of: ", stringify!(a_Exp_Array_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Array_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Array_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).base as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Array_),
//             "::",
//             stringify!(base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).indices as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Array_),
//             "::",
//             stringify!(indices)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Array_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).self_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Array_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Array_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Func_Call_ {
    pub func: root::a_Exp,
    pub args: root::a_Exp,
    pub ret_type: root::t_CKTYPE,
    pub ck_func: root::t_CKFUNC,
    pub ck_vm_code: root::t_CKVMCODE,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Func_Call_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Func_Call_>(),
//         56usize,
//         concat!("Size of: ", stringify!(a_Exp_Func_Call_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Func_Call_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Func_Call_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).func as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Func_Call_),
//             "::",
//             stringify!(func)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).args as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Func_Call_),
//             "::",
//             stringify!(args)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ret_type as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Func_Call_),
//             "::",
//             stringify!(ret_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_func as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Func_Call_),
//             "::",
//             stringify!(ck_func)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_vm_code as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Func_Call_),
//             "::",
//             stringify!(ck_vm_code)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).linepos as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Func_Call_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).self_ as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Func_Call_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Func_Call_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Dot_Member_ {
    pub base: root::a_Exp,
    pub t_base: root::t_CKTYPE,
    pub xid: root::S_Symbol,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Dot_Member_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Dot_Member_>(),
//         40usize,
//         concat!("Size of: ", stringify!(a_Exp_Dot_Member_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Dot_Member_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Dot_Member_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).base as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dot_Member_),
//             "::",
//             stringify!(base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).t_base as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dot_Member_),
//             "::",
//             stringify!(t_base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).xid as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dot_Member_),
//             "::",
//             stringify!(xid)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).linepos as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dot_Member_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).self_ as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Dot_Member_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Dot_Member_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_If_ {
    pub cond: root::a_Exp,
    pub if_exp: root::a_Exp,
    pub else_exp: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_If_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_If_>(),
//         40usize,
//         concat!("Size of: ", stringify!(a_Exp_If_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_If_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_If_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).cond as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_If_),
//             "::",
//             stringify!(cond)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).if_exp as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_If_),
//             "::",
//             stringify!(if_exp)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).else_exp as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_If_),
//             "::",
//             stringify!(else_exp)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).linepos as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_If_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).self_ as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_If_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_If_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Decl_ {
    pub type_: root::a_Type_Decl,
    pub var_decl_list: root::a_Var_Decl_List,
    pub num_var_decls: ::std::os::raw::c_int,
    pub is_static: ::std::os::raw::c_int,
    pub is_global: ::std::os::raw::c_int,
    pub ck_type: root::t_CKTYPE,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Decl_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Decl_>(),
//         56usize,
//         concat!("Size of: ", stringify!(a_Exp_Decl_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Decl_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Decl_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).type_ as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Decl_),
//             "::",
//             stringify!(type_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).var_decl_list as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Decl_),
//             "::",
//             stringify!(var_decl_list)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).num_var_decls as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Decl_),
//             "::",
//             stringify!(num_var_decls)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_static as *const _ as usize },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Decl_),
//             "::",
//             stringify!(is_static)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_global as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Decl_),
//             "::",
//             stringify!(is_global)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).ck_type as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Decl_),
//             "::",
//             stringify!(ck_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).linepos as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Decl_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).self_ as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Decl_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Decl_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Exp_Hack_ {
    pub exp: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Hack_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Hack_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Exp_Hack_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Hack_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Hack_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).exp as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Hack_),
//             "::",
//             stringify!(exp)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).linepos as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Hack_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).self_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Hack_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Hack_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Var_Decl_List_ {
    pub var_decl: root::a_Var_Decl,
    pub next: root::a_Var_Decl_List,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Var_Decl_List_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Var_Decl_List_>(),
//         32usize,
//         concat!("Size of: ", stringify!(a_Var_Decl_List_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Var_Decl_List_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Var_Decl_List_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).var_decl as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_List_),
//             "::",
//             stringify!(var_decl)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).next as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_List_),
//             "::",
//             stringify!(next)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_List_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).self_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_List_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Var_Decl_List_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Var_Decl_ {
    pub xid: root::S_Symbol,
    pub var_decl: root::a_Var_Decl,
    pub array: root::a_Array_Sub,
    pub value: root::t_CKVALUE,
    pub addr: *mut ::std::os::raw::c_void,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Var_Decl_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Var_Decl_>(),
//         56usize,
//         concat!("Size of: ", stringify!(a_Var_Decl_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Var_Decl_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Var_Decl_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).xid as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_),
//             "::",
//             stringify!(xid)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).var_decl as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_),
//             "::",
//             stringify!(var_decl)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).array as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_),
//             "::",
//             stringify!(array)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).value as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_),
//             "::",
//             stringify!(value)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).addr as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_),
//             "::",
//             stringify!(addr)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).linepos as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).self_ as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Var_Decl_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Var_Decl_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Type_Decl_ {
    pub xid: root::a_Id_List,
    pub array: root::a_Array_Sub,
    pub ref_: ::std::os::raw::c_int,
    pub linepos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Type_Decl_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Type_Decl_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Type_Decl_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Type_Decl_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Type_Decl_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).xid as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Type_Decl_),
//             "::",
//             stringify!(xid)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).array as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Type_Decl_),
//             "::",
//             stringify!(array)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).ref_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Type_Decl_),
//             "::",
//             stringify!(ref_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).linepos as *const _ as usize },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Type_Decl_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Type_Decl_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Array_Sub_ {
    pub depth: ::std::os::raw::c_ulong,
    pub exp_list: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
    pub err_num: ::std::os::raw::c_int,
    pub err_pos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Array_Sub_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Array_Sub_>(),
//         40usize,
//         concat!("Size of: ", stringify!(a_Array_Sub_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Array_Sub_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Array_Sub_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).depth as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Array_Sub_),
//             "::",
//             stringify!(depth)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).exp_list as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Array_Sub_),
//             "::",
//             stringify!(exp_list)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Array_Sub_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).self_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Array_Sub_),
//             "::",
//             stringify!(self_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_num as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Array_Sub_),
//             "::",
//             stringify!(err_num)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_pos as *const _ as usize },
//         36usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Array_Sub_),
//             "::",
//             stringify!(err_pos)
//         )
//     );
// }
impl Default for a_Array_Sub_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Arg_List_ {
    pub type_decl: root::a_Type_Decl,
    pub var_decl: root::a_Var_Decl,
    pub type_: root::t_CKTYPE,
    pub next: root::a_Arg_List,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Arg_List_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Arg_List_>(),
//         48usize,
//         concat!("Size of: ", stringify!(a_Arg_List_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Arg_List_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Arg_List_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_decl as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Arg_List_),
//             "::",
//             stringify!(type_decl)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).var_decl as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Arg_List_),
//             "::",
//             stringify!(var_decl)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Arg_List_),
//             "::",
//             stringify!(type_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).next as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Arg_List_),
//             "::",
//             stringify!(next)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).linepos as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Arg_List_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).self_ as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Arg_List_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Arg_List_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Complex_ {
    pub re: root::a_Exp,
    pub im: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Complex_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Complex_>(),
//         32usize,
//         concat!("Size of: ", stringify!(a_Complex_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Complex_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Complex_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Complex_>())).re as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Complex_),
//             "::",
//             stringify!(re)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Complex_>())).im as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Complex_),
//             "::",
//             stringify!(im)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Complex_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Complex_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Complex_>())).self_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Complex_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Complex_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Polar_ {
    pub mod_: root::a_Exp,
    pub phase: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Polar_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Polar_>(),
//         32usize,
//         concat!("Size of: ", stringify!(a_Polar_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Polar_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Polar_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Polar_>())).mod_ as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Polar_),
//             "::",
//             stringify!(mod_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Polar_>())).phase as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Polar_),
//             "::",
//             stringify!(phase)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Polar_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Polar_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Polar_>())).self_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Polar_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Polar_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Vec_ {
    pub args: root::a_Exp,
    pub numdims: ::std::os::raw::c_int,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
// #[test]
// fn bindgen_test_layout_a_Vec_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Vec_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Vec_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Vec_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Vec_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Vec_>())).args as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Vec_),
//             "::",
//             stringify!(args)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Vec_>())).numdims as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Vec_),
//             "::",
//             stringify!(numdims)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Vec_>())).linepos as *const _ as usize },
//         12usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Vec_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Vec_>())).self_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Vec_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Vec_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ae_Exp_Primary_Type_ae_primary_var: root::ae_Exp_Primary_Type = 0;
pub const ae_Exp_Primary_Type_ae_primary_num: root::ae_Exp_Primary_Type = 1;
pub const ae_Exp_Primary_Type_ae_primary_float: root::ae_Exp_Primary_Type = 2;
pub const ae_Exp_Primary_Type_ae_primary_str: root::ae_Exp_Primary_Type = 3;
pub const ae_Exp_Primary_Type_ae_primary_array: root::ae_Exp_Primary_Type = 4;
pub const ae_Exp_Primary_Type_ae_primary_exp: root::ae_Exp_Primary_Type = 5;
pub const ae_Exp_Primary_Type_ae_primary_hack: root::ae_Exp_Primary_Type = 6;
pub const ae_Exp_Primary_Type_ae_primary_complex: root::ae_Exp_Primary_Type = 7;
pub const ae_Exp_Primary_Type_ae_primary_polar: root::ae_Exp_Primary_Type = 8;
pub const ae_Exp_Primary_Type_ae_primary_vec: root::ae_Exp_Primary_Type = 9;
pub const ae_Exp_Primary_Type_ae_primary_char: root::ae_Exp_Primary_Type = 10;
pub const ae_Exp_Primary_Type_ae_primary_nil: root::ae_Exp_Primary_Type = 11;
pub type ae_Exp_Primary_Type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct a_Exp_Primary_ {
    pub s_type: root::ae_Exp_Primary_Type,
    pub value: root::t_CKVALUE,
    pub __bindgen_anon_1: root::a_Exp_Primary___bindgen_ty_1,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Exp,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union a_Exp_Primary___bindgen_ty_1 {
    pub var: root::S_Symbol,
    pub num: ::std::os::raw::c_long,
    pub fnum: f64,
    pub str: root::c_str,
    pub chr: root::c_str,
    pub array: root::a_Array_Sub,
    pub exp: root::a_Exp,
    pub complex: root::a_Complex,
    pub polar: root::a_Polar,
    pub vec: root::a_Vec,
    _bindgen_union_align: u64,
}
// #[test]
// fn bindgen_test_layout_a_Exp_Primary___bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Primary___bindgen_ty_1>(),
//         8usize,
//         concat!("Size of: ", stringify!(a_Exp_Primary___bindgen_ty_1))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Primary___bindgen_ty_1>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Primary___bindgen_ty_1))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).var as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(var)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).num as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(num)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).fnum as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(fnum)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).str as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(str)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).chr as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(chr)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).array as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(array)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).exp as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(exp)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).complex as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(complex)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).polar as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(polar)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).vec as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary___bindgen_ty_1),
//             "::",
//             stringify!(vec)
//         )
//     );
// }
impl Default for a_Exp_Primary___bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for a_Exp_Primary___bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "a_Exp_Primary___bindgen_ty_1 {{ union }}")
    }
}
// #[test]
// fn bindgen_test_layout_a_Exp_Primary_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_Primary_>(),
//         40usize,
//         concat!("Size of: ", stringify!(a_Exp_Primary_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_Primary_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_Primary_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).s_type as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary_),
//             "::",
//             stringify!(s_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).value as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary_),
//             "::",
//             stringify!(value)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).linepos as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).self_ as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_Primary_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Exp_Primary_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for a_Exp_Primary_ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "a_Exp_Primary_ {{ s_type: {:?}, value: {:?}, __bindgen_anon_1: {:?}, linepos: {:?}, self: {:?} }}" , self . s_type , self . value , self . __bindgen_anon_1 , self . linepos , self . self_ )
    }
}
pub const ae_Exp_Type_ae_exp_binary: root::ae_Exp_Type = 0;
pub const ae_Exp_Type_ae_exp_unary: root::ae_Exp_Type = 1;
pub const ae_Exp_Type_ae_exp_cast: root::ae_Exp_Type = 2;
pub const ae_Exp_Type_ae_exp_postfix: root::ae_Exp_Type = 3;
pub const ae_Exp_Type_ae_exp_dur: root::ae_Exp_Type = 4;
pub const ae_Exp_Type_ae_exp_primary: root::ae_Exp_Type = 5;
pub const ae_Exp_Type_ae_exp_array: root::ae_Exp_Type = 6;
pub const ae_Exp_Type_ae_exp_func_call: root::ae_Exp_Type = 7;
pub const ae_Exp_Type_ae_exp_dot_member: root::ae_Exp_Type = 8;
pub const ae_Exp_Type_ae_exp_if: root::ae_Exp_Type = 9;
pub const ae_Exp_Type_ae_exp_decl: root::ae_Exp_Type = 10;
pub type ae_Exp_Type = u32;
pub const ae_Exp_Meta_ae_meta_value: root::ae_Exp_Meta = 0;
pub const ae_Exp_Meta_ae_meta_var: root::ae_Exp_Meta = 1;
pub type ae_Exp_Meta = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct a_Exp_ {
    pub s_type: root::ae_Exp_Type,
    pub s_meta: root::ae_Exp_Meta,
    pub type_: root::t_CKTYPE,
    pub owner: root::t_CKNSPC,
    pub next: root::a_Exp,
    pub group_size: ::std::os::raw::c_ulong,
    pub cast_to: root::t_CKTYPE,
    pub emit_var: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: root::a_Exp___bindgen_ty_1,
    pub linepos: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union a_Exp___bindgen_ty_1 {
    pub binary: root::a_Exp_Binary_,
    pub unary: root::a_Exp_Unary_,
    pub cast: root::a_Exp_Cast_,
    pub postfix: root::a_Exp_Postfix_,
    pub dur: root::a_Exp_Dur_,
    pub primary: root::a_Exp_Primary_,
    pub array: root::a_Exp_Array_,
    pub func_call: root::a_Exp_Func_Call_,
    pub dot_member: root::a_Exp_Dot_Member_,
    pub exp_if: root::a_Exp_If_,
    pub decl: root::a_Exp_Decl_,
    _bindgen_union_align: [u64; 7usize],
}
// #[test]
// fn bindgen_test_layout_a_Exp___bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp___bindgen_ty_1>(),
//         56usize,
//         concat!("Size of: ", stringify!(a_Exp___bindgen_ty_1))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp___bindgen_ty_1>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp___bindgen_ty_1))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).binary as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(binary)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).unary as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(unary)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).cast as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(cast)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).postfix as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(postfix)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dur as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(dur)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).primary as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(primary)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).array as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(array)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).func_call as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(func_call)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dot_member as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(dot_member)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).exp_if as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(exp_if)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).decl as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp___bindgen_ty_1),
//             "::",
//             stringify!(decl)
//         )
//     );
// }
impl Default for a_Exp___bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for a_Exp___bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "a_Exp___bindgen_ty_1 {{ union }}")
    }
}
// #[test]
// fn bindgen_test_layout_a_Exp_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Exp_>(),
//         120usize,
//         concat!("Size of: ", stringify!(a_Exp_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Exp_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Exp_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_type as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(s_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_meta as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(s_meta)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).type_ as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(type_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).owner as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(owner)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).next as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(next)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).group_size as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(group_size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).cast_to as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(cast_to)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).emit_var as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(emit_var)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Exp_>())).linepos as *const _ as usize },
//         112usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Exp_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Exp_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for a_Exp_ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "a_Exp_ {{ s_type: {:?}, s_meta: {:?}, type: {:?}, owner: {:?}, next: {:?}, group_size: {:?}, cast_to: {:?}, emit_var: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}" , self . s_type , self . s_meta , self . type_ , self . owner , self . next , self . group_size , self . cast_to , self . emit_var , self . __bindgen_anon_1 , self . linepos )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_While_ {
    pub is_do: ::std::os::raw::c_int,
    pub cond: root::a_Exp,
    pub body: root::a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_While_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_While_>(),
//         40usize,
//         concat!("Size of: ", stringify!(a_Stmt_While_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_While_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_While_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).is_do as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_While_),
//             "::",
//             stringify!(is_do)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).cond as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_While_),
//             "::",
//             stringify!(cond)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).body as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_While_),
//             "::",
//             stringify!(body)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).linepos as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_While_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).self_ as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_While_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_While_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_Until_ {
    pub is_do: ::std::os::raw::c_int,
    pub cond: root::a_Exp,
    pub body: root::a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_Until_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_Until_>(),
//         40usize,
//         concat!("Size of: ", stringify!(a_Stmt_Until_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_Until_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_Until_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).is_do as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Until_),
//             "::",
//             stringify!(is_do)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).cond as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Until_),
//             "::",
//             stringify!(cond)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).body as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Until_),
//             "::",
//             stringify!(body)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).linepos as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Until_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).self_ as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Until_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_Until_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_For_ {
    pub c1: root::a_Stmt,
    pub c2: root::a_Stmt,
    pub c3: root::a_Exp,
    pub body: root::a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_For_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_For_>(),
//         48usize,
//         concat!("Size of: ", stringify!(a_Stmt_For_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_For_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_For_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c1 as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_For_),
//             "::",
//             stringify!(c1)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c2 as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_For_),
//             "::",
//             stringify!(c2)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c3 as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_For_),
//             "::",
//             stringify!(c3)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).body as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_For_),
//             "::",
//             stringify!(body)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).linepos as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_For_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).self_ as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_For_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_For_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_Loop_ {
    pub cond: root::a_Exp,
    pub body: root::a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_Loop_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_Loop_>(),
//         32usize,
//         concat!("Size of: ", stringify!(a_Stmt_Loop_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_Loop_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_Loop_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).cond as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Loop_),
//             "::",
//             stringify!(cond)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).body as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Loop_),
//             "::",
//             stringify!(body)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Loop_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).self_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Loop_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_Loop_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_Code_ {
    pub stmt_list: root::a_Stmt_List,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_Code_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_Code_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Stmt_Code_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_Code_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_Code_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).stmt_list as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Code_),
//             "::",
//             stringify!(stmt_list)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).linepos as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Code_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).self_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Code_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_Code_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_If_ {
    pub cond: root::a_Exp,
    pub if_body: root::a_Stmt,
    pub else_body: root::a_Stmt,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_If_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_If_>(),
//         40usize,
//         concat!("Size of: ", stringify!(a_Stmt_If_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_If_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_If_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).cond as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_If_),
//             "::",
//             stringify!(cond)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).if_body as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_If_),
//             "::",
//             stringify!(if_body)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).else_body as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_If_),
//             "::",
//             stringify!(else_body)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).linepos as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_If_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).self_ as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_If_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_If_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_Switch_ {
    pub val: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_Switch_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_Switch_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Stmt_Switch_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_Switch_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_Switch_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).val as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Switch_),
//             "::",
//             stringify!(val)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).linepos as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Switch_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).self_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Switch_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_Switch_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_Break_ {
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_Break_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_Break_>(),
//         16usize,
//         concat!("Size of: ", stringify!(a_Stmt_Break_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_Break_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_Break_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).linepos as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Break_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).self_ as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Break_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_Break_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_Continue_ {
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_Continue_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_Continue_>(),
//         16usize,
//         concat!("Size of: ", stringify!(a_Stmt_Continue_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_Continue_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_Continue_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).linepos as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Continue_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).self_ as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Continue_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_Continue_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_Return_ {
    pub val: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_Return_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_Return_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Stmt_Return_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_Return_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_Return_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).val as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Return_),
//             "::",
//             stringify!(val)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).linepos as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Return_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).self_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Return_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_Return_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_Case_ {
    pub exp: root::a_Exp,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_Case_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_Case_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Stmt_Case_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_Case_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_Case_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).exp as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Case_),
//             "::",
//             stringify!(exp)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).linepos as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Case_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).self_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_Case_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_Case_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_GotoLabel_ {
    pub name: root::S_Symbol,
    pub linepos: ::std::os::raw::c_int,
    pub self_: root::a_Stmt,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_GotoLabel_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_GotoLabel_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Stmt_GotoLabel_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_GotoLabel_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_GotoLabel_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).name as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_GotoLabel_),
//             "::",
//             stringify!(name)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).linepos as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_GotoLabel_),
//             "::",
//             stringify!(linepos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).self_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_GotoLabel_),
//             "::",
//             stringify!(self_)
//         )
//     );
// }
impl Default for a_Stmt_GotoLabel_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ae_Stmt_Type_ae_stmt_exp: root::ae_Stmt_Type = 0;
pub const ae_Stmt_Type_ae_stmt_while: root::ae_Stmt_Type = 1;
pub const ae_Stmt_Type_ae_stmt_until: root::ae_Stmt_Type = 2;
pub const ae_Stmt_Type_ae_stmt_for: root::ae_Stmt_Type = 3;
pub const ae_Stmt_Type_ae_stmt_loop: root::ae_Stmt_Type = 4;
pub const ae_Stmt_Type_ae_stmt_if: root::ae_Stmt_Type = 5;
pub const ae_Stmt_Type_ae_stmt_code: root::ae_Stmt_Type = 6;
pub const ae_Stmt_Type_ae_stmt_switch: root::ae_Stmt_Type = 7;
pub const ae_Stmt_Type_ae_stmt_break: root::ae_Stmt_Type = 8;
pub const ae_Stmt_Type_ae_stmt_continue: root::ae_Stmt_Type = 9;
pub const ae_Stmt_Type_ae_stmt_return: root::ae_Stmt_Type = 10;
pub const ae_Stmt_Type_ae_stmt_case: root::ae_Stmt_Type = 11;
pub const ae_Stmt_Type_ae_stmt_gotolabel: root::ae_Stmt_Type = 12;
pub type ae_Stmt_Type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct a_Stmt_ {
    pub s_type: root::ae_Stmt_Type,
    pub skip: ::std::os::raw::c_int,
    pub __bindgen_anon_1: root::a_Stmt___bindgen_ty_1,
    pub linepos: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union a_Stmt___bindgen_ty_1 {
    pub stmt_exp: root::a_Exp,
    pub stmt_code: root::a_Stmt_Code_,
    pub stmt_while: root::a_Stmt_While_,
    pub stmt_until: root::a_Stmt_Until_,
    pub stmt_loop: root::a_Stmt_Loop_,
    pub stmt_for: root::a_Stmt_For_,
    pub stmt_if: root::a_Stmt_If_,
    pub stmt_switch: root::a_Stmt_Switch_,
    pub stmt_break: root::a_Stmt_Break_,
    pub stmt_continue: root::a_Stmt_Continue_,
    pub stmt_return: root::a_Stmt_Return_,
    pub stmt_case: root::a_Stmt_Case_,
    pub stmt_gotolabel: root::a_Stmt_GotoLabel_,
    _bindgen_union_align: [u64; 6usize],
}
// #[test]
// fn bindgen_test_layout_a_Stmt___bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt___bindgen_ty_1>(),
//         48usize,
//         concat!("Size of: ", stringify!(a_Stmt___bindgen_ty_1))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt___bindgen_ty_1>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt___bindgen_ty_1))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_exp as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_exp)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_code as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_code)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_while as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_while)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_until as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_until)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_loop as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_loop)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_for as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_for)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_if as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_if)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_switch as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_switch)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_break as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_break)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_continue as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_continue)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_return as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_return)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_case as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_case)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_gotolabel as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt___bindgen_ty_1),
//             "::",
//             stringify!(stmt_gotolabel)
//         )
//     );
// }
impl Default for a_Stmt___bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for a_Stmt___bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "a_Stmt___bindgen_ty_1 {{ union }}")
    }
}
// #[test]
// fn bindgen_test_layout_a_Stmt_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_>(),
//         64usize,
//         concat!("Size of: ", stringify!(a_Stmt_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_>())).s_type as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_),
//             "::",
//             stringify!(s_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_>())).skip as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_),
//             "::",
//             stringify!(skip)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_>())).linepos as *const _ as usize },
//         56usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Stmt_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for a_Stmt_ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "a_Stmt_ {{ s_type: {:?}, skip: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
            self.s_type, self.skip, self.__bindgen_anon_1, self.linepos
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Stmt_List_ {
    pub stmt: root::a_Stmt,
    pub next: root::a_Stmt_List,
    pub linepos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Stmt_List_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Stmt_List_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Stmt_List_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Stmt_List_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Stmt_List_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).stmt as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_List_),
//             "::",
//             stringify!(stmt)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).next as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_List_),
//             "::",
//             stringify!(next)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Stmt_List_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Stmt_List_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Class_Def_ {
    pub decl: root::ae_Keyword,
    pub name: root::a_Id_List,
    pub ext: root::a_Class_Ext,
    pub body: root::a_Class_Body,
    pub type_: root::t_CKTYPE,
    pub iface: ::std::os::raw::c_int,
    pub home: root::t_CKNSPC,
    pub linepos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Class_Def_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Class_Def_>(),
//         64usize,
//         concat!("Size of: ", stringify!(a_Class_Def_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Class_Def_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Class_Def_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).decl as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Def_),
//             "::",
//             stringify!(decl)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).name as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Def_),
//             "::",
//             stringify!(name)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).ext as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Def_),
//             "::",
//             stringify!(ext)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).body as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Def_),
//             "::",
//             stringify!(body)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).type_ as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Def_),
//             "::",
//             stringify!(type_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).iface as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Def_),
//             "::",
//             stringify!(iface)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).home as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Def_),
//             "::",
//             stringify!(home)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).linepos as *const _ as usize },
//         56usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Def_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Class_Def_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Class_Ext_ {
    pub extend_id: root::a_Id_List,
    pub impl_list: root::a_Id_List,
    pub linepos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Class_Ext_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Class_Ext_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Class_Ext_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Class_Ext_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Class_Ext_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).extend_id as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Ext_),
//             "::",
//             stringify!(extend_id)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).impl_list as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Ext_),
//             "::",
//             stringify!(impl_list)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Ext_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Class_Ext_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Class_Body_ {
    pub section: root::a_Section,
    pub next: root::a_Class_Body,
    pub linepos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Class_Body_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Class_Body_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Class_Body_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Class_Body_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Class_Body_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).section as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Body_),
//             "::",
//             stringify!(section)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).next as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Body_),
//             "::",
//             stringify!(next)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Class_Body_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Class_Body_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Id_List_ {
    pub xid: root::S_Symbol,
    pub next: root::a_Id_List,
    pub linepos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Id_List_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Id_List_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Id_List_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Id_List_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Id_List_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Id_List_>())).xid as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Id_List_),
//             "::",
//             stringify!(xid)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Id_List_>())).next as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Id_List_),
//             "::",
//             stringify!(next)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Id_List_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Id_List_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Id_List_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ae_Func_Type_ae_func_user: root::ae_Func_Type = 0;
pub const ae_Func_Type_ae_func_builtin: root::ae_Func_Type = 1;
pub type ae_Func_Type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Func_Def_ {
    pub func_decl: root::ae_Keyword,
    pub static_decl: root::ae_Keyword,
    pub type_decl: root::a_Type_Decl,
    pub ret_type: root::t_CKTYPE,
    pub name: root::S_Symbol,
    pub arg_list: root::a_Arg_List,
    pub code: root::a_Stmt,
    pub ck_func: root::t_CKFUNC,
    pub global: ::std::os::raw::c_uint,
    pub s_type: ::std::os::raw::c_uint,
    pub stack_depth: ::std::os::raw::c_uint,
    pub dl_func_ptr: *mut ::std::os::raw::c_void,
    pub linepos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Func_Def_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Func_Def_>(),
//         88usize,
//         concat!("Size of: ", stringify!(a_Func_Def_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Func_Def_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Func_Def_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).func_decl as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(func_decl)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).static_decl as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(static_decl)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).type_decl as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(type_decl)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ret_type as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(ret_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).name as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(name)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).arg_list as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(arg_list)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).code as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(code)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ck_func as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(ck_func)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).global as *const _ as usize },
//         56usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(global)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).s_type as *const _ as usize },
//         60usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(s_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).stack_depth as *const _ as usize },
//         64usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(stack_depth)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).dl_func_ptr as *const _ as usize },
//         72usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(dl_func_ptr)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).linepos as *const _ as usize },
//         80usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Func_Def_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Func_Def_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const ae_Section_Type_ae_section_stmt: root::ae_Section_Type = 0;
pub const ae_Section_Type_ae_section_func: root::ae_Section_Type = 1;
pub const ae_Section_Type_ae_section_class: root::ae_Section_Type = 2;
pub type ae_Section_Type = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct a_Section_ {
    pub s_type: root::ae_Section_Type,
    pub __bindgen_anon_1: root::a_Section___bindgen_ty_1,
    pub linepos: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union a_Section___bindgen_ty_1 {
    pub stmt_list: root::a_Stmt_List,
    pub class_def: root::a_Class_Def,
    pub func_def: root::a_Func_Def,
    _bindgen_union_align: u64,
}
// #[test]
// fn bindgen_test_layout_a_Section___bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Section___bindgen_ty_1>(),
//         8usize,
//         concat!("Size of: ", stringify!(a_Section___bindgen_ty_1))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Section___bindgen_ty_1>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Section___bindgen_ty_1))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).stmt_list as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Section___bindgen_ty_1),
//             "::",
//             stringify!(stmt_list)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).class_def as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Section___bindgen_ty_1),
//             "::",
//             stringify!(class_def)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).func_def as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Section___bindgen_ty_1),
//             "::",
//             stringify!(func_def)
//         )
//     );
// }
impl Default for a_Section___bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for a_Section___bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "a_Section___bindgen_ty_1 {{ union }}")
    }
}
// #[test]
// fn bindgen_test_layout_a_Section_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Section_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Section_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Section_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Section_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Section_>())).s_type as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Section_),
//             "::",
//             stringify!(s_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Section_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Section_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Section_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for a_Section_ {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "a_Section_ {{ s_type: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
            self.s_type, self.__bindgen_anon_1, self.linepos
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct a_Program_ {
    pub section: root::a_Section,
    pub next: root::a_Program,
    pub linepos: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_a_Program_() {
//     assert_eq!(
//         ::std::mem::size_of::<a_Program_>(),
//         24usize,
//         concat!("Size of: ", stringify!(a_Program_))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<a_Program_>(),
//         8usize,
//         concat!("Alignment of ", stringify!(a_Program_))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Program_>())).section as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Program_),
//             "::",
//             stringify!(section)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Program_>())).next as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Program_),
//             "::",
//             stringify!(next)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<a_Program_>())).linepos as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(a_Program_),
//             "::",
//             stringify!(linepos)
//         )
//     );
// }
impl Default for a_Program_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
