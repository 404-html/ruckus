/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> Hash for __BindgenUnionField<T> {
    fn hash<H: Hasher>(&self, _state: &mut H) {}
}
impl<T> PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> Eq for __BindgenUnionField<T> {}

pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 8;
pub const __clang_minor__: u32 = 0;
pub const __clang_patchlevel__: u32 = 0;
pub const __clang_version__ : & 'static [ u8 ; 165usize ] = b"8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
pub const __GNUC_MINOR__: u32 = 2;
pub const __GNUC_PATCHLEVEL__: u32 = 1;
pub const __GNUC__: u32 = 4;
pub const __GXX_ABI_VERSION: u32 = 1002;
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__ : & 'static [ u8 ; 188usize ] = b"4.2.1 Compatible Clang 8.0.0 (https://github.com/llvm-mirror/clang 27ff8dcc77fd7c9f1bcf181b25eaa7d68777fdfe) (https://github.com/llvm-mirror/llvm 718039ebb75d709b91dcc3ca18eddedb283892fd)\0" ;
pub const __STRICT_ANSI__: u32 = 1;
pub const __GXX_EXPERIMENTAL_CXX0X__: u32 = 1;
pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
pub const __cpp_rtti: u32 = 199711;
pub const __cpp_exceptions: u32 = 199711;
pub const __cpp_unicode_characters: u32 = 200704;
pub const __cpp_raw_strings: u32 = 200710;
pub const __cpp_unicode_literals: u32 = 200710;
pub const __cpp_user_defined_literals: u32 = 200809;
pub const __cpp_lambdas: u32 = 200907;
pub const __cpp_constexpr: u32 = 201603;
pub const __cpp_range_based_for: u32 = 201603;
pub const __cpp_static_assert: u32 = 201411;
pub const __cpp_decltype: u32 = 200707;
pub const __cpp_attributes: u32 = 200809;
pub const __cpp_rvalue_references: u32 = 200610;
pub const __cpp_variadic_templates: u32 = 200704;
pub const __cpp_initializer_lists: u32 = 200806;
pub const __cpp_delegating_constructors: u32 = 200604;
pub const __cpp_nsdmi: u32 = 200809;
pub const __cpp_inheriting_constructors: u32 = 201511;
pub const __cpp_ref_qualifiers: u32 = 200710;
pub const __cpp_alias_templates: u32 = 200704;
pub const __cpp_threadsafe_static_init: u32 = 200806;
pub const __cpp_binary_literals: u32 = 201304;
pub const __cpp_digit_separators: u32 = 201309;
pub const __cpp_init_captures: u32 = 201304;
pub const __cpp_generic_lambdas: u32 = 201304;
pub const __cpp_decltype_auto: u32 = 201304;
pub const __cpp_return_type_deduction: u32 = 201304;
pub const __cpp_aggregate_nsdmi: u32 = 201304;
pub const __cpp_variable_templates: u32 = 201304;
pub const __cpp_hex_float: u32 = 201603;
pub const __cpp_inline_variables: u32 = 201606;
pub const __cpp_noexcept_function_type: u32 = 201510;
pub const __cpp_capture_star_this: u32 = 201603;
pub const __cpp_if_constexpr: u32 = 201606;
pub const __cpp_deduction_guides: u32 = 201703;
pub const __cpp_template_auto: u32 = 201606;
pub const __cpp_namespace_attributes: u32 = 201411;
pub const __cpp_enumerator_attributes: u32 = 201411;
pub const __cpp_nested_namespace_definitions: u32 = 201411;
pub const __cpp_variadic_using: u32 = 201611;
pub const __cpp_aggregate_bases: u32 = 201603;
pub const __cpp_structured_bindings: u32 = 201606;
pub const __cpp_nontype_template_args: u32 = 201411;
pub const __cpp_fold_expressions: u32 = 201603;
pub const __cpp_guaranteed_copy_elision: u32 = 201606;
pub const __cpp_nontype_template_parameter_auto: u32 = 201606;
pub const __cpp_aligned_new: u32 = 201606;
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __EXCEPTIONS: u32 = 1;
pub const __GXX_RTTI: u32 = 1;
pub const __DEPRECATED: u32 = 1;
pub const __GNUG__: u32 = 4;
pub const __GXX_WEAK__: u32 = 1;
pub const __OPTIMIZE__: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _LP64: u32 = 1;
pub const __LP64__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u64 = 9223372036854775807;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 2147483647;
pub const __WINT_MAX__: u32 = 4294967295;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: i32 = -1;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
pub const __INTPTR_MAX__: u64 = 9223372036854775807;
pub const __UINTPTR_MAX__: i32 = -1;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 8;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 8;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
pub const __SIZEOF_SIZE_T__: u32 = 8;
pub const __SIZEOF_WCHAR_T__: u32 = 4;
pub const __SIZEOF_WINT_T__: u32 = 4;
pub const __SIZEOF_INT128__: u32 = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __PTRDIFF_WIDTH__: u32 = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __INTPTR_WIDTH__: u32 = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __SIZE_WIDTH__: u32 = 64;
pub const __WCHAR_WIDTH__: u32 = 32;
pub const __WINT_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINTPTR_WIDTH__: u32 = 64;
pub const __FLT16_HAS_DENORM__: u32 = 1;
pub const __FLT16_DIG__: u32 = 3;
pub const __FLT16_DECIMAL_DIG__: u32 = 5;
pub const __FLT16_HAS_INFINITY__: u32 = 1;
pub const __FLT16_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT16_MANT_DIG__: u32 = 11;
pub const __FLT16_MAX_10_EXP__: u32 = 4;
pub const __FLT16_MAX_EXP__: u32 = 15;
pub const __FLT16_MIN_10_EXP__: i32 = -13;
pub const __FLT16_MIN_EXP__: i32 = -14;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 18;
pub const __LDBL_DECIMAL_DIG__: u32 = 21;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 64;
pub const __LDBL_MAX_10_EXP__: u32 = 4932;
pub const __LDBL_MAX_EXP__: u32 = 16384;
pub const __LDBL_MIN_10_EXP__: i32 = -4931;
pub const __LDBL_MIN_EXP__: i32 = -16381;
pub const __POINTER_WIDTH__: u32 = 64;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __GNUC_GNU_INLINE__: u32 = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __PIC__: u32 = 2;
pub const __pic__: u32 = 2;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 21;
pub const __SSP_STRONG__: u32 = 2;
pub const __code_model_small_: u32 = 1;
pub const __amd64__: u32 = 1;
pub const __amd64: u32 = 1;
pub const __x86_64: u32 = 1;
pub const __x86_64__: u32 = 1;
pub const __bdver2: u32 = 1;
pub const __bdver2__: u32 = 1;
pub const __tune_bdver2__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __AES__: u32 = 1;
pub const __PCLMUL__: u32 = 1;
pub const __LZCNT__: u32 = 1;
pub const __BMI__: u32 = 1;
pub const __POPCNT__: u32 = 1;
pub const __PRFCHW__: u32 = 1;
pub const __TBM__: u32 = 1;
pub const __LWP__: u32 = 1;
pub const __XOP__: u32 = 1;
pub const __FMA4__: u32 = 1;
pub const __SSE4A__: u32 = 1;
pub const __FMA__: u32 = 1;
pub const __F16C__: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __XSAVE__: u32 = 1;
pub const __AVX__: u32 = 1;
pub const __SSE4_2__: u32 = 1;
pub const __SSE4_1__: u32 = 1;
pub const __SSSE3__: u32 = 1;
pub const __SSE3__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: u32 = 1;
pub const __SIZEOF_FLOAT128__: u32 = 16;
pub const __unix: u32 = 1;
pub const __unix__: u32 = 1;
pub const __linux: u32 = 1;
pub const __linux__: u32 = 1;
pub const __gnu_linux__: u32 = 1;
pub const __ELF__: u32 = 1;
pub const _GNU_SOURCE: u32 = 1;
pub const __FLOAT128__: u32 = 1;
pub const __STDC__: u32 = 1;
pub const __STDC_HOSTED__: u32 = 1;
pub const __cplusplus: u32 = 201703;
pub const __STDCPP_DEFAULT_NEW_ALIGNMENT__: u32 = 16;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub const HAVE_CONFIG_H: u32 = 1;
pub const HAVE_POLL: u32 = 1;
pub const HAVE_LIBPTHREAD: u32 = 1;
pub const ENABLE_THREADS: u32 = 1;
pub const __PLATFORM_LINUX__: u32 = 1;
pub const __LINUX_ALSA__: u32 = 1;
pub const __UNIX_JACK__: u32 = 1;
pub const USE_ALSA: u32 = 1;
pub const USE_DLTRICK_ALSA: u32 = 1;
pub const USE_OSS: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 8;
pub const __GLIBCXX__: u32 = 20181127;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __USE_EXTERN_INLINES: u32 = 1;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_WEAK_REF: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const STDC_HEADERS: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const __EXCEPTION_H: u32 = 1;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const _EXCEPTION_DEFINES_H: u32 = 1;
pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
pub const _HASH_BYTES_H: u32 = 1;
pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const __cpp_lib_launder: u32 = 201606;
pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
pub const _MOVE_H: u32 = 1;
pub const _CONCEPT_CHECK_H: u32 = 1;
pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const _GLIBCXX_IOSTREAM: u32 = 1;
pub const _GLIBCXX_OSTREAM: u32 = 1;
pub const _GLIBCXX_IOS: u32 = 1;
pub const _GLIBCXX_IOSFWD: u32 = 1;
pub const _STRINGFWD_H: u32 = 1;
pub const _MEMORYFWD_H: u32 = 1;
pub const _GLIBCXX_POSTYPES_H: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WEOF: u32 = 4294967295;
pub const _GLIBCXX_CWCHAR: u32 = 1;
pub const _CHAR_TRAITS_H: u32 = 1;
pub const _STL_ALGOBASE_H: u32 = 1;
pub const _FUNCTEXCEPT_H: u32 = 1;
pub const _CPP_TYPE_TRAITS_H: u32 = 1;
pub const _EXT_TYPE_TRAITS: u32 = 1;
pub const _EXT_NUMERIC_TRAITS: u32 = 1;
pub const _STL_PAIR_H: u32 = 1;
pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
pub const _STL_ITERATOR_H: u32 = 1;
pub const _PTR_TRAITS_H: u32 = 1;
pub const __cpp_lib_array_constexpr: u32 = 201603;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_constexpr_char_traits: u32 = 201611;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _LOCALE_FWD_H: u32 = 1;
pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const _GLIBCXX_CLOCALE: u32 = 1;
pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
pub const _CTYPE_H: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _GLIBCXX_CCTYPE: u32 = 1;
pub const _IOS_BASE_H: u32 = 1;
pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 1;
pub const __GTHREADS: u32 = 1;
pub const __GTHREADS_CXX0X: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const __GTHREAD_HAS_COND: u32 = 1;
pub const __GTHREAD_ONCE_INIT: u32 = 0;
pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
pub const _LOCALE_CLASSES_H: u32 = 1;
pub const _GLIBCXX_STRING: u32 = 1;
pub const _ALLOCATOR_H: u32 = 1;
pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
pub const _NEW_ALLOCATOR_H: u32 = 1;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_allocator_is_always_equal: u32 = 201411;
pub const _OSTREAM_INSERT_H: u32 = 1;
pub const _CXXABI_FORCED_H: u32 = 1;
pub const _STL_FUNCTION_H: u32 = 1;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const _BACKWARD_BINDERS_H: u32 = 1;
pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const _BASIC_STRING_H: u32 = 1;
pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
pub const _ALLOC_TRAITS_H: u32 = 1;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const _GLIBCXX_STRING_VIEW: u32 = 1;
pub const _GLIBCXX_NUMERIC_LIMITS: u32 = 1;
pub const _FUNCTIONAL_HASH_H: u32 = 1;
pub const __cpp_lib_string_view: u32 = 201603;
pub const _GLIBCXX_STRING_VIEW_TCC: u32 = 1;
pub const _STRING_CONVERSIONS_H: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _BITS_STDIO_H: u32 = 1;
pub const _GLIBCXX_CSTDIO: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const _GLIBCXX_CERRNO: u32 = 1;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const _BASIC_STRING_TCC: u32 = 1;
pub const _LOCALE_CLASSES_TCC: u32 = 1;
pub const _GLIBCXX_SYSTEM_ERROR: u32 = 1;
pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
pub const _GLIBCXX_STDEXCEPT: u32 = 1;
pub const _GLIBXX_STREAMBUF: u32 = 1;
pub const _STREAMBUF_TCC: u32 = 1;
pub const _BASIC_IOS_H: u32 = 1;
pub const _LOCALE_FACETS_H: u32 = 1;
pub const _WCTYPE_H: u32 = 1;
pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_CWCTYPE: u32 = 1;
pub const _STREAMBUF_ITERATOR_H: u32 = 1;
pub const _GLIBCXX_NUM_FACETS: u32 = 28;
pub const _GLIBCXX_NUM_CXX11_FACETS: u32 = 16;
pub const _GLIBCXX_NUM_UNICODE_FACETS: u32 = 2;
pub const _LOCALE_FACETS_TCC: u32 = 1;
pub const _BASIC_IOS_TCC: u32 = 1;
pub const _OSTREAM_TCC: u32 = 1;
pub const _GLIBCXX_ISTREAM: u32 = 1;
pub const _ISTREAM_TCC: u32 = 1;
pub const _GLIBCXX_VECTOR: u32 = 1;
pub const _STL_CONSTRUCT_H: u32 = 1;
pub const _STL_UNINITIALIZED_H: u32 = 1;
pub const _GLIBCXX_UTILITY: u32 = 1;
pub const _STL_RELOPS_H: u32 = 1;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const _GLIBCXX_USE_MAKE_INTEGER_SEQ: u32 = 1;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_as_const: u32 = 201510;
pub const _STL_VECTOR_H: u32 = 1;
pub const _STL_BVECTOR_H: u32 = 1;
pub const _VECTOR_TCC: u32 = 1;
pub const _GLIBCXX_QUEUE: u32 = 1;
pub const _GLIBCXX_DEQUE: u32 = 1;
pub const _STL_DEQUE_H: u32 = 1;
pub const _GLIBCXX_DEQUE_BUF_SIZE: u32 = 512;
pub const _DEQUE_TCC: u32 = 1;
pub const _STL_HEAP_H: u32 = 1;
pub const _STL_QUEUE_H: u32 = 1;
pub const _USES_ALLOCATOR_H: u32 = 1;
pub mod std {

    pub type nullptr_t = *const ::std::os::raw::c_void;
    pub mod __cxx11 {

        pub type string =
            crate::core::midi::rtme::root::std::__cxx11::basic_string<::std::os::raw::c_char>;
        pub type wstring = crate::core::midi::rtme::root::std::__cxx11::basic_string<u32>;
        pub type u16string = crate::core::midi::rtme::root::std::__cxx11::basic_string<u16>;
        pub type u32string = crate::core::midi::rtme::root::std::__cxx11::basic_string<u32>;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_stringbuf {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_istringstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_ostringstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_stringstream {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct time_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct time_get_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct money_get {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct money_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct messages {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct messages_byname {
            pub _address: u8,
        }
        #[repr(C)]
        pub struct basic_string<_CharT> {
            pub _M_dataplus: crate::core::midi::rtme::root::std::__cxx11::basic_string__Alloc_hider,
            pub _M_string_length:
                crate::core::midi::rtme::root::std::__cxx11::basic_string_size_type,
            pub __bindgen_anon_1:
                crate::core::midi::rtme::root::std::__cxx11::basic_string__bindgen_ty_2<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type basic_string__Char_alloc_type = [u8; 0usize];
        pub type basic_string__Alloc_traits =
            crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits;
        pub type basic_string_traits_type<_Traits> = _Traits;
        pub type basic_string_value_type = [u8; 0usize];
        pub type basic_string_allocator_type =
            crate::core::midi::rtme::root::std::__cxx11::basic_string__Char_alloc_type;
        pub type basic_string_size_type = [u8; 0usize];
        pub type basic_string_difference_type = [u8; 0usize];
        pub type basic_string_reference = [u8; 0usize];
        pub type basic_string_const_reference = [u8; 0usize];
        pub type basic_string_pointer = [u8; 0usize];
        pub type basic_string_const_pointer = [u8; 0usize];
        pub type basic_string_iterator =
            crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator<
                root::std::__cxx11::basic_string_pointer,
            >;
        pub type basic_string_const_iterator =
            crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator<
                root::std::__cxx11::basic_string_const_pointer,
            >;
        pub type basic_string_const_reverse_iterator =
            crate::core::midi::rtme::root::std::reverse_iterator<
                root::std::__cxx11::basic_string_const_iterator,
            >;
        pub type basic_string_reverse_iterator =
            crate::core::midi::rtme::root::std::reverse_iterator<
                root::std::__cxx11::basic_string_iterator,
            >;
        pub type basic_string___const_iterator =
            crate::core::midi::rtme::root::std::__cxx11::basic_string_const_iterator;
        pub type basic_string___sv_type<_CharT> =
            crate::core::midi::rtme::root::std::basic_string_view<_CharT>;
        pub type basic_string__If_sv = crate::core::midi::rtme::root::std::enable_if_t;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_string___sv_wrapper<_CharT> {
            pub _M_sv: crate::core::midi::rtme::root::std::__cxx11::basic_string___sv_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for basic_string___sv_wrapper<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct basic_string__Alloc_hider {
            pub _M_p: crate::core::midi::rtme::root::std::__cxx11::basic_string_pointer,
        }
        impl Default for basic_string__Alloc_hider {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for basic_string__Alloc_hider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_string__Alloc_hider {{  }}")
            }
        }
        impl PartialEq for basic_string__Alloc_hider {
            fn eq(&self, other: &basic_string__Alloc_hider) -> bool {
                self._M_p == other._M_p
            }
        }
        pub const basic_string__S_local_capacity:
            crate::core::midi::rtme::root::std::__cxx11::basic_string__bindgen_ty_1 = 0;
        pub type basic_string__bindgen_ty_1 = i32;
        #[repr(C)]
        pub struct basic_string__bindgen_ty_2<_CharT> {
            pub _M_local_buf: crate::core::midi::rtme::root::__BindgenUnionField<*mut _CharT>,
            pub _M_allocated_capacity: crate::core::midi::rtme::root::__BindgenUnionField<
                root::std::__cxx11::basic_string_size_type,
            >,
            pub bindgen_union_field: u64,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        impl<_CharT> Default for basic_string__bindgen_ty_2<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_string__bindgen_ty_2<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_string__bindgen_ty_2 {{ union }}")
            }
        }
        impl<_CharT> Default for basic_string<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_CharT> ::std::fmt::Debug for basic_string<_CharT> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "basic_string {{ _M_dataplus: {:?}, __bindgen_anon_1: {:?} }}",
                    self._M_dataplus, self.__bindgen_anon_1
                )
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct collate {
            pub _base: crate::core::midi::rtme::root::std::locale_facet,
            pub _M_c_locale_collate: crate::core::midi::rtme::root::std::__c_locale,
        }
        pub type collate_char_type<_CharT> = _CharT;
        pub type collate_string_type =
            crate::core::midi::rtme::root::std::__cxx11::basic_string<_CharT>;
        impl Default for collate {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct collate_byname {
            pub _base: crate::core::midi::rtme::root::std::__cxx11::collate,
        }
        pub type collate_byname_char_type<_CharT> = _CharT;
        pub type collate_byname_string_type =
            crate::core::midi::rtme::root::std::__cxx11::basic_string<_CharT>;
        impl Default for collate_byname {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct numpunct<_CharT> {
            pub _base: crate::core::midi::rtme::root::std::locale_facet,
            pub _M_data:
                *mut crate::core::midi::rtme::root::std::__cxx11::numpunct___cache_type<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type numpunct_char_type<_CharT> = _CharT;
        pub type numpunct_string_type =
            crate::core::midi::rtme::root::std::__cxx11::basic_string<_CharT>;
        pub type numpunct___cache_type<_CharT> =
            crate::core::midi::rtme::root::std::__numpunct_cache<_CharT>;
        impl<_CharT> Default for numpunct<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            pub static mut id: crate::core::midi::rtme::root::std::locale_id;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct numpunct_byname<_CharT> {
            pub _base: crate::core::midi::rtme::root::std::__cxx11::numpunct<_CharT>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
        }
        pub type numpunct_byname_char_type<_CharT> = _CharT;
        pub type numpunct_byname_string_type =
            crate::core::midi::rtme::root::std::__cxx11::basic_string<_CharT>;
        impl<_CharT> Default for numpunct_byname<_CharT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
    }
    #[repr(C)]
    pub struct exception__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct exception {
        pub vtable_: *const exception__bindgen_vtable,
    }
    // #[test]
    // fn bindgen_test_layout_exception() {
    //     assert_eq!(
    //         ::std::mem::size_of::<exception>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(exception))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<exception>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(exception))
    //     );
    // }
    impl Default for exception {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}exception_destructor"]
        pub fn exception_exception_destructor(
            this: *mut crate::core::midi::rtme::root::std::exception,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_exception {
        pub _base: crate::core::midi::rtme::root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_exception() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_exception>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_exception))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_exception>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_exception))
    //     );
    // }
    impl Default for bad_exception {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_exception_destructor"]
        pub fn bad_exception_bad_exception_destructor(
            this: *mut crate::core::midi::rtme::root::std::bad_exception,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_exception_what(
            this: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char;
    }
    pub type terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
    pub type unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
    extern "C" {
        pub fn set_terminate(
            arg1: crate::core::midi::rtme::root::std::terminate_handler,
        ) -> crate::core::midi::rtme::root::std::terminate_handler;
    }
    extern "C" {
        pub fn get_terminate() -> crate::core::midi::rtme::root::std::terminate_handler;
    }
    extern "C" {
        pub fn terminate();
    }
    extern "C" {
        pub fn set_unexpected(
            arg1: crate::core::midi::rtme::root::std::unexpected_handler,
        ) -> crate::core::midi::rtme::root::std::unexpected_handler;
    }
    extern "C" {
        pub fn get_unexpected() -> crate::core::midi::rtme::root::std::unexpected_handler;
    }
    extern "C" {
        pub fn unexpected();
    }
    extern "C" {
        pub fn uncaught_exception() -> bool;
    }
    extern "C" {
        pub fn uncaught_exceptions() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _Hash_bytes(
            __ptr: *const ::std::os::raw::c_void,
            __len: usize,
            __seed: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn _Fnv_hash_bytes(
            __ptr: *const ::std::os::raw::c_void,
            __len: usize,
            __seed: usize,
        ) -> usize;
    }
    #[repr(C)]
    pub struct type_info__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct type_info {
        pub vtable_: *const type_info__bindgen_vtable,
        pub __name: *const ::std::os::raw::c_char,
    }
    // #[test]
    // fn bindgen_test_layout_type_info() {
    //     assert_eq!(
    //         ::std::mem::size_of::<type_info>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(type_info))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<type_info>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(type_info))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<type_info>())).__name as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(type_info),
    //             "::",
    //             stringify!(__name)
    //         )
    //     );
    // }
    impl Default for type_info {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}type_info_destructor"]
        pub fn type_info_type_info_destructor(
            this: *mut crate::core::midi::rtme::root::std::type_info,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__is_pointer_p"]
        pub fn type_info___is_pointer_p(this: *mut ::std::os::raw::c_void) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__is_function_p"]
        pub fn type_info___is_function_p(this: *mut ::std::os::raw::c_void) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__do_catch"]
        pub fn type_info___do_catch(
            this: *mut ::std::os::raw::c_void,
            __thr_type: *const crate::core::midi::rtme::root::std::type_info,
            __thr_obj: *mut *mut ::std::os::raw::c_void,
            __outer: ::std::os::raw::c_uint,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__do_upcast"]
        pub fn type_info___do_upcast(
            this: *mut ::std::os::raw::c_void,
            __target: *const crate::core::midi::rtme::root::__cxxabiv1::__class_type_info,
            __obj_ptr: *mut *mut ::std::os::raw::c_void,
        ) -> bool;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_cast {
        pub _base: crate::core::midi::rtme::root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_cast() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_cast>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_cast))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_cast>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_cast))
    //     );
    // }
    impl Default for bad_cast {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_cast_destructor"]
        pub fn bad_cast_bad_cast_destructor(
            this: *mut crate::core::midi::rtme::root::std::bad_cast,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_cast_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_typeid {
        pub _base: crate::core::midi::rtme::root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_typeid() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_typeid>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_typeid))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_typeid>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_typeid))
    //     );
    // }
    impl Default for bad_typeid {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_typeid_destructor"]
        pub fn bad_typeid_bad_typeid_destructor(
            this: *mut crate::core::midi::rtme::root::std::bad_typeid,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_typeid_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_alloc {
        pub _base: crate::core::midi::rtme::root::std::exception,
    }
    // #[test]
    // fn bindgen_test_layout_bad_alloc() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_alloc>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_alloc))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_alloc>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_alloc))
    //     );
    // }
    impl Default for bad_alloc {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_alloc_destructor"]
        pub fn bad_alloc_bad_alloc_destructor(
            this: *mut crate::core::midi::rtme::root::std::bad_alloc,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_alloc_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bad_array_new_length {
        pub _base: crate::core::midi::rtme::root::std::bad_alloc,
    }
    // #[test]
    // fn bindgen_test_layout_bad_array_new_length() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bad_array_new_length>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(bad_array_new_length))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bad_array_new_length>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(bad_array_new_length))
    //     );
    // }
    impl Default for bad_array_new_length {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}bad_array_new_length_destructor"]
        pub fn bad_array_new_length_bad_array_new_length_destructor(
            this: *mut crate::core::midi::rtme::root::std::bad_array_new_length,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn bad_array_new_length_what(
            this: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char;
    }
    pub type align_val_t = u64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct nothrow_t {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_nothrow_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<nothrow_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(nothrow_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<nothrow_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(nothrow_t))
    //     );
    // }
    extern "C" {
        pub static nothrow: crate::core::midi::rtme::root::std::nothrow_t;
    }
    pub type new_handler = ::std::option::Option<unsafe extern "C" fn()>;
    extern "C" {
        pub fn set_new_handler(
            arg1: crate::core::midi::rtme::root::std::new_handler,
        ) -> crate::core::midi::rtme::root::std::new_handler;
    }
    extern "C" {
        pub fn get_new_handler() -> crate::core::midi::rtme::root::std::new_handler;
    }
    pub mod __exception_ptr {

        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct exception_ptr {
            pub _M_exception_object: *mut ::std::os::raw::c_void,
        }
        // #[test]
        // fn bindgen_test_layout_exception_ptr() {
        //     assert_eq!(
        //         ::std::mem::size_of::<exception_ptr>(),
        //         8usize,
        //         concat!("Size of: ", stringify!(exception_ptr))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<exception_ptr>(),
        //         8usize,
        //         concat!("Alignment of ", stringify!(exception_ptr))
        //     );
        //     assert_eq!(
        //         unsafe {
        //             &(*(::std::ptr::null::<exception_ptr>()))._M_exception_object as *const _
        //                 as usize
        //         },
        //         0usize,
        //         concat!(
        //             "Offset of field: ",
        //             stringify!(exception_ptr),
        //             "::",
        //             stringify!(_M_exception_object)
        //         )
        //     );
        // }
        extern "C" {
            #[link_name = "\u{1}swap"]
            pub fn exception_ptr_swap(
                this: *mut crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
                arg1: *mut crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__cxa_exception_type"]
            pub fn exception_ptr___cxa_exception_type(
                this: *const crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
            ) -> *const crate::core::midi::rtme::root::std::type_info;
        }
        extern "C" {
            #[link_name = "\u{1}exception_ptr"]
            pub fn exception_ptr_exception_ptr(
                this: *mut crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
            );
        }
        extern "C" {
            #[link_name = "\u{1}exception_ptr"]
            pub fn exception_ptr_exception_ptr1(
                this: *mut crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
                arg1: *const crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
            );
        }
        extern "C" {
            #[link_name = "\u{1}exception_ptr_destructor"]
            pub fn exception_ptr_exception_ptr_destructor(
                this: *mut crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
            );
        }
        impl Default for exception_ptr {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl exception_ptr {
            #[inline]
            pub unsafe fn swap(
                &mut self,
                arg1: *mut crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
            ) {
                exception_ptr_swap(self, arg1)
            }
            #[inline]
            pub unsafe fn __cxa_exception_type(
                &self,
            ) -> *const crate::core::midi::rtme::root::std::type_info {
                exception_ptr___cxa_exception_type(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                exception_ptr_exception_ptr(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(
                arg1: *const crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                exception_ptr_exception_ptr1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                exception_ptr_exception_ptr_destructor(self)
            }
        }
    }
    extern "C" {
        pub fn current_exception(
        ) -> crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr;
    }
    extern "C" {
        pub fn rethrow_exception(
            arg1: crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
        );
    }
    pub type integral_constant_value_type<_Tp> = _Tp;
    pub type integral_constant_type = u8;
    extern "C" {
        pub static value: _Tp;
    }
    pub type true_type = u8;
    pub type false_type = u8;
    pub type __bool_constant = u8;
    pub type bool_constant = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __or_ {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___or__open0_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__or_>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__or_)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__or_>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__or_)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __and_ {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___and__open0_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__and_>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__and_)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__and_>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__and_)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __not_ {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct conjunction {
        pub _address: u8,
    }
    impl Default for conjunction {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct disjunction {
        pub _address: u8,
    }
    impl Default for disjunction {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct negation {
        pub _address: u8,
    }
    impl Default for negation {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __success_type {
        pub _address: u8,
    }
    pub type __success_type_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __failure_type {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___failure_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__failure_type>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__failure_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__failure_type>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__failure_type))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_void_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_void_helper_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_void_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_void_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_void_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_void_helper)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_void {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_integral_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_bool__close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_long_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integral_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integral_helper)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_integral {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_floating_point_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_floating_point_helper_open0_float_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_floating_point_helper_open0_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_floating_point_helper_open0_long_double_close0_instantiation()
    // {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating_point_helper)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_floating_point {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_array {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_pointer_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_lvalue_reference {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_rvalue_reference {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_member_object_pointer_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_member_object_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_member_function_pointer_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_member_function_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_enum {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_union {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_class {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_function {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_null_pointer_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_null_pointer_helper_open0_nullptr_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_null_pointer_helper>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_null_pointer_helper)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_null_pointer_helper>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_null_pointer_helper)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_null_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nullptr_t {
        pub _address: u8,
    }
    impl Default for __is_nullptr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_reference {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_arithmetic {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_fundamental {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_object {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_scalar {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_compound {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_member_pointer_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_member_pointer {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_referenceable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_const {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_volatile {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivial {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_copyable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_standard_layout {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_pod {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_literal_type {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_empty {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_polymorphic {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_final {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_abstract {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_signed {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_unsigned {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_array_known_bounds {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_array_unknown_bounds {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_is_destructible_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_is_destructible_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_is_destructible_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_is_destructible_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_is_destructible_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__do_is_destructible_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_destructible_impl {
        pub _address: u8,
    }
    pub type __is_destructible_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_destructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_is_nt_destructible_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_is_nt_destructible_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_is_nt_destructible_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_is_nt_destructible_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_is_nt_destructible_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__do_is_nt_destructible_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_destructible_impl {
        pub _address: u8,
    }
    pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_destructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_is_default_constructible_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_is_default_constructible_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_is_default_constructible_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_is_default_constructible_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_is_default_constructible_impl>(),
    //         1usize,
    //         concat!(
    //             "Alignment of ",
    //             stringify!(__do_is_default_constructible_impl)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_default_constructible_impl {
        pub _address: u8,
    }
    pub type __is_default_constructible_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_default_constructible_atom {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_default_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_copy_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_move_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_default_constructible_atom {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_default_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_constructible_impl {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_copy_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_move_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_copy_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_move_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_assignable_impl {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_copy_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_move_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_default_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_is_implicitly_default_constructible_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_is_implicitly_default_constructible_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_is_implicitly_default_constructible_impl>(),
    //         1usize,
    //         concat!(
    //             "Size of: ",
    //             stringify!(__do_is_implicitly_default_constructible_impl)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_is_implicitly_default_constructible_impl>(),
    //         1usize,
    //         concat!(
    //             "Alignment of ",
    //             stringify!(__do_is_implicitly_default_constructible_impl)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}__test"]
        pub fn __do_is_implicitly_default_constructible_impl___test(
        ) -> crate::core::midi::rtme::root::std::false_type;
    }
    impl __do_is_implicitly_default_constructible_impl {
        #[inline]
        pub unsafe fn __test() -> crate::core::midi::rtme::root::std::false_type {
            __do_is_implicitly_default_constructible_impl___test()
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_implicitly_default_constructible_impl {
        pub _address: u8,
    }
    pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_implicitly_default_constructible_safe {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_implicitly_default_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_copy_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_move_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_copy_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_move_assignable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_trivially_destructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct has_virtual_destructor {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct alignment_of {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct rank {
        pub _base: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_same {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_base_of {
        pub _address: u8,
    }
    pub type __is_convertible_helper_type = crate::core::midi::rtme::root::std::is_void;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_convertible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_const {
        pub _address: u8,
    }
    pub type remove_const_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_volatile {
        pub _address: u8,
    }
    pub type remove_volatile_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_cv {
        pub _address: u8,
    }
    pub type remove_cv_type = crate::core::midi::rtme::root::std::remove_const;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_const {
        pub _address: u8,
    }
    pub type add_const_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_volatile {
        pub _address: u8,
    }
    pub type add_volatile_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_cv {
        pub _address: u8,
    }
    pub type add_cv_type = crate::core::midi::rtme::root::std::add_const;
    pub type remove_const_t = crate::core::midi::rtme::root::std::remove_const;
    pub type remove_volatile_t = crate::core::midi::rtme::root::std::remove_volatile;
    pub type remove_cv_t = crate::core::midi::rtme::root::std::remove_cv;
    pub type add_const_t = crate::core::midi::rtme::root::std::add_const;
    pub type add_volatile_t = crate::core::midi::rtme::root::std::add_volatile;
    pub type add_cv_t = crate::core::midi::rtme::root::std::add_cv;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_reference {
        pub _address: u8,
    }
    pub type remove_reference_type<_Tp> = _Tp;
    pub type __add_lvalue_reference_helper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_lvalue_reference {
        pub _address: u8,
    }
    pub type __add_rvalue_reference_helper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_rvalue_reference {
        pub _address: u8,
    }
    pub type remove_reference_t = crate::core::midi::rtme::root::std::remove_reference;
    pub type add_lvalue_reference_t = crate::core::midi::rtme::root::std::add_lvalue_reference;
    pub type add_rvalue_reference_t = crate::core::midi::rtme::root::std::add_rvalue_reference;
    pub type __match_cv_qualifiers___match = u8;
    pub type __match_cv_qualifiers___type =
        crate::core::midi::rtme::root::std::__match_cv_qualifiers___match;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __make_unsigned {
        pub _address: u8,
    }
    pub type __make_unsigned___type<_Tp> = _Tp;
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct make_unsigned {
        pub _address: u8,
    }
    pub type make_unsigned_type = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __make_signed {
        pub _address: u8,
    }
    pub type __make_signed___type<_Tp> = _Tp;
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct make_signed {
        pub _address: u8,
    }
    pub type make_signed_type = u8;
    pub type make_signed_t = crate::core::midi::rtme::root::std::make_signed;
    pub type make_unsigned_t = crate::core::midi::rtme::root::std::make_unsigned;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_extent {
        pub _address: u8,
    }
    pub type remove_extent_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_all_extents {
        pub _address: u8,
    }
    pub type remove_all_extents_type<_Tp> = _Tp;
    pub type remove_extent_t = crate::core::midi::rtme::root::std::remove_extent;
    pub type remove_all_extents_t = crate::core::midi::rtme::root::std::remove_all_extents;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __remove_pointer_helper {
        pub _address: u8,
    }
    pub type __remove_pointer_helper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct remove_pointer {
        pub _address: u8,
    }
    impl Default for remove_pointer {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __add_pointer_helper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct add_pointer {
        pub _address: u8,
    }
    pub type remove_pointer_t = crate::core::midi::rtme::root::std::remove_pointer;
    pub type add_pointer_t = crate::core::midi::rtme::root::std::add_pointer;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __aligned_storage_msa___type {
        pub __data: *mut ::std::os::raw::c_uchar,
        pub __align: crate::core::midi::rtme::root::std::__aligned_storage_msa___type__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __aligned_storage_msa___type__bindgen_ty_1 {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___aligned_storage_msa___type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__aligned_storage_msa___type>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(__aligned_storage_msa___type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__aligned_storage_msa___type>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(__aligned_storage_msa___type))
    //     );
    // }
    impl Default for __aligned_storage_msa___type {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __aligned_storage_msa___type {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__aligned_storage_msa___type {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union aligned_storage_type {
        pub __data: *mut ::std::os::raw::c_uchar,
        pub __align: crate::core::midi::rtme::root::std::aligned_storage_type__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct aligned_storage_type__bindgen_ty_1 {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_aligned_storage_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<aligned_storage_type>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(aligned_storage_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<aligned_storage_type>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(aligned_storage_type))
    //     );
    // }
    impl Default for aligned_storage_type {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for aligned_storage_type {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "aligned_storage_type {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __strictest_alignment {
        pub _address: u8,
    }
    pub type aligned_union___strictest = crate::core::midi::rtme::root::std::__strictest_alignment;
    pub type aligned_union_type = u8;
    extern "C" {
        pub static alignment_value: usize;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct decay {
        pub _address: u8,
    }
    pub type decay___remove_type = crate::core::midi::rtme::root::std::remove_reference;
    pub type decay_type = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct reference_wrapper {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __strip_reference_wrapper {
        pub _address: u8,
    }
    pub type __strip_reference_wrapper___type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __decay_and_strip {
        pub _address: u8,
    }
    pub type __decay_and_strip___type =
        crate::core::midi::rtme::root::std::__strip_reference_wrapper;
    pub type _Require = u8;
    pub type conditional_type<_Iftrue> = _Iftrue;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct common_type {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_common_type_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_common_type_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_common_type_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_common_type_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_common_type_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__do_common_type_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __common_type_impl {
        pub _address: u8,
    }
    pub type __common_type_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __do_member_type_wrapper {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___do_member_type_wrapper() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__do_member_type_wrapper>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__do_member_type_wrapper))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__do_member_type_wrapper>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__do_member_type_wrapper))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __member_type_wrapper {
        pub _address: u8,
    }
    pub type __member_type_wrapper_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __expanded_common_type_wrapper {
        pub _address: u8,
    }
    pub type __expanded_common_type_wrapper_type = crate::core::midi::rtme::root::std::common_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct underlying_type {
        pub _address: u8,
    }
    pub type underlying_type_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __declval_protector {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_unsigned_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___make_signed_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__make_signed>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__make_signed)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct result_of {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_memfun_ref {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_memfun_ref() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_memfun_ref>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_memfun_ref))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_memfun_ref>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_memfun_ref))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_memfun_deref {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_memfun_deref() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_memfun_deref>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_memfun_deref))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_memfun_deref>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_memfun_deref))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_memobj_ref {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_memobj_ref() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_memobj_ref>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_memobj_ref))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_memobj_ref>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_memobj_ref))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_memobj_deref {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_memobj_deref() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_memobj_deref>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_memobj_deref))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_memobj_deref>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_memobj_deref))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_other {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___invoke_other() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__invoke_other>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__invoke_other))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__invoke_other>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__invoke_other))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_success {
        pub _address: u8,
    }
    pub type __result_of_success___invoke_type<_Tag> = _Tag;
    impl Default for __result_of_success {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun_ref_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_memfun_ref_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_memfun_ref_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_memfun_ref_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_memfun_ref_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_memfun_ref_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun_ref {
        pub _address: u8,
    }
    pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun_deref_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_memfun_deref_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_memfun_deref_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_memfun_deref_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_memfun_deref_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_memfun_deref_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun_deref {
        pub _address: u8,
    }
    pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj_ref_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_memobj_ref_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_memobj_ref_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_memobj_ref_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_memobj_ref_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_memobj_ref_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj_ref {
        pub _address: u8,
    }
    pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj_deref_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_memobj_deref_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_memobj_deref_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_memobj_deref_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_memobj_deref_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_memobj_deref_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj_deref {
        pub _address: u8,
    }
    pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memobj {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_memfun {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __inv_unwrap {
        pub _address: u8,
    }
    pub type __inv_unwrap_type<_Tp> = _Tp;
    pub type __result_of_impl_type = crate::core::midi::rtme::root::std::__failure_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __result_of_other_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___result_of_other_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__result_of_other_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__result_of_other_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__result_of_other_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__result_of_other_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __invoke_result {
        pub _address: u8,
    }
    pub type aligned_storage_t = u8;
    pub type aligned_union_t = u8;
    pub type decay_t = crate::core::midi::rtme::root::std::decay;
    pub type enable_if_t = u8;
    pub type conditional_t = u8;
    pub type common_type_t = crate::core::midi::rtme::root::std::common_type;
    pub type underlying_type_t = crate::core::midi::rtme::root::std::underlying_type;
    pub type result_of_t = crate::core::midi::rtme::root::std::result_of;
    pub type __enable_if_t = u8;
    pub type __void_t = ::std::os::raw::c_void;
    pub type void_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __detector {
        pub _address: u8,
    }
    pub type __detector_value_t = crate::core::midi::rtme::root::std::false_type;
    pub type __detector_type<_Default> = _Default;
    pub type __detected_or = crate::core::midi::rtme::root::std::__detector;
    pub type __detected_or_t = crate::core::midi::rtme::root::std::__detected_or;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct tuple {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_tuple_like_impl {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_tuple_like {
        pub _address: u8,
    }
    pub mod __swappable_details {

        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_swappable_impl {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout___do_is_swappable_impl() {
        //     assert_eq!(
        //         ::std::mem::size_of::<__do_is_swappable_impl>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(__do_is_swappable_impl))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<__do_is_swappable_impl>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(__do_is_swappable_impl))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_nothrow_swappable_impl {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout___do_is_nothrow_swappable_impl() {
        //     assert_eq!(
        //         ::std::mem::size_of::<__do_is_nothrow_swappable_impl>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(__do_is_nothrow_swappable_impl))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<__do_is_nothrow_swappable_impl>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(__do_is_nothrow_swappable_impl))
        //     );
        // }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_swappable_impl {
        pub _address: u8,
    }
    pub type __is_swappable_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_swappable_impl {
        pub _address: u8,
    }
    pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_swappable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_swappable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_swappable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_swappable {
        pub _address: u8,
    }
    pub mod __swappable_with_details {

        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_swappable_with_impl {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout___do_is_swappable_with_impl() {
        //     assert_eq!(
        //         ::std::mem::size_of::<__do_is_swappable_with_impl>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(__do_is_swappable_with_impl))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<__do_is_swappable_with_impl>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(__do_is_swappable_with_impl))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_nothrow_swappable_with_impl {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout___do_is_nothrow_swappable_with_impl() {
        //     assert_eq!(
        //         ::std::mem::size_of::<__do_is_nothrow_swappable_with_impl>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(__do_is_nothrow_swappable_with_impl))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<__do_is_nothrow_swappable_with_impl>(),
        //         1usize,
        //         concat!(
        //             "Alignment of ",
        //             stringify!(__do_is_nothrow_swappable_with_impl)
        //         )
        //     );
        // }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_swappable_with_impl {
        pub _address: u8,
    }
    pub type __is_swappable_with_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_swappable_with_impl {
        pub _address: u8,
    }
    pub type __is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_swappable_with {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_swappable_with {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_invocable_impl {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_invocable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __call_is_nothrow {
        pub _address: u8,
    }
    pub type __call_is_nothrow_ = crate::core::midi::rtme::root::std::__call_is_nothrow;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_invocable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __nonesuch {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___nonesuch() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__nonesuch>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__nonesuch))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__nonesuch>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__nonesuch))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct invoke_result {
        pub _address: u8,
    }
    impl Default for invoke_result {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type invoke_result_t = crate::core::midi::rtme::root::std::invoke_result;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_invocable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_invocable_r {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_invocable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nt_invocable_impl {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_nothrow_invocable_r {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct has_unique_object_representations {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_aggregate {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __move_if_noexcept_cond {
        pub _address: u8,
    }
    #[repr(C)]
    pub struct nested_exception__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct nested_exception {
        pub vtable_: *const nested_exception__bindgen_vtable,
        pub _M_ptr: crate::core::midi::rtme::root::std::__exception_ptr::exception_ptr,
    }
    // #[test]
    // fn bindgen_test_layout_nested_exception() {
    //     assert_eq!(
    //         ::std::mem::size_of::<nested_exception>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(nested_exception))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<nested_exception>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(nested_exception))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<nested_exception>()))._M_ptr as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(nested_exception),
    //             "::",
    //             stringify!(_M_ptr)
    //         )
    //     );
    // }
    impl Default for nested_exception {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}nested_exception_destructor"]
        pub fn nested_exception_nested_exception_destructor(
            this: *mut crate::core::midi::rtme::root::std::nested_exception,
        );
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Nested_exception<_Except> {
        pub _base: _Except,
        pub _base_1: crate::core::midi::rtme::root::std::nested_exception,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
    }
    impl<_Except> Default for _Nested_exception<_Except> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __rethrow_if_nested_cond = u8;
    pub type streamoff = ::std::os::raw::c_long;
    pub type streamsize = isize;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct fpos<_StateT> {
        pub _M_off: crate::core::midi::rtme::root::std::streamoff,
        pub _M_state: _StateT,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
    }
    impl<_StateT> Default for fpos<_StateT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type streampos = crate::core::midi::rtme::root::std::fpos<root::mbstate_t>;
    pub type wstreampos = crate::core::midi::rtme::root::std::fpos<root::mbstate_t>;
    pub type u16streampos = crate::core::midi::rtme::root::std::fpos<root::mbstate_t>;
    pub type u32streampos = crate::core::midi::rtme::root::std::fpos<root::mbstate_t>;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_filebuf {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_ifstream {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_ofstream {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_fstream {
        pub _address: u8,
    }
    pub type ios = crate::core::midi::rtme::root::std::basic_ios<::std::os::raw::c_char>;
    pub type streambuf =
        crate::core::midi::rtme::root::std::basic_streambuf<::std::os::raw::c_char>;
    pub type istream = crate::core::midi::rtme::root::std::basic_istream<::std::os::raw::c_char>;
    pub type ostream = crate::core::midi::rtme::root::std::basic_ostream<::std::os::raw::c_char>;
    pub type iostream = crate::core::midi::rtme::root::std::basic_iostream<::std::os::raw::c_char>;
    pub type stringbuf = crate::core::midi::rtme::root::std::__cxx11::basic_stringbuf;
    pub type istringstream = crate::core::midi::rtme::root::std::__cxx11::basic_istringstream;
    pub type ostringstream = crate::core::midi::rtme::root::std::__cxx11::basic_ostringstream;
    pub type stringstream = crate::core::midi::rtme::root::std::__cxx11::basic_stringstream;
    pub type filebuf = crate::core::midi::rtme::root::std::basic_filebuf;
    pub type ifstream = crate::core::midi::rtme::root::std::basic_ifstream;
    pub type ofstream = crate::core::midi::rtme::root::std::basic_ofstream;
    pub type fstream = crate::core::midi::rtme::root::std::basic_fstream;
    pub type wios = crate::core::midi::rtme::root::std::basic_ios<u32>;
    pub type wstreambuf = crate::core::midi::rtme::root::std::basic_streambuf<u32>;
    pub type wistream = crate::core::midi::rtme::root::std::basic_istream<u32>;
    pub type wostream = crate::core::midi::rtme::root::std::basic_ostream<u32>;
    pub type wiostream = crate::core::midi::rtme::root::std::basic_iostream<u32>;
    pub type wstringbuf = crate::core::midi::rtme::root::std::__cxx11::basic_stringbuf;
    pub type wistringstream = crate::core::midi::rtme::root::std::__cxx11::basic_istringstream;
    pub type wostringstream = crate::core::midi::rtme::root::std::__cxx11::basic_ostringstream;
    pub type wstringstream = crate::core::midi::rtme::root::std::__cxx11::basic_stringstream;
    pub type wfilebuf = crate::core::midi::rtme::root::std::basic_filebuf;
    pub type wifstream = crate::core::midi::rtme::root::std::basic_ifstream;
    pub type wofstream = crate::core::midi::rtme::root::std::basic_ofstream;
    pub type wfstream = crate::core::midi::rtme::root::std::basic_fstream;
    extern "C" {
        pub fn __throw_bad_exception();
    }
    extern "C" {
        pub fn __throw_bad_alloc();
    }
    extern "C" {
        pub fn __throw_bad_cast();
    }
    extern "C" {
        pub fn __throw_bad_typeid();
    }
    extern "C" {
        pub fn __throw_logic_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_domain_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_invalid_argument(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_length_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_out_of_range(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_out_of_range_fmt(arg1: *const ::std::os::raw::c_char, ...);
    }
    extern "C" {
        pub fn __throw_runtime_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_range_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_overflow_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_underflow_error(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_ios_failure(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn __throw_system_error(arg1: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn __throw_future_error(arg1: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn __throw_bad_function_call();
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __true_type {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___true_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__true_type>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__true_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__true_type>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__true_type))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __false_type {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___false_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__false_type>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__false_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__false_type>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__false_type))
    //     );
    // }
    pub type __truth_type___type = crate::core::midi::rtme::root::std::__false_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __traitor {
        pub _address: u8,
    }
    pub const __traitor___value: crate::core::midi::rtme::root::std::__traitor__bindgen_ty_1 = 0;
    pub type __traitor__bindgen_ty_1 = i32;
    pub type __traitor___type = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __are_same {
        pub _address: u8,
    }
    pub const __are_same___value: crate::core::midi::rtme::root::std::__are_same__bindgen_ty_1 = 0;
    pub type __are_same__bindgen_ty_1 = i32;
    pub type __are_same___type = crate::core::midi::rtme::root::std::__false_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_void {
        pub _address: u8,
    }
    pub const __is_void___value: crate::core::midi::rtme::root::std::__is_void__bindgen_ty_1 = 0;
    pub type __is_void__bindgen_ty_1 = i32;
    pub type __is_void___type = crate::core::midi::rtme::root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_void_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_void>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_void)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_void>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_void)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_integer {
        pub _address: u8,
    }
    pub const __is_integer___value: crate::core::midi::rtme::root::std::__is_integer__bindgen_ty_1 =
        0;
    pub type __is_integer__bindgen_ty_1 = i32;
    pub type __is_integer___type = crate::core::midi::rtme::root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_bool__close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_integer_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_integer>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_integer)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_floating {
        pub _address: u8,
    }
    pub const __is_floating___value:
        crate::core::midi::rtme::root::std::__is_floating__bindgen_ty_1 = 0;
    pub type __is_floating__bindgen_ty_1 = i32;
    pub type __is_floating___type = crate::core::midi::rtme::root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_floating_open0_float_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_floating_open0_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_floating_open0_long_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_floating>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_floating)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_pointer {
        pub _address: u8,
    }
    pub const __is_pointer___value: crate::core::midi::rtme::root::std::__is_pointer__bindgen_ty_1 =
        0;
    pub type __is_pointer__bindgen_ty_1 = i32;
    pub type __is_pointer___type = crate::core::midi::rtme::root::std::__false_type;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_arithmetic {
        pub _address: u8,
    }
    impl Default for __is_arithmetic {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_scalar {
        pub _address: u8,
    }
    impl Default for __is_scalar {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_char {
        pub _address: u8,
    }
    pub const __is_char___value: crate::core::midi::rtme::root::std::__is_char__bindgen_ty_1 = 0;
    pub type __is_char__bindgen_ty_1 = i32;
    pub type __is_char___type = crate::core::midi::rtme::root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_char_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_char>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_char)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_char>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_char)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_char_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_char>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_char)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_char>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_char)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_byte {
        pub _address: u8,
    }
    pub const __is_byte___value: crate::core::midi::rtme::root::std::__is_byte__bindgen_ty_1 = 0;
    pub type __is_byte__bindgen_ty_1 = i32;
    pub type __is_byte___type = crate::core::midi::rtme::root::std::__false_type;
    // #[test]
    // fn __bindgen_test_layout___is_byte_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_byte_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_byte_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    // }
    pub type byte = u8;
    // #[test]
    // fn __bindgen_test_layout___is_byte_open0_byte_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_byte>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_byte)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_move_iterator {
        pub _address: u8,
    }
    pub const __is_move_iterator___value:
        crate::core::midi::rtme::root::std::__is_move_iterator__bindgen_ty_1 = 0;
    pub type __is_move_iterator__bindgen_ty_1 = i32;
    pub type __is_move_iterator___type = crate::core::midi::rtme::root::std::__false_type;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct piecewise_construct_t {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_piecewise_construct_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<piecewise_construct_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(piecewise_construct_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<piecewise_construct_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(piecewise_construct_t))
    //     );
    // }
    extern "C" {
        pub static piecewise_construct: crate::core::midi::rtme::root::std::piecewise_construct_t;
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __nonesuch_no_braces {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___nonesuch_no_braces() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__nonesuch_no_braces>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__nonesuch_no_braces))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__nonesuch_no_braces>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__nonesuch_no_braces))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pair_base {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pair<_T1, _T2> {
        pub first: _T1,
        pub second: _T2,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
    }
    pub type pair_first_type<_T1> = _T1;
    pub type pair_second_type<_T2> = _T2;
    pub type pair__PCCP = u8;
    pub type pair__PCCFP = u8;
    impl<_T1, _T2> Default for pair<_T1, _T2> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct input_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_input_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<input_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(input_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<input_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(input_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct output_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_output_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<output_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(output_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<output_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(output_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct forward_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_forward_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<forward_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(forward_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<forward_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(forward_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bidirectional_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_bidirectional_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<bidirectional_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(bidirectional_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<bidirectional_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(bidirectional_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct random_access_iterator_tag {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_random_access_iterator_tag() {
    //     assert_eq!(
    //         ::std::mem::size_of::<random_access_iterator_tag>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(random_access_iterator_tag))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<random_access_iterator_tag>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(random_access_iterator_tag))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct iterator {
        pub _address: u8,
    }
    pub type iterator_iterator_category<_Category> = _Category;
    pub type iterator_value_type<_Tp> = _Tp;
    pub type iterator_difference_type<_Distance> = _Distance;
    pub type iterator_pointer<_Pointer> = _Pointer;
    pub type iterator_reference<_Reference> = _Reference;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __iterator_traits {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct iterator_traits {
        pub _address: u8,
    }
    pub type _RequireInputIter = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _List_iterator {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _List_const_iterator {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __undefined {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __get_first_arg {
        pub _address: u8,
    }
    pub type __get_first_arg_type = crate::core::midi::rtme::root::std::__undefined;
    pub type __get_first_arg_t = crate::core::midi::rtme::root::std::__get_first_arg;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __replace_first_arg {
        pub _address: u8,
    }
    pub type __replace_first_arg_t = crate::core::midi::rtme::root::std::__replace_first_arg;
    pub type __make_not_void = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pointer_traits {
        pub _address: u8,
    }
    pub type pointer_traits___element_type = [u8; 0usize];
    pub type pointer_traits___difference_type = [u8; 0usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pointer_traits___rebind {
        pub _address: u8,
    }
    impl Default for pointer_traits___rebind {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type pointer_traits_pointer<_Ptr> = _Ptr;
    pub type pointer_traits_element_type = crate::core::midi::rtme::root::std::__detected_or_t;
    pub type pointer_traits_difference_type = crate::core::midi::rtme::root::std::__detected_or_t;
    pub type pointer_traits_rebind = crate::core::midi::rtme::root::std::pointer_traits___rebind;
    pub type __ptr_rebind = crate::core::midi::rtme::root::std::pointer_traits;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct reverse_iterator<_Iterator> {
        pub current: _Iterator,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    }
    pub type reverse_iterator___traits_type = crate::core::midi::rtme::root::std::iterator_traits;
    pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
    pub type reverse_iterator_difference_type =
        crate::core::midi::rtme::root::std::reverse_iterator___traits_type;
    pub type reverse_iterator_pointer =
        crate::core::midi::rtme::root::std::reverse_iterator___traits_type;
    pub type reverse_iterator_reference =
        crate::core::midi::rtme::root::std::reverse_iterator___traits_type;
    impl<_Iterator> Default for reverse_iterator<_Iterator> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct back_insert_iterator<_Container> {
        pub container: *mut _Container,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    }
    pub type back_insert_iterator_container_type<_Container> = _Container;
    impl<_Container> Default for back_insert_iterator<_Container> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct front_insert_iterator<_Container> {
        pub container: *mut _Container,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    }
    pub type front_insert_iterator_container_type<_Container> = _Container;
    impl<_Container> Default for front_insert_iterator<_Container> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct insert_iterator<_Container> {
        pub container: *mut _Container,
        pub iter: [u8; 0usize],
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    }
    pub type insert_iterator_container_type<_Container> = _Container;
    impl<_Container> Default for insert_iterator<_Container> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_Container> ::std::fmt::Debug for insert_iterator<_Container> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "insert_iterator {{ container: {:?} }}", self.container)
        }
    }
    impl<_Container> PartialEq for insert_iterator<_Container>
    where
        _Container: PartialEq,
    {
        fn eq(&self, other: &insert_iterator<_Container>) -> bool {
            self.container == other.container && self.iter == other.iter
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct move_iterator<_Iterator> {
        pub _M_current: _Iterator,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    }
    pub type move_iterator___traits_type = crate::core::midi::rtme::root::std::iterator_traits;
    pub type move_iterator___base_ref =
        crate::core::midi::rtme::root::std::move_iterator___traits_type;
    pub type move_iterator_iterator_type<_Iterator> = _Iterator;
    pub type move_iterator_iterator_category =
        crate::core::midi::rtme::root::std::move_iterator___traits_type;
    pub type move_iterator_value_type =
        crate::core::midi::rtme::root::std::move_iterator___traits_type;
    pub type move_iterator_difference_type =
        crate::core::midi::rtme::root::std::move_iterator___traits_type;
    pub type move_iterator_pointer<_Iterator> = _Iterator;
    pub type move_iterator_reference = u8;
    impl<_Iterator> Default for move_iterator<_Iterator> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __iter_key_t = crate::core::midi::rtme::root::std::remove_const_t;
    pub type __iter_val_t = crate::core::midi::rtme::root::std::iterator_traits;
    pub type __iter_to_alloc_t = crate::core::midi::rtme::root::std::pair<
        root::std::add_const_t,
        crate::core::midi::rtme::root::std::__iter_val_t,
    >;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __lc_rai {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout___lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__lc_rai>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__lc_rai)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__lc_rai>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__lc_rai)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct char_traits {
        pub _address: u8,
    }
    impl Default for char_traits {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    pub type __c_locale = crate::core::midi::rtme::root::__locale_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct codecvt_base {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct codecvt {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct codecvt_byname {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct time_base {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct time_put {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct time_put_byname {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct money_base {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct messages_base {
        _unused: [u8; 0],
    }
    pub type __allocator_base = crate::core::midi::rtme::root::__gnu_cxx::new_allocator;
    // #[test]
    // fn __bindgen_test_layout_allocator_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator {
        pub _address: u8,
    }
    pub type allocator_size_type = usize;
    pub type allocator_difference_type = isize;
    pub type allocator_pointer<_Tp> = *mut _Tp;
    pub type allocator_const_pointer<_Tp> = *const _Tp;
    pub type allocator_reference<_Tp> = *mut _Tp;
    pub type allocator_const_reference<_Tp> = *const _Tp;
    pub type allocator_value_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_rebind {
        pub _address: u8,
    }
    pub type allocator_rebind_other = crate::core::midi::rtme::root::std::allocator;
    pub type allocator_propagate_on_container_move_assignment =
        crate::core::midi::rtme::root::std::true_type;
    pub type allocator_is_always_equal = crate::core::midi::rtme::root::std::true_type;
    impl Default for allocator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct unary_function {
        pub _address: u8,
    }
    pub type unary_function_argument_type<_Arg> = _Arg;
    pub type unary_function_result_type<_Result> = _Result;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct binary_function {
        pub _address: u8,
    }
    pub type binary_function_first_argument_type<_Arg1> = _Arg1;
    pub type binary_function_second_argument_type<_Arg2> = _Arg2;
    pub type binary_function_result_type<_Result> = _Result;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __is_transparent {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct plus {
        pub _address: u8,
    }
    impl Default for plus {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct minus {
        pub _address: u8,
    }
    impl Default for minus {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct multiplies {
        pub _address: u8,
    }
    impl Default for multiplies {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct divides {
        pub _address: u8,
    }
    impl Default for divides {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct modulus {
        pub _address: u8,
    }
    impl Default for modulus {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct negate {
        pub _address: u8,
    }
    impl Default for negate {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_plus_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::plus>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::plus)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::plus>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::plus)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_minus_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::minus>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::minus)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::minus>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::minus)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_multiplies_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::multiplies>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::multiplies)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::multiplies>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::multiplies)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_divides_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::divides>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::divides)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::divides>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::divides)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_modulus_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::modulus>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::modulus)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::modulus>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::modulus)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_negate_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::negate>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::negate)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::negate>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::negate)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct equal_to {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct not_equal_to {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct greater {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct less {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct greater_equal {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct less_equal {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout_equal_to_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::equal_to>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::equal_to)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::equal_to>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::equal_to)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_not_equal_to_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::not_equal_to>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::not_equal_to)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::not_equal_to>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::not_equal_to)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_greater_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::greater>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::greater)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::greater>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::greater)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_less_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::less>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::less)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::less>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::less)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_greater_equal_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::greater_equal>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::greater_equal)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::greater_equal>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::greater_equal)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_less_equal_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::less_equal>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::less_equal)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::less_equal>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::less_equal)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct logical_and {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct logical_or {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct logical_not {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout_logical_and_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::logical_and>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::logical_and)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::logical_and>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::logical_and)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_logical_or_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::logical_or>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::logical_or)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::logical_or>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::logical_or)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_logical_not_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::logical_not>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::logical_not)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::logical_not>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::logical_not)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bit_and {
        pub _address: u8,
    }
    impl Default for bit_and {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bit_or {
        pub _address: u8,
    }
    impl Default for bit_or {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bit_xor {
        pub _address: u8,
    }
    impl Default for bit_xor {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct bit_not {
        pub _address: u8,
    }
    impl Default for bit_not {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_bit_and_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::bit_and>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::bit_and)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::bit_and>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::bit_and)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_bit_or_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::bit_or>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::bit_or)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::bit_or>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::bit_or)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_bit_xor_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::bit_xor>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::bit_xor)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::bit_xor>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::bit_xor)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_bit_not_open0_void_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::bit_not>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::bit_not)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::bit_not>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::bit_not)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct unary_negate<_Predicate> {
        pub _M_pred: _Predicate,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    }
    impl<_Predicate> Default for unary_negate<_Predicate> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct binary_negate<_Predicate> {
        pub _M_pred: _Predicate,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    }
    impl<_Predicate> Default for binary_negate<_Predicate> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pointer_to_unary_function<_Arg, _Result> {
        pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    }
    impl<_Arg, _Result> Default for pointer_to_unary_function<_Arg, _Result> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
        pub _M_ptr:
            ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
        pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    }
    impl<_Arg1, _Arg2, _Result> Default for pointer_to_binary_function<_Arg1, _Arg2, _Result> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Identity {
        pub _address: u8,
    }
    impl Default for _Identity {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Select1st {
        pub _address: u8,
    }
    impl Default for _Select1st {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Select2nd {
        pub _address: u8,
    }
    impl Default for _Select2nd {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mem_fun_t<_Ret> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    }
    impl<_Ret> Default for mem_fun_t<_Ret> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct const_mem_fun_t<_Ret> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    }
    impl<_Ret> Default for const_mem_fun_t<_Ret> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mem_fun_ref_t<_Ret> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    }
    impl<_Ret> Default for mem_fun_ref_t<_Ret> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct const_mem_fun_ref_t<_Ret> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    }
    impl<_Ret> Default for const_mem_fun_ref_t<_Ret> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mem_fun1_t<_Ret, _Arg> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    }
    impl<_Ret, _Arg> Default for mem_fun1_t<_Ret, _Arg> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct const_mem_fun1_t<_Ret, _Arg> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    }
    impl<_Ret, _Arg> Default for const_mem_fun1_t<_Ret, _Arg> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mem_fun1_ref_t<_Ret, _Arg> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    }
    impl<_Ret, _Arg> Default for mem_fun1_ref_t<_Ret, _Arg> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
        pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    }
    impl<_Ret, _Arg> Default for const_mem_fun1_ref_t<_Ret, _Arg> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct binder1st<_Operation> {
        pub op: _Operation,
        pub value: [u8; 0usize],
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    }
    impl<_Operation> Default for binder1st<_Operation> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_Operation> ::std::fmt::Debug for binder1st<_Operation> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "binder1st {{ op: Non-debuggable generic }}")
        }
    }
    impl<_Operation> PartialEq for binder1st<_Operation>
    where
        _Operation: PartialEq,
    {
        fn eq(&self, other: &binder1st<_Operation>) -> bool {
            self.op == other.op && self.value == other.value
        }
    }
    #[repr(C)]
    pub struct binder2nd<_Operation> {
        pub op: _Operation,
        pub value: [u8; 0usize],
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    }
    impl<_Operation> Default for binder2nd<_Operation> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_Operation> ::std::fmt::Debug for binder2nd<_Operation> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "binder2nd {{ op: Non-debuggable generic }}")
        }
    }
    impl<_Operation> PartialEq for binder2nd<_Operation>
    where
        _Operation: PartialEq,
    {
        fn eq(&self, other: &binder2nd<_Operation>) -> bool {
            self.op == other.op && self.value == other.value
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct initializer_list<_E> {
        pub _M_array: crate::core::midi::rtme::root::std::initializer_list_iterator<_E>,
        pub _M_len: crate::core::midi::rtme::root::std::initializer_list_size_type,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
    }
    pub type initializer_list_value_type<_E> = _E;
    pub type initializer_list_reference<_E> = *const _E;
    pub type initializer_list_const_reference<_E> = *const _E;
    pub type initializer_list_size_type = usize;
    pub type initializer_list_iterator<_E> = *const _E;
    pub type initializer_list_const_iterator<_E> = *const _E;
    impl<_E> Default for initializer_list<_E> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct valarray {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __allocator_traits_base {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __allocator_traits_base___rebind {
        pub _address: u8,
    }
    impl Default for __allocator_traits_base___rebind {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __allocator_traits_base___pointer = [u8; 0usize];
    pub type __allocator_traits_base___c_pointer = [u8; 0usize];
    pub type __allocator_traits_base___v_pointer = [u8; 0usize];
    pub type __allocator_traits_base___cv_pointer = [u8; 0usize];
    pub type __allocator_traits_base___pocca = [u8; 0usize];
    pub type __allocator_traits_base___pocma = [u8; 0usize];
    pub type __allocator_traits_base___pocs = [u8; 0usize];
    pub type __allocator_traits_base___equal = [u8; 0usize];
    // #[test]
    // fn bindgen_test_layout___allocator_traits_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__allocator_traits_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__allocator_traits_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__allocator_traits_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__allocator_traits_base))
    //     );
    // }
    pub type __alloc_rebind = crate::core::midi::rtme::root::std::__allocator_traits_base;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits {
        pub _address: u8,
    }
    pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
    pub type allocator_traits_value_type = [u8; 0usize];
    pub type allocator_traits_pointer = crate::core::midi::rtme::root::std::__detected_or_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits__Ptr {
        pub _address: u8,
    }
    pub type allocator_traits__Ptr_type = [u8; 0usize];
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits__Diff {
        pub _address: u8,
    }
    pub type allocator_traits__Diff_type = crate::core::midi::rtme::root::std::pointer_traits;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits__Size {
        pub _address: u8,
    }
    impl Default for allocator_traits__Size {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type allocator_traits_const_pointer = [u8; 0usize];
    pub type allocator_traits_void_pointer =
        crate::core::midi::rtme::root::std::allocator_traits__Ptr;
    pub type allocator_traits_const_void_pointer =
        crate::core::midi::rtme::root::std::allocator_traits__Ptr;
    pub type allocator_traits_difference_type = [u8; 0usize];
    pub type allocator_traits_size_type = [u8; 0usize];
    pub type allocator_traits_propagate_on_container_copy_assignment =
        crate::core::midi::rtme::root::std::__detected_or_t;
    pub type allocator_traits_propagate_on_container_move_assignment =
        crate::core::midi::rtme::root::std::__detected_or_t;
    pub type allocator_traits_propagate_on_container_swap =
        crate::core::midi::rtme::root::std::__detected_or_t;
    pub type allocator_traits_is_always_equal = crate::core::midi::rtme::root::std::__detected_or_t;
    pub type allocator_traits_rebind_alloc = crate::core::midi::rtme::root::std::__alloc_rebind;
    pub type allocator_traits_rebind_traits = crate::core::midi::rtme::root::std::allocator_traits;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_traits___construct_helper {
        pub _address: u8,
    }
    pub type allocator_traits___construct_helper_type<_Alloc> = _Alloc;
    pub type allocator_traits___has_construct =
        crate::core::midi::rtme::root::std::allocator_traits___construct_helper;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_copy_insertable_impl {
        pub _address: u8,
    }
    pub type __is_copy_insertable_impl__Traits =
        crate::core::midi::rtme::root::std::allocator_traits;
    pub type __is_copy_insertable_impl_type<_Alloc> = _Alloc;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_copy_insertable {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_allocator {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    pub type _RequireAllocator = u8;
    pub const float_round_style_round_indeterminate:
        crate::core::midi::rtme::root::std::float_round_style = -1;
    pub const float_round_style_round_toward_zero:
        crate::core::midi::rtme::root::std::float_round_style = 0;
    pub const float_round_style_round_to_nearest:
        crate::core::midi::rtme::root::std::float_round_style = 1;
    pub const float_round_style_round_toward_infinity:
        crate::core::midi::rtme::root::std::float_round_style = 2;
    pub const float_round_style_round_toward_neg_infinity:
        crate::core::midi::rtme::root::std::float_round_style = 3;
    pub type float_round_style = i32;
    pub const float_denorm_style_denorm_indeterminate:
        crate::core::midi::rtme::root::std::float_denorm_style = -1;
    pub const float_denorm_style_denorm_absent:
        crate::core::midi::rtme::root::std::float_denorm_style = 0;
    pub const float_denorm_style_denorm_present:
        crate::core::midi::rtme::root::std::float_denorm_style = 1;
    pub type float_denorm_style = i32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __numeric_limits_base {
        pub _address: u8,
    }
    pub const __numeric_limits_base_is_specialized: bool = false;
    pub const __numeric_limits_base_digits: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_digits10: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_max_digits10: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_is_signed: bool = false;
    pub const __numeric_limits_base_is_integer: bool = false;
    pub const __numeric_limits_base_is_exact: bool = false;
    pub const __numeric_limits_base_radix: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_min_exponent: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_min_exponent10: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_max_exponent: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_max_exponent10: ::std::os::raw::c_int = 0;
    pub const __numeric_limits_base_has_infinity: bool = false;
    pub const __numeric_limits_base_has_quiet_NaN: bool = false;
    pub const __numeric_limits_base_has_signaling_NaN: bool = false;
    extern "C" {
        #[link_name = "\u{1}has_denorm"]
        pub static __numeric_limits_base_has_denorm:
            crate::core::midi::rtme::root::std::float_denorm_style;
    }
    pub const __numeric_limits_base_has_denorm_loss: bool = false;
    pub const __numeric_limits_base_is_iec559: bool = false;
    pub const __numeric_limits_base_is_bounded: bool = false;
    pub const __numeric_limits_base_is_modulo: bool = false;
    pub const __numeric_limits_base_traps: bool = false;
    pub const __numeric_limits_base_tinyness_before: bool = false;
    extern "C" {
        #[link_name = "\u{1}round_style"]
        pub static __numeric_limits_base_round_style:
            crate::core::midi::rtme::root::std::float_round_style;
    }
    // #[test]
    // fn bindgen_test_layout___numeric_limits_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__numeric_limits_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__numeric_limits_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__numeric_limits_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__numeric_limits_base))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct numeric_limits {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_bool__close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_float_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numeric_limits_open0_long_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::numeric_limits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::numeric_limits)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __hash_base {
        pub _address: u8,
    }
    pub type __hash_base_result_type<_Result> = _Result;
    pub type __hash_base_argument_type<_Arg> = _Arg;
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __poison_hash {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct hash {
        pub _address: u8,
    }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_bool__close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_char16_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_char32_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Hash_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout__Hash_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Hash_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(_Hash_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Hash_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(_Hash_impl))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Fnv_hash_impl {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout__Fnv_hash_impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Fnv_hash_impl>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(_Fnv_hash_impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Fnv_hash_impl>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(_Fnv_hash_impl))
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_float_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_fast_hash {
        pub _base: crate::core::midi::rtme::root::std::true_type,
    }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_long_double_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_string_view<_CharT> {
        pub _M_len: usize,
        pub _M_str: *const _CharT,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_string_view_traits_type<_Traits> = _Traits;
    pub type basic_string_view_value_type<_CharT> = _CharT;
    pub type basic_string_view_pointer<_CharT> = *const _CharT;
    pub type basic_string_view_const_pointer<_CharT> = *const _CharT;
    pub type basic_string_view_reference<_CharT> = *const _CharT;
    pub type basic_string_view_const_reference<_CharT> = *const _CharT;
    pub type basic_string_view_const_iterator<_CharT> = *const _CharT;
    pub type basic_string_view_iterator<_CharT> =
        crate::core::midi::rtme::root::std::basic_string_view_const_iterator<_CharT>;
    pub type basic_string_view_const_reverse_iterator<_CharT> =
        crate::core::midi::rtme::root::std::reverse_iterator<
            root::std::basic_string_view_const_iterator<_CharT>,
        >;
    pub type basic_string_view_reverse_iterator<_CharT> =
        crate::core::midi::rtme::root::std::basic_string_view_const_reverse_iterator<_CharT>;
    pub type basic_string_view_size_type = usize;
    pub type basic_string_view_difference_type = isize;
    impl<_CharT> Default for basic_string_view<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub mod __detail {

        pub type __idt = crate::core::midi::rtme::root::std::common_type_t;
    }
    pub type string_view =
        crate::core::midi::rtme::root::std::basic_string_view<::std::os::raw::c_char>;
    pub type wstring_view = crate::core::midi::rtme::root::std::basic_string_view<u32>;
    pub type u16string_view = crate::core::midi::rtme::root::std::basic_string_view<u16>;
    pub type u32string_view = crate::core::midi::rtme::root::std::basic_string_view<u32>;
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char_char_traits_open3_char_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_view_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_wchar_t_char_traits_open3_wchar_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char16_t_char_traits_open2_char16_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char16_t_char_traits_open3_char16_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char32_t_char_traits_open2_char32_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_view_open2_char32_t_char_traits_open3_char32_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    pub mod literals {}
    extern "C" {
        pub fn getline(
            __in: *mut crate::core::midi::rtme::root::std::basic_istream<::std::os::raw::c_char>,
            __str: *mut crate::core::midi::rtme::root::std::__cxx11::basic_string<
                ::std::os::raw::c_char,
            >,
            __delim: ::std::os::raw::c_char,
        ) -> *mut crate::core::midi::rtme::root::std::basic_istream<::std::os::raw::c_char>;
    }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_wchar_t_char_traits_open3_wchar_t_close3_allocator_open3_wchar_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char16_t_char_traits_open3_char16_t_close3_allocator_open3_char16_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char32_t_char_traits_open3_char32_t_close3_allocator_open3_char32_t_close3_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__is_fast_hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__is_fast_hash)
    //         )
    //     );
    // }
    extern "C" {
        pub static npos: crate::core::midi::rtme::root::std::__cxx11::basic_string_size_type;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct locale {
        pub _M_impl: *mut crate::core::midi::rtme::root::std::locale__Impl,
    }
    pub type locale_category = ::std::os::raw::c_int;
    pub const locale__S_categories_size: crate::core::midi::rtme::root::std::locale__bindgen_ty_1 =
        12;
    pub type locale__bindgen_ty_1 = u32;
    pub const locale_none: crate::core::midi::rtme::root::std::locale_category = 0;
    pub const locale_ctype: crate::core::midi::rtme::root::std::locale_category = 1;
    pub const locale_numeric: crate::core::midi::rtme::root::std::locale_category = 2;
    pub const locale_collate: crate::core::midi::rtme::root::std::locale_category = 4;
    pub const locale_time: crate::core::midi::rtme::root::std::locale_category = 8;
    pub const locale_monetary: crate::core::midi::rtme::root::std::locale_category = 16;
    pub const locale_messages: crate::core::midi::rtme::root::std::locale_category = 32;
    pub const locale_all: crate::core::midi::rtme::root::std::locale_category = 63;
    extern "C" {
        #[link_name = "\u{1}_S_classic"]
        pub static mut locale__S_classic: *mut crate::core::midi::rtme::root::std::locale__Impl;
    }
    extern "C" {
        #[link_name = "\u{1}_S_global"]
        pub static mut locale__S_global: *mut crate::core::midi::rtme::root::std::locale__Impl;
    }
    extern "C" {
        #[link_name = "\u{1}_S_categories"]
        pub static locale__S_categories: *const *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_S_once"]
        pub static mut locale__S_once: crate::core::midi::rtme::root::__gthread_once_t;
    }
    extern "C" {
        #[link_name = "\u{1}_S_twinned_facets"]
        pub static mut locale__S_twinned_facets:
            [*const crate::core::midi::rtme::root::std::locale_id; 0usize];
    }
    // #[test]
    // fn bindgen_test_layout_locale() {
    //     assert_eq!(
    //         ::std::mem::size_of::<locale>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(locale))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<locale>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(locale))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale>()))._M_impl as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale),
    //             "::",
    //             stringify!(_M_impl)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}name"]
        pub fn locale_name(
            this: *const crate::core::midi::rtme::root::std::locale,
        ) -> crate::core::midi::rtme::root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}global"]
        pub fn locale_global(
            __loc: *const crate::core::midi::rtme::root::std::locale,
        ) -> crate::core::midi::rtme::root::std::locale;
    }
    extern "C" {
        #[link_name = "\u{1}classic"]
        pub fn locale_classic() -> *const crate::core::midi::rtme::root::std::locale;
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale(this: *mut crate::core::midi::rtme::root::std::locale);
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale1(
            this: *mut crate::core::midi::rtme::root::std::locale,
            __other: *const crate::core::midi::rtme::root::std::locale,
        );
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale2(
            this: *mut crate::core::midi::rtme::root::std::locale,
            __s: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale3(
            this: *mut crate::core::midi::rtme::root::std::locale,
            __base: *const crate::core::midi::rtme::root::std::locale,
            __s: *const ::std::os::raw::c_char,
            __cat: crate::core::midi::rtme::root::std::locale_category,
        );
    }
    extern "C" {
        #[link_name = "\u{1}locale"]
        pub fn locale_locale4(
            this: *mut crate::core::midi::rtme::root::std::locale,
            __base: *const crate::core::midi::rtme::root::std::locale,
            __add: *const crate::core::midi::rtme::root::std::locale,
            __cat: crate::core::midi::rtme::root::std::locale_category,
        );
    }
    extern "C" {
        #[link_name = "\u{1}locale_destructor"]
        pub fn locale_locale_destructor(this: *mut crate::core::midi::rtme::root::std::locale);
    }
    impl Default for locale {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl locale {
        #[inline]
        pub unsafe fn name(&self) -> crate::core::midi::rtme::root::std::__cxx11::string {
            locale_name(self)
        }
        #[inline]
        pub unsafe fn global(
            __loc: *const crate::core::midi::rtme::root::std::locale,
        ) -> crate::core::midi::rtme::root::std::locale {
            locale_global(__loc)
        }
        #[inline]
        pub unsafe fn classic() -> *const crate::core::midi::rtme::root::std::locale {
            locale_classic()
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(__other: *const crate::core::midi::rtme::root::std::locale) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale1(&mut __bindgen_tmp, __other);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(__s: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale2(&mut __bindgen_tmp, __s);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(
            __base: *const crate::core::midi::rtme::root::std::locale,
            __s: *const ::std::os::raw::c_char,
            __cat: crate::core::midi::rtme::root::std::locale_category,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale3(&mut __bindgen_tmp, __base, __s, __cat);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(
            __base: *const crate::core::midi::rtme::root::std::locale,
            __add: *const crate::core::midi::rtme::root::std::locale,
            __cat: crate::core::midi::rtme::root::std::locale_category,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            locale_locale4(&mut __bindgen_tmp, __base, __add, __cat);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            locale_locale_destructor(self)
        }
    }
    #[repr(C)]
    pub struct locale_facet__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct locale_facet {
        pub vtable_: *const locale_facet__bindgen_vtable,
        pub _M_refcount: crate::core::midi::rtme::root::_Atomic_word,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct locale_facet___shim {
        _unused: [u8; 0],
    }
    extern "C" {
        #[link_name = "\u{1}_S_c_locale"]
        pub static mut locale_facet__S_c_locale: crate::core::midi::rtme::root::std::__c_locale;
    }
    extern "C" {
        #[link_name = "\u{1}_S_c_name"]
        pub static mut locale_facet__S_c_name: [::std::os::raw::c_char; 2usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_once"]
        pub static mut locale_facet__S_once: crate::core::midi::rtme::root::__gthread_once_t;
    }
    // #[test]
    // fn bindgen_test_layout_locale_facet() {
    //     assert_eq!(
    //         ::std::mem::size_of::<locale_facet>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(locale_facet))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<locale_facet>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(locale_facet))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<locale_facet>()))._M_refcount as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale_facet),
    //             "::",
    //             stringify!(_M_refcount)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}_S_create_c_locale"]
        pub fn locale_facet__S_create_c_locale(
            __cloc: *mut crate::core::midi::rtme::root::std::__c_locale,
            __s: *const ::std::os::raw::c_char,
            __old: crate::core::midi::rtme::root::std::__c_locale,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_S_clone_c_locale"]
        pub fn locale_facet__S_clone_c_locale(
            __cloc: *mut crate::core::midi::rtme::root::std::__c_locale,
        ) -> crate::core::midi::rtme::root::std::__c_locale;
    }
    extern "C" {
        #[link_name = "\u{1}_S_destroy_c_locale"]
        pub fn locale_facet__S_destroy_c_locale(
            __cloc: *mut crate::core::midi::rtme::root::std::__c_locale,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_S_lc_ctype_c_locale"]
        pub fn locale_facet__S_lc_ctype_c_locale(
            __cloc: crate::core::midi::rtme::root::std::__c_locale,
            __s: *const ::std::os::raw::c_char,
        ) -> crate::core::midi::rtme::root::std::__c_locale;
    }
    extern "C" {
        #[link_name = "\u{1}_S_get_c_locale"]
        pub fn locale_facet__S_get_c_locale() -> crate::core::midi::rtme::root::std::__c_locale;
    }
    extern "C" {
        #[link_name = "\u{1}_S_get_c_name"]
        pub fn locale_facet__S_get_c_name() -> *const ::std::os::raw::c_char;
    }
    impl Default for locale_facet {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl locale_facet {
        #[inline]
        pub unsafe fn _S_create_c_locale(
            __cloc: *mut crate::core::midi::rtme::root::std::__c_locale,
            __s: *const ::std::os::raw::c_char,
            __old: crate::core::midi::rtme::root::std::__c_locale,
        ) {
            locale_facet__S_create_c_locale(__cloc, __s, __old)
        }
        #[inline]
        pub unsafe fn _S_clone_c_locale(
            __cloc: *mut crate::core::midi::rtme::root::std::__c_locale,
        ) -> crate::core::midi::rtme::root::std::__c_locale {
            locale_facet__S_clone_c_locale(__cloc)
        }
        #[inline]
        pub unsafe fn _S_destroy_c_locale(
            __cloc: *mut crate::core::midi::rtme::root::std::__c_locale,
        ) {
            locale_facet__S_destroy_c_locale(__cloc)
        }
        #[inline]
        pub unsafe fn _S_lc_ctype_c_locale(
            __cloc: crate::core::midi::rtme::root::std::__c_locale,
            __s: *const ::std::os::raw::c_char,
        ) -> crate::core::midi::rtme::root::std::__c_locale {
            locale_facet__S_lc_ctype_c_locale(__cloc, __s)
        }
        #[inline]
        pub unsafe fn _S_get_c_locale() -> crate::core::midi::rtme::root::std::__c_locale {
            locale_facet__S_get_c_locale()
        }
        #[inline]
        pub unsafe fn _S_get_c_name() -> *const ::std::os::raw::c_char {
            locale_facet__S_get_c_name()
        }
    }
    extern "C" {
        #[link_name = "\u{1}facet_destructor"]
        pub fn locale_facet_facet_destructor(
            this: *mut crate::core::midi::rtme::root::std::locale_facet,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct locale_id {
        pub _M_index: usize,
    }
    extern "C" {
        #[link_name = "\u{1}_S_refcount"]
        pub static mut locale_id__S_refcount: crate::core::midi::rtme::root::_Atomic_word;
    }
    // #[test]
    // fn bindgen_test_layout_locale_id() {
    //     assert_eq!(
    //         ::std::mem::size_of::<locale_id>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(locale_id))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<locale_id>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(locale_id))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale_id>()))._M_index as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale_id),
    //             "::",
    //             stringify!(_M_index)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}_M_id"]
        pub fn locale_id__M_id(this: *const crate::core::midi::rtme::root::std::locale_id)
            -> usize;
    }
    impl locale_id {
        #[inline]
        pub unsafe fn _M_id(&self) -> usize {
            locale_id__M_id(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct locale__Impl {
        pub _M_refcount: crate::core::midi::rtme::root::_Atomic_word,
        pub _M_facets: *mut *const crate::core::midi::rtme::root::std::locale_facet,
        pub _M_facets_size: usize,
        pub _M_caches: *mut *const crate::core::midi::rtme::root::std::locale_facet,
        pub _M_names: *mut *mut ::std::os::raw::c_char,
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_ctype"]
        pub static mut locale__Impl__S_id_ctype:
            [*const crate::core::midi::rtme::root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_numeric"]
        pub static mut locale__Impl__S_id_numeric:
            [*const crate::core::midi::rtme::root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_collate"]
        pub static mut locale__Impl__S_id_collate:
            [*const crate::core::midi::rtme::root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_time"]
        pub static mut locale__Impl__S_id_time:
            [*const crate::core::midi::rtme::root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_monetary"]
        pub static mut locale__Impl__S_id_monetary:
            [*const crate::core::midi::rtme::root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_id_messages"]
        pub static mut locale__Impl__S_id_messages:
            [*const crate::core::midi::rtme::root::std::locale_id; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_S_facet_categories"]
        pub static mut locale__Impl__S_facet_categories:
            [*const *const crate::core::midi::rtme::root::std::locale_id; 0usize];
    }
    // #[test]
    // fn bindgen_test_layout_locale__Impl() {
    //     assert_eq!(
    //         ::std::mem::size_of::<locale__Impl>(),
    //         40usize,
    //         concat!("Size of: ", stringify!(locale__Impl))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<locale__Impl>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(locale__Impl))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<locale__Impl>()))._M_refcount as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_refcount)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_facets as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_facets)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<locale__Impl>()))._M_facets_size as *const _ as usize
    //         },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_facets_size)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_caches as *const _ as usize },
    //         24usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_caches)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_names as *const _ as usize },
    //         32usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(locale__Impl),
    //             "::",
    //             stringify!(_M_names)
    //         )
    //     );
    // }
    impl Default for locale__Impl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type collate_char_type<_CharT> = _CharT;
    pub type collate_string_type =
        crate::core::midi::rtme::root::std::__cxx11::basic_string<_CharT>;
    extern "C" {
        pub static mut id: crate::core::midi::rtme::root::std::locale_id;
    }
    pub type collate_byname_char_type<_CharT> = _CharT;
    pub type collate_byname_string_type =
        crate::core::midi::rtme::root::std::__cxx11::basic_string<_CharT>;
    // #[test]
    // fn __bindgen_test_layout_collate_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::collate>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::collate)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::collate>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::collate)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_collate_byname_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::collate_byname>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::collate_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::collate_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::collate_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_collate_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::collate>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::collate)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::collate>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::collate)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_collate_byname_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::collate_byname>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::collate_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::collate_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::collate_byname)
    //         )
    //     );
    // }
    pub const errc_address_family_not_supported: crate::core::midi::rtme::root::std::errc = 97;
    pub const errc_address_in_use: crate::core::midi::rtme::root::std::errc = 98;
    pub const errc_address_not_available: crate::core::midi::rtme::root::std::errc = 99;
    pub const errc_already_connected: crate::core::midi::rtme::root::std::errc = 106;
    pub const errc_argument_list_too_long: crate::core::midi::rtme::root::std::errc = 7;
    pub const errc_argument_out_of_domain: crate::core::midi::rtme::root::std::errc = 33;
    pub const errc_bad_address: crate::core::midi::rtme::root::std::errc = 14;
    pub const errc_bad_file_descriptor: crate::core::midi::rtme::root::std::errc = 9;
    pub const errc_bad_message: crate::core::midi::rtme::root::std::errc = 74;
    pub const errc_broken_pipe: crate::core::midi::rtme::root::std::errc = 32;
    pub const errc_connection_aborted: crate::core::midi::rtme::root::std::errc = 103;
    pub const errc_connection_already_in_progress: crate::core::midi::rtme::root::std::errc = 114;
    pub const errc_connection_refused: crate::core::midi::rtme::root::std::errc = 111;
    pub const errc_connection_reset: crate::core::midi::rtme::root::std::errc = 104;
    pub const errc_cross_device_link: crate::core::midi::rtme::root::std::errc = 18;
    pub const errc_destination_address_required: crate::core::midi::rtme::root::std::errc = 89;
    pub const errc_device_or_resource_busy: crate::core::midi::rtme::root::std::errc = 16;
    pub const errc_directory_not_empty: crate::core::midi::rtme::root::std::errc = 39;
    pub const errc_executable_format_error: crate::core::midi::rtme::root::std::errc = 8;
    pub const errc_file_exists: crate::core::midi::rtme::root::std::errc = 17;
    pub const errc_file_too_large: crate::core::midi::rtme::root::std::errc = 27;
    pub const errc_filename_too_long: crate::core::midi::rtme::root::std::errc = 36;
    pub const errc_function_not_supported: crate::core::midi::rtme::root::std::errc = 38;
    pub const errc_host_unreachable: crate::core::midi::rtme::root::std::errc = 113;
    pub const errc_identifier_removed: crate::core::midi::rtme::root::std::errc = 43;
    pub const errc_illegal_byte_sequence: crate::core::midi::rtme::root::std::errc = 84;
    pub const errc_inappropriate_io_control_operation: crate::core::midi::rtme::root::std::errc =
        25;
    pub const errc_interrupted: crate::core::midi::rtme::root::std::errc = 4;
    pub const errc_invalid_argument: crate::core::midi::rtme::root::std::errc = 22;
    pub const errc_invalid_seek: crate::core::midi::rtme::root::std::errc = 29;
    pub const errc_io_error: crate::core::midi::rtme::root::std::errc = 5;
    pub const errc_is_a_directory: crate::core::midi::rtme::root::std::errc = 21;
    pub const errc_message_size: crate::core::midi::rtme::root::std::errc = 90;
    pub const errc_network_down: crate::core::midi::rtme::root::std::errc = 100;
    pub const errc_network_reset: crate::core::midi::rtme::root::std::errc = 102;
    pub const errc_network_unreachable: crate::core::midi::rtme::root::std::errc = 101;
    pub const errc_no_buffer_space: crate::core::midi::rtme::root::std::errc = 105;
    pub const errc_no_child_process: crate::core::midi::rtme::root::std::errc = 10;
    pub const errc_no_link: crate::core::midi::rtme::root::std::errc = 67;
    pub const errc_no_lock_available: crate::core::midi::rtme::root::std::errc = 37;
    pub const errc_no_message_available: crate::core::midi::rtme::root::std::errc = 61;
    pub const errc_no_message: crate::core::midi::rtme::root::std::errc = 42;
    pub const errc_no_protocol_option: crate::core::midi::rtme::root::std::errc = 92;
    pub const errc_no_space_on_device: crate::core::midi::rtme::root::std::errc = 28;
    pub const errc_no_stream_resources: crate::core::midi::rtme::root::std::errc = 63;
    pub const errc_no_such_device_or_address: crate::core::midi::rtme::root::std::errc = 6;
    pub const errc_no_such_device: crate::core::midi::rtme::root::std::errc = 19;
    pub const errc_no_such_file_or_directory: crate::core::midi::rtme::root::std::errc = 2;
    pub const errc_no_such_process: crate::core::midi::rtme::root::std::errc = 3;
    pub const errc_not_a_directory: crate::core::midi::rtme::root::std::errc = 20;
    pub const errc_not_a_socket: crate::core::midi::rtme::root::std::errc = 88;
    pub const errc_not_a_stream: crate::core::midi::rtme::root::std::errc = 60;
    pub const errc_not_connected: crate::core::midi::rtme::root::std::errc = 107;
    pub const errc_not_enough_memory: crate::core::midi::rtme::root::std::errc = 12;
    pub const errc_not_supported: crate::core::midi::rtme::root::std::errc = 95;
    pub const errc_operation_canceled: crate::core::midi::rtme::root::std::errc = 125;
    pub const errc_operation_in_progress: crate::core::midi::rtme::root::std::errc = 115;
    pub const errc_operation_not_permitted: crate::core::midi::rtme::root::std::errc = 1;
    pub const errc_operation_not_supported: crate::core::midi::rtme::root::std::errc = 95;
    pub const errc_operation_would_block: crate::core::midi::rtme::root::std::errc = 11;
    pub const errc_owner_dead: crate::core::midi::rtme::root::std::errc = 130;
    pub const errc_permission_denied: crate::core::midi::rtme::root::std::errc = 13;
    pub const errc_protocol_error: crate::core::midi::rtme::root::std::errc = 71;
    pub const errc_protocol_not_supported: crate::core::midi::rtme::root::std::errc = 93;
    pub const errc_read_only_file_system: crate::core::midi::rtme::root::std::errc = 30;
    pub const errc_resource_deadlock_would_occur: crate::core::midi::rtme::root::std::errc = 35;
    pub const errc_resource_unavailable_try_again: crate::core::midi::rtme::root::std::errc = 11;
    pub const errc_result_out_of_range: crate::core::midi::rtme::root::std::errc = 34;
    pub const errc_state_not_recoverable: crate::core::midi::rtme::root::std::errc = 131;
    pub const errc_stream_timeout: crate::core::midi::rtme::root::std::errc = 62;
    pub const errc_text_file_busy: crate::core::midi::rtme::root::std::errc = 26;
    pub const errc_timed_out: crate::core::midi::rtme::root::std::errc = 110;
    pub const errc_too_many_files_open_in_system: crate::core::midi::rtme::root::std::errc = 23;
    pub const errc_too_many_files_open: crate::core::midi::rtme::root::std::errc = 24;
    pub const errc_too_many_links: crate::core::midi::rtme::root::std::errc = 31;
    pub const errc_too_many_symbolic_link_levels: crate::core::midi::rtme::root::std::errc = 40;
    pub const errc_value_too_large: crate::core::midi::rtme::root::std::errc = 75;
    pub const errc_wrong_protocol_type: crate::core::midi::rtme::root::std::errc = 91;
    pub type errc = i32;
    #[repr(C)]
    pub struct __cow_string {
        pub __bindgen_anon_1: crate::core::midi::rtme::root::std::__cow_string__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __cow_string__bindgen_ty_1 {
        pub _M_p: *const ::std::os::raw::c_char,
        pub _M_bytes: [::std::os::raw::c_char; 8usize],
        _bindgen_union_align: u64,
    }
    // #[test]
    // fn bindgen_test_layout___cow_string__bindgen_ty_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__cow_string__bindgen_ty_1>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(__cow_string__bindgen_ty_1))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__cow_string__bindgen_ty_1>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(__cow_string__bindgen_ty_1))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_p as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(__cow_string__bindgen_ty_1),
    //             "::",
    //             stringify!(_M_p)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_bytes as *const _
    //                 as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(__cow_string__bindgen_ty_1),
    //             "::",
    //             stringify!(_M_bytes)
    //         )
    //     );
    // }
    impl Default for __cow_string__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __cow_string__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__cow_string__bindgen_ty_1 {{ union }}")
        }
    }
    // #[test]
    // fn bindgen_test_layout___cow_string() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__cow_string>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(__cow_string))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__cow_string>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(__cow_string))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string(
            this: *mut crate::core::midi::rtme::root::std::__cow_string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string1(
            this: *mut crate::core::midi::rtme::root::std::__cow_string,
            arg1: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string2(
            this: *mut crate::core::midi::rtme::root::std::__cow_string,
            arg1: *const ::std::os::raw::c_char,
            arg2: usize,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string3(
            this: *mut crate::core::midi::rtme::root::std::__cow_string,
            arg1: *const crate::core::midi::rtme::root::std::__cow_string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string"]
        pub fn __cow_string___cow_string4(
            this: *mut crate::core::midi::rtme::root::std::__cow_string,
            arg1: *mut crate::core::midi::rtme::root::std::__cow_string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__cow_string_destructor"]
        pub fn __cow_string___cow_string_destructor(
            this: *mut crate::core::midi::rtme::root::std::__cow_string,
        );
    }
    impl Default for __cow_string {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __cow_string {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "__cow_string {{ __bindgen_anon_1: {:?} }}",
                self.__bindgen_anon_1
            )
        }
    }
    impl __cow_string {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            arg1: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: usize) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string2(&mut __bindgen_tmp, arg1, arg2);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new3(arg1: *const crate::core::midi::rtme::root::std::__cow_string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string3(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new4(arg1: *mut crate::core::midi::rtme::root::std::__cow_string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __cow_string___cow_string4(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            __cow_string___cow_string_destructor(self)
        }
    }
    pub type __sso_string =
        crate::core::midi::rtme::root::std::__cxx11::basic_string<::std::os::raw::c_char>;
    #[repr(C)]
    pub struct logic_error {
        pub _base: crate::core::midi::rtme::root::std::exception,
        pub _M_msg: crate::core::midi::rtme::root::std::__cow_string,
    }
    // #[test]
    // fn bindgen_test_layout_logic_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<logic_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(logic_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<logic_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(logic_error))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<logic_error>()))._M_msg as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(logic_error),
    //             "::",
    //             stringify!(_M_msg)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}logic_error"]
        pub fn logic_error_logic_error(
            this: *mut crate::core::midi::rtme::root::std::logic_error,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}logic_error"]
        pub fn logic_error_logic_error1(
            this: *mut crate::core::midi::rtme::root::std::logic_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}logic_error"]
        pub fn logic_error_logic_error2(
            this: *mut crate::core::midi::rtme::root::std::logic_error,
            arg1: *const crate::core::midi::rtme::root::std::logic_error,
        );
    }
    impl Default for logic_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for logic_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "logic_error {{ _M_msg: {:?} }}", self._M_msg)
        }
    }
    impl logic_error {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            logic_error_logic_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            logic_error_logic_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(arg1: *const crate::core::midi::rtme::root::std::logic_error) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            logic_error_logic_error2(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}logic_error_destructor"]
        pub fn logic_error_logic_error_destructor(
            this: *mut crate::core::midi::rtme::root::std::logic_error,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn logic_error_what(this: *mut ::std::os::raw::c_void)
            -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    pub struct domain_error {
        pub _base: crate::core::midi::rtme::root::std::logic_error,
    }
    // #[test]
    // fn bindgen_test_layout_domain_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<domain_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(domain_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<domain_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(domain_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}domain_error"]
        pub fn domain_error_domain_error(
            this: *mut crate::core::midi::rtme::root::std::domain_error,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}domain_error"]
        pub fn domain_error_domain_error1(
            this: *mut crate::core::midi::rtme::root::std::domain_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for domain_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for domain_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "domain_error {{  }}")
        }
    }
    impl domain_error {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            domain_error_domain_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            domain_error_domain_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}domain_error_destructor"]
        pub fn domain_error_domain_error_destructor(
            this: *mut crate::core::midi::rtme::root::std::domain_error,
        );
    }
    #[repr(C)]
    pub struct invalid_argument {
        pub _base: crate::core::midi::rtme::root::std::logic_error,
    }
    // #[test]
    // fn bindgen_test_layout_invalid_argument() {
    //     assert_eq!(
    //         ::std::mem::size_of::<invalid_argument>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(invalid_argument))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<invalid_argument>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(invalid_argument))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}invalid_argument"]
        pub fn invalid_argument_invalid_argument(
            this: *mut crate::core::midi::rtme::root::std::invalid_argument,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}invalid_argument"]
        pub fn invalid_argument_invalid_argument1(
            this: *mut crate::core::midi::rtme::root::std::invalid_argument,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for invalid_argument {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for invalid_argument {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "invalid_argument {{  }}")
        }
    }
    impl invalid_argument {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            invalid_argument_invalid_argument(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            invalid_argument_invalid_argument1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}invalid_argument_destructor"]
        pub fn invalid_argument_invalid_argument_destructor(
            this: *mut crate::core::midi::rtme::root::std::invalid_argument,
        );
    }
    #[repr(C)]
    pub struct length_error {
        pub _base: crate::core::midi::rtme::root::std::logic_error,
    }
    // #[test]
    // fn bindgen_test_layout_length_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<length_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(length_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<length_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(length_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}length_error"]
        pub fn length_error_length_error(
            this: *mut crate::core::midi::rtme::root::std::length_error,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}length_error"]
        pub fn length_error_length_error1(
            this: *mut crate::core::midi::rtme::root::std::length_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for length_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for length_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "length_error {{  }}")
        }
    }
    impl length_error {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            length_error_length_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            length_error_length_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}length_error_destructor"]
        pub fn length_error_length_error_destructor(
            this: *mut crate::core::midi::rtme::root::std::length_error,
        );
    }
    #[repr(C)]
    pub struct out_of_range {
        pub _base: crate::core::midi::rtme::root::std::logic_error,
    }
    // #[test]
    // fn bindgen_test_layout_out_of_range() {
    //     assert_eq!(
    //         ::std::mem::size_of::<out_of_range>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(out_of_range))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<out_of_range>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(out_of_range))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}out_of_range"]
        pub fn out_of_range_out_of_range(
            this: *mut crate::core::midi::rtme::root::std::out_of_range,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}out_of_range"]
        pub fn out_of_range_out_of_range1(
            this: *mut crate::core::midi::rtme::root::std::out_of_range,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for out_of_range {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for out_of_range {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "out_of_range {{  }}")
        }
    }
    impl out_of_range {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            out_of_range_out_of_range(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            out_of_range_out_of_range1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}out_of_range_destructor"]
        pub fn out_of_range_out_of_range_destructor(
            this: *mut crate::core::midi::rtme::root::std::out_of_range,
        );
    }
    #[repr(C)]
    pub struct runtime_error {
        pub _base: crate::core::midi::rtme::root::std::exception,
        pub _M_msg: crate::core::midi::rtme::root::std::__cow_string,
    }
    // #[test]
    // fn bindgen_test_layout_runtime_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<runtime_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(runtime_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<runtime_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(runtime_error))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<runtime_error>()))._M_msg as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(runtime_error),
    //             "::",
    //             stringify!(_M_msg)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}runtime_error"]
        pub fn runtime_error_runtime_error(
            this: *mut crate::core::midi::rtme::root::std::runtime_error,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}runtime_error"]
        pub fn runtime_error_runtime_error1(
            this: *mut crate::core::midi::rtme::root::std::runtime_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}runtime_error"]
        pub fn runtime_error_runtime_error2(
            this: *mut crate::core::midi::rtme::root::std::runtime_error,
            arg1: *const crate::core::midi::rtme::root::std::runtime_error,
        );
    }
    impl Default for runtime_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for runtime_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "runtime_error {{ _M_msg: {:?} }}", self._M_msg)
        }
    }
    impl runtime_error {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            runtime_error_runtime_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            runtime_error_runtime_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(arg1: *const crate::core::midi::rtme::root::std::runtime_error) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            runtime_error_runtime_error2(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}runtime_error_destructor"]
        pub fn runtime_error_runtime_error_destructor(
            this: *mut crate::core::midi::rtme::root::std::runtime_error,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn runtime_error_what(
            this: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char;
    }
    #[repr(C)]
    pub struct range_error {
        pub _base: crate::core::midi::rtme::root::std::runtime_error,
    }
    // #[test]
    // fn bindgen_test_layout_range_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<range_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(range_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<range_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(range_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}range_error"]
        pub fn range_error_range_error(
            this: *mut crate::core::midi::rtme::root::std::range_error,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}range_error"]
        pub fn range_error_range_error1(
            this: *mut crate::core::midi::rtme::root::std::range_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for range_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for range_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "range_error {{  }}")
        }
    }
    impl range_error {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            range_error_range_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            range_error_range_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}range_error_destructor"]
        pub fn range_error_range_error_destructor(
            this: *mut crate::core::midi::rtme::root::std::range_error,
        );
    }
    #[repr(C)]
    pub struct overflow_error {
        pub _base: crate::core::midi::rtme::root::std::runtime_error,
    }
    // #[test]
    // fn bindgen_test_layout_overflow_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<overflow_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(overflow_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<overflow_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(overflow_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}overflow_error"]
        pub fn overflow_error_overflow_error(
            this: *mut crate::core::midi::rtme::root::std::overflow_error,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}overflow_error"]
        pub fn overflow_error_overflow_error1(
            this: *mut crate::core::midi::rtme::root::std::overflow_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for overflow_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for overflow_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "overflow_error {{  }}")
        }
    }
    impl overflow_error {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            overflow_error_overflow_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            overflow_error_overflow_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}overflow_error_destructor"]
        pub fn overflow_error_overflow_error_destructor(
            this: *mut crate::core::midi::rtme::root::std::overflow_error,
        );
    }
    #[repr(C)]
    pub struct underflow_error {
        pub _base: crate::core::midi::rtme::root::std::runtime_error,
    }
    // #[test]
    // fn bindgen_test_layout_underflow_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<underflow_error>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(underflow_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<underflow_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(underflow_error))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}underflow_error"]
        pub fn underflow_error_underflow_error(
            this: *mut crate::core::midi::rtme::root::std::underflow_error,
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}underflow_error"]
        pub fn underflow_error_underflow_error1(
            this: *mut crate::core::midi::rtme::root::std::underflow_error,
            arg1: *const ::std::os::raw::c_char,
        );
    }
    impl Default for underflow_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for underflow_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "underflow_error {{  }}")
        }
    }
    impl underflow_error {
        #[inline]
        pub unsafe fn new(
            __arg: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            underflow_error_underflow_error(&mut __bindgen_tmp, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            underflow_error_underflow_error1(&mut __bindgen_tmp, arg1);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}underflow_error_destructor"]
        pub fn underflow_error_underflow_error_destructor(
            this: *mut crate::core::midi::rtme::root::std::underflow_error,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_error_code_enum {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct is_error_condition_enum {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    // #[test]
    // fn __bindgen_test_layout_is_error_condition_enum_open0_errc_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::is_error_condition_enum>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::is_error_condition_enum)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::is_error_condition_enum>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::is_error_condition_enum)
    //         )
    //     );
    // }
    pub mod _V2 {

        #[repr(C)]
        pub struct error_category__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct error_category {
            pub vtable_: *const error_category__bindgen_vtable,
        }
        // #[test]
        // fn bindgen_test_layout_error_category() {
        //     assert_eq!(
        //         ::std::mem::size_of::<error_category>(),
        //         8usize,
        //         concat!("Size of: ", stringify!(error_category))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<error_category>(),
        //         8usize,
        //         concat!("Alignment of ", stringify!(error_category))
        //     );
        // }
        impl Default for error_category {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}error_category_destructor"]
            pub fn error_category_error_category_destructor(
                this: *mut crate::core::midi::rtme::root::std::_V2::error_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}default_error_condition"]
            pub fn error_category_default_error_condition(
                this: *mut ::std::os::raw::c_void,
                __i: ::std::os::raw::c_int,
            ) -> crate::core::midi::rtme::root::std::error_condition;
        }
        extern "C" {
            #[link_name = "\u{1}equivalent"]
            pub fn error_category_equivalent(
                this: *mut ::std::os::raw::c_void,
                __i: ::std::os::raw::c_int,
                __cond: *const crate::core::midi::rtme::root::std::error_condition,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}equivalent"]
            pub fn error_category_equivalent1(
                this: *mut ::std::os::raw::c_void,
                __code: *const crate::core::midi::rtme::root::std::error_code,
                __i: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            pub fn system_category(
            ) -> *const crate::core::midi::rtme::root::std::_V2::error_category;
        }
        extern "C" {
            pub fn generic_category(
            ) -> *const crate::core::midi::rtme::root::std::_V2::error_category;
        }
    }
    extern "C" {
        pub fn make_error_code(
            arg1: crate::core::midi::rtme::root::std::errc,
        ) -> crate::core::midi::rtme::root::std::error_code;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct error_code {
        pub _M_value: ::std::os::raw::c_int,
        pub _M_cat: *const crate::core::midi::rtme::root::std::_V2::error_category,
    }
    // #[test]
    // fn bindgen_test_layout_error_code() {
    //     assert_eq!(
    //         ::std::mem::size_of::<error_code>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(error_code))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<error_code>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(error_code))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<error_code>()))._M_value as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(error_code),
    //             "::",
    //             stringify!(_M_value)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<error_code>()))._M_cat as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(error_code),
    //             "::",
    //             stringify!(_M_cat)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}default_error_condition"]
        pub fn error_code_default_error_condition(
            this: *const crate::core::midi::rtme::root::std::error_code,
        ) -> crate::core::midi::rtme::root::std::error_condition;
    }
    impl Default for error_code {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl error_code {
        #[inline]
        pub unsafe fn default_error_condition(
            &self,
        ) -> crate::core::midi::rtme::root::std::error_condition {
            error_code_default_error_condition(self)
        }
    }
    extern "C" {
        pub fn make_error_condition(
            arg1: crate::core::midi::rtme::root::std::errc,
        ) -> crate::core::midi::rtme::root::std::error_condition;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct error_condition {
        pub _M_value: ::std::os::raw::c_int,
        pub _M_cat: *const crate::core::midi::rtme::root::std::_V2::error_category,
    }
    // #[test]
    // fn bindgen_test_layout_error_condition() {
    //     assert_eq!(
    //         ::std::mem::size_of::<error_condition>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(error_condition))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<error_condition>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(error_condition))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<error_condition>()))._M_value as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(error_condition),
    //             "::",
    //             stringify!(_M_value)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<error_condition>()))._M_cat as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(error_condition),
    //             "::",
    //             stringify!(_M_cat)
    //         )
    //     );
    // }
    impl Default for error_condition {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct system_error {
        pub _base: crate::core::midi::rtme::root::std::runtime_error,
        pub _M_code: crate::core::midi::rtme::root::std::error_code,
    }
    // #[test]
    // fn bindgen_test_layout_system_error() {
    //     assert_eq!(
    //         ::std::mem::size_of::<system_error>(),
    //         32usize,
    //         concat!("Size of: ", stringify!(system_error))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<system_error>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(system_error))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<system_error>()))._M_code as *const _ as usize },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(system_error),
    //             "::",
    //             stringify!(_M_code)
    //         )
    //     );
    // }
    impl Default for system_error {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for system_error {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "system_error {{ _M_code: {:?} }}", self._M_code)
        }
    }
    extern "C" {
        #[link_name = "\u{1}system_error_destructor"]
        pub fn system_error_system_error_destructor(
            this: *mut crate::core::midi::rtme::root::std::system_error,
        );
    }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_error_code_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_hash_open0_error_condition_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::hash>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::hash)
    //         )
    //     );
    // }
    pub const _Ios_Fmtflags__S_boolalpha: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 1;
    pub const _Ios_Fmtflags__S_dec: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 2;
    pub const _Ios_Fmtflags__S_fixed: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 4;
    pub const _Ios_Fmtflags__S_hex: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 8;
    pub const _Ios_Fmtflags__S_internal: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 16;
    pub const _Ios_Fmtflags__S_left: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 32;
    pub const _Ios_Fmtflags__S_oct: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 64;
    pub const _Ios_Fmtflags__S_right: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 128;
    pub const _Ios_Fmtflags__S_scientific: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 256;
    pub const _Ios_Fmtflags__S_showbase: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 512;
    pub const _Ios_Fmtflags__S_showpoint: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 1024;
    pub const _Ios_Fmtflags__S_showpos: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 2048;
    pub const _Ios_Fmtflags__S_skipws: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 4096;
    pub const _Ios_Fmtflags__S_unitbuf: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 8192;
    pub const _Ios_Fmtflags__S_uppercase: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 16384;
    pub const _Ios_Fmtflags__S_adjustfield: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 176;
    pub const _Ios_Fmtflags__S_basefield: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 74;
    pub const _Ios_Fmtflags__S_floatfield: crate::core::midi::rtme::root::std::_Ios_Fmtflags = 260;
    pub const _Ios_Fmtflags__S_ios_fmtflags_end: crate::core::midi::rtme::root::std::_Ios_Fmtflags =
        65536;
    pub const _Ios_Fmtflags__S_ios_fmtflags_max: crate::core::midi::rtme::root::std::_Ios_Fmtflags =
        2147483647;
    pub const _Ios_Fmtflags__S_ios_fmtflags_min: crate::core::midi::rtme::root::std::_Ios_Fmtflags =
        -2147483648;
    pub type _Ios_Fmtflags = i32;
    pub const _Ios_Openmode__S_app: crate::core::midi::rtme::root::std::_Ios_Openmode = 1;
    pub const _Ios_Openmode__S_ate: crate::core::midi::rtme::root::std::_Ios_Openmode = 2;
    pub const _Ios_Openmode__S_bin: crate::core::midi::rtme::root::std::_Ios_Openmode = 4;
    pub const _Ios_Openmode__S_in: crate::core::midi::rtme::root::std::_Ios_Openmode = 8;
    pub const _Ios_Openmode__S_out: crate::core::midi::rtme::root::std::_Ios_Openmode = 16;
    pub const _Ios_Openmode__S_trunc: crate::core::midi::rtme::root::std::_Ios_Openmode = 32;
    pub const _Ios_Openmode__S_ios_openmode_end: crate::core::midi::rtme::root::std::_Ios_Openmode =
        65536;
    pub const _Ios_Openmode__S_ios_openmode_max: crate::core::midi::rtme::root::std::_Ios_Openmode =
        2147483647;
    pub const _Ios_Openmode__S_ios_openmode_min: crate::core::midi::rtme::root::std::_Ios_Openmode =
        -2147483648;
    pub type _Ios_Openmode = i32;
    pub const _Ios_Iostate__S_goodbit: crate::core::midi::rtme::root::std::_Ios_Iostate = 0;
    pub const _Ios_Iostate__S_badbit: crate::core::midi::rtme::root::std::_Ios_Iostate = 1;
    pub const _Ios_Iostate__S_eofbit: crate::core::midi::rtme::root::std::_Ios_Iostate = 2;
    pub const _Ios_Iostate__S_failbit: crate::core::midi::rtme::root::std::_Ios_Iostate = 4;
    pub const _Ios_Iostate__S_ios_iostate_end: crate::core::midi::rtme::root::std::_Ios_Iostate =
        65536;
    pub const _Ios_Iostate__S_ios_iostate_max: crate::core::midi::rtme::root::std::_Ios_Iostate =
        2147483647;
    pub const _Ios_Iostate__S_ios_iostate_min: crate::core::midi::rtme::root::std::_Ios_Iostate =
        -2147483648;
    pub type _Ios_Iostate = i32;
    pub const _Ios_Seekdir__S_beg: crate::core::midi::rtme::root::std::_Ios_Seekdir = 0;
    pub const _Ios_Seekdir__S_cur: crate::core::midi::rtme::root::std::_Ios_Seekdir = 1;
    pub const _Ios_Seekdir__S_end: crate::core::midi::rtme::root::std::_Ios_Seekdir = 2;
    pub const _Ios_Seekdir__S_ios_seekdir_end: crate::core::midi::rtme::root::std::_Ios_Seekdir =
        65536;
    pub type _Ios_Seekdir = u32;
    pub const io_errc_stream: crate::core::midi::rtme::root::std::io_errc = 1;
    pub type io_errc = i32;
    // #[test]
    // fn __bindgen_test_layout_is_error_code_enum_open0_io_errc_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::is_error_code_enum>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::is_error_code_enum)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::is_error_code_enum>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::is_error_code_enum)
    //         )
    //     );
    // }
    extern "C" {
        pub fn iostream_category() -> *const crate::core::midi::rtme::root::std::_V2::error_category;
    }
    #[repr(C)]
    pub struct ios_base__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ios_base {
        pub vtable_: *const ios_base__bindgen_vtable,
        pub _M_precision: crate::core::midi::rtme::root::std::streamsize,
        pub _M_width: crate::core::midi::rtme::root::std::streamsize,
        pub _M_flags: crate::core::midi::rtme::root::std::ios_base_fmtflags,
        pub _M_exception: crate::core::midi::rtme::root::std::ios_base_iostate,
        pub _M_streambuf_state: crate::core::midi::rtme::root::std::ios_base_iostate,
        pub _M_callbacks: *mut crate::core::midi::rtme::root::std::ios_base__Callback_list,
        pub _M_word_zero: crate::core::midi::rtme::root::std::ios_base__Words,
        pub _M_local_word: [self::std::ios_base__Words; 8usize],
        pub _M_word_size: ::std::os::raw::c_int,
        pub _M_word: *mut crate::core::midi::rtme::root::std::ios_base__Words,
        pub _M_ios_locale: crate::core::midi::rtme::root::std::locale,
    }
    #[repr(C)]
    pub struct ios_base_failure {
        pub _base: crate::core::midi::rtme::root::std::system_error,
    }
    // #[test]
    // fn bindgen_test_layout_ios_base_failure() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base_failure>(),
    //         32usize,
    //         concat!("Size of: ", stringify!(ios_base_failure))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base_failure>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(ios_base_failure))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}failure"]
        pub fn ios_base_failure_failure(
            this: *mut crate::core::midi::rtme::root::std::ios_base_failure,
            __str: *const crate::core::midi::rtme::root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}failure"]
        pub fn ios_base_failure_failure1(
            this: *mut crate::core::midi::rtme::root::std::ios_base_failure,
            arg1: *const crate::core::midi::rtme::root::std::__cxx11::string,
            arg2: *const crate::core::midi::rtme::root::std::error_code,
        );
    }
    extern "C" {
        #[link_name = "\u{1}failure"]
        pub fn ios_base_failure_failure2(
            this: *mut crate::core::midi::rtme::root::std::ios_base_failure,
            arg1: *const ::std::os::raw::c_char,
            arg2: *const crate::core::midi::rtme::root::std::error_code,
        );
    }
    impl Default for ios_base_failure {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for ios_base_failure {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "ios_base_failure {{  }}")
        }
    }
    impl ios_base_failure {
        #[inline]
        pub unsafe fn new(
            __str: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_failure_failure(&mut __bindgen_tmp, __str);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            arg1: *const crate::core::midi::rtme::root::std::__cxx11::string,
            arg2: *const crate::core::midi::rtme::root::std::error_code,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_failure_failure1(&mut __bindgen_tmp, arg1, arg2);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new2(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const crate::core::midi::rtme::root::std::error_code,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_failure_failure2(&mut __bindgen_tmp, arg1, arg2);
            __bindgen_tmp
        }
    }
    pub use crate::core::midi::midic::root::std::_Ios_Fmtflags as ios_base_fmtflags;
    pub use crate::core::midi::midic::root::std::_Ios_Iostate as ios_base_iostate;
    pub use crate::core::midi::midic::root::std::_Ios_Openmode as ios_base_openmode;
    pub use crate::core::midi::midic::root::std::_Ios_Seekdir as ios_base_seekdir;
    pub const ios_base_event_erase_event: crate::core::midi::rtme::root::std::ios_base_event = 0;
    pub const ios_base_event_imbue_event: crate::core::midi::rtme::root::std::ios_base_event = 1;
    pub const ios_base_event_copyfmt_event: crate::core::midi::rtme::root::std::ios_base_event = 2;
    pub type ios_base_event = u32;
    pub type ios_base_event_callback = ::std::option::Option<
        unsafe extern "C" fn(
            __e: crate::core::midi::rtme::root::std::ios_base_event,
            __b: *mut crate::core::midi::rtme::root::std::ios_base,
            __i: ::std::os::raw::c_int,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ios_base__Callback_list {
        pub _M_next: *mut crate::core::midi::rtme::root::std::ios_base__Callback_list,
        pub _M_fn: crate::core::midi::rtme::root::std::ios_base_event_callback,
        pub _M_index: ::std::os::raw::c_int,
        pub _M_refcount: crate::core::midi::rtme::root::_Atomic_word,
    }
    // #[test]
    // fn bindgen_test_layout_ios_base__Callback_list() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base__Callback_list>(),
    //         24usize,
    //         concat!("Size of: ", stringify!(ios_base__Callback_list))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base__Callback_list>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(ios_base__Callback_list))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_next as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Callback_list),
    //             "::",
    //             stringify!(_M_next)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_fn as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Callback_list),
    //             "::",
    //             stringify!(_M_fn)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_index as *const _
    //                 as usize
    //         },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Callback_list),
    //             "::",
    //             stringify!(_M_index)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_refcount as *const _
    //                 as usize
    //         },
    //         20usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Callback_list),
    //             "::",
    //             stringify!(_M_refcount)
    //         )
    //     );
    // }
    impl Default for ios_base__Callback_list {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ios_base__Words {
        pub _M_pword: *mut ::std::os::raw::c_void,
        pub _M_iword: ::std::os::raw::c_long,
    }
    // #[test]
    // fn bindgen_test_layout_ios_base__Words() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base__Words>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(ios_base__Words))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base__Words>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(ios_base__Words))
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Words>()))._M_pword as *const _ as usize
    //         },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Words),
    //             "::",
    //             stringify!(_M_pword)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base__Words>()))._M_iword as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base__Words),
    //             "::",
    //             stringify!(_M_iword)
    //         )
    //     );
    // }
    impl Default for ios_base__Words {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const ios_base__S_local_word_size:
        crate::core::midi::rtme::root::std::ios_base__bindgen_ty_1 = 8;
    pub type ios_base__bindgen_ty_1 = u32;
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ios_base_Init {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_S_refcount"]
        pub static mut ios_base_Init__S_refcount: crate::core::midi::rtme::root::_Atomic_word;
    }
    extern "C" {
        #[link_name = "\u{1}_S_synced_with_stdio"]
        pub static mut ios_base_Init__S_synced_with_stdio: bool;
    }
    // #[test]
    // fn bindgen_test_layout_ios_base_Init() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base_Init>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(ios_base_Init))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base_Init>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(ios_base_Init))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}Init"]
        pub fn ios_base_Init_Init(this: *mut crate::core::midi::rtme::root::std::ios_base_Init);
    }
    extern "C" {
        #[link_name = "\u{1}Init_destructor"]
        pub fn ios_base_Init_Init_destructor(
            this: *mut crate::core::midi::rtme::root::std::ios_base_Init,
        );
    }
    impl ios_base_Init {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_Init_Init(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ios_base_Init_Init_destructor(self)
        }
    }
    extern "C" {
        #[link_name = "\u{1}boolalpha"]
        pub static ios_base_boolalpha: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}dec"]
        pub static ios_base_dec: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}fixed"]
        pub static ios_base_fixed: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}hex"]
        pub static ios_base_hex: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}internal"]
        pub static ios_base_internal: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}left"]
        pub static ios_base_left: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}oct"]
        pub static ios_base_oct: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}right"]
        pub static ios_base_right: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}scientific"]
        pub static ios_base_scientific: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}showbase"]
        pub static ios_base_showbase: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}showpoint"]
        pub static ios_base_showpoint: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}showpos"]
        pub static ios_base_showpos: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}skipws"]
        pub static ios_base_skipws: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}unitbuf"]
        pub static ios_base_unitbuf: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}uppercase"]
        pub static ios_base_uppercase: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}adjustfield"]
        pub static ios_base_adjustfield: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}basefield"]
        pub static ios_base_basefield: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}floatfield"]
        pub static ios_base_floatfield: crate::core::midi::rtme::root::std::ios_base_fmtflags;
    }
    extern "C" {
        #[link_name = "\u{1}badbit"]
        pub static ios_base_badbit: crate::core::midi::rtme::root::std::ios_base_iostate;
    }
    extern "C" {
        #[link_name = "\u{1}eofbit"]
        pub static ios_base_eofbit: crate::core::midi::rtme::root::std::ios_base_iostate;
    }
    extern "C" {
        #[link_name = "\u{1}failbit"]
        pub static ios_base_failbit: crate::core::midi::rtme::root::std::ios_base_iostate;
    }
    extern "C" {
        #[link_name = "\u{1}goodbit"]
        pub static ios_base_goodbit: crate::core::midi::rtme::root::std::ios_base_iostate;
    }
    extern "C" {
        #[link_name = "\u{1}app"]
        pub static ios_base_app: crate::core::midi::rtme::root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}ate"]
        pub static ios_base_ate: crate::core::midi::rtme::root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}binary"]
        pub static ios_base_binary: crate::core::midi::rtme::root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}in"]
        pub static ios_base_in: crate::core::midi::rtme::root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}out"]
        pub static ios_base_out: crate::core::midi::rtme::root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}trunc"]
        pub static ios_base_trunc: crate::core::midi::rtme::root::std::ios_base_openmode;
    }
    extern "C" {
        #[link_name = "\u{1}beg"]
        pub static ios_base_beg: crate::core::midi::rtme::root::std::ios_base_seekdir;
    }
    extern "C" {
        #[link_name = "\u{1}cur"]
        pub static ios_base_cur: crate::core::midi::rtme::root::std::ios_base_seekdir;
    }
    extern "C" {
        #[link_name = "\u{1}end"]
        pub static ios_base_end: crate::core::midi::rtme::root::std::ios_base_seekdir;
    }
    // #[test]
    // fn bindgen_test_layout_ios_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ios_base>(),
    //         216usize,
    //         concat!("Size of: ", stringify!(ios_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ios_base>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(ios_base))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_precision as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_precision)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_width as *const _ as usize },
    //         16usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_width)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_flags as *const _ as usize },
    //         24usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_flags)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_exception as *const _ as usize },
    //         28usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_exception)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<ios_base>()))._M_streambuf_state as *const _ as usize
    //         },
    //         32usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_streambuf_state)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_callbacks as *const _ as usize },
    //         40usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_callbacks)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word_zero as *const _ as usize },
    //         48usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_word_zero)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_local_word as *const _ as usize },
    //         64usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_local_word)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word_size as *const _ as usize },
    //         192usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_word_size)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word as *const _ as usize },
    //         200usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_word)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<ios_base>()))._M_ios_locale as *const _ as usize },
    //         208usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(ios_base),
    //             "::",
    //             stringify!(_M_ios_locale)
    //         )
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}register_callback"]
        pub fn ios_base_register_callback(
            this: *mut crate::core::midi::rtme::root::std::ios_base,
            __fn: crate::core::midi::rtme::root::std::ios_base_event_callback,
            __index: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_M_call_callbacks"]
        pub fn ios_base__M_call_callbacks(
            this: *mut crate::core::midi::rtme::root::std::ios_base,
            __ev: crate::core::midi::rtme::root::std::ios_base_event,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_M_dispose_callbacks"]
        pub fn ios_base__M_dispose_callbacks(
            this: *mut crate::core::midi::rtme::root::std::ios_base,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_M_grow_words"]
        pub fn ios_base__M_grow_words(
            this: *mut crate::core::midi::rtme::root::std::ios_base,
            __index: ::std::os::raw::c_int,
            __iword: bool,
        ) -> *mut crate::core::midi::rtme::root::std::ios_base__Words;
    }
    extern "C" {
        #[link_name = "\u{1}_M_init"]
        pub fn ios_base__M_init(this: *mut crate::core::midi::rtme::root::std::ios_base);
    }
    extern "C" {
        #[link_name = "\u{1}sync_with_stdio"]
        pub fn ios_base_sync_with_stdio(__sync: bool) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}imbue"]
        pub fn ios_base_imbue(
            this: *mut crate::core::midi::rtme::root::std::ios_base,
            __loc: *const crate::core::midi::rtme::root::std::locale,
        ) -> crate::core::midi::rtme::root::std::locale;
    }
    extern "C" {
        #[link_name = "\u{1}xalloc"]
        pub fn ios_base_xalloc() -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_M_move"]
        pub fn ios_base__M_move(
            this: *mut crate::core::midi::rtme::root::std::ios_base,
            arg1: *mut crate::core::midi::rtme::root::std::ios_base,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_M_swap"]
        pub fn ios_base__M_swap(
            this: *mut crate::core::midi::rtme::root::std::ios_base,
            __rhs: *mut crate::core::midi::rtme::root::std::ios_base,
        );
    }
    extern "C" {
        #[link_name = "\u{1}ios_base"]
        pub fn ios_base_ios_base(this: *mut crate::core::midi::rtme::root::std::ios_base);
    }
    impl Default for ios_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ios_base {
        #[inline]
        pub unsafe fn register_callback(
            &mut self,
            __fn: crate::core::midi::rtme::root::std::ios_base_event_callback,
            __index: ::std::os::raw::c_int,
        ) {
            ios_base_register_callback(self, __fn, __index)
        }
        #[inline]
        pub unsafe fn _M_call_callbacks(
            &mut self,
            __ev: crate::core::midi::rtme::root::std::ios_base_event,
        ) {
            ios_base__M_call_callbacks(self, __ev)
        }
        #[inline]
        pub unsafe fn _M_dispose_callbacks(&mut self) {
            ios_base__M_dispose_callbacks(self)
        }
        #[inline]
        pub unsafe fn _M_grow_words(
            &mut self,
            __index: ::std::os::raw::c_int,
            __iword: bool,
        ) -> *mut crate::core::midi::rtme::root::std::ios_base__Words {
            ios_base__M_grow_words(self, __index, __iword)
        }
        #[inline]
        pub unsafe fn _M_init(&mut self) {
            ios_base__M_init(self)
        }
        #[inline]
        pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
            ios_base_sync_with_stdio(__sync)
        }
        #[inline]
        pub unsafe fn imbue(
            &mut self,
            __loc: *const crate::core::midi::rtme::root::std::locale,
        ) -> crate::core::midi::rtme::root::std::locale {
            ios_base_imbue(self, __loc)
        }
        #[inline]
        pub unsafe fn xalloc() -> ::std::os::raw::c_int {
            ios_base_xalloc()
        }
        #[inline]
        pub unsafe fn _M_move(&mut self, arg1: *mut crate::core::midi::rtme::root::std::ios_base) {
            ios_base__M_move(self, arg1)
        }
        #[inline]
        pub unsafe fn _M_swap(&mut self, __rhs: *mut crate::core::midi::rtme::root::std::ios_base) {
            ios_base__M_swap(self, __rhs)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ios_base_ios_base(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}failure_destructor"]
        pub fn ios_base_failure_failure_destructor(
            this: *mut crate::core::midi::rtme::root::std::ios_base_failure,
        );
    }
    extern "C" {
        #[link_name = "\u{1}what"]
        pub fn ios_base_failure_what(
            this: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}ios_base_destructor"]
        pub fn ios_base_ios_base_destructor(
            this: *mut crate::core::midi::rtme::root::std::ios_base,
        );
    }
    #[repr(C)]
    pub struct basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_streambuf<_CharT> {
        pub vtable_: *const basic_streambuf__bindgen_vtable,
        pub _M_in_beg: *mut crate::core::midi::rtme::root::std::basic_streambuf_char_type<_CharT>,
        pub _M_in_cur: *mut crate::core::midi::rtme::root::std::basic_streambuf_char_type<_CharT>,
        pub _M_in_end: *mut crate::core::midi::rtme::root::std::basic_streambuf_char_type<_CharT>,
        pub _M_out_beg: *mut crate::core::midi::rtme::root::std::basic_streambuf_char_type<_CharT>,
        pub _M_out_cur: *mut crate::core::midi::rtme::root::std::basic_streambuf_char_type<_CharT>,
        pub _M_out_end: *mut crate::core::midi::rtme::root::std::basic_streambuf_char_type<_CharT>,
        pub _M_buf_locale: crate::core::midi::rtme::root::std::locale,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_streambuf_char_type<_CharT> = _CharT;
    pub type basic_streambuf_traits_type<_Traits> = _Traits;
    pub type basic_streambuf_int_type = [u8; 0usize];
    pub type basic_streambuf_pos_type = [u8; 0usize];
    pub type basic_streambuf_off_type = [u8; 0usize];
    pub type basic_streambuf___streambuf_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_streambuf<
            root::std::basic_streambuf_char_type<_CharT>,
        >;
    impl<_CharT> Default for basic_streambuf<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn __copy_streambufs_eof(
            __sbin: *mut crate::core::midi::rtme::root::std::basic_streambuf<
                ::std::os::raw::c_char,
            >,
            __sbout: *mut crate::core::midi::rtme::root::std::basic_streambuf<
                ::std::os::raw::c_char,
            >,
            __ineof: *mut bool,
        ) -> crate::core::midi::rtme::root::std::streamsize;
    }
    // #[test]
    // fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
    //         64usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
    //         64usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_streambuf<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_streambuf<u32>)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ctype_base {
        pub _address: u8,
    }
    pub type ctype_base___to_type = *const ::std::os::raw::c_int;
    pub type ctype_base_mask = ::std::os::raw::c_ushort;
    pub const ctype_base_upper: crate::core::midi::rtme::root::std::ctype_base_mask = 256;
    pub const ctype_base_lower: crate::core::midi::rtme::root::std::ctype_base_mask = 512;
    pub const ctype_base_alpha: crate::core::midi::rtme::root::std::ctype_base_mask = 1024;
    pub const ctype_base_digit: crate::core::midi::rtme::root::std::ctype_base_mask = 2048;
    pub const ctype_base_xdigit: crate::core::midi::rtme::root::std::ctype_base_mask = 4096;
    pub const ctype_base_space: crate::core::midi::rtme::root::std::ctype_base_mask = 8192;
    pub const ctype_base_print: crate::core::midi::rtme::root::std::ctype_base_mask = 16384;
    pub const ctype_base_graph: crate::core::midi::rtme::root::std::ctype_base_mask = 3076;
    pub const ctype_base_cntrl: crate::core::midi::rtme::root::std::ctype_base_mask = 2;
    pub const ctype_base_punct: crate::core::midi::rtme::root::std::ctype_base_mask = 4;
    pub const ctype_base_alnum: crate::core::midi::rtme::root::std::ctype_base_mask = 3072;
    pub const ctype_base_blank: crate::core::midi::rtme::root::std::ctype_base_mask = 1;
    // #[test]
    // fn bindgen_test_layout_ctype_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<ctype_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(ctype_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<ctype_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(ctype_base))
    //     );
    // }
    #[repr(C)]
    pub struct istreambuf_iterator<_CharT> {
        pub _M_sbuf:
            *mut crate::core::midi::rtme::root::std::istreambuf_iterator_streambuf_type<_CharT>,
        pub _M_c: crate::core::midi::rtme::root::std::istreambuf_iterator_int_type,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type istreambuf_iterator_char_type<_CharT> = _CharT;
    pub type istreambuf_iterator_traits_type<_Traits> = _Traits;
    pub type istreambuf_iterator_int_type = [u8; 0usize];
    pub type istreambuf_iterator_streambuf_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_streambuf<_CharT>;
    pub type istreambuf_iterator_istream_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_istream<_CharT>;
    impl<_CharT> Default for istreambuf_iterator<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_CharT> ::std::fmt::Debug for istreambuf_iterator<_CharT> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "istreambuf_iterator {{ _M_sbuf: {:?} }}", self._M_sbuf)
        }
    }
    impl<_CharT> PartialEq for istreambuf_iterator<_CharT>
    where
        _CharT: PartialEq,
    {
        fn eq(&self, other: &istreambuf_iterator<_CharT>) -> bool {
            self._M_sbuf == other._M_sbuf && self._M_c == other._M_c
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ostreambuf_iterator<_CharT> {
        pub _M_sbuf:
            *mut crate::core::midi::rtme::root::std::ostreambuf_iterator_streambuf_type<_CharT>,
        pub _M_failed: bool,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type ostreambuf_iterator_char_type<_CharT> = _CharT;
    pub type ostreambuf_iterator_traits_type<_Traits> = _Traits;
    pub type ostreambuf_iterator_streambuf_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_streambuf<_CharT>;
    pub type ostreambuf_iterator_ostream_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_ostream<_CharT>;
    impl<_CharT> Default for ostreambuf_iterator<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn __convert_to_v(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut f32,
            arg3: *mut crate::core::midi::rtme::root::std::ios_base_iostate,
            arg4: *const crate::core::midi::rtme::root::std::__c_locale,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pad {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __ctype_abstract_base {
        pub _base: crate::core::midi::rtme::root::std::locale_facet,
    }
    pub type __ctype_abstract_base_char_type<_CharT> = _CharT;
    impl Default for __ctype_abstract_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ctype {
        pub _base: crate::core::midi::rtme::root::std::__ctype_abstract_base,
    }
    pub type ctype_char_type<_CharT> = _CharT;
    pub type ctype_mask = crate::core::midi::rtme::root::std::__ctype_abstract_base;
    impl Default for ctype {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_ctype_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype>(),
    //         576usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype>(),
    //         1344usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ctype_byname {
        pub _base: crate::core::midi::rtme::root::std::ctype,
    }
    pub type ctype_byname_mask = crate::core::midi::rtme::root::std::ctype;
    impl Default for ctype_byname {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype_byname>(),
    //         576usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype_byname>(),
    //         1344usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __num_base {
        pub _address: u8,
    }
    pub const __num_base__S_ominus: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 =
        0;
    pub const __num_base__S_oplus: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 = 1;
    pub const __num_base__S_ox: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 = 2;
    pub const __num_base__S_oX: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 = 3;
    pub const __num_base__S_odigits: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 =
        4;
    pub const __num_base__S_odigits_end:
        crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 = 20;
    pub const __num_base__S_oudigits: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 =
        20;
    pub const __num_base__S_oudigits_end:
        crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 = 36;
    pub const __num_base__S_oe: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 = 18;
    pub const __num_base__S_oE: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 = 34;
    pub const __num_base__S_oend: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_1 = 36;
    pub type __num_base__bindgen_ty_1 = u32;
    pub const __num_base__S_iminus: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_2 =
        0;
    pub const __num_base__S_iplus: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_2 = 1;
    pub const __num_base__S_ix: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_2 = 2;
    pub const __num_base__S_iX: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_2 = 3;
    pub const __num_base__S_izero: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_2 = 4;
    pub const __num_base__S_ie: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_2 = 18;
    pub const __num_base__S_iE: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_2 = 24;
    pub const __num_base__S_iend: crate::core::midi::rtme::root::std::__num_base__bindgen_ty_2 = 26;
    pub type __num_base__bindgen_ty_2 = u32;
    extern "C" {
        #[link_name = "\u{1}_S_atoms_out"]
        pub static mut __num_base__S_atoms_out: *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_S_atoms_in"]
        pub static mut __num_base__S_atoms_in: *const ::std::os::raw::c_char;
    }
    // #[test]
    // fn bindgen_test_layout___num_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__num_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__num_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__num_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__num_base))
    //     );
    // }
    extern "C" {
        #[link_name = "\u{1}_S_format_float"]
        pub fn __num_base__S_format_float(
            __io: *const crate::core::midi::rtme::root::std::ios_base,
            __fptr: *mut ::std::os::raw::c_char,
            __mod: ::std::os::raw::c_char,
        );
    }
    impl __num_base {
        #[inline]
        pub unsafe fn _S_format_float(
            __io: *const crate::core::midi::rtme::root::std::ios_base,
            __fptr: *mut ::std::os::raw::c_char,
            __mod: ::std::os::raw::c_char,
        ) {
            __num_base__S_format_float(__io, __fptr, __mod)
        }
    }
    #[repr(C)]
    pub struct __numpunct_cache<_CharT> {
        pub _base: crate::core::midi::rtme::root::std::locale_facet,
        pub _M_grouping: *const ::std::os::raw::c_char,
        pub _M_grouping_size: usize,
        pub _M_use_grouping: bool,
        pub _M_truename: *const _CharT,
        pub _M_truename_size: usize,
        pub _M_falsename: *const _CharT,
        pub _M_falsename_size: usize,
        pub _M_decimal_point: _CharT,
        pub _M_thousands_sep: _CharT,
        pub _M_atoms_out: [_CharT; 36usize],
        pub _M_atoms_in: [_CharT; 26usize],
        pub _M_allocated: bool,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    impl<_CharT> Default for __numpunct_cache<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl<_CharT> ::std::fmt::Debug for __numpunct_cache<_CharT> {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "__numpunct_cache {{ _M_grouping: {:?}, _M_grouping_size: {:?}, _M_use_grouping: {:?}, _M_truename: {:?}, _M_truename_size: {:?}, _M_falsename: {:?}, _M_falsename_size: {:?}, _M_decimal_point: Non-debuggable generic, _M_thousands_sep: Non-debuggable generic, _M_atoms_out: Array with length 36, _M_atoms_in: Array with length 26, _M_allocated: {:?} }}" , self . _M_grouping , self . _M_grouping_size , self . _M_use_grouping , self . _M_truename , self . _M_truename_size , self . _M_falsename , self . _M_falsename_size , self . _M_allocated )
        }
    }
    impl<_CharT> PartialEq for __numpunct_cache<_CharT>
    where
        _CharT: PartialEq,
    {
        fn eq(&self, other: &__numpunct_cache<_CharT>) -> bool {
            self._base == other._base
                && self._M_grouping == other._M_grouping
                && self._M_grouping_size == other._M_grouping_size
                && self._M_use_grouping == other._M_use_grouping
                && self._M_truename == other._M_truename
                && self._M_truename_size == other._M_truename_size
                && self._M_falsename == other._M_falsename
                && self._M_falsename_size == other._M_falsename_size
                && self._M_decimal_point == other._M_decimal_point
                && self._M_thousands_sep == other._M_thousands_sep
                && &self._M_atoms_out[..] == &other._M_atoms_out[..]
                && self._M_atoms_in == other._M_atoms_in
                && self._M_allocated == other._M_allocated
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct num_get {
        pub _base: crate::core::midi::rtme::root::std::locale_facet,
    }
    pub type num_get_char_type<_CharT> = _CharT;
    pub type num_get_iter_type<_InIter> = _InIter;
    impl Default for num_get {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct num_put {
        pub _base: crate::core::midi::rtme::root::std::locale_facet,
    }
    pub type num_put_char_type<_CharT> = _CharT;
    pub type num_put_iter_type<_OutIter> = _OutIter;
    impl Default for num_put {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __use_cache {
        pub _address: u8,
    }
    extern "C" {
        pub fn __verify_grouping(
            __grouping: *const ::std::os::raw::c_char,
            __grouping_size: usize,
            __grouping_tmp: *const crate::core::midi::rtme::root::std::__cxx11::string,
        ) -> bool;
    }
    // #[test]
    // fn __bindgen_test_layout_numpunct_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::numpunct<::std::os::raw::c_char>>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::numpunct<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numpunct_byname_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::numpunct_byname<::std::os::raw::c_char>>(
    //         ),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct_byname<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::numpunct_byname<::std::os::raw::c_char>>(
    //         ),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct_byname<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_num_get_open0_char_istreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::num_get>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::num_get)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::num_get>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::num_get)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_num_put_open0_char_ostreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::num_put>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::num_put)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::num_put>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::num_put)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numpunct_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::numpunct<u32>>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::numpunct<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_numpunct_byname_open0_wchar_t_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::__cxx11::numpunct_byname<u32>>(),
    //         24usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct_byname<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::__cxx11::numpunct_byname<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::__cxx11::numpunct_byname<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_num_get_open0_wchar_t_istreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::num_get>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::num_get)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::num_get>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::num_get)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_num_put_open0_wchar_t_ostreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::num_put>(),
    //         16usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::num_put)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::num_put>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::num_put)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_ios<_CharT> {
        pub _base: crate::core::midi::rtme::root::std::ios_base,
        pub _M_tie: *mut crate::core::midi::rtme::root::std::basic_ostream<_CharT>,
        pub _M_fill: crate::core::midi::rtme::root::std::basic_ios_char_type<_CharT>,
        pub _M_fill_init: bool,
        pub _M_streambuf: *mut crate::core::midi::rtme::root::std::basic_streambuf<_CharT>,
        pub _M_ctype: *const crate::core::midi::rtme::root::std::basic_ios___ctype_type,
        pub _M_num_put: *const crate::core::midi::rtme::root::std::basic_ios___num_put_type,
        pub _M_num_get: *const crate::core::midi::rtme::root::std::basic_ios___num_get_type,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_ios_char_type<_CharT> = _CharT;
    pub type basic_ios_int_type = [u8; 0usize];
    pub type basic_ios_pos_type = [u8; 0usize];
    pub type basic_ios_off_type = [u8; 0usize];
    pub type basic_ios_traits_type<_Traits> = _Traits;
    pub type basic_ios___ctype_type = crate::core::midi::rtme::root::std::ctype;
    pub type basic_ios___num_put_type = crate::core::midi::rtme::root::std::num_put;
    pub type basic_ios___num_get_type = crate::core::midi::rtme::root::std::num_get;
    impl<_CharT> Default for basic_ios<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ios<::std::os::raw::c_char>>(),
    //         264usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ios<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ios<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ios<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ios<u32>>(),
    //         264usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ios<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ios<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ios<u32>)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_ostream<_CharT> {
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_ostream_char_type<_CharT> = _CharT;
    pub type basic_ostream_int_type = [u8; 0usize];
    pub type basic_ostream_pos_type = [u8; 0usize];
    pub type basic_ostream_off_type = [u8; 0usize];
    pub type basic_ostream_traits_type<_Traits> = _Traits;
    pub type basic_ostream___streambuf_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_streambuf<_CharT>;
    pub type basic_ostream___ios_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_ios<_CharT>;
    pub type basic_ostream___ostream_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_ostream<_CharT>;
    pub type basic_ostream___num_put_type = crate::core::midi::rtme::root::std::num_put;
    pub type basic_ostream___ctype_type = crate::core::midi::rtme::root::std::ctype;
    impl<_CharT> Default for basic_ostream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_ostream_sentry {
        pub _M_ok: bool,
        pub _M_os: *mut crate::core::midi::rtme::root::std::basic_ostream<_CharT>,
    }
    impl Default for basic_ostream_sentry {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_convertible_to_basic_ostream_impl {
        pub _address: u8,
    }
    pub type __is_convertible_to_basic_ostream_impl___ostream_type = ::std::os::raw::c_void;
    pub type __do_is_convertible_to_basic_ostream_impl =
        crate::core::midi::rtme::root::std::remove_reference;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_convertible_to_basic_ostream {
        pub _address: u8,
    }
    pub type __is_convertible_to_basic_ostream_type = crate::core::midi::rtme::root::std::__not_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_insertable {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    pub type __rvalue_ostream_type =
        crate::core::midi::rtme::root::std::__is_convertible_to_basic_ostream;
    // #[test]
    // fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ostream<::std::os::raw::c_char>>(),
    //         272usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ostream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ostream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ostream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_ostream<u32>>(),
    //         272usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_ostream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_ostream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_ostream<u32>)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_istream<_CharT> {
        pub _M_gcount: crate::core::midi::rtme::root::std::streamsize,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_istream_char_type<_CharT> = _CharT;
    pub type basic_istream_int_type = [u8; 0usize];
    pub type basic_istream_pos_type = [u8; 0usize];
    pub type basic_istream_off_type = [u8; 0usize];
    pub type basic_istream_traits_type<_Traits> = _Traits;
    pub type basic_istream___streambuf_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_streambuf<_CharT>;
    pub type basic_istream___ios_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_ios<_CharT>;
    pub type basic_istream___istream_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_istream<_CharT>;
    pub type basic_istream___num_get_type = crate::core::midi::rtme::root::std::num_get;
    pub type basic_istream___ctype_type = crate::core::midi::rtme::root::std::ctype;
    impl<_CharT> Default for basic_istream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_istream_sentry {
        pub _M_ok: bool,
    }
    pub type basic_istream_sentry_traits_type = _Traits;
    pub type basic_istream_sentry___streambuf_type =
        crate::core::midi::rtme::root::std::basic_streambuf<_CharT>;
    pub type basic_istream_sentry___istream_type =
        crate::core::midi::rtme::root::std::basic_istream<_CharT>;
    pub type basic_istream_sentry___ctype_type =
        crate::core::midi::rtme::root::std::basic_istream___ctype_type;
    pub type basic_istream_sentry___int_type = [u8; 0usize];
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct basic_iostream<_CharT> {
        pub _base: crate::core::midi::rtme::root::std::basic_istream<_CharT>,
        pub _base_1: crate::core::midi::rtme::root::std::basic_ostream<_CharT>,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    }
    pub type basic_iostream_char_type<_CharT> = _CharT;
    pub type basic_iostream_int_type = [u8; 0usize];
    pub type basic_iostream_pos_type = [u8; 0usize];
    pub type basic_iostream_off_type = [u8; 0usize];
    pub type basic_iostream_traits_type<_Traits> = _Traits;
    pub type basic_iostream___istream_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_istream<_CharT>;
    pub type basic_iostream___ostream_type<_CharT> =
        crate::core::midi::rtme::root::std::basic_ostream<_CharT>;
    impl<_CharT> Default for basic_iostream<_CharT> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_convertible_to_basic_istream_impl {
        pub _address: u8,
    }
    pub type __is_convertible_to_basic_istream_impl___istream_type = ::std::os::raw::c_void;
    pub type __do_is_convertible_to_basic_istream_impl =
        crate::core::midi::rtme::root::std::remove_reference;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_convertible_to_basic_istream {
        pub _address: u8,
    }
    pub type __is_convertible_to_basic_istream_type = crate::core::midi::rtme::root::std::__not_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_extractable {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    pub type __rvalue_istream_type =
        crate::core::midi::rtme::root::std::__is_convertible_to_basic_istream;
    // #[test]
    // fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
    //         280usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_iostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_iostream<::std::os::raw::c_char>>(),
    //         288usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_iostream<::std::os::raw::c_char>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_iostream<::std::os::raw::c_char>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_iostream<::std::os::raw::c_char>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_istream<u32>>(),
    //         280usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_istream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_istream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_istream<u32>)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_basic_iostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    // ) {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::basic_iostream<u32>>(),
    //         288usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::basic_iostream<u32>)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::basic_iostream<u32>>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::basic_iostream<u32>)
    //         )
    //     );
    // }
    extern "C" {
        pub static mut cin: crate::core::midi::rtme::root::std::istream;
    }
    extern "C" {
        pub static mut cout: crate::core::midi::rtme::root::std::ostream;
    }
    extern "C" {
        pub static mut cerr: crate::core::midi::rtme::root::std::ostream;
    }
    extern "C" {
        pub static mut clog: crate::core::midi::rtme::root::std::ostream;
    }
    extern "C" {
        pub static mut wcin: crate::core::midi::rtme::root::std::wistream;
    }
    extern "C" {
        pub static mut wcout: crate::core::midi::rtme::root::std::wostream;
    }
    extern "C" {
        pub static mut wcerr: crate::core::midi::rtme::root::std::wostream;
    }
    extern "C" {
        pub static mut wclog: crate::core::midi::rtme::root::std::wostream;
    }
    extern "C" {
        pub static mut __ioinit: crate::core::midi::rtme::root::std::ios_base_Init;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct tuple_size {
        pub _address: u8,
    }
    pub type __enable_if_has_tuple_size<_Tp> = _Tp;
    pub type __tuple_element_t = u8;
    pub type tuple_element_t = u8;
    pub type _Build_index_tuple__IdxTuple = u8;
    pub type _Build_index_tuple___type = u8;
    pub type integer_sequence_value_type<_Tp> = _Tp;
    pub type make_integer_sequence = u8;
    pub type index_sequence = u8;
    pub type make_index_sequence = crate::core::midi::rtme::root::std::make_integer_sequence;
    pub type index_sequence_for = crate::core::midi::rtme::root::std::make_index_sequence;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_place_t {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_in_place_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<in_place_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(in_place_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<in_place_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(in_place_t))
    //     );
    // }
    extern "C" {
        pub static in_place: crate::core::midi::rtme::root::std::in_place_t;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_place_type_t {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_in_place_type_impl {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_in_place_type {
        pub _base: crate::core::midi::rtme::root::std::__is_in_place_type_impl,
    }
    impl Default for __is_in_place_type {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct _Vector_base {
        pub _M_impl: crate::core::midi::rtme::root::std::_Vector_base__Vector_impl,
    }
    pub type _Vector_base__Tp_alloc_type = [u8; 0usize];
    pub type _Vector_base_pointer = [u8; 0usize];
    #[repr(C)]
    pub struct _Vector_base__Vector_impl {
        pub _M_start: crate::core::midi::rtme::root::std::_Vector_base_pointer,
        pub _M_finish: crate::core::midi::rtme::root::std::_Vector_base_pointer,
        pub _M_end_of_storage: crate::core::midi::rtme::root::std::_Vector_base_pointer,
    }
    impl Default for _Vector_base__Vector_impl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Vector_base__Vector_impl {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Vector_base__Vector_impl {{  }}")
        }
    }
    impl PartialEq for _Vector_base__Vector_impl {
        fn eq(&self, other: &_Vector_base__Vector_impl) -> bool {
            self._M_start == other._M_start
                && self._M_finish == other._M_finish
                && self._M_end_of_storage == other._M_end_of_storage
        }
    }
    pub type _Vector_base_allocator_type<_Alloc> = _Alloc;
    impl Default for _Vector_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Vector_base {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Vector_base {{ _M_impl: {:?} }}", self._M_impl)
        }
    }
    impl PartialEq for _Vector_base {
        fn eq(&self, other: &_Vector_base) -> bool {
            self._M_impl == other._M_impl
        }
    }
    #[repr(C)]
    pub struct vector {
        pub _base: crate::core::midi::rtme::root::std::_Vector_base,
    }
    pub type vector__Base = crate::core::midi::rtme::root::std::_Vector_base;
    pub type vector__Tp_alloc_type = crate::core::midi::rtme::root::std::vector__Base;
    pub type vector__Alloc_traits = crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits;
    pub type vector_value_type<_Tp> = _Tp;
    pub type vector_pointer = crate::core::midi::rtme::root::std::vector__Base;
    pub type vector_const_pointer = crate::core::midi::rtme::root::std::vector__Alloc_traits;
    pub type vector_reference = crate::core::midi::rtme::root::std::vector__Alloc_traits;
    pub type vector_const_reference = crate::core::midi::rtme::root::std::vector__Alloc_traits;
    pub type vector_iterator =
        crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator<root::std::vector_pointer>;
    pub type vector_const_iterator = crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator<
        root::std::vector_const_pointer,
    >;
    pub type vector_const_reverse_iterator =
        crate::core::midi::rtme::root::std::reverse_iterator<root::std::vector_const_iterator>;
    pub type vector_reverse_iterator =
        crate::core::midi::rtme::root::std::reverse_iterator<root::std::vector_iterator>;
    pub type vector_size_type = usize;
    pub type vector_difference_type = isize;
    pub type vector_allocator_type<_Alloc> = _Alloc;
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct vector__Temporary_value {
        pub _M_this: *mut crate::core::midi::rtme::root::std::vector,
        pub __buf: u8,
    }
    impl Default for vector__Temporary_value {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Default for vector {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for vector {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "vector {{  }}")
        }
    }
    impl PartialEq for vector {
        fn eq(&self, other: &vector) -> bool {
            self._base == other._base
        }
    }
    pub type _Bit_type = ::std::os::raw::c_ulong;
    pub const std__S_word_bit: crate::core::midi::rtme::root::std::_bindgen_ty_1 = 64;
    pub type _bindgen_ty_1 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Bit_reference {
        pub _M_p: *mut crate::core::midi::rtme::root::std::_Bit_type,
        pub _M_mask: crate::core::midi::rtme::root::std::_Bit_type,
    }
    // #[test]
    // fn bindgen_test_layout__Bit_reference() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Bit_reference>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(_Bit_reference))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Bit_reference>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Bit_reference))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_Bit_reference>()))._M_p as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Bit_reference),
    //             "::",
    //             stringify!(_M_p)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_Bit_reference>()))._M_mask as *const _ as usize },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Bit_reference),
    //             "::",
    //             stringify!(_M_mask)
    //         )
    //     );
    // }
    impl Default for _Bit_reference {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Bit_iterator_base {
        pub _M_p: *mut crate::core::midi::rtme::root::std::_Bit_type,
        pub _M_offset: ::std::os::raw::c_uint,
    }
    // #[test]
    // fn bindgen_test_layout__Bit_iterator_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Bit_iterator_base>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(_Bit_iterator_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Bit_iterator_base>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Bit_iterator_base))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_p as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Bit_iterator_base),
    //             "::",
    //             stringify!(_M_p)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe {
    //             &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_offset as *const _ as usize
    //         },
    //         8usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_Bit_iterator_base),
    //             "::",
    //             stringify!(_M_offset)
    //         )
    //     );
    // }
    impl Default for _Bit_iterator_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Bit_iterator {
        pub _base: crate::core::midi::rtme::root::std::_Bit_iterator_base,
    }
    pub type _Bit_iterator_reference = crate::core::midi::rtme::root::std::_Bit_reference;
    pub type _Bit_iterator_pointer = *mut crate::core::midi::rtme::root::std::_Bit_reference;
    pub type _Bit_iterator_iterator = crate::core::midi::rtme::root::std::_Bit_iterator;
    // #[test]
    // fn bindgen_test_layout__Bit_iterator() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Bit_iterator>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(_Bit_iterator))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Bit_iterator>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Bit_iterator))
    //     );
    // }
    impl Default for _Bit_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Bit_const_iterator {
        pub _base: crate::core::midi::rtme::root::std::_Bit_iterator_base,
    }
    pub type _Bit_const_iterator_reference = bool;
    pub type _Bit_const_iterator_const_reference = bool;
    pub type _Bit_const_iterator_pointer = *const bool;
    pub type _Bit_const_iterator_const_iterator =
        crate::core::midi::rtme::root::std::_Bit_const_iterator;
    // #[test]
    // fn bindgen_test_layout__Bit_const_iterator() {
    //     assert_eq!(
    //         ::std::mem::size_of::<_Bit_const_iterator>(),
    //         16usize,
    //         concat!("Size of: ", stringify!(_Bit_const_iterator))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<_Bit_const_iterator>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(_Bit_const_iterator))
    //     );
    // }
    impl Default for _Bit_const_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct _Bvector_base {
        pub _M_impl: crate::core::midi::rtme::root::std::_Bvector_base__Bvector_impl,
    }
    pub type _Bvector_base__Bit_alloc_type = [u8; 0usize];
    pub type _Bvector_base__Bit_alloc_traits =
        crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits;
    pub type _Bvector_base__Bit_pointer = [u8; 0usize];
    #[repr(C)]
    pub struct _Bvector_base__Bvector_impl_data {
        pub _M_start: crate::core::midi::rtme::root::std::_Bit_iterator,
        pub _M_finish: crate::core::midi::rtme::root::std::_Bit_iterator,
        pub _M_end_of_storage: crate::core::midi::rtme::root::std::_Bvector_base__Bit_pointer,
    }
    impl Default for _Bvector_base__Bvector_impl_data {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Bvector_base__Bvector_impl_data {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_Bvector_base__Bvector_impl_data {{ _M_start: {:?}, _M_finish: {:?} }}",
                self._M_start, self._M_finish
            )
        }
    }
    impl PartialEq for _Bvector_base__Bvector_impl_data {
        fn eq(&self, other: &_Bvector_base__Bvector_impl_data) -> bool {
            self._M_start == other._M_start
                && self._M_finish == other._M_finish
                && self._M_end_of_storage == other._M_end_of_storage
        }
    }
    #[repr(C)]
    pub struct _Bvector_base__Bvector_impl {
        pub _base_1: crate::core::midi::rtme::root::std::_Bvector_base__Bvector_impl_data,
    }
    impl Default for _Bvector_base__Bvector_impl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Bvector_base__Bvector_impl {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Bvector_base__Bvector_impl {{  }}")
        }
    }
    impl PartialEq for _Bvector_base__Bvector_impl {
        fn eq(&self, other: &_Bvector_base__Bvector_impl) -> bool {
            self._base_1 == other._base_1
        }
    }
    pub type _Bvector_base_allocator_type<_Alloc> = _Alloc;
    impl Default for _Bvector_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Bvector_base {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Bvector_base {{ _M_impl: {:?} }}", self._M_impl)
        }
    }
    impl PartialEq for _Bvector_base {
        fn eq(&self, other: &_Bvector_base) -> bool {
            self._M_impl == other._M_impl
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Deque_iterator {
        pub _M_cur: crate::core::midi::rtme::root::std::_Deque_iterator__Elt_pointer,
        pub _M_first: crate::core::midi::rtme::root::std::_Deque_iterator__Elt_pointer,
        pub _M_last: crate::core::midi::rtme::root::std::_Deque_iterator__Elt_pointer,
        pub _M_node: crate::core::midi::rtme::root::std::_Deque_iterator__Map_pointer,
    }
    pub type _Deque_iterator___ptr_to = crate::core::midi::rtme::root::std::pointer_traits;
    pub type _Deque_iterator___iter = crate::core::midi::rtme::root::std::_Deque_iterator;
    pub type _Deque_iterator_iterator = crate::core::midi::rtme::root::std::_Deque_iterator___iter;
    pub type _Deque_iterator_const_iterator =
        crate::core::midi::rtme::root::std::_Deque_iterator___iter;
    pub type _Deque_iterator__Elt_pointer =
        crate::core::midi::rtme::root::std::_Deque_iterator___ptr_to;
    pub type _Deque_iterator__Map_pointer =
        crate::core::midi::rtme::root::std::_Deque_iterator___ptr_to;
    pub type _Deque_iterator_iterator_category =
        crate::core::midi::rtme::root::std::random_access_iterator_tag;
    pub type _Deque_iterator_value_type<_Tp> = _Tp;
    pub type _Deque_iterator_pointer<_Ptr> = _Ptr;
    pub type _Deque_iterator_reference<_Ref> = _Ref;
    pub type _Deque_iterator_size_type = usize;
    pub type _Deque_iterator_difference_type = isize;
    pub type _Deque_iterator__Self = crate::core::midi::rtme::root::std::_Deque_iterator;
    impl Default for _Deque_iterator {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct _Deque_base {
        pub _M_impl: crate::core::midi::rtme::root::std::_Deque_base__Deque_impl,
    }
    pub type _Deque_base__Tp_alloc_type = [u8; 0usize];
    pub type _Deque_base__Alloc_traits = crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits;
    pub type _Deque_base__Ptr = [u8; 0usize];
    pub type _Deque_base__Ptr_const = [u8; 0usize];
    pub type _Deque_base__Map_alloc_type = [u8; 0usize];
    pub type _Deque_base__Map_alloc_traits =
        crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits;
    pub type _Deque_base_allocator_type<_Alloc> = _Alloc;
    pub type _Deque_base_size_type = [u8; 0usize];
    pub type _Deque_base_iterator = crate::core::midi::rtme::root::std::_Deque_iterator;
    pub type _Deque_base_const_iterator = crate::core::midi::rtme::root::std::_Deque_iterator;
    pub type _Deque_base__Map_pointer = [u8; 0usize];
    #[repr(C)]
    pub struct _Deque_base__Deque_impl {
        pub _M_map: crate::core::midi::rtme::root::std::_Deque_base__Map_pointer,
        pub _M_map_size: usize,
        pub _M_start: crate::core::midi::rtme::root::std::_Deque_base_iterator,
        pub _M_finish: crate::core::midi::rtme::root::std::_Deque_base_iterator,
    }
    impl Default for _Deque_base__Deque_impl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Deque_base__Deque_impl {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_Deque_base__Deque_impl {{ _M_map_size: {:?}, _M_start: {:?}, _M_finish: {:?} }}",
                self._M_map_size, self._M_start, self._M_finish
            )
        }
    }
    impl PartialEq for _Deque_base__Deque_impl {
        fn eq(&self, other: &_Deque_base__Deque_impl) -> bool {
            self._M_map == other._M_map
                && self._M_map_size == other._M_map_size
                && self._M_start == other._M_start
                && self._M_finish == other._M_finish
        }
    }
    pub const _Deque_base__S_initial_map_size:
        crate::core::midi::rtme::root::std::_Deque_base__bindgen_ty_1 = 0;
    pub type _Deque_base__bindgen_ty_1 = i32;
    impl Default for _Deque_base {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _Deque_base {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "_Deque_base {{ _M_impl: {:?} }}", self._M_impl)
        }
    }
    impl PartialEq for _Deque_base {
        fn eq(&self, other: &_Deque_base) -> bool {
            self._M_impl == other._M_impl
        }
    }
    #[repr(C)]
    pub struct deque {
        pub _base: crate::core::midi::rtme::root::std::_Deque_base,
    }
    pub type deque__Base = crate::core::midi::rtme::root::std::_Deque_base;
    pub type deque__Tp_alloc_type = crate::core::midi::rtme::root::std::deque__Base;
    pub type deque__Alloc_traits = crate::core::midi::rtme::root::std::deque__Base;
    pub type deque__Map_pointer = crate::core::midi::rtme::root::std::deque__Base;
    pub type deque_value_type<_Tp> = _Tp;
    pub type deque_pointer = crate::core::midi::rtme::root::std::deque__Alloc_traits;
    pub type deque_const_pointer = crate::core::midi::rtme::root::std::deque__Alloc_traits;
    pub type deque_reference = crate::core::midi::rtme::root::std::deque__Alloc_traits;
    pub type deque_const_reference = crate::core::midi::rtme::root::std::deque__Alloc_traits;
    pub type deque_iterator = crate::core::midi::rtme::root::std::deque__Base;
    pub type deque_const_iterator = crate::core::midi::rtme::root::std::deque__Base;
    pub type deque_const_reverse_iterator =
        crate::core::midi::rtme::root::std::reverse_iterator<root::std::deque_const_iterator>;
    pub type deque_reverse_iterator =
        crate::core::midi::rtme::root::std::reverse_iterator<root::std::deque_iterator>;
    pub type deque_size_type = usize;
    pub type deque_difference_type = isize;
    pub type deque_allocator_type<_Alloc> = _Alloc;
    impl Default for deque {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for deque {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "deque {{  }}")
        }
    }
    impl PartialEq for deque {
        fn eq(&self, other: &deque) -> bool {
            self._base == other._base
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __erased_type {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___erased_type() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__erased_type>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__erased_type))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__erased_type>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__erased_type))
    //     );
    // }
    pub type __is_erased_or_convertible = crate::core::midi::rtme::root::std::__or_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct allocator_arg_t {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout_allocator_arg_t() {
    //     assert_eq!(
    //         ::std::mem::size_of::<allocator_arg_t>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(allocator_arg_t))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<allocator_arg_t>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(allocator_arg_t))
    //     );
    // }
    extern "C" {
        pub static allocator_arg: crate::core::midi::rtme::root::std::allocator_arg_t;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_allocator_helper {
        pub _base: crate::core::midi::rtme::root::std::false_type,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct uses_allocator {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc_base {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___uses_alloc_base() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__uses_alloc_base>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__uses_alloc_base))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__uses_alloc_base>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__uses_alloc_base))
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc0 {
        pub _M_a: crate::core::midi::rtme::root::std::__uses_alloc0__Sink,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc0__Sink {
        pub _address: u8,
    }
    // #[test]
    // fn bindgen_test_layout___uses_alloc0__Sink() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__uses_alloc0__Sink>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__uses_alloc0__Sink))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__uses_alloc0__Sink>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__uses_alloc0__Sink))
    //     );
    // }
    // #[test]
    // fn bindgen_test_layout___uses_alloc0() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__uses_alloc0>(),
    //         1usize,
    //         concat!("Size of: ", stringify!(__uses_alloc0))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__uses_alloc0>(),
    //         1usize,
    //         concat!("Alignment of ", stringify!(__uses_alloc0))
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<__uses_alloc0>()))._M_a as *const _ as usize },
    //         0usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(__uses_alloc0),
    //             "::",
    //             stringify!(_M_a)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc1<_Alloc> {
        pub _M_a: *const _Alloc,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    }
    impl<_Alloc> Default for __uses_alloc1<_Alloc> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __uses_alloc2<_Alloc> {
        pub _M_a: *const _Alloc,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    }
    impl<_Alloc> Default for __uses_alloc2<_Alloc> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __uses_alloc_t = u8;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_uses_allocator_predicate {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_uses_allocator_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __is_nothrow_uses_allocator_constructible {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct queue<_Sequence> {
        pub c: _Sequence,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
    }
    pub type queue__Uses = u8;
    pub type queue_value_type = [u8; 0usize];
    pub type queue_reference = [u8; 0usize];
    pub type queue_const_reference = [u8; 0usize];
    pub type queue_size_type = [u8; 0usize];
    pub type queue_container_type<_Sequence> = _Sequence;
    impl<_Sequence> Default for queue<_Sequence> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct priority_queue<_Sequence, _Compare> {
        pub c: _Sequence,
        pub comp: _Compare,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
        pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    }
    pub type priority_queue__Uses = u8;
    pub type priority_queue_value_type = [u8; 0usize];
    pub type priority_queue_reference = [u8; 0usize];
    pub type priority_queue_const_reference = [u8; 0usize];
    pub type priority_queue_size_type = [u8; 0usize];
    pub type priority_queue_container_type<_Sequence> = _Sequence;
    pub type priority_queue_value_compare<_Compare> = _Compare;
    impl<_Sequence, _Compare> Default for priority_queue<_Sequence, _Compare> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // #[test]
    // fn __bindgen_test_layout_allocator_open0_void_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::allocator>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::allocator)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::char_traits>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::char_traits)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_open0_char_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype>(),
    //         576usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype>(),
    //         1344usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype_byname>(),
    //         576usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation_1() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::std::ctype_byname>(),
    //         1344usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::std::ctype_byname>(),
    //         8usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::std::ctype_byname)
    //         )
    //     );
    // }
}
pub mod __gnu_cxx {

    extern "C" {
        pub fn __verbose_terminate_handler();
    }
    pub type __conditional_type___type<_Iftrue> = _Iftrue;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __add_unsigned {
        pub _address: u8,
    }
    pub type __add_unsigned___if_type = u8;
    pub type __add_unsigned___type =
        crate::core::midi::rtme::root::__gnu_cxx::__add_unsigned___if_type;
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_signed_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___add_unsigned_open0_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__add_unsigned)
    //         )
    //     );
    // }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __remove_unsigned {
        pub _address: u8,
    }
    pub type __remove_unsigned___if_type = u8;
    pub type __remove_unsigned___type =
        crate::core::midi::rtme::root::__gnu_cxx::__remove_unsigned___if_type;
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_char_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_short_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_int_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    // #[test]
    // fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_long_close0_instantiation() {
    //     assert_eq!(
    //         ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Size of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
    //         1usize,
    //         concat!(
    //             "Alignment of template specialization: ",
    //             stringify!(root::__gnu_cxx::__remove_unsigned)
    //         )
    //     );
    // }
    pub type __promote___type = f64;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __promote_2 {
        pub _address: u8,
    }
    pub type __promote_2___type<_Tp2> = _Tp2;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __promote_3 {
        pub _address: u8,
    }
    pub type __promote_3___type<_Tp2> = _Tp2;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __promote_4 {
        pub _address: u8,
    }
    pub type __promote_4___type<_Tp2> = _Tp2;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __numeric_traits_integer {
        pub _address: u8,
    }
    extern "C" {
        pub static __min: _Value;
    }
    extern "C" {
        pub static __max: _Value;
    }
    extern "C" {
        pub static __is_signed: bool;
    }
    extern "C" {
        pub static __digits: ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __numeric_traits_floating {
        pub _address: u8,
    }
    extern "C" {
        pub static __max_digits10: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static __digits10: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static __max_exponent10: ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __numeric_traits {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __normal_iterator<_Iterator> {
        pub _M_current: _Iterator,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    }
    pub type __normal_iterator___traits_type = crate::core::midi::rtme::root::std::iterator_traits;
    pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
    pub type __normal_iterator_iterator_category =
        crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator___traits_type;
    pub type __normal_iterator_value_type =
        crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator___traits_type;
    pub type __normal_iterator_difference_type =
        crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator___traits_type;
    pub type __normal_iterator_reference =
        crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator___traits_type;
    pub type __normal_iterator_pointer =
        crate::core::midi::rtme::root::__gnu_cxx::__normal_iterator___traits_type;
    impl<_Iterator> Default for __normal_iterator<_Iterator> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub mod __ops {

        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_less_iter {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Iter_less_iter() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Iter_less_iter>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Iter_less_iter))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Iter_less_iter>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Iter_less_iter))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_less_val {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Iter_less_val() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Iter_less_val>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Iter_less_val))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Iter_less_val>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Iter_less_val))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Val_less_iter {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Val_less_iter() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Val_less_iter>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Val_less_iter))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Val_less_iter>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Val_less_iter))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_equal_to_iter {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Iter_equal_to_iter() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Iter_equal_to_iter>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Iter_equal_to_iter))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Iter_equal_to_iter>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Iter_equal_to_iter))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_equal_to_val {
            pub _address: u8,
        }
        // #[test]
        // fn bindgen_test_layout__Iter_equal_to_val() {
        //     assert_eq!(
        //         ::std::mem::size_of::<_Iter_equal_to_val>(),
        //         1usize,
        //         concat!("Size of: ", stringify!(_Iter_equal_to_val))
        //     );
        //     assert_eq!(
        //         ::std::mem::align_of::<_Iter_equal_to_val>(),
        //         1usize,
        //         concat!("Alignment of ", stringify!(_Iter_equal_to_val))
        //     );
        // }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_comp_iter<_Compare> {
            pub _M_comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for _Iter_comp_iter<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_comp_val<_Compare> {
            pub _M_comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for _Iter_comp_val<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Val_comp_iter<_Compare> {
            pub _M_comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for _Val_comp_iter<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_equals_val<_Value> {
            pub _M_value: *mut _Value,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
        }
        impl<_Value> Default for _Iter_equals_val<_Value> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_equals_iter<_Iterator1> {
            pub _M_it1: _Iterator1,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
        }
        impl<_Iterator1> Default for _Iter_equals_iter<_Iterator1> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_pred<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for _Iter_pred<_Predicate> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_comp_to_val<_Compare, _Value> {
            pub _M_comp: _Compare,
            pub _M_value: *mut _Value,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
        }
        impl<_Compare, _Value> Default for _Iter_comp_to_val<_Compare, _Value> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
            pub _M_comp: _Compare,
            pub _M_it1: _Iterator1,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
        }
        impl<_Compare, _Iterator1> Default for _Iter_comp_to_iter<_Compare, _Iterator1> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Iter_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for _Iter_negate<_Predicate> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Char_types {
        pub _address: u8,
    }
    pub type _Char_types_int_type = ::std::os::raw::c_ulong;
    pub type _Char_types_pos_type = crate::core::midi::rtme::root::std::streampos;
    pub type _Char_types_off_type = crate::core::midi::rtme::root::std::streamoff;
    pub type _Char_types_state_type = crate::core::midi::rtme::root::mbstate_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct char_traits {
        pub _address: u8,
    }
    pub type char_traits_char_type<_CharT> = _CharT;
    pub type char_traits_int_type = crate::core::midi::rtme::root::__gnu_cxx::_Char_types;
    pub type char_traits_pos_type = crate::core::midi::rtme::root::__gnu_cxx::_Char_types;
    pub type char_traits_off_type = crate::core::midi::rtme::root::__gnu_cxx::_Char_types;
    pub type char_traits_state_type = crate::core::midi::rtme::root::__gnu_cxx::_Char_types;
    extern "C" {
        pub fn __uselocale(
            arg1: crate::core::midi::rtme::root::locale_t,
        ) -> crate::core::midi::rtme::root::locale_t;
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct new_allocator {
        pub _address: u8,
    }
    pub type new_allocator_size_type = usize;
    pub type new_allocator_difference_type = isize;
    pub type new_allocator_pointer<_Tp> = *mut _Tp;
    pub type new_allocator_const_pointer<_Tp> = *const _Tp;
    pub type new_allocator_reference<_Tp> = *mut _Tp;
    pub type new_allocator_const_reference<_Tp> = *const _Tp;
    pub type new_allocator_value_type<_Tp> = _Tp;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct new_allocator_rebind {
        pub _address: u8,
    }
    pub type new_allocator_rebind_other = crate::core::midi::rtme::root::__gnu_cxx::new_allocator;
    pub type new_allocator_propagate_on_container_move_assignment =
        crate::core::midi::rtme::root::std::true_type;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __alloc_traits {
        pub _address: u8,
    }
    pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
    pub type __alloc_traits__Base_type = crate::core::midi::rtme::root::std::allocator_traits;
    pub type __alloc_traits_value_type =
        crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_pointer =
        crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_const_pointer =
        crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_size_type =
        crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_difference_type =
        crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits__Base_type;
    pub type __alloc_traits_reference =
        *mut crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits_value_type;
    pub type __alloc_traits_const_reference =
        *const crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits_value_type;
    pub type __alloc_traits___is_custom_pointer = crate::core::midi::rtme::root::std::__and_;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __alloc_traits_rebind {
        pub _address: u8,
    }
    pub type __alloc_traits_rebind_other =
        crate::core::midi::rtme::root::__gnu_cxx::__alloc_traits__Base_type;
    impl Default for __alloc_traits {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct max_align_t {
    pub __max_align_ll: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __max_align_ld: f64,
}
// #[test]
// fn bindgen_test_layout_max_align_t() {
//     assert_eq!(
//         ::std::mem::size_of::<max_align_t>(),
//         32usize,
//         concat!("Size of: ", stringify!(max_align_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<max_align_t>())).__max_align_ll as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(max_align_t),
//             "::",
//             stringify!(__max_align_ll)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<max_align_t>())).__max_align_ld as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(max_align_t),
//             "::",
//             stringify!(__max_align_ld)
//         )
//     );
// }
pub mod __cxxabiv1 {

    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __cxa_refcounted_exception {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn __cxa_allocate_exception(arg1: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn __cxa_free_exception(arg1: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn __cxa_init_primary_exception(
            object: *mut ::std::os::raw::c_void,
            tinfo: *mut crate::core::midi::rtme::root::std::type_info,
            dest: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> *mut crate::core::midi::rtme::root::__cxxabiv1::__cxa_refcounted_exception;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __class_type_info {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct __forced_unwind__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __forced_unwind {
        pub vtable_: *const __forced_unwind__bindgen_vtable,
    }
    // #[test]
    // fn bindgen_test_layout___forced_unwind() {
    //     assert_eq!(
    //         ::std::mem::size_of::<__forced_unwind>(),
    //         8usize,
    //         concat!("Size of: ", stringify!(__forced_unwind))
    //     );
    //     assert_eq!(
    //         ::std::mem::align_of::<__forced_unwind>(),
    //         8usize,
    //         concat!("Alignment of ", stringify!(__forced_unwind))
    //     );
    // }
    impl Default for __forced_unwind {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = f64;
pub type __gnuc_va_list = crate::core::midi::rtme::root::__builtin_va_list;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: crate::core::midi::rtme::root::__mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
// #[test]
// fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
//         4usize,
//         concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
//         4usize,
//         concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__mbstate_t__bindgen_ty_1),
//             "::",
//             stringify!(__wch)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__mbstate_t__bindgen_ty_1),
//             "::",
//             stringify!(__wchb)
//         )
//     );
// }
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
    }
}
// #[test]
// fn bindgen_test_layout___mbstate_t() {
//     assert_eq!(
//         ::std::mem::size_of::<__mbstate_t>(),
//         8usize,
//         concat!("Size of: ", stringify!(__mbstate_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__mbstate_t>(),
//         4usize,
//         concat!("Alignment of ", stringify!(__mbstate_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__mbstate_t),
//             "::",
//             stringify!(__count)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__mbstate_t),
//             "::",
//             stringify!(__value)
//         )
//     );
// }
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for __mbstate_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "__mbstate_t {{ __count: {:?}, __value: {:?} }}",
            self.__count, self.__value
        )
    }
}
pub type mbstate_t = crate::core::midi::rtme::root::__mbstate_t;
pub type __FILE = crate::core::midi::rtme::root::_IO_FILE;
pub type FILE = crate::core::midi::rtme::root::_IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __locale_struct {
    pub __locales: [*mut crate::core::midi::rtme::root::__locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
// #[test]
// fn bindgen_test_layout___locale_struct() {
//     assert_eq!(
//         ::std::mem::size_of::<__locale_struct>(),
//         232usize,
//         concat!("Size of: ", stringify!(__locale_struct))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__locale_struct>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__locale_struct))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__locales)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
//         104usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__ctype_b)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize
//         },
//         112usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__ctype_tolower)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize
//         },
//         120usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__ctype_toupper)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
//         128usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__locale_struct),
//             "::",
//             stringify!(__names)
//         )
//     );
// }
impl Default for __locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut crate::core::midi::rtme::root::__locale_struct;
pub type locale_t = crate::core::midi::rtme::root::__locale_t;
extern "C" {
    pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __n: usize,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        __s1: *const u32,
        __s2: *const u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        __s1: *mut u32,
        __s2: *const u32,
        __n: usize,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
}
extern "C" {
    pub fn wcslen(__s: *const u32) -> usize;
}
extern "C" {
    pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn wctob(__c: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const crate::core::midi::rtme::root::mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut crate::core::midi::rtme::root::mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb(
        __s: *mut ::std::os::raw::c_char,
        __wc: u32,
        __ps: *mut crate::core::midi::rtme::root::mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn __mbrlen(
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __ps: *mut crate::core::midi::rtme::root::mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrlen(
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __ps: *mut crate::core::midi::rtme::root::mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn __btowc_alias(__c: ::std::os::raw::c_int) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn __wctob_alias(__c: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __len: usize,
        __ps: *mut crate::core::midi::rtme::root::mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __len: usize,
        __ps: *mut crate::core::midi::rtme::root::mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: usize,
        __len: usize,
        __ps: *mut crate::core::midi::rtme::root::mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __nwc: usize,
        __len: usize,
        __ps: *mut crate::core::midi::rtme::root::mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(__s: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
}
extern "C" {
    pub fn wcstof32(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
    ) -> crate::core::midi::rtme::root::_Float32;
}
extern "C" {
    pub fn wcstof64(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
    ) -> crate::core::midi::rtme::root::_Float64;
}
extern "C" {
    pub fn wcstof32x(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
    ) -> crate::core::midi::rtme::root::_Float32x;
}
extern "C" {
    pub fn wcstof64x(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
    ) -> crate::core::midi::rtme::root::_Float64x;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstoq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstouq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstol_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstod_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> f32;
}
extern "C" {
    pub fn wcstold_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof32_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::_Float32;
}
extern "C" {
    pub fn wcstof64_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::_Float64;
}
extern "C" {
    pub fn wcstof32x_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::_Float32x;
}
extern "C" {
    pub fn wcstof64x_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::_Float64x;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn open_wmemstream(
        __bufloc: *mut *mut u32,
        __sizeloc: *mut usize,
    ) -> *mut crate::core::midi::rtme::root::__FILE;
}
extern "C" {
    pub fn fwide(
        __fp: *mut crate::core::midi::rtme::root::__FILE,
        __mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(
        __stream: *mut crate::core::midi::rtme::root::__FILE,
        __format: *const u32,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(__s: *mut u32, __n: usize, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut crate::core::midi::rtme::root::__FILE,
        __format: *const u32,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(
        __format: *const u32,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut u32,
        __n: usize,
        __format: *const u32,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(
        __stream: *mut crate::core::midi::rtme::root::__FILE,
        __format: *const u32,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut crate::core::midi::rtme::root::__FILE,
        __format: *const u32,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(
        __format: *const u32,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const u32,
        __format: *const u32,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn getwc(
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn getwchar() -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn fputwc(
        __wc: u32,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn putwc(
        __wc: u32,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn putwchar(__wc: u32) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn fgetws(
        __ws: *mut u32,
        __n: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> *mut u32;
}
extern "C" {
    pub fn fputws(
        __ws: *const u32,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(
        __wc: crate::core::midi::rtme::root::wint_t,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn getwc_unlocked(
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn getwchar_unlocked() -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn fgetwc_unlocked(
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn fputwc_unlocked(
        __wc: u32,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn putwc_unlocked(
        __wc: u32,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn putwchar_unlocked(__wc: u32) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn fgetws_unlocked(
        __ws: *mut u32,
        __n: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> *mut u32;
}
extern "C" {
    pub fn fputws_unlocked(
        __ws: *const u32,
        __stream: *mut crate::core::midi::rtme::root::__FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const crate::core::midi::rtme::root::tm,
    ) -> usize;
}
extern "C" {
    pub fn wcsftime_l(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const crate::core::midi::rtme::root::tm,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> usize;
}
pub mod __gnu_debug {}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = crate::core::midi::rtme::root::__int8_t;
pub type __uint_least8_t = crate::core::midi::rtme::root::__uint8_t;
pub type __int_least16_t = crate::core::midi::rtme::root::__int16_t;
pub type __uint_least16_t = crate::core::midi::rtme::root::__uint16_t;
pub type __int_least32_t = crate::core::midi::rtme::root::__int32_t;
pub type __uint_least32_t = crate::core::midi::rtme::root::__uint32_t;
pub type __int_least64_t = crate::core::midi::rtme::root::__int64_t;
pub type __uint_least64_t = crate::core::midi::rtme::root::__uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
// #[test]
// fn bindgen_test_layout___fsid_t() {
//     assert_eq!(
//         ::std::mem::size_of::<__fsid_t>(),
//         8usize,
//         concat!("Size of: ", stringify!(__fsid_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__fsid_t>(),
//         4usize,
//         concat!("Alignment of ", stringify!(__fsid_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__fsid_t),
//             "::",
//             stringify!(__val)
//         )
//     );
// }
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = crate::core::midi::rtme::root::__off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = crate::core::midi::rtme::root::__int_least8_t;
pub type int_least16_t = crate::core::midi::rtme::root::__int_least16_t;
pub type int_least32_t = crate::core::midi::rtme::root::__int_least32_t;
pub type int_least64_t = crate::core::midi::rtme::root::__int_least64_t;
pub type uint_least8_t = crate::core::midi::rtme::root::__uint_least8_t;
pub type uint_least16_t = crate::core::midi::rtme::root::__uint_least16_t;
pub type uint_least32_t = crate::core::midi::rtme::root::__uint_least32_t;
pub type uint_least64_t = crate::core::midi::rtme::root::__uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = crate::core::midi::rtme::root::__intmax_t;
pub type uintmax_t = crate::core::midi::rtme::root::__uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
// #[test]
// fn bindgen_test_layout_lconv() {
//     assert_eq!(
//         ::std::mem::size_of::<lconv>(),
//         96usize,
//         concat!("Size of: ", stringify!(lconv))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<lconv>(),
//         8usize,
//         concat!("Alignment of ", stringify!(lconv))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(decimal_point)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(thousands_sep)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(grouping)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(int_curr_symbol)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(currency_symbol)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(mon_decimal_point)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(mon_thousands_sep)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
//         56usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(mon_grouping)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
//         64usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(positive_sign)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
//         72usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(negative_sign)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
//         80usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(int_frac_digits)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
//         81usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(frac_digits)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
//         82usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(p_cs_precedes)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
//         83usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(p_sep_by_space)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
//         84usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(n_cs_precedes)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
//         85usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(n_sep_by_space)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
//         86usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(p_sign_posn)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
//         87usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(n_sign_posn)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
//         88usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(int_p_cs_precedes)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
//         89usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(int_p_sep_by_space)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
//         90usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(int_n_cs_precedes)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
//         91usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(int_n_sep_by_space)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
//         92usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(int_p_sign_posn)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
//         93usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lconv),
//             "::",
//             stringify!(int_n_sign_posn)
//         )
//     );
// }
impl Default for lconv {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut crate::core::midi::rtme::root::lconv;
}
extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::locale_t;
}
extern "C" {
    pub fn duplocale(
        __dataset: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: crate::core::midi::rtme::root::locale_t);
}
extern "C" {
    pub fn uselocale(
        __dataset: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::locale_t;
}
pub const _ISupper: crate::core::midi::rtme::root::_bindgen_ty_39 = 256;
pub const _ISlower: crate::core::midi::rtme::root::_bindgen_ty_39 = 512;
pub const _ISalpha: crate::core::midi::rtme::root::_bindgen_ty_39 = 1024;
pub const _ISdigit: crate::core::midi::rtme::root::_bindgen_ty_39 = 2048;
pub const _ISxdigit: crate::core::midi::rtme::root::_bindgen_ty_39 = 4096;
pub const _ISspace: crate::core::midi::rtme::root::_bindgen_ty_39 = 8192;
pub const _ISprint: crate::core::midi::rtme::root::_bindgen_ty_39 = 16384;
pub const _ISgraph: crate::core::midi::rtme::root::_bindgen_ty_39 = 32768;
pub const _ISblank: crate::core::midi::rtme::root::_bindgen_ty_39 = 1;
pub const _IScntrl: crate::core::midi::rtme::root::_bindgen_ty_39 = 2;
pub const _ISpunct: crate::core::midi::rtme::root::_bindgen_ty_39 = 4;
pub const _ISalnum: crate::core::midi::rtme::root::_bindgen_ty_39 = 8;
pub type _bindgen_ty_39 = u32;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const crate::core::midi::rtme::root::__int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const crate::core::midi::rtme::root::__int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isctype(
        __c: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(
        arg1: ::std::os::raw::c_int,
        arg2: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(
        __c: ::std::os::raw::c_int,
        __l: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(
        __c: ::std::os::raw::c_int,
        __l: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(
        __c: ::std::os::raw::c_int,
        __l: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(
        __c: ::std::os::raw::c_int,
        __l: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
pub type time_t = crate::core::midi::rtme::root::__time_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct timespec {
    pub tv_sec: crate::core::midi::rtme::root::__time_t,
    pub tv_nsec: crate::core::midi::rtme::root::__syscall_slong_t,
}
// #[test]
// fn bindgen_test_layout_timespec() {
//     assert_eq!(
//         ::std::mem::size_of::<timespec>(),
//         16usize,
//         concat!("Size of: ", stringify!(timespec))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<timespec>(),
//         8usize,
//         concat!("Alignment of ", stringify!(timespec))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timespec),
//             "::",
//             stringify!(tv_sec)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timespec),
//             "::",
//             stringify!(tv_nsec)
//         )
//     );
// }
pub type pid_t = crate::core::midi::rtme::root::__pid_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_sched_param() {
//     assert_eq!(
//         ::std::mem::size_of::<sched_param>(),
//         4usize,
//         concat!("Size of: ", stringify!(sched_param))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<sched_param>(),
//         4usize,
//         concat!("Alignment of ", stringify!(sched_param))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(sched_param),
//             "::",
//             stringify!(sched_priority)
//         )
//     );
// }
extern "C" {
    pub fn clone(
        __fn: ::std::option::Option<
            unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        __child_stack: *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setns(
        __fd: ::std::os::raw::c_int,
        __nstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cpu_set_t {
    pub __bits: [self::__cpu_mask; 16usize],
}
// #[test]
// fn bindgen_test_layout_cpu_set_t() {
//     assert_eq!(
//         ::std::mem::size_of::<cpu_set_t>(),
//         128usize,
//         concat!("Size of: ", stringify!(cpu_set_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<cpu_set_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(cpu_set_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(cpu_set_t),
//             "::",
//             stringify!(__bits)
//         )
//     );
// }
extern "C" {
    pub fn __sched_cpucount(
        __setsize: usize,
        __setp: *const crate::core::midi::rtme::root::cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut crate::core::midi::rtme::root::cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut crate::core::midi::rtme::root::cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(
        __pid: crate::core::midi::rtme::root::__pid_t,
        __param: *const crate::core::midi::rtme::root::sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(
        __pid: crate::core::midi::rtme::root::__pid_t,
        __param: *mut crate::core::midi::rtme::root::sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: crate::core::midi::rtme::root::__pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const crate::core::midi::rtme::root::sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(
        __pid: crate::core::midi::rtme::root::__pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(
        __pid: crate::core::midi::rtme::root::__pid_t,
        __t: *mut crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setaffinity(
        __pid: crate::core::midi::rtme::root::__pid_t,
        __cpusetsize: usize,
        __cpuset: *const crate::core::midi::rtme::root::cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getaffinity(
        __pid: crate::core::midi::rtme::root::__pid_t,
        __cpusetsize: usize,
        __cpuset: *mut crate::core::midi::rtme::root::cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct timeval {
    pub tv_sec: crate::core::midi::rtme::root::__time_t,
    pub tv_usec: crate::core::midi::rtme::root::__suseconds_t,
}
// #[test]
// fn bindgen_test_layout_timeval() {
//     assert_eq!(
//         ::std::mem::size_of::<timeval>(),
//         16usize,
//         concat!("Size of: ", stringify!(timeval))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<timeval>(),
//         8usize,
//         concat!("Alignment of ", stringify!(timeval))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timeval),
//             "::",
//             stringify!(tv_sec)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timeval),
//             "::",
//             stringify!(tv_usec)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: crate::core::midi::rtme::root::__syscall_slong_t,
    pub freq: crate::core::midi::rtme::root::__syscall_slong_t,
    pub maxerror: crate::core::midi::rtme::root::__syscall_slong_t,
    pub esterror: crate::core::midi::rtme::root::__syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: crate::core::midi::rtme::root::__syscall_slong_t,
    pub precision: crate::core::midi::rtme::root::__syscall_slong_t,
    pub tolerance: crate::core::midi::rtme::root::__syscall_slong_t,
    pub time: crate::core::midi::rtme::root::timeval,
    pub tick: crate::core::midi::rtme::root::__syscall_slong_t,
    pub ppsfreq: crate::core::midi::rtme::root::__syscall_slong_t,
    pub jitter: crate::core::midi::rtme::root::__syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: crate::core::midi::rtme::root::__syscall_slong_t,
    pub jitcnt: crate::core::midi::rtme::root::__syscall_slong_t,
    pub calcnt: crate::core::midi::rtme::root::__syscall_slong_t,
    pub errcnt: crate::core::midi::rtme::root::__syscall_slong_t,
    pub stbcnt: crate::core::midi::rtme::root::__syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_1: crate::core::midi::rtme::root::__BindgenBitfieldUnit<[u8; 44usize], u8>,
}
// #[test]
// fn bindgen_test_layout_timex() {
//     assert_eq!(
//         ::std::mem::size_of::<timex>(),
//         208usize,
//         concat!("Size of: ", stringify!(timex))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<timex>(),
//         8usize,
//         concat!("Alignment of ", stringify!(timex))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).modes as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(modes)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).offset as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(offset)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).freq as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(freq)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(maxerror)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(esterror)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).status as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(status)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).constant as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(constant)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).precision as *const _ as usize },
//         56usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(precision)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize },
//         64usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(tolerance)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).time as *const _ as usize },
//         72usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(time)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).tick as *const _ as usize },
//         88usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(tick)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize },
//         96usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(ppsfreq)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize },
//         104usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(jitter)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).shift as *const _ as usize },
//         112usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(shift)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize },
//         120usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(stabil)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize },
//         128usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(jitcnt)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize },
//         136usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(calcnt)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize },
//         144usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(errcnt)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize },
//         152usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(stbcnt)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<timex>())).tai as *const _ as usize },
//         160usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(timex),
//             "::",
//             stringify!(tai)
//         )
//     );
// }
impl timex {
    #[inline]
    pub fn new_bitfield_1(
    ) -> crate::core::midi::rtme::root::__BindgenBitfieldUnit<[u8; 44usize], u8> {
        let mut __bindgen_bitfield_unit: crate::core::midi::rtme::root::__BindgenBitfieldUnit<
            [u8; 44usize],
            u8,
        > = Default::default();
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn clock_adjtime(
        __clock_id: crate::core::midi::rtme::root::__clockid_t,
        __utx: *mut crate::core::midi::rtme::root::timex,
    ) -> ::std::os::raw::c_int;
}
pub type clock_t = crate::core::midi::rtme::root::__clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
// #[test]
// fn bindgen_test_layout_tm() {
//     assert_eq!(
//         ::std::mem::size_of::<tm>(),
//         56usize,
//         concat!("Size of: ", stringify!(tm))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<tm>(),
//         8usize,
//         concat!("Alignment of ", stringify!(tm))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_sec)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_min)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_hour)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
//         12usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_mday)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_mon)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_year)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_wday)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
//         28usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_yday)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_isdst)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_gmtoff)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(tm),
//             "::",
//             stringify!(tm_zone)
//         )
//     );
// }
impl Default for tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clockid_t = crate::core::midi::rtme::root::__clockid_t;
pub type timer_t = crate::core::midi::rtme::root::__timer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct itimerspec {
    pub it_interval: crate::core::midi::rtme::root::timespec,
    pub it_value: crate::core::midi::rtme::root::timespec,
}
// #[test]
// fn bindgen_test_layout_itimerspec() {
//     assert_eq!(
//         ::std::mem::size_of::<itimerspec>(),
//         32usize,
//         concat!("Size of: ", stringify!(itimerspec))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<itimerspec>(),
//         8usize,
//         concat!("Alignment of ", stringify!(itimerspec))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(itimerspec),
//             "::",
//             stringify!(it_interval)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(itimerspec),
//             "::",
//             stringify!(it_value)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> crate::core::midi::rtme::root::clock_t;
}
extern "C" {
    pub fn time(
        __timer: *mut crate::core::midi::rtme::root::time_t,
    ) -> crate::core::midi::rtme::root::time_t;
}
extern "C" {
    pub fn difftime(
        __time1: crate::core::midi::rtme::root::time_t,
        __time0: crate::core::midi::rtme::root::time_t,
    ) -> f64;
}
extern "C" {
    pub fn mktime(
        __tp: *mut crate::core::midi::rtme::root::tm,
    ) -> crate::core::midi::rtme::root::time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const crate::core::midi::rtme::root::tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut crate::core::midi::rtme::root::tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const crate::core::midi::rtme::root::tm,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut crate::core::midi::rtme::root::tm,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(
        __timer: *const crate::core::midi::rtme::root::time_t,
    ) -> *mut crate::core::midi::rtme::root::tm;
}
extern "C" {
    pub fn localtime(
        __timer: *const crate::core::midi::rtme::root::time_t,
    ) -> *mut crate::core::midi::rtme::root::tm;
}
extern "C" {
    pub fn gmtime_r(
        __timer: *const crate::core::midi::rtme::root::time_t,
        __tp: *mut crate::core::midi::rtme::root::tm,
    ) -> *mut crate::core::midi::rtme::root::tm;
}
extern "C" {
    pub fn localtime_r(
        __timer: *const crate::core::midi::rtme::root::time_t,
        __tp: *mut crate::core::midi::rtme::root::tm,
    ) -> *mut crate::core::midi::rtme::root::tm;
}
extern "C" {
    pub fn asctime(__tp: *const crate::core::midi::rtme::root::tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(
        __timer: *const crate::core::midi::rtme::root::time_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const crate::core::midi::rtme::root::tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const crate::core::midi::rtme::root::time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const crate::core::midi::rtme::root::time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(
        __tp: *mut crate::core::midi::rtme::root::tm,
    ) -> crate::core::midi::rtme::root::time_t;
}
extern "C" {
    pub fn timelocal(
        __tp: *mut crate::core::midi::rtme::root::tm,
    ) -> crate::core::midi::rtme::root::time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const crate::core::midi::rtme::root::timespec,
        __remaining: *mut crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(
        __clock_id: crate::core::midi::rtme::root::clockid_t,
        __res: *mut crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(
        __clock_id: crate::core::midi::rtme::root::clockid_t,
        __tp: *mut crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(
        __clock_id: crate::core::midi::rtme::root::clockid_t,
        __tp: *const crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: crate::core::midi::rtme::root::clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const crate::core::midi::rtme::root::timespec,
        __rem: *mut crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(
        __pid: crate::core::midi::rtme::root::pid_t,
        __clock_id: *mut crate::core::midi::rtme::root::clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: crate::core::midi::rtme::root::clockid_t,
        __evp: *mut crate::core::midi::rtme::root::sigevent,
        __timerid: *mut crate::core::midi::rtme::root::timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: crate::core::midi::rtme::root::timer_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: crate::core::midi::rtme::root::timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const crate::core::midi::rtme::root::itimerspec,
        __ovalue: *mut crate::core::midi::rtme::root::itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(
        __timerid: crate::core::midi::rtme::root::timer_t,
        __value: *mut crate::core::midi::rtme::root::itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(
        __timerid: crate::core::midi::rtme::root::timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut crate::core::midi::rtme::root::timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(
        __string: *const ::std::os::raw::c_char,
    ) -> *mut crate::core::midi::rtme::root::tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut crate::core::midi::rtme::root::tm,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
// #[test]
// fn bindgen_test_layout___pthread_rwlock_arch_t() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
//         56usize,
//         concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__readers)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
//         },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__writers)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _
//                 as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__wrphase_futex)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _
//                 as usize
//         },
//         12usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__writers_futex)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize
//         },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__pad3)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize
//         },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__pad4)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _
//                 as usize
//         },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__cur_writer)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
//         },
//         28usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__shared)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
//         },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__rwelision)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize
//         },
//         33usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__pad1)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize
//         },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__pad2)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize
//         },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_rwlock_arch_t),
//             "::",
//             stringify!(__flags)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_internal_list {
    pub __prev: *mut crate::core::midi::rtme::root::__pthread_internal_list,
    pub __next: *mut crate::core::midi::rtme::root::__pthread_internal_list,
}
// #[test]
// fn bindgen_test_layout___pthread_internal_list() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_internal_list>(),
//         16usize,
//         concat!("Size of: ", stringify!(__pthread_internal_list))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_internal_list>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_internal_list))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_internal_list),
//             "::",
//             stringify!(__prev)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_internal_list),
//             "::",
//             stringify!(__next)
//         )
//     );
// }
impl Default for __pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = crate::core::midi::rtme::root::__pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: crate::core::midi::rtme::root::__pthread_list_t,
}
// #[test]
// fn bindgen_test_layout___pthread_mutex_s() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_mutex_s>(),
//         40usize,
//         concat!("Size of: ", stringify!(__pthread_mutex_s))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_mutex_s>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_mutex_s))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__lock)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__count)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__owner)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
//         12usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__nusers)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__kind)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__spins)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
//         22usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__elision)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_mutex_s),
//             "::",
//             stringify!(__list)
//         )
//     );
// }
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: crate::core::midi::rtme::root::__pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: crate::core::midi::rtme::root::__pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: crate::core::midi::rtme::root::__pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
// #[test]
// fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
//         8usize,
//         concat!(
//             "Size of: ",
//             stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
//         4usize,
//         concat!(
//             "Alignment of ",
//             stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
//                 as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
//             "::",
//             stringify!(__low)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
//                 as *const _ as usize
//         },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
//             "::",
//             stringify!(__high)
//         )
//     );
// }
// #[test]
// fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
//         8usize,
//         concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s__bindgen_ty_1),
//             "::",
//             stringify!(__wseq)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s__bindgen_ty_1),
//             "::",
//             stringify!(__wseq32)
//         )
//     );
// }
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: crate::core::midi::rtme::root::__pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
// #[test]
// fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
//         8usize,
//         concat!(
//             "Size of: ",
//             stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
//         4usize,
//         concat!(
//             "Alignment of ",
//             stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
//                 as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
//             "::",
//             stringify!(__low)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
//                 as *const _ as usize
//         },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
//             "::",
//             stringify!(__high)
//         )
//     );
// }
// #[test]
// fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
//         8usize,
//         concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s__bindgen_ty_2),
//             "::",
//             stringify!(__g1_start)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s__bindgen_ty_2),
//             "::",
//             stringify!(__g1_start32)
//         )
//     );
// }
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_2 {{ union }}")
    }
}
// #[test]
// fn bindgen_test_layout___pthread_cond_s() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_cond_s>(),
//         48usize,
//         concat!("Size of: ", stringify!(__pthread_cond_s))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_cond_s>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_cond_s))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s),
//             "::",
//             stringify!(__g_refs)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s),
//             "::",
//             stringify!(__g_size)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize
//         },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s),
//             "::",
//             stringify!(__g1_orig_size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
//         36usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s),
//             "::",
//             stringify!(__wrefs)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize
//         },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cond_s),
//             "::",
//             stringify!(__g_signals)
//         )
//     );
// }
impl Default for __pthread_cond_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for __pthread_cond_s {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "__pthread_cond_s {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals )
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
// #[test]
// fn bindgen_test_layout_pthread_mutexattr_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_mutexattr_t>(),
//         4usize,
//         concat!("Size of: ", stringify!(pthread_mutexattr_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_mutexattr_t>(),
//         4usize,
//         concat!("Alignment of ", stringify!(pthread_mutexattr_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_mutexattr_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_mutexattr_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_mutexattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_mutexattr_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
// #[test]
// fn bindgen_test_layout_pthread_condattr_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_condattr_t>(),
//         4usize,
//         concat!("Size of: ", stringify!(pthread_condattr_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_condattr_t>(),
//         4usize,
//         concat!("Alignment of ", stringify!(pthread_condattr_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_condattr_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_condattr_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_condattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_condattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_condattr_t {{ union }}")
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
// #[test]
// fn bindgen_test_layout_pthread_attr_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_attr_t>(),
//         56usize,
//         concat!("Size of: ", stringify!(pthread_attr_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_attr_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(pthread_attr_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_attr_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_attr_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_attr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_attr_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: crate::core::midi::rtme::root::__pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
// #[test]
// fn bindgen_test_layout_pthread_mutex_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_mutex_t>(),
//         40usize,
//         concat!("Size of: ", stringify!(pthread_mutex_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_mutex_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(pthread_mutex_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_mutex_t),
//             "::",
//             stringify!(__data)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_mutex_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_mutex_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_mutex_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: crate::core::midi::rtme::root::__pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
// #[test]
// fn bindgen_test_layout_pthread_cond_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_cond_t>(),
//         48usize,
//         concat!("Size of: ", stringify!(pthread_cond_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_cond_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(pthread_cond_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_cond_t),
//             "::",
//             stringify!(__data)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_cond_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_cond_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_cond_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_cond_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: crate::core::midi::rtme::root::__pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
// #[test]
// fn bindgen_test_layout_pthread_rwlock_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_rwlock_t>(),
//         56usize,
//         concat!("Size of: ", stringify!(pthread_rwlock_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_rwlock_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(pthread_rwlock_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_rwlock_t),
//             "::",
//             stringify!(__data)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_rwlock_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_rwlock_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_rwlock_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_rwlock_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
// #[test]
// fn bindgen_test_layout_pthread_rwlockattr_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_rwlockattr_t>(),
//         8usize,
//         concat!("Size of: ", stringify!(pthread_rwlockattr_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_rwlockattr_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_rwlockattr_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_rwlockattr_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_rwlockattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_rwlockattr_t {{ union }}")
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
// #[test]
// fn bindgen_test_layout_pthread_barrier_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_barrier_t>(),
//         32usize,
//         concat!("Size of: ", stringify!(pthread_barrier_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_barrier_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(pthread_barrier_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_barrier_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_barrier_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_barrier_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_barrier_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_barrier_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
// #[test]
// fn bindgen_test_layout_pthread_barrierattr_t() {
//     assert_eq!(
//         ::std::mem::size_of::<pthread_barrierattr_t>(),
//         4usize,
//         concat!("Size of: ", stringify!(pthread_barrierattr_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<pthread_barrierattr_t>(),
//         4usize,
//         concat!("Alignment of ", stringify!(pthread_barrierattr_t))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_barrierattr_t),
//             "::",
//             stringify!(__size)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(pthread_barrierattr_t),
//             "::",
//             stringify!(__align)
//         )
//     );
// }
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for pthread_barrierattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_barrierattr_t {{ union }}")
    }
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: crate::core::midi::rtme::root::_bindgen_ty_40 = 0;
pub const PTHREAD_CREATE_DETACHED: crate::core::midi::rtme::root::_bindgen_ty_40 = 1;
pub type _bindgen_ty_40 = u32;
pub const PTHREAD_MUTEX_TIMED_NP: crate::core::midi::rtme::root::_bindgen_ty_41 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: crate::core::midi::rtme::root::_bindgen_ty_41 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: crate::core::midi::rtme::root::_bindgen_ty_41 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: crate::core::midi::rtme::root::_bindgen_ty_41 = 3;
pub const PTHREAD_MUTEX_NORMAL: crate::core::midi::rtme::root::_bindgen_ty_41 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: crate::core::midi::rtme::root::_bindgen_ty_41 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: crate::core::midi::rtme::root::_bindgen_ty_41 = 2;
pub const PTHREAD_MUTEX_DEFAULT: crate::core::midi::rtme::root::_bindgen_ty_41 = 0;
pub const PTHREAD_MUTEX_FAST_NP: crate::core::midi::rtme::root::_bindgen_ty_41 = 0;
pub type _bindgen_ty_41 = u32;
pub const PTHREAD_MUTEX_STALLED: crate::core::midi::rtme::root::_bindgen_ty_42 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: crate::core::midi::rtme::root::_bindgen_ty_42 = 0;
pub const PTHREAD_MUTEX_ROBUST: crate::core::midi::rtme::root::_bindgen_ty_42 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: crate::core::midi::rtme::root::_bindgen_ty_42 = 1;
pub type _bindgen_ty_42 = u32;
pub const PTHREAD_PRIO_NONE: crate::core::midi::rtme::root::_bindgen_ty_43 = 0;
pub const PTHREAD_PRIO_INHERIT: crate::core::midi::rtme::root::_bindgen_ty_43 = 1;
pub const PTHREAD_PRIO_PROTECT: crate::core::midi::rtme::root::_bindgen_ty_43 = 2;
pub type _bindgen_ty_43 = u32;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: crate::core::midi::rtme::root::_bindgen_ty_44 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: crate::core::midi::rtme::root::_bindgen_ty_44 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP:
    crate::core::midi::rtme::root::_bindgen_ty_44 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: crate::core::midi::rtme::root::_bindgen_ty_44 = 0;
pub type _bindgen_ty_44 = u32;
pub const PTHREAD_INHERIT_SCHED: crate::core::midi::rtme::root::_bindgen_ty_45 = 0;
pub const PTHREAD_EXPLICIT_SCHED: crate::core::midi::rtme::root::_bindgen_ty_45 = 1;
pub type _bindgen_ty_45 = u32;
pub const PTHREAD_SCOPE_SYSTEM: crate::core::midi::rtme::root::_bindgen_ty_46 = 0;
pub const PTHREAD_SCOPE_PROCESS: crate::core::midi::rtme::root::_bindgen_ty_46 = 1;
pub type _bindgen_ty_46 = u32;
pub const PTHREAD_PROCESS_PRIVATE: crate::core::midi::rtme::root::_bindgen_ty_47 = 0;
pub const PTHREAD_PROCESS_SHARED: crate::core::midi::rtme::root::_bindgen_ty_47 = 1;
pub type _bindgen_ty_47 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut crate::core::midi::rtme::root::_pthread_cleanup_buffer,
}
// #[test]
// fn bindgen_test_layout__pthread_cleanup_buffer() {
//     assert_eq!(
//         ::std::mem::size_of::<_pthread_cleanup_buffer>(),
//         32usize,
//         concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<_pthread_cleanup_buffer>(),
//         8usize,
//         concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_pthread_cleanup_buffer),
//             "::",
//             stringify!(__routine)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_pthread_cleanup_buffer),
//             "::",
//             stringify!(__arg)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _
//                 as usize
//         },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_pthread_cleanup_buffer),
//             "::",
//             stringify!(__canceltype)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize
//         },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_pthread_cleanup_buffer),
//             "::",
//             stringify!(__prev)
//         )
//     );
// }
impl Default for _pthread_cleanup_buffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const PTHREAD_CANCEL_ENABLE: crate::core::midi::rtme::root::_bindgen_ty_48 = 0;
pub const PTHREAD_CANCEL_DISABLE: crate::core::midi::rtme::root::_bindgen_ty_48 = 1;
pub type _bindgen_ty_48 = u32;
pub const PTHREAD_CANCEL_DEFERRED: crate::core::midi::rtme::root::_bindgen_ty_49 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: crate::core::midi::rtme::root::_bindgen_ty_49 = 1;
pub type _bindgen_ty_49 = u32;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut crate::core::midi::rtme::root::pthread_t,
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(
        __th: crate::core::midi::rtme::root::pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_tryjoin_np(
        __th: crate::core::midi::rtme::root::pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_timedjoin_np(
        __th: crate::core::midi::rtme::root::pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __abstime: *const crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: crate::core::midi::rtme::root::pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> crate::core::midi::rtme::root::pthread_t;
}
extern "C" {
    pub fn pthread_equal(
        __thread1: crate::core::midi::rtme::root::pthread_t,
        __thread2: crate::core::midi::rtme::root::pthread_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __param: *mut crate::core::midi::rtme::root::sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __param: *const crate::core::midi::rtme::root::sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setaffinity_np(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *const crate::core::midi::rtme::root::cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getaffinity_np(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *mut crate::core::midi::rtme::root::cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_default_np(
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setattr_default_np(
        __attr: *const crate::core::midi::rtme::root::pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_np(
        __th: crate::core::midi::rtme::root::pthread_t,
        __attr: *mut crate::core::midi::rtme::root::pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: crate::core::midi::rtme::root::pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const crate::core::midi::rtme::root::sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: crate::core::midi::rtme::root::pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut crate::core::midi::rtme::root::sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: crate::core::midi::rtme::root::pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        __target_thread: crate::core::midi::rtme::root::pthread_t,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(
        __target_thread: crate::core::midi::rtme::root::pthread_t,
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setaffinity_np(
        __th: crate::core::midi::rtme::root::pthread_t,
        __cpusetsize: usize,
        __cpuset: *const crate::core::midi::rtme::root::cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getaffinity_np(
        __th: crate::core::midi::rtme::root::pthread_t,
        __cpusetsize: usize,
        __cpuset: *mut crate::core::midi::rtme::root::cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut crate::core::midi::rtme::root::pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: crate::core::midi::rtme::root::pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [self::__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: crate::core::midi::rtme::root::__jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
//         72usize,
//         concat!(
//             "Size of: ",
//             stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
//         8usize,
//         concat!(
//             "Alignment of ",
//             stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
//                 as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
//             "::",
//             stringify!(__cancel_jmp_buf)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
//                 as *const _ as usize
//         },
//         64usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
//             "::",
//             stringify!(__mask_was_saved)
//         )
//     );
// }
// #[test]
// fn bindgen_test_layout___pthread_unwind_buf_t() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_unwind_buf_t>(),
//         104usize,
//         concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_unwind_buf_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_unwind_buf_t),
//             "::",
//             stringify!(__cancel_jmp_buf)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize
//         },
//         72usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_unwind_buf_t),
//             "::",
//             stringify!(__pad)
//         )
//     );
// }
impl Default for __pthread_unwind_buf_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout___pthread_cleanup_frame() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_cleanup_frame>(),
//         24usize,
//         concat!("Size of: ", stringify!(__pthread_cleanup_frame))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_cleanup_frame>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cleanup_frame),
//             "::",
//             stringify!(__cancel_routine)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _
//                 as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cleanup_frame),
//             "::",
//             stringify!(__cancel_arg)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize
//         },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cleanup_frame),
//             "::",
//             stringify!(__do_it)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _
//                 as usize
//         },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cleanup_frame),
//             "::",
//             stringify!(__cancel_type)
//         )
//     );
// }
impl Default for __pthread_cleanup_frame {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout___pthread_cleanup_class() {
//     assert_eq!(
//         ::std::mem::size_of::<__pthread_cleanup_class>(),
//         24usize,
//         concat!("Size of: ", stringify!(__pthread_cleanup_class))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__pthread_cleanup_class>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__pthread_cleanup_class))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_routine as *const _
//                 as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cleanup_class),
//             "::",
//             stringify!(__cancel_routine)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_arg as *const _
//                 as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cleanup_class),
//             "::",
//             stringify!(__cancel_arg)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cleanup_class>())).__do_it as *const _ as usize
//         },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cleanup_class),
//             "::",
//             stringify!(__do_it)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_type as *const _
//                 as usize
//         },
//         20usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__pthread_cleanup_class),
//             "::",
//             stringify!(__cancel_type)
//         )
//     );
// }
impl Default for __pthread_cleanup_class {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut crate::core::midi::rtme::root::__jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
        __mutexattr: *const crate::core::midi::rtme::root::pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
        __abstime: *const crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const crate::core::midi::rtme::root::pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent_np(
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(
        __attr: *mut crate::core::midi::rtme::root::pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(
        __attr: *mut crate::core::midi::rtme::root::pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const crate::core::midi::rtme::root::pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut crate::core::midi::rtme::root::pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const crate::core::midi::rtme::root::pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut crate::core::midi::rtme::root::pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const crate::core::midi::rtme::root::pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut crate::core::midi::rtme::root::pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const crate::core::midi::rtme::root::pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut crate::core::midi::rtme::root::pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const crate::core::midi::rtme::root::pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust_np(
        __attr: *const crate::core::midi::rtme::root::pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut crate::core::midi::rtme::root::pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust_np(
        __attr: *mut crate::core::midi::rtme::root::pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
        __attr: *const crate::core::midi::rtme::root::pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
        __abstime: *const crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
        __abstime: *const crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(
        __rwlock: *mut crate::core::midi::rtme::root::pthread_rwlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(
        __attr: *mut crate::core::midi::rtme::root::pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(
        __attr: *mut crate::core::midi::rtme::root::pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const crate::core::midi::rtme::root::pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut crate::core::midi::rtme::root::pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const crate::core::midi::rtme::root::pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut crate::core::midi::rtme::root::pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut crate::core::midi::rtme::root::pthread_cond_t,
        __cond_attr: *const crate::core::midi::rtme::root::pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(
        __cond: *mut crate::core::midi::rtme::root::pthread_cond_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(
        __cond: *mut crate::core::midi::rtme::root::pthread_cond_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(
        __cond: *mut crate::core::midi::rtme::root::pthread_cond_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut crate::core::midi::rtme::root::pthread_cond_t,
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut crate::core::midi::rtme::root::pthread_cond_t,
        __mutex: *mut crate::core::midi::rtme::root::pthread_mutex_t,
        __abstime: *const crate::core::midi::rtme::root::timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(
        __attr: *mut crate::core::midi::rtme::root::pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(
        __attr: *mut crate::core::midi::rtme::root::pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const crate::core::midi::rtme::root::pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut crate::core::midi::rtme::root::pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const crate::core::midi::rtme::root::pthread_condattr_t,
        __clock_id: *mut crate::core::midi::rtme::root::__clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut crate::core::midi::rtme::root::pthread_condattr_t,
        __clock_id: crate::core::midi::rtme::root::__clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut crate::core::midi::rtme::root::pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(
        __lock: *mut crate::core::midi::rtme::root::pthread_spinlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(
        __lock: *mut crate::core::midi::rtme::root::pthread_spinlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(
        __lock: *mut crate::core::midi::rtme::root::pthread_spinlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(
        __lock: *mut crate::core::midi::rtme::root::pthread_spinlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut crate::core::midi::rtme::root::pthread_barrier_t,
        __attr: *const crate::core::midi::rtme::root::pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(
        __barrier: *mut crate::core::midi::rtme::root::pthread_barrier_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(
        __barrier: *mut crate::core::midi::rtme::root::pthread_barrier_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(
        __attr: *mut crate::core::midi::rtme::root::pthread_barrierattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(
        __attr: *mut crate::core::midi::rtme::root::pthread_barrierattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const crate::core::midi::rtme::root::pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut crate::core::midi::rtme::root::pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut crate::core::midi::rtme::root::pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(
        __key: crate::core::midi::rtme::root::pthread_key_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(
        __key: crate::core::midi::rtme::root::pthread_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: crate::core::midi::rtme::root::pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: crate::core::midi::rtme::root::pthread_t,
        __clock_id: *mut crate::core::midi::rtme::root::__clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type __gthread_t = crate::core::midi::rtme::root::pthread_t;
pub type __gthread_key_t = crate::core::midi::rtme::root::pthread_key_t;
pub type __gthread_once_t = crate::core::midi::rtme::root::pthread_once_t;
pub type __gthread_mutex_t = crate::core::midi::rtme::root::pthread_mutex_t;
pub type __gthread_recursive_mutex_t = crate::core::midi::rtme::root::pthread_mutex_t;
pub type __gthread_cond_t = crate::core::midi::rtme::root::pthread_cond_t;
pub type __gthread_time_t = crate::core::midi::rtme::root::timespec;
pub type _Atomic_word = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
// #[test]
// fn bindgen_test_layout_div_t() {
//     assert_eq!(
//         ::std::mem::size_of::<div_t>(),
//         8usize,
//         concat!("Size of: ", stringify!(div_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<div_t>(),
//         4usize,
//         concat!("Alignment of ", stringify!(div_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(div_t),
//             "::",
//             stringify!(quot)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(div_t),
//             "::",
//             stringify!(rem)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
// #[test]
// fn bindgen_test_layout_ldiv_t() {
//     assert_eq!(
//         ::std::mem::size_of::<ldiv_t>(),
//         16usize,
//         concat!("Size of: ", stringify!(ldiv_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<ldiv_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(ldiv_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(ldiv_t),
//             "::",
//             stringify!(quot)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(ldiv_t),
//             "::",
//             stringify!(rem)
//         )
//     );
// }
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
// #[test]
// fn bindgen_test_layout_lldiv_t() {
//     assert_eq!(
//         ::std::mem::size_of::<lldiv_t>(),
//         16usize,
//         concat!("Size of: ", stringify!(lldiv_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<lldiv_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(lldiv_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lldiv_t),
//             "::",
//             stringify!(quot)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(lldiv_t),
//             "::",
//             stringify!(rem)
//         )
//     );
// }
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> crate::core::midi::rtme::root::_Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> crate::core::midi::rtme::root::_Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> crate::core::midi::rtme::root::_Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> crate::core::midi::rtme::root::_Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: crate::core::midi::rtme::root::_Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: crate::core::midi::rtme::root::_Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: crate::core::midi::rtme::root::_Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: crate::core::midi::rtme::root::_Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::_Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::_Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::_Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::_Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = crate::core::midi::rtme::root::__u_char;
pub type u_short = crate::core::midi::rtme::root::__u_short;
pub type u_int = crate::core::midi::rtme::root::__u_int;
pub type u_long = crate::core::midi::rtme::root::__u_long;
pub type quad_t = crate::core::midi::rtme::root::__quad_t;
pub type u_quad_t = crate::core::midi::rtme::root::__u_quad_t;
pub type fsid_t = crate::core::midi::rtme::root::__fsid_t;
pub type loff_t = crate::core::midi::rtme::root::__loff_t;
pub type ino_t = crate::core::midi::rtme::root::__ino_t;
pub type ino64_t = crate::core::midi::rtme::root::__ino64_t;
pub type dev_t = crate::core::midi::rtme::root::__dev_t;
pub type gid_t = crate::core::midi::rtme::root::__gid_t;
pub type mode_t = crate::core::midi::rtme::root::__mode_t;
pub type nlink_t = crate::core::midi::rtme::root::__nlink_t;
pub type uid_t = crate::core::midi::rtme::root::__uid_t;
pub type off_t = crate::core::midi::rtme::root::__off_t;
pub type off64_t = crate::core::midi::rtme::root::__off64_t;
pub type id_t = crate::core::midi::rtme::root::__id_t;
pub type daddr_t = crate::core::midi::rtme::root::__daddr_t;
pub type caddr_t = crate::core::midi::rtme::root::__caddr_t;
pub type key_t = crate::core::midi::rtme::root::__key_t;
pub type useconds_t = crate::core::midi::rtme::root::__useconds_t;
pub type suseconds_t = crate::core::midi::rtme::root::__suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
// #[test]
// fn bindgen_test_layout___sigset_t() {
//     assert_eq!(
//         ::std::mem::size_of::<__sigset_t>(),
//         128usize,
//         concat!("Size of: ", stringify!(__sigset_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__sigset_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__sigset_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__sigset_t),
//             "::",
//             stringify!(__val)
//         )
//     );
// }
pub type sigset_t = crate::core::midi::rtme::root::__sigset_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct fd_set {
    pub fds_bits: [self::__fd_mask; 16usize],
}
// #[test]
// fn bindgen_test_layout_fd_set() {
//     assert_eq!(
//         ::std::mem::size_of::<fd_set>(),
//         128usize,
//         concat!("Size of: ", stringify!(fd_set))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<fd_set>(),
//         8usize,
//         concat!("Alignment of ", stringify!(fd_set))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(fd_set),
//             "::",
//             stringify!(fds_bits)
//         )
//     );
// }
pub type fd_mask = crate::core::midi::rtme::root::__fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut crate::core::midi::rtme::root::fd_set,
        __writefds: *mut crate::core::midi::rtme::root::fd_set,
        __exceptfds: *mut crate::core::midi::rtme::root::fd_set,
        __timeout: *mut crate::core::midi::rtme::root::timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut crate::core::midi::rtme::root::fd_set,
        __writefds: *mut crate::core::midi::rtme::root::fd_set,
        __exceptfds: *mut crate::core::midi::rtme::root::fd_set,
        __timeout: *const crate::core::midi::rtme::root::timespec,
        __sigmask: *const crate::core::midi::rtme::root::__sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = crate::core::midi::rtme::root::__blksize_t;
pub type blkcnt_t = crate::core::midi::rtme::root::__blkcnt_t;
pub type fsblkcnt_t = crate::core::midi::rtme::root::__fsblkcnt_t;
pub type fsfilcnt_t = crate::core::midi::rtme::root::__fsfilcnt_t;
pub type blkcnt64_t = crate::core::midi::rtme::root::__blkcnt64_t;
pub type fsblkcnt64_t = crate::core::midi::rtme::root::__fsblkcnt64_t;
pub type fsfilcnt64_t = crate::core::midi::rtme::root::__fsfilcnt64_t;
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
// #[test]
// fn bindgen_test_layout_random_data() {
//     assert_eq!(
//         ::std::mem::size_of::<random_data>(),
//         48usize,
//         concat!("Size of: ", stringify!(random_data))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<random_data>(),
//         8usize,
//         concat!("Alignment of ", stringify!(random_data))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(random_data),
//             "::",
//             stringify!(fptr)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(random_data),
//             "::",
//             stringify!(rptr)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(random_data),
//             "::",
//             stringify!(state)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(random_data),
//             "::",
//             stringify!(rand_type)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
//         28usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(random_data),
//             "::",
//             stringify!(rand_deg)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(random_data),
//             "::",
//             stringify!(rand_sep)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(random_data),
//             "::",
//             stringify!(end_ptr)
//         )
//     );
// }
impl Default for random_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn random_r(
        __buf: *mut crate::core::midi::rtme::root::random_data,
        __result: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut crate::core::midi::rtme::root::random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut crate::core::midi::rtme::root::random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut crate::core::midi::rtme::root::random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
// #[test]
// fn bindgen_test_layout_drand48_data() {
//     assert_eq!(
//         ::std::mem::size_of::<drand48_data>(),
//         24usize,
//         concat!("Size of: ", stringify!(drand48_data))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<drand48_data>(),
//         8usize,
//         concat!("Alignment of ", stringify!(drand48_data))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(drand48_data),
//             "::",
//             stringify!(__x)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
//         6usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(drand48_data),
//             "::",
//             stringify!(__old_x)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
//         12usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(drand48_data),
//             "::",
//             stringify!(__c)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
//         14usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(drand48_data),
//             "::",
//             stringify!(__init)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(drand48_data),
//             "::",
//             stringify!(__a)
//         )
//     );
// }
extern "C" {
    pub fn drand48_r(
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut crate::core::midi::rtme::root::drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = crate::core::midi::rtme::root::__compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: crate::core::midi::rtme::root::__compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: crate::core::midi::rtme::root::__compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: crate::core::midi::rtme::root::__compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(
        __numer: ::std::os::raw::c_int,
        __denom: ::std::os::raw::c_int,
    ) -> crate::core::midi::rtme::root::div_t;
}
extern "C" {
    pub fn ldiv(
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> crate::core::midi::rtme::root::ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> crate::core::midi::rtme::root::lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: crate::core::midi::rtme::root::__off_t,
    pub __state: crate::core::midi::rtme::root::__mbstate_t,
}
// #[test]
// fn bindgen_test_layout__G_fpos_t() {
//     assert_eq!(
//         ::std::mem::size_of::<_G_fpos_t>(),
//         16usize,
//         concat!("Size of: ", stringify!(_G_fpos_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<_G_fpos_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(_G_fpos_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_G_fpos_t),
//             "::",
//             stringify!(__pos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_G_fpos_t),
//             "::",
//             stringify!(__state)
//         )
//     );
// }
impl Default for _G_fpos_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for _G_fpos_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}",
            self.__pos, self.__state
        )
    }
}
pub type __fpos_t = crate::core::midi::rtme::root::_G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: crate::core::midi::rtme::root::__off64_t,
    pub __state: crate::core::midi::rtme::root::__mbstate_t,
}
// #[test]
// fn bindgen_test_layout__G_fpos64_t() {
//     assert_eq!(
//         ::std::mem::size_of::<_G_fpos64_t>(),
//         16usize,
//         concat!("Size of: ", stringify!(_G_fpos64_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<_G_fpos64_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(_G_fpos64_t))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_G_fpos64_t),
//             "::",
//             stringify!(__pos)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_G_fpos64_t),
//             "::",
//             stringify!(__state)
//         )
//     );
// }
impl Default for _G_fpos64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for _G_fpos64_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}",
            self.__pos, self.__state
        )
    }
}
pub type __fpos64_t = crate::core::midi::rtme::root::_G_fpos64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut crate::core::midi::rtme::root::_IO_marker,
    pub _chain: *mut crate::core::midi::rtme::root::_IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: crate::core::midi::rtme::root::__off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut crate::core::midi::rtme::root::_IO_lock_t,
    pub _offset: crate::core::midi::rtme::root::__off64_t,
    pub _codecvt: *mut crate::core::midi::rtme::root::_IO_codecvt,
    pub _wide_data: *mut crate::core::midi::rtme::root::_IO_wide_data,
    pub _freeres_list: *mut crate::core::midi::rtme::root::_IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
// #[test]
// fn bindgen_test_layout__IO_FILE() {
//     assert_eq!(
//         ::std::mem::size_of::<_IO_FILE>(),
//         216usize,
//         concat!("Size of: ", stringify!(_IO_FILE))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<_IO_FILE>(),
//         8usize,
//         concat!("Alignment of ", stringify!(_IO_FILE))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_flags)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_read_ptr)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_read_end)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_read_base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
//         32usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_write_base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_write_ptr)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
//         48usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_write_end)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
//         56usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_buf_base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
//         64usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_buf_end)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
//         72usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_save_base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
//         80usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_backup_base)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
//         88usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_IO_save_end)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
//         96usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_markers)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
//         104usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_chain)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
//         112usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_fileno)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
//         116usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_flags2)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
//         120usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_old_offset)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
//         128usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_cur_column)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
//         130usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_vtable_offset)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
//         131usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_shortbuf)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
//         136usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_lock)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
//         144usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_offset)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
//         152usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_codecvt)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
//         160usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_wide_data)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
//         168usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_freeres_list)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
//         176usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_freeres_buf)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
//         184usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(__pad5)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
//         192usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_mode)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
//         196usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_FILE),
//             "::",
//             stringify!(_unused2)
//         )
//     );
// }
impl Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> crate::core::midi::rtme::root::__ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> crate::core::midi::rtme::root::__ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut crate::core::midi::rtme::root::__off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _IO_cookie_io_functions_t {
    pub read: crate::core::midi::rtme::root::cookie_read_function_t,
    pub write: crate::core::midi::rtme::root::cookie_write_function_t,
    pub seek: crate::core::midi::rtme::root::cookie_seek_function_t,
    pub close: crate::core::midi::rtme::root::cookie_close_function_t,
}
// #[test]
// fn bindgen_test_layout__IO_cookie_io_functions_t() {
//     assert_eq!(
//         ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
//         32usize,
//         concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
//         8usize,
//         concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize
//         },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_cookie_io_functions_t),
//             "::",
//             stringify!(read)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_cookie_io_functions_t),
//             "::",
//             stringify!(write)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize
//         },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_cookie_io_functions_t),
//             "::",
//             stringify!(seek)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize
//         },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(_IO_cookie_io_functions_t),
//             "::",
//             stringify!(close)
//         )
//     );
// }
impl Default for _IO_cookie_io_functions_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cookie_io_functions_t = crate::core::midi::rtme::root::_IO_cookie_io_functions_t;
pub type va_list = crate::core::midi::rtme::root::__gnuc_va_list;
pub type fpos_t = crate::core::midi::rtme::root::__fpos_t;
pub type fpos64_t = crate::core::midi::rtme::root::__fpos64_t;
extern "C" {
    pub static mut stdin: *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub static mut stdout: *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub static mut stderr: *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn fdopen(
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: crate::core::midi::rtme::root::cookie_io_functions_t,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn setbuf(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __buf: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    );
}
extern "C" {
    pub fn setlinebuf(__stream: *mut crate::core::midi::rtme::root::FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut crate::core::midi::rtme::root::FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut crate::core::midi::rtme::root::FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(
        __c: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(
        __c: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(
        __w: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> crate::core::midi::rtme::root::__ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> crate::core::midi::rtme::root::__ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> crate::core::midi::rtme::root::__ssize_t;
}
extern "C" {
    pub fn fputs(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(
        __c: ::std::os::raw::c_int,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut crate::core::midi::rtme::root::FILE,
    ) -> usize;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut crate::core::midi::rtme::root::FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __off: crate::core::midi::rtme::root::__off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> crate::core::midi::rtme::root::__off_t;
}
extern "C" {
    pub fn fgetpos(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __pos: *mut crate::core::midi::rtme::root::fpos_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __pos: *const crate::core::midi::rtme::root::fpos_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __off: crate::core::midi::rtme::root::__off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> crate::core::midi::rtme::root::__off64_t;
}
extern "C" {
    pub fn fgetpos64(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __pos: *mut crate::core::midi::rtme::root::fpos64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(
        __stream: *mut crate::core::midi::rtme::root::FILE,
        __pos: *const crate::core::midi::rtme::root::fpos64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut crate::core::midi::rtme::root::FILE);
}
extern "C" {
    pub fn feof(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut crate::core::midi::rtme::root::FILE);
}
extern "C" {
    pub fn feof_unlocked(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut crate::core::midi::rtme::root::FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut crate::core::midi::rtme::root::obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut crate::core::midi::rtme::root::obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut crate::core::midi::rtme::root::__va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut crate::core::midi::rtme::root::FILE);
}
extern "C" {
    pub fn ftrylockfile(
        __stream: *mut crate::core::midi::rtme::root::FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut crate::core::midi::rtme::root::FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut crate::core::midi::rtme::root::FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(
        arg1: *mut crate::core::midi::rtme::root::FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
pub type wctype_t = ::std::os::raw::c_ulong;
pub const __ISwupper: crate::core::midi::rtme::root::_bindgen_ty_51 = 0;
pub const __ISwlower: crate::core::midi::rtme::root::_bindgen_ty_51 = 1;
pub const __ISwalpha: crate::core::midi::rtme::root::_bindgen_ty_51 = 2;
pub const __ISwdigit: crate::core::midi::rtme::root::_bindgen_ty_51 = 3;
pub const __ISwxdigit: crate::core::midi::rtme::root::_bindgen_ty_51 = 4;
pub const __ISwspace: crate::core::midi::rtme::root::_bindgen_ty_51 = 5;
pub const __ISwprint: crate::core::midi::rtme::root::_bindgen_ty_51 = 6;
pub const __ISwgraph: crate::core::midi::rtme::root::_bindgen_ty_51 = 7;
pub const __ISwblank: crate::core::midi::rtme::root::_bindgen_ty_51 = 8;
pub const __ISwcntrl: crate::core::midi::rtme::root::_bindgen_ty_51 = 9;
pub const __ISwpunct: crate::core::midi::rtme::root::_bindgen_ty_51 = 10;
pub const __ISwalnum: crate::core::midi::rtme::root::_bindgen_ty_51 = 11;
pub const _ISwupper: crate::core::midi::rtme::root::_bindgen_ty_51 = 16777216;
pub const _ISwlower: crate::core::midi::rtme::root::_bindgen_ty_51 = 33554432;
pub const _ISwalpha: crate::core::midi::rtme::root::_bindgen_ty_51 = 67108864;
pub const _ISwdigit: crate::core::midi::rtme::root::_bindgen_ty_51 = 134217728;
pub const _ISwxdigit: crate::core::midi::rtme::root::_bindgen_ty_51 = 268435456;
pub const _ISwspace: crate::core::midi::rtme::root::_bindgen_ty_51 = 536870912;
pub const _ISwprint: crate::core::midi::rtme::root::_bindgen_ty_51 = 1073741824;
pub const _ISwgraph: crate::core::midi::rtme::root::_bindgen_ty_51 = -2147483648;
pub const _ISwblank: crate::core::midi::rtme::root::_bindgen_ty_51 = 65536;
pub const _ISwcntrl: crate::core::midi::rtme::root::_bindgen_ty_51 = 131072;
pub const _ISwpunct: crate::core::midi::rtme::root::_bindgen_ty_51 = 262144;
pub const _ISwalnum: crate::core::midi::rtme::root::_bindgen_ty_51 = 524288;
pub type _bindgen_ty_51 = i32;
extern "C" {
    pub fn iswalnum(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank(__wc: crate::core::midi::rtme::root::wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype(
        __property: *const ::std::os::raw::c_char,
    ) -> crate::core::midi::rtme::root::wctype_t;
}
extern "C" {
    pub fn iswctype(
        __wc: crate::core::midi::rtme::root::wint_t,
        __desc: crate::core::midi::rtme::root::wctype_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towlower(
        __wc: crate::core::midi::rtme::root::wint_t,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn towupper(
        __wc: crate::core::midi::rtme::root::wint_t,
    ) -> crate::core::midi::rtme::root::wint_t;
}
pub type wctrans_t = *const crate::core::midi::rtme::root::__int32_t;
extern "C" {
    pub fn wctrans(
        __property: *const ::std::os::raw::c_char,
    ) -> crate::core::midi::rtme::root::wctrans_t;
}
extern "C" {
    pub fn towctrans(
        __wc: crate::core::midi::rtme::root::wint_t,
        __desc: crate::core::midi::rtme::root::wctrans_t,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn iswalnum_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(
        __property: *const ::std::os::raw::c_char,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::wctype_t;
}
extern "C" {
    pub fn iswctype_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __desc: crate::core::midi::rtme::root::wctype_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towlower_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn towupper_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::wint_t;
}
extern "C" {
    pub fn wctrans_l(
        __property: *const ::std::os::raw::c_char,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::wctrans_t;
}
extern "C" {
    pub fn towctrans_l(
        __wc: crate::core::midi::rtme::root::wint_t,
        __desc: crate::core::midi::rtme::root::wctrans_t,
        __locale: crate::core::midi::rtme::root::locale_t,
    ) -> crate::core::midi::rtme::root::wint_t;
}
#[repr(C)]
pub struct RtMidiError {
    pub _base: crate::core::midi::rtme::root::std::exception,
    pub message_: crate::core::midi::rtme::root::std::__cxx11::string,
    pub type_: crate::core::midi::rtme::root::RtMidiError_Type,
}
#[doc = "< A non-critical error."]
pub const RtMidiError_Type_WARNING: crate::core::midi::rtme::root::RtMidiError_Type = 0;
#[doc = "< A non-critical error which might be useful for debugging."]
pub const RtMidiError_Type_DEBUG_WARNING: crate::core::midi::rtme::root::RtMidiError_Type = 1;
#[doc = "< The default, unspecified error type."]
pub const RtMidiError_Type_UNSPECIFIED: crate::core::midi::rtme::root::RtMidiError_Type = 2;
#[doc = "< No devices found on system."]
pub const RtMidiError_Type_NO_DEVICES_FOUND: crate::core::midi::rtme::root::RtMidiError_Type = 3;
#[doc = "< An invalid device ID was specified."]
pub const RtMidiError_Type_INVALID_DEVICE: crate::core::midi::rtme::root::RtMidiError_Type = 4;
#[doc = "< An error occured during memory allocation."]
pub const RtMidiError_Type_MEMORY_ERROR: crate::core::midi::rtme::root::RtMidiError_Type = 5;
#[doc = "< An invalid parameter was specified to a function."]
pub const RtMidiError_Type_INVALID_PARAMETER: crate::core::midi::rtme::root::RtMidiError_Type = 6;
#[doc = "< The function was called incorrectly."]
pub const RtMidiError_Type_INVALID_USE: crate::core::midi::rtme::root::RtMidiError_Type = 7;
#[doc = "< A system driver error occured."]
pub const RtMidiError_Type_DRIVER_ERROR: crate::core::midi::rtme::root::RtMidiError_Type = 8;
#[doc = "< A system error occured."]
pub const RtMidiError_Type_SYSTEM_ERROR: crate::core::midi::rtme::root::RtMidiError_Type = 9;
#[doc = "< A thread error occured."]
pub const RtMidiError_Type_THREAD_ERROR: crate::core::midi::rtme::root::RtMidiError_Type = 10;
#[doc = "! Defined RtMidiError types."]
pub type RtMidiError_Type = u32;
// #[test]
// fn bindgen_test_layout_RtMidiError() {
//     assert_eq!(
//         ::std::mem::size_of::<RtMidiError>(),
//         48usize,
//         concat!("Size of: ", stringify!(RtMidiError))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<RtMidiError>(),
//         8usize,
//         concat!("Alignment of ", stringify!(RtMidiError))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<RtMidiError>())).message_ as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiError),
//             "::",
//             stringify!(message_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<RtMidiError>())).type_ as *const _ as usize },
//         40usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiError),
//             "::",
//             stringify!(type_)
//         )
//     );
// }
impl Default for RtMidiError {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RtMidiError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RtMidiError {{ message_: {:?}, type_: {:?} }}",
            self.message_, self.type_
        )
    }
}
#[repr(C)]
pub struct RtMidi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct RtMidi {
    pub vtable_: *const RtMidi__bindgen_vtable,
    pub apiData_: *mut ::std::os::raw::c_void,
    pub connected_: bool,
    pub errorString_: crate::core::midi::rtme::root::std::__cxx11::string,
}
// #[test]
// fn bindgen_test_layout_RtMidi() {
//     assert_eq!(
//         ::std::mem::size_of::<RtMidi>(),
//         56usize,
//         concat!("Size of: ", stringify!(RtMidi))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<RtMidi>(),
//         8usize,
//         concat!("Alignment of ", stringify!(RtMidi))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<RtMidi>())).apiData_ as *const _ as usize },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidi),
//             "::",
//             stringify!(apiData_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<RtMidi>())).connected_ as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidi),
//             "::",
//             stringify!(connected_)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<RtMidi>())).errorString_ as *const _ as usize },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidi),
//             "::",
//             stringify!(errorString_)
//         )
//     );
// }
extern "C" {
    #[link_name = "\u{1}error"]
    pub fn RtMidi_error(
        this: *mut crate::core::midi::rtme::root::RtMidi,
        type_: crate::core::midi::rtme::root::RtMidiError_Type,
    );
}
extern "C" {
    #[link_name = "\u{1}RtMidi"]
    pub fn RtMidi_RtMidi(this: *mut crate::core::midi::rtme::root::RtMidi);
}
impl Default for RtMidi {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RtMidi {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RtMidi {{ apiData_: {:?}, connected_: {:?}, errorString_: {:?} }}",
            self.apiData_, self.connected_, self.errorString_
        )
    }
}
impl RtMidi {
    #[inline]
    pub unsafe fn error(&mut self, type_: crate::core::midi::rtme::root::RtMidiError_Type) {
        RtMidi_error(self, type_)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        RtMidi_RtMidi(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
#[repr(C)]
pub struct RtMidiIn {
    pub _base: crate::core::midi::rtme::root::RtMidi,
    pub inputData_: crate::core::midi::rtme::root::RtMidiIn_RtMidiInData,
}
#[doc = "! User callback function type definition."]
pub type RtMidiIn_RtMidiCallback = ::std::option::Option<
    unsafe extern "C" fn(
        timeStamp: f64,
        message: *mut crate::core::midi::rtme::root::std::vector,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
pub struct RtMidiIn_MidiMessage {
    pub bytes: crate::core::midi::rtme::root::std::vector,
    pub timeStamp: f64,
}
// #[test]
// fn bindgen_test_layout_RtMidiIn_MidiMessage() {
//     assert_eq!(
//         ::std::mem::size_of::<RtMidiIn_MidiMessage>(),
//         32usize,
//         concat!("Size of: ", stringify!(RtMidiIn_MidiMessage))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<RtMidiIn_MidiMessage>(),
//         8usize,
//         concat!("Alignment of ", stringify!(RtMidiIn_MidiMessage))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<RtMidiIn_MidiMessage>())).bytes as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_MidiMessage),
//             "::",
//             stringify!(bytes)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_MidiMessage>())).timeStamp as *const _ as usize
//         },
//         24usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_MidiMessage),
//             "::",
//             stringify!(timeStamp)
//         )
//     );
// }
impl Default for RtMidiIn_MidiMessage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RtMidiIn_MidiMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RtMidiIn_MidiMessage {{ bytes: {:?}, timeStamp: {:?} }}",
            self.bytes, self.timeStamp
        )
    }
}
impl PartialEq for RtMidiIn_MidiMessage {
    fn eq(&self, other: &RtMidiIn_MidiMessage) -> bool {
        self.bytes == other.bytes && self.timeStamp == other.timeStamp
    }
}
#[repr(C)]
pub struct RtMidiIn_RtMidiInData {
    pub queue: crate::core::midi::rtme::root::std::queue<root::std::deque>,
    pub queueLimit: ::std::os::raw::c_uint,
    pub ignoreFlags: ::std::os::raw::c_uchar,
    pub doInput: bool,
    pub firstMessage: bool,
    pub apiData: *mut ::std::os::raw::c_void,
    pub usingCallback: bool,
    pub userCallback: *mut ::std::os::raw::c_void,
    pub userData: *mut ::std::os::raw::c_void,
}
// #[test]
// fn bindgen_test_layout_RtMidiIn_RtMidiInData() {
//     assert_eq!(
//         ::std::mem::size_of::<RtMidiIn_RtMidiInData>(),
//         120usize,
//         concat!("Size of: ", stringify!(RtMidiIn_RtMidiInData))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<RtMidiIn_RtMidiInData>(),
//         8usize,
//         concat!("Alignment of ", stringify!(RtMidiIn_RtMidiInData))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).queue as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(queue)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).queueLimit as *const _ as usize
//         },
//         80usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(queueLimit)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).ignoreFlags as *const _ as usize
//         },
//         84usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(ignoreFlags)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).doInput as *const _ as usize
//         },
//         85usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(doInput)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).firstMessage as *const _ as usize
//         },
//         86usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(firstMessage)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).apiData as *const _ as usize
//         },
//         88usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(apiData)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).usingCallback as *const _ as usize
//         },
//         96usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(usingCallback)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).userCallback as *const _ as usize
//         },
//         104usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(userCallback)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).userData as *const _ as usize
//         },
//         112usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn_RtMidiInData),
//             "::",
//             stringify!(userData)
//         )
//     );
// }
impl Default for RtMidiIn_RtMidiInData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RtMidiIn_RtMidiInData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "RtMidiIn_RtMidiInData {{ queue: {:?}, queueLimit: {:?}, ignoreFlags: {:?}, doInput: {:?}, firstMessage: {:?}, apiData: {:?}, usingCallback: {:?}, userCallback: {:?}, userData: {:?} }}" , self . queue , self . queueLimit , self . ignoreFlags , self . doInput , self . firstMessage , self . apiData , self . usingCallback , self . userCallback , self . userData )
    }
}
impl PartialEq for RtMidiIn_RtMidiInData {
    fn eq(&self, other: &RtMidiIn_RtMidiInData) -> bool {
        self.queue == other.queue
            && self.queueLimit == other.queueLimit
            && self.ignoreFlags == other.ignoreFlags
            && self.doInput == other.doInput
            && self.firstMessage == other.firstMessage
            && self.apiData == other.apiData
            && self.usingCallback == other.usingCallback
            && self.userCallback == other.userCallback
            && self.userData == other.userData
    }
}
// #[test]
// fn bindgen_test_layout_RtMidiIn() {
//     assert_eq!(
//         ::std::mem::size_of::<RtMidiIn>(),
//         176usize,
//         concat!("Size of: ", stringify!(RtMidiIn))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<RtMidiIn>(),
//         8usize,
//         concat!("Alignment of ", stringify!(RtMidiIn))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<RtMidiIn>())).inputData_ as *const _ as usize },
//         56usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(RtMidiIn),
//             "::",
//             stringify!(inputData_)
//         )
//     );
// }
extern "C" {
    #[doc = "! Set a callback function to be invoked for incoming MIDI messages."]
    #[doc = "*!"]
    #[doc = "The callback function will be called whenever an incoming MIDI"]
    #[doc = "message is received.  While not absolutely necessary, it is best"]
    #[doc = "to set the callback function before opening a MIDI port to avoid"]
    #[doc = "leaving some messages in the queue."]
    #[doc = "*/"]
    #[link_name = "\u{1}setCallback"]
    pub fn RtMidiIn_setCallback(
        this: *mut crate::core::midi::rtme::root::RtMidiIn,
        callback: crate::core::midi::rtme::root::RtMidiIn_RtMidiCallback,
        userData: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = "! Cancel use of the current callback function (if one exists)."]
    #[doc = "*!"]
    #[doc = "Subsequent incoming MIDI messages will be written to the queue"]
    #[doc = "and can be retrieved with the \\e getMessage function."]
    #[doc = "*/"]
    #[link_name = "\u{1}cancelCallback"]
    pub fn RtMidiIn_cancelCallback(this: *mut crate::core::midi::rtme::root::RtMidiIn);
}
extern "C" {
    #[doc = "! Set the maximum number of MIDI messages to be saved in the queue."]
    #[doc = "*!"]
    #[doc = "If the queue size limit is reached, incoming messages will be"]
    #[doc = "ignored.  The default limit is 1024."]
    #[doc = "*/"]
    #[link_name = "\u{1}setQueueSizeLimit"]
    pub fn RtMidiIn_setQueueSizeLimit(
        this: *mut crate::core::midi::rtme::root::RtMidiIn,
        queueSize: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[doc = "! Specify whether certain MIDI message types should be queued or ignored during input."]
    #[doc = "*!"]
    #[doc = "By default, active sensing messages are ignored"]
    #[doc = "during message input because of their relative high data rates."]
    #[doc = "MIDI sysex messages are ignored by default as well.  Variable"]
    #[doc = "values of \"true\" imply that the respective message type will be"]
    #[doc = "ignored."]
    #[doc = "*/"]
    #[link_name = "\u{1}ignoreTypes"]
    pub fn RtMidiIn_ignoreTypes(
        this: *mut crate::core::midi::rtme::root::RtMidiIn,
        midiSysex: bool,
        midiTime: bool,
        midiSense: bool,
    );
}
extern "C" {
    #[doc = "! Fill the user-provided vector with the data bytes for the next available MIDI message in the input queue and return the event delta-time in seconds."]
    #[doc = "*!"]
    #[doc = "This function returns immediately whether a new message is"]
    #[doc = "available or not.  A valid message is indicated by a non-zero"]
    #[doc = "vector size.  An exception is thrown if an error occurs during"]
    #[doc = "message retrieval or an input connection was not previously"]
    #[doc = "established."]
    #[doc = "*/"]
    #[link_name = "\u{1}getMessage"]
    pub fn RtMidiIn_getMessage(
        this: *mut crate::core::midi::rtme::root::RtMidiIn,
        message: *mut crate::core::midi::rtme::root::std::vector,
    ) -> f64;
}
extern "C" {
    #[doc = "! Default constructor."]
    #[doc = "*!"]
    #[doc = "An exception will be thrown if a MIDI system initialization error occurs."]
    #[doc = "*/"]
    #[link_name = "\u{1}RtMidiIn"]
    pub fn RtMidiIn_RtMidiIn(this: *mut crate::core::midi::rtme::root::RtMidiIn);
}
impl Default for RtMidiIn {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RtMidiIn {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RtMidiIn {{ inputData_: {:?} }}", self.inputData_)
    }
}
impl RtMidiIn {
    #[inline]
    pub unsafe fn setCallback(
        &mut self,
        callback: crate::core::midi::rtme::root::RtMidiIn_RtMidiCallback,
        userData: *mut ::std::os::raw::c_void,
    ) {
        RtMidiIn_setCallback(self, callback, userData)
    }
    #[inline]
    pub unsafe fn cancelCallback(&mut self) {
        RtMidiIn_cancelCallback(self)
    }
    #[inline]
    pub unsafe fn setQueueSizeLimit(&mut self, queueSize: ::std::os::raw::c_uint) {
        RtMidiIn_setQueueSizeLimit(self, queueSize)
    }
    #[inline]
    pub unsafe fn ignoreTypes(&mut self, midiSysex: bool, midiTime: bool, midiSense: bool) {
        RtMidiIn_ignoreTypes(self, midiSysex, midiTime, midiSense)
    }
    #[inline]
    pub unsafe fn getMessage(
        &mut self,
        message: *mut crate::core::midi::rtme::root::std::vector,
    ) -> f64 {
        RtMidiIn_getMessage(self, message)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        RtMidiIn_RtMidiIn(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[doc = "! If a MIDI connection is still open, it will be closed by the destructor."]
    #[link_name = "\u{1}RtMidiIn_destructor"]
    pub fn RtMidiIn_RtMidiIn_destructor(this: *mut crate::core::midi::rtme::root::RtMidiIn);
}
extern "C" {
    #[doc = "! Open a MIDI input connection."]
    #[doc = "*!"]
    #[doc = "An optional port number greater than 0 can be specified."]
    #[doc = "Otherwise, the default or first port found is opened."]
    #[doc = "*/"]
    #[link_name = "\u{1}openPort"]
    pub fn RtMidiIn_openPort(this: *mut ::std::os::raw::c_void, portNumber: ::std::os::raw::c_uint);
}
extern "C" {
    #[doc = "! Create a virtual input port to allow software connections (OS X and ALSA only)."]
    #[doc = "*!"]
    #[doc = "This function creates a virtual MIDI input port to which other"]
    #[doc = "software applications can connect.  This type of functionality"]
    #[doc = "is currently only supported by the Macintosh OS-X and Linux ALSA"]
    #[doc = "APIs (the function does nothing for the other APIs)."]
    #[doc = "*/"]
    #[link_name = "\u{1}openVirtualPort"]
    pub fn RtMidiIn_openVirtualPort(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "! Close an open MIDI connection (if one exists)."]
    #[link_name = "\u{1}closePort"]
    pub fn RtMidiIn_closePort(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "! Return the number of available MIDI input ports."]
    #[link_name = "\u{1}getPortCount"]
    pub fn RtMidiIn_getPortCount(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = "! Return a string identifier for the specified MIDI input port number."]
    #[doc = "*!"]
    #[doc = "An exception is thrown if an invalid port specifier is provided."]
    #[doc = "*/"]
    #[link_name = "\u{1}getPortName"]
    pub fn RtMidiIn_getPortName(
        this: *mut ::std::os::raw::c_void,
        portNumber: ::std::os::raw::c_uint,
    ) -> crate::core::midi::rtme::root::std::__cxx11::string;
}
#[doc = "\\brief A realtime MIDI output class."]
#[doc = ""]
#[doc = "This class provides a common, platform-independent API for MIDI"]
#[doc = "output.  It allows one to probe available MIDI output ports, to"]
#[doc = "connect to one such port, and to send MIDI bytes immediately over"]
#[doc = "the connection.  Create multiple instances of this class to"]
#[doc = "connect to more than one MIDI device at the same time."]
#[doc = ""]
#[doc = "by Gary P. Scavone, 2003-2004."]
#[repr(C)]
pub struct RtMidiOut {
    pub _base: crate::core::midi::rtme::root::RtMidi,
}
// #[test]
// fn bindgen_test_layout_RtMidiOut() {
//     assert_eq!(
//         ::std::mem::size_of::<RtMidiOut>(),
//         56usize,
//         concat!("Size of: ", stringify!(RtMidiOut))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<RtMidiOut>(),
//         8usize,
//         concat!("Alignment of ", stringify!(RtMidiOut))
//     );
// }
extern "C" {
    #[doc = "! Immediately send a single message out an open MIDI output port."]
    #[doc = "*!"]
    #[doc = "An exception is thrown if an error occurs during output or an"]
    #[doc = "output connection was not previously established."]
    #[doc = "*/"]
    #[link_name = "\u{1}sendMessage"]
    pub fn RtMidiOut_sendMessage(
        this: *mut crate::core::midi::rtme::root::RtMidiOut,
        message: *mut crate::core::midi::rtme::root::std::vector,
    );
}
extern "C" {
    #[doc = "! Default constructor."]
    #[doc = "*!"]
    #[doc = "An exception will be thrown if a MIDI system initialization error occurs."]
    #[doc = "*/"]
    #[link_name = "\u{1}RtMidiOut"]
    pub fn RtMidiOut_RtMidiOut(this: *mut crate::core::midi::rtme::root::RtMidiOut);
}
impl Default for RtMidiOut {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for RtMidiOut {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RtMidiOut {{  }}")
    }
}
impl RtMidiOut {
    #[inline]
    pub unsafe fn sendMessage(&mut self, message: *mut crate::core::midi::rtme::root::std::vector) {
        RtMidiOut_sendMessage(self, message)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        RtMidiOut_RtMidiOut(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[doc = "! The destructor closes any open MIDI connections."]
    #[link_name = "\u{1}RtMidiOut_destructor"]
    pub fn RtMidiOut_RtMidiOut_destructor(this: *mut crate::core::midi::rtme::root::RtMidiOut);
}
extern "C" {
    #[doc = "! Open a MIDI output connection."]
    #[doc = "*!"]
    #[doc = "An optional port number greater than 0 can be specified."]
    #[doc = "Otherwise, the default or first port found is opened.  An"]
    #[doc = "exception is thrown if an error occurs while attempting to make"]
    #[doc = "the port connection."]
    #[doc = "*/"]
    #[link_name = "\u{1}openPort"]
    pub fn RtMidiOut_openPort(
        this: *mut ::std::os::raw::c_void,
        portNumber: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[doc = "! Close an open MIDI connection (if one exists)."]
    #[link_name = "\u{1}closePort"]
    pub fn RtMidiOut_closePort(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "! Create a virtual output port to allow software connections (OS X and ALSA only)."]
    #[doc = "*!"]
    #[doc = "This function creates a virtual MIDI output port to which other"]
    #[doc = "software applications can connect.  This type of functionality"]
    #[doc = "is currently only supported by the Macintosh OS-X and Linux ALSA"]
    #[doc = "APIs (the function does nothing with the other APIs).  An"]
    #[doc = "exception is thrown if an error occurs while attempting to create"]
    #[doc = "the virtual port."]
    #[doc = "*/"]
    #[link_name = "\u{1}openVirtualPort"]
    pub fn RtMidiOut_openVirtualPort(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "! Return the number of available MIDI output ports."]
    #[link_name = "\u{1}getPortCount"]
    pub fn RtMidiOut_getPortCount(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = "! Return a string identifier for the specified MIDI port type and number."]
    #[doc = "*!"]
    #[doc = "An exception is thrown if an invalid port specifier is provided."]
    #[doc = "*/"]
    #[link_name = "\u{1}getPortName"]
    pub fn RtMidiOut_getPortName(
        this: *mut ::std::os::raw::c_void,
        portNumber: ::std::os::raw::c_uint,
    ) -> crate::core::midi::rtme::root::std::__cxx11::string;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_3 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_4 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_5 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_6 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_7 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_8 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_9 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_10 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_11 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_12 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_13 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_14 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_15 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_16 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_17 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_18 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_19 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_20 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_21 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_22 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_23 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_24 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_25 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_26 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_27 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_28 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_29 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_30 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_31 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_32 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_33 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_34 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_35 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_36 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _bindgen_ty_37 {
    pub _address: u8,
}
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u16>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u16>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u16>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u16>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
pub type __builtin_va_list = [self::__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
// #[test]
// fn bindgen_test_layout___va_list_tag() {
//     assert_eq!(
//         ::std::mem::size_of::<__va_list_tag>(),
//         24usize,
//         concat!("Size of: ", stringify!(__va_list_tag))
//     );
//     assert_eq!(
//         ::std::mem::align_of::<__va_list_tag>(),
//         8usize,
//         concat!("Alignment of ", stringify!(__va_list_tag))
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
//         0usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__va_list_tag),
//             "::",
//             stringify!(gp_offset)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
//         4usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__va_list_tag),
//             "::",
//             stringify!(fp_offset)
//         )
//     );
//     assert_eq!(
//         unsafe {
//             &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
//         },
//         8usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__va_list_tag),
//             "::",
//             stringify!(overflow_arg_area)
//         )
//     );
//     assert_eq!(
//         unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
//         16usize,
//         concat!(
//             "Offset of field: ",
//             stringify!(__va_list_tag),
//             "::",
//             stringify!(reg_save_area)
//         )
//     );
// }
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __locale_data {
    pub _address: u8,
}
// #[test]
// fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_ios<::std::os::raw::c_char>>(),
//         264usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_ios<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_ios<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_ios<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
//         64usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
//         280usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_3() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_ostream<::std::os::raw::c_char>>(),
//         272usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_ostream<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_ostream<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_ostream<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_4() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_iostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_iostream<::std::os::raw::c_char>>(),
//         288usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_iostream<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_iostream<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_iostream<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_5() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_6() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_7() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_8() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_3() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_9() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_4() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_10() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_11() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_12() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_13() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_ios<u32>>(),
//         264usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_ios<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_ios<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_ios<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
//         64usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_streambuf<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_streambuf<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_istream<u32>>(),
//         280usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_istream<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_istream<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_istream<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_3() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_ostream<u32>>(),
//         272usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_ostream<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_ostream<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_ostream<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_4() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_iostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_iostream<u32>>(),
//         288usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_iostream<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_iostream<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_iostream<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_5() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_6() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_7() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_8() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_3() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_9() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_4() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_10() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_11() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_12() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_13() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[repr(C)]
// #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
// pub struct _bindgen_ty_38 {
//     pub _address: u8,
// }
// #[test]
// fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
// }
// #[repr(C)]
// #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
// pub struct _bindgen_ty_50 {
//     pub _address: u8,
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char_char_traits_open1_char_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<::std::os::raw::c_char>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_14() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u32>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_14() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char16_t_char_traits_open1_char16_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u16>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u16>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u16>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u16>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char32_t_char_traits_open1_char32_t_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u32>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<::std::os::raw::c_char>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_15() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<::std::os::raw::c_char>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_16() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u32>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_15() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_basic_string_view_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u32>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_16() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char16_t_char_traits_open1_char16_t_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u16>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u16>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u16>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u16>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char16_t_char_traits_open2_char16_t_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char16_t_char_traits_open1_char16_t_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u16>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u16>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u16>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u16>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_3() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char32_t_char_traits_open1_char32_t_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u32>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_basic_string_view_open1_char32_t_char_traits_open2_char32_t_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_view_open0_char32_t_char_traits_open1_char32_t_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_string_view<u32>>(),
//         16usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_string_view<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_string_view<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_3() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
//         280usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_17() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_18() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_5() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
//         280usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_istream<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_istream<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_19() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_istream<u32>>(),
//         280usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_istream<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_istream<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_istream<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_17() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_18() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_5() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_istream<u32>>(),
//         280usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_istream<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_istream<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_istream<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_19() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_20() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_6() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_3(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_21() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_7() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_20() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_6() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_3(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_21() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_7() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u16>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u16>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u16>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u16>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_4() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u16>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u16>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u16>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u16>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_5() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_4() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::hash>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::hash)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_5() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_4(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         32usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::__cxx11::basic_string<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::__cxx11::basic_string<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_22() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_8() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
//         64usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_23() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
//         64usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_streambuf<::std::os::raw::c_char>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_streambuf<::std::os::raw::c_char>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_24() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
//         64usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_streambuf<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_streambuf<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_22() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
//         64usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::basic_streambuf<u32>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::basic_streambuf<u32>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_23() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_25() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_24() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_3(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_26() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_27() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_25() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_26() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_28() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_27() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_29() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_28() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// pub type char_type = ::std::os::raw::c_char;

// pub type int_type = ::std::os::raw::c_int;

// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_30() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_31() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_29() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_30() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::char_traits>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::char_traits)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_iterator_open0_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::iterator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::iterator)
//         )
//     );
// }

// pub type iterator = crate::core::midi::rtme::root::std::_Bit_iterator;
// #[repr(C)]
// #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
// pub struct _bindgen_ty_52 {
//     pub _address: u8,
// }
// #[repr(C)]
// #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
// pub struct _bindgen_ty_53 {
//     pub _address: u8,
// }
// #[test]
// fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::vector>(),
//         24usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::vector)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::vector>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::vector)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_1(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::vector>(),
//         24usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::vector)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::vector>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::vector)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_1() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_2(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::vector>(),
//         24usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::vector)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::vector>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::vector)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_2() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_queue_open0_RtMidiIn_MidiMessage_deque_open1_RtMidiIn_MidiMessage_allocator_open2_RtMidiIn_MidiMessage_close2_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::queue<root::std::deque>>(),
//         80usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::queue<root::std::deque>)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::queue<root::std::deque>>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::queue<root::std::deque>)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_deque_open0_RtMidiIn_MidiMessage_allocator_open1_RtMidiIn_MidiMessage_close1_close0_instantiation(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::deque>(),
//         80usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::deque)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::deque>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::deque)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_RtMidiIn_MidiMessage_close0_instantiation() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_3(
// ) {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::vector>(),
//         24usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::vector)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::vector>(),
//         8usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::vector)
//         )
//     );
// }
// #[test]
// fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_3() {
//     assert_eq!(
//         ::std::mem::size_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Size of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
//     assert_eq!(
//         ::std::mem::align_of::<root::std::allocator>(),
//         1usize,
//         concat!(
//             "Alignment of template specialization: ",
//             stringify!(root::std::allocator)
//         )
//     );
// }
