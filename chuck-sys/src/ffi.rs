//! Auto-generated bindings to `chuck.h`
/* automatically generated by rust-bindgen */
#[allow(
    improper_ctypes,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals
)]
/// root module used to encapsulate the C++ `std` namespace, so do `use chuck_sys::ffi::root::*;
pub mod root {
    use ::std::convert::AsRef;
    use libc;
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        storage: Storage,
        align: [Align; 0],
    }
    impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn new(storage: Storage) -> Self {
            Self { storage, align: [] }
        }
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[repr(C)]
    #[derive(Default)]
    pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
    impl<T> __IncompleteArrayField<T> {
        #[inline]
        pub fn new() -> Self {
            __IncompleteArrayField(::std::marker::PhantomData, [])
        }
        #[inline]
        pub unsafe fn as_ptr(&self) -> *const T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_slice(&self, len: usize) -> &[T] {
            ::std::slice::from_raw_parts(self.as_ptr(), len)
        }
        #[inline]
        pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
            ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
        }
    }
    impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__IncompleteArrayField")
        }
    }
    impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub fn new() -> Self {
            __BindgenUnionField(::std::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::std::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::std::mem::transmute(self)
        }
    }
    impl<T> ::std::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
    #[allow(unused_imports)]
    use self::super::root;
    pub const _GLIBCXX_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 8;
    pub const __GLIBCXX__: u32 = 20181127;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 2;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 1;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const __USE_EXTERN_INLINES: u32 = 1;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
    pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
    pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
    pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
    pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
    pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
    pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
    pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
    pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
    pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
    pub const STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_HOSTED: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INT128: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _GLIBCXX_CSTDLIB: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
    pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
    pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
    pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const __STDLIB_MB_LEN_MAX: u32 = 16;
    pub const _MEMORY_H: u32 = 1;
    pub const _STRING_H: u32 = 1;
    pub const _STRINGS_H: u32 = 1;
    pub const __STRINGS_FORTIFIED: u32 = 1;
    pub const _BITS_STRING_FORTIFIED_H: u32 = 1;
    pub const _ASSERT_H: u32 = 1;
    pub const sz_VOID: u32 = 0;
    pub const sz_WORD: u32 = 4;
    pub const kindof_VOID: u32 = 0;
    pub const kindof_INT: u32 = 1;
    pub const kindof_FLOAT: u32 = 2;
    pub const kindof_COMPLEX: u32 = 3;
    pub const kindof_VEC3: u32 = 4;
    pub const kindof_VEC4: u32 = 5;
    pub const SILENCE: f64 = 0.0;
    pub const TRUE: u32 = 1;
    pub const FALSE: u32 = 0;
    pub const ONE_PI: f64 = 3.141592653589793;
    pub const TWO_PI: f64 = 6.283185307179586;
    pub const SQRT2: f64 = 1.4142135623730951;
    pub const _STDIO_H: u32 = 1;
    pub const _____fpos_t_defined: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _____fpos64_t_defined: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const __struct_FILE_defined: u32 = 1;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const __cookie_io_functions_t_defined: u32 = 1;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const EOF: i32 = -1;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const RENAME_NOREPLACE: u32 = 1;
    pub const RENAME_EXCHANGE: u32 = 2;
    pub const RENAME_WHITEOUT: u32 = 4;
    pub const _BITS_STDIO_H: u32 = 1;
    pub const _BITS_STDIO2_H: u32 = 1;
    pub const _GLIBCXX_STRING: u32 = 1;
    pub const _STRINGFWD_H: u32 = 1;
    pub const _MEMORYFWD_H: u32 = 1;
    pub const _CHAR_TRAITS_H: u32 = 1;
    pub const _STL_ALGOBASE_H: u32 = 1;
    pub const _FUNCTEXCEPT_H: u32 = 1;
    pub const _EXCEPTION_DEFINES_H: u32 = 1;
    pub const _CPP_TYPE_TRAITS_H: u32 = 1;
    pub const _EXT_TYPE_TRAITS: u32 = 1;
    pub const _EXT_NUMERIC_TRAITS: u32 = 1;
    pub const _STL_PAIR_H: u32 = 1;
    pub const _MOVE_H: u32 = 1;
    pub const _CONCEPT_CHECK_H: u32 = 1;
    pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
    pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
    pub const _STL_ITERATOR_H: u32 = 1;
    pub const _PTR_TRAITS_H: u32 = 1;
    pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
    pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
    pub const _GLIBCXX_POSTYPES_H: u32 = 1;
    pub const _WCHAR_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const __wint_t_defined: u32 = 1;
    pub const _WINT_T: u32 = 1;
    pub const __mbstate_t_defined: u32 = 1;
    pub const WEOF: u32 = 4294967295;
    pub const __WCHAR_MB_LEN_MAX: u32 = 16;
    pub const _GLIBCXX_CWCHAR: u32 = 1;
    pub const _GLIBCXX_CSTDINT: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const _ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
    pub const _NEW_ALLOCATOR_H: u32 = 1;
    pub const __EXCEPTION_H: u32 = 1;
    pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
    pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
    pub const _HASH_BYTES_H: u32 = 1;
    pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
    pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
    pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
    pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
    pub const __cpp_lib_allocator_is_always_equal: u32 = 201411;
    pub const _LOCALE_FWD_H: u32 = 1;
    pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
    pub const _LOCALE_H: u32 = 1;
    pub const _BITS_LOCALE_H: u32 = 1;
    pub const __LC_CTYPE: u32 = 0;
    pub const __LC_NUMERIC: u32 = 1;
    pub const __LC_TIME: u32 = 2;
    pub const __LC_COLLATE: u32 = 3;
    pub const __LC_MONETARY: u32 = 4;
    pub const __LC_MESSAGES: u32 = 5;
    pub const __LC_ALL: u32 = 6;
    pub const __LC_PAPER: u32 = 7;
    pub const __LC_NAME: u32 = 8;
    pub const __LC_ADDRESS: u32 = 9;
    pub const __LC_TELEPHONE: u32 = 10;
    pub const __LC_MEASUREMENT: u32 = 11;
    pub const __LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE: u32 = 0;
    pub const LC_NUMERIC: u32 = 1;
    pub const LC_TIME: u32 = 2;
    pub const LC_COLLATE: u32 = 3;
    pub const LC_MONETARY: u32 = 4;
    pub const LC_MESSAGES: u32 = 5;
    pub const LC_ALL: u32 = 6;
    pub const LC_PAPER: u32 = 7;
    pub const LC_NAME: u32 = 8;
    pub const LC_ADDRESS: u32 = 9;
    pub const LC_TELEPHONE: u32 = 10;
    pub const LC_MEASUREMENT: u32 = 11;
    pub const LC_IDENTIFICATION: u32 = 12;
    pub const LC_CTYPE_MASK: u32 = 1;
    pub const LC_NUMERIC_MASK: u32 = 2;
    pub const LC_TIME_MASK: u32 = 4;
    pub const LC_COLLATE_MASK: u32 = 8;
    pub const LC_MONETARY_MASK: u32 = 16;
    pub const LC_MESSAGES_MASK: u32 = 32;
    pub const LC_PAPER_MASK: u32 = 128;
    pub const LC_NAME_MASK: u32 = 256;
    pub const LC_ADDRESS_MASK: u32 = 512;
    pub const LC_TELEPHONE_MASK: u32 = 1024;
    pub const LC_MEASUREMENT_MASK: u32 = 2048;
    pub const LC_IDENTIFICATION_MASK: u32 = 4096;
    pub const LC_ALL_MASK: u32 = 8127;
    pub const _GLIBCXX_CLOCALE: u32 = 1;
    pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
    pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
    pub const _GLIBCXX_IOSFWD: u32 = 1;
    pub const _CTYPE_H: u32 = 1;
    pub const _GLIBCXX_CCTYPE: u32 = 1;
    pub const _OSTREAM_INSERT_H: u32 = 1;
    pub const _CXXABI_FORCED_H: u32 = 1;
    pub const _STL_FUNCTION_H: u32 = 1;
    pub const _BACKWARD_BINDERS_H: u32 = 1;
    pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
    pub const _BASIC_STRING_H: u32 = 1;
    pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
    pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 1;
    pub const __GTHREADS: u32 = 1;
    pub const __GTHREADS_CXX0X: u32 = 1;
    pub const _PTHREAD_H: u32 = 1;
    pub const _SCHED_H: u32 = 1;
    pub const _BITS_SCHED_H: u32 = 1;
    pub const SCHED_OTHER: u32 = 0;
    pub const SCHED_FIFO: u32 = 1;
    pub const SCHED_RR: u32 = 2;
    pub const SCHED_BATCH: u32 = 3;
    pub const SCHED_ISO: u32 = 4;
    pub const SCHED_IDLE: u32 = 5;
    pub const SCHED_DEADLINE: u32 = 6;
    pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
    pub const CSIGNAL: u32 = 255;
    pub const CLONE_VM: u32 = 256;
    pub const CLONE_FS: u32 = 512;
    pub const CLONE_FILES: u32 = 1024;
    pub const CLONE_SIGHAND: u32 = 2048;
    pub const CLONE_PTRACE: u32 = 8192;
    pub const CLONE_VFORK: u32 = 16384;
    pub const CLONE_PARENT: u32 = 32768;
    pub const CLONE_THREAD: u32 = 65536;
    pub const CLONE_NEWNS: u32 = 131072;
    pub const CLONE_SYSVSEM: u32 = 262144;
    pub const CLONE_SETTLS: u32 = 524288;
    pub const CLONE_PARENT_SETTID: u32 = 1048576;
    pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
    pub const CLONE_DETACHED: u32 = 4194304;
    pub const CLONE_UNTRACED: u32 = 8388608;
    pub const CLONE_CHILD_SETTID: u32 = 16777216;
    pub const CLONE_NEWCGROUP: u32 = 33554432;
    pub const CLONE_NEWUTS: u32 = 67108864;
    pub const CLONE_NEWIPC: u32 = 134217728;
    pub const CLONE_NEWUSER: u32 = 268435456;
    pub const CLONE_NEWPID: u32 = 536870912;
    pub const CLONE_NEWNET: u32 = 1073741824;
    pub const CLONE_IO: u32 = 2147483648;
    pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
    pub const _BITS_CPU_SET_H: u32 = 1;
    pub const __CPU_SETSIZE: u32 = 1024;
    pub const CPU_SETSIZE: u32 = 1024;
    pub const _TIME_H: u32 = 1;
    pub const _BITS_TIME_H: u32 = 1;
    pub const CLOCK_REALTIME: u32 = 0;
    pub const CLOCK_MONOTONIC: u32 = 1;
    pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
    pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
    pub const CLOCK_MONOTONIC_RAW: u32 = 4;
    pub const CLOCK_REALTIME_COARSE: u32 = 5;
    pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
    pub const CLOCK_BOOTTIME: u32 = 7;
    pub const CLOCK_REALTIME_ALARM: u32 = 8;
    pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
    pub const CLOCK_TAI: u32 = 11;
    pub const TIMER_ABSTIME: u32 = 1;
    pub const _BITS_TIMEX_H: u32 = 1;
    pub const ADJ_OFFSET: u32 = 1;
    pub const ADJ_FREQUENCY: u32 = 2;
    pub const ADJ_MAXERROR: u32 = 4;
    pub const ADJ_ESTERROR: u32 = 8;
    pub const ADJ_STATUS: u32 = 16;
    pub const ADJ_TIMECONST: u32 = 32;
    pub const ADJ_TAI: u32 = 128;
    pub const ADJ_SETOFFSET: u32 = 256;
    pub const ADJ_MICRO: u32 = 4096;
    pub const ADJ_NANO: u32 = 8192;
    pub const ADJ_TICK: u32 = 16384;
    pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
    pub const ADJ_OFFSET_SS_READ: u32 = 40961;
    pub const MOD_OFFSET: u32 = 1;
    pub const MOD_FREQUENCY: u32 = 2;
    pub const MOD_MAXERROR: u32 = 4;
    pub const MOD_ESTERROR: u32 = 8;
    pub const MOD_STATUS: u32 = 16;
    pub const MOD_TIMECONST: u32 = 32;
    pub const MOD_CLKB: u32 = 16384;
    pub const MOD_CLKA: u32 = 32769;
    pub const MOD_TAI: u32 = 128;
    pub const MOD_MICRO: u32 = 4096;
    pub const MOD_NANO: u32 = 8192;
    pub const STA_PLL: u32 = 1;
    pub const STA_PPSFREQ: u32 = 2;
    pub const STA_PPSTIME: u32 = 4;
    pub const STA_FLL: u32 = 8;
    pub const STA_INS: u32 = 16;
    pub const STA_DEL: u32 = 32;
    pub const STA_UNSYNC: u32 = 64;
    pub const STA_FREQHOLD: u32 = 128;
    pub const STA_PPSSIGNAL: u32 = 256;
    pub const STA_PPSJITTER: u32 = 512;
    pub const STA_PPSWANDER: u32 = 1024;
    pub const STA_PPSERROR: u32 = 2048;
    pub const STA_CLOCKERR: u32 = 4096;
    pub const STA_NANO: u32 = 8192;
    pub const STA_MODE: u32 = 16384;
    pub const STA_CLK: u32 = 32768;
    pub const STA_RONLY: u32 = 65280;
    pub const __struct_tm_defined: u32 = 1;
    pub const __itimerspec_defined: u32 = 1;
    pub const TIME_UTC: u32 = 1;
    pub const _BITS_SETJMP_H: u32 = 1;
    pub const PTHREAD_ONCE_INIT: u32 = 0;
    pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
    pub const __GTHREAD_HAS_COND: u32 = 1;
    pub const __GTHREAD_ONCE_INIT: u32 = 0;
    pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
    pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
    pub const _ALLOC_TRAITS_H: u32 = 1;
    pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
    pub const _STRING_CONVERSIONS_H: u32 = 1;
    pub const _GLIBCXX_CSTDIO: u32 = 1;
    pub const _ERRNO_H: u32 = 1;
    pub const _BITS_ERRNO_H: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EAGAIN: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EDEADLK: u32 = 35;
    pub const ENAMETOOLONG: u32 = 36;
    pub const ENOLCK: u32 = 37;
    pub const ENOSYS: u32 = 38;
    pub const ENOTEMPTY: u32 = 39;
    pub const ELOOP: u32 = 40;
    pub const EWOULDBLOCK: u32 = 11;
    pub const ENOMSG: u32 = 42;
    pub const EIDRM: u32 = 43;
    pub const ECHRNG: u32 = 44;
    pub const EL2NSYNC: u32 = 45;
    pub const EL3HLT: u32 = 46;
    pub const EL3RST: u32 = 47;
    pub const ELNRNG: u32 = 48;
    pub const EUNATCH: u32 = 49;
    pub const ENOCSI: u32 = 50;
    pub const EL2HLT: u32 = 51;
    pub const EBADE: u32 = 52;
    pub const EBADR: u32 = 53;
    pub const EXFULL: u32 = 54;
    pub const ENOANO: u32 = 55;
    pub const EBADRQC: u32 = 56;
    pub const EBADSLT: u32 = 57;
    pub const EDEADLOCK: u32 = 35;
    pub const EBFONT: u32 = 59;
    pub const ENOSTR: u32 = 60;
    pub const ENODATA: u32 = 61;
    pub const ETIME: u32 = 62;
    pub const ENOSR: u32 = 63;
    pub const ENONET: u32 = 64;
    pub const ENOPKG: u32 = 65;
    pub const EREMOTE: u32 = 66;
    pub const ENOLINK: u32 = 67;
    pub const EADV: u32 = 68;
    pub const ESRMNT: u32 = 69;
    pub const ECOMM: u32 = 70;
    pub const EPROTO: u32 = 71;
    pub const EMULTIHOP: u32 = 72;
    pub const EDOTDOT: u32 = 73;
    pub const EBADMSG: u32 = 74;
    pub const EOVERFLOW: u32 = 75;
    pub const ENOTUNIQ: u32 = 76;
    pub const EBADFD: u32 = 77;
    pub const EREMCHG: u32 = 78;
    pub const ELIBACC: u32 = 79;
    pub const ELIBBAD: u32 = 80;
    pub const ELIBSCN: u32 = 81;
    pub const ELIBMAX: u32 = 82;
    pub const ELIBEXEC: u32 = 83;
    pub const EILSEQ: u32 = 84;
    pub const ERESTART: u32 = 85;
    pub const ESTRPIPE: u32 = 86;
    pub const EUSERS: u32 = 87;
    pub const ENOTSOCK: u32 = 88;
    pub const EDESTADDRREQ: u32 = 89;
    pub const EMSGSIZE: u32 = 90;
    pub const EPROTOTYPE: u32 = 91;
    pub const ENOPROTOOPT: u32 = 92;
    pub const EPROTONOSUPPORT: u32 = 93;
    pub const ESOCKTNOSUPPORT: u32 = 94;
    pub const EOPNOTSUPP: u32 = 95;
    pub const EPFNOSUPPORT: u32 = 96;
    pub const EAFNOSUPPORT: u32 = 97;
    pub const EADDRINUSE: u32 = 98;
    pub const EADDRNOTAVAIL: u32 = 99;
    pub const ENETDOWN: u32 = 100;
    pub const ENETUNREACH: u32 = 101;
    pub const ENETRESET: u32 = 102;
    pub const ECONNABORTED: u32 = 103;
    pub const ECONNRESET: u32 = 104;
    pub const ENOBUFS: u32 = 105;
    pub const EISCONN: u32 = 106;
    pub const ENOTCONN: u32 = 107;
    pub const ESHUTDOWN: u32 = 108;
    pub const ETOOMANYREFS: u32 = 109;
    pub const ETIMEDOUT: u32 = 110;
    pub const ECONNREFUSED: u32 = 111;
    pub const EHOSTDOWN: u32 = 112;
    pub const EHOSTUNREACH: u32 = 113;
    pub const EALREADY: u32 = 114;
    pub const EINPROGRESS: u32 = 115;
    pub const ESTALE: u32 = 116;
    pub const EUCLEAN: u32 = 117;
    pub const ENOTNAM: u32 = 118;
    pub const ENAVAIL: u32 = 119;
    pub const EISNAM: u32 = 120;
    pub const EREMOTEIO: u32 = 121;
    pub const EDQUOT: u32 = 122;
    pub const ENOMEDIUM: u32 = 123;
    pub const EMEDIUMTYPE: u32 = 124;
    pub const ECANCELED: u32 = 125;
    pub const ENOKEY: u32 = 126;
    pub const EKEYEXPIRED: u32 = 127;
    pub const EKEYREVOKED: u32 = 128;
    pub const EKEYREJECTED: u32 = 129;
    pub const EOWNERDEAD: u32 = 130;
    pub const ENOTRECOVERABLE: u32 = 131;
    pub const ERFKILL: u32 = 132;
    pub const EHWPOISON: u32 = 133;
    pub const ENOTSUP: u32 = 95;
    pub const __error_t_defined: u32 = 1;
    pub const _GLIBCXX_CERRNO: u32 = 1;
    pub const _FUNCTIONAL_HASH_H: u32 = 1;
    pub const _BASIC_STRING_TCC: u32 = 1;
    pub const _GLIBCXX_VECTOR: u32 = 1;
    pub const _STL_CONSTRUCT_H: u32 = 1;
    pub const _STL_UNINITIALIZED_H: u32 = 1;
    pub const _STL_VECTOR_H: u32 = 1;
    pub const _STL_BVECTOR_H: u32 = 1;
    pub const _VECTOR_TCC: u32 = 1;
    pub const _GLIBCXX_MAP: u32 = 1;
    pub const _STL_TREE_H: u32 = 1;
    pub const _ALIGNED_BUFFER_H: u32 = 1;
    pub const _STL_MAP_H: u32 = 1;
    pub const _GLIBCXX_TUPLE: u32 = 1;
    pub const _GLIBCXX_UTILITY: u32 = 1;
    pub const _STL_RELOPS_H: u32 = 1;
    pub const _GLIBCXX_USE_MAKE_INTEGER_SEQ: u32 = 1;
    pub const _GLIBCXX_ARRAY: u32 = 1;
    pub const _GLIBCXX_STDEXCEPT: u32 = 1;
    pub const _USES_ALLOCATOR_H: u32 = 1;
    pub const _GLIBCXX_INVOKE_H: u32 = 1;
    pub const _STL_MULTIMAP_H: u32 = 1;
    pub const _GLIBCXX_QUEUE: u32 = 1;
    pub const _GLIBCXX_DEQUE: u32 = 1;
    pub const _STL_DEQUE_H: u32 = 1;
    pub const _GLIBCXX_DEQUE_BUF_SIZE: u32 = 512;
    pub const _DEQUE_TCC: u32 = 1;
    pub const _STL_HEAP_H: u32 = 1;
    pub const _STL_QUEUE_H: u32 = 1;
    pub const _GLIBCXX_FSTREAM: u32 = 1;
    pub const _GLIBCXX_ISTREAM: u32 = 1;
    pub const _GLIBCXX_IOS: u32 = 1;
    pub const _IOS_BASE_H: u32 = 1;
    pub const _LOCALE_CLASSES_H: u32 = 1;
    pub const _LOCALE_CLASSES_TCC: u32 = 1;
    pub const _GLIBCXX_SYSTEM_ERROR: u32 = 1;
    pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
    pub const _GLIBXX_STREAMBUF: u32 = 1;
    pub const _STREAMBUF_TCC: u32 = 1;
    pub const _BASIC_IOS_H: u32 = 1;
    pub const _LOCALE_FACETS_H: u32 = 1;
    pub const _WCTYPE_H: u32 = 1;
    pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_CWCTYPE: u32 = 1;
    pub const _STREAMBUF_ITERATOR_H: u32 = 1;
    pub const _GLIBCXX_NUM_FACETS: u32 = 28;
    pub const _GLIBCXX_NUM_CXX11_FACETS: u32 = 16;
    pub const _GLIBCXX_NUM_UNICODE_FACETS: u32 = 2;
    pub const _LOCALE_FACETS_TCC: u32 = 1;
    pub const _BASIC_IOS_TCC: u32 = 1;
    pub const _GLIBCXX_OSTREAM: u32 = 1;
    pub const _OSTREAM_TCC: u32 = 1;
    pub const _ISTREAM_TCC: u32 = 1;
    pub const _CODECVT_H: u32 = 1;
    pub const _GLIBCXX_BASIC_FILE_STDIO_H: u32 = 1;
    pub const _GLIBCXX_CXX_IO_H: u32 = 1;
    pub const _FSTREAM_TCC: u32 = 1;
    pub const _GLIBCXX_SSTREAM: u32 = 1;
    pub const _SSTREAM_TCC: u32 = 1;
    pub const _DIRENT_H: u32 = 1;
    pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
    pub const _BITS_POSIX1_LIM_H: u32 = 1;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_FD_SETSIZE: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX_QLIMIT: u32 = 1;
    pub const _POSIX_HIWAT: u32 = 512;
    pub const _POSIX_UIO_MAXIOV: u32 = 16;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const NR_OPEN: u32 = 1024;
    pub const NGROUPS_MAX: u32 = 65536;
    pub const ARG_MAX: u32 = 131072;
    pub const LINK_MAX: u32 = 127;
    pub const MAX_CANON: u32 = 255;
    pub const MAX_INPUT: u32 = 255;
    pub const NAME_MAX: u32 = 255;
    pub const PATH_MAX: u32 = 4096;
    pub const PIPE_BUF: u32 = 4096;
    pub const XATTR_NAME_MAX: u32 = 255;
    pub const XATTR_SIZE_MAX: u32 = 65536;
    pub const XATTR_LIST_MAX: u32 = 65536;
    pub const RTSIG_MAX: u32 = 32;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const PTHREAD_KEYS_MAX: u32 = 1024;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const AIO_PRIO_DELTA_MAX: u32 = 20;
    pub const PTHREAD_STACK_MIN: u32 = 16384;
    pub const DELAYTIMER_MAX: u32 = 2147483647;
    pub const TTY_NAME_MAX: u32 = 32;
    pub const LOGIN_NAME_MAX: u32 = 256;
    pub const HOST_NAME_MAX: u32 = 64;
    pub const MQ_PRIO_MAX: u32 = 32768;
    pub const SEM_VALUE_MAX: u32 = 2147483647;
    pub const MAXNAMLEN: u32 = 255;
    pub const CHUCK_ARRAY4_DATAKIND: u32 = 1;
    pub const CHUCK_ARRAY8_DATAKIND: u32 = 2;
    pub const CHUCK_ARRAY16_DATAKIND: u32 = 3;
    pub const CHUCK_ARRAY24_DATAKIND: u32 = 4;
    pub const CHUCK_ARRAY32_DATAKIND: u32 = 5;
    pub const CK_DLL_VERSION_MAJOR: u32 = 7;
    pub const CK_DLL_VERSION_MINOR: u32 = 0;
    pub const CK_QUERY_FUNC: &'static [u8; 9usize] = b"ck_query\0";
    pub const CK_DECLVERSION_FUNC: &'static [u8; 11usize] = b"ck_version\0";
    pub const CK_INVALID_OFFSET: u32 = 4294967295;
    pub const _DLFCN_H: u32 = 1;
    pub const RTLD_LAZY: u32 = 1;
    pub const RTLD_NOW: u32 = 2;
    pub const RTLD_BINDING_MASK: u32 = 3;
    pub const RTLD_NOLOAD: u32 = 4;
    pub const RTLD_DEEPBIND: u32 = 8;
    pub const RTLD_GLOBAL: u32 = 256;
    pub const RTLD_LOCAL: u32 = 0;
    pub const RTLD_NODELETE: u32 = 4096;
    pub const LM_ID_BASE: u32 = 0;
    pub const LM_ID_NEWLM: i32 = -1;
    pub const CK_LOG_CRAZY: u32 = 10;
    pub const CK_LOG_FINEST: u32 = 9;
    pub const CK_LOG_FINER: u32 = 8;
    pub const CK_LOG_FINE: u32 = 7;
    pub const CK_LOG_CONFIG: u32 = 6;
    pub const CK_LOG_INFO: u32 = 5;
    pub const CK_LOG_WARNING: u32 = 4;
    pub const CK_LOG_SEVERE: u32 = 3;
    pub const CK_LOG_SYSTEM: u32 = 2;
    pub const CK_LOG_CORE: u32 = 1;
    pub const CK_LOG_NONE: u32 = 0;
    pub const UGEN_OP_PASS: i32 = -1;
    pub const UGEN_OP_STOP: u32 = 0;
    pub const UGEN_OP_TICK: u32 = 1;
    pub const _GLIBCXX_IOSTREAM: u32 = 1;
    pub const _GLIBCXX_LIST: u32 = 1;
    pub const _STL_LIST_H: u32 = 1;
    pub const _ALLOCATED_PTR_H: u32 = 1;
    pub const _LIST_TCC: u32 = 1;
    pub const CK_DEBUG_MEMORY_MGMT: u32 = 0;
    pub const CVM_MEM_STACK_SIZE: u32 = 65536;
    pub const CVM_REG_STACK_SIZE: u32 = 16384;
    pub const _SYS_SOCKET_H: u32 = 1;
    pub const __iovec_defined: u32 = 1;
    pub const PF_UNSPEC: u32 = 0;
    pub const PF_LOCAL: u32 = 1;
    pub const PF_UNIX: u32 = 1;
    pub const PF_FILE: u32 = 1;
    pub const PF_INET: u32 = 2;
    pub const PF_AX25: u32 = 3;
    pub const PF_IPX: u32 = 4;
    pub const PF_APPLETALK: u32 = 5;
    pub const PF_NETROM: u32 = 6;
    pub const PF_BRIDGE: u32 = 7;
    pub const PF_ATMPVC: u32 = 8;
    pub const PF_X25: u32 = 9;
    pub const PF_INET6: u32 = 10;
    pub const PF_ROSE: u32 = 11;
    pub const PF_DECnet: u32 = 12;
    pub const PF_NETBEUI: u32 = 13;
    pub const PF_SECURITY: u32 = 14;
    pub const PF_KEY: u32 = 15;
    pub const PF_NETLINK: u32 = 16;
    pub const PF_ROUTE: u32 = 16;
    pub const PF_PACKET: u32 = 17;
    pub const PF_ASH: u32 = 18;
    pub const PF_ECONET: u32 = 19;
    pub const PF_ATMSVC: u32 = 20;
    pub const PF_RDS: u32 = 21;
    pub const PF_SNA: u32 = 22;
    pub const PF_IRDA: u32 = 23;
    pub const PF_PPPOX: u32 = 24;
    pub const PF_WANPIPE: u32 = 25;
    pub const PF_LLC: u32 = 26;
    pub const PF_IB: u32 = 27;
    pub const PF_MPLS: u32 = 28;
    pub const PF_CAN: u32 = 29;
    pub const PF_TIPC: u32 = 30;
    pub const PF_BLUETOOTH: u32 = 31;
    pub const PF_IUCV: u32 = 32;
    pub const PF_RXRPC: u32 = 33;
    pub const PF_ISDN: u32 = 34;
    pub const PF_PHONET: u32 = 35;
    pub const PF_IEEE802154: u32 = 36;
    pub const PF_CAIF: u32 = 37;
    pub const PF_ALG: u32 = 38;
    pub const PF_NFC: u32 = 39;
    pub const PF_VSOCK: u32 = 40;
    pub const PF_KCM: u32 = 41;
    pub const PF_QIPCRTR: u32 = 42;
    pub const PF_SMC: u32 = 43;
    pub const PF_MAX: u32 = 44;
    pub const AF_UNSPEC: u32 = 0;
    pub const AF_LOCAL: u32 = 1;
    pub const AF_UNIX: u32 = 1;
    pub const AF_FILE: u32 = 1;
    pub const AF_INET: u32 = 2;
    pub const AF_AX25: u32 = 3;
    pub const AF_IPX: u32 = 4;
    pub const AF_APPLETALK: u32 = 5;
    pub const AF_NETROM: u32 = 6;
    pub const AF_BRIDGE: u32 = 7;
    pub const AF_ATMPVC: u32 = 8;
    pub const AF_X25: u32 = 9;
    pub const AF_INET6: u32 = 10;
    pub const AF_ROSE: u32 = 11;
    pub const AF_DECnet: u32 = 12;
    pub const AF_NETBEUI: u32 = 13;
    pub const AF_SECURITY: u32 = 14;
    pub const AF_KEY: u32 = 15;
    pub const AF_NETLINK: u32 = 16;
    pub const AF_ROUTE: u32 = 16;
    pub const AF_PACKET: u32 = 17;
    pub const AF_ASH: u32 = 18;
    pub const AF_ECONET: u32 = 19;
    pub const AF_ATMSVC: u32 = 20;
    pub const AF_RDS: u32 = 21;
    pub const AF_SNA: u32 = 22;
    pub const AF_IRDA: u32 = 23;
    pub const AF_PPPOX: u32 = 24;
    pub const AF_WANPIPE: u32 = 25;
    pub const AF_LLC: u32 = 26;
    pub const AF_IB: u32 = 27;
    pub const AF_MPLS: u32 = 28;
    pub const AF_CAN: u32 = 29;
    pub const AF_TIPC: u32 = 30;
    pub const AF_BLUETOOTH: u32 = 31;
    pub const AF_IUCV: u32 = 32;
    pub const AF_RXRPC: u32 = 33;
    pub const AF_ISDN: u32 = 34;
    pub const AF_PHONET: u32 = 35;
    pub const AF_IEEE802154: u32 = 36;
    pub const AF_CAIF: u32 = 37;
    pub const AF_ALG: u32 = 38;
    pub const AF_NFC: u32 = 39;
    pub const AF_VSOCK: u32 = 40;
    pub const AF_KCM: u32 = 41;
    pub const AF_QIPCRTR: u32 = 42;
    pub const AF_SMC: u32 = 43;
    pub const AF_MAX: u32 = 44;
    pub const SOL_RAW: u32 = 255;
    pub const SOL_DECNET: u32 = 261;
    pub const SOL_X25: u32 = 262;
    pub const SOL_PACKET: u32 = 263;
    pub const SOL_ATM: u32 = 264;
    pub const SOL_AAL: u32 = 265;
    pub const SOL_IRDA: u32 = 266;
    pub const SOL_NETBEUI: u32 = 267;
    pub const SOL_LLC: u32 = 268;
    pub const SOL_DCCP: u32 = 269;
    pub const SOL_NETLINK: u32 = 270;
    pub const SOL_TIPC: u32 = 271;
    pub const SOL_RXRPC: u32 = 272;
    pub const SOL_PPPOL2TP: u32 = 273;
    pub const SOL_BLUETOOTH: u32 = 274;
    pub const SOL_PNPIPE: u32 = 275;
    pub const SOL_RDS: u32 = 276;
    pub const SOL_IUCV: u32 = 277;
    pub const SOL_CAIF: u32 = 278;
    pub const SOL_ALG: u32 = 279;
    pub const SOL_NFC: u32 = 280;
    pub const SOL_KCM: u32 = 281;
    pub const SOL_TLS: u32 = 282;
    pub const SOMAXCONN: u32 = 128;
    pub const _BITS_SOCKADDR_H: u32 = 1;
    pub const _SS_SIZE: u32 = 128;
    pub const FIOSETOWN: u32 = 35073;
    pub const SIOCSPGRP: u32 = 35074;
    pub const FIOGETOWN: u32 = 35075;
    pub const SIOCGPGRP: u32 = 35076;
    pub const SIOCATMARK: u32 = 35077;
    pub const SIOCGSTAMP: u32 = 35078;
    pub const SIOCGSTAMPNS: u32 = 35079;
    pub const SOL_SOCKET: u32 = 1;
    pub const SO_DEBUG: u32 = 1;
    pub const SO_REUSEADDR: u32 = 2;
    pub const SO_TYPE: u32 = 3;
    pub const SO_ERROR: u32 = 4;
    pub const SO_DONTROUTE: u32 = 5;
    pub const SO_BROADCAST: u32 = 6;
    pub const SO_SNDBUF: u32 = 7;
    pub const SO_RCVBUF: u32 = 8;
    pub const SO_SNDBUFFORCE: u32 = 32;
    pub const SO_RCVBUFFORCE: u32 = 33;
    pub const SO_KEEPALIVE: u32 = 9;
    pub const SO_OOBINLINE: u32 = 10;
    pub const SO_NO_CHECK: u32 = 11;
    pub const SO_PRIORITY: u32 = 12;
    pub const SO_LINGER: u32 = 13;
    pub const SO_BSDCOMPAT: u32 = 14;
    pub const SO_REUSEPORT: u32 = 15;
    pub const SO_PASSCRED: u32 = 16;
    pub const SO_PEERCRED: u32 = 17;
    pub const SO_RCVLOWAT: u32 = 18;
    pub const SO_SNDLOWAT: u32 = 19;
    pub const SO_RCVTIMEO: u32 = 20;
    pub const SO_SNDTIMEO: u32 = 21;
    pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
    pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
    pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
    pub const SO_BINDTODEVICE: u32 = 25;
    pub const SO_ATTACH_FILTER: u32 = 26;
    pub const SO_DETACH_FILTER: u32 = 27;
    pub const SO_GET_FILTER: u32 = 26;
    pub const SO_PEERNAME: u32 = 28;
    pub const SO_TIMESTAMP: u32 = 29;
    pub const SCM_TIMESTAMP: u32 = 29;
    pub const SO_ACCEPTCONN: u32 = 30;
    pub const SO_PEERSEC: u32 = 31;
    pub const SO_PASSSEC: u32 = 34;
    pub const SO_TIMESTAMPNS: u32 = 35;
    pub const SCM_TIMESTAMPNS: u32 = 35;
    pub const SO_MARK: u32 = 36;
    pub const SO_TIMESTAMPING: u32 = 37;
    pub const SCM_TIMESTAMPING: u32 = 37;
    pub const SO_PROTOCOL: u32 = 38;
    pub const SO_DOMAIN: u32 = 39;
    pub const SO_RXQ_OVFL: u32 = 40;
    pub const SO_WIFI_STATUS: u32 = 41;
    pub const SCM_WIFI_STATUS: u32 = 41;
    pub const SO_PEEK_OFF: u32 = 42;
    pub const SO_NOFCS: u32 = 43;
    pub const SO_LOCK_FILTER: u32 = 44;
    pub const SO_SELECT_ERR_QUEUE: u32 = 45;
    pub const SO_BUSY_POLL: u32 = 46;
    pub const SO_MAX_PACING_RATE: u32 = 47;
    pub const SO_BPF_EXTENSIONS: u32 = 48;
    pub const SO_INCOMING_CPU: u32 = 49;
    pub const SO_ATTACH_BPF: u32 = 50;
    pub const SO_DETACH_BPF: u32 = 27;
    pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
    pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
    pub const SO_CNX_ADVICE: u32 = 53;
    pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
    pub const SO_MEMINFO: u32 = 55;
    pub const SO_INCOMING_NAPI_ID: u32 = 56;
    pub const SO_COOKIE: u32 = 57;
    pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
    pub const SO_PEERGROUPS: u32 = 59;
    pub const SO_ZEROCOPY: u32 = 60;
    pub const __osockaddr_defined: u32 = 1;
    pub const _NETINET_IN_H: u32 = 1;
    pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
    pub const IP_OPTIONS: u32 = 4;
    pub const IP_HDRINCL: u32 = 3;
    pub const IP_TOS: u32 = 1;
    pub const IP_TTL: u32 = 2;
    pub const IP_RECVOPTS: u32 = 6;
    pub const IP_RETOPTS: u32 = 7;
    pub const IP_MULTICAST_IF: u32 = 32;
    pub const IP_MULTICAST_TTL: u32 = 33;
    pub const IP_MULTICAST_LOOP: u32 = 34;
    pub const IP_ADD_MEMBERSHIP: u32 = 35;
    pub const IP_DROP_MEMBERSHIP: u32 = 36;
    pub const IP_UNBLOCK_SOURCE: u32 = 37;
    pub const IP_BLOCK_SOURCE: u32 = 38;
    pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
    pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
    pub const IP_MSFILTER: u32 = 41;
    pub const MCAST_JOIN_GROUP: u32 = 42;
    pub const MCAST_BLOCK_SOURCE: u32 = 43;
    pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
    pub const MCAST_LEAVE_GROUP: u32 = 45;
    pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
    pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
    pub const MCAST_MSFILTER: u32 = 48;
    pub const IP_MULTICAST_ALL: u32 = 49;
    pub const IP_UNICAST_IF: u32 = 50;
    pub const MCAST_EXCLUDE: u32 = 0;
    pub const MCAST_INCLUDE: u32 = 1;
    pub const IP_ROUTER_ALERT: u32 = 5;
    pub const IP_PKTINFO: u32 = 8;
    pub const IP_PKTOPTIONS: u32 = 9;
    pub const IP_PMTUDISC: u32 = 10;
    pub const IP_MTU_DISCOVER: u32 = 10;
    pub const IP_RECVERR: u32 = 11;
    pub const IP_RECVTTL: u32 = 12;
    pub const IP_RECVTOS: u32 = 13;
    pub const IP_MTU: u32 = 14;
    pub const IP_FREEBIND: u32 = 15;
    pub const IP_IPSEC_POLICY: u32 = 16;
    pub const IP_XFRM_POLICY: u32 = 17;
    pub const IP_PASSSEC: u32 = 18;
    pub const IP_TRANSPARENT: u32 = 19;
    pub const IP_ORIGDSTADDR: u32 = 20;
    pub const IP_RECVORIGDSTADDR: u32 = 20;
    pub const IP_MINTTL: u32 = 21;
    pub const IP_NODEFRAG: u32 = 22;
    pub const IP_CHECKSUM: u32 = 23;
    pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
    pub const IP_RECVFRAGSIZE: u32 = 25;
    pub const IP_PMTUDISC_DONT: u32 = 0;
    pub const IP_PMTUDISC_WANT: u32 = 1;
    pub const IP_PMTUDISC_DO: u32 = 2;
    pub const IP_PMTUDISC_PROBE: u32 = 3;
    pub const IP_PMTUDISC_INTERFACE: u32 = 4;
    pub const IP_PMTUDISC_OMIT: u32 = 5;
    pub const SOL_IP: u32 = 0;
    pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
    pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
    pub const IP_MAX_MEMBERSHIPS: u32 = 20;
    pub const IPV6_ADDRFORM: u32 = 1;
    pub const IPV6_2292PKTINFO: u32 = 2;
    pub const IPV6_2292HOPOPTS: u32 = 3;
    pub const IPV6_2292DSTOPTS: u32 = 4;
    pub const IPV6_2292RTHDR: u32 = 5;
    pub const IPV6_2292PKTOPTIONS: u32 = 6;
    pub const IPV6_CHECKSUM: u32 = 7;
    pub const IPV6_2292HOPLIMIT: u32 = 8;
    pub const IPV6_NEXTHOP: u32 = 9;
    pub const IPV6_AUTHHDR: u32 = 10;
    pub const IPV6_UNICAST_HOPS: u32 = 16;
    pub const IPV6_MULTICAST_IF: u32 = 17;
    pub const IPV6_MULTICAST_HOPS: u32 = 18;
    pub const IPV6_MULTICAST_LOOP: u32 = 19;
    pub const IPV6_JOIN_GROUP: u32 = 20;
    pub const IPV6_LEAVE_GROUP: u32 = 21;
    pub const IPV6_ROUTER_ALERT: u32 = 22;
    pub const IPV6_MTU_DISCOVER: u32 = 23;
    pub const IPV6_MTU: u32 = 24;
    pub const IPV6_RECVERR: u32 = 25;
    pub const IPV6_V6ONLY: u32 = 26;
    pub const IPV6_JOIN_ANYCAST: u32 = 27;
    pub const IPV6_LEAVE_ANYCAST: u32 = 28;
    pub const IPV6_IPSEC_POLICY: u32 = 34;
    pub const IPV6_XFRM_POLICY: u32 = 35;
    pub const IPV6_HDRINCL: u32 = 36;
    pub const IPV6_RECVPKTINFO: u32 = 49;
    pub const IPV6_PKTINFO: u32 = 50;
    pub const IPV6_RECVHOPLIMIT: u32 = 51;
    pub const IPV6_HOPLIMIT: u32 = 52;
    pub const IPV6_RECVHOPOPTS: u32 = 53;
    pub const IPV6_HOPOPTS: u32 = 54;
    pub const IPV6_RTHDRDSTOPTS: u32 = 55;
    pub const IPV6_RECVRTHDR: u32 = 56;
    pub const IPV6_RTHDR: u32 = 57;
    pub const IPV6_RECVDSTOPTS: u32 = 58;
    pub const IPV6_DSTOPTS: u32 = 59;
    pub const IPV6_RECVPATHMTU: u32 = 60;
    pub const IPV6_PATHMTU: u32 = 61;
    pub const IPV6_DONTFRAG: u32 = 62;
    pub const IPV6_RECVTCLASS: u32 = 66;
    pub const IPV6_TCLASS: u32 = 67;
    pub const IPV6_AUTOFLOWLABEL: u32 = 70;
    pub const IPV6_ADDR_PREFERENCES: u32 = 72;
    pub const IPV6_MINHOPCOUNT: u32 = 73;
    pub const IPV6_ORIGDSTADDR: u32 = 74;
    pub const IPV6_RECVORIGDSTADDR: u32 = 74;
    pub const IPV6_TRANSPARENT: u32 = 75;
    pub const IPV6_UNICAST_IF: u32 = 76;
    pub const IPV6_RECVFRAGSIZE: u32 = 77;
    pub const IPV6_FREEBIND: u32 = 78;
    pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
    pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
    pub const IPV6_RXHOPOPTS: u32 = 54;
    pub const IPV6_RXDSTOPTS: u32 = 59;
    pub const IPV6_PMTUDISC_DONT: u32 = 0;
    pub const IPV6_PMTUDISC_WANT: u32 = 1;
    pub const IPV6_PMTUDISC_DO: u32 = 2;
    pub const IPV6_PMTUDISC_PROBE: u32 = 3;
    pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
    pub const IPV6_PMTUDISC_OMIT: u32 = 5;
    pub const SOL_IPV6: u32 = 41;
    pub const SOL_ICMPV6: u32 = 58;
    pub const IPV6_RTHDR_LOOSE: u32 = 0;
    pub const IPV6_RTHDR_STRICT: u32 = 1;
    pub const IPV6_RTHDR_TYPE_0: u32 = 0;
    pub const IN_CLASSA_NET: u32 = 4278190080;
    pub const IN_CLASSA_NSHIFT: u32 = 24;
    pub const IN_CLASSA_HOST: u32 = 16777215;
    pub const IN_CLASSA_MAX: u32 = 128;
    pub const IN_CLASSB_NET: u32 = 4294901760;
    pub const IN_CLASSB_NSHIFT: u32 = 16;
    pub const IN_CLASSB_HOST: u32 = 65535;
    pub const IN_CLASSB_MAX: u32 = 65536;
    pub const IN_CLASSC_NET: u32 = 4294967040;
    pub const IN_CLASSC_NSHIFT: u32 = 8;
    pub const IN_CLASSC_HOST: u32 = 255;
    pub const IN_LOOPBACKNET: u32 = 127;
    pub const INET_ADDRSTRLEN: u32 = 16;
    pub const INET6_ADDRSTRLEN: u32 = 46;
    pub const NET_HEADER: u32 = 2358036680;
    pub const NET_BUFFER_SIZE: u32 = 512;
    pub const NET_ERROR: u32 = 4294967295;
    pub const _GLIBCXX_MATH_H: u32 = 1;
    pub const _MATH_H: u32 = 1;
    pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
    pub const __FP_LOGB0_IS_MIN: u32 = 1;
    pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
    pub const FP_ILOGB0: i32 = -2147483648;
    pub const FP_ILOGBNAN: i32 = -2147483648;
    pub const __FP_LONG_MAX: u64 = 9223372036854775807;
    pub const FP_LLOGB0: i64 = -9223372036854775808;
    pub const FP_LLOGBNAN: i64 = -9223372036854775808;
    pub const FP_INT_UPWARD: u32 = 0;
    pub const FP_INT_DOWNWARD: u32 = 1;
    pub const FP_INT_TOWARDZERO: u32 = 2;
    pub const FP_INT_TONEARESTFROMZERO: u32 = 3;
    pub const FP_INT_TONEAREST: u32 = 4;
    pub const __MATH_DECLARING_DOUBLE: u32 = 1;
    pub const __MATH_DECLARING_FLOATN: u32 = 0;
    pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
    pub const FP_NAN: u32 = 0;
    pub const FP_INFINITE: u32 = 1;
    pub const FP_ZERO: u32 = 2;
    pub const FP_SUBNORMAL: u32 = 3;
    pub const FP_NORMAL: u32 = 4;
    pub const MATH_ERRNO: u32 = 1;
    pub const MATH_ERREXCEPT: u32 = 2;
    pub const math_errhandling: u32 = 3;
    pub const M_E: f64 = 2.718281828459045;
    pub const M_LOG2E: f64 = 1.4426950408889634;
    pub const M_LOG10E: f64 = 0.4342944819032518;
    pub const M_LN2: f64 = 0.6931471805599453;
    pub const M_LN10: f64 = 2.302585092994046;
    pub const M_PI: f64 = 3.141592653589793;
    pub const M_PI_2: f64 = 1.5707963267948966;
    pub const M_PI_4: f64 = 0.7853981633974483;
    pub const M_1_PI: f64 = 0.3183098861837907;
    pub const M_2_PI: f64 = 0.6366197723675814;
    pub const M_2_SQRTPI: f64 = 1.1283791670955126;
    pub const M_SQRT2: f64 = 1.4142135623730951;
    pub const M_SQRT1_2: f64 = 0.7071067811865476;
    pub const M_El: f64 = 2.718281828459045;
    pub const M_LOG2El: f64 = 1.4426950408889634;
    pub const M_LOG10El: f64 = 0.4342944819032518;
    pub const M_LN2l: f64 = 0.6931471805599453;
    pub const M_LN10l: f64 = 2.302585092994046;
    pub const M_PIl: f64 = 3.141592653589793;
    pub const M_PI_2l: f64 = 1.5707963267948966;
    pub const M_PI_4l: f64 = 0.7853981633974483;
    pub const M_1_PIl: f64 = 0.3183098861837907;
    pub const M_2_PIl: f64 = 0.6366197723675814;
    pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
    pub const M_SQRT2l: f64 = 1.4142135623730951;
    pub const M_SQRT1_2l: f64 = 0.7071067811865476;
    pub const _GLIBCXX_CMATH: u32 = 1;
    pub const CK_MAX_HID_DEVICES: u32 = 1024;
    pub const MIDI_NOTEON: u32 = 144;
    pub const MIDI_NOTEOFF: u32 = 128;
    pub const MIDI_POLYPRESS: u32 = 160;
    pub const MIDI_CTRLCHANGE: u32 = 176;
    pub const MIDI_PROGCHANGE: u32 = 192;
    pub const MIDI_CHANPRESS: u32 = 208;
    pub const MIDI_PITCHBEND: u32 = 224;
    pub const MIDI_ALLNOTESOFF: u32 = 123;
    pub const CHUCK_PARAM_SAMPLE_RATE: &'static [u8; 12usize] = b"SAMPLE_RATE\0";
    pub const CHUCK_PARAM_INPUT_CHANNELS: &'static [u8; 15usize] = b"INPUT_CHANNELS\0";
    pub const CHUCK_PARAM_OUTPUT_CHANNELS: &'static [u8; 16usize] = b"OUTPUT_CHANNELS\0";
    pub const CHUCK_PARAM_VM_ADAPTIVE: &'static [u8; 12usize] = b"VM_ADAPTIVE\0";
    pub const CHUCK_PARAM_VM_HALT: &'static [u8; 8usize] = b"VM_HALT\0";
    pub const CHUCK_PARAM_OTF_ENABLE: &'static [u8; 11usize] = b"OTF_ENABLE\0";
    pub const CHUCK_PARAM_OTF_PORT: &'static [u8; 9usize] = b"OTF_PORT\0";
    pub const CHUCK_PARAM_DUMP_INSTRUCTIONS: &'static [u8; 18usize] = b"DUMP_INSTRUCTIONS\0";
    pub const CHUCK_PARAM_AUTO_DEPEND: &'static [u8; 12usize] = b"AUTO_DEPEND\0";
    pub const CHUCK_PARAM_DEPRECATE_LEVEL: &'static [u8; 16usize] = b"DEPRECATE_LEVEL\0";
    pub const CHUCK_PARAM_WORKING_DIRECTORY: &'static [u8; 18usize] = b"WORKING_DIRECTORY\0";
    pub const CHUCK_PARAM_CHUGIN_ENABLE: &'static [u8; 14usize] = b"CHUGIN_ENABLE\0";
    pub const CHUCK_PARAM_CHUGIN_DIRECTORY: &'static [u8; 17usize] = b"CHUGIN_DIRECTORY\0";
    pub const CHUCK_PARAM_USER_CHUGINS: &'static [u8; 13usize] = b"USER_CHUGINS\0";
    pub const CHUCK_PARAM_USER_CHUGIN_DIRECTORIES: &'static [u8; 24usize] =
        b"USER_CHUGIN_DIRECTORIES\0";
    pub const CHUCK_PARAM_HINT_IS_REALTIME_AUDIO: &'static [u8; 23usize] =
        b"HINT_IS_REALTIME_AUDIO\0";
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const libc::c_void;
        pub mod __cxx11 {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type string = root::std::__cxx11::basic_string<libc::c_char>;
            pub type wstring = root::std::__cxx11::basic_string<u32>;
            pub type u16string = root::std::__cxx11::basic_string<u16>;
            pub type u32string = root::std::__cxx11::basic_string<u32>;
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct time_get {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct time_get_byname {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct money_get {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct money_put {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct messages {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct messages_byname {
                pub _address: u8,
            }
            #[repr(C)]
            pub struct basic_string<T> {
                pub _M_dataplus: root::std::__cxx11::basic_string__Alloc_hider,
                pub _M_string_length: root::std::__cxx11::basic_string_size_type,
                pub __bindgen_anon_1: root::std::__cxx11::basic_string__bindgen_ty_2<T>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type basic_string__Char_alloc_type = [u8; 0usize];
            pub type basic_string__Alloc_traits = root::__gnu_cxx::__alloc_traits;
            pub type basic_string_traits_type<_Traits> = _Traits;
            pub type basic_string_value_type = [u8; 0usize];
            pub type basic_string_allocator_type =
                root::std::__cxx11::basic_string__Char_alloc_type;
            pub type basic_string_size_type = [u8; 0usize];
            pub type basic_string_difference_type = [u8; 0usize];
            pub type basic_string_reference = [u8; 0usize];
            pub type basic_string_const_reference = [u8; 0usize];
            pub type basic_string_pointer = [u8; 0usize];
            pub type basic_string_const_pointer = [u8; 0usize];
            pub type basic_string_iterator =
                root::__gnu_cxx::__normal_iterator<root::std::__cxx11::basic_string_pointer>;
            pub type basic_string_const_iterator =
                root::__gnu_cxx::__normal_iterator<root::std::__cxx11::basic_string_const_pointer>;
            pub type basic_string_const_reverse_iterator =
                root::std::reverse_iterator<root::std::__cxx11::basic_string_const_iterator>;
            pub type basic_string_reverse_iterator =
                root::std::reverse_iterator<root::std::__cxx11::basic_string_iterator>;
            pub type basic_string___const_iterator =
                root::std::__cxx11::basic_string_const_iterator;
            #[repr(C)]
            pub struct basic_string__Alloc_hider {
                pub _M_p: root::std::__cxx11::basic_string_pointer,
            }
            impl Default for basic_string__Alloc_hider {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl ::std::fmt::Debug for basic_string__Alloc_hider {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "basic_string__Alloc_hider {{  }}")
                }
            }
            impl ::std::cmp::PartialEq for basic_string__Alloc_hider {
                fn eq(&self, other: &basic_string__Alloc_hider) -> bool {
                    self._M_p == other._M_p
                }
            }
            pub const basic_string__S_local_capacity:
                root::std::__cxx11::basic_string__bindgen_ty_1 =
                basic_string__bindgen_ty_1::_S_local_capacity;
            #[repr(i32)]
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
            pub enum basic_string__bindgen_ty_1 {
                _S_local_capacity = 0,
            }
            #[repr(C)]
            pub struct basic_string__bindgen_ty_2<T> {
                pub _M_local_buf: root::__BindgenUnionField<*mut T>,
                pub _M_allocated_capacity:
                    root::__BindgenUnionField<root::std::__cxx11::basic_string_size_type>,
                pub bindgen_union_field: u64,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            impl<T> Default for basic_string__bindgen_ty_2<T> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl<T> ::std::fmt::Debug for basic_string__bindgen_ty_2<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "basic_string__bindgen_ty_2 {{ union }}")
                }
            }
            impl<T> Default for basic_string<T> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl<T> ::std::fmt::Debug for basic_string<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_string {{ _M_dataplus: {:?}, __bindgen_anon_1: {:?} }}",
                        self._M_dataplus, self.__bindgen_anon_1
                    )
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi"]
                pub fn stoi(
                    __str: *const root::std::__cxx11::string,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_int;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi"]
                pub fn stol(
                    __str: *const root::std::__cxx11::string,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi"]
                pub fn stoul(
                    __str: *const root::std::__cxx11::string,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_ulong;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi"]
                pub fn stoll(
                    __str: *const root::std::__cxx11::string,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_longlong;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx116stoullERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi"]
                pub fn stoull(
                    __str: *const root::std::__cxx11::string,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_ulonglong;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm"]
                pub fn stof(__str: *const root::std::__cxx11::string, __idx: *mut usize) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm"]
                pub fn stod(__str: *const root::std::__cxx11::string, __idx: *mut usize) -> f64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx115stoldERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm"]
                pub fn stold(__str: *const root::std::__cxx11::string, __idx: *mut usize) -> u128;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEi"]
                pub fn to_string(__val: libc::c_int) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEj"]
                pub fn to_string1(__val: libc::c_uint) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEl"]
                pub fn to_string2(__val: libc::c_long) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEm"]
                pub fn to_string3(__val: libc::c_ulong) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEx"]
                pub fn to_string4(__val: libc::c_longlong) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEy"]
                pub fn to_string5(__val: libc::c_ulonglong) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEf"]
                pub fn to_string6(__val: f32) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEd"]
                pub fn to_string7(__val: f64) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx119to_stringEe"]
                pub fn to_string8(__val: u128) -> root::std::__cxx11::string;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx114stoiERKNS_12basic_stringIwSt11char_traitsIwESaIwEEEPmi"]
                pub fn stoi1(
                    __str: *const root::std::__cxx11::wstring,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_int;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx114stolERKNS_12basic_stringIwSt11char_traitsIwESaIwEEEPmi"]
                pub fn stol1(
                    __str: *const root::std::__cxx11::wstring,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx115stoulERKNS_12basic_stringIwSt11char_traitsIwESaIwEEEPmi"]
                pub fn stoul1(
                    __str: *const root::std::__cxx11::wstring,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_ulong;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx115stollERKNS_12basic_stringIwSt11char_traitsIwESaIwEEEPmi"]
                pub fn stoll1(
                    __str: *const root::std::__cxx11::wstring,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_longlong;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx116stoullERKNS_12basic_stringIwSt11char_traitsIwESaIwEEEPmi"]
                pub fn stoull1(
                    __str: *const root::std::__cxx11::wstring,
                    __idx: *mut usize,
                    __base: libc::c_int,
                ) -> libc::c_ulonglong;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx114stofERKNS_12basic_stringIwSt11char_traitsIwESaIwEEEPm"]
                pub fn stof1(__str: *const root::std::__cxx11::wstring, __idx: *mut usize) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx114stodERKNS_12basic_stringIwSt11char_traitsIwESaIwEEEPm"]
                pub fn stod1(__str: *const root::std::__cxx11::wstring, __idx: *mut usize) -> f64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx115stoldERKNS_12basic_stringIwSt11char_traitsIwESaIwEEEPm"]
                pub fn stold1(__str: *const root::std::__cxx11::wstring, __idx: *mut usize)
                    -> u128;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEi"]
                pub fn to_wstring(__val: libc::c_int) -> root::std::__cxx11::wstring;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEj"]
                pub fn to_wstring1(__val: libc::c_uint) -> root::std::__cxx11::wstring;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEl"]
                pub fn to_wstring2(__val: libc::c_long) -> root::std::__cxx11::wstring;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEm"]
                pub fn to_wstring3(__val: libc::c_ulong) -> root::std::__cxx11::wstring;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEx"]
                pub fn to_wstring4(__val: libc::c_longlong) -> root::std::__cxx11::wstring;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEy"]
                pub fn to_wstring5(__val: libc::c_ulonglong) -> root::std::__cxx11::wstring;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEf"]
                pub fn to_wstring6(__val: f32) -> root::std::__cxx11::wstring;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEd"]
                pub fn to_wstring7(__val: f64) -> root::std::__cxx11::wstring;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt7__cxx1110to_wstringEe"]
                pub fn to_wstring8(__val: u128) -> root::std::__cxx11::wstring;
            }

            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct collate {
                pub _base: root::std::locale_facet,
                pub _M_c_locale_collate: root::std::__c_locale,
            }
            pub type collate_char_type<T> = T;
            impl Default for collate {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct collate_byname {
                pub _base: root::std::__cxx11::collate,
            }
            pub type collate_byname_char_type<T> = T;
            impl Default for collate_byname {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct numpunct<T> {
                pub _base: root::std::locale_facet,
                pub _M_data: *mut root::std::__cxx11::numpunct___cache_type<T>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type numpunct_char_type<T> = T;
            pub type numpunct___cache_type<T> = root::std::__numpunct_cache<T>;
            impl<T> Default for numpunct<T> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            extern "C" {
                pub static mut id: root::std::locale_id;
            }
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct numpunct_byname<T> {
                pub _base: root::std::__cxx11::numpunct<T>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type numpunct_byname_char_type<T> = T;
            impl<T> Default for numpunct_byname<T> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            pub struct basic_stringbuf<T> {
                pub _base: root::std::basic_streambuf<T>,
                pub _M_mode: root::std::ios_base_openmode,
                pub _M_string: root::std::__cxx11::basic_stringbuf___string_type<T>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type basic_stringbuf_char_type<T> = T;
            pub type basic_stringbuf_traits_type<_Traits> = _Traits;
            pub type basic_stringbuf_allocator_type<_Alloc> = _Alloc;
            pub type basic_stringbuf_int_type = [u8; 0usize];
            pub type basic_stringbuf_pos_type = [u8; 0usize];
            pub type basic_stringbuf_off_type = [u8; 0usize];
            pub type basic_stringbuf___streambuf_type<T> =
                root::std::basic_streambuf<root::std::__cxx11::basic_stringbuf_char_type<T>>;
            pub type basic_stringbuf___string_type<T> =
                root::std::__cxx11::basic_string<root::std::__cxx11::basic_stringbuf_char_type<T>>;
            pub type basic_stringbuf___size_type<T> =
                root::std::__cxx11::basic_stringbuf___string_type<T>;
            #[repr(C)]
            pub struct basic_stringbuf___xfer_bufptrs<T> {
                pub _M_to: *mut root::std::__cxx11::basic_stringbuf<T>,
                pub _M_goff: [root::std::__cxx11::basic_stringbuf_off_type; 3usize],
                pub _M_poff: [root::std::__cxx11::basic_stringbuf_off_type; 3usize],
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            impl<T> Default for basic_stringbuf___xfer_bufptrs<T> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl<T> ::std::fmt::Debug for basic_stringbuf___xfer_bufptrs<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write ! ( f , "basic_stringbuf___xfer_bufptrs {{ _M_to: {:?}, _M_goff: {:?}, _M_poff: {:?} }}" , self . _M_to , self . _M_goff , self . _M_poff )
                }
            }
            impl<T> Default for basic_stringbuf<T> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl<T> ::std::fmt::Debug for basic_stringbuf<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_stringbuf {{ _M_mode: {:?}, _M_string: {:?} }}",
                        self._M_mode, self._M_string
                    )
                }
            }
            #[repr(C)]
            pub struct basic_istringstream<T> {
                pub _base: root::std::basic_istream<T>,
                pub _M_stringbuf: root::std::__cxx11::basic_istringstream___stringbuf_type<T>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type basic_istringstream_char_type<T> = T;
            pub type basic_istringstream_traits_type<_Traits> = _Traits;
            pub type basic_istringstream_allocator_type<_Alloc> = _Alloc;
            pub type basic_istringstream_int_type = [u8; 0usize];
            pub type basic_istringstream_pos_type = [u8; 0usize];
            pub type basic_istringstream_off_type = [u8; 0usize];
            pub type basic_istringstream___string_type<T> = root::std::__cxx11::basic_string<T>;
            pub type basic_istringstream___stringbuf_type<T> =
                root::std::__cxx11::basic_stringbuf<T>;
            pub type basic_istringstream___istream_type<T> =
                root::std::basic_istream<root::std::__cxx11::basic_istringstream_char_type<T>>;
            impl<T> Default for basic_istringstream<T> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl<T> ::std::fmt::Debug for basic_istringstream<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_istringstream {{ _M_stringbuf: {:?} }}",
                        self._M_stringbuf
                    )
                }
            }
            #[repr(C)]
            pub struct basic_ostringstream<T> {
                pub _base: root::std::basic_ostream<T>,
                pub _M_stringbuf: root::std::__cxx11::basic_ostringstream___stringbuf_type<T>,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
            }
            pub type basic_ostringstream_char_type<T> = T;
            pub type basic_ostringstream_traits_type<_Traits> = _Traits;
            pub type basic_ostringstream_allocator_type<_Alloc> = _Alloc;
            pub type basic_ostringstream_int_type = [u8; 0usize];
            pub type basic_ostringstream_pos_type = [u8; 0usize];
            pub type basic_ostringstream_off_type = [u8; 0usize];
            pub type basic_ostringstream___string_type<T> = root::std::__cxx11::basic_string<T>;
            pub type basic_ostringstream___stringbuf_type<T> =
                root::std::__cxx11::basic_stringbuf<T>;
            pub type basic_ostringstream___ostream_type<T> =
                root::std::basic_ostream<root::std::__cxx11::basic_ostringstream_char_type<T>>;
            impl<T> Default for basic_ostringstream<T> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl<T> ::std::fmt::Debug for basic_ostringstream<T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(
                        f,
                        "basic_ostringstream {{ _M_stringbuf: {:?} }}",
                        self._M_stringbuf
                    )
                }
            }
            #[repr(C)]
            pub struct _List_base {
                pub _M_impl: root::std::__cxx11::_List_base__List_impl,
            }
            pub type _List_base__Tp_alloc_type = [u8; 0usize];
            pub type _List_base__Tp_alloc_traits = root::__gnu_cxx::__alloc_traits;
            pub type _List_base__Node_alloc_type = [u8; 0usize];
            pub type _List_base__Node_alloc_traits = root::__gnu_cxx::__alloc_traits;
            #[repr(C)]
            pub struct _List_base__List_impl {
                pub _M_node: root::std::__detail::_List_node_header,
            }
            impl Default for _List_base__List_impl {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl ::std::fmt::Debug for _List_base__List_impl {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "_List_base__List_impl {{ _M_node: {:?} }}", self._M_node)
                }
            }
            impl ::std::cmp::PartialEq for _List_base__List_impl {
                fn eq(&self, other: &_List_base__List_impl) -> bool {
                    self._M_node == other._M_node
                }
            }
            pub type _List_base_allocator_type<_Alloc> = _Alloc;
            impl Default for _List_base {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl ::std::fmt::Debug for _List_base {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "_List_base {{ _M_impl: {:?} }}", self._M_impl)
                }
            }
            impl ::std::cmp::PartialEq for _List_base {
                fn eq(&self, other: &_List_base) -> bool {
                    self._M_impl == other._M_impl
                }
            }
            #[repr(C)]
            pub struct list {
                pub _base: root::std::__cxx11::_List_base,
            }
            pub type list__Base = root::std::__cxx11::_List_base;
            pub type list__Tp_alloc_type = root::std::__cxx11::list__Base;
            pub type list__Tp_alloc_traits = root::std::__cxx11::list__Base;
            pub type list__Node_alloc_type = root::std::__cxx11::list__Base;
            pub type list__Node_alloc_traits = root::std::__cxx11::list__Base;
            pub type list_value_type<_Tp> = _Tp;
            pub type list_pointer = root::std::__cxx11::list__Tp_alloc_traits;
            pub type list_const_pointer = root::std::__cxx11::list__Tp_alloc_traits;
            pub type list_reference = root::std::__cxx11::list__Tp_alloc_traits;
            pub type list_const_reference = root::std::__cxx11::list__Tp_alloc_traits;
            pub type list_iterator = root::std::_List_iterator;
            pub type list_const_iterator = root::std::_List_const_iterator;
            pub type list_const_reverse_iterator =
                root::std::reverse_iterator<root::std::__cxx11::list_const_iterator>;
            pub type list_reverse_iterator =
                root::std::reverse_iterator<root::std::__cxx11::list_iterator>;
            pub type list_size_type = usize;
            pub type list_difference_type = isize;
            pub type list_allocator_type<_Alloc> = _Alloc;
            pub type list__Node = root::std::_List_node;
            impl Default for list {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl ::std::fmt::Debug for list {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "list {{  }}")
                }
            }
            impl ::std::cmp::PartialEq for list {
                fn eq(&self, other: &list) -> bool {
                    self._base == other._base
                }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3absl"]
            pub fn abs(__i: libc::c_long) -> libc::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3absx"]
            pub fn abs1(__x: libc::c_longlong) -> libc::c_longlong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3absd"]
            pub fn abs2(__x: f64) -> f64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3absf"]
            pub fn abs3(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3abse"]
            pub fn abs4(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3divll"]
            pub fn div(__i: libc::c_long, __j: libc::c_long) -> root::ldiv_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
            pub fn __throw_bad_exception();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
            pub fn __throw_bad_alloc();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
            pub fn __throw_bad_cast();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
            pub fn __throw_bad_typeid();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
            pub fn __throw_logic_error(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
            pub fn __throw_domain_error(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
            pub fn __throw_invalid_argument(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
            pub fn __throw_length_error(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
            pub fn __throw_out_of_range(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
            pub fn __throw_out_of_range_fmt(arg1: *const libc::c_char, ...);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
            pub fn __throw_runtime_error(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
            pub fn __throw_range_error(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
            pub fn __throw_overflow_error(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
            pub fn __throw_underflow_error(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
            pub fn __throw_ios_failure(arg1: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_system_errori"]
            pub fn __throw_system_error(arg1: libc::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20__throw_future_errori"]
            pub fn __throw_future_error(arg1: libc::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
            pub fn __throw_bad_function_call();
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __true_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___true_type() {
            assert_eq!(
                ::std::mem::size_of::<__true_type>(),
                1usize,
                concat!("Size of: ", stringify!(__true_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__true_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__true_type))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __false_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___false_type() {
            assert_eq!(
                ::std::mem::size_of::<__false_type>(),
                1usize,
                concat!("Size of: ", stringify!(__false_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__false_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__false_type))
            );
        }
        pub type __truth_type___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __traitor {
            pub _address: u8,
        }
        pub const __traitor___value: root::std::__traitor__bindgen_ty_1 =
            __traitor__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __traitor__bindgen_ty_1 {
            __value = 0,
        }
        pub type __traitor___type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __are_same {
            pub _address: u8,
        }
        pub const __are_same___value: root::std::__are_same__bindgen_ty_1 =
            __are_same__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __are_same__bindgen_ty_1 {
            __value = 0,
        }
        pub type __are_same___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_void {
            pub _address: u8,
        }
        pub const __is_void___value: root::std::__is_void__bindgen_ty_1 =
            __is_void__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __is_void__bindgen_ty_1 {
            __value = 0,
        }
        pub type __is_void___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_void_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_void>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_void)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_void>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_void)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_integer {
            pub _address: u8,
        }
        pub const __is_integer___value: root::std::__is_integer__bindgen_ty_1 =
            __is_integer__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __is_integer__bindgen_ty_1 {
            __value = 0,
        }
        pub type __is_integer___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_integer_open0_bool__close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integer_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integer>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integer)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_floating {
            pub _address: u8,
        }
        pub const __is_floating___value: root::std::__is_floating__bindgen_ty_1 =
            __is_floating__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __is_floating__bindgen_ty_1 {
            __value = 0,
        }
        pub type __is_floating___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_floating_open0_float_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_open0_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_open0_long_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_pointer {
            pub _address: u8,
        }
        pub const __is_pointer___value: root::std::__is_pointer__bindgen_ty_1 =
            __is_pointer__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __is_pointer__bindgen_ty_1 {
            __value = 0,
        }
        pub type __is_pointer___type = root::std::__false_type;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_arithmetic {
            pub _address: u8,
        }
        impl Default for __is_arithmetic {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_scalar {
            pub _address: u8,
        }
        impl Default for __is_scalar {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_char {
            pub _address: u8,
        }
        pub const __is_char___value: root::std::__is_char__bindgen_ty_1 =
            __is_char__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __is_char__bindgen_ty_1 {
            __value = 0,
        }
        pub type __is_char___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_char_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_char_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_char>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_char)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_byte {
            pub _address: u8,
        }
        pub const __is_byte___value: root::std::__is_byte__bindgen_ty_1 =
            __is_byte__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __is_byte__bindgen_ty_1 {
            __value = 0,
        }
        pub type __is_byte___type = root::std::__false_type;
        #[test]
        fn __bindgen_test_layout___is_byte_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_byte_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_byte_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_byte>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_byte)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_move_iterator {
            pub _address: u8,
        }
        pub const __is_move_iterator___value: root::std::__is_move_iterator__bindgen_ty_1 =
            __is_move_iterator__bindgen_ty_1::__value;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __is_move_iterator__bindgen_ty_1 {
            __value = 0,
        }
        pub type __is_move_iterator___type = root::std::__false_type;
        pub type integral_constant_value_type<T> = T;
        pub type integral_constant_type = u8;
        pub type true_type = u8;
        pub type false_type = u8;
        pub type __bool_constant = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __or_ {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___or__open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__or_>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__or_)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__or_>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__or_)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __and_ {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___and__open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__and_>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__and_)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__and_>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__and_)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __not_ {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __success_type {
            pub _address: u8,
        }
        pub type __success_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __failure_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___failure_type() {
            assert_eq!(
                ::std::mem::size_of::<__failure_type>(),
                1usize,
                concat!("Size of: ", stringify!(__failure_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__failure_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__failure_type))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_void_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_void_helper_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_void_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_void_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_void_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_void_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_void {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_integral_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_bool__close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_integral_helper_open0_unsigned_long_long_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_integral_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_integral_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_floating_point_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_float_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_floating_point_helper_open0_long_double_close0_instantiation()
        {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_floating_point_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_floating_point_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_array {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_lvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_rvalue_reference {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_member_object_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_member_object_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_member_function_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_member_function_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_enum {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_union {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_class {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_function {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_null_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout___is_null_pointer_helper_open0_nullptr_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_null_pointer_helper>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_null_pointer_helper)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_null_pointer_helper>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_null_pointer_helper)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_null_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nullptr_t {
            pub _address: u8,
        }
        impl Default for __is_nullptr_t {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_reference {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_fundamental {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_object {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_scalar {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_compound {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_member_pointer_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_member_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_referenceable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_const {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_volatile {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivial {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_copyable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_standard_layout {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_pod {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_literal_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_empty {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_polymorphic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_abstract {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_signed {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_unsigned {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_array_known_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_array_unknown_bounds {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_destructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_destructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_destructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_destructible_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_destructible_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_is_destructible_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_destructible_impl {
            pub _address: u8,
        }
        pub type __is_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_nt_destructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_nt_destructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_nt_destructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_nt_destructible_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_nt_destructible_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_is_nt_destructible_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_destructible_impl {
            pub _address: u8,
        }
        pub type __is_nt_destructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_default_constructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_default_constructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_default_constructible_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_is_default_constructible_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_default_constructible_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__do_is_default_constructible_impl)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_default_constructible_atom {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_constructible_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nt_assignable_impl {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_nothrow_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_is_implicitly_default_constructible_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_is_implicitly_default_constructible_impl>(),
                1usize,
                concat!(
                    "Size of: ",
                    stringify!(__do_is_implicitly_default_constructible_impl)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<__do_is_implicitly_default_constructible_impl>(),
                1usize,
                concat!(
                    "Alignment of ",
                    stringify!(__do_is_implicitly_default_constructible_impl)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
            pub fn __do_is_implicitly_default_constructible_impl___test() -> root::std::false_type;
        }
        impl __do_is_implicitly_default_constructible_impl {
            #[inline]
            pub unsafe fn __test() -> root::std::false_type {
                __do_is_implicitly_default_constructible_impl___test()
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_implicitly_default_constructible_impl {
            pub _address: u8,
        }
        pub type __is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_implicitly_default_constructible_safe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_implicitly_default_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_copy_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_move_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_copy_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_move_assignable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_trivially_destructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct has_virtual_destructor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct alignment_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct rank {
            pub _base: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_same {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_base_of {
            pub _address: u8,
        }
        pub type __is_convertible_helper_type = root::std::is_void;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_convertible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type = root::std::remove_const;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_const {
            pub _address: u8,
        }
        pub type add_const_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_volatile {
            pub _address: u8,
        }
        pub type add_volatile_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_cv {
            pub _address: u8,
        }
        pub type add_cv_type = root::std::add_const;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Tp> = _Tp;
        pub type __add_lvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_lvalue_reference {
            pub _address: u8,
        }
        pub type __add_rvalue_reference_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_rvalue_reference {
            pub _address: u8,
        }
        pub type __match_cv_qualifiers___match = u8;
        pub type __match_cv_qualifiers___type = root::std::__match_cv_qualifiers___match;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __make_unsigned {
            pub _address: u8,
        }
        pub type __make_unsigned___type<_Tp> = _Tp;
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct make_unsigned {
            pub _address: u8,
        }
        pub type make_unsigned_type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __make_signed {
            pub _address: u8,
        }
        pub type __make_signed___type<_Tp> = _Tp;
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct make_signed {
            pub _address: u8,
        }
        pub type make_signed_type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_extent {
            pub _address: u8,
        }
        pub type remove_extent_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_all_extents {
            pub _address: u8,
        }
        pub type remove_all_extents_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __remove_pointer_helper {
            pub _address: u8,
        }
        pub type __remove_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct remove_pointer {
            pub _address: u8,
        }
        impl Default for remove_pointer {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __add_pointer_helper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct add_pointer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __aligned_storage_msa___type {
            pub __data: *mut libc::c_uchar,
            pub __align: root::std::__aligned_storage_msa___type__bindgen_ty_1,
            _bindgen_union_align: u64,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __aligned_storage_msa___type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___aligned_storage_msa___type() {
            assert_eq!(
                ::std::mem::size_of::<__aligned_storage_msa___type>(),
                8usize,
                concat!("Size of: ", stringify!(__aligned_storage_msa___type))
            );
            assert_eq!(
                ::std::mem::align_of::<__aligned_storage_msa___type>(),
                8usize,
                concat!("Alignment of ", stringify!(__aligned_storage_msa___type))
            );
        }
        impl Default for __aligned_storage_msa___type {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for __aligned_storage_msa___type {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "__aligned_storage_msa___type {{ union }}")
            }
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union aligned_storage_type {
            pub __data: *mut libc::c_uchar,
            pub __align: root::std::aligned_storage_type__bindgen_ty_1,
            _bindgen_union_align: u64,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct aligned_storage_type__bindgen_ty_1 {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_aligned_storage_type() {
            assert_eq!(
                ::std::mem::size_of::<aligned_storage_type>(),
                8usize,
                concat!("Size of: ", stringify!(aligned_storage_type))
            );
            assert_eq!(
                ::std::mem::align_of::<aligned_storage_type>(),
                8usize,
                concat!("Alignment of ", stringify!(aligned_storage_type))
            );
        }
        impl Default for aligned_storage_type {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for aligned_storage_type {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "aligned_storage_type {{ union }}")
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __strictest_alignment {
            pub _address: u8,
        }
        pub type aligned_union___strictest = root::std::__strictest_alignment;
        pub type aligned_union_type = u8;
        extern "C" {
            pub static alignment_value: usize;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct decay {
            pub _address: u8,
        }
        pub type decay___remove_type = root::std::remove_reference;
        pub type decay_type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct reference_wrapper {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __strip_reference_wrapper {
            pub _address: u8,
        }
        pub type __strip_reference_wrapper___type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __decay_and_strip {
            pub _address: u8,
        }
        pub type __decay_and_strip___type = root::std::__strip_reference_wrapper;
        pub type _Require = u8;
        pub type conditional_type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct common_type {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_common_type_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_common_type_impl() {
            assert_eq!(
                ::std::mem::size_of::<__do_common_type_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__do_common_type_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_common_type_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_common_type_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __common_type_impl {
            pub _address: u8,
        }
        pub type __common_type_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_member_type_wrapper {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___do_member_type_wrapper() {
            assert_eq!(
                ::std::mem::size_of::<__do_member_type_wrapper>(),
                1usize,
                concat!("Size of: ", stringify!(__do_member_type_wrapper))
            );
            assert_eq!(
                ::std::mem::align_of::<__do_member_type_wrapper>(),
                1usize,
                concat!("Alignment of ", stringify!(__do_member_type_wrapper))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __member_type_wrapper {
            pub _address: u8,
        }
        pub type __member_type_wrapper_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __expanded_common_type_wrapper {
            pub _address: u8,
        }
        pub type __expanded_common_type_wrapper_type = root::std::common_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct underlying_type {
            pub _address: u8,
        }
        pub type underlying_type_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __declval_protector {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_unsigned_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___make_signed_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_signed>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_signed)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct result_of {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_memfun_ref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memfun_ref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memfun_ref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memfun_ref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memfun_ref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memfun_ref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_memfun_deref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memfun_deref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memfun_deref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memfun_deref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memfun_deref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memfun_deref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_memobj_ref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memobj_ref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memobj_ref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memobj_ref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memobj_ref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memobj_ref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_memobj_deref {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_memobj_deref() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_memobj_deref>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_memobj_deref))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_memobj_deref>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_memobj_deref))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_other {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___invoke_other() {
            assert_eq!(
                ::std::mem::size_of::<__invoke_other>(),
                1usize,
                concat!("Size of: ", stringify!(__invoke_other))
            );
            assert_eq!(
                ::std::mem::align_of::<__invoke_other>(),
                1usize,
                concat!("Alignment of ", stringify!(__invoke_other))
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_success {
            pub _address: u8,
        }
        pub type __result_of_success___invoke_type<_Tag> = _Tag;
        impl Default for __result_of_success {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun_ref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memfun_ref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memfun_ref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memfun_ref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memfun_ref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memfun_ref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun_ref {
            pub _address: u8,
        }
        pub type __result_of_memfun_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun_deref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memfun_deref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memfun_deref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memfun_deref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memfun_deref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memfun_deref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun_deref {
            pub _address: u8,
        }
        pub type __result_of_memfun_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj_ref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memobj_ref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memobj_ref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memobj_ref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memobj_ref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memobj_ref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj_ref {
            pub _address: u8,
        }
        pub type __result_of_memobj_ref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj_deref_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_memobj_deref_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_memobj_deref_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_memobj_deref_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_memobj_deref_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_memobj_deref_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj_deref {
            pub _address: u8,
        }
        pub type __result_of_memobj_deref_type<_MemPtr> = _MemPtr;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memobj {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_memfun {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __inv_unwrap {
            pub _address: u8,
        }
        pub type __inv_unwrap_type<_Tp> = _Tp;
        pub type __result_of_impl_type = root::std::__failure_type;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __result_of_other_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___result_of_other_impl() {
            assert_eq!(
                ::std::mem::size_of::<__result_of_other_impl>(),
                1usize,
                concat!("Size of: ", stringify!(__result_of_other_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<__result_of_other_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(__result_of_other_impl))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __invoke_result {
            pub _address: u8,
        }
        pub type __enable_if_t = u8;
        pub type __void_t = libc::c_void;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __detector {
            pub _address: u8,
        }
        pub type __detector_value_t = root::std::false_type;
        pub type __detector_type<_Default> = _Default;
        pub type __detected_or = root::std::__detector;
        pub type __detected_or_t = root::std::__detected_or;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_tuple_like_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_tuple_like {
            pub _address: u8,
        }
        pub mod __swappable_details {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct __do_is_swappable_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_swappable_impl() {
                assert_eq!(
                    ::std::mem::size_of::<__do_is_swappable_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_swappable_impl))
                );
                assert_eq!(
                    ::std::mem::align_of::<__do_is_swappable_impl>(),
                    1usize,
                    concat!("Alignment of ", stringify!(__do_is_swappable_impl))
                );
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct __do_is_nothrow_swappable_impl {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout___do_is_nothrow_swappable_impl() {
                assert_eq!(
                    ::std::mem::size_of::<__do_is_nothrow_swappable_impl>(),
                    1usize,
                    concat!("Size of: ", stringify!(__do_is_nothrow_swappable_impl))
                );
                assert_eq!(
                    ::std::mem::align_of::<__do_is_nothrow_swappable_impl>(),
                    1usize,
                    concat!("Alignment of ", stringify!(__do_is_nothrow_swappable_impl))
                );
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_swappable_impl {
            pub _address: u8,
        }
        pub type __is_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_swappable_impl {
            pub _address: u8,
        }
        pub type __is_nothrow_swappable_impl_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_swappable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_invocable_impl {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __call_is_nothrow {
            pub _address: u8,
        }
        pub type __call_is_nothrow_ = root::std::__call_is_nothrow;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_invocable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __nonesuch {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___nonesuch() {
            assert_eq!(
                ::std::mem::size_of::<__nonesuch>(),
                1usize,
                concat!("Size of: ", stringify!(__nonesuch))
            );
            assert_eq!(
                ::std::mem::align_of::<__nonesuch>(),
                1usize,
                concat!("Alignment of ", stringify!(__nonesuch))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__nonesuchC1Ev"]
            pub fn __nonesuch___nonesuch(this: *mut root::std::__nonesuch);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__nonesuchC1ERKS_"]
            pub fn __nonesuch___nonesuch1(
                this: *mut root::std::__nonesuch,
                arg1: *const root::std::__nonesuch,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__nonesuchD1Ev"]
            pub fn __nonesuch___nonesuch_destructor(this: *mut root::std::__nonesuch);
        }
        impl __nonesuch {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __nonesuch___nonesuch(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::__nonesuch) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __nonesuch___nonesuch1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                __nonesuch___nonesuch_destructor(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __move_if_noexcept_cond {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct piecewise_construct_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_piecewise_construct_t() {
            assert_eq!(
                ::std::mem::size_of::<piecewise_construct_t>(),
                1usize,
                concat!("Size of: ", stringify!(piecewise_construct_t))
            );
            assert_eq!(
                ::std::mem::align_of::<piecewise_construct_t>(),
                1usize,
                concat!("Alignment of ", stringify!(piecewise_construct_t))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt21piecewise_construct_tC1Ev"]
            pub fn piecewise_construct_t_piecewise_construct_t(
                this: *mut root::std::piecewise_construct_t,
            );
        }
        impl piecewise_construct_t {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                piecewise_construct_t_piecewise_construct_t(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL19piecewise_construct"]
            pub static piecewise_construct: root::std::piecewise_construct_t;
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __nonesuch_no_braces {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___nonesuch_no_braces() {
            assert_eq!(
                ::std::mem::size_of::<__nonesuch_no_braces>(),
                1usize,
                concat!("Size of: ", stringify!(__nonesuch_no_braces))
            );
            assert_eq!(
                ::std::mem::align_of::<__nonesuch_no_braces>(),
                1usize,
                concat!("Alignment of ", stringify!(__nonesuch_no_braces))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt20__nonesuch_no_bracesC1ERKSt10__nonesuch"]
            pub fn __nonesuch_no_braces___nonesuch_no_braces(
                this: *mut root::std::__nonesuch_no_braces,
                arg1: *const root::std::__nonesuch,
            );
        }
        impl __nonesuch_no_braces {
            #[inline]
            pub unsafe fn new(arg1: *const root::std::__nonesuch) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __nonesuch_no_braces___nonesuch_no_braces(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __pair_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pair<_T1, _T2> {
            pub first: _T1,
            pub second: _T2,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
        }
        pub type pair_first_type<_T1> = _T1;
        pub type pair_second_type<_T2> = _T2;
        pub type pair__PCCP = u8;
        pub type pair__PCCFP = u8;
        impl<_T1, _T2> Default for pair<_T1, _T2> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct input_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_input_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<input_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(input_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<input_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(input_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct output_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_output_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<output_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(output_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<output_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(output_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct forward_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_forward_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<forward_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(forward_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<forward_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(forward_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bidirectional_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_bidirectional_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<bidirectional_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(bidirectional_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<bidirectional_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(bidirectional_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct random_access_iterator_tag {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_random_access_iterator_tag() {
            assert_eq!(
                ::std::mem::size_of::<random_access_iterator_tag>(),
                1usize,
                concat!("Size of: ", stringify!(random_access_iterator_tag))
            );
            assert_eq!(
                ::std::mem::align_of::<random_access_iterator_tag>(),
                1usize,
                concat!("Alignment of ", stringify!(random_access_iterator_tag))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct iterator {
            pub _address: u8,
        }
        pub type iterator_iterator_category<_Category> = _Category;
        pub type iterator_value_type<_Tp> = _Tp;
        pub type iterator_difference_type<_Distance> = _Distance;
        pub type iterator_pointer<_Pointer> = _Pointer;
        pub type iterator_reference<_Reference> = _Reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __iterator_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct iterator_traits {
            pub _address: u8,
        }
        pub type _RequireInputIter = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __undefined {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __get_first_arg {
            pub _address: u8,
        }
        pub type __get_first_arg_type = root::std::__undefined;
        pub type __get_first_arg_t = root::std::__get_first_arg;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __replace_first_arg {
            pub _address: u8,
        }
        pub type __replace_first_arg_t = root::std::__replace_first_arg;
        pub type __make_not_void = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pointer_traits {
            pub _address: u8,
        }
        pub type pointer_traits___element_type = [u8; 0usize];
        pub type pointer_traits___difference_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pointer_traits___rebind {
            pub _address: u8,
        }
        impl Default for pointer_traits___rebind {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type pointer_traits_pointer<_Ptr> = _Ptr;
        pub type pointer_traits_element_type = root::std::__detected_or_t;
        pub type pointer_traits_difference_type = root::std::__detected_or_t;
        pub type pointer_traits_rebind = root::std::pointer_traits___rebind;
        pub type __ptr_rebind = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct reverse_iterator<_Iterator> {
            pub current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type reverse_iterator___traits_type = root::std::iterator_traits;
        pub type reverse_iterator_iterator_type<_Iterator> = _Iterator;
        pub type reverse_iterator_difference_type = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_pointer = root::std::reverse_iterator___traits_type;
        pub type reverse_iterator_reference = root::std::reverse_iterator___traits_type;
        impl<_Iterator> Default for reverse_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct back_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type back_insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for back_insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct front_insert_iterator<_Container> {
            pub container: *mut _Container,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type front_insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for front_insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct insert_iterator<_Container> {
            pub container: *mut _Container,
            pub iter: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
        }
        pub type insert_iterator_container_type<_Container> = _Container;
        impl<_Container> Default for insert_iterator<_Container> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_Container> ::std::fmt::Debug for insert_iterator<_Container> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "insert_iterator {{ container: {:?} }}", self.container)
            }
        }
        impl<_Container> ::std::cmp::PartialEq for insert_iterator<_Container>
        where
            _Container: PartialEq,
        {
            fn eq(&self, other: &insert_iterator<_Container>) -> bool {
                self.container == other.container && self.iter == other.iter
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct move_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type move_iterator___traits_type = root::std::iterator_traits;
        pub type move_iterator___base_ref = root::std::move_iterator___traits_type;
        pub type move_iterator_iterator_type<_Iterator> = _Iterator;
        pub type move_iterator_iterator_category = root::std::move_iterator___traits_type;
        pub type move_iterator_value_type = root::std::move_iterator___traits_type;
        pub type move_iterator_difference_type = root::std::move_iterator___traits_type;
        pub type move_iterator_pointer<_Iterator> = _Iterator;
        pub type move_iterator_reference = u8;
        impl<_Iterator> Default for move_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __lc_rai {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___lc_rai_open0_random_access_iterator_tag_random_access_iterator_tag_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__lc_rai>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__lc_rai)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__lc_rai>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__lc_rai)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4__lgi"]
            pub fn __lg(__n: libc::c_int) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4__lgj"]
            pub fn __lg1(__n: libc::c_uint) -> libc::c_uint;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4__lgl"]
            pub fn __lg2(__n: libc::c_long) -> libc::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4__lgm"]
            pub fn __lg3(__n: libc::c_ulong) -> libc::c_ulong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4__lgx"]
            pub fn __lg4(__n: libc::c_longlong) -> libc::c_longlong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4__lgy"]
            pub fn __lg5(__n: libc::c_ulonglong) -> libc::c_ulonglong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6wcschrPww"]
            pub fn wcschr(__p: *mut u32, __c: u32) -> *mut u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7wcspbrkPwPKw"]
            pub fn wcspbrk(__s1: *mut u32, __s2: *const u32) -> *mut u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7wcsrchrPww"]
            pub fn wcsrchr(__p: *mut u32, __c: u32) -> *mut u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6wcsstrPwPKw"]
            pub fn wcsstr(__s1: *mut u32, __s2: *const u32) -> *mut u32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7wmemchrPwwm"]
            pub fn wmemchr(__p: *mut u32, __c: u32, __n: usize) -> *mut u32;
        }
        pub type streamoff = libc::c_long;
        pub type streamsize = isize;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct fpos<_StateT> {
            pub _M_off: root::std::streamoff,
            pub _M_state: _StateT,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
        }
        impl<_StateT> Default for fpos<_StateT> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type streampos = root::std::fpos<root::mbstate_t>;
        pub type wstreampos = root::std::fpos<root::mbstate_t>;
        pub type u16streampos = root::std::fpos<root::mbstate_t>;
        pub type u32streampos = root::std::fpos<root::mbstate_t>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct char_traits {
            pub _address: u8,
        }
        impl Default for char_traits {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[repr(C)]
        pub struct exception__bindgen_vtable(libc::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct exception {
            pub vtable_: *const exception__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout_exception() {
            assert_eq!(
                ::std::mem::size_of::<exception>(),
                8usize,
                concat!("Size of: ", stringify!(exception))
            );
            assert_eq!(
                ::std::mem::align_of::<exception>(),
                8usize,
                concat!("Alignment of ", stringify!(exception))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionC1Ev"]
            pub fn exception_exception(this: *mut root::std::exception);
        }
        impl Default for exception {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl exception {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                exception_exception(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
            pub fn exception_exception_destructor(this: *mut root::std::exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
            pub fn exception_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_exception {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_exception() {
            assert_eq!(
                ::std::mem::size_of::<bad_exception>(),
                8usize,
                concat!("Size of: ", stringify!(bad_exception))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_exception>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_exception))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13bad_exceptionC1Ev"]
            pub fn bad_exception_bad_exception(this: *mut root::std::bad_exception);
        }
        impl Default for bad_exception {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl bad_exception {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                bad_exception_bad_exception(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13bad_exceptionD1Ev"]
            pub fn bad_exception_bad_exception_destructor(this: *mut root::std::bad_exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt13bad_exception4whatEv"]
            pub fn bad_exception_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        pub type terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
        pub type unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            #[link_name = "\u{1}_ZSt13set_terminatePFvvE"]
            pub fn set_terminate(
                arg1: root::std::terminate_handler,
            ) -> root::std::terminate_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt13get_terminatev"]
            pub fn get_terminate() -> root::std::terminate_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9terminatev"]
            pub fn terminate();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14set_unexpectedPFvvE"]
            pub fn set_unexpected(
                arg1: root::std::unexpected_handler,
            ) -> root::std::unexpected_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14get_unexpectedv"]
            pub fn get_unexpected() -> root::std::unexpected_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10unexpectedv"]
            pub fn unexpected();
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18uncaught_exceptionv"]
            pub fn uncaught_exception() -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
            pub fn _Hash_bytes(__ptr: *const libc::c_void, __len: usize, __seed: usize) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
            pub fn _Fnv_hash_bytes(
                __ptr: *const libc::c_void,
                __len: usize,
                __seed: usize,
            ) -> usize;
        }
        #[repr(C)]
        pub struct type_info__bindgen_vtable(libc::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct type_info {
            pub vtable_: *const type_info__bindgen_vtable,
            pub __name: *const libc::c_char,
        }
        #[test]
        fn bindgen_test_layout_type_info() {
            assert_eq!(
                ::std::mem::size_of::<type_info>(),
                16usize,
                concat!("Size of: ", stringify!(type_info))
            );
            assert_eq!(
                ::std::mem::align_of::<type_info>(),
                8usize,
                concat!("Alignment of ", stringify!(type_info))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<type_info>())).__name as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(type_info),
                    "::",
                    stringify!(__name)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info4nameEv"]
            pub fn type_info_name(this: *const root::std::type_info) -> *const libc::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info6beforeERKS_"]
            pub fn type_info_before(
                this: *const root::std::type_info,
                __arg: *const root::std::type_info,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info9hash_codeEv"]
            pub fn type_info_hash_code(this: *const root::std::type_info) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9type_infoC1EPKc"]
            pub fn type_info_type_info(this: *mut root::std::type_info, __n: *const libc::c_char);
        }
        impl Default for type_info {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl type_info {
            #[inline]
            pub unsafe fn name(&self) -> *const libc::c_char {
                type_info_name(self)
            }
            #[inline]
            pub unsafe fn before(&self, __arg: *const root::std::type_info) -> bool {
                type_info_before(self, __arg)
            }
            #[inline]
            pub unsafe fn hash_code(&self) -> usize {
                type_info_hash_code(self)
            }
            #[inline]
            pub unsafe fn new(__n: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                type_info_type_info(&mut __bindgen_tmp, __n);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9type_infoD1Ev"]
            pub fn type_info_type_info_destructor(this: *mut root::std::type_info);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info14__is_pointer_pEv"]
            pub fn type_info___is_pointer_p(this: *mut libc::c_void) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info15__is_function_pEv"]
            pub fn type_info___is_function_p(this: *mut libc::c_void) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info10__do_catchEPKS_PPvj"]
            pub fn type_info___do_catch(
                this: *mut libc::c_void,
                __thr_type: *const root::std::type_info,
                __thr_obj: *mut *mut libc::c_void,
                __outer: libc::c_uint,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv"]
            pub fn type_info___do_upcast(
                this: *mut libc::c_void,
                __target: *const root::__cxxabiv1::__class_type_info,
                __obj_ptr: *mut *mut libc::c_void,
            ) -> bool;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_cast {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_cast() {
            assert_eq!(
                ::std::mem::size_of::<bad_cast>(),
                8usize,
                concat!("Size of: ", stringify!(bad_cast))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_cast>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_cast))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8bad_castC1Ev"]
            pub fn bad_cast_bad_cast(this: *mut root::std::bad_cast);
        }
        impl Default for bad_cast {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl bad_cast {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                bad_cast_bad_cast(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8bad_castD1Ev"]
            pub fn bad_cast_bad_cast_destructor(this: *mut root::std::bad_cast);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8bad_cast4whatEv"]
            pub fn bad_cast_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_typeid {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_typeid() {
            assert_eq!(
                ::std::mem::size_of::<bad_typeid>(),
                8usize,
                concat!("Size of: ", stringify!(bad_typeid))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_typeid>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_typeid))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10bad_typeidC1Ev"]
            pub fn bad_typeid_bad_typeid(this: *mut root::std::bad_typeid);
        }
        impl Default for bad_typeid {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl bad_typeid {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                bad_typeid_bad_typeid(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10bad_typeidD1Ev"]
            pub fn bad_typeid_bad_typeid_destructor(this: *mut root::std::bad_typeid);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10bad_typeid4whatEv"]
            pub fn bad_typeid_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        pub mod __exception_ptr {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct exception_ptr {
                pub _M_exception_object: *mut libc::c_void,
            }
            #[test]
            fn bindgen_test_layout_exception_ptr() {
                assert_eq!(
                    ::std::mem::size_of::<exception_ptr>(),
                    8usize,
                    concat!("Size of: ", stringify!(exception_ptr))
                );
                assert_eq!(
                    ::std::mem::align_of::<exception_ptr>(),
                    8usize,
                    concat!("Alignment of ", stringify!(exception_ptr))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<exception_ptr>()))._M_exception_object as *const _
                            as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(exception_ptr),
                        "::",
                        stringify!(_M_exception_object)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptr4swapERS0_"]
                pub fn exception_ptr_swap(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                    arg1: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv"]
                pub fn exception_ptr___cxa_exception_type(
                    this: *const root::std::__exception_ptr::exception_ptr,
                ) -> *const root::std::type_info;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1Ev"]
                pub fn exception_ptr_exception_ptr(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1ERKS0_"]
                pub fn exception_ptr_exception_ptr1(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                    arg1: *const root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1EDn"]
                pub fn exception_ptr_exception_ptr2(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                    arg1: root::std::nullptr_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1EOS0_"]
                pub fn exception_ptr_exception_ptr3(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                    __o: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrD1Ev"]
                pub fn exception_ptr_exception_ptr_destructor(
                    this: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
            impl Default for exception_ptr {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl exception_ptr {
                #[inline]
                pub unsafe fn swap(
                    &mut self,
                    arg1: *mut root::std::__exception_ptr::exception_ptr,
                ) {
                    exception_ptr_swap(self, arg1)
                }
                #[inline]
                pub unsafe fn __cxa_exception_type(&self) -> *const root::std::type_info {
                    exception_ptr___cxa_exception_type(self)
                }
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    exception_ptr_exception_ptr(&mut __bindgen_tmp);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(arg1: *const root::std::__exception_ptr::exception_ptr) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    exception_ptr_exception_ptr1(&mut __bindgen_tmp, arg1);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new2(arg1: root::std::nullptr_t) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    exception_ptr_exception_ptr2(&mut __bindgen_tmp, arg1);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new3(__o: *mut root::std::__exception_ptr::exception_ptr) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    exception_ptr_exception_ptr3(&mut __bindgen_tmp, __o);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn destruct(&mut self) {
                    exception_ptr_exception_ptr_destructor(self)
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt15__exception_ptr4swapERNS_13exception_ptrES1_"]
                pub fn swap(
                    __lhs: *mut root::std::__exception_ptr::exception_ptr,
                    __rhs: *mut root::std::__exception_ptr::exception_ptr,
                );
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17current_exceptionv"]
            pub fn current_exception() -> root::std::__exception_ptr::exception_ptr;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE"]
            pub fn rethrow_exception(arg1: root::std::__exception_ptr::exception_ptr);
        }
        #[repr(C)]
        pub struct nested_exception__bindgen_vtable(libc::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct nested_exception {
            pub vtable_: *const nested_exception__bindgen_vtable,
            pub _M_ptr: root::std::__exception_ptr::exception_ptr,
        }
        #[test]
        fn bindgen_test_layout_nested_exception() {
            assert_eq!(
                ::std::mem::size_of::<nested_exception>(),
                16usize,
                concat!("Size of: ", stringify!(nested_exception))
            );
            assert_eq!(
                ::std::mem::align_of::<nested_exception>(),
                8usize,
                concat!("Alignment of ", stringify!(nested_exception))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<nested_exception>()))._M_ptr as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(nested_exception),
                    "::",
                    stringify!(_M_ptr)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt16nested_exception14rethrow_nestedEv"]
            pub fn nested_exception_rethrow_nested(this: *const root::std::nested_exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt16nested_exception10nested_ptrEv"]
            pub fn nested_exception_nested_ptr(
                this: *const root::std::nested_exception,
            ) -> root::std::__exception_ptr::exception_ptr;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16nested_exceptionC1Ev"]
            pub fn nested_exception_nested_exception(this: *mut root::std::nested_exception);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16nested_exceptionC1ERKS_"]
            pub fn nested_exception_nested_exception1(
                this: *mut root::std::nested_exception,
                arg1: *const root::std::nested_exception,
            );
        }
        impl Default for nested_exception {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl nested_exception {
            #[inline]
            pub unsafe fn rethrow_nested(&self) {
                nested_exception_rethrow_nested(self)
            }
            #[inline]
            pub unsafe fn nested_ptr(&self) -> root::std::__exception_ptr::exception_ptr {
                nested_exception_nested_ptr(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                nested_exception_nested_exception(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::nested_exception) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                nested_exception_nested_exception1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16nested_exceptionD1Ev"]
            pub fn nested_exception_nested_exception_destructor(
                this: *mut root::std::nested_exception,
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Nested_exception<_Except> {
            pub _base: _Except,
            pub _base_1: root::std::nested_exception,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
        }
        impl<_Except> Default for _Nested_exception<_Except> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __rethrow_if_nested_cond = u8;
        extern "C" {
            #[link_name = "\u{1}_ZSt24__rethrow_if_nested_implPKv"]
            pub fn __rethrow_if_nested_impl(arg1: *const libc::c_void);
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_alloc {
            pub _base: root::std::exception,
        }
        #[test]
        fn bindgen_test_layout_bad_alloc() {
            assert_eq!(
                ::std::mem::size_of::<bad_alloc>(),
                8usize,
                concat!("Size of: ", stringify!(bad_alloc))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_alloc>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_alloc))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9bad_allocC1Ev"]
            pub fn bad_alloc_bad_alloc(this: *mut root::std::bad_alloc);
        }
        impl Default for bad_alloc {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl bad_alloc {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                bad_alloc_bad_alloc(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
            pub fn bad_alloc_bad_alloc_destructor(this: *mut root::std::bad_alloc);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
            pub fn bad_alloc_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bad_array_new_length {
            pub _base: root::std::bad_alloc,
        }
        #[test]
        fn bindgen_test_layout_bad_array_new_length() {
            assert_eq!(
                ::std::mem::size_of::<bad_array_new_length>(),
                8usize,
                concat!("Size of: ", stringify!(bad_array_new_length))
            );
            assert_eq!(
                ::std::mem::align_of::<bad_array_new_length>(),
                8usize,
                concat!("Alignment of ", stringify!(bad_array_new_length))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt20bad_array_new_lengthC1Ev"]
            pub fn bad_array_new_length_bad_array_new_length(
                this: *mut root::std::bad_array_new_length,
            );
        }
        impl Default for bad_array_new_length {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl bad_array_new_length {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                bad_array_new_length_bad_array_new_length(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
            pub fn bad_array_new_length_bad_array_new_length_destructor(
                this: *mut root::std::bad_array_new_length,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
            pub fn bad_array_new_length_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct nothrow_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_nothrow_t() {
            assert_eq!(
                ::std::mem::size_of::<nothrow_t>(),
                1usize,
                concat!("Size of: ", stringify!(nothrow_t))
            );
            assert_eq!(
                ::std::mem::align_of::<nothrow_t>(),
                1usize,
                concat!("Alignment of ", stringify!(nothrow_t))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt9nothrow_tC1Ev"]
            pub fn nothrow_t_nothrow_t(this: *mut root::std::nothrow_t);
        }
        impl nothrow_t {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                nothrow_t_nothrow_t(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7nothrow"]
            pub static nothrow: root::std::nothrow_t;
        }
        pub type new_handler = ::std::option::Option<unsafe extern "C" fn()>;
        extern "C" {
            #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
            pub fn set_new_handler(arg1: root::std::new_handler) -> root::std::new_handler;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15get_new_handlerv"]
            pub fn get_new_handler() -> root::std::new_handler;
        }
        pub type __allocator_base = root::__gnu_cxx::new_allocator;
        #[test]
        fn __bindgen_test_layout_allocator_open0_void_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator {
            pub _address: u8,
        }
        pub type allocator_size_type = usize;
        pub type allocator_difference_type = isize;
        pub type allocator_pointer<_Tp> = *mut _Tp;
        pub type allocator_const_pointer<_Tp> = *const _Tp;
        pub type allocator_reference<_Tp> = *mut _Tp;
        pub type allocator_const_reference<_Tp> = *const _Tp;
        pub type allocator_value_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_rebind {
            pub _address: u8,
        }
        pub type allocator_rebind_other = root::std::allocator;
        pub type allocator_propagate_on_container_move_assignment = root::std::true_type;
        pub type allocator_is_always_equal = root::std::true_type;
        impl Default for allocator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        pub type __c_locale = root::__locale_t;
        extern "C" {
            #[link_name = "\u{1}_ZSt16__convert_from_vRKP15__locale_structPciPKcz"]
            pub fn __convert_from_v(
                __cloc: *const root::std::__c_locale,
                __out: *mut libc::c_char,
                __size: libc::c_int,
                __fmt: *const libc::c_char,
                ...
            ) -> libc::c_int;
        }
        pub type ios = root::std::basic_ios<libc::c_char>;
        pub type streambuf = root::std::basic_streambuf<libc::c_char>;
        pub type istream = root::std::basic_istream<libc::c_char>;
        pub type ostream = root::std::basic_ostream<libc::c_char>;
        pub type stringbuf = root::std::__cxx11::basic_stringbuf<libc::c_char>;
        pub type istringstream = root::std::__cxx11::basic_istringstream<libc::c_char>;
        pub type ostringstream = root::std::__cxx11::basic_ostringstream<libc::c_char>;
        // pub type stringstream = root::std::__cxx11::basic_stringstream<libc::c_char>;
        pub type filebuf = root::std::basic_filebuf<libc::c_char>;
        pub type ifstream = root::std::basic_ifstream<libc::c_char>;
        pub type ofstream = root::std::basic_ofstream<libc::c_char>;
        pub type fstream = root::std::basic_fstream<libc::c_char>;
        pub type wios = root::std::basic_ios<u32>;
        pub type wstreambuf = root::std::basic_streambuf<u32>;
        pub type wistream = root::std::basic_istream<u32>;
        pub type wostream = root::std::basic_ostream<u32>;
        pub type wstringbuf = root::std::__cxx11::basic_stringbuf<u32>;
        pub type wistringstream = root::std::__cxx11::basic_istringstream<u32>;
        pub type wostringstream = root::std::__cxx11::basic_ostringstream<u32>;
        pub type wfilebuf = root::std::basic_filebuf<u32>;
        pub type wifstream = root::std::basic_ifstream<u32>;
        pub type wofstream = root::std::basic_ofstream<u32>;
        pub type wfstream = root::std::basic_fstream<u32>;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct time_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct time_put {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct time_put_byname {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct money_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct messages_base {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct unary_function {
            pub _address: u8,
        }
        pub type unary_function_argument_type<_Arg> = _Arg;
        pub type unary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct binary_function {
            pub _address: u8,
        }
        pub type binary_function_first_argument_type<_Arg1> = _Arg1;
        pub type binary_function_second_argument_type<_Arg2> = _Arg2;
        pub type binary_function_result_type<_Result> = _Result;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct plus {
            pub _address: u8,
        }
        impl Default for plus {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct minus {
            pub _address: u8,
        }
        impl Default for minus {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct multiplies {
            pub _address: u8,
        }
        impl Default for multiplies {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct divides {
            pub _address: u8,
        }
        impl Default for divides {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct modulus {
            pub _address: u8,
        }
        impl Default for modulus {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct negate {
            pub _address: u8,
        }
        impl Default for negate {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct not_equal_to {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct greater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct less {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct greater_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct less_equal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct logical_and {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct logical_or {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct logical_not {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bit_and {
            pub _address: u8,
        }
        impl Default for bit_and {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bit_or {
            pub _address: u8,
        }
        impl Default for bit_or {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bit_xor {
            pub _address: u8,
        }
        impl Default for bit_xor {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct bit_not {
            pub _address: u8,
        }
        impl Default for bit_not {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct unary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for unary_negate<_Predicate> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct binary_negate<_Predicate> {
            pub _M_pred: _Predicate,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
        }
        impl<_Predicate> Default for binary_negate<_Predicate> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pointer_to_unary_function<_Arg, _Result> {
            pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        impl<_Arg, _Result> Default for pointer_to_unary_function<_Arg, _Result> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            pub _M_ptr:
                ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
            pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
        }
        impl<_Arg1, _Arg2, _Result> Default for pointer_to_binary_function<_Arg1, _Arg2, _Result> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Identity {
            pub _address: u8,
        }
        impl Default for _Identity {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Select1st {
            pub _address: u8,
        }
        impl Default for _Select1st {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Select2nd {
            pub _address: u8,
        }
        impl Default for _Select2nd {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for mem_fun_t<_Ret> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct const_mem_fun_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for const_mem_fun_t<_Ret> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for mem_fun_ref_t<_Ret> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct const_mem_fun_ref_t<_Ret> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
        }
        impl<_Ret> Default for const_mem_fun_ref_t<_Ret> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct mem_fun1_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for mem_fun1_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct const_mem_fun1_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for const_mem_fun1_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for mem_fun1_ref_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct const_mem_fun1_ref_t<_Ret, _Arg> {
            pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
        }
        impl<_Ret, _Arg> Default for const_mem_fun1_ref_t<_Ret, _Arg> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct binder1st<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        impl<_Operation> Default for binder1st<_Operation> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_Operation> ::std::fmt::Debug for binder1st<_Operation> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "binder1st {{ op: Non-debuggable generic }}")
            }
        }
        impl<_Operation> ::std::cmp::PartialEq for binder1st<_Operation>
        where
            _Operation: PartialEq,
        {
            fn eq(&self, other: &binder1st<_Operation>) -> bool {
                self.op == other.op && self.value == other.value
            }
        }
        #[repr(C)]
        pub struct binder2nd<_Operation> {
            pub op: _Operation,
            pub value: [u8; 0usize],
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
        }
        impl<_Operation> Default for binder2nd<_Operation> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<_Operation> ::std::fmt::Debug for binder2nd<_Operation> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "binder2nd {{ op: Non-debuggable generic }}")
            }
        }
        impl<_Operation> ::std::cmp::PartialEq for binder2nd<_Operation>
        where
            _Operation: PartialEq,
        {
            fn eq(&self, other: &binder2nd<_Operation>) -> bool {
                self.op == other.op && self.value == other.value
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct initializer_list<_E> {
            pub _M_array: root::std::initializer_list_iterator<_E>,
            pub _M_len: root::std::initializer_list_size_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
        }
        pub type initializer_list_value_type<_E> = _E;
        pub type initializer_list_reference<_E> = *const _E;
        pub type initializer_list_const_reference<_E> = *const _E;
        pub type initializer_list_size_type = usize;
        pub type initializer_list_iterator<_E> = *const _E;
        pub type initializer_list_const_iterator<_E> = *const _E;
        impl<_E> Default for initializer_list<_E> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __allocator_traits_base {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __allocator_traits_base___rebind {
            pub _address: u8,
        }
        impl Default for __allocator_traits_base___rebind {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __allocator_traits_base___pointer = [u8; 0usize];
        pub type __allocator_traits_base___c_pointer = [u8; 0usize];
        pub type __allocator_traits_base___v_pointer = [u8; 0usize];
        pub type __allocator_traits_base___cv_pointer = [u8; 0usize];
        pub type __allocator_traits_base___pocca = [u8; 0usize];
        pub type __allocator_traits_base___pocma = [u8; 0usize];
        pub type __allocator_traits_base___pocs = [u8; 0usize];
        pub type __allocator_traits_base___equal = [u8; 0usize];
        #[test]
        fn bindgen_test_layout___allocator_traits_base() {
            assert_eq!(
                ::std::mem::size_of::<__allocator_traits_base>(),
                1usize,
                concat!("Size of: ", stringify!(__allocator_traits_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__allocator_traits_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__allocator_traits_base))
            );
        }
        pub type __alloc_rebind = root::std::__allocator_traits_base;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits {
            pub _address: u8,
        }
        pub type allocator_traits_allocator_type<_Alloc> = _Alloc;
        pub type allocator_traits_value_type = [u8; 0usize];
        pub type allocator_traits_pointer = root::std::__detected_or_t;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits__Ptr {
            pub _address: u8,
        }
        pub type allocator_traits__Ptr_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits__Diff {
            pub _address: u8,
        }
        pub type allocator_traits__Diff_type = root::std::pointer_traits;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits__Size {
            pub _address: u8,
        }
        impl Default for allocator_traits__Size {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type allocator_traits_const_pointer = [u8; 0usize];
        pub type allocator_traits_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_const_void_pointer = root::std::allocator_traits__Ptr;
        pub type allocator_traits_difference_type = [u8; 0usize];
        pub type allocator_traits_size_type = [u8; 0usize];
        pub type allocator_traits_propagate_on_container_copy_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_move_assignment =
            root::std::__detected_or_t;
        pub type allocator_traits_propagate_on_container_swap = root::std::__detected_or_t;
        pub type allocator_traits_is_always_equal = root::std::__detected_or_t;
        pub type allocator_traits_rebind_alloc = root::std::__alloc_rebind;
        pub type allocator_traits_rebind_traits = root::std::allocator_traits;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_traits___construct_helper {
            pub _address: u8,
        }
        pub type allocator_traits___construct_helper_type<_Alloc> = _Alloc;
        pub type allocator_traits___has_construct = root::std::allocator_traits___construct_helper;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_copy_insertable_impl {
            pub _address: u8,
        }
        pub type __is_copy_insertable_impl__Traits = root::std::allocator_traits;
        pub type __is_copy_insertable_impl_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_copy_insertable {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_allocator {
            pub _base: root::std::false_type,
        }
        pub type _RequireAllocator = u8;
        extern "C" {
            #[link_name = "\u{1}_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
            pub fn getline(
                __in: *mut root::std::basic_istream<libc::c_char>,
                __str: *mut root::std::__cxx11::basic_string<libc::c_char>,
                __delim: libc::c_char,
            ) -> *mut root::std::basic_istream<libc::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
            pub fn getline1(
                __in: *mut root::std::basic_istream<u32>,
                __str: *mut root::std::__cxx11::basic_string<u32>,
                __delim: u32,
            ) -> *mut root::std::basic_istream<u32>;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __hash_base {
            pub _address: u8,
        }
        pub type __hash_base_result_type<_Result> = _Result;
        pub type __hash_base_argument_type<_Arg> = _Arg;
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __poison_hash {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct hash {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_bool__close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char16_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_char32_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Hash_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Hash_impl() {
            assert_eq!(
                ::std::mem::size_of::<_Hash_impl>(),
                1usize,
                concat!("Size of: ", stringify!(_Hash_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<_Hash_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(_Hash_impl))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10_Hash_impl4hashEPKvmm"]
            pub fn _Hash_impl_hash(
                __ptr: *const libc::c_void,
                __clength: usize,
                __seed: usize,
            ) -> usize;
        }
        impl _Hash_impl {
            #[inline]
            pub unsafe fn hash(
                __ptr: *const libc::c_void,
                __clength: usize,
                __seed: usize,
            ) -> usize {
                _Hash_impl_hash(__ptr, __clength, __seed)
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Fnv_hash_impl {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Fnv_hash_impl() {
            assert_eq!(
                ::std::mem::size_of::<_Fnv_hash_impl>(),
                1usize,
                concat!("Size of: ", stringify!(_Fnv_hash_impl))
            );
            assert_eq!(
                ::std::mem::align_of::<_Fnv_hash_impl>(),
                1usize,
                concat!("Alignment of ", stringify!(_Fnv_hash_impl))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14_Fnv_hash_impl4hashEPKvmm"]
            pub fn _Fnv_hash_impl_hash(
                __ptr: *const libc::c_void,
                __clength: usize,
                __seed: usize,
            ) -> usize;
        }
        impl _Fnv_hash_impl {
            #[inline]
            pub unsafe fn hash(
                __ptr: *const libc::c_void,
                __clength: usize,
                __seed: usize,
            ) -> usize {
                _Fnv_hash_impl_hash(__ptr, __clength, __seed)
            }
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_float_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_fast_hash {
            pub _base: root::std::true_type,
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_long_double_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_wchar_t_char_traits_open3_wchar_t_close3_allocator_open3_wchar_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char16_t_char_traits_open3_char16_t_close3_allocator_open3_char16_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___is_fast_hash_open0_hash_open1_basic_string_open2_char32_t_char_traits_open3_char32_t_close3_allocator_open3_char32_t_close3_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__is_fast_hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__is_fast_hash)
                )
            );
        }
        extern "C" {
            pub static npos: root::std::__cxx11::basic_string_size_type;
        }
        #[test]
        fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
                32usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_string<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_string<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
                32usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_string<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_string<u32>)
                )
            );
        }
        #[repr(C)]
        pub struct _Vector_base {
            pub _M_impl: root::std::_Vector_base__Vector_impl,
        }
        pub type _Vector_base__Tp_alloc_type = [u8; 0usize];
        pub type _Vector_base_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Vector_base__Vector_impl {
            pub _M_start: root::std::_Vector_base_pointer,
            pub _M_finish: root::std::_Vector_base_pointer,
            pub _M_end_of_storage: root::std::_Vector_base_pointer,
        }
        impl Default for _Vector_base__Vector_impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Vector_base__Vector_impl {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Vector_base__Vector_impl {{  }}")
            }
        }
        impl ::std::cmp::PartialEq for _Vector_base__Vector_impl {
            fn eq(&self, other: &_Vector_base__Vector_impl) -> bool {
                self._M_start == other._M_start
                    && self._M_finish == other._M_finish
                    && self._M_end_of_storage == other._M_end_of_storage
            }
        }
        pub type _Vector_base_allocator_type<_Alloc> = _Alloc;
        impl Default for _Vector_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Vector_base {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Vector_base {{ _M_impl: {:?} }}", self._M_impl)
            }
        }
        impl ::std::cmp::PartialEq for _Vector_base {
            fn eq(&self, other: &_Vector_base) -> bool {
                self._M_impl == other._M_impl
            }
        }
        #[repr(C)]
        pub struct vector {
            pub _base: root::std::_Vector_base,
        }
        pub type vector__Base = root::std::_Vector_base;
        pub type vector__Tp_alloc_type = root::std::vector__Base;
        pub type vector__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type vector_value_type<_Tp> = _Tp;
        pub type vector_pointer = root::std::vector__Base;
        pub type vector_const_pointer = root::std::vector__Alloc_traits;
        pub type vector_reference = root::std::vector__Alloc_traits;
        pub type vector_const_reference = root::std::vector__Alloc_traits;
        pub type vector_iterator = root::__gnu_cxx::__normal_iterator<root::std::vector_pointer>;
        pub type vector_const_iterator =
            root::__gnu_cxx::__normal_iterator<root::std::vector_const_pointer>;
        pub type vector_const_reverse_iterator =
            root::std::reverse_iterator<root::std::vector_const_iterator>;
        pub type vector_reverse_iterator = root::std::reverse_iterator<root::std::vector_iterator>;
        pub type vector_size_type = usize;
        pub type vector_difference_type = isize;
        pub type vector_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct vector__Temporary_value {
            pub _M_this: *mut root::std::vector,
            pub __buf: u8,
        }
        impl Default for vector__Temporary_value {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl Default for vector {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for vector {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "vector {{  }}")
            }
        }
        impl ::std::cmp::PartialEq for vector {
            fn eq(&self, other: &vector) -> bool {
                self._base == other._base
            }
        }
        pub type _Bit_type = libc::c_ulong;
        pub const std__S_word_bit: root::std::_bindgen_ty_1 = _bindgen_ty_1::_S_word_bit;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum _bindgen_ty_1 {
            _S_word_bit = 64,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Bit_reference {
            pub _M_p: *mut root::std::_Bit_type,
            pub _M_mask: root::std::_Bit_type,
        }
        #[test]
        fn bindgen_test_layout__Bit_reference() {
            assert_eq!(
                ::std::mem::size_of::<_Bit_reference>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_reference))
            );
            assert_eq!(
                ::std::mem::align_of::<_Bit_reference>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_reference))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<_Bit_reference>()))._M_p as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_reference),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<_Bit_reference>()))._M_mask as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_reference),
                    "::",
                    stringify!(_M_mask)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14_Bit_reference4flipEv"]
            pub fn _Bit_reference_flip(this: *mut root::std::_Bit_reference);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14_Bit_referenceC1EPmm"]
            pub fn _Bit_reference__Bit_reference(
                this: *mut root::std::_Bit_reference,
                __x: *mut root::std::_Bit_type,
                __y: root::std::_Bit_type,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14_Bit_referenceC1Ev"]
            pub fn _Bit_reference__Bit_reference1(this: *mut root::std::_Bit_reference);
        }
        impl Default for _Bit_reference {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl _Bit_reference {
            #[inline]
            pub unsafe fn flip(&mut self) {
                _Bit_reference_flip(self)
            }
            #[inline]
            pub unsafe fn new(__x: *mut root::std::_Bit_type, __y: root::std::_Bit_type) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Bit_reference__Bit_reference(&mut __bindgen_tmp, __x, __y);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Bit_reference__Bit_reference1(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4swapSt14_Bit_referenceS_"]
            pub fn swap(__x: root::std::_Bit_reference, __y: root::std::_Bit_reference);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4swapSt14_Bit_referenceRb"]
            pub fn swap1(__x: root::std::_Bit_reference, __y: *mut bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4swapRbSt14_Bit_reference"]
            pub fn swap2(__x: *mut bool, __y: root::std::_Bit_reference);
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Bit_iterator_base {
            pub _M_p: *mut root::std::_Bit_type,
            pub _M_offset: libc::c_uint,
        }
        #[test]
        fn bindgen_test_layout__Bit_iterator_base() {
            assert_eq!(
                ::std::mem::size_of::<_Bit_iterator_base>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_iterator_base))
            );
            assert_eq!(
                ::std::mem::align_of::<_Bit_iterator_base>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_iterator_base))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_p as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_iterator_base),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Bit_iterator_base>()))._M_offset as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Bit_iterator_base),
                    "::",
                    stringify!(_M_offset)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt18_Bit_iterator_base10_M_bump_upEv"]
            pub fn _Bit_iterator_base__M_bump_up(this: *mut root::std::_Bit_iterator_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt18_Bit_iterator_base12_M_bump_downEv"]
            pub fn _Bit_iterator_base__M_bump_down(this: *mut root::std::_Bit_iterator_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt18_Bit_iterator_base7_M_incrEl"]
            pub fn _Bit_iterator_base__M_incr(this: *mut root::std::_Bit_iterator_base, __i: isize);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt18_Bit_iterator_baseC1EPmj"]
            pub fn _Bit_iterator_base__Bit_iterator_base(
                this: *mut root::std::_Bit_iterator_base,
                __x: *mut root::std::_Bit_type,
                __y: libc::c_uint,
            );
        }
        impl Default for _Bit_iterator_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl _Bit_iterator_base {
            #[inline]
            pub unsafe fn _M_bump_up(&mut self) {
                _Bit_iterator_base__M_bump_up(self)
            }
            #[inline]
            pub unsafe fn _M_bump_down(&mut self) {
                _Bit_iterator_base__M_bump_down(self)
            }
            #[inline]
            pub unsafe fn _M_incr(&mut self, __i: isize) {
                _Bit_iterator_base__M_incr(self, __i)
            }
            #[inline]
            pub unsafe fn new(__x: *mut root::std::_Bit_type, __y: libc::c_uint) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Bit_iterator_base__Bit_iterator_base(&mut __bindgen_tmp, __x, __y);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Bit_iterator {
            pub _base: root::std::_Bit_iterator_base,
        }
        pub type _Bit_iterator_reference = root::std::_Bit_reference;
        pub type _Bit_iterator_pointer = *mut root::std::_Bit_reference;
        pub type _Bit_iterator_iterator = root::std::_Bit_iterator;
        #[test]
        fn bindgen_test_layout__Bit_iterator() {
            assert_eq!(
                ::std::mem::size_of::<_Bit_iterator>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_iterator))
            );
            assert_eq!(
                ::std::mem::align_of::<_Bit_iterator>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_iterator))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt13_Bit_iterator13_M_const_castEv"]
            pub fn _Bit_iterator__M_const_cast(
                this: *const root::std::_Bit_iterator,
            ) -> root::std::_Bit_iterator_iterator;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13_Bit_iteratorC1Ev"]
            pub fn _Bit_iterator__Bit_iterator(this: *mut root::std::_Bit_iterator);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13_Bit_iteratorC1EPmj"]
            pub fn _Bit_iterator__Bit_iterator1(
                this: *mut root::std::_Bit_iterator,
                __x: *mut root::std::_Bit_type,
                __y: libc::c_uint,
            );
        }
        impl Default for _Bit_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl _Bit_iterator {
            #[inline]
            pub unsafe fn _M_const_cast(&self) -> root::std::_Bit_iterator_iterator {
                _Bit_iterator__M_const_cast(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Bit_iterator__Bit_iterator(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(__x: *mut root::std::_Bit_type, __y: libc::c_uint) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Bit_iterator__Bit_iterator1(&mut __bindgen_tmp, __x, __y);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Bit_const_iterator {
            pub _base: root::std::_Bit_iterator_base,
        }
        pub type _Bit_const_iterator_reference = bool;
        pub type _Bit_const_iterator_const_reference = bool;
        pub type _Bit_const_iterator_pointer = *const bool;
        pub type _Bit_const_iterator_const_iterator = root::std::_Bit_const_iterator;
        #[test]
        fn bindgen_test_layout__Bit_const_iterator() {
            assert_eq!(
                ::std::mem::size_of::<_Bit_const_iterator>(),
                16usize,
                concat!("Size of: ", stringify!(_Bit_const_iterator))
            );
            assert_eq!(
                ::std::mem::align_of::<_Bit_const_iterator>(),
                8usize,
                concat!("Alignment of ", stringify!(_Bit_const_iterator))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt19_Bit_const_iterator13_M_const_castEv"]
            pub fn _Bit_const_iterator__M_const_cast(
                this: *const root::std::_Bit_const_iterator,
            ) -> root::std::_Bit_iterator;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt19_Bit_const_iteratorC1Ev"]
            pub fn _Bit_const_iterator__Bit_const_iterator(
                this: *mut root::std::_Bit_const_iterator,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt19_Bit_const_iteratorC1EPmj"]
            pub fn _Bit_const_iterator__Bit_const_iterator1(
                this: *mut root::std::_Bit_const_iterator,
                __x: *mut root::std::_Bit_type,
                __y: libc::c_uint,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator"]
            pub fn _Bit_const_iterator__Bit_const_iterator2(
                this: *mut root::std::_Bit_const_iterator,
                __x: *const root::std::_Bit_iterator,
            );
        }
        impl Default for _Bit_const_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl _Bit_const_iterator {
            #[inline]
            pub unsafe fn _M_const_cast(&self) -> root::std::_Bit_iterator {
                _Bit_const_iterator__M_const_cast(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Bit_const_iterator__Bit_const_iterator(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(__x: *mut root::std::_Bit_type, __y: libc::c_uint) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Bit_const_iterator__Bit_const_iterator1(&mut __bindgen_tmp, __x, __y);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(__x: *const root::std::_Bit_iterator) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Bit_const_iterator__Bit_const_iterator2(&mut __bindgen_tmp, __x);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__fill_bvectorPmjjb"]
            pub fn __fill_bvector(
                __v: *mut root::std::_Bit_type,
                __first: libc::c_uint,
                __last: libc::c_uint,
                __x: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fillSt13_Bit_iteratorS_RKb"]
            pub fn fill(
                __first: root::std::_Bit_iterator,
                __last: root::std::_Bit_iterator,
                __x: *const bool,
            );
        }
        #[repr(C)]
        pub struct _Bvector_base {
            pub _M_impl: root::std::_Bvector_base__Bvector_impl,
        }
        pub type _Bvector_base__Bit_alloc_type = [u8; 0usize];
        pub type _Bvector_base__Bit_alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Bvector_base__Bit_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl_data {
            pub _M_start: root::std::_Bit_iterator,
            pub _M_finish: root::std::_Bit_iterator,
            pub _M_end_of_storage: root::std::_Bvector_base__Bit_pointer,
        }
        impl Default for _Bvector_base__Bvector_impl_data {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Bvector_base__Bvector_impl_data {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "_Bvector_base__Bvector_impl_data {{ _M_start: {:?}, _M_finish: {:?} }}",
                    self._M_start, self._M_finish
                )
            }
        }
        impl ::std::cmp::PartialEq for _Bvector_base__Bvector_impl_data {
            fn eq(&self, other: &_Bvector_base__Bvector_impl_data) -> bool {
                self._M_start == other._M_start
                    && self._M_finish == other._M_finish
                    && self._M_end_of_storage == other._M_end_of_storage
            }
        }
        #[repr(C)]
        pub struct _Bvector_base__Bvector_impl {
            pub _base_1: root::std::_Bvector_base__Bvector_impl_data,
        }
        impl Default for _Bvector_base__Bvector_impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Bvector_base__Bvector_impl {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Bvector_base__Bvector_impl {{  }}")
            }
        }
        impl ::std::cmp::PartialEq for _Bvector_base__Bvector_impl {
            fn eq(&self, other: &_Bvector_base__Bvector_impl) -> bool {
                self._base_1 == other._base_1
            }
        }
        pub type _Bvector_base_allocator_type<_Alloc> = _Alloc;
        impl Default for _Bvector_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Bvector_base {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Bvector_base {{ _M_impl: {:?} }}", self._M_impl)
            }
        }
        impl ::std::cmp::PartialEq for _Bvector_base {
            fn eq(&self, other: &_Bvector_base) -> bool {
                self._M_impl == other._M_impl
            }
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum _Rb_tree_color {
            _S_red = 0,
            _S_black = 1,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_node_base {
            pub _M_color: root::std::_Rb_tree_color,
            pub _M_parent: root::std::_Rb_tree_node_base__Base_ptr,
            pub _M_left: root::std::_Rb_tree_node_base__Base_ptr,
            pub _M_right: root::std::_Rb_tree_node_base__Base_ptr,
        }
        pub type _Rb_tree_node_base__Base_ptr = *mut root::std::_Rb_tree_node_base;
        pub type _Rb_tree_node_base__Const_Base_ptr = *const root::std::_Rb_tree_node_base;
        #[test]
        fn bindgen_test_layout__Rb_tree_node_base() {
            assert_eq!(
                ::std::mem::size_of::<_Rb_tree_node_base>(),
                32usize,
                concat!("Size of: ", stringify!(_Rb_tree_node_base))
            );
            assert_eq!(
                ::std::mem::align_of::<_Rb_tree_node_base>(),
                8usize,
                concat!("Alignment of ", stringify!(_Rb_tree_node_base))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_color as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_color)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_parent as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_parent)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_left as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_left)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_node_base>()))._M_right as *const _ as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_node_base),
                    "::",
                    stringify!(_M_right)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt18_Rb_tree_node_base10_S_minimumEPS_"]
            pub fn _Rb_tree_node_base__S_minimum(
                __x: root::std::_Rb_tree_node_base__Base_ptr,
            ) -> root::std::_Rb_tree_node_base__Base_ptr;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt18_Rb_tree_node_base10_S_minimumEPKS_"]
            pub fn _Rb_tree_node_base__S_minimum1(
                __x: root::std::_Rb_tree_node_base__Const_Base_ptr,
            ) -> root::std::_Rb_tree_node_base__Const_Base_ptr;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt18_Rb_tree_node_base10_S_maximumEPS_"]
            pub fn _Rb_tree_node_base__S_maximum(
                __x: root::std::_Rb_tree_node_base__Base_ptr,
            ) -> root::std::_Rb_tree_node_base__Base_ptr;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt18_Rb_tree_node_base10_S_maximumEPKS_"]
            pub fn _Rb_tree_node_base__S_maximum1(
                __x: root::std::_Rb_tree_node_base__Const_Base_ptr,
            ) -> root::std::_Rb_tree_node_base__Const_Base_ptr;
        }
        impl Default for _Rb_tree_node_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl _Rb_tree_node_base {
            #[inline]
            pub unsafe fn _S_minimum(
                __x: root::std::_Rb_tree_node_base__Base_ptr,
            ) -> root::std::_Rb_tree_node_base__Base_ptr {
                _Rb_tree_node_base__S_minimum(__x)
            }
            #[inline]
            pub unsafe fn _S_minimum1(
                __x: root::std::_Rb_tree_node_base__Const_Base_ptr,
            ) -> root::std::_Rb_tree_node_base__Const_Base_ptr {
                _Rb_tree_node_base__S_minimum1(__x)
            }
            #[inline]
            pub unsafe fn _S_maximum(
                __x: root::std::_Rb_tree_node_base__Base_ptr,
            ) -> root::std::_Rb_tree_node_base__Base_ptr {
                _Rb_tree_node_base__S_maximum(__x)
            }
            #[inline]
            pub unsafe fn _S_maximum1(
                __x: root::std::_Rb_tree_node_base__Const_Base_ptr,
            ) -> root::std::_Rb_tree_node_base__Const_Base_ptr {
                _Rb_tree_node_base__S_maximum1(__x)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_key_compare<_Key_compare> {
            pub _M_key_compare: _Key_compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key_compare>>,
        }
        impl<_Key_compare> Default for _Rb_tree_key_compare<_Key_compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_header {
            pub _M_header: root::std::_Rb_tree_node_base,
            pub _M_node_count: usize,
        }
        #[test]
        fn bindgen_test_layout__Rb_tree_header() {
            assert_eq!(
                ::std::mem::size_of::<_Rb_tree_header>(),
                40usize,
                concat!("Size of: ", stringify!(_Rb_tree_header))
            );
            assert_eq!(
                ::std::mem::align_of::<_Rb_tree_header>(),
                8usize,
                concat!("Alignment of ", stringify!(_Rb_tree_header))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_header>()))._M_header as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_header),
                    "::",
                    stringify!(_M_header)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<_Rb_tree_header>()))._M_node_count as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(_Rb_tree_header),
                    "::",
                    stringify!(_M_node_count)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15_Rb_tree_header12_M_move_dataERS_"]
            pub fn _Rb_tree_header__M_move_data(
                this: *mut root::std::_Rb_tree_header,
                __from: *mut root::std::_Rb_tree_header,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15_Rb_tree_header8_M_resetEv"]
            pub fn _Rb_tree_header__M_reset(this: *mut root::std::_Rb_tree_header);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15_Rb_tree_headerC1Ev"]
            pub fn _Rb_tree_header__Rb_tree_header(this: *mut root::std::_Rb_tree_header);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15_Rb_tree_headerC1EOS_"]
            pub fn _Rb_tree_header__Rb_tree_header1(
                this: *mut root::std::_Rb_tree_header,
                __x: *mut root::std::_Rb_tree_header,
            );
        }
        impl Default for _Rb_tree_header {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl _Rb_tree_header {
            #[inline]
            pub unsafe fn _M_move_data(&mut self, __from: *mut root::std::_Rb_tree_header) {
                _Rb_tree_header__M_move_data(self, __from)
            }
            #[inline]
            pub unsafe fn _M_reset(&mut self) {
                _Rb_tree_header__M_reset(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Rb_tree_header__Rb_tree_header(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(__x: *mut root::std::_Rb_tree_header) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                _Rb_tree_header__Rb_tree_header1(&mut __bindgen_tmp, __x);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_node {
            pub _base: root::std::_Rb_tree_node_base,
            pub _M_storage: root::__gnu_cxx::__aligned_membuf,
        }
        pub type _Rb_tree_node__Link_type = *mut root::std::_Rb_tree_node;
        impl Default for _Rb_tree_node {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_increment(
                __x: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_increment1(
                __x: *const root::std::_Rb_tree_node_base,
            ) -> *const root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_decrement(
                __x: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base"]
            pub fn _Rb_tree_decrement1(
                __x: *const root::std::_Rb_tree_node_base,
            ) -> *const root::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_iterator {
            pub _M_node: root::std::_Rb_tree_iterator__Base_ptr,
        }
        pub type _Rb_tree_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_iterator_reference<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
        pub type _Rb_tree_iterator_iterator_category = root::std::bidirectional_iterator_tag;
        pub type _Rb_tree_iterator_difference_type = isize;
        pub type _Rb_tree_iterator__Self = root::std::_Rb_tree_iterator;
        pub type _Rb_tree_iterator__Base_ptr = root::std::_Rb_tree_node_base__Base_ptr;
        pub type _Rb_tree_iterator__Link_type = *mut root::std::_Rb_tree_node;
        impl Default for _Rb_tree_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree_const_iterator {
            pub _M_node: root::std::_Rb_tree_const_iterator__Base_ptr,
        }
        pub type _Rb_tree_const_iterator_value_type<_Tp> = _Tp;
        pub type _Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
        pub type _Rb_tree_const_iterator_iterator = root::std::_Rb_tree_iterator;
        pub type _Rb_tree_const_iterator_iterator_category = root::std::bidirectional_iterator_tag;
        pub type _Rb_tree_const_iterator_difference_type = isize;
        pub type _Rb_tree_const_iterator__Self = root::std::_Rb_tree_const_iterator;
        pub type _Rb_tree_const_iterator__Base_ptr = root::std::_Rb_tree_node_base__Const_Base_ptr;
        pub type _Rb_tree_const_iterator__Link_type = *const root::std::_Rb_tree_node;
        impl Default for _Rb_tree_const_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_"]
            pub fn _Rb_tree_insert_and_rebalance(
                __insert_left: bool,
                __x: *mut root::std::_Rb_tree_node_base,
                __p: *mut root::std::_Rb_tree_node_base,
                __header: *mut root::std::_Rb_tree_node_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_"]
            pub fn _Rb_tree_rebalance_for_erase(
                __z: *mut root::std::_Rb_tree_node_base,
                __header: *mut root::std::_Rb_tree_node_base,
            ) -> *mut root::std::_Rb_tree_node_base;
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree {
            pub _M_impl: u8,
        }
        pub type _Rb_tree__Node_allocator = [u8; 0usize];
        pub type _Rb_tree__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Rb_tree__Base_ptr = *mut root::std::_Rb_tree_node_base;
        pub type _Rb_tree__Const_Base_ptr = *const root::std::_Rb_tree_node_base;
        pub type _Rb_tree__Link_type = *mut root::std::_Rb_tree_node;
        pub type _Rb_tree__Const_Link_type = *const root::std::_Rb_tree_node;
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree__Reuse_or_alloc_node {
            pub _M_root: root::std::_Rb_tree__Base_ptr,
            pub _M_nodes: root::std::_Rb_tree__Base_ptr,
            pub _M_t: *mut root::std::_Rb_tree,
        }
        impl Default for _Rb_tree__Reuse_or_alloc_node {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Rb_tree__Alloc_node {
            pub _M_t: *mut root::std::_Rb_tree,
        }
        impl Default for _Rb_tree__Alloc_node {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type _Rb_tree_key_type<_Key> = _Key;
        pub type _Rb_tree_value_type<_Val> = _Val;
        pub type _Rb_tree_pointer<_Val> = *mut root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_pointer<_Val> = *const root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_reference<_Val> = *mut root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_const_reference<_Val> = *const root::std::_Rb_tree_value_type<_Val>;
        pub type _Rb_tree_size_type = usize;
        pub type _Rb_tree_difference_type = isize;
        pub type _Rb_tree_allocator_type<_Alloc> = _Alloc;
        pub type _Rb_tree_reverse_iterator =
            root::std::reverse_iterator<root::std::_Rb_tree_iterator>;
        pub type _Rb_tree_const_reverse_iterator =
            root::std::reverse_iterator<root::std::_Rb_tree_const_iterator>;
        pub type _Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> =
            root::std::_Rb_tree_key_compare<_Key_compare>;
        extern "C" {
            #[link_name = "\u{1}_ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_"]
            pub fn _Rb_tree_black_count(
                __node: *const root::std::_Rb_tree_node_base,
                __root: *const root::std::_Rb_tree_node_base,
            ) -> libc::c_uint;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct tuple_size {
            pub _address: u8,
        }
        pub type __enable_if_has_tuple_size<_Tp> = _Tp;
        pub type __tuple_element_t = u8;
        pub type _Build_index_tuple__IdxTuple = u8;
        pub type _Build_index_tuple___type = u8;
        #[repr(C)]
        pub struct __cow_string {
            pub __bindgen_anon_1: root::std::__cow_string__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union __cow_string__bindgen_ty_1 {
            pub _M_p: *const libc::c_char,
            pub _M_bytes: [libc::c_char; 8usize],
            _bindgen_union_align: u64,
        }
        #[test]
        fn bindgen_test_layout___cow_string__bindgen_ty_1() {
            assert_eq!(
                ::std::mem::size_of::<__cow_string__bindgen_ty_1>(),
                8usize,
                concat!("Size of: ", stringify!(__cow_string__bindgen_ty_1))
            );
            assert_eq!(
                ::std::mem::align_of::<__cow_string__bindgen_ty_1>(),
                8usize,
                concat!("Alignment of ", stringify!(__cow_string__bindgen_ty_1))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_p as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cow_string__bindgen_ty_1),
                    "::",
                    stringify!(_M_p)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<__cow_string__bindgen_ty_1>()))._M_bytes as *const _
                        as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__cow_string__bindgen_ty_1),
                    "::",
                    stringify!(_M_bytes)
                )
            );
        }
        impl Default for __cow_string__bindgen_ty_1 {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for __cow_string__bindgen_ty_1 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "__cow_string__bindgen_ty_1 {{ union }}")
            }
        }
        #[test]
        fn bindgen_test_layout___cow_string() {
            assert_eq!(
                ::std::mem::size_of::<__cow_string>(),
                8usize,
                concat!("Size of: ", stringify!(__cow_string))
            );
            assert_eq!(
                ::std::mem::align_of::<__cow_string>(),
                8usize,
                concat!("Alignment of ", stringify!(__cow_string))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1Ev"]
            pub fn __cow_string___cow_string(this: *mut root::std::__cow_string);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn __cow_string___cow_string1(
                this: *mut root::std::__cow_string,
                arg1: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1EPKcm"]
            pub fn __cow_string___cow_string2(
                this: *mut root::std::__cow_string,
                arg1: *const libc::c_char,
                arg2: usize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKS_"]
            pub fn __cow_string___cow_string3(
                this: *mut root::std::__cow_string,
                arg1: *const root::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringC1EOS_"]
            pub fn __cow_string___cow_string4(
                this: *mut root::std::__cow_string,
                arg1: *mut root::std::__cow_string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12__cow_stringD1Ev"]
            pub fn __cow_string___cow_string_destructor(this: *mut root::std::__cow_string);
        }
        impl Default for __cow_string {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for __cow_string {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(
                    f,
                    "__cow_string {{ __bindgen_anon_1: {:?} }}",
                    self.__bindgen_anon_1
                )
            }
        }
        impl __cow_string {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const libc::c_char, arg2: usize) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string2(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new3(arg1: *const root::std::__cow_string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string3(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new4(arg1: *mut root::std::__cow_string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                __cow_string___cow_string4(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                __cow_string___cow_string_destructor(self)
            }
        }
        pub type __sso_string = root::std::__cxx11::basic_string<libc::c_char>;
        #[repr(C)]
        pub struct logic_error {
            pub _base: root::std::exception,
            pub _M_msg: root::std::__cow_string,
        }
        #[test]
        fn bindgen_test_layout_logic_error() {
            assert_eq!(
                ::std::mem::size_of::<logic_error>(),
                16usize,
                concat!("Size of: ", stringify!(logic_error))
            );
            assert_eq!(
                ::std::mem::align_of::<logic_error>(),
                8usize,
                concat!("Alignment of ", stringify!(logic_error))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<logic_error>()))._M_msg as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(logic_error),
                    "::",
                    stringify!(_M_msg)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn logic_error_logic_error(
                this: *mut root::std::logic_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1EPKc"]
            pub fn logic_error_logic_error1(
                this: *mut root::std::logic_error,
                arg1: *const libc::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorC1ERKS_"]
            pub fn logic_error_logic_error2(
                this: *mut root::std::logic_error,
                arg1: *const root::std::logic_error,
            );
        }
        impl Default for logic_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for logic_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "logic_error {{ _M_msg: {:?} }}", self._M_msg)
            }
        }
        impl logic_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                logic_error_logic_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                logic_error_logic_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::std::logic_error) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                logic_error_logic_error2(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11logic_errorD1Ev"]
            pub fn logic_error_logic_error_destructor(this: *mut root::std::logic_error);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt11logic_error4whatEv"]
            pub fn logic_error_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        #[repr(C)]
        pub struct domain_error {
            pub _base: root::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_domain_error() {
            assert_eq!(
                ::std::mem::size_of::<domain_error>(),
                16usize,
                concat!("Size of: ", stringify!(domain_error))
            );
            assert_eq!(
                ::std::mem::align_of::<domain_error>(),
                8usize,
                concat!("Alignment of ", stringify!(domain_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn domain_error_domain_error(
                this: *mut root::std::domain_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorC1EPKc"]
            pub fn domain_error_domain_error1(
                this: *mut root::std::domain_error,
                arg1: *const libc::c_char,
            );
        }
        impl Default for domain_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for domain_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "domain_error {{  }}")
            }
        }
        impl domain_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                domain_error_domain_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                domain_error_domain_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12domain_errorD1Ev"]
            pub fn domain_error_domain_error_destructor(this: *mut root::std::domain_error);
        }
        #[repr(C)]
        pub struct invalid_argument {
            pub _base: root::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_invalid_argument() {
            assert_eq!(
                ::std::mem::size_of::<invalid_argument>(),
                16usize,
                concat!("Size of: ", stringify!(invalid_argument))
            );
            assert_eq!(
                ::std::mem::align_of::<invalid_argument>(),
                8usize,
                concat!("Alignment of ", stringify!(invalid_argument))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn invalid_argument_invalid_argument(
                this: *mut root::std::invalid_argument,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentC1EPKc"]
            pub fn invalid_argument_invalid_argument1(
                this: *mut root::std::invalid_argument,
                arg1: *const libc::c_char,
            );
        }
        impl Default for invalid_argument {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for invalid_argument {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "invalid_argument {{  }}")
            }
        }
        impl invalid_argument {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                invalid_argument_invalid_argument(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                invalid_argument_invalid_argument1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt16invalid_argumentD1Ev"]
            pub fn invalid_argument_invalid_argument_destructor(
                this: *mut root::std::invalid_argument,
            );
        }
        #[repr(C)]
        pub struct length_error {
            pub _base: root::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_length_error() {
            assert_eq!(
                ::std::mem::size_of::<length_error>(),
                16usize,
                concat!("Size of: ", stringify!(length_error))
            );
            assert_eq!(
                ::std::mem::align_of::<length_error>(),
                8usize,
                concat!("Alignment of ", stringify!(length_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn length_error_length_error(
                this: *mut root::std::length_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorC1EPKc"]
            pub fn length_error_length_error1(
                this: *mut root::std::length_error,
                arg1: *const libc::c_char,
            );
        }
        impl Default for length_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for length_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "length_error {{  }}")
            }
        }
        impl length_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                length_error_length_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                length_error_length_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12length_errorD1Ev"]
            pub fn length_error_length_error_destructor(this: *mut root::std::length_error);
        }
        #[repr(C)]
        pub struct out_of_range {
            pub _base: root::std::logic_error,
        }
        #[test]
        fn bindgen_test_layout_out_of_range() {
            assert_eq!(
                ::std::mem::size_of::<out_of_range>(),
                16usize,
                concat!("Size of: ", stringify!(out_of_range))
            );
            assert_eq!(
                ::std::mem::align_of::<out_of_range>(),
                8usize,
                concat!("Alignment of ", stringify!(out_of_range))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn out_of_range_out_of_range(
                this: *mut root::std::out_of_range,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeC1EPKc"]
            pub fn out_of_range_out_of_range1(
                this: *mut root::std::out_of_range,
                arg1: *const libc::c_char,
            );
        }
        impl Default for out_of_range {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for out_of_range {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "out_of_range {{  }}")
            }
        }
        impl out_of_range {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                out_of_range_out_of_range(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                out_of_range_out_of_range1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12out_of_rangeD1Ev"]
            pub fn out_of_range_out_of_range_destructor(this: *mut root::std::out_of_range);
        }
        #[repr(C)]
        pub struct runtime_error {
            pub _base: root::std::exception,
            pub _M_msg: root::std::__cow_string,
        }
        #[test]
        fn bindgen_test_layout_runtime_error() {
            assert_eq!(
                ::std::mem::size_of::<runtime_error>(),
                16usize,
                concat!("Size of: ", stringify!(runtime_error))
            );
            assert_eq!(
                ::std::mem::align_of::<runtime_error>(),
                8usize,
                concat!("Alignment of ", stringify!(runtime_error))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<runtime_error>()))._M_msg as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(runtime_error),
                    "::",
                    stringify!(_M_msg)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn runtime_error_runtime_error(
                this: *mut root::std::runtime_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1EPKc"]
            pub fn runtime_error_runtime_error1(
                this: *mut root::std::runtime_error,
                arg1: *const libc::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKS_"]
            pub fn runtime_error_runtime_error2(
                this: *mut root::std::runtime_error,
                arg1: *const root::std::runtime_error,
            );
        }
        impl Default for runtime_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for runtime_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "runtime_error {{ _M_msg: {:?} }}", self._M_msg)
            }
        }
        impl runtime_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                runtime_error_runtime_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                runtime_error_runtime_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(arg1: *const root::std::runtime_error) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                runtime_error_runtime_error2(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt13runtime_errorD1Ev"]
            pub fn runtime_error_runtime_error_destructor(this: *mut root::std::runtime_error);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt13runtime_error4whatEv"]
            pub fn runtime_error_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        #[repr(C)]
        pub struct range_error {
            pub _base: root::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_range_error() {
            assert_eq!(
                ::std::mem::size_of::<range_error>(),
                16usize,
                concat!("Size of: ", stringify!(range_error))
            );
            assert_eq!(
                ::std::mem::align_of::<range_error>(),
                8usize,
                concat!("Alignment of ", stringify!(range_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn range_error_range_error(
                this: *mut root::std::range_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorC1EPKc"]
            pub fn range_error_range_error1(
                this: *mut root::std::range_error,
                arg1: *const libc::c_char,
            );
        }
        impl Default for range_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for range_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "range_error {{  }}")
            }
        }
        impl range_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                range_error_range_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                range_error_range_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt11range_errorD1Ev"]
            pub fn range_error_range_error_destructor(this: *mut root::std::range_error);
        }
        #[repr(C)]
        pub struct overflow_error {
            pub _base: root::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_overflow_error() {
            assert_eq!(
                ::std::mem::size_of::<overflow_error>(),
                16usize,
                concat!("Size of: ", stringify!(overflow_error))
            );
            assert_eq!(
                ::std::mem::align_of::<overflow_error>(),
                8usize,
                concat!("Alignment of ", stringify!(overflow_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn overflow_error_overflow_error(
                this: *mut root::std::overflow_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorC1EPKc"]
            pub fn overflow_error_overflow_error1(
                this: *mut root::std::overflow_error,
                arg1: *const libc::c_char,
            );
        }
        impl Default for overflow_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for overflow_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "overflow_error {{  }}")
            }
        }
        impl overflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                overflow_error_overflow_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                overflow_error_overflow_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt14overflow_errorD1Ev"]
            pub fn overflow_error_overflow_error_destructor(this: *mut root::std::overflow_error);
        }
        #[repr(C)]
        pub struct underflow_error {
            pub _base: root::std::runtime_error,
        }
        #[test]
        fn bindgen_test_layout_underflow_error() {
            assert_eq!(
                ::std::mem::size_of::<underflow_error>(),
                16usize,
                concat!("Size of: ", stringify!(underflow_error))
            );
            assert_eq!(
                ::std::mem::align_of::<underflow_error>(),
                8usize,
                concat!("Alignment of ", stringify!(underflow_error))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn underflow_error_underflow_error(
                this: *mut root::std::underflow_error,
                __arg: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorC1EPKc"]
            pub fn underflow_error_underflow_error1(
                this: *mut root::std::underflow_error,
                arg1: *const libc::c_char,
            );
        }
        impl Default for underflow_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for underflow_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "underflow_error {{  }}")
            }
        }
        impl underflow_error {
            #[inline]
            pub unsafe fn new(__arg: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                underflow_error_underflow_error(&mut __bindgen_tmp, __arg);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                underflow_error_underflow_error1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15underflow_errorD1Ev"]
            pub fn underflow_error_underflow_error_destructor(
                this: *mut root::std::underflow_error,
            );
        }
        pub type __array_traits__Type<_Tp> = *mut _Tp;
        pub type __array_traits__Is_swappable = root::std::__is_swappable;
        pub type __array_traits__Is_nothrow_swappable = root::std::__is_nothrow_swappable;
        pub type array_value_type<_Tp> = _Tp;
        pub type array_pointer<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_pointer<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_reference<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_reference<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_iterator<_Tp> = *mut root::std::array_value_type<_Tp>;
        pub type array_const_iterator<_Tp> = *const root::std::array_value_type<_Tp>;
        pub type array_size_type = usize;
        pub type array_difference_type = isize;
        pub type array_reverse_iterator<_Tp> =
            root::std::reverse_iterator<root::std::array_iterator<_Tp>>;
        pub type array_const_reverse_iterator<_Tp> =
            root::std::reverse_iterator<root::std::array_const_iterator<_Tp>>;
        pub type array__AT_Type = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __erased_type {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___erased_type() {
            assert_eq!(
                ::std::mem::size_of::<__erased_type>(),
                1usize,
                concat!("Size of: ", stringify!(__erased_type))
            );
            assert_eq!(
                ::std::mem::align_of::<__erased_type>(),
                1usize,
                concat!("Alignment of ", stringify!(__erased_type))
            );
        }
        pub type __is_erased_or_convertible = root::std::__or_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct allocator_arg_t {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout_allocator_arg_t() {
            assert_eq!(
                ::std::mem::size_of::<allocator_arg_t>(),
                1usize,
                concat!("Size of: ", stringify!(allocator_arg_t))
            );
            assert_eq!(
                ::std::mem::align_of::<allocator_arg_t>(),
                1usize,
                concat!("Alignment of ", stringify!(allocator_arg_t))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15allocator_arg_tC1Ev"]
            pub fn allocator_arg_t_allocator_arg_t(this: *mut root::std::allocator_arg_t);
        }
        impl allocator_arg_t {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                allocator_arg_t_allocator_arg_t(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL13allocator_arg"]
            pub static allocator_arg: root::std::allocator_arg_t;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_allocator_helper {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct uses_allocator {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc_base {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___uses_alloc_base() {
            assert_eq!(
                ::std::mem::size_of::<__uses_alloc_base>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__uses_alloc_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc_base))
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc0 {
            pub _M_a: root::std::__uses_alloc0__Sink,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc0__Sink {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout___uses_alloc0__Sink() {
            assert_eq!(
                ::std::mem::size_of::<__uses_alloc0__Sink>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc0__Sink))
            );
            assert_eq!(
                ::std::mem::align_of::<__uses_alloc0__Sink>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc0__Sink))
            );
        }
        #[test]
        fn bindgen_test_layout___uses_alloc0() {
            assert_eq!(
                ::std::mem::size_of::<__uses_alloc0>(),
                1usize,
                concat!("Size of: ", stringify!(__uses_alloc0))
            );
            assert_eq!(
                ::std::mem::align_of::<__uses_alloc0>(),
                1usize,
                concat!("Alignment of ", stringify!(__uses_alloc0))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<__uses_alloc0>()))._M_a as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(__uses_alloc0),
                    "::",
                    stringify!(_M_a)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc1<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        impl<_Alloc> Default for __uses_alloc1<_Alloc> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __uses_alloc2<_Alloc> {
            pub _M_a: *const _Alloc,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        impl<_Alloc> Default for __uses_alloc2<_Alloc> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __uses_alloc_t = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_uses_allocator_predicate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_nothrow_uses_allocator_constructible {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_empty_non_tuple {
            pub _address: u8,
        }
        impl Default for __is_empty_non_tuple {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type __empty_not_final = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct tuple {
            pub _address: u8,
        }
        pub type tuple__Inherited = u8;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct tuple__TC2 {
            pub _address: u8,
        }
        pub type tuple__TCC = u8;
        pub type tuple__TMC = u8;
        pub type tuple__TMCT = u8;
        pub type tuple__TNTC = u8;
        #[test]
        fn __bindgen_test_layout_tuple_open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::tuple>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::tuple)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::tuple>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::tuple)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __do_make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __make_tuple {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __combine_tuples {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___combine_tuples_open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__combine_tuples>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__combine_tuples)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__combine_tuples>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__combine_tuples)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __tuple_cat_result {
            pub _address: u8,
        }
        pub type __tuple_cat_result___type = root::std::__combine_tuples;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __make_1st_indices {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___make_1st_indices_open0_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__make_1st_indices>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__make_1st_indices)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__make_1st_indices>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__make_1st_indices)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __tuple_concater {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Swallow_assign {
            pub _address: u8,
        }
        #[test]
        fn bindgen_test_layout__Swallow_assign() {
            assert_eq!(
                ::std::mem::size_of::<_Swallow_assign>(),
                1usize,
                concat!("Size of: ", stringify!(_Swallow_assign))
            );
            assert_eq!(
                ::std::mem::align_of::<_Swallow_assign>(),
                1usize,
                concat!("Alignment of ", stringify!(_Swallow_assign))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL6ignore"]
            pub static ignore: root::std::_Swallow_assign;
        }
        #[repr(C)]
        pub struct map {
            pub _M_t: root::std::map__Rep_type,
        }
        pub type map_key_type<_Key> = _Key;
        pub type map_mapped_type<_Tp> = _Tp;
        pub type map_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
        pub type map_key_compare<_Compare> = _Compare;
        pub type map_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct map_value_compare<_Compare> {
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for map_value_compare<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type map__Pair_alloc_type = [u8; 0usize];
        pub type map__Rep_type = root::std::_Rb_tree;
        pub type map__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type map_pointer = [u8; 0usize];
        pub type map_const_pointer = [u8; 0usize];
        pub type map_reference = [u8; 0usize];
        pub type map_const_reference = [u8; 0usize];
        pub type map_iterator = [u8; 0usize];
        pub type map_const_iterator = [u8; 0usize];
        pub type map_size_type = [u8; 0usize];
        pub type map_difference_type = [u8; 0usize];
        pub type map_reverse_iterator = [u8; 0usize];
        pub type map_const_reverse_iterator = [u8; 0usize];
        impl Default for map {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for map {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "map {{ _M_t: {:?} }}", self._M_t)
            }
        }
        impl ::std::cmp::PartialEq for map {
            fn eq(&self, other: &map) -> bool {
                self._M_t == other._M_t
            }
        }
        #[repr(C)]
        pub struct multimap {
            pub _M_t: root::std::multimap__Rep_type,
        }
        pub type multimap_key_type<_Key> = _Key;
        pub type multimap_mapped_type<_Tp> = _Tp;
        pub type multimap_value_type<_Key, _Tp> = root::std::pair<_Key, _Tp>;
        pub type multimap_key_compare<_Compare> = _Compare;
        pub type multimap_allocator_type<_Alloc> = _Alloc;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct multimap_value_compare<_Compare> {
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        impl<_Compare> Default for multimap_value_compare<_Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type multimap__Pair_alloc_type = [u8; 0usize];
        pub type multimap__Rep_type = root::std::_Rb_tree;
        pub type multimap__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type multimap_pointer = [u8; 0usize];
        pub type multimap_const_pointer = [u8; 0usize];
        pub type multimap_reference = [u8; 0usize];
        pub type multimap_const_reference = [u8; 0usize];
        pub type multimap_iterator = [u8; 0usize];
        pub type multimap_const_iterator = [u8; 0usize];
        pub type multimap_size_type = [u8; 0usize];
        pub type multimap_difference_type = [u8; 0usize];
        pub type multimap_reverse_iterator = [u8; 0usize];
        pub type multimap_const_reverse_iterator = [u8; 0usize];
        impl Default for multimap {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for multimap {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "multimap {{ _M_t: {:?} }}", self._M_t)
            }
        }
        impl ::std::cmp::PartialEq for multimap {
            fn eq(&self, other: &multimap) -> bool {
                self._M_t == other._M_t
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt16__deque_buf_sizem"]
            pub fn __deque_buf_size(__size: usize) -> usize;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Deque_iterator {
            pub _M_cur: root::std::_Deque_iterator__Elt_pointer,
            pub _M_first: root::std::_Deque_iterator__Elt_pointer,
            pub _M_last: root::std::_Deque_iterator__Elt_pointer,
            pub _M_node: root::std::_Deque_iterator__Map_pointer,
        }
        pub type _Deque_iterator___ptr_to = root::std::pointer_traits;
        pub type _Deque_iterator___iter = root::std::_Deque_iterator;
        pub type _Deque_iterator_iterator = root::std::_Deque_iterator___iter;
        pub type _Deque_iterator_const_iterator = root::std::_Deque_iterator___iter;
        pub type _Deque_iterator__Elt_pointer = root::std::_Deque_iterator___ptr_to;
        pub type _Deque_iterator__Map_pointer = root::std::_Deque_iterator___ptr_to;
        pub type _Deque_iterator_iterator_category = root::std::random_access_iterator_tag;
        pub type _Deque_iterator_value_type<_Tp> = _Tp;
        pub type _Deque_iterator_pointer<_Ptr> = _Ptr;
        pub type _Deque_iterator_reference<_Ref> = _Ref;
        pub type _Deque_iterator_size_type = usize;
        pub type _Deque_iterator_difference_type = isize;
        pub type _Deque_iterator__Self = root::std::_Deque_iterator;
        impl Default for _Deque_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        pub struct _Deque_base {
            pub _M_impl: root::std::_Deque_base__Deque_impl,
        }
        pub type _Deque_base__Tp_alloc_type = [u8; 0usize];
        pub type _Deque_base__Alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Deque_base__Ptr = [u8; 0usize];
        pub type _Deque_base__Ptr_const = [u8; 0usize];
        pub type _Deque_base__Map_alloc_type = [u8; 0usize];
        pub type _Deque_base__Map_alloc_traits = root::__gnu_cxx::__alloc_traits;
        pub type _Deque_base_allocator_type<_Alloc> = _Alloc;
        pub type _Deque_base_size_type = [u8; 0usize];
        pub type _Deque_base_iterator = root::std::_Deque_iterator;
        pub type _Deque_base_const_iterator = root::std::_Deque_iterator;
        pub type _Deque_base__Map_pointer = [u8; 0usize];
        #[repr(C)]
        pub struct _Deque_base__Deque_impl {
            pub _M_map: root::std::_Deque_base__Map_pointer,
            pub _M_map_size: usize,
            pub _M_start: root::std::_Deque_base_iterator,
            pub _M_finish: root::std::_Deque_base_iterator,
        }
        impl Default for _Deque_base__Deque_impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Deque_base__Deque_impl {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write ! ( f , "_Deque_base__Deque_impl {{ _M_map_size: {:?}, _M_start: {:?}, _M_finish: {:?} }}" , self . _M_map_size , self . _M_start , self . _M_finish )
            }
        }
        impl ::std::cmp::PartialEq for _Deque_base__Deque_impl {
            fn eq(&self, other: &_Deque_base__Deque_impl) -> bool {
                self._M_map == other._M_map
                    && self._M_map_size == other._M_map_size
                    && self._M_start == other._M_start
                    && self._M_finish == other._M_finish
            }
        }
        pub const _Deque_base__S_initial_map_size: root::std::_Deque_base__bindgen_ty_1 =
            _Deque_base__bindgen_ty_1::_S_initial_map_size;
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum _Deque_base__bindgen_ty_1 {
            _S_initial_map_size = 0,
        }
        impl Default for _Deque_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for _Deque_base {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "_Deque_base {{ _M_impl: {:?} }}", self._M_impl)
            }
        }
        impl ::std::cmp::PartialEq for _Deque_base {
            fn eq(&self, other: &_Deque_base) -> bool {
                self._M_impl == other._M_impl
            }
        }
        #[repr(C)]
        pub struct deque {
            pub _base: root::std::_Deque_base,
        }
        pub type deque__Base = root::std::_Deque_base;
        pub type deque__Tp_alloc_type = root::std::deque__Base;
        pub type deque__Alloc_traits = root::std::deque__Base;
        pub type deque__Map_pointer = root::std::deque__Base;
        pub type deque_value_type<_Tp> = _Tp;
        pub type deque_pointer = root::std::deque__Alloc_traits;
        pub type deque_const_pointer = root::std::deque__Alloc_traits;
        pub type deque_reference = root::std::deque__Alloc_traits;
        pub type deque_const_reference = root::std::deque__Alloc_traits;
        pub type deque_iterator = root::std::deque__Base;
        pub type deque_const_iterator = root::std::deque__Base;
        pub type deque_const_reverse_iterator =
            root::std::reverse_iterator<root::std::deque_const_iterator>;
        pub type deque_reverse_iterator = root::std::reverse_iterator<root::std::deque_iterator>;
        pub type deque_size_type = usize;
        pub type deque_difference_type = isize;
        pub type deque_allocator_type<_Alloc> = _Alloc;
        impl Default for deque {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for deque {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "deque {{  }}")
            }
        }
        impl ::std::cmp::PartialEq for deque {
            fn eq(&self, other: &deque) -> bool {
                self._base == other._base
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct queue<_Sequence> {
            pub c: _Sequence,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
        }
        pub type queue__Uses = u8;
        pub type queue_value_type = [u8; 0usize];
        pub type queue_reference = [u8; 0usize];
        pub type queue_const_reference = [u8; 0usize];
        pub type queue_size_type = [u8; 0usize];
        pub type queue_container_type<_Sequence> = _Sequence;
        impl<_Sequence> Default for queue<_Sequence> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct priority_queue<_Sequence, _Compare> {
            pub c: _Sequence,
            pub comp: _Compare,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
            pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
        }
        pub type priority_queue__Uses = u8;
        pub type priority_queue_value_type = [u8; 0usize];
        pub type priority_queue_reference = [u8; 0usize];
        pub type priority_queue_const_reference = [u8; 0usize];
        pub type priority_queue_size_type = [u8; 0usize];
        pub type priority_queue_container_type<_Sequence> = _Sequence;
        pub type priority_queue_value_compare<_Compare> = _Compare;
        impl<_Sequence, _Compare> Default for priority_queue<_Sequence, _Compare> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct locale {
            pub _M_impl: *mut root::std::locale__Impl,
        }
        pub type locale_category = libc::c_int;
        pub const locale__S_categories_size: root::std::locale__bindgen_ty_1 =
            locale__bindgen_ty_1::_S_categories_size;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum locale__bindgen_ty_1 {
            _S_categories_size = 12,
        }
        pub const locale_none: root::std::locale_category = 0;
        pub const locale_ctype: root::std::locale_category = 1;
        pub const locale_numeric: root::std::locale_category = 2;
        pub const locale_collate: root::std::locale_category = 4;
        pub const locale_time: root::std::locale_category = 8;
        pub const locale_monetary: root::std::locale_category = 16;
        pub const locale_messages: root::std::locale_category = 32;
        pub const locale_all: root::std::locale_category = 63;
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale10_S_classicE"]
            pub static mut locale__S_classic: *mut root::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale9_S_globalE"]
            pub static mut locale__S_global: *mut root::std::locale__Impl;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale13_S_categoriesE"]
            pub static locale__S_categories: *const *const libc::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale7_S_onceE"]
            pub static mut locale__S_once: root::__gthread_once_t;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale17_S_twinned_facetsE"]
            pub static mut locale__S_twinned_facets: [*const root::std::locale_id; 0usize];
        }
        #[test]
        fn bindgen_test_layout_locale() {
            assert_eq!(
                ::std::mem::size_of::<locale>(),
                8usize,
                concat!("Size of: ", stringify!(locale))
            );
            assert_eq!(
                ::std::mem::align_of::<locale>(),
                8usize,
                concat!("Alignment of ", stringify!(locale))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale>()))._M_impl as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale),
                    "::",
                    stringify!(_M_impl)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt6locale4nameB5cxx11Ev"]
            pub fn locale_name(this: *const root::std::locale) -> root::std::__cxx11::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale6globalERKS_"]
            pub fn locale_global(__loc: *const root::std::locale) -> root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale7classicEv"]
            pub fn locale_classic() -> *const root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1Ev"]
            pub fn locale_locale(this: *mut root::std::locale);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_"]
            pub fn locale_locale1(this: *mut root::std::locale, __other: *const root::std::locale);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1EPKc"]
            pub fn locale_locale2(this: *mut root::std::locale, __s: *const libc::c_char);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_PKci"]
            pub fn locale_locale3(
                this: *mut root::std::locale,
                __base: *const root::std::locale,
                __s: *const libc::c_char,
                __cat: root::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn locale_locale4(
                this: *mut root::std::locale,
                __s: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
            pub fn locale_locale5(
                this: *mut root::std::locale,
                __base: *const root::std::locale,
                __s: *const root::std::__cxx11::string,
                __cat: root::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeC1ERKS_S1_i"]
            pub fn locale_locale6(
                this: *mut root::std::locale,
                __base: *const root::std::locale,
                __add: *const root::std::locale,
                __cat: root::std::locale_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6localeD1Ev"]
            pub fn locale_locale_destructor(this: *mut root::std::locale);
        }
        impl Default for locale {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl locale {
            #[inline]
            pub unsafe fn name(&self) -> root::std::__cxx11::string {
                locale_name(self)
            }
            #[inline]
            pub unsafe fn global(__loc: *const root::std::locale) -> root::std::locale {
                locale_global(__loc)
            }
            #[inline]
            pub unsafe fn classic() -> *const root::std::locale {
                locale_classic()
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(__other: *const root::std::locale) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale1(&mut __bindgen_tmp, __other);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(__s: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale2(&mut __bindgen_tmp, __s);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new3(
                __base: *const root::std::locale,
                __s: *const libc::c_char,
                __cat: root::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale3(&mut __bindgen_tmp, __base, __s, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new4(__s: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale4(&mut __bindgen_tmp, __s);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new5(
                __base: *const root::std::locale,
                __s: *const root::std::__cxx11::string,
                __cat: root::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale5(&mut __bindgen_tmp, __base, __s, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new6(
                __base: *const root::std::locale,
                __add: *const root::std::locale,
                __cat: root::std::locale_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_locale6(&mut __bindgen_tmp, __base, __add, __cat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                locale_locale_destructor(self)
            }
        }
        #[repr(C)]
        pub struct locale_facet__bindgen_vtable(libc::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct locale_facet {
            pub vtable_: *const locale_facet__bindgen_vtable,
            pub _M_refcount: root::_Atomic_word,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct locale_facet___shim {
            _unused: [u8; 0],
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet11_S_c_localeE"]
            pub static mut locale_facet__S_c_locale: root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet9_S_c_nameE"]
            pub static mut locale_facet__S_c_name: [libc::c_char; 2usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet7_S_onceE"]
            pub static mut locale_facet__S_once: root::__gthread_once_t;
        }
        #[test]
        fn bindgen_test_layout_locale_facet() {
            assert_eq!(
                ::std::mem::size_of::<locale_facet>(),
                16usize,
                concat!("Size of: ", stringify!(locale_facet))
            );
            assert_eq!(
                ::std::mem::align_of::<locale_facet>(),
                8usize,
                concat!("Alignment of ", stringify!(locale_facet))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale_facet>()))._M_refcount as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale_facet),
                    "::",
                    stringify!(_M_refcount)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet18_S_create_c_localeERP15__locale_structPKcS2_"]
            pub fn locale_facet__S_create_c_locale(
                __cloc: *mut root::std::__c_locale,
                __s: *const libc::c_char,
                __old: root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet17_S_clone_c_localeERP15__locale_struct"]
            pub fn locale_facet__S_clone_c_locale(
                __cloc: *mut root::std::__c_locale,
            ) -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet19_S_destroy_c_localeERP15__locale_struct"]
            pub fn locale_facet__S_destroy_c_locale(__cloc: *mut root::std::__c_locale);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet20_S_lc_ctype_c_localeEP15__locale_structPKc"]
            pub fn locale_facet__S_lc_ctype_c_locale(
                __cloc: root::std::__c_locale,
                __s: *const libc::c_char,
            ) -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet15_S_get_c_localeEv"]
            pub fn locale_facet__S_get_c_locale() -> root::std::__c_locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facet13_S_get_c_nameEv"]
            pub fn locale_facet__S_get_c_name() -> *const libc::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facetC1Em"]
            pub fn locale_facet_facet(this: *mut root::std::locale_facet, __refs: usize);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facetC1ERKS0_"]
            pub fn locale_facet_facet1(
                this: *mut root::std::locale_facet,
                arg1: *const root::std::locale_facet,
            );
        }
        impl Default for locale_facet {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl locale_facet {
            #[inline]
            pub unsafe fn _S_create_c_locale(
                __cloc: *mut root::std::__c_locale,
                __s: *const libc::c_char,
                __old: root::std::__c_locale,
            ) {
                locale_facet__S_create_c_locale(__cloc, __s, __old)
            }
            #[inline]
            pub unsafe fn _S_clone_c_locale(
                __cloc: *mut root::std::__c_locale,
            ) -> root::std::__c_locale {
                locale_facet__S_clone_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_destroy_c_locale(__cloc: *mut root::std::__c_locale) {
                locale_facet__S_destroy_c_locale(__cloc)
            }
            #[inline]
            pub unsafe fn _S_lc_ctype_c_locale(
                __cloc: root::std::__c_locale,
                __s: *const libc::c_char,
            ) -> root::std::__c_locale {
                locale_facet__S_lc_ctype_c_locale(__cloc, __s)
            }
            #[inline]
            pub unsafe fn _S_get_c_locale() -> root::std::__c_locale {
                locale_facet__S_get_c_locale()
            }
            #[inline]
            pub unsafe fn _S_get_c_name() -> *const libc::c_char {
                locale_facet__S_get_c_name()
            }
            #[inline]
            pub unsafe fn new(__refs: usize) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_facet_facet(&mut __bindgen_tmp, __refs);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::locale_facet) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_facet_facet1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5facetD1Ev"]
            pub fn locale_facet_facet_destructor(this: *mut root::std::locale_facet);
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct locale_id {
            pub _M_index: usize,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale2id11_S_refcountE"]
            pub static mut locale_id__S_refcount: root::_Atomic_word;
        }
        #[test]
        fn bindgen_test_layout_locale_id() {
            assert_eq!(
                ::std::mem::size_of::<locale_id>(),
                8usize,
                concat!("Size of: ", stringify!(locale_id))
            );
            assert_eq!(
                ::std::mem::align_of::<locale_id>(),
                8usize,
                concat!("Alignment of ", stringify!(locale_id))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale_id>()))._M_index as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale_id),
                    "::",
                    stringify!(_M_index)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt6locale2id5_M_idEv"]
            pub fn locale_id__M_id(this: *const root::std::locale_id) -> usize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale2idC1Ev"]
            pub fn locale_id_id(this: *mut root::std::locale_id);
        }
        impl locale_id {
            #[inline]
            pub unsafe fn _M_id(&self) -> usize {
                locale_id__M_id(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                locale_id_id(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct locale__Impl {
            pub _M_refcount: root::_Atomic_word,
            pub _M_facets: *mut *const root::std::locale_facet,
            pub _M_facets_size: usize,
            pub _M_caches: *mut *const root::std::locale_facet,
            pub _M_names: *mut *mut libc::c_char,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl11_S_id_ctypeE"]
            pub static mut locale__Impl__S_id_ctype: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_numericE"]
            pub static mut locale__Impl__S_id_numeric: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_collateE"]
            pub static mut locale__Impl__S_id_collate: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl10_S_id_timeE"]
            pub static mut locale__Impl__S_id_time: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_monetaryE"]
            pub static mut locale__Impl__S_id_monetary: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_messagesE"]
            pub static mut locale__Impl__S_id_messages: [*const root::std::locale_id; 0usize];
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt6locale5_Impl19_S_facet_categoriesE"]
            pub static mut locale__Impl__S_facet_categories:
                [*const *const root::std::locale_id; 0usize];
        }
        #[test]
        fn bindgen_test_layout_locale__Impl() {
            assert_eq!(
                ::std::mem::size_of::<locale__Impl>(),
                40usize,
                concat!("Size of: ", stringify!(locale__Impl))
            );
            assert_eq!(
                ::std::mem::align_of::<locale__Impl>(),
                8usize,
                concat!("Alignment of ", stringify!(locale__Impl))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_refcount as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_refcount)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_facets as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_facets)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<locale__Impl>()))._M_facets_size as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_facets_size)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_caches as *const _ as usize },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_caches)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<locale__Impl>()))._M_names as *const _ as usize },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(locale__Impl),
                    "::",
                    stringify!(_M_names)
                )
            );
        }
        impl Default for locale__Impl {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub type collate_char_type<T> = T;
        extern "C" {
            pub static mut id: root::std::locale_id;
        }
        pub type collate_byname_char_type<T> = T;
        #[test]
        fn __bindgen_test_layout_collate_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::collate>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::collate)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::collate>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::collate)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_byname_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::collate_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::collate_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::collate_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::collate_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::collate>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::collate)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::collate>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::collate)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_collate_byname_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::collate_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::collate_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::collate_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::collate_byname)
                )
            );
        }
        impl root::std::errc {
            pub const operation_not_supported: root::std::errc = errc::not_supported;
        }
        impl root::std::errc {
            pub const resource_unavailable_try_again: root::std::errc = errc::operation_would_block;
        }
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum errc {
            address_family_not_supported = 97,
            address_in_use = 98,
            address_not_available = 99,
            already_connected = 106,
            argument_list_too_long = 7,
            argument_out_of_domain = 33,
            bad_address = 14,
            bad_file_descriptor = 9,
            bad_message = 74,
            broken_pipe = 32,
            connection_aborted = 103,
            connection_already_in_progress = 114,
            connection_refused = 111,
            connection_reset = 104,
            cross_device_link = 18,
            destination_address_required = 89,
            device_or_resource_busy = 16,
            directory_not_empty = 39,
            executable_format_error = 8,
            file_exists = 17,
            file_too_large = 27,
            filename_too_long = 36,
            function_not_supported = 38,
            host_unreachable = 113,
            identifier_removed = 43,
            illegal_byte_sequence = 84,
            inappropriate_io_control_operation = 25,
            interrupted = 4,
            invalid_argument = 22,
            invalid_seek = 29,
            io_error = 5,
            is_a_directory = 21,
            message_size = 90,
            network_down = 100,
            network_reset = 102,
            network_unreachable = 101,
            no_buffer_space = 105,
            no_child_process = 10,
            no_link = 67,
            no_lock_available = 37,
            no_message_available = 61,
            no_message = 42,
            no_protocol_option = 92,
            no_space_on_device = 28,
            no_stream_resources = 63,
            no_such_device_or_address = 6,
            no_such_device = 19,
            no_such_file_or_directory = 2,
            no_such_process = 3,
            not_a_directory = 20,
            not_a_socket = 88,
            not_a_stream = 60,
            not_connected = 107,
            not_enough_memory = 12,
            not_supported = 95,
            operation_canceled = 125,
            operation_in_progress = 115,
            operation_not_permitted = 1,
            operation_would_block = 11,
            owner_dead = 130,
            permission_denied = 13,
            protocol_error = 71,
            protocol_not_supported = 93,
            read_only_file_system = 30,
            resource_deadlock_would_occur = 35,
            result_out_of_range = 34,
            state_not_recoverable = 131,
            stream_timeout = 62,
            text_file_busy = 26,
            timed_out = 110,
            too_many_files_open_in_system = 23,
            too_many_files_open = 24,
            too_many_links = 31,
            too_many_symbolic_link_levels = 40,
            value_too_large = 75,
            wrong_protocol_type = 91,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_error_code_enum {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct is_error_condition_enum {
            pub _base: root::std::false_type,
        }
        #[test]
        fn __bindgen_test_layout_is_error_condition_enum_open0_errc_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::is_error_condition_enum>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::is_error_condition_enum)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::is_error_condition_enum>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::is_error_condition_enum)
                )
            );
        }
        pub mod _V2 {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            pub struct error_category__bindgen_vtable(libc::c_void);
            #[repr(C)]
            #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct error_category {
                pub vtable_: *const error_category__bindgen_vtable,
            }
            #[test]
            fn bindgen_test_layout_error_category() {
                assert_eq!(
                    ::std::mem::size_of::<error_category>(),
                    8usize,
                    concat!("Size of: ", stringify!(error_category))
                );
                assert_eq!(
                    ::std::mem::align_of::<error_category>(),
                    8usize,
                    concat!("Alignment of ", stringify!(error_category))
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt3_V214error_categoryC2Ev"]
                pub fn error_category_error_category(this: *mut root::std::_V2::error_category);
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt3_V214error_categoryC2ERKS0_"]
                pub fn error_category_error_category1(
                    this: *mut root::std::_V2::error_category,
                    arg1: *const root::std::_V2::error_category,
                );
            }
            impl Default for error_category {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl error_category {
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    error_category_error_category(&mut __bindgen_tmp);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(arg1: *const root::std::_V2::error_category) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    error_category_error_category1(&mut __bindgen_tmp, arg1);
                    __bindgen_tmp
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt3_V214error_categoryD1Ev"]
                pub fn error_category_error_category_destructor(
                    this: *mut root::std::_V2::error_category,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt3_V214error_category23default_error_conditionEi"]
                pub fn error_category_default_error_condition(
                    this: *mut libc::c_void,
                    __i: libc::c_int,
                ) -> root::std::error_condition;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition"]
                pub fn error_category_equivalent(
                    this: *mut libc::c_void,
                    __i: libc::c_int,
                    __cond: *const root::std::error_condition,
                ) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentERKSt10error_codei"]
                pub fn error_category_equivalent1(
                    this: *mut libc::c_void,
                    __code: *const root::std::error_code,
                    __i: libc::c_int,
                ) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt3_V215system_categoryEv"]
                pub fn system_category() -> *const root::std::_V2::error_category;
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt3_V216generic_categoryEv"]
                pub fn generic_category() -> *const root::std::_V2::error_category;
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15make_error_codeSt4errc"]
            pub fn make_error_code(arg1: root::std::errc) -> root::std::error_code;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct error_code {
            pub _M_value: libc::c_int,
            pub _M_cat: *const root::std::_V2::error_category,
        }
        #[test]
        fn bindgen_test_layout_error_code() {
            assert_eq!(
                ::std::mem::size_of::<error_code>(),
                16usize,
                concat!("Size of: ", stringify!(error_code))
            );
            assert_eq!(
                ::std::mem::align_of::<error_code>(),
                8usize,
                concat!("Alignment of ", stringify!(error_code))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<error_code>()))._M_value as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_code),
                    "::",
                    stringify!(_M_value)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<error_code>()))._M_cat as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_code),
                    "::",
                    stringify!(_M_cat)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10error_code6assignEiRKNSt3_V214error_categoryE"]
            pub fn error_code_assign(
                this: *mut root::std::error_code,
                __v: libc::c_int,
                __cat: *const root::std::_V2::error_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10error_code5clearEv"]
            pub fn error_code_clear(this: *mut root::std::error_code);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10error_code5valueEv"]
            pub fn error_code_value(this: *const root::std::error_code) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10error_code8categoryEv"]
            pub fn error_code_category(
                this: *const root::std::error_code,
            ) -> *const root::std::_V2::error_category;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10error_code23default_error_conditionEv"]
            pub fn error_code_default_error_condition(
                this: *const root::std::error_code,
            ) -> root::std::error_condition;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt10error_code7messageB5cxx11Ev"]
            pub fn error_code_message(
                this: *const root::std::error_code,
            ) -> root::std::__cxx11::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10error_codeC1Ev"]
            pub fn error_code_error_code(this: *mut root::std::error_code);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE"]
            pub fn error_code_error_code1(
                this: *mut root::std::error_code,
                __v: libc::c_int,
                __cat: *const root::std::_V2::error_category,
            );
        }
        impl Default for error_code {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl error_code {
            #[inline]
            pub unsafe fn assign(
                &mut self,
                __v: libc::c_int,
                __cat: *const root::std::_V2::error_category,
            ) {
                error_code_assign(self, __v, __cat)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                error_code_clear(self)
            }
            #[inline]
            pub unsafe fn value(&self) -> libc::c_int {
                error_code_value(self)
            }
            #[inline]
            pub unsafe fn category(&self) -> *const root::std::_V2::error_category {
                error_code_category(self)
            }
            #[inline]
            pub unsafe fn default_error_condition(&self) -> root::std::error_condition {
                error_code_default_error_condition(self)
            }
            #[inline]
            pub unsafe fn message(&self) -> root::std::__cxx11::string {
                error_code_message(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                error_code_error_code(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(
                __v: libc::c_int,
                __cat: *const root::std::_V2::error_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                error_code_error_code1(&mut __bindgen_tmp, __v, __cat);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20make_error_conditionSt4errc"]
            pub fn make_error_condition(arg1: root::std::errc) -> root::std::error_condition;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct error_condition {
            pub _M_value: libc::c_int,
            pub _M_cat: *const root::std::_V2::error_category,
        }
        #[test]
        fn bindgen_test_layout_error_condition() {
            assert_eq!(
                ::std::mem::size_of::<error_condition>(),
                16usize,
                concat!("Size of: ", stringify!(error_condition))
            );
            assert_eq!(
                ::std::mem::align_of::<error_condition>(),
                8usize,
                concat!("Alignment of ", stringify!(error_condition))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<error_condition>()))._M_value as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_condition),
                    "::",
                    stringify!(_M_value)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<error_condition>()))._M_cat as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(error_condition),
                    "::",
                    stringify!(_M_cat)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15error_condition6assignEiRKNSt3_V214error_categoryE"]
            pub fn error_condition_assign(
                this: *mut root::std::error_condition,
                __v: libc::c_int,
                __cat: *const root::std::_V2::error_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15error_condition5clearEv"]
            pub fn error_condition_clear(this: *mut root::std::error_condition);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt15error_condition5valueEv"]
            pub fn error_condition_value(this: *const root::std::error_condition) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt15error_condition8categoryEv"]
            pub fn error_condition_category(
                this: *const root::std::error_condition,
            ) -> *const root::std::_V2::error_category;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt15error_condition7messageB5cxx11Ev"]
            pub fn error_condition_message(
                this: *const root::std::error_condition,
            ) -> root::std::__cxx11::string;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15error_conditionC1Ev"]
            pub fn error_condition_error_condition(this: *mut root::std::error_condition);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt15error_conditionC1EiRKNSt3_V214error_categoryE"]
            pub fn error_condition_error_condition1(
                this: *mut root::std::error_condition,
                __v: libc::c_int,
                __cat: *const root::std::_V2::error_category,
            );
        }
        impl Default for error_condition {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl error_condition {
            #[inline]
            pub unsafe fn assign(
                &mut self,
                __v: libc::c_int,
                __cat: *const root::std::_V2::error_category,
            ) {
                error_condition_assign(self, __v, __cat)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                error_condition_clear(self)
            }
            #[inline]
            pub unsafe fn value(&self) -> libc::c_int {
                error_condition_value(self)
            }
            #[inline]
            pub unsafe fn category(&self) -> *const root::std::_V2::error_category {
                error_condition_category(self)
            }
            #[inline]
            pub unsafe fn message(&self) -> root::std::__cxx11::string {
                error_condition_message(self)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                error_condition_error_condition(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(
                __v: libc::c_int,
                __cat: *const root::std::_V2::error_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                error_condition_error_condition1(&mut __bindgen_tmp, __v, __cat);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        pub struct system_error {
            pub _base: root::std::runtime_error,
            pub _M_code: root::std::error_code,
        }
        #[test]
        fn bindgen_test_layout_system_error() {
            assert_eq!(
                ::std::mem::size_of::<system_error>(),
                32usize,
                concat!("Size of: ", stringify!(system_error))
            );
            assert_eq!(
                ::std::mem::align_of::<system_error>(),
                8usize,
                concat!("Alignment of ", stringify!(system_error))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<system_error>()))._M_code as *const _ as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(system_error),
                    "::",
                    stringify!(_M_code)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt12system_error4codeEv"]
            pub fn system_error_code(
                this: *const root::std::system_error,
            ) -> *const root::std::error_code;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorC1ESt10error_code"]
            pub fn system_error_system_error(
                this: *mut root::std::system_error,
                __ec: root::std::error_code,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorC1ESt10error_codeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn system_error_system_error1(
                this: *mut root::std::system_error,
                __ec: root::std::error_code,
                __what: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorC1ESt10error_codePKc"]
            pub fn system_error_system_error2(
                this: *mut root::std::system_error,
                __ec: root::std::error_code,
                __what: *const libc::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorC1EiRKNSt3_V214error_categoryEPKc"]
            pub fn system_error_system_error3(
                this: *mut root::std::system_error,
                __v: libc::c_int,
                __ecat: *const root::std::_V2::error_category,
                __what: *const libc::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorC1EiRKNSt3_V214error_categoryE"]
            pub fn system_error_system_error4(
                this: *mut root::std::system_error,
                __v: libc::c_int,
                __ecat: *const root::std::_V2::error_category,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorC1EiRKNSt3_V214error_categoryERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn system_error_system_error5(
                this: *mut root::std::system_error,
                __v: libc::c_int,
                __ecat: *const root::std::_V2::error_category,
                __what: *const root::std::__cxx11::string,
            );
        }
        impl Default for system_error {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for system_error {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "system_error {{ _M_code: {:?} }}", self._M_code)
            }
        }
        impl system_error {
            #[inline]
            pub unsafe fn code(&self) -> *const root::std::error_code {
                system_error_code(self)
            }
            #[inline]
            pub unsafe fn new(__ec: root::std::error_code) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                system_error_system_error(&mut __bindgen_tmp, __ec);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(
                __ec: root::std::error_code,
                __what: *const root::std::__cxx11::string,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                system_error_system_error1(&mut __bindgen_tmp, __ec, __what);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(__ec: root::std::error_code, __what: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                system_error_system_error2(&mut __bindgen_tmp, __ec, __what);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new3(
                __v: libc::c_int,
                __ecat: *const root::std::_V2::error_category,
                __what: *const libc::c_char,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                system_error_system_error3(&mut __bindgen_tmp, __v, __ecat, __what);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new4(
                __v: libc::c_int,
                __ecat: *const root::std::_V2::error_category,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                system_error_system_error4(&mut __bindgen_tmp, __v, __ecat);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new5(
                __v: libc::c_int,
                __ecat: *const root::std::_V2::error_category,
                __what: *const root::std::__cxx11::string,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                system_error_system_error5(&mut __bindgen_tmp, __v, __ecat, __what);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt12system_errorD1Ev"]
            pub fn system_error_system_error_destructor(this: *mut root::std::system_error);
        }
        #[test]
        fn __bindgen_test_layout_hash_open0_error_code_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::hash>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::hash)
                )
            );
        }
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum _Ios_Fmtflags {
            _S_boolalpha = 1,
            _S_dec = 2,
            _S_fixed = 4,
            _S_hex = 8,
            _S_internal = 16,
            _S_left = 32,
            _S_oct = 64,
            _S_right = 128,
            _S_scientific = 256,
            _S_showbase = 512,
            _S_showpoint = 1024,
            _S_showpos = 2048,
            _S_skipws = 4096,
            _S_unitbuf = 8192,
            _S_uppercase = 16384,
            _S_adjustfield = 176,
            _S_basefield = 74,
            _S_floatfield = 260,
            _S_ios_fmtflags_end = 65536,
            _S_ios_fmtflags_max = 2147483647,
            _S_ios_fmtflags_min = -2147483648,
        }
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum _Ios_Openmode {
            _S_app = 1,
            _S_ate = 2,
            _S_bin = 4,
            _S_in = 8,
            _S_out = 16,
            _S_trunc = 32,
            _S_ios_openmode_end = 65536,
            _S_ios_openmode_max = 2147483647,
            _S_ios_openmode_min = -2147483648,
        }
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum _Ios_Iostate {
            _S_goodbit = 0,
            _S_badbit = 1,
            _S_eofbit = 2,
            _S_failbit = 4,
            _S_ios_iostate_end = 65536,
            _S_ios_iostate_max = 2147483647,
            _S_ios_iostate_min = -2147483648,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum _Ios_Seekdir {
            _S_beg = 0,
            _S_cur = 1,
            _S_end = 2,
            _S_ios_seekdir_end = 65536,
        }
        #[repr(i32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum io_errc {
            stream = 1,
        }
        #[test]
        fn __bindgen_test_layout_is_error_code_enum_open0_io_errc_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::is_error_code_enum>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::is_error_code_enum)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::is_error_code_enum>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::is_error_code_enum)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17iostream_categoryv"]
            pub fn iostream_category() -> *const root::std::_V2::error_category;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt15make_error_codeSt7io_errc"]
            pub fn make_error_code1(__e: root::std::io_errc) -> root::std::error_code;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt20make_error_conditionSt7io_errc"]
            pub fn make_error_condition1(__e: root::std::io_errc) -> root::std::error_condition;
        }
        #[repr(C)]
        pub struct ios_base__bindgen_vtable(libc::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ios_base {
            pub vtable_: *const ios_base__bindgen_vtable,
            pub _M_precision: root::std::streamsize,
            pub _M_width: root::std::streamsize,
            pub _M_flags: root::std::ios_base_fmtflags,
            pub _M_exception: root::std::ios_base_iostate,
            pub _M_streambuf_state: root::std::ios_base_iostate,
            pub _M_callbacks: *mut root::std::ios_base__Callback_list,
            pub _M_word_zero: root::std::ios_base__Words,
            pub _M_local_word: [root::std::ios_base__Words; 8usize],
            pub _M_word_size: libc::c_int,
            pub _M_word: *mut root::std::ios_base__Words,
            pub _M_ios_locale: root::std::locale,
        }
        #[repr(C)]
        pub struct ios_base_failure {
            pub _base: root::std::system_error,
        }
        #[test]
        fn bindgen_test_layout_ios_base_failure() {
            assert_eq!(
                ::std::mem::size_of::<ios_base_failure>(),
                32usize,
                concat!("Size of: ", stringify!(ios_base_failure))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base_failure>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base_failure))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn ios_base_failure_failure(
                this: *mut root::std::ios_base_failure,
                __str: *const root::std::__cxx11::string,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10error_code"]
            pub fn ios_base_failure_failure1(
                this: *mut root::std::ios_base_failure,
                arg1: *const root::std::__cxx11::string,
                arg2: *const root::std::error_code,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1EPKcRKSt10error_code"]
            pub fn ios_base_failure_failure2(
                this: *mut root::std::ios_base_failure,
                arg1: *const libc::c_char,
                arg2: *const root::std::error_code,
            );
        }
        impl Default for ios_base_failure {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ::std::fmt::Debug for ios_base_failure {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "ios_base_failure {{  }}")
            }
        }
        impl ios_base_failure {
            #[inline]
            pub unsafe fn new(__str: *const root::std::__cxx11::string) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_failure_failure(&mut __bindgen_tmp, __str);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(
                arg1: *const root::std::__cxx11::string,
                arg2: *const root::std::error_code,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_failure_failure1(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new2(
                arg1: *const libc::c_char,
                arg2: *const root::std::error_code,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_failure_failure2(&mut __bindgen_tmp, arg1, arg2);
                __bindgen_tmp
            }
        }
        pub use self::super::super::root::std::_Ios_Fmtflags as ios_base_fmtflags;
        pub use self::super::super::root::std::_Ios_Iostate as ios_base_iostate;
        pub use self::super::super::root::std::_Ios_Openmode as ios_base_openmode;
        pub use self::super::super::root::std::_Ios_Seekdir as ios_base_seekdir;
        pub type ios_base_io_state = libc::c_int;
        pub type ios_base_open_mode = libc::c_int;
        pub type ios_base_seek_dir = libc::c_int;
        pub type ios_base_streampos = root::std::streampos;
        pub type ios_base_streamoff = root::std::streamoff;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum ios_base_event {
            erase_event = 0,
            imbue_event = 1,
            copyfmt_event = 2,
        }
        pub type ios_base_event_callback = ::std::option::Option<
            unsafe extern "C" fn(
                __e: root::std::ios_base_event,
                __b: *mut root::std::ios_base,
                __i: libc::c_int,
            ),
        >;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ios_base__Callback_list {
            pub _M_next: *mut root::std::ios_base__Callback_list,
            pub _M_fn: root::std::ios_base_event_callback,
            pub _M_index: libc::c_int,
            pub _M_refcount: root::_Atomic_word,
        }
        #[test]
        fn bindgen_test_layout_ios_base__Callback_list() {
            assert_eq!(
                ::std::mem::size_of::<ios_base__Callback_list>(),
                24usize,
                concat!("Size of: ", stringify!(ios_base__Callback_list))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base__Callback_list>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base__Callback_list))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_next as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_next)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_fn as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_fn)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_index as *const _
                        as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_index)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Callback_list>()))._M_refcount as *const _
                        as usize
                },
                20usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Callback_list),
                    "::",
                    stringify!(_M_refcount)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base14_Callback_list16_M_add_referenceEv"]
            pub fn ios_base__Callback_list__M_add_reference(
                this: *mut root::std::ios_base__Callback_list,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base14_Callback_list19_M_remove_referenceEv"]
            pub fn ios_base__Callback_list__M_remove_reference(
                this: *mut root::std::ios_base__Callback_list,
            ) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base14_Callback_listC1EPFvNS_5eventERS_iEiPS0_"]
            pub fn ios_base__Callback_list__Callback_list(
                this: *mut root::std::ios_base__Callback_list,
                __fn: root::std::ios_base_event_callback,
                __index: libc::c_int,
                __cb: *mut root::std::ios_base__Callback_list,
            );
        }
        impl Default for ios_base__Callback_list {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ios_base__Callback_list {
            #[inline]
            pub unsafe fn _M_add_reference(&mut self) {
                ios_base__Callback_list__M_add_reference(self)
            }
            #[inline]
            pub unsafe fn _M_remove_reference(&mut self) -> libc::c_int {
                ios_base__Callback_list__M_remove_reference(self)
            }
            #[inline]
            pub unsafe fn new(
                __fn: root::std::ios_base_event_callback,
                __index: libc::c_int,
                __cb: *mut root::std::ios_base__Callback_list,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base__Callback_list__Callback_list(&mut __bindgen_tmp, __fn, __index, __cb);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ios_base__Words {
            pub _M_pword: *mut libc::c_void,
            pub _M_iword: libc::c_long,
        }
        #[test]
        fn bindgen_test_layout_ios_base__Words() {
            assert_eq!(
                ::std::mem::size_of::<ios_base__Words>(),
                16usize,
                concat!("Size of: ", stringify!(ios_base__Words))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base__Words>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base__Words))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Words>()))._M_pword as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Words),
                    "::",
                    stringify!(_M_pword)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base__Words>()))._M_iword as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base__Words),
                    "::",
                    stringify!(_M_iword)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6_WordsC1Ev"]
            pub fn ios_base__Words__Words(this: *mut root::std::ios_base__Words);
        }
        impl Default for ios_base__Words {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ios_base__Words {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base__Words__Words(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        pub const ios_base__S_local_word_size: root::std::ios_base__bindgen_ty_1 =
            ios_base__bindgen_ty_1::_S_local_word_size;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum ios_base__bindgen_ty_1 {
            _S_local_word_size = 8,
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ios_base_Init {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4Init11_S_refcountE"]
            pub static mut ios_base_Init__S_refcount: root::_Atomic_word;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4Init20_S_synced_with_stdioE"]
            pub static mut ios_base_Init__S_synced_with_stdio: bool;
        }
        #[test]
        fn bindgen_test_layout_ios_base_Init() {
            assert_eq!(
                ::std::mem::size_of::<ios_base_Init>(),
                1usize,
                concat!("Size of: ", stringify!(ios_base_Init))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base_Init>(),
                1usize,
                concat!("Alignment of ", stringify!(ios_base_Init))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4InitC1Ev"]
            pub fn ios_base_Init_Init(this: *mut root::std::ios_base_Init);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4InitD1Ev"]
            pub fn ios_base_Init_Init_destructor(this: *mut root::std::ios_base_Init);
        }
        impl ios_base_Init {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_Init_Init(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn destruct(&mut self) {
                ios_base_Init_Init_destructor(self)
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9boolalphaE"]
            pub static ios_base_boolalpha: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3decE"]
            pub static ios_base_dec: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5fixedE"]
            pub static ios_base_fixed: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3hexE"]
            pub static ios_base_hex: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base8internalE"]
            pub static ios_base_internal: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4leftE"]
            pub static ios_base_left: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3octE"]
            pub static ios_base_oct: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5rightE"]
            pub static ios_base_right: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base10scientificE"]
            pub static ios_base_scientific: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base8showbaseE"]
            pub static ios_base_showbase: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9showpointE"]
            pub static ios_base_showpoint: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7showposE"]
            pub static ios_base_showpos: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6skipwsE"]
            pub static ios_base_skipws: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7unitbufE"]
            pub static ios_base_unitbuf: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9uppercaseE"]
            pub static ios_base_uppercase: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base11adjustfieldE"]
            pub static ios_base_adjustfield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9basefieldE"]
            pub static ios_base_basefield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base10floatfieldE"]
            pub static ios_base_floatfield: root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6badbitE"]
            pub static ios_base_badbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6eofbitE"]
            pub static ios_base_eofbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failbitE"]
            pub static ios_base_failbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7goodbitE"]
            pub static ios_base_goodbit: root::std::ios_base_iostate;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3appE"]
            pub static ios_base_app: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3ateE"]
            pub static ios_base_ate: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6binaryE"]
            pub static ios_base_binary: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base2inE"]
            pub static ios_base_in: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3outE"]
            pub static ios_base_out: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5truncE"]
            pub static ios_base_trunc: root::std::ios_base_openmode;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3begE"]
            pub static ios_base_beg: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3curE"]
            pub static ios_base_cur: root::std::ios_base_seekdir;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base3endE"]
            pub static ios_base_end: root::std::ios_base_seekdir;
        }
        #[test]
        fn bindgen_test_layout_ios_base() {
            assert_eq!(
                ::std::mem::size_of::<ios_base>(),
                216usize,
                concat!("Size of: ", stringify!(ios_base))
            );
            assert_eq!(
                ::std::mem::align_of::<ios_base>(),
                8usize,
                concat!("Alignment of ", stringify!(ios_base))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_precision as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_precision)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_width as *const _ as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_width)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_flags as *const _ as usize },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_flags)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_exception as *const _ as usize },
                28usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_exception)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<ios_base>()))._M_streambuf_state as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_streambuf_state)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_callbacks as *const _ as usize },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_callbacks)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word_zero as *const _ as usize },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word_zero)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_local_word as *const _ as usize },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_local_word)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word_size as *const _ as usize },
                192usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word_size)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_word as *const _ as usize },
                200usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_word)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<ios_base>()))._M_ios_locale as *const _ as usize },
                208usize,
                concat!(
                    "Offset of field: ",
                    stringify!(ios_base),
                    "::",
                    stringify!(_M_ios_locale)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi"]
            pub fn ios_base_register_callback(
                this: *mut root::std::ios_base,
                __fn: root::std::ios_base_event_callback,
                __index: libc::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base17_M_call_callbacksENS_5eventE"]
            pub fn ios_base__M_call_callbacks(
                this: *mut root::std::ios_base,
                __ev: root::std::ios_base_event,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base20_M_dispose_callbacksEv"]
            pub fn ios_base__M_dispose_callbacks(this: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base13_M_grow_wordsEib"]
            pub fn ios_base__M_grow_words(
                this: *mut root::std::ios_base,
                __index: libc::c_int,
                __iword: bool,
            ) -> *mut root::std::ios_base__Words;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_initEv"]
            pub fn ios_base__M_init(this: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8ios_base5flagsEv"]
            pub fn ios_base_flags(this: *const root::std::ios_base)
                -> root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5flagsESt13_Ios_Fmtflags"]
            pub fn ios_base_flags1(
                this: *mut root::std::ios_base,
                __fmtfl: root::std::ios_base_fmtflags,
            ) -> root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4setfESt13_Ios_Fmtflags"]
            pub fn ios_base_setf(
                this: *mut root::std::ios_base,
                __fmtfl: root::std::ios_base_fmtflags,
            ) -> root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_"]
            pub fn ios_base_setf1(
                this: *mut root::std::ios_base,
                __fmtfl: root::std::ios_base_fmtflags,
                __mask: root::std::ios_base_fmtflags,
            ) -> root::std::ios_base_fmtflags;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6unsetfESt13_Ios_Fmtflags"]
            pub fn ios_base_unsetf(
                this: *mut root::std::ios_base,
                __mask: root::std::ios_base_fmtflags,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8ios_base9precisionEv"]
            pub fn ios_base_precision(this: *const root::std::ios_base) -> root::std::streamsize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base9precisionEl"]
            pub fn ios_base_precision1(
                this: *mut root::std::ios_base,
                __prec: root::std::streamsize,
            ) -> root::std::streamsize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8ios_base5widthEv"]
            pub fn ios_base_width(this: *const root::std::ios_base) -> root::std::streamsize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5widthEl"]
            pub fn ios_base_width1(
                this: *mut root::std::ios_base,
                __wide: root::std::streamsize,
            ) -> root::std::streamsize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base15sync_with_stdioEb"]
            pub fn ios_base_sync_with_stdio(__sync: bool) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5imbueERKSt6locale"]
            pub fn ios_base_imbue(
                this: *mut root::std::ios_base,
                __loc: *const root::std::locale,
            ) -> root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8ios_base6getlocEv"]
            pub fn ios_base_getloc(this: *const root::std::ios_base) -> root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8ios_base9_M_getlocEv"]
            pub fn ios_base__M_getloc(this: *const root::std::ios_base)
                -> *const root::std::locale;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base6xallocEv"]
            pub fn ios_base_xalloc() -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5iwordEi"]
            pub fn ios_base_iword(
                this: *mut root::std::ios_base,
                __ix: libc::c_int,
            ) -> *mut libc::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base5pwordEi"]
            pub fn ios_base_pword(
                this: *mut root::std::ios_base,
                __ix: libc::c_int,
            ) -> *mut *mut libc::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_moveERS_"]
            pub fn ios_base__M_move(this: *mut root::std::ios_base, arg1: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7_M_swapERS_"]
            pub fn ios_base__M_swap(
                this: *mut root::std::ios_base,
                __rhs: *mut root::std::ios_base,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_baseC1Ev"]
            pub fn ios_base_ios_base(this: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_baseC1ERKS_"]
            pub fn ios_base_ios_base1(
                this: *mut root::std::ios_base,
                arg1: *const root::std::ios_base,
            );
        }
        impl Default for ios_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl ios_base {
            #[inline]
            pub unsafe fn register_callback(
                &mut self,
                __fn: root::std::ios_base_event_callback,
                __index: libc::c_int,
            ) {
                ios_base_register_callback(self, __fn, __index)
            }
            #[inline]
            pub unsafe fn _M_call_callbacks(&mut self, __ev: root::std::ios_base_event) {
                ios_base__M_call_callbacks(self, __ev)
            }
            #[inline]
            pub unsafe fn _M_dispose_callbacks(&mut self) {
                ios_base__M_dispose_callbacks(self)
            }
            #[inline]
            pub unsafe fn _M_grow_words(
                &mut self,
                __index: libc::c_int,
                __iword: bool,
            ) -> *mut root::std::ios_base__Words {
                ios_base__M_grow_words(self, __index, __iword)
            }
            #[inline]
            pub unsafe fn _M_init(&mut self) {
                ios_base__M_init(self)
            }
            #[inline]
            pub unsafe fn flags(&self) -> root::std::ios_base_fmtflags {
                ios_base_flags(self)
            }
            #[inline]
            pub unsafe fn flags1(
                &mut self,
                __fmtfl: root::std::ios_base_fmtflags,
            ) -> root::std::ios_base_fmtflags {
                ios_base_flags1(self, __fmtfl)
            }
            #[inline]
            pub unsafe fn setf(
                &mut self,
                __fmtfl: root::std::ios_base_fmtflags,
            ) -> root::std::ios_base_fmtflags {
                ios_base_setf(self, __fmtfl)
            }
            #[inline]
            pub unsafe fn setf1(
                &mut self,
                __fmtfl: root::std::ios_base_fmtflags,
                __mask: root::std::ios_base_fmtflags,
            ) -> root::std::ios_base_fmtflags {
                ios_base_setf1(self, __fmtfl, __mask)
            }
            #[inline]
            pub unsafe fn unsetf(&mut self, __mask: root::std::ios_base_fmtflags) {
                ios_base_unsetf(self, __mask)
            }
            #[inline]
            pub unsafe fn precision(&self) -> root::std::streamsize {
                ios_base_precision(self)
            }
            #[inline]
            pub unsafe fn precision1(
                &mut self,
                __prec: root::std::streamsize,
            ) -> root::std::streamsize {
                ios_base_precision1(self, __prec)
            }
            #[inline]
            pub unsafe fn width(&self) -> root::std::streamsize {
                ios_base_width(self)
            }
            #[inline]
            pub unsafe fn width1(
                &mut self,
                __wide: root::std::streamsize,
            ) -> root::std::streamsize {
                ios_base_width1(self, __wide)
            }
            #[inline]
            pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
                ios_base_sync_with_stdio(__sync)
            }
            #[inline]
            pub unsafe fn imbue(&mut self, __loc: *const root::std::locale) -> root::std::locale {
                ios_base_imbue(self, __loc)
            }
            #[inline]
            pub unsafe fn getloc(&self) -> root::std::locale {
                ios_base_getloc(self)
            }
            #[inline]
            pub unsafe fn _M_getloc(&self) -> *const root::std::locale {
                ios_base__M_getloc(self)
            }
            #[inline]
            pub unsafe fn xalloc() -> libc::c_int {
                ios_base_xalloc()
            }
            #[inline]
            pub unsafe fn iword(&mut self, __ix: libc::c_int) -> *mut libc::c_long {
                ios_base_iword(self, __ix)
            }
            #[inline]
            pub unsafe fn pword(&mut self, __ix: libc::c_int) -> *mut *mut libc::c_void {
                ios_base_pword(self, __ix)
            }
            #[inline]
            pub unsafe fn _M_move(&mut self, arg1: *mut root::std::ios_base) {
                ios_base__M_move(self, arg1)
            }
            #[inline]
            pub unsafe fn _M_swap(&mut self, __rhs: *mut root::std::ios_base) {
                ios_base__M_swap(self, __rhs)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_ios_base(&mut __bindgen_tmp);
                __bindgen_tmp
            }
            #[inline]
            pub unsafe fn new1(arg1: *const root::std::ios_base) -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                ios_base_ios_base1(&mut __bindgen_tmp, arg1);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11D1Ev"]
            pub fn ios_base_failure_failure_destructor(this: *mut root::std::ios_base_failure);
        }
        extern "C" {
            #[link_name = "\u{1}_ZNKSt8ios_base7failureB5cxx114whatEv"]
            pub fn ios_base_failure_what(this: *mut libc::c_void) -> *const libc::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt8ios_baseD1Ev"]
            pub fn ios_base_ios_base_destructor(this: *mut root::std::ios_base);
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9boolalphaRSt8ios_base"]
            pub fn boolalpha(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11noboolalphaRSt8ios_base"]
            pub fn noboolalpha(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8showbaseRSt8ios_base"]
            pub fn showbase(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10noshowbaseRSt8ios_base"]
            pub fn noshowbase(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9showpointRSt8ios_base"]
            pub fn showpoint(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11noshowpointRSt8ios_base"]
            pub fn noshowpoint(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7showposRSt8ios_base"]
            pub fn showpos(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9noshowposRSt8ios_base"]
            pub fn noshowpos(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6skipwsRSt8ios_base"]
            pub fn skipws(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8noskipwsRSt8ios_base"]
            pub fn noskipws(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9uppercaseRSt8ios_base"]
            pub fn uppercase(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11nouppercaseRSt8ios_base"]
            pub fn nouppercase(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7unitbufRSt8ios_base"]
            pub fn unitbuf(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9nounitbufRSt8ios_base"]
            pub fn nounitbuf(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8internalRSt8ios_base"]
            pub fn internal(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4leftRSt8ios_base"]
            pub fn left(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5rightRSt8ios_base"]
            pub fn right(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3decRSt8ios_base"]
            pub fn dec(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3hexRSt8ios_base"]
            pub fn hex(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3octRSt8ios_base"]
            pub fn oct(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5fixedRSt8ios_base"]
            pub fn fixed(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10scientificRSt8ios_base"]
            pub fn scientific(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8hexfloatRSt8ios_base"]
            pub fn hexfloat(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt12defaultfloatRSt8ios_base"]
            pub fn defaultfloat(__base: *mut root::std::ios_base) -> *mut root::std::ios_base;
        }
        #[repr(C)]
        pub struct basic_streambuf__bindgen_vtable(libc::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_streambuf<T> {
            pub vtable_: *const basic_streambuf__bindgen_vtable,
            pub _M_in_beg: *mut root::std::basic_streambuf_char_type<T>,
            pub _M_in_cur: *mut root::std::basic_streambuf_char_type<T>,
            pub _M_in_end: *mut root::std::basic_streambuf_char_type<T>,
            pub _M_out_beg: *mut root::std::basic_streambuf_char_type<T>,
            pub _M_out_cur: *mut root::std::basic_streambuf_char_type<T>,
            pub _M_out_end: *mut root::std::basic_streambuf_char_type<T>,
            pub _M_buf_locale: root::std::locale,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type basic_streambuf_char_type<T> = T;
        pub type basic_streambuf_traits_type<_Traits> = _Traits;
        pub type basic_streambuf_int_type = [u8; 0usize];
        pub type basic_streambuf_pos_type = [u8; 0usize];
        pub type basic_streambuf_off_type = [u8; 0usize];
        pub type basic_streambuf___streambuf_type<T> =
            root::std::basic_streambuf<root::std::basic_streambuf_char_type<T>>;
        impl<T> Default for basic_streambuf<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIcSt11char_traitsIcEElPSt15basic_streambufIT_T0_ES6_Rb"]
            pub fn __copy_streambufs_eof(
                __sbin: *mut root::std::basic_streambuf<libc::c_char>,
                __sbout: *mut root::std::basic_streambuf<libc::c_char>,
                __ineof: *mut bool,
            ) -> root::std::streamsize;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIwSt11char_traitsIwEElPSt15basic_streambufIT_T0_ES6_Rb"]
            pub fn __copy_streambufs_eof1(
                __sbin: *mut root::std::basic_streambuf<u32>,
                __sbout: *mut root::std::basic_streambuf<u32>,
                __ineof: *mut bool,
            ) -> root::std::streamsize;
        }
        #[test]
        fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_streambuf<libc::c_char>>(),
                64usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_streambuf<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_streambuf<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_streambuf<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
                64usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_streambuf<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_streambuf<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ctype_base {
            pub _address: u8,
        }
        pub type ctype_base___to_type = *const libc::c_int;
        pub type ctype_base_mask = libc::c_ushort;
        pub const ctype_base_upper: root::std::ctype_base_mask = 256;
        pub const ctype_base_lower: root::std::ctype_base_mask = 512;
        pub const ctype_base_alpha: root::std::ctype_base_mask = 1024;
        pub const ctype_base_digit: root::std::ctype_base_mask = 2048;
        pub const ctype_base_xdigit: root::std::ctype_base_mask = 4096;
        pub const ctype_base_space: root::std::ctype_base_mask = 8192;
        pub const ctype_base_print: root::std::ctype_base_mask = 16384;
        pub const ctype_base_graph: root::std::ctype_base_mask = 3076;
        pub const ctype_base_cntrl: root::std::ctype_base_mask = 2;
        pub const ctype_base_punct: root::std::ctype_base_mask = 4;
        pub const ctype_base_alnum: root::std::ctype_base_mask = 3072;
        pub const ctype_base_blank: root::std::ctype_base_mask = 1;
        #[test]
        fn bindgen_test_layout_ctype_base() {
            assert_eq!(
                ::std::mem::size_of::<ctype_base>(),
                1usize,
                concat!("Size of: ", stringify!(ctype_base))
            );
            assert_eq!(
                ::std::mem::align_of::<ctype_base>(),
                1usize,
                concat!("Alignment of ", stringify!(ctype_base))
            );
        }
        #[repr(C)]
        pub struct istreambuf_iterator<T> {
            pub _M_sbuf: *mut root::std::istreambuf_iterator_streambuf_type<T>,
            pub _M_c: root::std::istreambuf_iterator_int_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type istreambuf_iterator_char_type<T> = T;
        pub type istreambuf_iterator_traits_type<_Traits> = _Traits;
        pub type istreambuf_iterator_int_type = [u8; 0usize];
        pub type istreambuf_iterator_streambuf_type<T> = root::std::basic_streambuf<T>;
        pub type istreambuf_iterator_istream_type<T> = root::std::basic_istream<T>;
        impl<T> Default for istreambuf_iterator<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<T> ::std::fmt::Debug for istreambuf_iterator<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "istreambuf_iterator {{ _M_sbuf: {:?} }}", self._M_sbuf)
            }
        }
        impl<T> ::std::cmp::PartialEq for istreambuf_iterator<T>
        where
            T: PartialEq,
        {
            fn eq(&self, other: &istreambuf_iterator<T>) -> bool {
                self._M_sbuf == other._M_sbuf && self._M_c == other._M_c
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ostreambuf_iterator<T> {
            pub _M_sbuf: *mut root::std::ostreambuf_iterator_streambuf_type<T>,
            pub _M_failed: bool,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type ostreambuf_iterator_char_type<T> = T;
        pub type ostreambuf_iterator_traits_type<_Traits> = _Traits;
        pub type ostreambuf_iterator_streambuf_type<T> = root::std::basic_streambuf<T>;
        pub type ostreambuf_iterator_ostream_type<T> = root::std::basic_ostream<T>;
        impl<T> Default for ostreambuf_iterator<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v(
                arg1: *const libc::c_char,
                arg2: *mut f32,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v1(
                arg1: *const libc::c_char,
                arg2: *mut f64,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
            pub fn __convert_to_v2(
                arg1: *const libc::c_char,
                arg2: *mut u128,
                arg3: *mut root::std::ios_base_iostate,
                arg4: *const root::std::__c_locale,
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __pad {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __ctype_abstract_base {
            pub _base: root::std::locale_facet,
        }
        pub type __ctype_abstract_base_char_type<T> = T;
        impl Default for __ctype_abstract_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ctype {
            pub _base: root::std::__ctype_abstract_base,
        }
        pub type ctype_char_type<T> = T;
        pub type ctype_mask = root::std::__ctype_abstract_base;
        impl Default for ctype {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct ctype_byname {
            pub _base: root::std::ctype,
        }
        pub type ctype_byname_mask = root::std::ctype;
        impl Default for ctype_byname {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype_byname>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype_byname>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __num_base {
            pub _address: u8,
        }
        pub const __num_base__S_ominus: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_ominus;
        pub const __num_base__S_oplus: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oplus;
        pub const __num_base__S_ox: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_ox;
        pub const __num_base__S_oX: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oX;
        pub const __num_base__S_odigits: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_odigits;
        pub const __num_base__S_odigits_end: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_odigits_end;
        pub const __num_base__S_oudigits: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_odigits_end;
        pub const __num_base__S_oudigits_end: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oudigits_end;
        pub const __num_base__S_oe: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oe;
        pub const __num_base__S_oE: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oE;
        pub const __num_base__S_oend: root::std::__num_base__bindgen_ty_1 =
            __num_base__bindgen_ty_1::_S_oudigits_end;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __num_base__bindgen_ty_1 {
            _S_ominus = 0,
            _S_oplus = 1,
            _S_ox = 2,
            _S_oX = 3,
            _S_odigits = 4,
            _S_odigits_end = 20,
            _S_oudigits_end = 36,
            _S_oe = 18,
            _S_oE = 34,
        }
        pub const __num_base__S_iminus: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iminus;
        pub const __num_base__S_iplus: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iplus;
        pub const __num_base__S_ix: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_ix;
        pub const __num_base__S_iX: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iX;
        pub const __num_base__S_izero: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_izero;
        pub const __num_base__S_ie: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_ie;
        pub const __num_base__S_iE: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iE;
        pub const __num_base__S_iend: root::std::__num_base__bindgen_ty_2 =
            __num_base__bindgen_ty_2::_S_iend;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum __num_base__bindgen_ty_2 {
            _S_iminus = 0,
            _S_iplus = 1,
            _S_ix = 2,
            _S_iX = 3,
            _S_izero = 4,
            _S_ie = 18,
            _S_iE = 24,
            _S_iend = 26,
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base12_S_atoms_outE"]
            pub static mut __num_base__S_atoms_out: *const libc::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base11_S_atoms_inE"]
            pub static mut __num_base__S_atoms_in: *const libc::c_char;
        }
        #[test]
        fn bindgen_test_layout___num_base() {
            assert_eq!(
                ::std::mem::size_of::<__num_base>(),
                1usize,
                concat!("Size of: ", stringify!(__num_base))
            );
            assert_eq!(
                ::std::mem::align_of::<__num_base>(),
                1usize,
                concat!("Alignment of ", stringify!(__num_base))
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZNSt10__num_base15_S_format_floatERKSt8ios_basePcc"]
            pub fn __num_base__S_format_float(
                __io: *const root::std::ios_base,
                __fptr: *mut libc::c_char,
                __mod: libc::c_char,
            );
        }
        impl __num_base {
            #[inline]
            pub unsafe fn _S_format_float(
                __io: *const root::std::ios_base,
                __fptr: *mut libc::c_char,
                __mod: libc::c_char,
            ) {
                __num_base__S_format_float(__io, __fptr, __mod)
            }
        }
        #[repr(C)]
        pub struct __numpunct_cache<T> {
            pub _base: root::std::locale_facet,
            pub _M_grouping: *const libc::c_char,
            pub _M_grouping_size: usize,
            pub _M_use_grouping: bool,
            pub _M_truename: *const T,
            pub _M_truename_size: usize,
            pub _M_falsename: *const T,
            pub _M_falsename_size: usize,
            pub _M_decimal_point: T,
            pub _M_thousands_sep: T,
            pub _M_atoms_out: [T; 36usize],
            pub _M_atoms_in: [T; 26usize],
            pub _M_allocated: bool,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        impl<T> Default for __numpunct_cache<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<T> ::std::fmt::Debug for __numpunct_cache<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write ! ( f , "__numpunct_cache {{ _M_grouping: {:?}, _M_grouping_size: {:?}, _M_use_grouping: {:?}, _M_truename: {:?}, _M_truename_size: {:?}, _M_falsename: {:?}, _M_falsename_size: {:?}, _M_decimal_point: Non-debuggable generic, _M_thousands_sep: Non-debuggable generic, _M_atoms_out: Array with length 36, _M_atoms_in: Array with length 26, _M_allocated: {:?} }}" , self . _M_grouping , self . _M_grouping_size , self . _M_use_grouping , self . _M_truename , self . _M_truename_size , self . _M_falsename , self . _M_falsename_size , self . _M_allocated )
            }
        }
        impl<T> ::std::cmp::PartialEq for __numpunct_cache<T>
        where
            T: PartialEq,
        {
            fn eq(&self, other: &__numpunct_cache<T>) -> bool {
                self._base == other._base
                    && self._M_grouping == other._M_grouping
                    && self._M_grouping_size == other._M_grouping_size
                    && self._M_use_grouping == other._M_use_grouping
                    && self._M_truename == other._M_truename
                    && self._M_truename_size == other._M_truename_size
                    && self._M_falsename == other._M_falsename
                    && self._M_falsename_size == other._M_falsename_size
                    && self._M_decimal_point == other._M_decimal_point
                    && self._M_thousands_sep == other._M_thousands_sep
                    && &self._M_atoms_out[..] == &other._M_atoms_out[..]
                    && self._M_atoms_in == other._M_atoms_in
                    && self._M_allocated == other._M_allocated
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct num_get {
            pub _base: root::std::locale_facet,
        }
        pub type num_get_char_type<T> = T;
        pub type num_get_iter_type<_InIter> = _InIter;
        impl Default for num_get {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct num_put {
            pub _base: root::std::locale_facet,
        }
        pub type num_put_char_type<T> = T;
        pub type num_put_iter_type<_OutIter> = _OutIter;
        impl Default for num_put {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __use_cache {
            pub _address: u8,
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt17__verify_groupingPKcmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
            pub fn __verify_grouping(
                __grouping: *const libc::c_char,
                __grouping_size: usize,
                __grouping_tmp: *const root::std::__cxx11::string,
            ) -> bool;
        }
        #[test]
        fn __bindgen_test_layout_numpunct_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::numpunct<libc::c_char>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::numpunct<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_byname_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::numpunct_byname<libc::c_char>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct_byname<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::numpunct_byname<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct_byname<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_get_open0_char_istreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::num_get>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::num_get>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_put_open0_char_ostreambuf_iterator_open1_char_char_traits_open2_char_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::num_put>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::num_put>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::numpunct<u32>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::numpunct<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_numpunct_byname_open0_wchar_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::numpunct_byname<u32>>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct_byname<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::numpunct_byname<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::numpunct_byname<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_get_open0_wchar_t_istreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::num_get>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::num_get>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_get)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_num_put_open0_wchar_t_ostreambuf_iterator_open1_wchar_t_char_traits_open2_wchar_t_close2_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::num_put>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::num_put>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::num_put)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_ios<T> {
            pub _base: root::std::ios_base,
            pub _M_tie: *mut root::std::basic_ostream<T>,
            pub _M_fill: root::std::basic_ios_char_type<T>,
            pub _M_fill_init: bool,
            pub _M_streambuf: *mut root::std::basic_streambuf<T>,
            pub _M_ctype: *const root::std::basic_ios___ctype_type,
            pub _M_num_put: *const root::std::basic_ios___num_put_type,
            pub _M_num_get: *const root::std::basic_ios___num_get_type,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type basic_ios_char_type<T> = T;
        pub type basic_ios_int_type = [u8; 0usize];
        pub type basic_ios_pos_type = [u8; 0usize];
        pub type basic_ios_off_type = [u8; 0usize];
        pub type basic_ios_traits_type<_Traits> = _Traits;
        pub type basic_ios___ctype_type = root::std::ctype;
        pub type basic_ios___num_put_type = root::std::num_put;
        pub type basic_ios___num_get_type = root::std::num_get;
        impl<T> Default for basic_ios<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ios<libc::c_char>>(),
                264usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ios<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ios<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ios<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ios<u32>>(),
                264usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ios<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ios<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ios<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_ostream<T> {
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type basic_ostream_char_type<T> = T;
        pub type basic_ostream_int_type = [u8; 0usize];
        pub type basic_ostream_pos_type = [u8; 0usize];
        pub type basic_ostream_off_type = [u8; 0usize];
        pub type basic_ostream_traits_type<_Traits> = _Traits;
        pub type basic_ostream___streambuf_type<T> = root::std::basic_streambuf<T>;
        pub type basic_ostream___ios_type<T> = root::std::basic_ios<T>;
        pub type basic_ostream___ostream_type<T> = root::std::basic_ostream<T>;
        pub type basic_ostream___num_put_type = root::std::num_put;
        pub type basic_ostream___ctype_type = root::std::ctype;
        impl<T> Default for basic_ostream<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_convertible_to_basic_ostream_impl {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_ostream_impl___ostream_type = libc::c_void;
        pub type __do_is_convertible_to_basic_ostream_impl = root::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_convertible_to_basic_ostream {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_ostream_type = root::std::__not_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_insertable {
            pub _base: root::std::false_type,
        }
        pub type __rvalue_ostream_type = root::std::__is_convertible_to_basic_ostream;
        #[test]
        fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ostream<libc::c_char>>(),
                272usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ostream<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ostream<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ostream<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ostream<u32>>(),
                272usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ostream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ostream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ostream<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_istream<T> {
            pub _M_gcount: root::std::streamsize,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type basic_istream_char_type<T> = T;
        pub type basic_istream_int_type = [u8; 0usize];
        pub type basic_istream_pos_type = [u8; 0usize];
        pub type basic_istream_off_type = [u8; 0usize];
        pub type basic_istream_traits_type<_Traits> = _Traits;
        pub type basic_istream___streambuf_type<T> = root::std::basic_streambuf<T>;
        pub type basic_istream___ios_type<T> = root::std::basic_ios<T>;
        pub type basic_istream___istream_type<T> = root::std::basic_istream<T>;
        pub type basic_istream___num_get_type = root::std::num_get;
        pub type basic_istream___ctype_type = root::std::ctype;
        impl<T> Default for basic_istream<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct basic_istream_sentry {
            pub _M_ok: bool,
        }
        pub type basic_istream_sentry___ctype_type = root::std::basic_istream___ctype_type;
        pub type basic_istream_sentry___int_type = [u8; 0usize];
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_convertible_to_basic_istream_impl {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_istream_impl___istream_type = libc::c_void;
        pub type __do_is_convertible_to_basic_istream_impl = root::std::remove_reference;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_convertible_to_basic_istream {
            pub _address: u8,
        }
        pub type __is_convertible_to_basic_istream_type = root::std::__not_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __is_extractable {
            pub _base: root::std::false_type,
        }
        pub type __rvalue_istream_type = root::std::__is_convertible_to_basic_istream;
        #[test]
        fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_istream<libc::c_char>>(),
                280usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_istream<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_istream<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_istream<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_istream<u32>>(),
                280usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_istream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_istream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_istream<u32>)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct codecvt_base {
            pub _address: u8,
        }
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
        pub enum codecvt_base_result {
            ok = 0,
            partial = 1,
            error = 2,
            noconv = 3,
        }
        #[test]
        fn bindgen_test_layout_codecvt_base() {
            assert_eq!(
                ::std::mem::size_of::<codecvt_base>(),
                1usize,
                concat!("Size of: ", stringify!(codecvt_base))
            );
            assert_eq!(
                ::std::mem::align_of::<codecvt_base>(),
                1usize,
                concat!("Alignment of ", stringify!(codecvt_base))
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __codecvt_abstract_base {
            pub _base: root::std::locale_facet,
        }
        pub use self::super::super::root::std::codecvt_base_result as __codecvt_abstract_base_result;
        pub type __codecvt_abstract_base_intern_type<_InternT> = _InternT;
        pub type __codecvt_abstract_base_extern_type<_ExternT> = _ExternT;
        pub type __codecvt_abstract_base_state_type<_StateT> = _StateT;
        impl Default for __codecvt_abstract_base {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct codecvt {
            pub _base: root::std::__codecvt_abstract_base,
            pub _M_c_locale_codecvt: root::std::__c_locale,
        }
        pub use self::super::super::root::std::codecvt_base_result as codecvt_result;
        pub type codecvt_intern_type<_InternT> = _InternT;
        pub type codecvt_extern_type<_ExternT> = _ExternT;
        pub type codecvt_state_type<_StateT> = _StateT;
        impl Default for codecvt {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_wchar_t_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char16_t_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char32_t_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct codecvt_byname {
            pub _base: root::std::codecvt,
        }
        impl Default for codecvt_byname {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char16_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char32_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char_char___mbstate_t_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_wchar_t_char___mbstate_t_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        pub type __c_lock = root::__gthread_mutex_t;
        pub type __c_file = root::FILE;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __basic_file {
            pub _address: u8,
        }
        #[test]
        fn __bindgen_test_layout___basic_file_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::std::__basic_file>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__basic_file)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__basic_file>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__basic_file)
                )
            );
        }
        #[repr(C)]
        pub struct basic_filebuf<T> {
            pub _base: root::std::basic_streambuf<T>,
            pub _M_lock: root::std::__c_lock,
            pub _M_file: root::std::basic_filebuf___file_type,
            pub _M_mode: root::std::ios_base_openmode,
            pub _M_state_beg: root::std::basic_filebuf___state_type,
            pub _M_state_cur: root::std::basic_filebuf___state_type,
            pub _M_state_last: root::std::basic_filebuf___state_type,
            pub _M_buf: *mut root::std::basic_filebuf_char_type<T>,
            pub _M_buf_size: usize,
            pub _M_buf_allocated: bool,
            pub _M_reading: bool,
            pub _M_writing: bool,
            pub _M_pback: root::std::basic_filebuf_char_type<T>,
            pub _M_pback_cur_save: *mut root::std::basic_filebuf_char_type<T>,
            pub _M_pback_end_save: *mut root::std::basic_filebuf_char_type<T>,
            pub _M_pback_init: bool,
            pub _M_codecvt: *const root::std::basic_filebuf___codecvt_type,
            pub _M_ext_buf: *mut libc::c_char,
            pub _M_ext_buf_size: root::std::streamsize,
            pub _M_ext_next: *const libc::c_char,
            pub _M_ext_end: *mut libc::c_char,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type basic_filebuf___chk_state = root::std::__and_;
        pub type basic_filebuf_char_type<T> = T;
        pub type basic_filebuf_traits_type<_Traits> = _Traits;
        pub type basic_filebuf_int_type = [u8; 0usize];
        pub type basic_filebuf_pos_type = [u8; 0usize];
        pub type basic_filebuf_off_type = [u8; 0usize];
        pub type basic_filebuf___streambuf_type<T> =
            root::std::basic_streambuf<root::std::basic_filebuf_char_type<T>>;
        pub type basic_filebuf___filebuf_type<T> =
            root::std::basic_filebuf<root::std::basic_filebuf_char_type<T>>;
        pub type basic_filebuf___file_type = root::std::__basic_file;
        pub type basic_filebuf___state_type = [u8; 0usize];
        pub type basic_filebuf___codecvt_type = root::std::codecvt;
        impl<T> Default for basic_filebuf<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<T> ::std::fmt::Debug for basic_filebuf<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write ! ( f , "basic_filebuf {{ _M_lock: {:?}, _M_file: {:?}, _M_mode: {:?}, _M_buf: {:?}, _M_buf_size: {:?}, _M_buf_allocated: {:?}, _M_reading: {:?}, _M_writing: {:?}, _M_pback: Non-debuggable generic, _M_pback_cur_save: {:?}, _M_pback_end_save: {:?}, _M_pback_init: {:?}, _M_codecvt: {:?}, _M_ext_buf: {:?}, _M_ext_buf_size: {:?}, _M_ext_next: {:?}, _M_ext_end: {:?} }}" , self . _M_lock , self . _M_file , self . _M_mode , self . _M_buf , self . _M_buf_size , self . _M_buf_allocated , self . _M_reading , self . _M_writing , self . _M_pback_cur_save , self . _M_pback_end_save , self . _M_pback_init , self . _M_codecvt , self . _M_ext_buf , self . _M_ext_buf_size , self . _M_ext_next , self . _M_ext_end )
            }
        }
        #[repr(C)]
        pub struct basic_ifstream<T> {
            pub _base: root::std::basic_istream<T>,
            pub _M_filebuf: root::std::basic_ifstream___filebuf_type<T>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type basic_ifstream_char_type<T> = T;
        pub type basic_ifstream_traits_type<_Traits> = _Traits;
        pub type basic_ifstream_int_type = [u8; 0usize];
        pub type basic_ifstream_pos_type = [u8; 0usize];
        pub type basic_ifstream_off_type = [u8; 0usize];
        pub type basic_ifstream___filebuf_type<T> =
            root::std::basic_filebuf<root::std::basic_ifstream_char_type<T>>;
        pub type basic_ifstream___istream_type<T> =
            root::std::basic_istream<root::std::basic_ifstream_char_type<T>>;
        impl<T> Default for basic_ifstream<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<T> ::std::fmt::Debug for basic_ifstream<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_ifstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
            }
        }
        #[repr(C)]
        pub struct basic_ofstream<T> {
            pub _base: root::std::basic_ostream<T>,
            pub _M_filebuf: root::std::basic_ofstream___filebuf_type<T>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type basic_ofstream_char_type<T> = T;
        pub type basic_ofstream_traits_type<_Traits> = _Traits;
        pub type basic_ofstream_int_type = [u8; 0usize];
        pub type basic_ofstream_pos_type = [u8; 0usize];
        pub type basic_ofstream_off_type = [u8; 0usize];
        pub type basic_ofstream___filebuf_type<T> =
            root::std::basic_filebuf<root::std::basic_ofstream_char_type<T>>;
        pub type basic_ofstream___ostream_type<T> =
            root::std::basic_ostream<root::std::basic_ofstream_char_type<T>>;
        impl<T> Default for basic_ofstream<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<T> ::std::fmt::Debug for basic_ofstream<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_ofstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
            }
        }
        #[repr(C)]
        pub struct basic_fstream<T> {
            // pub _base: root::std::basic_iostream<T>,
            pub _M_filebuf: root::std::basic_fstream___filebuf_type<T>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
        }
        pub type basic_fstream_char_type<T> = T;
        pub type basic_fstream_traits_type<_Traits> = _Traits;
        pub type basic_fstream_int_type = [u8; 0usize];
        pub type basic_fstream_pos_type = [u8; 0usize];
        pub type basic_fstream_off_type = [u8; 0usize];
        pub type basic_fstream___filebuf_type<T> =
            root::std::basic_filebuf<root::std::basic_fstream_char_type<T>>;
        pub type basic_fstream___ios_type<T> =
            root::std::basic_ios<root::std::basic_fstream_char_type<T>>;
        // pub type basic_fstream___iostream_type<T> =
        //     root::std::basic_iostream<root::std::basic_fstream_char_type<T>>;
        impl<T> Default for basic_fstream<T> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl<T> ::std::fmt::Debug for basic_fstream<T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "basic_fstream {{ _M_filebuf: {:?} }}", self._M_filebuf)
            }
        }
        #[test]
        fn __bindgen_test_layout_basic_filebuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_filebuf<libc::c_char>>(),
                240usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_filebuf<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_filebuf<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_filebuf<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ifstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ifstream<libc::c_char>>(),
                520usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ifstream<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ifstream<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ifstream<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ofstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ofstream<libc::c_char>>(),
                512usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ofstream<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ofstream<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ofstream<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_fstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_fstream<libc::c_char>>(),
                528usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_fstream<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_fstream<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_fstream<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_filebuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_filebuf<u32>>(),
                240usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_filebuf<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_filebuf<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_filebuf<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ifstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ifstream<u32>>(),
                520usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ifstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ifstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ifstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ofstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_ofstream<u32>>(),
                512usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_ofstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_ofstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_ofstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_fstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::basic_fstream<u32>>(),
                528usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::basic_fstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::basic_fstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::basic_fstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_stringbuf_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::basic_stringbuf<libc::c_char>>(),
                104usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringbuf<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::basic_stringbuf<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_stringbuf<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::basic_istringstream<libc::c_char>>(),
                384usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_istringstream<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::basic_istringstream<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_istringstream<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::basic_ostringstream<libc::c_char>>(),
                376usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_ostringstream<libc::c_char>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::basic_ostringstream<libc::c_char>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_ostringstream<libc::c_char>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_istringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::basic_istringstream<u32>>(),
                384usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_istringstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::basic_istringstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_istringstream<u32>)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_basic_ostringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
                376usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::__cxx11::basic_ostringstream<u32>)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::__cxx11::basic_ostringstream<u32>)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3cin"]
            pub static mut cin: root::std::istream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4cout"]
            pub static mut cout: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4cerr"]
            pub static mut cerr: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4clog"]
            pub static mut clog: root::std::ostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4wcin"]
            pub static mut wcin: root::std::wistream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wcout"]
            pub static mut wcout: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wcerr"]
            pub static mut wcerr: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5wclog"]
            pub static mut wclog: root::std::wostream;
        }
        extern "C" {
            #[link_name = "\u{1}_ZStL8__ioinit"]
            pub static mut __ioinit: root::std::ios_base_Init;
        }
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __allocated_ptr<_Alloc> {
            pub _M_alloc: *mut _Alloc,
            pub _M_ptr: root::std::__allocated_ptr_pointer,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
        }
        pub type __allocated_ptr_pointer = root::std::allocator_traits;
        pub type __allocated_ptr_value_type = root::std::allocator_traits;
        impl<_Alloc> Default for __allocated_ptr<_Alloc> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub mod __detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _List_node_base {
                pub _M_next: *mut root::std::__detail::_List_node_base,
                pub _M_prev: *mut root::std::__detail::_List_node_base,
            }
            #[test]
            fn bindgen_test_layout__List_node_base() {
                assert_eq!(
                    ::std::mem::size_of::<_List_node_base>(),
                    16usize,
                    concat!("Size of: ", stringify!(_List_node_base))
                );
                assert_eq!(
                    ::std::mem::align_of::<_List_node_base>(),
                    8usize,
                    concat!("Alignment of ", stringify!(_List_node_base))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<_List_node_base>()))._M_next as *const _ as usize
                    },
                    0usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(_List_node_base),
                        "::",
                        stringify!(_M_next)
                    )
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<_List_node_base>()))._M_prev as *const _ as usize
                    },
                    8usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(_List_node_base),
                        "::",
                        stringify!(_M_prev)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail15_List_node_base4swapERS0_S1_"]
                pub fn _List_node_base_swap(
                    __x: *mut root::std::__detail::_List_node_base,
                    __y: *mut root::std::__detail::_List_node_base,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_"]
                pub fn _List_node_base__M_transfer(
                    this: *mut root::std::__detail::_List_node_base,
                    __first: *mut root::std::__detail::_List_node_base,
                    __last: *mut root::std::__detail::_List_node_base,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail15_List_node_base10_M_reverseEv"]
                pub fn _List_node_base__M_reverse(this: *mut root::std::__detail::_List_node_base);
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail15_List_node_base7_M_hookEPS0_"]
                pub fn _List_node_base__M_hook(
                    this: *mut root::std::__detail::_List_node_base,
                    __position: *mut root::std::__detail::_List_node_base,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail15_List_node_base9_M_unhookEv"]
                pub fn _List_node_base__M_unhook(this: *mut root::std::__detail::_List_node_base);
            }
            impl Default for _List_node_base {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl _List_node_base {
                #[inline]
                pub unsafe fn swap(
                    __x: *mut root::std::__detail::_List_node_base,
                    __y: *mut root::std::__detail::_List_node_base,
                ) {
                    _List_node_base_swap(__x, __y)
                }
                #[inline]
                pub unsafe fn _M_transfer(
                    &mut self,
                    __first: *mut root::std::__detail::_List_node_base,
                    __last: *mut root::std::__detail::_List_node_base,
                ) {
                    _List_node_base__M_transfer(self, __first, __last)
                }
                #[inline]
                pub unsafe fn _M_reverse(&mut self) {
                    _List_node_base__M_reverse(self)
                }
                #[inline]
                pub unsafe fn _M_hook(
                    &mut self,
                    __position: *mut root::std::__detail::_List_node_base,
                ) {
                    _List_node_base__M_hook(self, __position)
                }
                #[inline]
                pub unsafe fn _M_unhook(&mut self) {
                    _List_node_base__M_unhook(self)
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _List_node_header {
                pub _base: root::std::__detail::_List_node_base,
                pub _M_size: usize,
            }
            #[test]
            fn bindgen_test_layout__List_node_header() {
                assert_eq!(
                    ::std::mem::size_of::<_List_node_header>(),
                    24usize,
                    concat!("Size of: ", stringify!(_List_node_header))
                );
                assert_eq!(
                    ::std::mem::align_of::<_List_node_header>(),
                    8usize,
                    concat!("Alignment of ", stringify!(_List_node_header))
                );
                assert_eq!(
                    unsafe {
                        &(*(::std::ptr::null::<_List_node_header>()))._M_size as *const _ as usize
                    },
                    16usize,
                    concat!(
                        "Offset of field: ",
                        stringify!(_List_node_header),
                        "::",
                        stringify!(_M_size)
                    )
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail17_List_node_header13_M_move_nodesEOS0_"]
                pub fn _List_node_header__M_move_nodes(
                    this: *mut root::std::__detail::_List_node_header,
                    __x: *mut root::std::__detail::_List_node_header,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail17_List_node_header7_M_initEv"]
                pub fn _List_node_header__M_init(this: *mut root::std::__detail::_List_node_header);
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail17_List_node_headerC1Ev"]
                pub fn _List_node_header__List_node_header(
                    this: *mut root::std::__detail::_List_node_header,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZNSt8__detail17_List_node_headerC1EOS0_"]
                pub fn _List_node_header__List_node_header1(
                    this: *mut root::std::__detail::_List_node_header,
                    __x: *mut root::std::__detail::_List_node_header,
                );
            }
            impl Default for _List_node_header {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            impl _List_node_header {
                #[inline]
                pub unsafe fn _M_move_nodes(
                    &mut self,
                    __x: *mut root::std::__detail::_List_node_header,
                ) {
                    _List_node_header__M_move_nodes(self, __x)
                }
                #[inline]
                pub unsafe fn _M_init(&mut self) {
                    _List_node_header__M_init(self)
                }
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    _List_node_header__List_node_header(&mut __bindgen_tmp);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(__x: *mut root::std::__detail::_List_node_header) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    _List_node_header__List_node_header1(&mut __bindgen_tmp, __x);
                    __bindgen_tmp
                }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _List_node {
            pub _base: root::std::__detail::_List_node_base,
            pub _M_storage: root::__gnu_cxx::__aligned_membuf,
        }
        impl Default for _List_node {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _List_iterator {
            pub _M_node: *mut root::std::__detail::_List_node_base,
        }
        pub type _List_iterator__Self = root::std::_List_iterator;
        pub type _List_iterator__Node = root::std::_List_node;
        pub type _List_iterator_difference_type = isize;
        pub type _List_iterator_iterator_category = root::std::bidirectional_iterator_tag;
        pub type _List_iterator_value_type<_Tp> = _Tp;
        pub type _List_iterator_pointer<_Tp> = *mut _Tp;
        pub type _List_iterator_reference<_Tp> = *mut _Tp;
        impl Default for _List_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _List_const_iterator {
            pub _M_node: *const root::std::__detail::_List_node_base,
        }
        pub type _List_const_iterator__Self = root::std::_List_const_iterator;
        pub type _List_const_iterator__Node = root::std::_List_node;
        pub type _List_const_iterator_iterator = root::std::_List_iterator;
        pub type _List_const_iterator_difference_type = isize;
        pub type _List_const_iterator_iterator_category = root::std::bidirectional_iterator_tag;
        pub type _List_const_iterator_value_type<_Tp> = _Tp;
        pub type _List_const_iterator_pointer<_Tp> = *const _Tp;
        pub type _List_const_iterator_reference<_Tp> = *const _Tp;
        impl Default for _List_const_iterator {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4acosf"]
            pub fn acos(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4acose"]
            pub fn acos1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4asinf"]
            pub fn asin(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4asine"]
            pub fn asin1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4atanf"]
            pub fn atan(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4atane"]
            pub fn atan1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5atan2ff"]
            pub fn atan2(__y: f32, __x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5atan2ee"]
            pub fn atan21(__y: u128, __x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4ceilf"]
            pub fn ceil(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4ceile"]
            pub fn ceil1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3cosf"]
            pub fn cos(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3cose"]
            pub fn cos1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4coshf"]
            pub fn cosh(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4coshe"]
            pub fn cosh1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3expf"]
            pub fn exp(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3expe"]
            pub fn exp1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fabsf"]
            pub fn fabs(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fabse"]
            pub fn fabs1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5floorf"]
            pub fn floor(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5floore"]
            pub fn floor1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fmodff"]
            pub fn fmod(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fmodee"]
            pub fn fmod1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5frexpfPi"]
            pub fn frexp(__x: f32, __exp: *mut libc::c_int) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5frexpePi"]
            pub fn frexp1(__x: u128, __exp: *mut libc::c_int) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5ldexpfi"]
            pub fn ldexp(__x: f32, __exp: libc::c_int) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5ldexpei"]
            pub fn ldexp1(__x: u128, __exp: libc::c_int) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3logf"]
            pub fn log(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3loge"]
            pub fn log1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5log10f"]
            pub fn log10(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5log10e"]
            pub fn log101(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4modffPf"]
            pub fn modf(__x: f32, __iptr: *mut f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4modfePe"]
            pub fn modf1(__x: u128, __iptr: *mut u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3powff"]
            pub fn pow(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3powee"]
            pub fn pow1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3sinf"]
            pub fn sin(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3sine"]
            pub fn sin1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4sinhf"]
            pub fn sinh(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4sinhe"]
            pub fn sinh1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4sqrtf"]
            pub fn sqrt(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4sqrte"]
            pub fn sqrt1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3tanf"]
            pub fn tan(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3tane"]
            pub fn tan1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4tanhf"]
            pub fn tanh(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4tanhe"]
            pub fn tanh1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10fpclassifyf"]
            pub fn fpclassify(__x: f32) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10fpclassifyd"]
            pub fn fpclassify1(__x: f64) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10fpclassifye"]
            pub fn fpclassify2(__x: u128) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8isfinitef"]
            pub fn isfinite(__x: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8isfinited"]
            pub fn isfinite1(__x: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8isfinitee"]
            pub fn isfinite2(__x: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5isinff"]
            pub fn isinf(__x: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5isinfd"]
            pub fn isinf1(__x: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5isinfe"]
            pub fn isinf2(__x: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5isnanf"]
            pub fn isnan(__x: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5isnand"]
            pub fn isnan1(__x: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5isnane"]
            pub fn isnan2(__x: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8isnormalf"]
            pub fn isnormal(__x: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8isnormald"]
            pub fn isnormal1(__x: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8isnormale"]
            pub fn isnormal2(__x: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7signbitf"]
            pub fn signbit(__x: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7signbitd"]
            pub fn signbit1(__x: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7signbite"]
            pub fn signbit2(__x: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9isgreaterff"]
            pub fn isgreater(__x: f32, __y: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9isgreaterdd"]
            pub fn isgreater1(__x: f64, __y: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9isgreateree"]
            pub fn isgreater2(__x: u128, __y: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14isgreaterequalff"]
            pub fn isgreaterequal(__x: f32, __y: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14isgreaterequaldd"]
            pub fn isgreaterequal1(__x: f64, __y: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt14isgreaterequalee"]
            pub fn isgreaterequal2(__x: u128, __y: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6islessff"]
            pub fn isless(__x: f32, __y: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6islessdd"]
            pub fn isless1(__x: f64, __y: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6islessee"]
            pub fn isless2(__x: u128, __y: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11islessequalff"]
            pub fn islessequal(__x: f32, __y: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11islessequaldd"]
            pub fn islessequal1(__x: f64, __y: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11islessequalee"]
            pub fn islessequal2(__x: u128, __y: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt13islessgreaterff"]
            pub fn islessgreater(__x: f32, __y: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt13islessgreaterdd"]
            pub fn islessgreater1(__x: f64, __y: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt13islessgreateree"]
            pub fn islessgreater2(__x: u128, __y: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11isunorderedff"]
            pub fn isunordered(__x: f32, __y: f32) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11isunordereddd"]
            pub fn isunordered1(__x: f64, __y: f64) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt11isunorderedee"]
            pub fn isunordered2(__x: u128, __y: u128) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5acoshf"]
            pub fn acosh(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5acoshe"]
            pub fn acosh1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5asinhf"]
            pub fn asinh(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5asinhe"]
            pub fn asinh1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5atanhf"]
            pub fn atanh(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5atanhe"]
            pub fn atanh1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4cbrtf"]
            pub fn cbrt(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4cbrte"]
            pub fn cbrt1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8copysignff"]
            pub fn copysign(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt8copysignee"]
            pub fn copysign1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3erff"]
            pub fn erf(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3erfe"]
            pub fn erf1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4erfcf"]
            pub fn erfc(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4erfce"]
            pub fn erfc1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4exp2f"]
            pub fn exp2(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4exp2e"]
            pub fn exp21(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5expm1f"]
            pub fn expm1(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5expm1e"]
            pub fn expm11(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fdimff"]
            pub fn fdim(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fdimee"]
            pub fn fdim1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3fmafff"]
            pub fn fma(__x: f32, __y: f32, __z: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt3fmaeee"]
            pub fn fma1(__x: u128, __y: u128, __z: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fmaxff"]
            pub fn fmax(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fmaxee"]
            pub fn fmax1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fminff"]
            pub fn fmin(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4fminee"]
            pub fn fmin1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5hypotff"]
            pub fn hypot(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5hypotee"]
            pub fn hypot1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5ilogbf"]
            pub fn ilogb(__x: f32) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5ilogbe"]
            pub fn ilogb1(__x: u128) -> libc::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6lgammaf"]
            pub fn lgamma(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6lgammae"]
            pub fn lgamma1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6llrintf"]
            pub fn llrint(__x: f32) -> libc::c_longlong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6llrinte"]
            pub fn llrint1(__x: u128) -> libc::c_longlong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7llroundf"]
            pub fn llround(__x: f32) -> libc::c_longlong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7llrounde"]
            pub fn llround1(__x: u128) -> libc::c_longlong;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5log1pf"]
            pub fn log1p(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5log1pe"]
            pub fn log1p1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4log2f"]
            pub fn log2(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4log2e"]
            pub fn log21(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4logbf"]
            pub fn logb(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4logbe"]
            pub fn logb1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5lrintf"]
            pub fn lrint(__x: f32) -> libc::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5lrinte"]
            pub fn lrint1(__x: u128) -> libc::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6lroundf"]
            pub fn lround(__x: f32) -> libc::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6lrounde"]
            pub fn lround1(__x: u128) -> libc::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9nearbyintf"]
            pub fn nearbyint(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9nearbyinte"]
            pub fn nearbyint1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9nextafterff"]
            pub fn nextafter(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9nextafteree"]
            pub fn nextafter1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10nexttowardfe"]
            pub fn nexttoward(__x: f32, __y: u128) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt10nexttowardee"]
            pub fn nexttoward1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9remainderff"]
            pub fn remainder(__x: f32, __y: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt9remainderee"]
            pub fn remainder1(__x: u128, __y: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6remquoffPi"]
            pub fn remquo(__x: f32, __y: f32, __pquo: *mut libc::c_int) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6remquoeePi"]
            pub fn remquo1(__x: u128, __y: u128, __pquo: *mut libc::c_int) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4rintf"]
            pub fn rint(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt4rinte"]
            pub fn rint1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5roundf"]
            pub fn round(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5rounde"]
            pub fn round1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7scalblnfl"]
            pub fn scalbln(__x: f32, __ex: libc::c_long) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt7scalblnel"]
            pub fn scalbln1(__x: u128, __ex: libc::c_long) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6scalbnfi"]
            pub fn scalbn(__x: f32, __ex: libc::c_int) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6scalbnei"]
            pub fn scalbn1(__x: u128, __ex: libc::c_int) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6tgammaf"]
            pub fn tgamma(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt6tgammae"]
            pub fn tgamma1(__x: u128) -> u128;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5truncf"]
            pub fn trunc(__x: f32) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}_ZSt5trunce"]
            pub fn trunc1(__x: u128) -> u128;
        }
        #[test]
        fn __bindgen_test_layout_allocator_open0_void_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::allocator>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::allocator)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::char_traits>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::char_traits)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_char_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_open0_wchar_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_char_char___mbstate_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_open0_wchar_t_char___mbstate_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt>(),
                24usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_char_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype_byname>(),
                576usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_ctype_byname_open0_wchar_t_close0_instantiation_1() {
            assert_eq!(
                ::std::mem::size_of::<root::std::ctype_byname>(),
                1344usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::ctype_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::ctype_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char16_t_char___mbstate_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout_codecvt_byname_open0_char32_t_char___mbstate_t_close0_instantiation_1(
        ) {
            assert_eq!(
                ::std::mem::size_of::<root::std::codecvt_byname>(),
                16usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::std::codecvt_byname>(),
                8usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::std::codecvt_byname)
                )
            );
        }
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            #[link_name = "\u{1}_ZN9__gnu_cxx3divExx"]
            pub fn div(__n: libc::c_longlong, __d: libc::c_longlong) -> root::lldiv_t;
        }
        pub type __conditional_type___type<_Iftrue> = _Iftrue;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __add_unsigned {
            pub _address: u8,
        }
        pub type __add_unsigned___if_type = u8;
        pub type __add_unsigned___type = root::__gnu_cxx::__add_unsigned___if_type;
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_signed_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___add_unsigned_open0_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__add_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__add_unsigned)
                )
            );
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __remove_unsigned {
            pub _address: u8,
        }
        pub type __remove_unsigned___if_type = u8;
        pub type __remove_unsigned___type = root::__gnu_cxx::__remove_unsigned___if_type;
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_char_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_short_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_int_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        #[test]
        fn __bindgen_test_layout___remove_unsigned_open0_unsigned_long_long_close0_instantiation() {
            assert_eq!(
                ::std::mem::size_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Size of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
            assert_eq!(
                ::std::mem::align_of::<root::__gnu_cxx::__remove_unsigned>(),
                1usize,
                concat!(
                    "Alignment of template specialization: ",
                    stringify!(root::__gnu_cxx::__remove_unsigned)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN9__gnu_cxx17__is_null_pointerEDn"]
            pub fn __is_null_pointer(arg1: root::std::nullptr_t) -> bool;
        }
        pub type __promote___type = f64;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __promote_2 {
            pub _address: u8,
        }
        pub type __promote_2___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __promote_3 {
            pub _address: u8,
        }
        pub type __promote_3___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __promote_4 {
            pub _address: u8,
        }
        pub type __promote_4___type<_Tp2> = _Tp2;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __numeric_traits_integer {
            pub _address: u8,
        }
        extern "C" {
            pub static __is_signed: bool;
        }
        extern "C" {
            pub static __digits: libc::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __numeric_traits_floating {
            pub _address: u8,
        }
        extern "C" {
            pub static __max_digits10: libc::c_int;
        }
        extern "C" {
            pub static __digits10: libc::c_int;
        }
        extern "C" {
            pub static __max_exponent10: libc::c_int;
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __numeric_traits {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __normal_iterator<_Iterator> {
            pub _M_current: _Iterator,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
        }
        pub type __normal_iterator___traits_type = root::std::iterator_traits;
        pub type __normal_iterator_iterator_type<_Iterator> = _Iterator;
        pub type __normal_iterator_iterator_category =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_value_type = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_difference_type =
            root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_reference = root::__gnu_cxx::__normal_iterator___traits_type;
        pub type __normal_iterator_pointer = root::__gnu_cxx::__normal_iterator___traits_type;
        impl<_Iterator> Default for __normal_iterator<_Iterator> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        pub mod __ops {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_less_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_less_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_less_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_less_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_less_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_less_iter))
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops16__iter_less_iterEv"]
                pub fn __iter_less_iter() -> root::__gnu_cxx::__ops::_Iter_less_iter;
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_less_val {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_less_val() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_less_val>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_less_val))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_less_val>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_less_val))
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops14_Iter_less_valC1Ev"]
                pub fn _Iter_less_val__Iter_less_val(
                    this: *mut root::__gnu_cxx::__ops::_Iter_less_val,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE"]
                pub fn _Iter_less_val__Iter_less_val1(
                    this: *mut root::__gnu_cxx::__ops::_Iter_less_val,
                    arg1: root::__gnu_cxx::__ops::_Iter_less_iter,
                );
            }
            impl _Iter_less_val {
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    _Iter_less_val__Iter_less_val(&mut __bindgen_tmp);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(arg1: root::__gnu_cxx::__ops::_Iter_less_iter) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    _Iter_less_val__Iter_less_val1(&mut __bindgen_tmp, arg1);
                    __bindgen_tmp
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops15__iter_less_valEv"]
                pub fn __iter_less_val() -> root::__gnu_cxx::__ops::_Iter_less_val;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops15__iter_comp_valENS0_15_Iter_less_iterE"]
                pub fn __iter_comp_val(
                    arg1: root::__gnu_cxx::__ops::_Iter_less_iter,
                ) -> root::__gnu_cxx::__ops::_Iter_less_val;
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Val_less_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Val_less_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Val_less_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Val_less_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Val_less_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Val_less_iter))
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops14_Val_less_iterC1Ev"]
                pub fn _Val_less_iter__Val_less_iter(
                    this: *mut root::__gnu_cxx::__ops::_Val_less_iter,
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops14_Val_less_iterC1ENS0_15_Iter_less_iterE"]
                pub fn _Val_less_iter__Val_less_iter1(
                    this: *mut root::__gnu_cxx::__ops::_Val_less_iter,
                    arg1: root::__gnu_cxx::__ops::_Iter_less_iter,
                );
            }
            impl _Val_less_iter {
                #[inline]
                pub unsafe fn new() -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    _Val_less_iter__Val_less_iter(&mut __bindgen_tmp);
                    __bindgen_tmp
                }
                #[inline]
                pub unsafe fn new1(arg1: root::__gnu_cxx::__ops::_Iter_less_iter) -> Self {
                    let mut __bindgen_tmp = ::std::mem::uninitialized();
                    _Val_less_iter__Val_less_iter1(&mut __bindgen_tmp, arg1);
                    __bindgen_tmp
                }
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops15__val_less_iterEv"]
                pub fn __val_less_iter() -> root::__gnu_cxx::__ops::_Val_less_iter;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE"]
                pub fn __val_comp_iter(
                    arg1: root::__gnu_cxx::__ops::_Iter_less_iter,
                ) -> root::__gnu_cxx::__ops::_Val_less_iter;
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_equal_to_iter {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_equal_to_iter() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_equal_to_iter>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_equal_to_iter))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_equal_to_iter>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_equal_to_iter))
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops20__iter_equal_to_iterEv"]
                pub fn __iter_equal_to_iter() -> root::__gnu_cxx::__ops::_Iter_equal_to_iter;
            }
            #[repr(C)]
            #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_equal_to_val {
                pub _address: u8,
            }
            #[test]
            fn bindgen_test_layout__Iter_equal_to_val() {
                assert_eq!(
                    ::std::mem::size_of::<_Iter_equal_to_val>(),
                    1usize,
                    concat!("Size of: ", stringify!(_Iter_equal_to_val))
                );
                assert_eq!(
                    ::std::mem::align_of::<_Iter_equal_to_val>(),
                    1usize,
                    concat!("Alignment of ", stringify!(_Iter_equal_to_val))
                );
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops19__iter_equal_to_valEv"]
                pub fn __iter_equal_to_val() -> root::__gnu_cxx::__ops::_Iter_equal_to_val;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN9__gnu_cxx5__ops15__iter_comp_valENS0_19_Iter_equal_to_iterE"]
                pub fn __iter_comp_val1(
                    arg1: root::__gnu_cxx::__ops::_Iter_equal_to_iter,
                ) -> root::__gnu_cxx::__ops::_Iter_equal_to_val;
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            impl<_Compare> Default for _Iter_comp_iter<_Compare> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_comp_val<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            impl<_Compare> Default for _Iter_comp_val<_Compare> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Val_comp_iter<_Compare> {
                pub _M_comp: _Compare,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
            }
            impl<_Compare> Default for _Val_comp_iter<_Compare> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_equals_val<_Value> {
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            impl<_Value> Default for _Iter_equals_val<_Value> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_equals_iter<_Iterator1> {
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
            }
            impl<_Iterator1> Default for _Iter_equals_iter<_Iterator1> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_pred<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
            }
            impl<_Predicate> Default for _Iter_pred<_Predicate> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_comp_to_val<_Compare, _Value> {
                pub _M_comp: _Compare,
                pub _M_value: *mut _Value,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
            }
            impl<_Compare, _Value> Default for _Iter_comp_to_val<_Compare, _Value> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_comp_to_iter<_Compare, _Iterator1> {
                pub _M_comp: _Compare,
                pub _M_it1: _Iterator1,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
                pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
            }
            impl<_Compare, _Iterator1> Default for _Iter_comp_to_iter<_Compare, _Iterator1> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
            pub struct _Iter_negate<_Predicate> {
                pub _M_pred: _Predicate,
                pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
            }
            impl<_Predicate> Default for _Iter_negate<_Predicate> {
                fn default() -> Self {
                    unsafe { ::std::mem::zeroed() }
                }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct _Char_types {
            pub _address: u8,
        }
        pub type _Char_types_int_type = libc::c_ulong;
        pub type _Char_types_pos_type = root::std::streampos;
        pub type _Char_types_off_type = root::std::streamoff;
        pub type _Char_types_state_type = root::mbstate_t;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct char_traits {
            pub _address: u8,
        }
        pub type char_traits_char_type<T> = T;
        pub type char_traits_int_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_pos_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_off_type = root::__gnu_cxx::_Char_types;
        pub type char_traits_state_type = root::__gnu_cxx::_Char_types;
        extern "C" {
            #[link_name = "\u{1}_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
            pub fn __verbose_terminate_handler();
        }
        #[repr(C)]
        #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct new_allocator {
            pub _address: u8,
        }
        pub type new_allocator_size_type = usize;
        pub type new_allocator_difference_type = isize;
        pub type new_allocator_pointer<_Tp> = *mut _Tp;
        pub type new_allocator_const_pointer<_Tp> = *const _Tp;
        pub type new_allocator_reference<_Tp> = *mut _Tp;
        pub type new_allocator_const_reference<_Tp> = *const _Tp;
        pub type new_allocator_value_type<_Tp> = _Tp;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct new_allocator_rebind {
            pub _address: u8,
        }
        pub type new_allocator_rebind_other = root::__gnu_cxx::new_allocator;
        pub type new_allocator_propagate_on_container_move_assignment = root::std::true_type;
        extern "C" {
            pub fn __uselocale(arg1: root::locale_t) -> root::locale_t;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __alloc_traits {
            pub _address: u8,
        }
        pub type __alloc_traits_allocator_type<_Alloc> = _Alloc;
        pub type __alloc_traits__Base_type = root::std::allocator_traits;
        pub type __alloc_traits_value_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_const_pointer = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_size_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_difference_type = root::__gnu_cxx::__alloc_traits__Base_type;
        pub type __alloc_traits_reference = *mut root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits_const_reference = *const root::__gnu_cxx::__alloc_traits_value_type;
        pub type __alloc_traits___is_custom_pointer = root::std::__and_;
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __alloc_traits_rebind {
            pub _address: u8,
        }
        pub type __alloc_traits_rebind_other = root::__gnu_cxx::__alloc_traits__Base_type;
        impl Default for __alloc_traits {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __aligned_membuf {
            pub _M_storage: *mut libc::c_uchar,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __aligned_membuf__Tp2<_Tp> {
            pub _M_t: _Tp,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
        }
        impl<_Tp> Default for __aligned_membuf__Tp2<_Tp> {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl Default for __aligned_membuf {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __aligned_buffer {
            pub _M_storage: u8,
        }
    }
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct div_t {
        pub quot: libc::c_int,
        pub rem: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ldiv_t {
        pub quot: libc::c_long,
        pub rem: libc::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lldiv_t {
        pub quot: libc::c_longlong,
        pub rem: libc::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const libc::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const libc::c_char) -> libc::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const libc::c_char) -> libc::c_longlong;
    }
    extern "C" {
        pub fn strtod(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> f64;
    }
    extern "C" {
        pub fn strtof(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> f32;
    }
    extern "C" {
        pub fn strtold(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> u128;
    }
    extern "C" {
        pub fn strtof32(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
        ) -> libc::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
        ) -> libc::c_ulong;
    }
    extern "C" {
        pub fn strtoq(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
        ) -> libc::c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
        ) -> libc::c_ulonglong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
        ) -> libc::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
        ) -> libc::c_ulonglong;
    }
    extern "C" {
        pub fn strfromd(
            __dest: *mut libc::c_char,
            __size: usize,
            __format: *const libc::c_char,
            __f: f64,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strfromf(
            __dest: *mut libc::c_char,
            __size: usize,
            __format: *const libc::c_char,
            __f: f32,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strfroml(
            __dest: *mut libc::c_char,
            __size: usize,
            __format: *const libc::c_char,
            __f: u128,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strfromf32(
            __dest: *mut libc::c_char,
            __size: usize,
            __format: *const libc::c_char,
            __f: root::_Float32,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strfromf64(
            __dest: *mut libc::c_char,
            __size: usize,
            __format: *const libc::c_char,
            __f: root::_Float64,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strfromf32x(
            __dest: *mut libc::c_char,
            __size: usize,
            __format: *const libc::c_char,
            __f: root::_Float32x,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strfromf64x(
            __dest: *mut libc::c_char,
            __size: usize,
            __format: *const libc::c_char,
            __f: root::_Float64x,
        ) -> libc::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const libc::c_ushort,
        pub __ctype_tolower: *const libc::c_int,
        pub __ctype_toupper: *const libc::c_int,
        pub __names: [*const libc::c_char; 13usize],
    }
    #[test]
    fn bindgen_test_layout___locale_struct() {
        assert_eq!(
            ::std::mem::size_of::<__locale_struct>(),
            232usize,
            concat!("Size of: ", stringify!(__locale_struct))
        );
        assert_eq!(
            ::std::mem::align_of::<__locale_struct>(),
            8usize,
            concat!("Alignment of ", stringify!(__locale_struct))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__locales)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_b)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_tolower)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_toupper)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__names)
            )
        );
    }
    impl Default for __locale_struct {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    extern "C" {
        pub fn strtol_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
            __loc: root::locale_t,
        ) -> libc::c_long;
    }
    extern "C" {
        pub fn strtoul_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
            __loc: root::locale_t,
        ) -> libc::c_ulong;
    }
    extern "C" {
        pub fn strtoll_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
            __loc: root::locale_t,
        ) -> libc::c_longlong;
    }
    extern "C" {
        pub fn strtoull_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __base: libc::c_int,
            __loc: root::locale_t,
        ) -> libc::c_ulonglong;
    }
    extern "C" {
        pub fn strtod_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __loc: root::locale_t,
        ) -> u128;
    }
    extern "C" {
        pub fn strtof32_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x_l(
            __nptr: *const libc::c_char,
            __endptr: *mut *mut libc::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn l64a(__n: libc::c_long) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn a64l(__s: *const libc::c_char) -> libc::c_long;
    }
    pub type __u_char = libc::c_uchar;
    pub type __u_short = libc::c_ushort;
    pub type __u_int = libc::c_uint;
    pub type __u_long = libc::c_ulong;
    pub type __int8_t = libc::c_schar;
    pub type __uint8_t = libc::c_uchar;
    pub type __int16_t = libc::c_short;
    pub type __uint16_t = libc::c_ushort;
    pub type __int32_t = libc::c_int;
    pub type __uint32_t = libc::c_uint;
    pub type __int64_t = libc::c_long;
    pub type __uint64_t = libc::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = libc::c_long;
    pub type __u_quad_t = libc::c_ulong;
    pub type __intmax_t = libc::c_long;
    pub type __uintmax_t = libc::c_ulong;
    pub type __dev_t = libc::c_ulong;
    pub type __uid_t = libc::c_uint;
    pub type __gid_t = libc::c_uint;
    pub type __ino_t = libc::c_ulong;
    pub type __ino64_t = libc::c_ulong;
    pub type __mode_t = libc::c_uint;
    pub type __nlink_t = libc::c_ulong;
    pub type __off_t = libc::c_long;
    pub type __off64_t = libc::c_long;
    pub type __pid_t = libc::c_int;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __fsid_t {
        pub __val: [libc::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = libc::c_long;
    pub type __rlim_t = libc::c_ulong;
    pub type __rlim64_t = libc::c_ulong;
    pub type __id_t = libc::c_uint;
    pub type __time_t = libc::c_long;
    pub type __useconds_t = libc::c_uint;
    pub type __suseconds_t = libc::c_long;
    pub type __daddr_t = libc::c_int;
    pub type __key_t = libc::c_int;
    pub type __clockid_t = libc::c_int;
    pub type __timer_t = *mut libc::c_void;
    pub type __blksize_t = libc::c_long;
    pub type __blkcnt_t = libc::c_long;
    pub type __blkcnt64_t = libc::c_long;
    pub type __fsblkcnt_t = libc::c_ulong;
    pub type __fsblkcnt64_t = libc::c_ulong;
    pub type __fsfilcnt_t = libc::c_ulong;
    pub type __fsfilcnt64_t = libc::c_ulong;
    pub type __fsword_t = libc::c_long;
    pub type __ssize_t = libc::c_long;
    pub type __syscall_slong_t = libc::c_long;
    pub type __syscall_ulong_t = libc::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut libc::c_char;
    pub type __intptr_t = libc::c_long;
    pub type __socklen_t = libc::c_uint;
    pub type __sig_atomic_t = libc::c_int;
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type pid_t = root::__pid_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type useconds_t = root::__useconds_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = libc::c_ulong;
    pub type ushort = libc::c_ushort;
    pub type uint = libc::c_uint;
    pub type u_int8_t = libc::c_uchar;
    pub type u_int16_t = libc::c_ushort;
    pub type u_int32_t = libc::c_uint;
    pub type u_int64_t = libc::c_ulong;
    pub type register_t = libc::c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __sigset_t {
        pub __val: [libc::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        assert_eq!(
            ::std::mem::size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        assert_eq!(
            ::std::mem::size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[test]
    fn bindgen_test_layout_timespec() {
        assert_eq!(
            ::std::mem::size_of::<timespec>(),
            16usize,
            concat!("Size of: ", stringify!(timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(timespec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    pub type __fd_mask = libc::c_long;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    pub type fd_mask = root::__fd_mask;
    extern "C" {
        pub fn select(
            __nfds: libc::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: libc::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __fdelt_chk(__d: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        pub fn __fdelt_warn(__d: libc::c_long) -> libc::c_long;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: libc::c_uint,
        pub __writers: libc::c_uint,
        pub __wrphase_futex: libc::c_uint,
        pub __writers_futex: libc::c_uint,
        pub __pad3: libc::c_uint,
        pub __pad4: libc::c_uint,
        pub __cur_writer: libc::c_int,
        pub __shared: libc::c_int,
        pub __rwelision: libc::c_schar,
        pub __pad1: [libc::c_uchar; 7usize],
        pub __pad2: libc::c_ulong,
        pub __flags: libc::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_rwlock_arch_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
            56usize,
            concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _
                    as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _
                    as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    impl Default for __pthread_internal_list {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_mutex_s {
        pub __lock: libc::c_int,
        pub __count: libc::c_uint,
        pub __owner: libc::c_int,
        pub __nusers: libc::c_uint,
        pub __kind: libc::c_int,
        pub __spins: libc::c_short,
        pub __elision: libc::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    impl Default for __pthread_mutex_s {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __bindgen_anon_1: root::__pthread_cond_s__bindgen_ty_1,
        pub __bindgen_anon_2: root::__pthread_cond_s__bindgen_ty_2,
        pub __g_refs: [libc::c_uint; 2usize],
        pub __g_size: [libc::c_uint; 2usize],
        pub __g1_orig_size: libc::c_uint,
        pub __wrefs: libc::c_uint,
        pub __g_signals: [libc::c_uint; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_1 {
        pub __wseq: libc::c_ulonglong,
        pub __wseq32: root::__pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
        pub __low: libc::c_uint,
        pub __high: libc::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq32)
            )
        );
    }
    impl Default for __pthread_cond_s__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__pthread_cond_s__bindgen_ty_1 {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_2 {
        pub __g1_start: libc::c_ulonglong,
        pub __g1_start32: root::__pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
        pub __low: libc::c_uint,
        pub __high: libc::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start32)
            )
        );
    }
    impl Default for __pthread_cond_s__bindgen_ty_2 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_2 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__pthread_cond_s__bindgen_ty_2 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s>(),
            48usize,
            concat!("Size of: ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    impl Default for __pthread_cond_s {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __pthread_cond_s {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "__pthread_cond_s {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals )
        }
    }
    pub type pthread_t = libc::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [libc::c_char; 4usize],
        pub __align: libc::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutexattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_mutexattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_mutexattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_mutexattr_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [libc::c_char; 4usize],
        pub __align: libc::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_condattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_condattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_condattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_condattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_condattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_condattr_t {{ union }}")
        }
    }
    pub type pthread_key_t = libc::c_uint;
    pub type pthread_once_t = libc::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [libc::c_char; 56usize],
        pub __align: libc::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_attr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_attr_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_attr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_attr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_attr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_attr_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [libc::c_char; 40usize],
        pub __align: libc::c_long,
        _bindgen_union_align: [u64; 5usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_mutex_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_mutex_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_mutex_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [libc::c_char; 48usize],
        pub __align: libc::c_longlong,
        _bindgen_union_align: [u64; 6usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_cond_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_cond_t>(),
            48usize,
            concat!("Size of: ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_cond_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_cond_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_cond_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_cond_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [libc::c_char; 56usize],
        pub __align: libc::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlock_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlock_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlock_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_rwlock_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_rwlock_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_rwlock_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [libc::c_char; 8usize],
        pub __align: libc::c_long,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlockattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Size of: ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_rwlockattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_rwlockattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_rwlockattr_t {{ union }}")
        }
    }
    pub type pthread_spinlock_t = libc::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [libc::c_char; 32usize],
        pub __align: libc::c_long,
        _bindgen_union_align: [u64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_barrier_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrier_t>(),
            32usize,
            concat!("Size of: ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrier_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_barrier_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_barrier_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_barrier_t {{ union }}")
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [libc::c_char; 4usize],
        pub __align: libc::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrierattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    impl Default for pthread_barrierattr_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for pthread_barrierattr_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "pthread_barrierattr_t {{ union }}")
        }
    }
    extern "C" {
        pub fn random() -> libc::c_long;
    }
    extern "C" {
        pub fn srandom(__seed: libc::c_uint);
    }
    extern "C" {
        pub fn initstate(
            __seed: libc::c_uint,
            __statebuf: *mut libc::c_char,
            __statelen: usize,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn setstate(__statebuf: *mut libc::c_char) -> *mut libc::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: libc::c_int,
        pub rand_deg: libc::c_int,
        pub rand_sep: libc::c_int,
        pub end_ptr: *mut i32,
    }
    #[test]
    fn bindgen_test_layout_random_data() {
        assert_eq!(
            ::std::mem::size_of::<random_data>(),
            48usize,
            concat!("Size of: ", stringify!(random_data))
        );
        assert_eq!(
            ::std::mem::align_of::<random_data>(),
            8usize,
            concat!("Alignment of ", stringify!(random_data))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(fptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_deg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_sep)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(end_ptr)
            )
        );
    }
    impl Default for random_data {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32) -> libc::c_int;
    }
    extern "C" {
        pub fn srandom_r(__seed: libc::c_uint, __buf: *mut root::random_data) -> libc::c_int;
    }
    extern "C" {
        pub fn initstate_r(
            __seed: libc::c_uint,
            __statebuf: *mut libc::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn setstate_r(
            __statebuf: *mut libc::c_char,
            __buf: *mut root::random_data,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn rand() -> libc::c_int;
    }
    extern "C" {
        pub fn srand(__seed: libc::c_uint);
    }
    extern "C" {
        pub fn rand_r(__seed: *mut libc::c_uint) -> libc::c_int;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn erand48(__xsubi: *mut libc::c_ushort) -> f64;
    }
    extern "C" {
        pub fn lrand48() -> libc::c_long;
    }
    extern "C" {
        pub fn nrand48(__xsubi: *mut libc::c_ushort) -> libc::c_long;
    }
    extern "C" {
        pub fn mrand48() -> libc::c_long;
    }
    extern "C" {
        pub fn jrand48(__xsubi: *mut libc::c_ushort) -> libc::c_long;
    }
    extern "C" {
        pub fn srand48(__seedval: libc::c_long);
    }
    extern "C" {
        pub fn seed48(__seed16v: *mut libc::c_ushort) -> *mut libc::c_ushort;
    }
    extern "C" {
        pub fn lcong48(__param: *mut libc::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct drand48_data {
        pub __x: [libc::c_ushort; 3usize],
        pub __old_x: [libc::c_ushort; 3usize],
        pub __c: libc::c_ushort,
        pub __init: libc::c_ushort,
        pub __a: libc::c_ulonglong,
    }
    #[test]
    fn bindgen_test_layout_drand48_data() {
        assert_eq!(
            ::std::mem::size_of::<drand48_data>(),
            24usize,
            concat!("Size of: ", stringify!(drand48_data))
        );
        assert_eq!(
            ::std::mem::align_of::<drand48_data>(),
            8usize,
            concat!("Alignment of ", stringify!(drand48_data))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__old_x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__c)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__init)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__a)
            )
        );
    }
    extern "C" {
        pub fn drand48_r(__buffer: *mut root::drand48_data, __result: *mut f64) -> libc::c_int;
    }
    extern "C" {
        pub fn erand48_r(
            __xsubi: *mut libc::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut libc::c_long,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut libc::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut libc::c_long,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut libc::c_long,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut libc::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut libc::c_long,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn srand48_r(__seedval: libc::c_long, __buffer: *mut root::drand48_data)
            -> libc::c_int;
    }
    extern "C" {
        pub fn seed48_r(
            __seed16v: *mut libc::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn lcong48_r(
            __param: *mut libc::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn realloc(__ptr: *mut libc::c_void, __size: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn reallocarray(
            __ptr: *mut libc::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut libc::c_void);
    }
    extern "C" {
        pub fn alloca(__size: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn valloc(__size: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut libc::c_void,
            __alignment: usize,
            __size: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
    }
    extern "C" {
        pub fn on_exit(
            __func: ::std::option::Option<
                unsafe extern "C" fn(__status: libc::c_int, __arg: *mut libc::c_void),
            >,
            __arg: *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn exit(__status: libc::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: libc::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: libc::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn secure_getenv(__name: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn putenv(__string: *mut libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn setenv(
            __name: *const libc::c_char,
            __value: *const libc::c_char,
            __replace: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn unsetenv(__name: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn clearenv() -> libc::c_int;
    }
    extern "C" {
        pub fn mktemp(__template: *mut libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn mkstemp(__template: *mut libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn mkstemp64(__template: *mut libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn mkstemps(__template: *mut libc::c_char, __suffixlen: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn mkstemps64(__template: *mut libc::c_char, __suffixlen: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn mkdtemp(__template: *mut libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn mkostemp(__template: *mut libc::c_char, __flags: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn mkostemp64(__template: *mut libc::c_char, __flags: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn mkostemps(
            __template: *mut libc::c_char,
            __suffixlen: libc::c_int,
            __flags: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn mkostemps64(
            __template: *mut libc::c_char,
            __suffixlen: libc::c_int,
            __flags: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn system(__command: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn canonicalize_file_name(__name: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn realpath(
            __name: *const libc::c_char,
            __resolved: *mut libc::c_char,
        ) -> *mut libc::c_char;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(arg1: *const libc::c_void, arg2: *const libc::c_void) -> libc::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const libc::c_void,
            arg2: *const libc::c_void,
            arg3: *mut libc::c_void,
        ) -> libc::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const libc::c_void,
            __base: *const libc::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut libc::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn qsort_r(
            __base: *mut libc::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_d_fn_t,
            __arg: *mut libc::c_void,
        );
    }
    extern "C" {
        pub fn abs(__x: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn labs(__x: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        pub fn llabs(__x: libc::c_longlong) -> libc::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: libc::c_int, __denom: libc::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(__numer: libc::c_long, __denom: libc::c_long) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(__numer: libc::c_longlong, __denom: libc::c_longlong) -> root::lldiv_t;
    }
    extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: libc::c_int,
            __decpt: *mut libc::c_int,
            __sign: *mut libc::c_int,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: libc::c_int,
            __decpt: *mut libc::c_int,
            __sign: *mut libc::c_int,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: libc::c_int,
            __buf: *mut libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: libc::c_int,
            __decpt: *mut libc::c_int,
            __sign: *mut libc::c_int,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: libc::c_int,
            __decpt: *mut libc::c_int,
            __sign: *mut libc::c_int,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: libc::c_int,
            __buf: *mut libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: libc::c_int,
            __decpt: *mut libc::c_int,
            __sign: *mut libc::c_int,
            __buf: *mut libc::c_char,
            __len: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: libc::c_int,
            __decpt: *mut libc::c_int,
            __sign: *mut libc::c_int,
            __buf: *mut libc::c_char,
            __len: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: libc::c_int,
            __decpt: *mut libc::c_int,
            __sign: *mut libc::c_int,
            __buf: *mut libc::c_char,
            __len: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: libc::c_int,
            __decpt: *mut libc::c_int,
            __sign: *mut libc::c_int,
            __buf: *mut libc::c_char,
            __len: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn mblen(__s: *const libc::c_char, __n: usize) -> libc::c_int;
    }
    extern "C" {
        pub fn mbtowc(__pwc: *mut u32, __s: *const libc::c_char, __n: usize) -> libc::c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut libc::c_char, __wchar: u32) -> libc::c_int;
    }
    extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const libc::c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcstombs(__s: *mut libc::c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    extern "C" {
        pub fn rpmatch(__response: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut libc::c_char,
            __tokens: *const *mut libc::c_char,
            __valuep: *mut *mut libc::c_char,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn posix_openpt(__oflag: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn grantpt(__fd: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn unlockpt(__fd: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn ptsname(__fd: libc::c_int) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn ptsname_r(
            __fd: libc::c_int,
            __buf: *mut libc::c_char,
            __buflen: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getpt() -> libc::c_int;
    }
    extern "C" {
        pub fn getloadavg(__loadavg: *mut f64, __nelem: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn __realpath_chk(
            __name: *const libc::c_char,
            __resolved: *mut libc::c_char,
            __resolvedlen: usize,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __ptsname_r_chk(
            __fd: libc::c_int,
            __buf: *mut libc::c_char,
            __buflen: usize,
            __nreal: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __wctomb_chk(__s: *mut libc::c_char, __wchar: u32, __buflen: usize) -> libc::c_int;
    }
    extern "C" {
        pub fn __mbstowcs_chk(
            __dst: *mut u32,
            __src: *const libc::c_char,
            __len: usize,
            __dstlen: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn __wcstombs_chk(
            __dst: *mut libc::c_char,
            __src: *const u32,
            __len: usize,
            __dstlen: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn memcpy(
            __dest: *mut libc::c_void,
            __src: *const libc::c_void,
            __n: usize,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn memmove(
            __dest: *mut libc::c_void,
            __src: *const libc::c_void,
            __n: usize,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn memccpy(
            __dest: *mut libc::c_void,
            __src: *const libc::c_void,
            __c: libc::c_int,
            __n: usize,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn memset(__s: *mut libc::c_void, __c: libc::c_int, __n: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn memcmp(
            __s1: *const libc::c_void,
            __s2: *const libc::c_void,
            __n: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn memchr(__s: *const libc::c_void, __c: libc::c_int, __n: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn rawmemchr(__s: *const libc::c_void, __c: libc::c_int) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn memrchr(__s: *const libc::c_void, __c: libc::c_int, __n: usize)
            -> *mut libc::c_void;
    }
    extern "C" {
        pub fn strcpy(__dest: *mut libc::c_char, __src: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strncpy(
            __dest: *mut libc::c_char,
            __src: *const libc::c_char,
            __n: usize,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strcat(__dest: *mut libc::c_char, __src: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strncat(
            __dest: *mut libc::c_char,
            __src: *const libc::c_char,
            __n: usize,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strcmp(__s1: *const libc::c_char, __s2: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn strncmp(
            __s1: *const libc::c_char,
            __s2: *const libc::c_char,
            __n: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strcoll(__s1: *const libc::c_char, __s2: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn strxfrm(__dest: *mut libc::c_char, __src: *const libc::c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn strcoll_l(
            __s1: *const libc::c_char,
            __s2: *const libc::c_char,
            __l: root::locale_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strxfrm_l(
            __dest: *mut libc::c_char,
            __src: *const libc::c_char,
            __n: usize,
            __l: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strdup(__s: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strndup(__string: *const libc::c_char, __n: usize) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strchr(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strrchr(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strchrnul(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strcspn(__s: *const libc::c_char, __reject: *const libc::c_char) -> usize;
    }
    extern "C" {
        pub fn strspn(__s: *const libc::c_char, __accept: *const libc::c_char) -> usize;
    }
    extern "C" {
        pub fn strpbrk(
            __s: *const libc::c_char,
            __accept: *const libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strstr(
            __haystack: *const libc::c_char,
            __needle: *const libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strtok(__s: *mut libc::c_char, __delim: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __strtok_r(
            __s: *mut libc::c_char,
            __delim: *const libc::c_char,
            __save_ptr: *mut *mut libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strtok_r(
            __s: *mut libc::c_char,
            __delim: *const libc::c_char,
            __save_ptr: *mut *mut libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strcasestr(
            __haystack: *const libc::c_char,
            __needle: *const libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn memmem(
            __haystack: *const libc::c_void,
            __haystacklen: usize,
            __needle: *const libc::c_void,
            __needlelen: usize,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn __mempcpy(
            __dest: *mut libc::c_void,
            __src: *const libc::c_void,
            __n: usize,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn mempcpy(
            __dest: *mut libc::c_void,
            __src: *const libc::c_void,
            __n: usize,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn strlen(__s: *const libc::c_char) -> usize;
    }
    extern "C" {
        pub fn strnlen(__string: *const libc::c_char, __maxlen: usize) -> usize;
    }
    extern "C" {
        pub fn strerror(__errnum: libc::c_int) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strerror_r(
            __errnum: libc::c_int,
            __buf: *mut libc::c_char,
            __buflen: usize,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strerror_l(__errnum: libc::c_int, __l: root::locale_t) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn bcmp(
            __s1: *const libc::c_void,
            __s2: *const libc::c_void,
            __n: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn bcopy(__src: *const libc::c_void, __dest: *mut libc::c_void, __n: usize);
    }
    extern "C" {
        pub fn bzero(__s: *mut libc::c_void, __n: usize);
    }
    extern "C" {
        pub fn index(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn rindex(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn ffs(__i: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn ffsl(__l: libc::c_long) -> libc::c_int;
    }
    extern "C" {
        pub fn ffsll(__ll: libc::c_longlong) -> libc::c_int;
    }
    extern "C" {
        pub fn strcasecmp(__s1: *const libc::c_char, __s2: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn strncasecmp(
            __s1: *const libc::c_char,
            __s2: *const libc::c_char,
            __n: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strcasecmp_l(
            __s1: *const libc::c_char,
            __s2: *const libc::c_char,
            __loc: root::locale_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn strncasecmp_l(
            __s1: *const libc::c_char,
            __s2: *const libc::c_char,
            __n: usize,
            __loc: root::locale_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn explicit_bzero(__s: *mut libc::c_void, __n: usize);
    }
    extern "C" {
        pub fn strsep(
            __stringp: *mut *mut libc::c_char,
            __delim: *const libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strsignal(__sig: libc::c_int) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __stpcpy(__dest: *mut libc::c_char, __src: *const libc::c_char)
            -> *mut libc::c_char;
    }
    extern "C" {
        pub fn stpcpy(__dest: *mut libc::c_char, __src: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __stpncpy(
            __dest: *mut libc::c_char,
            __src: *const libc::c_char,
            __n: usize,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn stpncpy(
            __dest: *mut libc::c_char,
            __src: *const libc::c_char,
            __n: usize,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strverscmp(__s1: *const libc::c_char, __s2: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn strfry(__string: *mut libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn memfrob(__s: *mut libc::c_void, __n: usize) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn basename(__filename: *const libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __warn_memset_zero_len();
    }
    extern "C" {
        pub fn __explicit_bzero_chk(__dest: *mut libc::c_void, __len: usize, __destlen: usize);
    }
    extern "C" {
        pub fn __stpncpy_chk(
            __dest: *mut libc::c_char,
            __src: *const libc::c_char,
            __n: usize,
            __destlen: usize,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __assert_fail(
            __assertion: *const libc::c_char,
            __file: *const libc::c_char,
            __line: libc::c_uint,
            __function: *const libc::c_char,
        );
    }
    extern "C" {
        pub fn __assert_perror_fail(
            __errnum: libc::c_int,
            __file: *const libc::c_char,
            __line: libc::c_uint,
            __function: *const libc::c_char,
        );
    }
    extern "C" {
        pub fn __assert(
            __assertion: *const libc::c_char,
            __file: *const libc::c_char,
            __line: libc::c_int,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX {
        pub re: f64,
        pub im: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX),
                "::",
                stringify!(im)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKPOLAR {
        pub modulus: f64,
        pub phase: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKPOLAR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKPOLAR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKPOLAR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKPOLAR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).modulus as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(modulus)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKPOLAR>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKPOLAR),
                "::",
                stringify!(phase)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC3 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC3() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC3>(),
            24usize,
            concat!("Size of: ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC3>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC3))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC3>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC3),
                "::",
                stringify!(z)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKVEC4 {
        pub x: f64,
        pub y: f64,
        pub z: f64,
        pub w: f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVEC4() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVEC4>(),
            32usize,
            concat!("Size of: ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVEC4>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVEC4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).y as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).z as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(z)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVEC4>())).w as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVEC4),
                "::",
                stringify!(w)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct t_CKVECTOR {
        pub N: libc::c_ulong,
        pub values: *mut f64,
    }
    #[test]
    fn bindgen_test_layout_t_CKVECTOR() {
        assert_eq!(
            ::std::mem::size_of::<t_CKVECTOR>(),
            16usize,
            concat!("Size of: ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKVECTOR>(),
            8usize,
            concat!("Alignment of ", stringify!(t_CKVECTOR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).N as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(N)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKVECTOR>())).values as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKVECTOR),
                "::",
                stringify!(values)
            )
        );
    }
    impl Default for t_CKVECTOR {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type c_str = *mut libc::c_char;
    pub type c_constr = *const libc::c_char;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct t_CKCOMPLEX_SAMPLE {
        pub re: f32,
        pub im: f32,
    }
    #[test]
    fn bindgen_test_layout_t_CKCOMPLEX_SAMPLE() {
        assert_eq!(
            ::std::mem::size_of::<t_CKCOMPLEX_SAMPLE>(),
            8usize,
            concat!("Size of: ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            ::std::mem::align_of::<t_CKCOMPLEX_SAMPLE>(),
            4usize,
            concat!("Alignment of ", stringify!(t_CKCOMPLEX_SAMPLE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<t_CKCOMPLEX_SAMPLE>())).im as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(t_CKCOMPLEX_SAMPLE),
                "::",
                stringify!(im)
            )
        );
    }
    pub type U_boolList = *mut root::U_boolList_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct U_boolList_ {
        pub head: libc::c_ulong,
        pub tail: root::U_boolList,
    }
    #[test]
    fn bindgen_test_layout_U_boolList_() {
        assert_eq!(
            ::std::mem::size_of::<U_boolList_>(),
            16usize,
            concat!("Size of: ", stringify!(U_boolList_))
        );
        assert_eq!(
            ::std::mem::align_of::<U_boolList_>(),
            8usize,
            concat!("Alignment of ", stringify!(U_boolList_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<U_boolList_>())).head as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(U_boolList_),
                "::",
                stringify!(head)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<U_boolList_>())).tail as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(U_boolList_),
                "::",
                stringify!(tail)
            )
        );
    }
    impl Default for U_boolList_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn checked_malloc(size: libc::c_int) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn cc_str(arg1: *mut libc::c_char) -> root::c_str;
    }
    extern "C" {
        pub fn U_BoolList(head: libc::c_ulong, tail: root::U_boolList) -> root::U_boolList;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct S_Symbol_ {
        _unused: [u8; 0],
    }
    pub type S_Symbol = *mut root::S_Symbol_;
    extern "C" {
        pub fn insert_symbol(arg1: root::c_constr) -> root::S_Symbol;
    }
    extern "C" {
        pub fn S_name(arg1: root::S_Symbol) -> root::c_str;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TAB_table_ {
        _unused: [u8; 0],
    }
    pub type S_table = *mut root::TAB_table_;
    extern "C" {
        pub fn S_empty() -> root::S_table;
    }
    extern "C" {
        pub fn S_empty2(size: libc::c_uint) -> root::S_table;
    }
    extern "C" {
        pub fn S_enter(t: root::S_table, sym: root::S_Symbol, value: *mut libc::c_void);
    }
    extern "C" {
        pub fn S_enter2(t: root::S_table, str: root::c_constr, value: *mut libc::c_void);
    }
    extern "C" {
        pub fn S_look(t: root::S_table, sym: root::S_Symbol) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn S_look2(t: root::S_table, str: root::c_constr) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn S_beginScope(t: root::S_table);
    }
    extern "C" {
        pub fn S_endScope(t: root::S_table);
    }
    extern "C" {
        pub fn S_pop(t: root::S_table);
    }
    pub type a_Pos = libc::c_int;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Operator {
        ae_op_plus = 0,
        ae_op_minus = 1,
        ae_op_times = 2,
        ae_op_divide = 3,
        ae_op_eq = 4,
        ae_op_neq = 5,
        ae_op_lt = 6,
        ae_op_le = 7,
        ae_op_gt = 8,
        ae_op_ge = 9,
        ae_op_and = 10,
        ae_op_or = 11,
        ae_op_s_or = 12,
        ae_op_s_and = 13,
        ae_op_shift_left = 14,
        ae_op_shift_right = 15,
        ae_op_percent = 16,
        ae_op_s_xor = 17,
        ae_op_chuck = 18,
        ae_op_plus_chuck = 19,
        ae_op_minus_chuck = 20,
        ae_op_times_chuck = 21,
        ae_op_divide_chuck = 22,
        ae_op_s_and_chuck = 23,
        ae_op_s_or_chuck = 24,
        ae_op_s_xor_chuck = 25,
        ae_op_shift_right_chuck = 26,
        ae_op_shift_left_chuck = 27,
        ae_op_percent_chuck = 28,
        ae_op_s_chuck = 29,
        ae_op_plusplus = 30,
        ae_op_minusminus = 31,
        ae_op_tilda = 32,
        ae_op_exclamation = 33,
        ae_op_at_chuck = 34,
        ae_op_unchuck = 35,
        ae_op_upchuck = 36,
        ae_op_spork = 37,
        ae_op_typeof = 38,
        ae_op_sizeof = 39,
        ae_op_new = 40,
        ae_op_arrow_left = 41,
        ae_op_arrow_right = 42,
    }
    extern "C" {
        pub fn op2str(op: root::ae_Operator) -> *const libc::c_char;
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Keyword {
        ae_key_this = 0,
        ae_key_me = 1,
        ae_key_func = 2,
        ae_key_public = 3,
        ae_key_protected = 4,
        ae_key_private = 5,
        ae_key_static = 6,
        ae_key_instance = 7,
        ae_key_abstract = 8,
    }
    pub type a_Program = *mut root::a_Program_;
    pub type a_Section = *mut root::a_Section_;
    pub type a_Stmt_List = *mut root::a_Stmt_List_;
    pub type a_Class_Def = *mut root::a_Class_Def_;
    pub type a_Func_Def = *mut root::a_Func_Def_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Code_Segment_ {
        _unused: [u8; 0],
    }
    pub type a_Code_Segment = *mut root::a_Code_Segment_;
    pub type a_Stmt = *mut root::a_Stmt_;
    pub type a_Exp = *mut root::a_Exp_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Exp_Chuck_ {
        _unused: [u8; 0],
    }
    pub type a_Exp_Chuck = *mut root::a_Exp_Chuck_;
    pub type a_Exp_Binary = *mut root::a_Exp_Binary_;
    pub type a_Exp_Cast = *mut root::a_Exp_Cast_;
    pub type a_Exp_Unary = *mut root::a_Exp_Unary_;
    pub type a_Exp_Postfix = *mut root::a_Exp_Postfix_;
    pub type a_Exp_Primary = *mut root::a_Exp_Primary_;
    pub type a_Exp_Dur = *mut root::a_Exp_Dur_;
    pub type a_Exp_Array = *mut root::a_Exp_Array_;
    pub type a_Exp_Func_Call = *mut root::a_Exp_Func_Call_;
    pub type a_Exp_Dot_Member = *mut root::a_Exp_Dot_Member_;
    pub type a_Exp_If = *mut root::a_Exp_If_;
    pub type a_Exp_Decl = *mut root::a_Exp_Decl_;
    pub type a_Exp_Hack = *mut root::a_Exp_Hack_;
    pub type a_Stmt_Code = *mut root::a_Stmt_Code_;
    pub type a_Stmt_If = *mut root::a_Stmt_If_;
    pub type a_Stmt_While = *mut root::a_Stmt_While_;
    pub type a_Stmt_Until = *mut root::a_Stmt_Until_;
    pub type a_Stmt_For = *mut root::a_Stmt_For_;
    pub type a_Stmt_Loop = *mut root::a_Stmt_Loop_;
    pub type a_Stmt_Switch = *mut root::a_Stmt_Switch_;
    pub type a_Stmt_Break = *mut root::a_Stmt_Break_;
    pub type a_Stmt_Continue = *mut root::a_Stmt_Continue_;
    pub type a_Stmt_Return = *mut root::a_Stmt_Return_;
    pub type a_Stmt_Case = *mut root::a_Stmt_Case_;
    pub type a_Stmt_GotoLabel = *mut root::a_Stmt_GotoLabel_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct a_Decl_ {
        _unused: [u8; 0],
    }
    pub type a_Decl = *mut root::a_Decl_;
    pub type a_Var_Decl = *mut root::a_Var_Decl_;
    pub type a_Var_Decl_List = *mut root::a_Var_Decl_List_;
    pub type a_Type_Decl = *mut root::a_Type_Decl_;
    pub type a_Arg_List = *mut root::a_Arg_List_;
    pub type a_Id_List = *mut root::a_Id_List_;
    pub type a_Class_Ext = *mut root::a_Class_Ext_;
    pub type a_Class_Body = *mut root::a_Class_Body_;
    pub type a_Array_Sub = *mut root::a_Array_Sub_;
    pub type a_Complex = *mut root::a_Complex_;
    pub type a_Polar = *mut root::a_Polar_;
    pub type a_Vec = *mut root::a_Vec_;
    pub type t_CKTYPE = *mut root::Chuck_Type;
    pub type t_CKVALUE = *mut root::Chuck_Value;
    pub type t_CKFUNC = *mut root::Chuck_Func;
    pub type t_CKNSPC = *mut root::Chuck_Namespace;
    pub type t_CKVMCODE = *mut root::Chuck_VM_Code;
    extern "C" {
        pub fn new_program(section: root::a_Section, pos: libc::c_int) -> root::a_Program;
    }
    extern "C" {
        pub fn prepend_program(
            section: root::a_Section,
            program: root::a_Program,
            pos: libc::c_int,
        ) -> root::a_Program;
    }
    extern "C" {
        pub fn new_section_stmt(stmt_list: root::a_Stmt_List, pos: libc::c_int) -> root::a_Section;
    }
    extern "C" {
        pub fn new_section_func_def(
            func_def: root::a_Func_Def,
            pos: libc::c_int,
        ) -> root::a_Section;
    }
    extern "C" {
        pub fn new_section_class_def(
            class_def: root::a_Class_Def,
            pos: libc::c_int,
        ) -> root::a_Section;
    }
    extern "C" {
        pub fn new_stmt_list(stmt: root::a_Stmt, pos: libc::c_int) -> root::a_Stmt_List;
    }
    extern "C" {
        pub fn prepend_stmt_list(
            stmt: root::a_Stmt,
            stmt_list: root::a_Stmt_List,
            pos: libc::c_int,
        ) -> root::a_Stmt_List;
    }
    extern "C" {
        pub fn new_stmt_from_expression(exp: root::a_Exp, pos: libc::c_int) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_code(code: root::a_Stmt_List, pos: libc::c_int) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_while(
            cond: root::a_Exp,
            body: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_do_while(
            cond: root::a_Exp,
            body: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_until(
            cond: root::a_Exp,
            body: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_do_until(
            cond: root::a_Exp,
            body: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_for(
            c1: root::a_Stmt,
            c2: root::a_Stmt,
            c3: root::a_Exp,
            body: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_loop(
            cond: root::a_Exp,
            body: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_if(
            cond: root::a_Exp,
            if_body: root::a_Stmt,
            else_body: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_switch(exp: root::a_Exp, pos: libc::c_int) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_break(pos: libc::c_int) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_continue(pos: libc::c_int) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_return(exp: root::a_Exp, pos: libc::c_int) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_label(xid: root::c_str, pos: libc::c_int) -> root::a_Stmt;
    }
    extern "C" {
        pub fn new_stmt_from_case(exp: root::a_Exp, pos: libc::c_int) -> root::a_Stmt;
    }
    extern "C" {
        pub fn prepend_expression(
            exp: root::a_Exp,
            list: root::a_Exp,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_binary(
            lhs: root::a_Exp,
            oper: root::ae_Operator,
            rhs: root::a_Exp,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary(
            oper: root::ae_Operator,
            exp: root::a_Exp,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary2(
            oper: root::ae_Operator,
            type_: root::a_Type_Decl,
            array: root::a_Array_Sub,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_unary3(
            oper: root::ae_Operator,
            code: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_cast(
            type_: root::a_Type_Decl,
            exp: root::a_Exp,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_array(
            base: root::a_Exp,
            indices: root::a_Array_Sub,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_array_lit(exp_list: root::a_Array_Sub, pos: libc::c_int)
            -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_func_call(
            base: root::a_Exp,
            args: root::a_Exp,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_member_dot(
            base: root::a_Exp,
            member: root::c_str,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_postfix(
            base: root::a_Exp,
            op: root::ae_Operator,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_dur(
            base: root::a_Exp,
            unit: root::a_Exp,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_id(xid: root::c_str, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_int(num: libc::c_long, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_uint(num: libc::c_ulong, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_float(num: f64, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_str(str: root::c_str, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_char(chr: root::c_str, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_if(
            cond: root::a_Exp,
            lhs: root::a_Exp,
            rhs: root::a_Exp,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_complex(arg1: root::a_Complex, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_polar(arg1: root::a_Polar, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_vec(arg1: root::a_Vec, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl_external(
            type_decl: root::a_Type_Decl,
            var_decl_list: root::a_Var_Decl_List,
            is_static: libc::c_int,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl_global(
            type_decl: root::a_Type_Decl,
            var_decl_list: root::a_Var_Decl_List,
            is_static: libc::c_int,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_decl(
            type_decl: root::a_Type_Decl,
            var_decl_list: root::a_Var_Decl_List,
            is_static: libc::c_int,
            pos: libc::c_int,
        ) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_hack(exp: root::a_Exp, pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_exp_from_nil(pos: libc::c_int) -> root::a_Exp;
    }
    extern "C" {
        pub fn new_var_decl_list(
            var_decl: root::a_Var_Decl,
            pos: libc::c_int,
        ) -> root::a_Var_Decl_List;
    }
    extern "C" {
        pub fn prepend_var_decl_list(
            var_decl: root::a_Var_Decl,
            list: root::a_Var_Decl_List,
            pos: libc::c_int,
        ) -> root::a_Var_Decl_List;
    }
    extern "C" {
        pub fn new_var_decl(
            xid: root::c_constr,
            array: root::a_Array_Sub,
            pos: libc::c_int,
        ) -> root::a_Var_Decl;
    }
    extern "C" {
        pub fn new_type_decl(
            xid: root::a_Id_List,
            ref_: libc::c_int,
            pos: libc::c_int,
        ) -> root::a_Type_Decl;
    }
    extern "C" {
        pub fn add_type_decl_array(
            type_decl: root::a_Type_Decl,
            array: root::a_Array_Sub,
            pos: libc::c_int,
        ) -> root::a_Type_Decl;
    }
    extern "C" {
        pub fn new_arg_list(
            type_decl: root::a_Type_Decl,
            var_decl: root::a_Var_Decl,
            pos: libc::c_int,
        ) -> root::a_Arg_List;
    }
    extern "C" {
        pub fn prepend_arg_list(
            type_decl: root::a_Type_Decl,
            var_decl: root::a_Var_Decl,
            arg_list: root::a_Arg_List,
            pos: libc::c_int,
        ) -> root::a_Arg_List;
    }
    extern "C" {
        pub fn new_array_sub(exp: root::a_Exp, pos: libc::c_int) -> root::a_Array_Sub;
    }
    extern "C" {
        pub fn prepend_array_sub(
            array: root::a_Array_Sub,
            exp: root::a_Exp,
            pos: libc::c_int,
        ) -> root::a_Array_Sub;
    }
    extern "C" {
        pub fn new_complex(re: root::a_Exp, pos: libc::c_int) -> root::a_Complex;
    }
    extern "C" {
        pub fn new_polar(mod_: root::a_Exp, pos: libc::c_int) -> root::a_Polar;
    }
    extern "C" {
        pub fn new_vec(e: root::a_Exp, pos: libc::c_int) -> root::a_Vec;
    }
    extern "C" {
        pub fn new_class_def(
            class_decl: root::ae_Keyword,
            xid: root::a_Id_List,
            ext: root::a_Class_Ext,
            body: root::a_Class_Body,
            pos: libc::c_int,
        ) -> root::a_Class_Def;
    }
    extern "C" {
        pub fn new_class_body(section: root::a_Section, pos: libc::c_int) -> root::a_Class_Body;
    }
    extern "C" {
        pub fn prepend_class_body(
            section: root::a_Section,
            body: root::a_Class_Body,
            pos: libc::c_int,
        ) -> root::a_Class_Body;
    }
    extern "C" {
        pub fn new_class_ext(
            extend_id: root::a_Id_List,
            impl_list: root::a_Id_List,
            pos: libc::c_int,
        ) -> root::a_Class_Ext;
    }
    extern "C" {
        pub fn new_iface_def(
            class_decl: root::ae_Keyword,
            xid: root::a_Id_List,
            ext: root::a_Class_Ext,
            body: root::a_Class_Body,
            pos: libc::c_int,
        ) -> root::a_Class_Def;
    }
    extern "C" {
        pub fn new_id_list(xid: root::c_constr, pos: libc::c_int) -> root::a_Id_List;
    }
    extern "C" {
        pub fn prepend_id_list(
            xid: root::c_constr,
            list: root::a_Id_List,
            pos: libc::c_int,
        ) -> root::a_Id_List;
    }
    extern "C" {
        pub fn clean_exp(exp: root::a_Exp);
    }
    extern "C" {
        pub fn new_func_def(
            func_decl: root::ae_Keyword,
            static_decl: root::ae_Keyword,
            type_decl: root::a_Type_Decl,
            name: root::c_str,
            arg_list: root::a_Arg_List,
            code: root::a_Stmt,
            pos: libc::c_int,
        ) -> root::a_Func_Def;
    }
    extern "C" {
        pub fn delete_id_list(x: root::a_Id_List);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Binary_ {
        pub lhs: root::a_Exp,
        pub op: root::ae_Operator,
        pub rhs: root::a_Exp,
        pub ck_func: root::t_CKFUNC,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Binary_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Binary_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Exp_Binary_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Binary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Binary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).lhs as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(lhs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).op as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).rhs as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(rhs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).ck_func as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Binary_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Binary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Binary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Cast_ {
        pub type_: root::a_Type_Decl,
        pub exp: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Cast_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Cast_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Cast_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Cast_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Cast_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Cast_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Cast_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Cast_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Unary_ {
        pub op: root::ae_Operator,
        pub exp: root::a_Exp,
        pub type_: root::a_Type_Decl,
        pub array: root::a_Array_Sub,
        pub code: root::a_Stmt,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Unary_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Unary_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Unary_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Unary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Unary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).op as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).type_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).array as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).code as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Unary_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Unary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Unary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Postfix_ {
        pub exp: root::a_Exp,
        pub op: root::ae_Operator,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Postfix_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Postfix_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Exp_Postfix_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Postfix_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Postfix_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).op as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).linepos as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Postfix_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Postfix_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Postfix_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Dur_ {
        pub base: root::a_Exp,
        pub unit: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Dur_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Dur_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Dur_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Dur_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Dur_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).unit as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(unit)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dur_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dur_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Dur_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Array_ {
        pub base: root::a_Exp,
        pub indices: root::a_Array_Sub,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Array_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Array_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Exp_Array_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Array_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Array_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).indices as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(indices)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Array_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Array_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Array_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Func_Call_ {
        pub func: root::a_Exp,
        pub args: root::a_Exp,
        pub ret_type: root::t_CKTYPE,
        pub ck_func: root::t_CKFUNC,
        pub ck_vm_code: root::t_CKVMCODE,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Func_Call_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Func_Call_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Func_Call_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Func_Call_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Func_Call_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).func as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).args as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ret_type as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ret_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_func as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).ck_vm_code as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(ck_vm_code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Func_Call_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Func_Call_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Func_Call_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Dot_Member_ {
        pub base: root::a_Exp,
        pub t_base: root::t_CKTYPE,
        pub xid: root::S_Symbol,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Dot_Member_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Dot_Member_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_Dot_Member_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Dot_Member_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Dot_Member_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).t_base as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(t_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).xid as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Dot_Member_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Dot_Member_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Dot_Member_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_If_ {
        pub cond: root::a_Exp,
        pub if_exp: root::a_Exp,
        pub else_exp: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_If_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_If_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_If_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_If_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_If_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).if_exp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(if_exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).else_exp as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(else_exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_If_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_If_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_If_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Decl_ {
        pub type_: root::a_Type_Decl,
        pub var_decl_list: root::a_Var_Decl_List,
        pub num_var_decls: libc::c_int,
        pub is_static: libc::c_int,
        pub is_global: libc::c_int,
        pub ck_type: root::t_CKTYPE,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Decl_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Decl_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp_Decl_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).var_decl_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(var_decl_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).num_var_decls as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(num_var_decls)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_static as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(is_static)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).is_global as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(is_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).ck_type as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(ck_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Decl_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Decl_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Exp_Hack_ {
        pub exp: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Hack_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Hack_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Exp_Hack_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Hack_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Hack_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Hack_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Hack_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Hack_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Var_Decl_List_ {
        pub var_decl: root::a_Var_Decl,
        pub next: root::a_Var_Decl_List,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Var_Decl_List_() {
        assert_eq!(
            ::std::mem::size_of::<a_Var_Decl_List_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Var_Decl_List_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Var_Decl_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Var_Decl_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).var_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_List_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_List_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Var_Decl_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Var_Decl_ {
        pub xid: root::S_Symbol,
        pub var_decl: root::a_Var_Decl,
        pub array: root::a_Array_Sub,
        pub value: root::t_CKVALUE,
        pub addr: *mut libc::c_void,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Var_Decl_() {
        assert_eq!(
            ::std::mem::size_of::<a_Var_Decl_>(),
            56usize,
            concat!("Size of: ", stringify!(a_Var_Decl_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Var_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Var_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).var_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).array as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).value as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).addr as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).linepos as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Var_Decl_>())).self_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Var_Decl_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Var_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Type_Decl_ {
        pub xid: root::a_Id_List,
        pub array: root::a_Array_Sub,
        pub ref_: libc::c_int,
        pub linepos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Type_Decl_() {
        assert_eq!(
            ::std::mem::size_of::<a_Type_Decl_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Type_Decl_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Type_Decl_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Type_Decl_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).array as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).ref_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(ref_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Type_Decl_>())).linepos as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Type_Decl_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Type_Decl_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Array_Sub_ {
        pub depth: libc::c_ulong,
        pub exp_list: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
        pub err_num: libc::c_int,
        pub err_pos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Array_Sub_() {
        assert_eq!(
            ::std::mem::size_of::<a_Array_Sub_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Array_Sub_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Array_Sub_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Array_Sub_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).depth as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).exp_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(exp_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(self_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_num as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(err_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Array_Sub_>())).err_pos as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Array_Sub_),
                "::",
                stringify!(err_pos)
            )
        );
    }
    impl Default for a_Array_Sub_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Arg_List_ {
        pub type_decl: root::a_Type_Decl,
        pub var_decl: root::a_Var_Decl,
        pub type_: root::t_CKTYPE,
        pub next: root::a_Arg_List,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Arg_List_() {
        assert_eq!(
            ::std::mem::size_of::<a_Arg_List_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Arg_List_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Arg_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Arg_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(type_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).var_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(var_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).type_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).next as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Arg_List_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Arg_List_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Arg_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Complex_ {
        pub re: root::a_Exp,
        pub im: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Complex_() {
        assert_eq!(
            ::std::mem::size_of::<a_Complex_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Complex_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Complex_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Complex_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).re as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(re)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).im as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(im)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Complex_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Complex_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Complex_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Polar_ {
        pub mod_: root::a_Exp,
        pub phase: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Polar_() {
        assert_eq!(
            ::std::mem::size_of::<a_Polar_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Polar_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Polar_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Polar_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).mod_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(mod_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).phase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(phase)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Polar_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Polar_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Polar_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Vec_ {
        pub args: root::a_Exp,
        pub numdims: libc::c_int,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[test]
    fn bindgen_test_layout_a_Vec_() {
        assert_eq!(
            ::std::mem::size_of::<a_Vec_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Vec_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Vec_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Vec_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).args as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).numdims as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(numdims)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).linepos as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Vec_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Vec_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Vec_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Primary_Type {
        ae_primary_var = 0,
        ae_primary_num = 1,
        ae_primary_float = 2,
        ae_primary_str = 3,
        ae_primary_array = 4,
        ae_primary_exp = 5,
        ae_primary_hack = 6,
        ae_primary_complex = 7,
        ae_primary_polar = 8,
        ae_primary_vec = 9,
        ae_primary_char = 10,
        ae_primary_nil = 11,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Exp_Primary_ {
        pub s_type: root::ae_Exp_Primary_Type,
        pub value: root::t_CKVALUE,
        pub __bindgen_anon_1: root::a_Exp_Primary___bindgen_ty_1,
        pub linepos: libc::c_int,
        pub self_: root::a_Exp,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Exp_Primary___bindgen_ty_1 {
        pub var: root::S_Symbol,
        pub num: libc::c_long,
        pub fnum: f64,
        pub str: root::c_str,
        pub chr: root::c_str,
        pub array: root::a_Array_Sub,
        pub exp: root::a_Exp,
        pub complex: root::a_Complex,
        pub polar: root::a_Polar,
        pub vec: root::a_Vec,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Primary___bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Primary___bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(a_Exp_Primary___bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Primary___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Primary___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).var as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(var)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).num as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(num)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).fnum as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(fnum)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).str as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(str)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).chr as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(chr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).array as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).exp as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).complex as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(complex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).polar as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(polar)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp_Primary___bindgen_ty_1>())).vec as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary___bindgen_ty_1),
                "::",
                stringify!(vec)
            )
        );
    }
    impl Default for a_Exp_Primary___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_Primary___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Exp_Primary___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Exp_Primary_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_Primary_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Exp_Primary_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_Primary_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_Primary_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).value as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_Primary_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_Primary_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Exp_Primary_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_Primary_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "a_Exp_Primary_ {{ s_type: {:?}, value: {:?}, __bindgen_anon_1: {:?}, linepos: {:?}, self: {:?} }}" , self . s_type , self . value , self . __bindgen_anon_1 , self . linepos , self . self_ )
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Type {
        ae_exp_binary = 0,
        ae_exp_unary = 1,
        ae_exp_cast = 2,
        ae_exp_postfix = 3,
        ae_exp_dur = 4,
        ae_exp_primary = 5,
        ae_exp_array = 6,
        ae_exp_func_call = 7,
        ae_exp_dot_member = 8,
        ae_exp_if = 9,
        ae_exp_decl = 10,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Exp_Meta {
        ae_meta_value = 0,
        ae_meta_var = 1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Exp_ {
        pub s_type: root::ae_Exp_Type,
        pub s_meta: root::ae_Exp_Meta,
        pub type_: root::t_CKTYPE,
        pub owner: root::t_CKNSPC,
        pub next: root::a_Exp,
        pub group_size: libc::c_ulong,
        pub cast_to: root::t_CKTYPE,
        pub emit_var: libc::c_ulong,
        pub __bindgen_anon_1: root::a_Exp___bindgen_ty_1,
        pub linepos: libc::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Exp___bindgen_ty_1 {
        pub binary: root::a_Exp_Binary_,
        pub unary: root::a_Exp_Unary_,
        pub cast: root::a_Exp_Cast_,
        pub postfix: root::a_Exp_Postfix_,
        pub dur: root::a_Exp_Dur_,
        pub primary: root::a_Exp_Primary_,
        pub array: root::a_Exp_Array_,
        pub func_call: root::a_Exp_Func_Call_,
        pub dot_member: root::a_Exp_Dot_Member_,
        pub exp_if: root::a_Exp_If_,
        pub decl: root::a_Exp_Decl_,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_a_Exp___bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp___bindgen_ty_1>(),
            56usize,
            concat!("Size of: ", stringify!(a_Exp___bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp___bindgen_ty_1))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).binary as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(binary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).unary as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(unary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).cast as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(cast)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).postfix as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(postfix)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dur as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(dur)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).primary as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(primary)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).array as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(array)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).func_call as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(func_call)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).dot_member as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(dot_member)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).exp_if as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(exp_if)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp___bindgen_ty_1>())).decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp___bindgen_ty_1),
                "::",
                stringify!(decl)
            )
        );
    }
    impl Default for a_Exp___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Exp___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Exp_() {
        assert_eq!(
            ::std::mem::size_of::<a_Exp_>(),
            120usize,
            concat!("Size of: ", stringify!(a_Exp_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Exp_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Exp_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).s_meta as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(s_meta)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).type_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).owner as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).next as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).group_size as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(group_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).cast_to as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(cast_to)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).emit_var as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(emit_var)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Exp_>())).linepos as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Exp_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Exp_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Exp_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "a_Exp_ {{ s_type: {:?}, s_meta: {:?}, type: {:?}, owner: {:?}, next: {:?}, group_size: {:?}, cast_to: {:?}, emit_var: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}" , self . s_type , self . s_meta , self . type_ , self . owner , self . next , self . group_size , self . cast_to , self . emit_var , self . __bindgen_anon_1 , self . linepos )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_While_ {
        pub is_do: libc::c_int,
        pub cond: root::a_Exp,
        pub body: root::a_Stmt,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_While_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_While_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_While_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_While_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_While_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).is_do as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(is_do)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).cond as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_While_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_While_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_While_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Until_ {
        pub is_do: libc::c_int,
        pub cond: root::a_Exp,
        pub body: root::a_Stmt,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Until_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Until_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_Until_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Until_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Until_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).is_do as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(is_do)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).cond as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Until_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Until_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Until_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_For_ {
        pub c1: root::a_Stmt,
        pub c2: root::a_Stmt,
        pub c3: root::a_Exp,
        pub body: root::a_Stmt,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_For_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_For_>(),
            48usize,
            concat!("Size of: ", stringify!(a_Stmt_For_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_For_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_For_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c1 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c2 as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).c3 as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(c3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).body as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).linepos as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_For_>())).self_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_For_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_For_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Loop_ {
        pub cond: root::a_Exp,
        pub body: root::a_Stmt,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Loop_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Loop_>(),
            32usize,
            concat!("Size of: ", stringify!(a_Stmt_Loop_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Loop_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Loop_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).body as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Loop_>())).self_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Loop_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Loop_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Code_ {
        pub stmt_list: root::a_Stmt_List,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Code_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Code_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Code_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Code_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Code_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).stmt_list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(stmt_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Code_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Code_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Code_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_If_ {
        pub cond: root::a_Exp,
        pub if_body: root::a_Stmt,
        pub else_body: root::a_Stmt,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_If_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_If_>(),
            40usize,
            concat!("Size of: ", stringify!(a_Stmt_If_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_If_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_If_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).cond as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(cond)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).if_body as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(if_body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).else_body as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(else_body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).linepos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_If_>())).self_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_If_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_If_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Switch_ {
        pub val: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Switch_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Switch_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Switch_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Switch_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Switch_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(val)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Switch_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Switch_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Switch_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Break_ {
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Break_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Break_>(),
            16usize,
            concat!("Size of: ", stringify!(a_Stmt_Break_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Break_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Break_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).linepos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Break_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Break_>())).self_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Break_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Break_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Continue_ {
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Continue_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Continue_>(),
            16usize,
            concat!("Size of: ", stringify!(a_Stmt_Continue_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Continue_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Continue_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).linepos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Continue_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Continue_>())).self_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Continue_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Continue_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Return_ {
        pub val: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Return_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Return_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Return_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Return_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Return_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(val)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Return_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Return_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Return_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_Case_ {
        pub exp: root::a_Exp,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_Case_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_Case_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_Case_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_Case_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_Case_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).exp as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(exp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_Case_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_Case_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_Case_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_GotoLabel_ {
        pub name: root::S_Symbol,
        pub linepos: libc::c_int,
        pub self_: root::a_Stmt,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_GotoLabel_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_GotoLabel_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_GotoLabel_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_GotoLabel_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_GotoLabel_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).linepos as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_GotoLabel_>())).self_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_GotoLabel_),
                "::",
                stringify!(self_)
            )
        );
    }
    impl Default for a_Stmt_GotoLabel_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Stmt_Type {
        ae_stmt_exp = 0,
        ae_stmt_while = 1,
        ae_stmt_until = 2,
        ae_stmt_for = 3,
        ae_stmt_loop = 4,
        ae_stmt_if = 5,
        ae_stmt_code = 6,
        ae_stmt_switch = 7,
        ae_stmt_break = 8,
        ae_stmt_continue = 9,
        ae_stmt_return = 10,
        ae_stmt_case = 11,
        ae_stmt_gotolabel = 12,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Stmt_ {
        pub s_type: root::ae_Stmt_Type,
        pub skip: libc::c_int,
        pub __bindgen_anon_1: root::a_Stmt___bindgen_ty_1,
        pub linepos: libc::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Stmt___bindgen_ty_1 {
        pub stmt_exp: root::a_Exp,
        pub stmt_code: root::a_Stmt_Code_,
        pub stmt_while: root::a_Stmt_While_,
        pub stmt_until: root::a_Stmt_Until_,
        pub stmt_loop: root::a_Stmt_Loop_,
        pub stmt_for: root::a_Stmt_For_,
        pub stmt_if: root::a_Stmt_If_,
        pub stmt_switch: root::a_Stmt_Switch_,
        pub stmt_break: root::a_Stmt_Break_,
        pub stmt_continue: root::a_Stmt_Continue_,
        pub stmt_return: root::a_Stmt_Return_,
        pub stmt_case: root::a_Stmt_Case_,
        pub stmt_gotolabel: root::a_Stmt_GotoLabel_,
        _bindgen_union_align: [u64; 6usize],
    }
    #[test]
    fn bindgen_test_layout_a_Stmt___bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt___bindgen_ty_1>(),
            48usize,
            concat!("Size of: ", stringify!(a_Stmt___bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_exp as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_exp)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_code as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_code)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_while as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_while)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_until as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_until)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_loop as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_loop)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_for as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_for)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_if as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_if)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_switch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_switch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_break as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_break)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_continue as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_continue)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_return as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_return)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_case as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_case)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Stmt___bindgen_ty_1>())).stmt_gotolabel as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt___bindgen_ty_1),
                "::",
                stringify!(stmt_gotolabel)
            )
        );
    }
    impl Default for a_Stmt___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Stmt___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Stmt___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_>(),
            64usize,
            concat!("Size of: ", stringify!(a_Stmt_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).skip as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(skip)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_>())).linepos as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Stmt_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Stmt_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "a_Stmt_ {{ s_type: {:?}, skip: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
                self.s_type, self.skip, self.__bindgen_anon_1, self.linepos
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Stmt_List_ {
        pub stmt: root::a_Stmt,
        pub next: root::a_Stmt_List,
        pub linepos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Stmt_List_() {
        assert_eq!(
            ::std::mem::size_of::<a_Stmt_List_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Stmt_List_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Stmt_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Stmt_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).stmt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(stmt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Stmt_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Stmt_List_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Stmt_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Def_ {
        pub decl: root::ae_Keyword,
        pub name: root::a_Id_List,
        pub ext: root::a_Class_Ext,
        pub body: root::a_Class_Body,
        pub type_: root::t_CKTYPE,
        pub iface: libc::c_int,
        pub home: root::t_CKNSPC,
        pub linepos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Def_() {
        assert_eq!(
            ::std::mem::size_of::<a_Class_Def_>(),
            64usize,
            concat!("Size of: ", stringify!(a_Class_Def_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Class_Def_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Def_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).name as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).ext as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(ext)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).body as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(body)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).iface as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(iface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).home as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(home)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Def_>())).linepos as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Def_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Def_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Ext_ {
        pub extend_id: root::a_Id_List,
        pub impl_list: root::a_Id_List,
        pub linepos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Ext_() {
        assert_eq!(
            ::std::mem::size_of::<a_Class_Ext_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Class_Ext_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Class_Ext_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Ext_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).extend_id as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(extend_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).impl_list as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(impl_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Ext_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Ext_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Ext_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Class_Body_ {
        pub section: root::a_Section,
        pub next: root::a_Class_Body,
        pub linepos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Class_Body_() {
        assert_eq!(
            ::std::mem::size_of::<a_Class_Body_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Class_Body_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Class_Body_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Class_Body_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).section as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(section)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Class_Body_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Class_Body_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Class_Body_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Id_List_ {
        pub xid: root::S_Symbol,
        pub next: root::a_Id_List,
        pub linepos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Id_List_() {
        assert_eq!(
            ::std::mem::size_of::<a_Id_List_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Id_List_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Id_List_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Id_List_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).xid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Id_List_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Id_List_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Id_List_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Func_Type {
        ae_func_user = 0,
        ae_func_builtin = 1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Func_Def_ {
        pub func_decl: root::ae_Keyword,
        pub static_decl: root::ae_Keyword,
        pub type_decl: root::a_Type_Decl,
        pub ret_type: root::t_CKTYPE,
        pub name: root::S_Symbol,
        pub arg_list: root::a_Arg_List,
        pub code: root::a_Stmt,
        pub ck_func: root::t_CKFUNC,
        pub global: libc::c_uint,
        pub s_type: libc::c_uint,
        pub stack_depth: libc::c_uint,
        pub dl_func_ptr: *mut libc::c_void,
        pub linepos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Func_Def_() {
        assert_eq!(
            ::std::mem::size_of::<a_Func_Def_>(),
            88usize,
            concat!("Size of: ", stringify!(a_Func_Def_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Func_Def_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Func_Def_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).func_decl as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(func_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).static_decl as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(static_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).type_decl as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(type_decl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ret_type as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(ret_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).name as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).arg_list as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(arg_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).code as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).ck_func as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(ck_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).global as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).s_type as *const _ as usize },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).stack_depth as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(stack_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).dl_func_ptr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(dl_func_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Func_Def_>())).linepos as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Func_Def_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Func_Def_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum ae_Section_Type {
        ae_section_stmt = 0,
        ae_section_func = 1,
        ae_section_class = 2,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct a_Section_ {
        pub s_type: root::ae_Section_Type,
        pub __bindgen_anon_1: root::a_Section___bindgen_ty_1,
        pub linepos: libc::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union a_Section___bindgen_ty_1 {
        pub stmt_list: root::a_Stmt_List,
        pub class_def: root::a_Class_Def,
        pub func_def: root::a_Func_Def,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_a_Section___bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<a_Section___bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(a_Section___bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Section___bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Section___bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).stmt_list as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(stmt_list)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).class_def as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(class_def)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<a_Section___bindgen_ty_1>())).func_def as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section___bindgen_ty_1),
                "::",
                stringify!(func_def)
            )
        );
    }
    impl Default for a_Section___bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Section___bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "a_Section___bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_a_Section_() {
        assert_eq!(
            ::std::mem::size_of::<a_Section_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Section_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Section_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Section_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Section_>())).s_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section_),
                "::",
                stringify!(s_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Section_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Section_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Section_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for a_Section_ {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "a_Section_ {{ s_type: {:?}, __bindgen_anon_1: {:?}, linepos: {:?} }}",
                self.s_type, self.__bindgen_anon_1, self.linepos
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct a_Program_ {
        pub section: root::a_Section,
        pub next: root::a_Program,
        pub linepos: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_a_Program_() {
        assert_eq!(
            ::std::mem::size_of::<a_Program_>(),
            24usize,
            concat!("Size of: ", stringify!(a_Program_))
        );
        assert_eq!(
            ::std::mem::align_of::<a_Program_>(),
            8usize,
            concat!("Alignment of ", stringify!(a_Program_))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).section as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(section)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).next as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<a_Program_>())).linepos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(a_Program_),
                "::",
                stringify!(linepos)
            )
        );
    }
    impl Default for a_Program_ {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __gnuc_va_list = root::__builtin_va_list;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: libc::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: libc::c_uint,
        pub __wchb: [libc::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    impl Default for __mbstate_t__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    impl Default for __mbstate_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for __mbstate_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "__mbstate_t {{ __count: {:?}, __value: {:?} }}",
                self.__count, self.__value
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos_t = root::_G_fpos_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    impl Default for _G_fpos64_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for _G_fpos64_t {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}",
                self.__pos, self.__state
            )
        }
    }
    pub type __fpos64_t = root::_G_fpos64_t;
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_codecvt {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_wide_data {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = libc::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_FILE {
        pub _flags: libc::c_int,
        pub _IO_read_ptr: *mut libc::c_char,
        pub _IO_read_end: *mut libc::c_char,
        pub _IO_read_base: *mut libc::c_char,
        pub _IO_write_base: *mut libc::c_char,
        pub _IO_write_ptr: *mut libc::c_char,
        pub _IO_write_end: *mut libc::c_char,
        pub _IO_buf_base: *mut libc::c_char,
        pub _IO_buf_end: *mut libc::c_char,
        pub _IO_save_base: *mut libc::c_char,
        pub _IO_backup_base: *mut libc::c_char,
        pub _IO_save_end: *mut libc::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: libc::c_int,
        pub _flags2: libc::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: libc::c_ushort,
        pub _vtable_offset: libc::c_schar,
        pub _shortbuf: [libc::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub _codecvt: *mut root::_IO_codecvt,
        pub _wide_data: *mut root::_IO_wide_data,
        pub _freeres_list: *mut root::_IO_FILE,
        pub _freeres_buf: *mut libc::c_void,
        pub __pad5: usize,
        pub _mode: libc::c_int,
        pub _unused2: [libc::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    impl Default for _IO_FILE {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type cookie_read_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut libc::c_void,
            __buf: *mut libc::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_write_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut libc::c_void,
            __buf: *const libc::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type cookie_seek_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut libc::c_void,
            __pos: *mut root::__off64_t,
            __w: libc::c_int,
        ) -> libc::c_int,
    >;
    pub type cookie_close_function_t =
        ::std::option::Option<unsafe extern "C" fn(__cookie: *mut libc::c_void) -> libc::c_int>;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::cookie_read_function_t,
        pub write: root::cookie_write_function_t,
        pub seek: root::cookie_seek_function_t,
        pub close: root::cookie_close_function_t,
    }
    #[test]
    fn bindgen_test_layout__IO_cookie_io_functions_t() {
        assert_eq!(
            ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
            32usize,
            concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(read)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(seek)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(close)
            )
        );
    }
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    pub type va_list = root::__gnuc_va_list;
    pub type fpos_t = root::__fpos_t;
    pub type fpos64_t = root::__fpos64_t;
    extern "C" {
        #[link_name = "\u{1}stdin"]
        pub static mut stdin: *mut root::FILE;
    }
    extern "C" {
        #[link_name = "\u{1}stdout"]
        pub static mut stdout: *mut root::FILE;
    }
    extern "C" {
        #[link_name = "\u{1}stderr"]
        pub static mut stderr: *mut root::FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn rename(__old: *const libc::c_char, __new: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn renameat(
            __oldfd: libc::c_int,
            __old: *const libc::c_char,
            __newfd: libc::c_int,
            __new: *const libc::c_char,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn renameat2(
            __oldfd: libc::c_int,
            __old: *const libc::c_char,
            __newfd: libc::c_int,
            __new: *const libc::c_char,
            __flags: libc::c_uint,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn tmpnam_r(__s: *mut libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn tempnam(__dir: *const libc::c_char, __pfx: *const libc::c_char)
            -> *mut libc::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn fflush_unlocked(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn fcloseall() -> libc::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const libc::c_char,
            __modes: *const libc::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const libc::c_char,
            __modes: *const libc::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopen64(
            __filename: *const libc::c_char,
            __modes: *const libc::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen64(
            __filename: *const libc::c_char,
            __modes: *const libc::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fdopen(__fd: libc::c_int, __modes: *const libc::c_char) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut libc::c_void,
            __modes: *const libc::c_char,
            __io_funcs: root::cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fmemopen(
            __s: *mut libc::c_void,
            __len: usize,
            __modes: *const libc::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn open_memstream(
            __bufloc: *mut *mut libc::c_char,
            __sizeloc: *mut usize,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut libc::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut libc::c_char,
            __modes: libc::c_int,
            __n: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn setbuffer(__stream: *mut root::FILE, __buf: *mut libc::c_char, __size: usize);
    }
    extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const libc::c_char, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn sprintf(__s: *mut libc::c_char, __format: *const libc::c_char, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut libc::c_char,
            __format: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut libc::c_char,
            __maxlen: usize,
            __format: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut libc::c_char,
            __maxlen: usize,
            __format: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut libc::c_char,
            __f: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __asprintf(
            __ptr: *mut *mut libc::c_char,
            __fmt: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn asprintf(
            __ptr: *mut *mut libc::c_char,
            __fmt: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vdprintf(
            __fd: libc::c_int,
            __fmt: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn dprintf(__fd: libc::c_int, __fmt: *const libc::c_char, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn fscanf(__stream: *mut root::FILE, __format: *const libc::c_char, ...)
            -> libc::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const libc::c_char, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn sscanf(__s: *const libc::c_char, __format: *const libc::c_char, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const libc::c_char,
            __format: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn getchar() -> libc::c_int;
    }
    extern "C" {
        pub fn getc_unlocked(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn getchar_unlocked() -> libc::c_int;
    }
    extern "C" {
        pub fn fgetc_unlocked(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn fputc(__c: libc::c_int, __stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn putc(__c: libc::c_int, __stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn putchar(__c: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn fputc_unlocked(__c: libc::c_int, __stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn putc_unlocked(__c: libc::c_int, __stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn putchar_unlocked(__c: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn putw(__w: libc::c_int, __stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut libc::c_char,
            __n: libc::c_int,
            __stream: *mut root::FILE,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn gets(__s: *mut libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn fgets_unlocked(
            __s: *mut libc::c_char,
            __n: libc::c_int,
            __stream: *mut root::FILE,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut libc::c_char,
            __n: *mut usize,
            __delimiter: libc::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut libc::c_char,
            __n: *mut usize,
            __delimiter: libc::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getline(
            __lineptr: *mut *mut libc::c_char,
            __n: *mut usize,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn fputs(__s: *const libc::c_char, __stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        pub fn ungetc(__c: libc::c_int, __stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut libc::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const libc::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fputs_unlocked(__s: *const libc::c_char, __stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut libc::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const libc::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: libc::c_long,
            __whence: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> libc::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    extern "C" {
        pub fn fgetpos(__stream: *mut root::FILE, __pos: *mut root::fpos_t) -> libc::c_int;
    }
    extern "C" {
        pub fn fsetpos(__stream: *mut root::FILE, __pos: *const root::fpos_t) -> libc::c_int;
    }
    extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    extern "C" {
        pub fn fgetpos64(__stream: *mut root::FILE, __pos: *mut root::fpos64_t) -> libc::c_int;
    }
    extern "C" {
        pub fn fsetpos64(__stream: *mut root::FILE, __pos: *const root::fpos64_t) -> libc::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof_unlocked(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn ferror_unlocked(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const libc::c_char);
    }
    extern "C" {
        #[link_name = "\u{1}sys_nerr"]
        pub static mut sys_nerr: libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}sys_errlist"]
        pub static mut sys_errlist: [*const libc::c_char; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_sys_nerr"]
        pub static mut _sys_nerr: libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_sys_errlist"]
        pub static mut _sys_errlist: [*const libc::c_char; 0usize];
    }
    extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn fileno_unlocked(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn popen(
            __command: *const libc::c_char,
            __modes: *const libc::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn ctermid(__s: *mut libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn cuserid(__s: *mut libc::c_char) -> *mut libc::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const libc::c_char,
            __args: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn __overflow(arg1: *mut root::FILE, arg2: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn __sprintf_chk(
            __s: *mut libc::c_char,
            __flag: libc::c_int,
            __slen: usize,
            __format: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __vsprintf_chk(
            __s: *mut libc::c_char,
            __flag: libc::c_int,
            __slen: usize,
            __format: *const libc::c_char,
            __ap: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __snprintf_chk(
            __s: *mut libc::c_char,
            __n: usize,
            __flag: libc::c_int,
            __slen: usize,
            __format: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __vsnprintf_chk(
            __s: *mut libc::c_char,
            __n: usize,
            __flag: libc::c_int,
            __slen: usize,
            __format: *const libc::c_char,
            __ap: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __fprintf_chk(
            __stream: *mut root::FILE,
            __flag: libc::c_int,
            __format: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __printf_chk(__flag: libc::c_int, __format: *const libc::c_char, ...)
            -> libc::c_int;
    }
    extern "C" {
        pub fn __vfprintf_chk(
            __stream: *mut root::FILE,
            __flag: libc::c_int,
            __format: *const libc::c_char,
            __ap: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __vprintf_chk(
            __flag: libc::c_int,
            __format: *const libc::c_char,
            __ap: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __dprintf_chk(
            __fd: libc::c_int,
            __flag: libc::c_int,
            __fmt: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __vdprintf_chk(
            __fd: libc::c_int,
            __flag: libc::c_int,
            __fmt: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __asprintf_chk(
            __ptr: *mut *mut libc::c_char,
            __flag: libc::c_int,
            __fmt: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __vasprintf_chk(
            __ptr: *mut *mut libc::c_char,
            __flag: libc::c_int,
            __fmt: *const libc::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __obstack_printf_chk(
            __obstack: *mut root::obstack,
            __flag: libc::c_int,
            __format: *const libc::c_char,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __obstack_vprintf_chk(
            __obstack: *mut root::obstack,
            __flag: libc::c_int,
            __format: *const libc::c_char,
            __args: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __gets_chk(__str: *mut libc::c_char, arg1: usize) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __fgets_chk(
            __s: *mut libc::c_char,
            __size: usize,
            __n: libc::c_int,
            __stream: *mut root::FILE,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __fread_chk(
            __ptr: *mut libc::c_void,
            __ptrlen: usize,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn __fgets_unlocked_chk(
            __s: *mut libc::c_char,
            __size: usize,
            __n: libc::c_int,
            __stream: *mut root::FILE,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn __fread_unlocked_chk(
            __ptr: *mut libc::c_void,
            __ptrlen: usize,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    pub mod __gnu_debug {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub type wint_t = libc::c_uint;
    pub type mbstate_t = root::__mbstate_t;
    extern "C" {
        pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> libc::c_int;
    }
    extern "C" {
        pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> libc::c_int;
    }
    extern "C" {
        pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> libc::c_int;
    }
    extern "C" {
        pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize) -> libc::c_int;
    }
    extern "C" {
        pub fn wcscasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __loc: root::locale_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn wcsncasecmp_l(
            __s1: *const u32,
            __s2: *const u32,
            __n: usize,
            __loc: root::locale_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> libc::c_int;
    }
    extern "C" {
        pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcscoll_l(__s1: *const u32, __s2: *const u32, __loc: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn wcsxfrm_l(
            __s1: *mut u32,
            __s2: *const u32,
            __n: usize,
            __loc: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsdup(__s: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcslen(__s: *const u32) -> usize;
    }
    extern "C" {
        pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
    }
    extern "C" {
        pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> libc::c_int;
    }
    extern "C" {
        pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn btowc(__c: libc::c_int) -> root::wint_t;
    }
    extern "C" {
        pub fn wctob(__c: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn mbsinit(__ps: *const root::mbstate_t) -> libc::c_int;
    }
    extern "C" {
        pub fn mbrtowc(
            __pwc: *mut u32,
            __s: *const libc::c_char,
            __n: usize,
            __p: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcrtomb(__s: *mut libc::c_char, __wc: u32, __ps: *mut root::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn __mbrlen(__s: *const libc::c_char, __n: usize, __ps: *mut root::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn mbrlen(__s: *const libc::c_char, __n: usize, __ps: *mut root::mbstate_t) -> usize;
    }
    extern "C" {
        pub fn mbsrtowcs(
            __dst: *mut u32,
            __src: *mut *const libc::c_char,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsrtombs(
            __dst: *mut libc::c_char,
            __src: *mut *const u32,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn mbsnrtowcs(
            __dst: *mut u32,
            __src: *mut *const libc::c_char,
            __nmc: usize,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsnrtombs(
            __dst: *mut libc::c_char,
            __src: *mut *const u32,
            __nwc: usize,
            __len: usize,
            __ps: *mut root::mbstate_t,
        ) -> usize;
    }
    extern "C" {
        pub fn wcwidth(__c: u32) -> libc::c_int;
    }
    extern "C" {
        pub fn wcswidth(__s: *const u32, __n: usize) -> libc::c_int;
    }
    extern "C" {
        pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
    }
    extern "C" {
        pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
    }
    extern "C" {
        pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> u128;
    }
    extern "C" {
        pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float32;
    }
    extern "C" {
        pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float64;
    }
    extern "C" {
        pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> root::_Float64x;
    }
    extern "C" {
        pub fn wcstol(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
        ) -> libc::c_long;
    }
    extern "C" {
        pub fn wcstoul(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
        ) -> libc::c_ulong;
    }
    extern "C" {
        pub fn wcstoll(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
        ) -> libc::c_longlong;
    }
    extern "C" {
        pub fn wcstoull(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
        ) -> libc::c_ulonglong;
    }
    extern "C" {
        pub fn wcstoq(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
        ) -> libc::c_longlong;
    }
    extern "C" {
        pub fn wcstouq(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
        ) -> libc::c_ulonglong;
    }
    extern "C" {
        pub fn wcstol_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
            __loc: root::locale_t,
        ) -> libc::c_long;
    }
    extern "C" {
        pub fn wcstoul_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
            __loc: root::locale_t,
        ) -> libc::c_ulong;
    }
    extern "C" {
        pub fn wcstoll_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
            __loc: root::locale_t,
        ) -> libc::c_longlong;
    }
    extern "C" {
        pub fn wcstoull_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: libc::c_int,
            __loc: root::locale_t,
        ) -> libc::c_ulonglong;
    }
    extern "C" {
        pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: root::locale_t) -> f64;
    }
    extern "C" {
        pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: root::locale_t) -> f32;
    }
    extern "C" {
        pub fn wcstold_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> u128;
    }
    extern "C" {
        pub fn wcstof32_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn wcstof64_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn wcstof32x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn wcstof64x_l(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
    }
    extern "C" {
        pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn open_wmemstream(__bufloc: *mut *mut u32, __sizeloc: *mut usize)
            -> *mut root::__FILE;
    }
    extern "C" {
        pub fn fwide(__fp: *mut root::__FILE, __mode: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn fwprintf(__stream: *mut root::__FILE, __format: *const u32, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn wprintf(__format: *const u32, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn swprintf(__s: *mut u32, __n: usize, __format: *const u32, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn vfwprintf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vwprintf(__format: *const u32, __arg: *mut root::__va_list_tag) -> libc::c_int;
    }
    extern "C" {
        pub fn vswprintf(
            __s: *mut u32,
            __n: usize,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn fwscanf(__stream: *mut root::__FILE, __format: *const u32, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn wscanf(__format: *const u32, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn vfwscanf(
            __s: *mut root::__FILE,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn vwscanf(__format: *const u32, __arg: *mut root::__va_list_tag) -> libc::c_int;
    }
    extern "C" {
        pub fn vswscanf(
            __s: *const u32,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn fgetwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar() -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwc(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar(__wc: u32) -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws(__ws: *mut u32, __n: libc::c_int, __stream: *mut root::__FILE) -> *mut u32;
    }
    extern "C" {
        pub fn fputws(__ws: *const u32, __stream: *mut root::__FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn ungetwc(__wc: root::wint_t, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn getwchar_unlocked() -> root::wint_t;
    }
    extern "C" {
        pub fn fgetwc_unlocked(__stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn fputwc_unlocked(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwc_unlocked(__wc: u32, __stream: *mut root::__FILE) -> root::wint_t;
    }
    extern "C" {
        pub fn putwchar_unlocked(__wc: u32) -> root::wint_t;
    }
    extern "C" {
        pub fn fgetws_unlocked(
            __ws: *mut u32,
            __n: libc::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn fputws_unlocked(__ws: *const u32, __stream: *mut root::__FILE) -> libc::c_int;
    }
    extern "C" {
        pub fn wcsftime(
            __s: *mut u32,
            __maxsize: usize,
            __format: *const u32,
            __tp: *const root::tm,
        ) -> usize;
    }
    extern "C" {
        pub fn wcsftime_l(
            __s: *mut u32,
            __maxsize: usize,
            __format: *const u32,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn __wmemcpy_chk(
            __s1: *mut u32,
            __s2: *const u32,
            __n: usize,
            __ns1: usize,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn __wmemmove_chk(
            __s1: *mut u32,
            __s2: *const u32,
            __n: usize,
            __ns1: usize,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn __wmempcpy_chk(
            __s1: *mut u32,
            __s2: *const u32,
            __n: usize,
            __ns1: usize,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn __wmemset_chk(__s: *mut u32, __c: u32, __n: usize, __ns: usize) -> *mut u32;
    }
    extern "C" {
        pub fn __wcscpy_chk(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
    }
    extern "C" {
        pub fn __wcpcpy_chk(__dest: *mut u32, __src: *const u32, __destlen: usize) -> *mut u32;
    }
    extern "C" {
        pub fn __wcsncpy_chk(
            __dest: *mut u32,
            __src: *const u32,
            __n: usize,
            __destlen: usize,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn __wcpncpy_chk(
            __dest: *mut u32,
            __src: *const u32,
            __n: usize,
            __destlen: usize,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn __wcscat_chk(__dest: *mut u32, __src: *const u32, __destlen: usize) -> *mut u32;
    }
    extern "C" {
        pub fn __wcsncat_chk(
            __dest: *mut u32,
            __src: *const u32,
            __n: usize,
            __destlen: usize,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn __swprintf_chk(
            __s: *mut u32,
            __n: usize,
            __flag: libc::c_int,
            __s_len: usize,
            __format: *const u32,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __vswprintf_chk(
            __s: *mut u32,
            __n: usize,
            __flag: libc::c_int,
            __s_len: usize,
            __format: *const u32,
            __arg: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __fwprintf_chk(
            __stream: *mut root::__FILE,
            __flag: libc::c_int,
            __format: *const u32,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __wprintf_chk(__flag: libc::c_int, __format: *const u32, ...) -> libc::c_int;
    }
    extern "C" {
        pub fn __vfwprintf_chk(
            __stream: *mut root::__FILE,
            __flag: libc::c_int,
            __format: *const u32,
            __ap: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __vwprintf_chk(
            __flag: libc::c_int,
            __format: *const u32,
            __ap: *mut root::__va_list_tag,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __fgetws_chk(
            __s: *mut u32,
            __size: usize,
            __n: libc::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn __fgetws_unlocked_chk(
            __s: *mut u32,
            __size: usize,
            __n: libc::c_int,
            __stream: *mut root::__FILE,
        ) -> *mut u32;
    }
    extern "C" {
        pub fn __wcrtomb_chk(
            __s: *mut libc::c_char,
            __wchar: u32,
            __p: *mut root::mbstate_t,
            __buflen: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn __mbsrtowcs_chk(
            __dst: *mut u32,
            __src: *mut *const libc::c_char,
            __len: usize,
            __ps: *mut root::mbstate_t,
            __dstlen: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn __wcsrtombs_chk(
            __dst: *mut libc::c_char,
            __src: *mut *const u32,
            __len: usize,
            __ps: *mut root::mbstate_t,
            __dstlen: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn __mbsnrtowcs_chk(
            __dst: *mut u32,
            __src: *mut *const libc::c_char,
            __nmc: usize,
            __len: usize,
            __ps: *mut root::mbstate_t,
            __dstlen: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn __wcsnrtombs_chk(
            __dst: *mut libc::c_char,
            __src: *mut *const u32,
            __nwc: usize,
            __len: usize,
            __ps: *mut root::mbstate_t,
            __dstlen: usize,
        ) -> usize;
    }
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = libc::c_schar;
    pub type int_fast16_t = libc::c_long;
    pub type int_fast32_t = libc::c_long;
    pub type int_fast64_t = libc::c_long;
    pub type uint_fast8_t = libc::c_uchar;
    pub type uint_fast16_t = libc::c_ulong;
    pub type uint_fast32_t = libc::c_ulong;
    pub type uint_fast64_t = libc::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct max_align_t {
        pub __max_align_ll: libc::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __max_align_ld: u128,
    }
    #[test]
    fn bindgen_test_layout_max_align_t() {
        assert_eq!(
            ::std::mem::size_of::<max_align_t>(),
            32usize,
            concat!("Size of: ", stringify!(max_align_t))
        );
        assert_eq!(
            ::std::mem::align_of::<max_align_t>(),
            16usize,
            concat!("Alignment of ", stringify!(max_align_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<max_align_t>())).__max_align_ll as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__max_align_ll)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<max_align_t>())).__max_align_ld as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__max_align_ld)
            )
        );
    }
    pub mod __cxxabiv1 {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __cxa_refcounted_exception {
            _unused: [u8; 0],
        }
        extern "C" {
            pub fn __cxa_allocate_exception(arg1: usize) -> *mut libc::c_void;
        }
        extern "C" {
            pub fn __cxa_free_exception(arg1: *mut libc::c_void);
        }
        extern "C" {
            pub fn __cxa_init_primary_exception(
                object: *mut libc::c_void,
                tinfo: *mut root::std::type_info,
                dest: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
            ) -> *mut root::__cxxabiv1::__cxa_refcounted_exception;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct __class_type_info {
            _unused: [u8; 0],
        }
        #[repr(C)]
        pub struct __forced_unwind__bindgen_vtable(libc::c_void);
        #[repr(C)]
        #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct __forced_unwind {
            pub vtable_: *const __forced_unwind__bindgen_vtable,
        }
        #[test]
        fn bindgen_test_layout___forced_unwind() {
            assert_eq!(
                ::std::mem::size_of::<__forced_unwind>(),
                8usize,
                concat!("Size of: ", stringify!(__forced_unwind))
            );
            assert_eq!(
                ::std::mem::align_of::<__forced_unwind>(),
                8usize,
                concat!("Alignment of ", stringify!(__forced_unwind))
            );
        }
        impl Default for __forced_unwind {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct lconv {
        pub decimal_point: *mut libc::c_char,
        pub thousands_sep: *mut libc::c_char,
        pub grouping: *mut libc::c_char,
        pub int_curr_symbol: *mut libc::c_char,
        pub currency_symbol: *mut libc::c_char,
        pub mon_decimal_point: *mut libc::c_char,
        pub mon_thousands_sep: *mut libc::c_char,
        pub mon_grouping: *mut libc::c_char,
        pub positive_sign: *mut libc::c_char,
        pub negative_sign: *mut libc::c_char,
        pub int_frac_digits: libc::c_char,
        pub frac_digits: libc::c_char,
        pub p_cs_precedes: libc::c_char,
        pub p_sep_by_space: libc::c_char,
        pub n_cs_precedes: libc::c_char,
        pub n_sep_by_space: libc::c_char,
        pub p_sign_posn: libc::c_char,
        pub n_sign_posn: libc::c_char,
        pub int_p_cs_precedes: libc::c_char,
        pub int_p_sep_by_space: libc::c_char,
        pub int_n_cs_precedes: libc::c_char,
        pub int_n_sep_by_space: libc::c_char,
        pub int_p_sign_posn: libc::c_char,
        pub int_n_sign_posn: libc::c_char,
    }
    #[test]
    fn bindgen_test_layout_lconv() {
        assert_eq!(
            ::std::mem::size_of::<lconv>(),
            96usize,
            concat!("Size of: ", stringify!(lconv))
        );
        assert_eq!(
            ::std::mem::align_of::<lconv>(),
            8usize,
            concat!("Alignment of ", stringify!(lconv))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(decimal_point)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(thousands_sep)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(grouping)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_curr_symbol)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(currency_symbol)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_decimal_point)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_thousands_sep)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(mon_grouping)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(positive_sign)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(negative_sign)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_frac_digits)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
            81usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(frac_digits)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
            82usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_cs_precedes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
            83usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_sep_by_space)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_cs_precedes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
            85usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_sep_by_space)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(p_sign_posn)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
            87usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(n_sign_posn)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_cs_precedes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
            89usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_sep_by_space)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
            90usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_cs_precedes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
            91usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_sep_by_space)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_p_sign_posn)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
            93usize,
            concat!(
                "Offset of field: ",
                stringify!(lconv),
                "::",
                stringify!(int_n_sign_posn)
            )
        );
    }
    impl Default for lconv {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn setlocale(
            __category: libc::c_int,
            __locale: *const libc::c_char,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn localeconv() -> *mut root::lconv;
    }
    extern "C" {
        pub fn newlocale(
            __category_mask: libc::c_int,
            __locale: *const libc::c_char,
            __base: root::locale_t,
        ) -> root::locale_t;
    }
    extern "C" {
        pub fn duplocale(__dataset: root::locale_t) -> root::locale_t;
    }
    extern "C" {
        pub fn freelocale(__dataset: root::locale_t);
    }
    extern "C" {
        pub fn uselocale(__dataset: root::locale_t) -> root::locale_t;
    }
    pub const _ISupper: root::_bindgen_ty_31 = _bindgen_ty_31::_ISupper;
    pub const _ISlower: root::_bindgen_ty_31 = _bindgen_ty_31::_ISlower;
    pub const _ISalpha: root::_bindgen_ty_31 = _bindgen_ty_31::_ISalpha;
    pub const _ISdigit: root::_bindgen_ty_31 = _bindgen_ty_31::_ISdigit;
    pub const _ISxdigit: root::_bindgen_ty_31 = _bindgen_ty_31::_ISxdigit;
    pub const _ISspace: root::_bindgen_ty_31 = _bindgen_ty_31::_ISspace;
    pub const _ISprint: root::_bindgen_ty_31 = _bindgen_ty_31::_ISprint;
    pub const _ISgraph: root::_bindgen_ty_31 = _bindgen_ty_31::_ISgraph;
    pub const _ISblank: root::_bindgen_ty_31 = _bindgen_ty_31::_ISblank;
    pub const _IScntrl: root::_bindgen_ty_31 = _bindgen_ty_31::_IScntrl;
    pub const _ISpunct: root::_bindgen_ty_31 = _bindgen_ty_31::_ISpunct;
    pub const _ISalnum: root::_bindgen_ty_31 = _bindgen_ty_31::_ISalnum;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_31 {
        _ISupper = 256,
        _ISlower = 512,
        _ISalpha = 1024,
        _ISdigit = 2048,
        _ISxdigit = 4096,
        _ISspace = 8192,
        _ISprint = 16384,
        _ISgraph = 32768,
        _ISblank = 1,
        _IScntrl = 2,
        _ISpunct = 4,
        _ISalnum = 8,
    }
    extern "C" {
        pub fn __ctype_b_loc() -> *mut *const libc::c_ushort;
    }
    extern "C" {
        pub fn __ctype_tolower_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn __ctype_toupper_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn isalnum(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isalpha(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn iscntrl(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isdigit(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn islower(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isgraph(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isprint(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn ispunct(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isspace(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isupper(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isxdigit(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn tolower(__c: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn toupper(__c: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isblank(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isctype(__c: libc::c_int, __mask: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isascii(__c: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn toascii(__c: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn _toupper(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn _tolower(arg1: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isalnum_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn isalpha_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iscntrl_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn isdigit_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn islower_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn isgraph_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn isprint_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn ispunct_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn isspace_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn isupper_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn isxdigit_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn isblank_l(arg1: libc::c_int, arg2: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn __tolower_l(__c: libc::c_int, __l: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn tolower_l(__c: libc::c_int, __l: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn __toupper_l(__c: libc::c_int, __l: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn toupper_l(__c: libc::c_int, __l: root::locale_t) -> libc::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sched_param {
        pub sched_priority: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_sched_param() {
        assert_eq!(
            ::std::mem::size_of::<sched_param>(),
            4usize,
            concat!("Size of: ", stringify!(sched_param))
        );
        assert_eq!(
            ::std::mem::align_of::<sched_param>(),
            4usize,
            concat!("Alignment of ", stringify!(sched_param))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_param),
                "::",
                stringify!(sched_priority)
            )
        );
    }
    extern "C" {
        pub fn clone(
            __fn: ::std::option::Option<
                unsafe extern "C" fn(__arg: *mut libc::c_void) -> libc::c_int,
            >,
            __child_stack: *mut libc::c_void,
            __flags: libc::c_int,
            __arg: *mut libc::c_void,
            ...
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn unshare(__flags: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn sched_getcpu() -> libc::c_int;
    }
    extern "C" {
        pub fn setns(__fd: libc::c_int, __nstype: libc::c_int) -> libc::c_int;
    }
    pub type __cpu_mask = libc::c_ulong;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct cpu_set_t {
        pub __bits: [root::__cpu_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_cpu_set_t() {
        assert_eq!(
            ::std::mem::size_of::<cpu_set_t>(),
            128usize,
            concat!("Size of: ", stringify!(cpu_set_t))
        );
        assert_eq!(
            ::std::mem::align_of::<cpu_set_t>(),
            8usize,
            concat!("Alignment of ", stringify!(cpu_set_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cpu_set_t),
                "::",
                stringify!(__bits)
            )
        );
    }
    extern "C" {
        pub fn __sched_cpucount(__setsize: usize, __setp: *const root::cpu_set_t) -> libc::c_int;
    }
    extern "C" {
        pub fn __sched_cpualloc(__count: usize) -> *mut root::cpu_set_t;
    }
    extern "C" {
        pub fn __sched_cpufree(__set: *mut root::cpu_set_t);
    }
    extern "C" {
        pub fn sched_(__pid: root::__pid_t, __param: *const root::sched_param) -> libc::c_int;
    }
    extern "C" {
        pub fn sched_getparam(__pid: root::__pid_t, __param: *mut root::sched_param)
            -> libc::c_int;
    }
    extern "C" {
        pub fn sched_setscheduler(
            __pid: root::__pid_t,
            __policy: libc::c_int,
            __param: *const root::sched_param,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn sched_getscheduler(__pid: root::__pid_t) -> libc::c_int;
    }
    extern "C" {
        pub fn sched_yield() -> libc::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_max(__algorithm: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_min(__algorithm: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn sched_rr_get_interval(__pid: root::__pid_t, __t: *mut root::timespec)
            -> libc::c_int;
    }
    extern "C" {
        pub fn sched_setaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn sched_getaffinity(
            __pid: root::__pid_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> libc::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct timex {
        pub modes: libc::c_uint,
        pub offset: root::__syscall_slong_t,
        pub freq: root::__syscall_slong_t,
        pub maxerror: root::__syscall_slong_t,
        pub esterror: root::__syscall_slong_t,
        pub status: libc::c_int,
        pub constant: root::__syscall_slong_t,
        pub precision: root::__syscall_slong_t,
        pub tolerance: root::__syscall_slong_t,
        pub time: root::timeval,
        pub tick: root::__syscall_slong_t,
        pub ppsfreq: root::__syscall_slong_t,
        pub jitter: root::__syscall_slong_t,
        pub shift: libc::c_int,
        pub stabil: root::__syscall_slong_t,
        pub jitcnt: root::__syscall_slong_t,
        pub calcnt: root::__syscall_slong_t,
        pub errcnt: root::__syscall_slong_t,
        pub stbcnt: root::__syscall_slong_t,
        pub tai: libc::c_int,
        // pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 44usize], u8>,
    }
    #[test]
    fn bindgen_test_layout_timex() {
        assert_eq!(
            ::std::mem::size_of::<timex>(),
            208usize,
            concat!("Size of: ", stringify!(timex))
        );
        assert_eq!(
            ::std::mem::align_of::<timex>(),
            8usize,
            concat!("Alignment of ", stringify!(timex))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).modes as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(modes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).offset as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).freq as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(freq)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(maxerror)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(esterror)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).status as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(status)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).constant as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(constant)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).precision as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(precision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tolerance)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).time as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tick as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(ppsfreq)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(jitter)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).shift as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(shift)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(stabil)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(jitcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(calcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(errcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(stbcnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timex>())).tai as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(timex),
                "::",
                stringify!(tai)
            )
        );
    }
    // impl timex {
    //     #[inline]
    //     pub fn new_bitfield_1() -> root::__BindgenBitfieldUnit<[u8; 44usize], u8> {
    //         let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 44usize], u8> =
    //             Default::default();
    //         __bindgen_bitfield_unit
    //     }
    // }
    extern "C" {
        pub fn clock_adjtime(__clock_id: root::__clockid_t, __utx: *mut root::timex)
            -> libc::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct tm {
        pub tm_sec: libc::c_int,
        pub tm_min: libc::c_int,
        pub tm_hour: libc::c_int,
        pub tm_mday: libc::c_int,
        pub tm_mon: libc::c_int,
        pub tm_year: libc::c_int,
        pub tm_wday: libc::c_int,
        pub tm_yday: libc::c_int,
        pub tm_isdst: libc::c_int,
        pub tm_gmtoff: libc::c_long,
        pub tm_zone: *const libc::c_char,
    }
    #[test]
    fn bindgen_test_layout_tm() {
        assert_eq!(
            ::std::mem::size_of::<tm>(),
            56usize,
            concat!("Size of: ", stringify!(tm))
        );
        assert_eq!(
            ::std::mem::align_of::<tm>(),
            8usize,
            concat!("Alignment of ", stringify!(tm))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_min)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_hour)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mon)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_year)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_wday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_yday)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_isdst)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_gmtoff)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_zone)
            )
        );
    }
    impl Default for tm {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct itimerspec {
        pub it_interval: root::timespec,
        pub it_value: root::timespec,
    }
    #[test]
    fn bindgen_test_layout_itimerspec() {
        assert_eq!(
            ::std::mem::size_of::<itimerspec>(),
            32usize,
            concat!("Size of: ", stringify!(itimerspec))
        );
        assert_eq!(
            ::std::mem::align_of::<itimerspec>(),
            8usize,
            concat!("Alignment of ", stringify!(itimerspec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerspec),
                "::",
                stringify!(it_interval)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerspec),
                "::",
                stringify!(it_value)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigevent {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn clock() -> root::clock_t;
    }
    extern "C" {
        pub fn time(__timer: *mut root::time_t) -> root::time_t;
    }
    extern "C" {
        pub fn difftime(__time1: root::time_t, __time0: root::time_t) -> f64;
    }
    extern "C" {
        pub fn mktime(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn strftime(
            __s: *mut libc::c_char,
            __maxsize: usize,
            __format: *const libc::c_char,
            __tp: *const root::tm,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime(
            __s: *const libc::c_char,
            __fmt: *const libc::c_char,
            __tp: *mut root::tm,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn strftime_l(
            __s: *mut libc::c_char,
            __maxsize: usize,
            __format: *const libc::c_char,
            __tp: *const root::tm,
            __loc: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime_l(
            __s: *const libc::c_char,
            __fmt: *const libc::c_char,
            __tp: *mut root::tm,
            __loc: root::locale_t,
        ) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn gmtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime(__timer: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn gmtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime_r(__timer: *const root::time_t, __tp: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn asctime(__tp: *const root::tm) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn ctime(__timer: *const root::time_t) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn asctime_r(__tp: *const root::tm, __buf: *mut libc::c_char) -> *mut libc::c_char;
    }
    extern "C" {
        pub fn ctime_r(__timer: *const root::time_t, __buf: *mut libc::c_char)
            -> *mut libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}__tzname"]
        pub static mut __tzname: [*mut libc::c_char; 2usize];
    }
    extern "C" {
        #[link_name = "\u{1}__daylight"]
        pub static mut __daylight: libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__timezone"]
        pub static mut __timezone: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}tzname"]
        pub static mut tzname: [*mut libc::c_char; 2usize];
    }
    extern "C" {
        pub fn tzset();
    }
    extern "C" {
        #[link_name = "\u{1}daylight"]
        pub static mut daylight: libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}timezone"]
        pub static mut timezone: libc::c_long;
    }
    extern "C" {
        pub fn stime(__when: *const root::time_t) -> libc::c_int;
    }
    extern "C" {
        pub fn timegm(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn timelocal(__tp: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn dysize(__year: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn nanosleep(
            __requested_time: *const root::timespec,
            __remaining: *mut root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn clock_getres(__clock_id: root::clockid_t, __res: *mut root::timespec)
            -> libc::c_int;
    }
    extern "C" {
        pub fn clock_gettime(__clock_id: root::clockid_t, __tp: *mut root::timespec)
            -> libc::c_int;
    }
    extern "C" {
        pub fn clock_settime(
            __clock_id: root::clockid_t,
            __tp: *const root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn clock_nanosleep(
            __clock_id: root::clockid_t,
            __flags: libc::c_int,
            __req: *const root::timespec,
            __rem: *mut root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn clock_getcpuclockid(
            __pid: root::pid_t,
            __clock_id: *mut root::clockid_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn timer_create(
            __clock_id: root::clockid_t,
            __evp: *mut root::sigevent,
            __timerid: *mut root::timer_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn timer_delete(__timerid: root::timer_t) -> libc::c_int;
    }
    extern "C" {
        pub fn timer_settime(
            __timerid: root::timer_t,
            __flags: libc::c_int,
            __value: *const root::itimerspec,
            __ovalue: *mut root::itimerspec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn timer_gettime(
            __timerid: root::timer_t,
            __value: *mut root::itimerspec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn timer_getoverrun(__timerid: root::timer_t) -> libc::c_int;
    }
    extern "C" {
        pub fn timespec_get(__ts: *mut root::timespec, __base: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}getdate_err"]
        pub static mut getdate_err: libc::c_int;
    }
    extern "C" {
        pub fn getdate(__string: *const libc::c_char) -> *mut root::tm;
    }
    extern "C" {
        pub fn getdate_r(__string: *const libc::c_char, __resbufp: *mut root::tm) -> libc::c_int;
    }
    pub type __jmp_buf = [libc::c_long; 8usize];
    pub const PTHREAD_CREATE_JOINABLE: root::_bindgen_ty_32 =
        _bindgen_ty_32::PTHREAD_CREATE_JOINABLE;
    pub const PTHREAD_CREATE_DETACHED: root::_bindgen_ty_32 =
        _bindgen_ty_32::PTHREAD_CREATE_DETACHED;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_32 {
        PTHREAD_CREATE_JOINABLE = 0,
        PTHREAD_CREATE_DETACHED = 1,
    }
    pub const PTHREAD_MUTEX_TIMED_NP: root::_bindgen_ty_33 = _bindgen_ty_33::PTHREAD_MUTEX_TIMED_NP;
    pub const PTHREAD_MUTEX_RECURSIVE_NP: root::_bindgen_ty_33 =
        _bindgen_ty_33::PTHREAD_MUTEX_RECURSIVE_NP;
    pub const PTHREAD_MUTEX_ERRORCHECK_NP: root::_bindgen_ty_33 =
        _bindgen_ty_33::PTHREAD_MUTEX_ERRORCHECK_NP;
    pub const PTHREAD_MUTEX_ADAPTIVE_NP: root::_bindgen_ty_33 =
        _bindgen_ty_33::PTHREAD_MUTEX_ADAPTIVE_NP;
    pub const PTHREAD_MUTEX_NORMAL: root::_bindgen_ty_33 = _bindgen_ty_33::PTHREAD_MUTEX_TIMED_NP;
    pub const PTHREAD_MUTEX_RECURSIVE: root::_bindgen_ty_33 =
        _bindgen_ty_33::PTHREAD_MUTEX_RECURSIVE_NP;
    pub const PTHREAD_MUTEX_ERRORCHECK: root::_bindgen_ty_33 =
        _bindgen_ty_33::PTHREAD_MUTEX_ERRORCHECK_NP;
    pub const PTHREAD_MUTEX_DEFAULT: root::_bindgen_ty_33 = _bindgen_ty_33::PTHREAD_MUTEX_TIMED_NP;
    pub const PTHREAD_MUTEX_FAST_NP: root::_bindgen_ty_33 = _bindgen_ty_33::PTHREAD_MUTEX_TIMED_NP;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_33 {
        PTHREAD_MUTEX_TIMED_NP = 0,
        PTHREAD_MUTEX_RECURSIVE_NP = 1,
        PTHREAD_MUTEX_ERRORCHECK_NP = 2,
        PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    }
    pub const PTHREAD_MUTEX_STALLED: root::_bindgen_ty_34 = _bindgen_ty_34::PTHREAD_MUTEX_STALLED;
    pub const PTHREAD_MUTEX_STALLED_NP: root::_bindgen_ty_34 =
        _bindgen_ty_34::PTHREAD_MUTEX_STALLED;
    pub const PTHREAD_MUTEX_ROBUST: root::_bindgen_ty_34 = _bindgen_ty_34::PTHREAD_MUTEX_ROBUST;
    pub const PTHREAD_MUTEX_ROBUST_NP: root::_bindgen_ty_34 = _bindgen_ty_34::PTHREAD_MUTEX_ROBUST;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_34 {
        PTHREAD_MUTEX_STALLED = 0,
        PTHREAD_MUTEX_ROBUST = 1,
    }
    pub const PTHREAD_PRIO_NONE: root::_bindgen_ty_35 = _bindgen_ty_35::PTHREAD_PRIO_NONE;
    pub const PTHREAD_PRIO_INHERIT: root::_bindgen_ty_35 = _bindgen_ty_35::PTHREAD_PRIO_INHERIT;
    pub const PTHREAD_PRIO_PROTECT: root::_bindgen_ty_35 = _bindgen_ty_35::PTHREAD_PRIO_PROTECT;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_35 {
        PTHREAD_PRIO_NONE = 0,
        PTHREAD_PRIO_INHERIT = 1,
        PTHREAD_PRIO_PROTECT = 2,
    }
    pub const PTHREAD_RWLOCK_PREFER_READER_NP: root::_bindgen_ty_36 =
        _bindgen_ty_36::PTHREAD_RWLOCK_PREFER_READER_NP;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: root::_bindgen_ty_36 =
        _bindgen_ty_36::PTHREAD_RWLOCK_PREFER_WRITER_NP;
    pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: root::_bindgen_ty_36 =
        _bindgen_ty_36::PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
    pub const PTHREAD_RWLOCK_DEFAULT_NP: root::_bindgen_ty_36 =
        _bindgen_ty_36::PTHREAD_RWLOCK_PREFER_READER_NP;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_36 {
        PTHREAD_RWLOCK_PREFER_READER_NP = 0,
        PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
        PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    }
    pub const PTHREAD_INHERIT_SCHED: root::_bindgen_ty_37 = _bindgen_ty_37::PTHREAD_INHERIT_SCHED;
    pub const PTHREAD_EXPLICIT_SCHED: root::_bindgen_ty_37 = _bindgen_ty_37::PTHREAD_EXPLICIT_SCHED;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_37 {
        PTHREAD_INHERIT_SCHED = 0,
        PTHREAD_EXPLICIT_SCHED = 1,
    }
    pub const PTHREAD_SCOPE_SYSTEM: root::_bindgen_ty_38 = _bindgen_ty_38::PTHREAD_SCOPE_SYSTEM;
    pub const PTHREAD_SCOPE_PROCESS: root::_bindgen_ty_38 = _bindgen_ty_38::PTHREAD_SCOPE_PROCESS;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_38 {
        PTHREAD_SCOPE_SYSTEM = 0,
        PTHREAD_SCOPE_PROCESS = 1,
    }
    pub const PTHREAD_PROCESS_PRIVATE: root::_bindgen_ty_39 =
        _bindgen_ty_39::PTHREAD_PROCESS_PRIVATE;
    pub const PTHREAD_PROCESS_SHARED: root::_bindgen_ty_39 = _bindgen_ty_39::PTHREAD_PROCESS_SHARED;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_39 {
        PTHREAD_PROCESS_PRIVATE = 0,
        PTHREAD_PROCESS_SHARED = 1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _pthread_cleanup_buffer {
        pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        pub __arg: *mut libc::c_void,
        pub __canceltype: libc::c_int,
        pub __prev: *mut root::_pthread_cleanup_buffer,
    }
    #[test]
    fn bindgen_test_layout__pthread_cleanup_buffer() {
        assert_eq!(
            ::std::mem::size_of::<_pthread_cleanup_buffer>(),
            32usize,
            concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            ::std::mem::align_of::<_pthread_cleanup_buffer>(),
            8usize,
            concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__canceltype)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_pthread_cleanup_buffer),
                "::",
                stringify!(__prev)
            )
        );
    }
    impl Default for _pthread_cleanup_buffer {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const PTHREAD_CANCEL_ENABLE: root::_bindgen_ty_40 = _bindgen_ty_40::PTHREAD_CANCEL_ENABLE;
    pub const PTHREAD_CANCEL_DISABLE: root::_bindgen_ty_40 = _bindgen_ty_40::PTHREAD_CANCEL_DISABLE;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_40 {
        PTHREAD_CANCEL_ENABLE = 0,
        PTHREAD_CANCEL_DISABLE = 1,
    }
    pub const PTHREAD_CANCEL_DEFERRED: root::_bindgen_ty_41 =
        _bindgen_ty_41::PTHREAD_CANCEL_DEFERRED;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: root::_bindgen_ty_41 =
        _bindgen_ty_41::PTHREAD_CANCEL_ASYNCHRONOUS;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_41 {
        PTHREAD_CANCEL_DEFERRED = 0,
        PTHREAD_CANCEL_ASYNCHRONOUS = 1,
    }
    extern "C" {
        pub fn pthread_create(
            __newthread: *mut root::pthread_t,
            __attr: *const root::pthread_attr_t,
            __start_routine: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut libc::c_void) -> *mut libc::c_void,
            >,
            __arg: *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_exit(__retval: *mut libc::c_void);
    }
    extern "C" {
        pub fn pthread_join(
            __th: root::pthread_t,
            __thread_return: *mut *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_tryjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_timedjoin_np(
            __th: root::pthread_t,
            __thread_return: *mut *mut libc::c_void,
            __abstime: *const root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_detach(__th: root::pthread_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_self() -> root::pthread_t;
    }
    extern "C" {
        pub fn pthread_equal(__thread1: root::pthread_t, __thread2: root::pthread_t)
            -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_init(__attr: *mut root::pthread_attr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_destroy(__attr: *mut root::pthread_attr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getdetachstate(
            __attr: *const root::pthread_attr_t,
            __detachstate: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setdetachstate(
            __attr: *mut root::pthread_attr_t,
            __detachstate: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getguardsize(
            __attr: *const root::pthread_attr_t,
            __guardsize: *mut usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setguardsize(
            __attr: *mut root::pthread_attr_t,
            __guardsize: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedparam(
            __attr: *const root::pthread_attr_t,
            __param: *mut root::sched_param,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedparam(
            __attr: *mut root::pthread_attr_t,
            __param: *const root::sched_param,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedpolicy(
            __attr: *const root::pthread_attr_t,
            __policy: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedpolicy(
            __attr: *mut root::pthread_attr_t,
            __policy: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getinheritsched(
            __attr: *const root::pthread_attr_t,
            __inherit: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setinheritsched(
            __attr: *mut root::pthread_attr_t,
            __inherit: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getscope(
            __attr: *const root::pthread_attr_t,
            __scope: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setscope(
            __attr: *mut root::pthread_attr_t,
            __scope: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstackaddr(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstackaddr(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstacksize(
            __attr: *const root::pthread_attr_t,
            __stacksize: *mut usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstacksize(
            __attr: *mut root::pthread_attr_t,
            __stacksize: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstack(
            __attr: *const root::pthread_attr_t,
            __stackaddr: *mut *mut libc::c_void,
            __stacksize: *mut usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstack(
            __attr: *mut root::pthread_attr_t,
            __stackaddr: *mut libc::c_void,
            __stacksize: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setaffinity_np(
            __attr: *mut root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getaffinity_np(
            __attr: *const root::pthread_attr_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_default_np(__attr: *mut root::pthread_attr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_setattr_default_np(__attr: *const root::pthread_attr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_getattr_np(
            __th: root::pthread_t,
            __attr: *mut root::pthread_attr_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_setschedparam(
            __target_thread: root::pthread_t,
            __policy: libc::c_int,
            __param: *const root::sched_param,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_getschedparam(
            __target_thread: root::pthread_t,
            __policy: *mut libc::c_int,
            __param: *mut root::sched_param,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_setschedprio(
            __target_thread: root::pthread_t,
            __prio: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_getname_np(
            __target_thread: root::pthread_t,
            __buf: *mut libc::c_char,
            __buflen: usize,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_setname_np(
            __target_thread: root::pthread_t,
            __name: *const libc::c_char,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_getconcurrency() -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_setconcurrency(__level: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_yield() -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_setaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *const root::cpu_set_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_getaffinity_np(
            __th: root::pthread_t,
            __cpusetsize: usize,
            __cpuset: *mut root::cpu_set_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_once(
            __once_control: *mut root::pthread_once_t,
            __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_setcancelstate(
            __state: libc::c_int,
            __oldstate: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_setcanceltype(
            __type: libc::c_int,
            __oldtype: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_cancel(__th: root::pthread_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_testcancel();
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_unwind_buf_t {
        pub __cancel_jmp_buf: [root::__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
        pub __pad: [*mut libc::c_void; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
        pub __cancel_jmp_buf: root::__jmp_buf,
        pub __mask_was_saved: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
            72usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
                "::",
                stringify!(__cancel_jmp_buf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                    as *const _ as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
                "::",
                stringify!(__mask_was_saved)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_unwind_buf_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_unwind_buf_t>(),
            104usize,
            concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_unwind_buf_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t),
                "::",
                stringify!(__cancel_jmp_buf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_unwind_buf_t),
                "::",
                stringify!(__pad)
            )
        );
    }
    impl Default for __pthread_unwind_buf_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cleanup_frame {
        pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        pub __cancel_arg: *mut libc::c_void,
        pub __do_it: libc::c_int,
        pub __cancel_type: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_frame() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cleanup_frame>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cleanup_frame>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__do_it)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _
                    as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_frame),
                "::",
                stringify!(__cancel_type)
            )
        );
    }
    impl Default for __pthread_cleanup_frame {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __pthread_cleanup_class {
        pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        pub __cancel_arg: *mut libc::c_void,
        pub __do_it: libc::c_int,
        pub __cancel_type: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout___pthread_cleanup_class() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cleanup_class>(),
            24usize,
            concat!("Size of: ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cleanup_class>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cleanup_class))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_routine as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_routine)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_arg as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__do_it as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__do_it)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_type as *const _
                    as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cleanup_class),
                "::",
                stringify!(__cancel_type)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN23__pthread_cleanup_class9__setdoitEi"]
        pub fn __pthread_cleanup_class___setdoit(
            this: *mut root::__pthread_cleanup_class,
            __newval: libc::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN23__pthread_cleanup_class7__deferEv"]
        pub fn __pthread_cleanup_class___defer(this: *mut root::__pthread_cleanup_class);
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK23__pthread_cleanup_class9__restoreEv"]
        pub fn __pthread_cleanup_class___restore(this: *const root::__pthread_cleanup_class);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN23__pthread_cleanup_classC1EPFvPvES0_"]
        pub fn __pthread_cleanup_class___pthread_cleanup_class(
            this: *mut root::__pthread_cleanup_class,
            __fct: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
            __arg: *mut libc::c_void,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN23__pthread_cleanup_classD1Ev"]
        pub fn __pthread_cleanup_class___pthread_cleanup_class_destructor(
            this: *mut root::__pthread_cleanup_class,
        );
    }
    impl Default for __pthread_cleanup_class {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl __pthread_cleanup_class {
        #[inline]
        pub unsafe fn __setdoit(&mut self, __newval: libc::c_int) {
            __pthread_cleanup_class___setdoit(self, __newval)
        }
        #[inline]
        pub unsafe fn __defer(&mut self) {
            __pthread_cleanup_class___defer(self)
        }
        #[inline]
        pub unsafe fn __restore(&self) {
            __pthread_cleanup_class___restore(self)
        }
        #[inline]
        pub unsafe fn new(
            __fct: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
            __arg: *mut libc::c_void,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            __pthread_cleanup_class___pthread_cleanup_class(&mut __bindgen_tmp, __fct, __arg);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            __pthread_cleanup_class___pthread_cleanup_class_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __jmp_buf_tag {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn __sigsetjmp(__env: *mut root::__jmp_buf_tag, __savemask: libc::c_int)
            -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_init(
            __mutex: *mut root::pthread_mutex_t,
            __mutexattr: *const root::pthread_mutexattr_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_destroy(__mutex: *mut root::pthread_mutex_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_trylock(__mutex: *mut root::pthread_mutex_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_lock(__mutex: *mut root::pthread_mutex_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_timedlock(
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_unlock(__mutex: *mut root::pthread_mutex_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_getprioceiling(
            __mutex: *const root::pthread_mutex_t,
            __prioceiling: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_setprioceiling(
            __mutex: *mut root::pthread_mutex_t,
            __prioceiling: libc::c_int,
            __old_ceiling: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent(__mutex: *mut root::pthread_mutex_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_consistent_np(__mutex: *mut root::pthread_mutex_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_init(__attr: *mut root::pthread_mutexattr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_destroy(__attr: *mut root::pthread_mutexattr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getpshared(
            __attr: *const root::pthread_mutexattr_t,
            __pshared: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setpshared(
            __attr: *mut root::pthread_mutexattr_t,
            __pshared: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_gettype(
            __attr: *const root::pthread_mutexattr_t,
            __kind: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_settype(
            __attr: *mut root::pthread_mutexattr_t,
            __kind: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            __attr: *const root::pthread_mutexattr_t,
            __protocol: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            __attr: *mut root::pthread_mutexattr_t,
            __protocol: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            __attr: *const root::pthread_mutexattr_t,
            __prioceiling: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            __attr: *mut root::pthread_mutexattr_t,
            __prioceiling: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getrobust_np(
            __attr: *const root::pthread_mutexattr_t,
            __robustness: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setrobust_np(
            __attr: *mut root::pthread_mutexattr_t,
            __robustness: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_init(
            __rwlock: *mut root::pthread_rwlock_t,
            __attr: *const root::pthread_rwlockattr_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_destroy(__rwlock: *mut root::pthread_rwlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_rdlock(__rwlock: *mut root::pthread_rwlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_tryrdlock(__rwlock: *mut root::pthread_rwlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedrdlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_wrlock(__rwlock: *mut root::pthread_rwlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_trywrlock(__rwlock: *mut root::pthread_rwlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_timedwrlock(
            __rwlock: *mut root::pthread_rwlock_t,
            __abstime: *const root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_unlock(__rwlock: *mut root::pthread_rwlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_init(__attr: *mut root::pthread_rwlockattr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_destroy(__attr: *mut root::pthread_rwlockattr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            __attr: *const root::pthread_rwlockattr_t,
            __pshared: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            __attr: *mut root::pthread_rwlockattr_t,
            __pshared: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getkind_np(
            __attr: *const root::pthread_rwlockattr_t,
            __pref: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setkind_np(
            __attr: *mut root::pthread_rwlockattr_t,
            __pref: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_cond_init(
            __cond: *mut root::pthread_cond_t,
            __cond_attr: *const root::pthread_condattr_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_cond_destroy(__cond: *mut root::pthread_cond_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_cond_signal(__cond: *mut root::pthread_cond_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_cond_broadcast(__cond: *mut root::pthread_cond_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_cond_wait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_cond_timedwait(
            __cond: *mut root::pthread_cond_t,
            __mutex: *mut root::pthread_mutex_t,
            __abstime: *const root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_init(__attr: *mut root::pthread_condattr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_destroy(__attr: *mut root::pthread_condattr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getpshared(
            __attr: *const root::pthread_condattr_t,
            __pshared: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setpshared(
            __attr: *mut root::pthread_condattr_t,
            __pshared: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getclock(
            __attr: *const root::pthread_condattr_t,
            __clock_id: *mut root::__clockid_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setclock(
            __attr: *mut root::pthread_condattr_t,
            __clock_id: root::__clockid_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_spin_init(
            __lock: *mut root::pthread_spinlock_t,
            __pshared: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_spin_destroy(__lock: *mut root::pthread_spinlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_spin_lock(__lock: *mut root::pthread_spinlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_spin_trylock(__lock: *mut root::pthread_spinlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_spin_unlock(__lock: *mut root::pthread_spinlock_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_init(
            __barrier: *mut root::pthread_barrier_t,
            __attr: *const root::pthread_barrierattr_t,
            __count: libc::c_uint,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_destroy(__barrier: *mut root::pthread_barrier_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_barrier_wait(__barrier: *mut root::pthread_barrier_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_init(__attr: *mut root::pthread_barrierattr_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_destroy(__attr: *mut root::pthread_barrierattr_t)
            -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_getpshared(
            __attr: *const root::pthread_barrierattr_t,
            __pshared: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_barrierattr_setpshared(
            __attr: *mut root::pthread_barrierattr_t,
            __pshared: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_key_create(
            __key: *mut root::pthread_key_t,
            __destr_function: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_key_delete(__key: root::pthread_key_t) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_getspecific(__key: root::pthread_key_t) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn pthread_setspecific(
            __key: root::pthread_key_t,
            __pointer: *const libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_getcpuclockid(
            __thread_id: root::pthread_t,
            __clock_id: *mut root::__clockid_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pthread_atfork(
            __prepare: ::std::option::Option<unsafe extern "C" fn()>,
            __parent: ::std::option::Option<unsafe extern "C" fn()>,
            __child: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> libc::c_int;
    }
    pub type __gthread_t = root::pthread_t;
    pub type __gthread_key_t = root::pthread_key_t;
    pub type __gthread_once_t = root::pthread_once_t;
    pub type __gthread_mutex_t = root::pthread_mutex_t;
    pub type __gthread_recursive_mutex_t = root::pthread_mutex_t;
    pub type __gthread_cond_t = root::pthread_cond_t;
    pub type __gthread_time_t = root::timespec;
    pub type _Atomic_word = libc::c_int;
    extern "C" {
        pub fn __errno_location() -> *mut libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}program_invocation_name"]
        pub static mut program_invocation_name: *mut libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}program_invocation_short_name"]
        pub static mut program_invocation_short_name: *mut libc::c_char;
    }
    pub type error_t = libc::c_int;
    extern "C" {
        #[link_name = "\u{1}g_program"]
        pub static mut g_program: root::a_Program;
    }
    extern "C" {
        pub fn yyparse() -> libc::c_int;
    }
    extern "C" {
        pub fn yyrestart(arg1: *mut root::FILE);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct yy_buffer_state {
        _unused: [u8; 0],
    }
    pub type YY_BUFFER_STATE = *mut root::yy_buffer_state;
    extern "C" {
        pub fn yy_scan_string(arg1: *const libc::c_char) -> root::YY_BUFFER_STATE;
    }
    extern "C" {
        pub fn yy_delete_buffer(arg1: root::YY_BUFFER_STATE);
    }
    extern "C" {
        #[link_name = "\u{1}_Z11open_cat_ckPc"]
        pub fn open_cat_ck(filename: root::c_str) -> *mut root::FILE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11chuck_parsePKcP8_IO_FILES0_"]
        pub fn chuck_parse(
            fname: root::c_constr,
            fd: *mut root::FILE,
            code: root::c_constr,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11reset_parsev"]
        pub fn reset_parse();
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum SyntaxType {
        COMMA = 0,
        SEMICOLON = 1,
        DBLCOLON = 2,
        PAREN = 3,
        DOT = 4,
        CHUCK_OP = 5,
        OPERATOR = 6,
        KEYWORD = 7,
        DEBUG_PRINT = 8,
        SPORK = 9,
        INTEGER = 10,
        FLOATING = 11,
        STRING = 12,
        COMMENT = 13,
        OTHER = 14,
        NUM_SYNTAX_TYPES = 15,
    }
    #[repr(C)]
    pub struct SyntaxToken {
        pub token: root::std::__cxx11::string,
        pub type_: libc::c_ulong,
        pub begin: size_type,
        pub end: size_type,
    }
    #[test]
    fn bindgen_test_layout_SyntaxToken() {
        assert_eq!(
            ::std::mem::size_of::<SyntaxToken>(),
            56usize,
            concat!("Size of: ", stringify!(SyntaxToken))
        );
        assert_eq!(
            ::std::mem::align_of::<SyntaxToken>(),
            8usize,
            concat!("Alignment of ", stringify!(SyntaxToken))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxToken>())).token as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxToken),
                "::",
                stringify!(token)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxToken>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxToken),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxToken>())).begin as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxToken),
                "::",
                stringify!(begin)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxToken>())).end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxToken),
                "::",
                stringify!(end)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11SyntaxTokenC1Ev"]
        pub fn SyntaxToken_SyntaxToken(this: *mut root::SyntaxToken);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11SyntaxTokenC1ERKS_"]
        pub fn SyntaxToken_SyntaxToken1(
            this: *mut root::SyntaxToken,
            rhs: *const root::SyntaxToken,
        );
    }
    impl Default for SyntaxToken {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for SyntaxToken {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "SyntaxToken {{ token: {:?}, type: {:?}, begin: {:?}, end: {:?} }}",
                self.token, self.type_, self.begin, self.end
            )
        }
    }
    impl SyntaxToken {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SyntaxToken_SyntaxToken(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(rhs: *const root::SyntaxToken) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SyntaxToken_SyntaxToken1(&mut __bindgen_tmp, rhs);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct SyntaxTokenList {
        pub list: root::std::vector,
        pub howmany: root::SyntaxTokenList_size_type,
    }
    #[test]
    fn bindgen_test_layout_SyntaxTokenList() {
        assert_eq!(
            ::std::mem::size_of::<SyntaxTokenList>(),
            32usize,
            concat!("Size of: ", stringify!(SyntaxTokenList))
        );
        assert_eq!(
            ::std::mem::align_of::<SyntaxTokenList>(),
            8usize,
            concat!("Alignment of ", stringify!(SyntaxTokenList))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxTokenList>())).list as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxTokenList),
                "::",
                stringify!(list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SyntaxTokenList>())).howmany as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(SyntaxTokenList),
                "::",
                stringify!(howmany)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15SyntaxTokenListC1ERKS_"]
        pub fn SyntaxTokenList_SyntaxTokenList(
            this: *mut root::SyntaxTokenList,
            rhs: *const root::SyntaxTokenList,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15SyntaxTokenListC1Ev"]
        pub fn SyntaxTokenList_SyntaxTokenList1(this: *mut root::SyntaxTokenList);
    }
    impl Default for SyntaxTokenList {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for SyntaxTokenList {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "SyntaxTokenList {{ list: {:?}, howmany: {:?} }}",
                self.list, self.howmany
            )
        }
    }
    impl SyntaxTokenList {
        #[inline]
        pub unsafe fn new(rhs: *const root::SyntaxTokenList) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SyntaxTokenList_SyntaxTokenList(&mut __bindgen_tmp, rhs);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            SyntaxTokenList_SyntaxTokenList1(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct SyntaxQuery {
        pub _address: u8,
    }
    #[test]
    fn bindgen_test_layout_SyntaxQuery() {
        assert_eq!(
            ::std::mem::size_of::<SyntaxQuery>(),
            1usize,
            concat!("Size of: ", stringify!(SyntaxQuery))
        );
        assert_eq!(
            ::std::mem::align_of::<SyntaxQuery>(),
            1usize,
            concat!("Alignment of ", stringify!(SyntaxQuery))
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11SyntaxQuery9parseLineERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER15SyntaxTokenList"]
        pub fn SyntaxQuery_parseLine(
            this: *mut root::SyntaxQuery,
            line: *const root::std::__cxx11::string,
            tokens: *mut root::SyntaxTokenList,
        ) -> libc::c_ulong;
    }
    impl SyntaxQuery {
        #[inline]
        pub unsafe fn parseLine(
            &mut self,
            line: *const root::std::__cxx11::string,
            tokens: *mut root::SyntaxTokenList,
        ) -> libc::c_ulong {
            SyntaxQuery_parseLine(self, line, tokens)
        }
    }
    pub type THREAD_HANDLE = root::pthread_t;
    pub type THREAD_RETURN = *mut libc::c_void;
    pub type THREAD_FUNCTION =
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void) -> *mut libc::c_void>;
    pub type MUTEX = root::pthread_mutex_t;
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XThread {
        pub thread: root::THREAD_HANDLE,
    }
    #[test]
    fn bindgen_test_layout_XThread() {
        assert_eq!(
            ::std::mem::size_of::<XThread>(),
            8usize,
            concat!("Size of: ", stringify!(XThread))
        );
        assert_eq!(
            ::std::mem::align_of::<XThread>(),
            8usize,
            concat!("Alignment of ", stringify!(XThread))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XThread>())).thread as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XThread),
                "::",
                stringify!(thread)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThread5startEPFPvS0_ES0_"]
        pub fn XThread_start(
            this: *mut root::XThread,
            routine: root::THREAD_FUNCTION,
            ptr: *mut libc::c_void,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThread4waitElb"]
        pub fn XThread_wait(
            this: *mut root::XThread,
            milliseconds: libc::c_long,
            cancel: bool,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThread4testEv"]
        pub fn XThread_test();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThread5clearEv"]
        pub fn XThread_clear(this: *mut root::XThread);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThreadC1Ev"]
        pub fn XThread_XThread(this: *mut root::XThread);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7XThreadD1Ev"]
        pub fn XThread_XThread_destructor(this: *mut root::XThread);
    }
    impl XThread {
        #[inline]
        pub unsafe fn start(
            &mut self,
            routine: root::THREAD_FUNCTION,
            ptr: *mut libc::c_void,
        ) -> bool {
            XThread_start(self, routine, ptr)
        }
        #[inline]
        pub unsafe fn wait(&mut self, milliseconds: libc::c_long, cancel: bool) -> bool {
            XThread_wait(self, milliseconds, cancel)
        }
        #[inline]
        pub unsafe fn test() {
            XThread_test()
        }
        #[inline]
        pub unsafe fn clear(&mut self) {
            XThread_clear(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XThread_XThread(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            XThread_XThread_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XThreadUtil {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11XThreadUtil12our_priorityE"]
        pub static mut XThreadUtil_our_priority: libc::c_long;
    }
    #[test]
    fn bindgen_test_layout_XThreadUtil() {
        assert_eq!(
            ::std::mem::size_of::<XThreadUtil>(),
            1usize,
            concat!("Size of: ", stringify!(XThreadUtil))
        );
        assert_eq!(
            ::std::mem::align_of::<XThreadUtil>(),
            1usize,
            concat!("Alignment of ", stringify!(XThreadUtil))
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11XThreadUtil12set_priorityEml"]
        pub fn XThreadUtil_set_priority(
            tid: root::pthread_t,
            priority: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11XThreadUtil12set_priorityEl"]
        pub fn XThreadUtil_set_priority1(priority: libc::c_long) -> libc::c_ulong;
    }
    impl XThreadUtil {
        #[inline]
        pub unsafe fn set_priority(tid: root::pthread_t, priority: libc::c_long) -> libc::c_ulong {
            XThreadUtil_set_priority(tid, priority)
        }
        #[inline]
        pub unsafe fn set_priority1(priority: libc::c_long) -> libc::c_ulong {
            XThreadUtil_set_priority1(priority)
        }
    }
    #[repr(C)]
    pub struct XMutex {
        pub mutex: root::MUTEX,
    }
    #[test]
    fn bindgen_test_layout_XMutex() {
        assert_eq!(
            ::std::mem::size_of::<XMutex>(),
            40usize,
            concat!("Size of: ", stringify!(XMutex))
        );
        assert_eq!(
            ::std::mem::align_of::<XMutex>(),
            8usize,
            concat!("Alignment of ", stringify!(XMutex))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XMutex>())).mutex as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XMutex),
                "::",
                stringify!(mutex)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6XMutex7acquireEv"]
        pub fn XMutex_acquire(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6XMutex7releaseEv"]
        pub fn XMutex_release(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6XMutexC1Ev"]
        pub fn XMutex_XMutex(this: *mut root::XMutex);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6XMutexD1Ev"]
        pub fn XMutex_XMutex_destructor(this: *mut root::XMutex);
    }
    impl Default for XMutex {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for XMutex {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "XMutex {{ mutex: {:?} }}", self.mutex)
        }
    }
    impl XMutex {
        #[inline]
        pub unsafe fn acquire(&mut self) {
            XMutex_acquire(self)
        }
        #[inline]
        pub unsafe fn release(&mut self) {
            XMutex_release(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XMutex_XMutex(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            XMutex_XMutex_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread {
        pub m_thread_exit: libc::c_ulong,
        pub m_thread: root::XThread,
        pub m_data_buffer: *mut root::FastCircularBuffer,
        pub m_bytes_in_buffer: usize,
        pub m_thread_buffer: *mut libc::c_uchar,
        pub m_stream: *mut root::FILE,
        pub m_msg_buffer: *mut root::CircularBuffer<root::XWriteThread_Message>,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct XWriteThread_Message {
        pub operation: root::XWriteThread_Message__bindgen_ty_1,
        pub file: *mut root::FILE,
        pub __bindgen_anon_1: root::XWriteThread_Message__bindgen_ty_2,
    }
    pub const XWriteThread_Message_WRITE: root::XWriteThread_Message__bindgen_ty_1 =
        XWriteThread_Message__bindgen_ty_1::WRITE;
    pub const XWriteThread_Message_SEEK: root::XWriteThread_Message__bindgen_ty_1 =
        XWriteThread_Message__bindgen_ty_1::SEEK;
    pub const XWriteThread_Message_FLUSH: root::XWriteThread_Message__bindgen_ty_1 =
        XWriteThread_Message__bindgen_ty_1::FLUSH;
    pub const XWriteThread_Message_CLOSE: root::XWriteThread_Message__bindgen_ty_1 =
        XWriteThread_Message__bindgen_ty_1::CLOSE;
    pub const XWriteThread_Message_SHUTDOWN: root::XWriteThread_Message__bindgen_ty_1 =
        XWriteThread_Message__bindgen_ty_1::SHUTDOWN;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum XWriteThread_Message__bindgen_ty_1 {
        WRITE = 0,
        SEEK = 1,
        FLUSH = 2,
        CLOSE = 3,
        SHUTDOWN = 4,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union XWriteThread_Message__bindgen_ty_2 {
        pub write: root::XWriteThread_Message__bindgen_ty_2__bindgen_ty_1,
        pub seek: root::XWriteThread_Message__bindgen_ty_2__bindgen_ty_2,
        _bindgen_union_align: [u64; 2usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread_Message__bindgen_ty_2__bindgen_ty_1 {
        pub data_size: usize,
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_1>()))
                    .data_size as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(data_size)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XWriteThread_Message__bindgen_ty_2__bindgen_ty_2 {
        pub offset: libc::c_long,
        pub whence: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>(),
            16usize,
            concat!(
                "Size of: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>())).offset
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2__bindgen_ty_2>())).whence
                    as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2__bindgen_ty_2),
                "::",
                stringify!(whence)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread_Message__bindgen_ty_2>(),
            16usize,
            concat!("Size of: ", stringify!(XWriteThread_Message__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread_Message__bindgen_ty_2>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(XWriteThread_Message__bindgen_ty_2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2>())).write as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message__bindgen_ty_2>())).seek as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message__bindgen_ty_2),
                "::",
                stringify!(seek)
            )
        );
    }
    impl Default for XWriteThread_Message__bindgen_ty_2 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for XWriteThread_Message__bindgen_ty_2 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "XWriteThread_Message__bindgen_ty_2 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_XWriteThread_Message() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread_Message>(),
            32usize,
            concat!("Size of: ", stringify!(XWriteThread_Message))
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread_Message>(),
            8usize,
            concat!("Alignment of ", stringify!(XWriteThread_Message))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread_Message>())).operation as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message),
                "::",
                stringify!(operation)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread_Message>())).file as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread_Message),
                "::",
                stringify!(file)
            )
        );
    }
    impl Default for XWriteThread_Message {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for XWriteThread_Message {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "XWriteThread_Message {{ operation: {:?}, file: {:?}, __bindgen_anon_1: {:?} }}",
                self.operation, self.file, self.__bindgen_anon_1
            )
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread20PRODUCER_BUFFER_SIZEE"]
        pub static XWriteThread_PRODUCER_BUFFER_SIZE: usize;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread20o_defaultWriteThreadE"]
        pub static mut XWriteThread_o_defaultWriteThread: *mut root::XWriteThread;
    }
    #[test]
    fn bindgen_test_layout_XWriteThread() {
        assert_eq!(
            ::std::mem::size_of::<XWriteThread>(),
            56usize,
            concat!("Size of: ", stringify!(XWriteThread))
        );
        assert_eq!(
            ::std::mem::align_of::<XWriteThread>(),
            8usize,
            concat!("Alignment of ", stringify!(XWriteThread))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_thread_exit as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread_exit)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_thread as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_data_buffer as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_data_buffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread>())).m_bytes_in_buffer as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_bytes_in_buffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<XWriteThread>())).m_thread_buffer as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_thread_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_stream as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_stream)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<XWriteThread>())).m_msg_buffer as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(XWriteThread),
                "::",
                stringify!(m_msg_buffer)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread6sharedEv"]
        pub fn XWriteThread_shared() -> *mut root::XWriteThread;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread6fwriteEPKvmmP8_IO_FILE"]
        pub fn XWriteThread_fwrite(
            this: *mut root::XWriteThread,
            ptr: *const libc::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread5fseekEP8_IO_FILEli"]
        pub fn XWriteThread_fseek(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
            offset: libc::c_long,
            whence: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread6fflushEP8_IO_FILE"]
        pub fn XWriteThread_fflush(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
        ) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread6fcloseEP8_IO_FILE"]
        pub fn XWriteThread_fclose(
            this: *mut root::XWriteThread,
            stream: *mut root::FILE,
        ) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThread8shutdownEv"]
        pub fn XWriteThread_shutdown(this: *mut root::XWriteThread);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12XWriteThreadC1Emm"]
        pub fn XWriteThread_XWriteThread(
            this: *mut root::XWriteThread,
            data_buffer_size: usize,
            msg_buffer_size: usize,
        );
    }
    impl Default for XWriteThread {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl XWriteThread {
        #[inline]
        pub unsafe fn shared() -> *mut root::XWriteThread {
            XWriteThread_shared()
        }
        #[inline]
        pub unsafe fn fwrite(
            &mut self,
            ptr: *const libc::c_void,
            size: usize,
            nitems: usize,
            stream: *mut root::FILE,
        ) -> usize {
            XWriteThread_fwrite(self, ptr, size, nitems, stream)
        }
        #[inline]
        pub unsafe fn fseek(
            &mut self,
            stream: *mut root::FILE,
            offset: libc::c_long,
            whence: libc::c_int,
        ) -> libc::c_int {
            XWriteThread_fseek(self, stream, offset, whence)
        }
        #[inline]
        pub unsafe fn fflush(&mut self, stream: *mut root::FILE) -> libc::c_int {
            XWriteThread_fflush(self, stream)
        }
        #[inline]
        pub unsafe fn fclose(&mut self, stream: *mut root::FILE) -> libc::c_int {
            XWriteThread_fclose(self, stream)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) {
            XWriteThread_shutdown(self)
        }
        #[inline]
        pub unsafe fn new(data_buffer_size: usize, msg_buffer_size: usize) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            XWriteThread_XWriteThread(&mut __bindgen_tmp, data_buffer_size, msg_buffer_size);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ck_socket_ {
        _unused: [u8; 0],
    }
    pub type ck_socket = *mut root::ck_socket_;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct WvOut {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct Chuck_Carrier {
        pub chuck: *mut root::ChucK,
        pub compiler: *mut root::Chuck_Compiler,
        pub env: *mut root::Chuck_Env,
        pub vm: *mut root::Chuck_VM,
        pub chout: *mut root::Chuck_IO_Chout,
        pub cherr: *mut root::Chuck_IO_Cherr,
        pub otf_socket: root::ck_socket,
        pub otf_port: libc::c_long,
        pub otf_thread: root::pthread_t,
        pub stk_writeThread: *mut root::XWriteThread,
        pub stk_wvOutMap: root::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Carrier() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Carrier>(),
            128usize,
            concat!("Size of: ", stringify!(Chuck_Carrier))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Carrier>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Carrier))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).chuck as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(chuck)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).compiler as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(compiler)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).env as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(env)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).vm as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).chout as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(chout)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).cherr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(cherr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).otf_socket as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(otf_socket)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).otf_port as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(otf_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).otf_thread as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(otf_thread)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Carrier>())).stk_writeThread as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(stk_writeThread)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Carrier>())).stk_wvOutMap as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Carrier),
                "::",
                stringify!(stk_wvOutMap)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Carrier19hintIsRealtimeAudioEv"]
        pub fn Chuck_Carrier_hintIsRealtimeAudio(this: *mut root::Chuck_Carrier) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_CarrierC1Ev"]
        pub fn Chuck_Carrier_Chuck_Carrier(this: *mut root::Chuck_Carrier);
    }
    impl Default for Chuck_Carrier {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Carrier {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Carrier {{ chuck: {:?}, compiler: {:?}, env: {:?}, vm: {:?}, chout: {:?}, cherr: {:?}, otf_socket: {:?}, otf_port: {:?}, otf_thread: {:?}, stk_writeThread: {:?}, stk_wvOutMap: {:?} }}" , self . chuck , self . compiler , self . env , self . vm , self . chout , self . cherr , self . otf_socket , self . otf_port , self . otf_thread , self . stk_writeThread , self . stk_wvOutMap )
        }
    }
    impl ::std::cmp::PartialEq for Chuck_Carrier {
        fn eq(&self, other: &Chuck_Carrier) -> bool {
            self.chuck == other.chuck
                && self.compiler == other.compiler
                && self.env == other.env
                && self.vm == other.vm
                && self.chout == other.chout
                && self.cherr == other.cherr
                && self.otf_socket == other.otf_socket
                && self.otf_port == other.otf_port
                && self.otf_thread == other.otf_thread
                && self.stk_writeThread == other.stk_writeThread
                && self.stk_wvOutMap == other.stk_wvOutMap
        }
    }
    impl Chuck_Carrier {
        #[inline]
        pub unsafe fn hintIsRealtimeAudio(&mut self) -> libc::c_ulong {
            Chuck_Carrier_hintIsRealtimeAudio(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Carrier_Chuck_Carrier(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    pub type wctype_t = libc::c_ulong;
    pub const __ISwupper: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwupper;
    pub const __ISwlower: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwlower;
    pub const __ISwalpha: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwalpha;
    pub const __ISwdigit: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwdigit;
    pub const __ISwxdigit: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwxdigit;
    pub const __ISwspace: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwspace;
    pub const __ISwprint: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwprint;
    pub const __ISwgraph: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwgraph;
    pub const __ISwblank: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwblank;
    pub const __ISwcntrl: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwcntrl;
    pub const __ISwpunct: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwpunct;
    pub const __ISwalnum: root::_bindgen_ty_45 = _bindgen_ty_45::__ISwalnum;
    pub const _ISwupper: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwupper;
    pub const _ISwlower: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwlower;
    pub const _ISwalpha: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwalpha;
    pub const _ISwdigit: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwdigit;
    pub const _ISwxdigit: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwxdigit;
    pub const _ISwspace: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwspace;
    pub const _ISwprint: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwprint;
    pub const _ISwgraph: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwgraph;
    pub const _ISwblank: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwblank;
    pub const _ISwcntrl: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwcntrl;
    pub const _ISwpunct: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwpunct;
    pub const _ISwalnum: root::_bindgen_ty_45 = _bindgen_ty_45::_ISwalnum;
    #[repr(i32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_45 {
        __ISwupper = 0,
        __ISwlower = 1,
        __ISwalpha = 2,
        __ISwdigit = 3,
        __ISwxdigit = 4,
        __ISwspace = 5,
        __ISwprint = 6,
        __ISwgraph = 7,
        __ISwblank = 8,
        __ISwcntrl = 9,
        __ISwpunct = 10,
        __ISwalnum = 11,
        _ISwupper = 16777216,
        _ISwlower = 33554432,
        _ISwalpha = 67108864,
        _ISwdigit = 134217728,
        _ISwxdigit = 268435456,
        _ISwspace = 536870912,
        _ISwprint = 1073741824,
        _ISwgraph = -2147483648,
        _ISwblank = 65536,
        _ISwcntrl = 131072,
        _ISwpunct = 262144,
        _ISwalnum = 524288,
    }
    extern "C" {
        pub fn iswalnum(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswalpha(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswcntrl(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswdigit(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswgraph(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswlower(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswprint(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswpunct(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswspace(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswupper(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswxdigit(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswblank(__wc: root::wint_t) -> libc::c_int;
    }
    extern "C" {
        pub fn wctype(__property: *const libc::c_char) -> root::wctype_t;
    }
    extern "C" {
        pub fn iswctype(__wc: root::wint_t, __desc: root::wctype_t) -> libc::c_int;
    }
    extern "C" {
        pub fn towlower(__wc: root::wint_t) -> root::wint_t;
    }
    extern "C" {
        pub fn towupper(__wc: root::wint_t) -> root::wint_t;
    }
    pub type wctrans_t = *const root::__int32_t;
    extern "C" {
        pub fn wctrans(__property: *const libc::c_char) -> root::wctrans_t;
    }
    extern "C" {
        pub fn towctrans(__wc: root::wint_t, __desc: root::wctrans_t) -> root::wint_t;
    }
    extern "C" {
        pub fn iswalnum_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswalpha_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswcntrl_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswdigit_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswgraph_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswlower_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswprint_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswpunct_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswspace_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswupper_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswxdigit_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn iswblank_l(__wc: root::wint_t, __locale: root::locale_t) -> libc::c_int;
    }
    extern "C" {
        pub fn wctype_l(
            __property: *const libc::c_char,
            __locale: root::locale_t,
        ) -> root::wctype_t;
    }
    extern "C" {
        pub fn iswctype_l(
            __wc: root::wint_t,
            __desc: root::wctype_t,
            __locale: root::locale_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn towlower_l(__wc: root::wint_t, __locale: root::locale_t) -> root::wint_t;
    }
    extern "C" {
        pub fn towupper_l(__wc: root::wint_t, __locale: root::locale_t) -> root::wint_t;
    }
    extern "C" {
        pub fn wctrans_l(
            __property: *const libc::c_char,
            __locale: root::locale_t,
        ) -> root::wctrans_t;
    }
    extern "C" {
        pub fn towctrans_l(
            __wc: root::wint_t,
            __desc: root::wctrans_t,
            __locale: root::locale_t,
        ) -> root::wint_t;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct dirent {
        pub d_ino: root::__ino_t,
        pub d_off: root::__off_t,
        pub d_reclen: libc::c_ushort,
        pub d_type: libc::c_uchar,
        pub d_name: [libc::c_char; 256usize],
    }
    #[test]
    fn bindgen_test_layout_dirent() {
        assert_eq!(
            ::std::mem::size_of::<dirent>(),
            280usize,
            concat!("Size of: ", stringify!(dirent))
        );
        assert_eq!(
            ::std::mem::align_of::<dirent>(),
            8usize,
            concat!("Alignment of ", stringify!(dirent))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_ino)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_off as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_off)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_reclen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent),
                "::",
                stringify!(d_name)
            )
        );
    }
    impl Default for dirent {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for dirent {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "dirent {{ d_ino: {:?}, d_off: {:?}, d_reclen: {:?}, d_type: {:?}, d_name: [{}] }}",
                self.d_ino,
                self.d_off,
                self.d_reclen,
                self.d_type,
                self.d_name
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>()
            )
        }
    }
    impl ::std::cmp::PartialEq for dirent {
        fn eq(&self, other: &dirent) -> bool {
            self.d_ino == other.d_ino
                && self.d_off == other.d_off
                && self.d_reclen == other.d_reclen
                && self.d_type == other.d_type
                && &self.d_name[..] == &other.d_name[..]
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct dirent64 {
        pub d_ino: root::__ino64_t,
        pub d_off: root::__off64_t,
        pub d_reclen: libc::c_ushort,
        pub d_type: libc::c_uchar,
        pub d_name: [libc::c_char; 256usize],
    }
    #[test]
    fn bindgen_test_layout_dirent64() {
        assert_eq!(
            ::std::mem::size_of::<dirent64>(),
            280usize,
            concat!("Size of: ", stringify!(dirent64))
        );
        assert_eq!(
            ::std::mem::align_of::<dirent64>(),
            8usize,
            concat!("Alignment of ", stringify!(dirent64))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_ino as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_ino)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_off as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_off)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_reclen as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_reclen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_type as *const _ as usize },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<dirent64>())).d_name as *const _ as usize },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(dirent64),
                "::",
                stringify!(d_name)
            )
        );
    }
    impl Default for dirent64 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for dirent64 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "dirent64 {{ d_ino: {:?}, d_off: {:?}, d_reclen: {:?}, d_type: {:?}, d_name: [{}] }}" , self . d_ino , self . d_off , self . d_reclen , self . d_type , self . d_name . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
        }
    }
    impl ::std::cmp::PartialEq for dirent64 {
        fn eq(&self, other: &dirent64) -> bool {
            self.d_ino == other.d_ino
                && self.d_off == other.d_off
                && self.d_reclen == other.d_reclen
                && self.d_type == other.d_type
                && &self.d_name[..] == &other.d_name[..]
        }
    }
    pub const DT_UNKNOWN: root::_bindgen_ty_46 = _bindgen_ty_46::DT_UNKNOWN;
    pub const DT_FIFO: root::_bindgen_ty_46 = _bindgen_ty_46::DT_FIFO;
    pub const DT_CHR: root::_bindgen_ty_46 = _bindgen_ty_46::DT_CHR;
    pub const DT_DIR: root::_bindgen_ty_46 = _bindgen_ty_46::DT_DIR;
    pub const DT_BLK: root::_bindgen_ty_46 = _bindgen_ty_46::DT_BLK;
    pub const DT_REG: root::_bindgen_ty_46 = _bindgen_ty_46::DT_REG;
    pub const DT_LNK: root::_bindgen_ty_46 = _bindgen_ty_46::DT_LNK;
    pub const DT_SOCK: root::_bindgen_ty_46 = _bindgen_ty_46::DT_SOCK;
    pub const DT_WHT: root::_bindgen_ty_46 = _bindgen_ty_46::DT_WHT;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_46 {
        DT_UNKNOWN = 0,
        DT_FIFO = 1,
        DT_CHR = 2,
        DT_DIR = 4,
        DT_BLK = 6,
        DT_REG = 8,
        DT_LNK = 10,
        DT_SOCK = 12,
        DT_WHT = 14,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __dirstream {
        _unused: [u8; 0],
    }
    pub type DIR = root::__dirstream;
    extern "C" {
        pub fn opendir(__name: *const libc::c_char) -> *mut root::DIR;
    }
    extern "C" {
        pub fn fdopendir(__fd: libc::c_int) -> *mut root::DIR;
    }
    extern "C" {
        pub fn closedir(__dirp: *mut root::DIR) -> libc::c_int;
    }
    extern "C" {
        pub fn readdir(__dirp: *mut root::DIR) -> *mut root::dirent;
    }
    extern "C" {
        pub fn readdir64(__dirp: *mut root::DIR) -> *mut root::dirent64;
    }
    extern "C" {
        pub fn readdir_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent,
            __result: *mut *mut root::dirent,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn readdir64_r(
            __dirp: *mut root::DIR,
            __entry: *mut root::dirent64,
            __result: *mut *mut root::dirent64,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn rewinddir(__dirp: *mut root::DIR);
    }
    extern "C" {
        pub fn seekdir(__dirp: *mut root::DIR, __pos: libc::c_long);
    }
    extern "C" {
        pub fn telldir(__dirp: *mut root::DIR) -> libc::c_long;
    }
    extern "C" {
        pub fn dirfd(__dirp: *mut root::DIR) -> libc::c_int;
    }
    extern "C" {
        pub fn scandir(
            __dir: *const libc::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> libc::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> libc::c_int,
            >,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn scandir64(
            __dir: *const libc::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> libc::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> libc::c_int,
            >,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn scandirat(
            __dfd: libc::c_int,
            __dir: *const libc::c_char,
            __namelist: *mut *mut *mut root::dirent,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent) -> libc::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent,
                    arg2: *mut *const root::dirent,
                ) -> libc::c_int,
            >,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn scandirat64(
            __dfd: libc::c_int,
            __dir: *const libc::c_char,
            __namelist: *mut *mut *mut root::dirent64,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const root::dirent64) -> libc::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const root::dirent64,
                    arg2: *mut *const root::dirent64,
                ) -> libc::c_int,
            >,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn alphasort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn alphasort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getdirentries(
            __fd: libc::c_int,
            __buf: *mut libc::c_char,
            __nbytes: usize,
            __basep: *mut root::__off_t,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getdirentries64(
            __fd: libc::c_int,
            __buf: *mut libc::c_char,
            __nbytes: usize,
            __basep: *mut root::__off64_t,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn versionsort(
            __e1: *mut *const root::dirent,
            __e2: *mut *const root::dirent,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn versionsort64(
            __e1: *mut *const root::dirent64,
            __e2: *mut *const root::dirent64,
        ) -> libc::c_int;
    }
    #[repr(C)]
    pub struct Chuck_VM_Object__bindgen_vtable(libc::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_VM_Object {
        pub vtable_: *const Chuck_VM_Object__bindgen_vtable,
        pub m_ref_count: libc::c_ulong,
        pub m_pooled: libc::c_ulong,
        pub m_locked: libc::c_ulong,
        pub m_v_ref: *mut root::std::vector,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object19our_locks_in_effectE"]
        pub static mut Chuck_VM_Object_our_locks_in_effect: libc::c_ulong;
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Object() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VM_Object>(),
            40usize,
            concat!("Size of: ", stringify!(Chuck_VM_Object))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VM_Object>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Object))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Object>())).m_ref_count as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Object),
                "::",
                stringify!(m_ref_count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Object>())).m_pooled as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Object),
                "::",
                stringify!(m_pooled)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Object>())).m_locked as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Object),
                "::",
                stringify!(m_locked)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Object>())).m_v_ref as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Object),
                "::",
                stringify!(m_v_ref)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object8lock_allEv"]
        pub fn Chuck_VM_Object_lock_all();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object10unlock_allEv"]
        pub fn Chuck_VM_Object_unlock_all();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_ObjectC1Ev"]
        pub fn Chuck_VM_Object_Chuck_VM_Object(this: *mut root::Chuck_VM_Object);
    }
    impl Default for Chuck_VM_Object {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Chuck_VM_Object {
        #[inline]
        pub unsafe fn lock_all() {
            Chuck_VM_Object_lock_all()
        }
        #[inline]
        pub unsafe fn unlock_all() {
            Chuck_VM_Object_unlock_all()
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_VM_Object_Chuck_VM_Object(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_ObjectD1Ev"]
        pub fn Chuck_VM_Object_Chuck_VM_Object_destructor(this: *mut root::Chuck_VM_Object);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object7add_refEv"]
        pub fn Chuck_VM_Object_add_ref(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object7releaseEv"]
        pub fn Chuck_VM_Object_release(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Object4lockEv"]
        pub fn Chuck_VM_Object_lock(this: *mut libc::c_void);
    }
    #[repr(C)]
    pub struct Chuck_VTable {
        pub funcs: root::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VTable() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VTable>(),
            24usize,
            concat!("Size of: ", stringify!(Chuck_VTable))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VTable>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VTable))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VTable>())).funcs as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VTable),
                "::",
                stringify!(funcs)
            )
        );
    }
    impl Default for Chuck_VTable {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VTable {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_VTable {{ funcs: {:?} }}", self.funcs)
        }
    }
    impl ::std::cmp::PartialEq for Chuck_VTable {
        fn eq(&self, other: &Chuck_VTable) -> bool {
            self.funcs == other.funcs
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Object {
        pub _base: root::Chuck_VM_Object,
        pub vtable: *mut root::Chuck_VTable,
        pub type_ref: *mut root::Chuck_Type,
        pub size: libc::c_ulong,
        pub data: *mut libc::c_uchar,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Object() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Object>(),
            72usize,
            concat!("Size of: ", stringify!(Chuck_Object))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Object>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Object))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Object>())).vtable as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Object),
                "::",
                stringify!(vtable)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Object>())).type_ref as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Object),
                "::",
                stringify!(type_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Object>())).size as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Object),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Object>())).data as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Object),
                "::",
                stringify!(data)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_ObjectC1Ev"]
        pub fn Chuck_Object_Chuck_Object(this: *mut root::Chuck_Object);
    }
    impl Default for Chuck_Object {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Chuck_Object {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Object_Chuck_Object(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_ObjectD1Ev"]
        pub fn Chuck_Object_Chuck_Object_destructor(this: *mut root::Chuck_Object);
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Array {
        pub _base: root::Chuck_Object,
        pub m_array_type: *mut root::Chuck_Type,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Array>(),
            80usize,
            concat!("Size of: ", stringify!(Chuck_Array))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Array>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array>())).m_array_type as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array),
                "::",
                stringify!(m_array_type)
            )
        );
    }
    impl Default for Chuck_Array {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Array4 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
        pub m_is_obj: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array4() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Array4>(),
            160usize,
            concat!("Size of: ", stringify!(Chuck_Array4))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Array4>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array4>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array4),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array4>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array4),
                "::",
                stringify!(m_map)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array4>())).m_is_obj as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array4),
                "::",
                stringify!(m_is_obj)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44addrEl"]
        pub fn Chuck_Array4_addr(this: *mut root::Chuck_Array4, i: libc::c_long) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array4_addr1(
            this: *mut root::Chuck_Array4,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array43getElPm"]
        pub fn Chuck_Array4_get(
            this: *mut root::Chuck_Array4,
            i: libc::c_long,
            val: *mut libc::c_ulong,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array43getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPm"]
        pub fn Chuck_Array4_get1(
            this: *mut root::Chuck_Array4,
            key: *const root::std::__cxx11::string,
            val: *mut libc::c_ulong,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array43setElm"]
        pub fn Chuck_Array4_set(
            this: *mut root::Chuck_Array4,
            i: libc::c_long,
            val: libc::c_ulong,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array43setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm"]
        pub fn Chuck_Array4_set1(
            this: *mut root::Chuck_Array4,
            key: *const root::std::__cxx11::string,
            val: libc::c_ulong,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array49push_backEm"]
        pub fn Chuck_Array4_push_back(
            this: *mut root::Chuck_Array4,
            val: libc::c_ulong,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array48pop_backEv"]
        pub fn Chuck_Array4_pop_back(this: *mut root::Chuck_Array4) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK12Chuck_Array44backEPm"]
        pub fn Chuck_Array4_back(
            this: *const root::Chuck_Array4,
            val: *mut libc::c_ulong,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44zeroEmm"]
        pub fn Chuck_Array4_zero(
            this: *mut root::Chuck_Array4,
            start: libc::c_ulong,
            end: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array4C1Eml"]
        pub fn Chuck_Array4_Chuck_Array4(
            this: *mut root::Chuck_Array4,
            is_obj: libc::c_ulong,
            capacity: libc::c_long,
        );
    }
    impl Default for Chuck_Array4 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array4 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array4 {{ m_vector: {:?}, m_map: {:?}, m_is_obj: {:?} }}",
                self.m_vector, self.m_map, self.m_is_obj
            )
        }
    }
    impl Chuck_Array4 {
        #[inline]
        pub unsafe fn addr(&mut self, i: libc::c_long) -> libc::c_ulong {
            Chuck_Array4_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const root::std::__cxx11::string) -> libc::c_ulong {
            Chuck_Array4_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: libc::c_long, val: *mut libc::c_ulong) -> libc::c_long {
            Chuck_Array4_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut libc::c_ulong,
        ) -> libc::c_long {
            Chuck_Array4_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: libc::c_long, val: libc::c_ulong) -> libc::c_long {
            Chuck_Array4_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: libc::c_ulong,
        ) -> libc::c_long {
            Chuck_Array4_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: libc::c_ulong) -> libc::c_long {
            Chuck_Array4_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> libc::c_long {
            Chuck_Array4_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut libc::c_ulong) -> libc::c_long {
            Chuck_Array4_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: libc::c_ulong, end: libc::c_ulong) {
            Chuck_Array4_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(is_obj: libc::c_ulong, capacity: libc::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array4_Chuck_Array4(&mut __bindgen_tmp, is_obj, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array4D1Ev"]
        pub fn Chuck_Array4_Chuck_Array4_destructor(this: *mut root::Chuck_Array4);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array45clearEv"]
        pub fn Chuck_Array4_clear(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44sizeEv"]
        pub fn Chuck_Array4_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array48capacityEv"]
        pub fn Chuck_Array4_capacity(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array48set_sizeEl"]
        pub fn Chuck_Array4_set_size(this: *mut libc::c_void, size: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array412set_capacityEl"]
        pub fn Chuck_Array4_set_capacity(
            this: *mut libc::c_void,
            capacity: libc::c_long,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array44findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array4_find(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array45eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array4_erase(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array414data_type_sizeEv"]
        pub fn Chuck_Array4_data_type_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array414data_type_kindEv"]
        pub fn Chuck_Array4_data_type_kind(this: *mut libc::c_void) -> libc::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array8 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array8() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Array8>(),
            152usize,
            concat!("Size of: ", stringify!(Chuck_Array8))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Array8>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array8))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array8>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array8),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array8>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array8),
                "::",
                stringify!(m_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84addrEl"]
        pub fn Chuck_Array8_addr(this: *mut root::Chuck_Array8, i: libc::c_long) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array8_addr1(
            this: *mut root::Chuck_Array8,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array83getElPd"]
        pub fn Chuck_Array8_get(
            this: *mut root::Chuck_Array8,
            i: libc::c_long,
            val: *mut f64,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array83getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPd"]
        pub fn Chuck_Array8_get1(
            this: *mut root::Chuck_Array8,
            key: *const root::std::__cxx11::string,
            val: *mut f64,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array83setEld"]
        pub fn Chuck_Array8_set(
            this: *mut root::Chuck_Array8,
            i: libc::c_long,
            val: f64,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array83setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd"]
        pub fn Chuck_Array8_set1(
            this: *mut root::Chuck_Array8,
            key: *const root::std::__cxx11::string,
            val: f64,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array89push_backEd"]
        pub fn Chuck_Array8_push_back(this: *mut root::Chuck_Array8, val: f64) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array88pop_backEv"]
        pub fn Chuck_Array8_pop_back(this: *mut root::Chuck_Array8) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK12Chuck_Array84backEPd"]
        pub fn Chuck_Array8_back(this: *const root::Chuck_Array8, val: *mut f64) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84zeroEmm"]
        pub fn Chuck_Array8_zero(
            this: *mut root::Chuck_Array8,
            start: libc::c_ulong,
            end: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array8C1El"]
        pub fn Chuck_Array8_Chuck_Array8(this: *mut root::Chuck_Array8, capacity: libc::c_long);
    }
    impl Default for Chuck_Array8 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array8 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array8 {{ m_vector: {:?}, m_map: {:?} }}",
                self.m_vector, self.m_map
            )
        }
    }
    impl Chuck_Array8 {
        #[inline]
        pub unsafe fn addr(&mut self, i: libc::c_long) -> libc::c_ulong {
            Chuck_Array8_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const root::std::__cxx11::string) -> libc::c_ulong {
            Chuck_Array8_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: libc::c_long, val: *mut f64) -> libc::c_long {
            Chuck_Array8_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut f64,
        ) -> libc::c_long {
            Chuck_Array8_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: libc::c_long, val: f64) -> libc::c_long {
            Chuck_Array8_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: f64,
        ) -> libc::c_long {
            Chuck_Array8_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: f64) -> libc::c_long {
            Chuck_Array8_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> libc::c_long {
            Chuck_Array8_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut f64) -> libc::c_long {
            Chuck_Array8_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: libc::c_ulong, end: libc::c_ulong) {
            Chuck_Array8_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: libc::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array8_Chuck_Array8(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array8D1Ev"]
        pub fn Chuck_Array8_Chuck_Array8_destructor(this: *mut root::Chuck_Array8);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array85clearEv"]
        pub fn Chuck_Array8_clear(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84sizeEv"]
        pub fn Chuck_Array8_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array88capacityEv"]
        pub fn Chuck_Array8_capacity(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array88set_sizeEl"]
        pub fn Chuck_Array8_set_size(this: *mut libc::c_void, size: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array812set_capacityEl"]
        pub fn Chuck_Array8_set_capacity(
            this: *mut libc::c_void,
            capacity: libc::c_long,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array84findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array8_find(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array85eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array8_erase(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array814data_type_sizeEv"]
        pub fn Chuck_Array8_data_type_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_Array814data_type_kindEv"]
        pub fn Chuck_Array8_data_type_kind(this: *mut libc::c_void) -> libc::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array16 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array16() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Array16>(),
            152usize,
            concat!("Size of: ", stringify!(Chuck_Array16))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Array16>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array16))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array16>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array16),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array16>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array16),
                "::",
                stringify!(m_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164addrEl"]
        pub fn Chuck_Array16_addr(this: *mut root::Chuck_Array16, i: libc::c_long)
            -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array16_addr1(
            this: *mut root::Chuck_Array16,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array163getElP11t_CKCOMPLEX"]
        pub fn Chuck_Array16_get(
            this: *mut root::Chuck_Array16,
            i: libc::c_long,
            val: *mut root::t_CKCOMPLEX,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array163getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11t_CKCOMPLEX"]
        pub fn Chuck_Array16_get1(
            this: *mut root::Chuck_Array16,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKCOMPLEX,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array163setElRK11t_CKCOMPLEX"]
        pub fn Chuck_Array16_set(
            this: *mut root::Chuck_Array16,
            i: libc::c_long,
            val: *const root::t_CKCOMPLEX,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array163setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK11t_CKCOMPLEX"]
        pub fn Chuck_Array16_set1(
            this: *mut root::Chuck_Array16,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKCOMPLEX,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array169push_backERK11t_CKCOMPLEX"]
        pub fn Chuck_Array16_push_back(
            this: *mut root::Chuck_Array16,
            val: *const root::t_CKCOMPLEX,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array168pop_backEv"]
        pub fn Chuck_Array16_pop_back(this: *mut root::Chuck_Array16) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK13Chuck_Array164backEP11t_CKCOMPLEX"]
        pub fn Chuck_Array16_back(
            this: *const root::Chuck_Array16,
            val: *mut root::t_CKCOMPLEX,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164zeroEmm"]
        pub fn Chuck_Array16_zero(
            this: *mut root::Chuck_Array16,
            start: libc::c_ulong,
            end: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array16C1El"]
        pub fn Chuck_Array16_Chuck_Array16(this: *mut root::Chuck_Array16, capacity: libc::c_long);
    }
    impl Default for Chuck_Array16 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array16 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array16 {{ m_vector: {:?}, m_map: {:?} }}",
                self.m_vector, self.m_map
            )
        }
    }
    impl Chuck_Array16 {
        #[inline]
        pub unsafe fn addr(&mut self, i: libc::c_long) -> libc::c_ulong {
            Chuck_Array16_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const root::std::__cxx11::string) -> libc::c_ulong {
            Chuck_Array16_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: libc::c_long, val: *mut root::t_CKCOMPLEX) -> libc::c_long {
            Chuck_Array16_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKCOMPLEX,
        ) -> libc::c_long {
            Chuck_Array16_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(
            &mut self,
            i: libc::c_long,
            val: *const root::t_CKCOMPLEX,
        ) -> libc::c_long {
            Chuck_Array16_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKCOMPLEX,
        ) -> libc::c_long {
            Chuck_Array16_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: *const root::t_CKCOMPLEX) -> libc::c_long {
            Chuck_Array16_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> libc::c_long {
            Chuck_Array16_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut root::t_CKCOMPLEX) -> libc::c_long {
            Chuck_Array16_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: libc::c_ulong, end: libc::c_ulong) {
            Chuck_Array16_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: libc::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array16_Chuck_Array16(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array16D1Ev"]
        pub fn Chuck_Array16_Chuck_Array16_destructor(this: *mut root::Chuck_Array16);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array165clearEv"]
        pub fn Chuck_Array16_clear(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164sizeEv"]
        pub fn Chuck_Array16_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array168capacityEv"]
        pub fn Chuck_Array16_capacity(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array168set_sizeEl"]
        pub fn Chuck_Array16_set_size(this: *mut libc::c_void, size: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array1612set_capacityEl"]
        pub fn Chuck_Array16_set_capacity(
            this: *mut libc::c_void,
            capacity: libc::c_long,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array164findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array16_find(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array165eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array16_erase(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array1614data_type_sizeEv"]
        pub fn Chuck_Array16_data_type_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array1614data_type_kindEv"]
        pub fn Chuck_Array16_data_type_kind(this: *mut libc::c_void) -> libc::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array24 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array24() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Array24>(),
            152usize,
            concat!("Size of: ", stringify!(Chuck_Array24))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Array24>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array24))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array24>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array24),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array24>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array24),
                "::",
                stringify!(m_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244addrEl"]
        pub fn Chuck_Array24_addr(this: *mut root::Chuck_Array24, i: libc::c_long)
            -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array24_addr1(
            this: *mut root::Chuck_Array24,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array243getElP8t_CKVEC3"]
        pub fn Chuck_Array24_get(
            this: *mut root::Chuck_Array24,
            i: libc::c_long,
            val: *mut root::t_CKVEC3,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array243getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8t_CKVEC3"]
        pub fn Chuck_Array24_get1(
            this: *mut root::Chuck_Array24,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKVEC3,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array243setElRK8t_CKVEC3"]
        pub fn Chuck_Array24_set(
            this: *mut root::Chuck_Array24,
            i: libc::c_long,
            val: *const root::t_CKVEC3,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array243setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8t_CKVEC3"]
        pub fn Chuck_Array24_set1(
            this: *mut root::Chuck_Array24,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKVEC3,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array249push_backERK8t_CKVEC3"]
        pub fn Chuck_Array24_push_back(
            this: *mut root::Chuck_Array24,
            val: *const root::t_CKVEC3,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array248pop_backEv"]
        pub fn Chuck_Array24_pop_back(this: *mut root::Chuck_Array24) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK13Chuck_Array244backEP8t_CKVEC3"]
        pub fn Chuck_Array24_back(
            this: *const root::Chuck_Array24,
            val: *mut root::t_CKVEC3,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244zeroEmm"]
        pub fn Chuck_Array24_zero(
            this: *mut root::Chuck_Array24,
            start: libc::c_ulong,
            end: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array24C1El"]
        pub fn Chuck_Array24_Chuck_Array24(this: *mut root::Chuck_Array24, capacity: libc::c_long);
    }
    impl Default for Chuck_Array24 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array24 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array24 {{ m_vector: {:?}, m_map: {:?} }}",
                self.m_vector, self.m_map
            )
        }
    }
    impl Chuck_Array24 {
        #[inline]
        pub unsafe fn addr(&mut self, i: libc::c_long) -> libc::c_ulong {
            Chuck_Array24_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const root::std::__cxx11::string) -> libc::c_ulong {
            Chuck_Array24_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: libc::c_long, val: *mut root::t_CKVEC3) -> libc::c_long {
            Chuck_Array24_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKVEC3,
        ) -> libc::c_long {
            Chuck_Array24_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: libc::c_long, val: *const root::t_CKVEC3) -> libc::c_long {
            Chuck_Array24_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKVEC3,
        ) -> libc::c_long {
            Chuck_Array24_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: *const root::t_CKVEC3) -> libc::c_long {
            Chuck_Array24_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> libc::c_long {
            Chuck_Array24_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut root::t_CKVEC3) -> libc::c_long {
            Chuck_Array24_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: libc::c_ulong, end: libc::c_ulong) {
            Chuck_Array24_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: libc::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array24_Chuck_Array24(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array24D1Ev"]
        pub fn Chuck_Array24_Chuck_Array24_destructor(this: *mut root::Chuck_Array24);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array245clearEv"]
        pub fn Chuck_Array24_clear(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244sizeEv"]
        pub fn Chuck_Array24_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array248capacityEv"]
        pub fn Chuck_Array24_capacity(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array248set_sizeEl"]
        pub fn Chuck_Array24_set_size(this: *mut libc::c_void, size: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array2412set_capacityEl"]
        pub fn Chuck_Array24_set_capacity(
            this: *mut libc::c_void,
            capacity: libc::c_long,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array244findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array24_find(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array245eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array24_erase(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array2414data_type_sizeEv"]
        pub fn Chuck_Array24_data_type_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array2414data_type_kindEv"]
        pub fn Chuck_Array24_data_type_kind(this: *mut libc::c_void) -> libc::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Array32 {
        pub _base: root::Chuck_Array,
        pub m_vector: root::std::vector,
        pub m_map: root::std::map,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Array32() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Array32>(),
            152usize,
            concat!("Size of: ", stringify!(Chuck_Array32))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Array32>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Array32))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array32>())).m_vector as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array32),
                "::",
                stringify!(m_vector)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Array32>())).m_map as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Array32),
                "::",
                stringify!(m_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324addrEl"]
        pub fn Chuck_Array32_addr(this: *mut root::Chuck_Array32, i: libc::c_long)
            -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324addrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array32_addr1(
            this: *mut root::Chuck_Array32,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array323getElP8t_CKVEC4"]
        pub fn Chuck_Array32_get(
            this: *mut root::Chuck_Array32,
            i: libc::c_long,
            val: *mut root::t_CKVEC4,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array323getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8t_CKVEC4"]
        pub fn Chuck_Array32_get1(
            this: *mut root::Chuck_Array32,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKVEC4,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array323setElRK8t_CKVEC4"]
        pub fn Chuck_Array32_set(
            this: *mut root::Chuck_Array32,
            i: libc::c_long,
            val: *const root::t_CKVEC4,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array323setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK8t_CKVEC4"]
        pub fn Chuck_Array32_set1(
            this: *mut root::Chuck_Array32,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKVEC4,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array329push_backERK8t_CKVEC4"]
        pub fn Chuck_Array32_push_back(
            this: *mut root::Chuck_Array32,
            val: *const root::t_CKVEC4,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array328pop_backEv"]
        pub fn Chuck_Array32_pop_back(this: *mut root::Chuck_Array32) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK13Chuck_Array324backEP8t_CKVEC4"]
        pub fn Chuck_Array32_back(
            this: *const root::Chuck_Array32,
            val: *mut root::t_CKVEC4,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324zeroEmm"]
        pub fn Chuck_Array32_zero(
            this: *mut root::Chuck_Array32,
            start: libc::c_ulong,
            end: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array32C1El"]
        pub fn Chuck_Array32_Chuck_Array32(this: *mut root::Chuck_Array32, capacity: libc::c_long);
    }
    impl Default for Chuck_Array32 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Array32 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Array32 {{ m_vector: {:?}, m_map: {:?} }}",
                self.m_vector, self.m_map
            )
        }
    }
    impl Chuck_Array32 {
        #[inline]
        pub unsafe fn addr(&mut self, i: libc::c_long) -> libc::c_ulong {
            Chuck_Array32_addr(self, i)
        }
        #[inline]
        pub unsafe fn addr1(&mut self, key: *const root::std::__cxx11::string) -> libc::c_ulong {
            Chuck_Array32_addr1(self, key)
        }
        #[inline]
        pub unsafe fn get(&mut self, i: libc::c_long, val: *mut root::t_CKVEC4) -> libc::c_long {
            Chuck_Array32_get(self, i, val)
        }
        #[inline]
        pub unsafe fn get1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *mut root::t_CKVEC4,
        ) -> libc::c_long {
            Chuck_Array32_get1(self, key, val)
        }
        #[inline]
        pub unsafe fn set(&mut self, i: libc::c_long, val: *const root::t_CKVEC4) -> libc::c_long {
            Chuck_Array32_set(self, i, val)
        }
        #[inline]
        pub unsafe fn set1(
            &mut self,
            key: *const root::std::__cxx11::string,
            val: *const root::t_CKVEC4,
        ) -> libc::c_long {
            Chuck_Array32_set1(self, key, val)
        }
        #[inline]
        pub unsafe fn push_back(&mut self, val: *const root::t_CKVEC4) -> libc::c_long {
            Chuck_Array32_push_back(self, val)
        }
        #[inline]
        pub unsafe fn pop_back(&mut self) -> libc::c_long {
            Chuck_Array32_pop_back(self)
        }
        #[inline]
        pub unsafe fn back(&self, val: *mut root::t_CKVEC4) -> libc::c_long {
            Chuck_Array32_back(self, val)
        }
        #[inline]
        pub unsafe fn zero(&mut self, start: libc::c_ulong, end: libc::c_ulong) {
            Chuck_Array32_zero(self, start, end)
        }
        #[inline]
        pub unsafe fn new(capacity: libc::c_long) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Array32_Chuck_Array32(&mut __bindgen_tmp, capacity);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array32D1Ev"]
        pub fn Chuck_Array32_Chuck_Array32_destructor(this: *mut root::Chuck_Array32);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array325clearEv"]
        pub fn Chuck_Array32_clear(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324sizeEv"]
        pub fn Chuck_Array32_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array328capacityEv"]
        pub fn Chuck_Array32_capacity(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array328set_sizeEl"]
        pub fn Chuck_Array32_set_size(this: *mut libc::c_void, size: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array3212set_capacityEl"]
        pub fn Chuck_Array32_set_capacity(
            this: *mut libc::c_void,
            capacity: libc::c_long,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array324findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array32_find(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array325eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Array32_erase(
            this: *mut libc::c_void,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array3214data_type_sizeEv"]
        pub fn Chuck_Array32_data_type_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Array3214data_type_kindEv"]
        pub fn Chuck_Array32_data_type_kind(this: *mut libc::c_void) -> libc::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Event {
        pub _base: root::Chuck_Object,
        pub m_queue: root::std::queue<root::std::deque>,
        pub m_queue_lock: root::XMutex,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event12our_can_waitE"]
        pub static mut Chuck_Event_our_can_wait: libc::c_ulong;
    }
    #[test]
    fn bindgen_test_layout_Chuck_Event() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Event>(),
            192usize,
            concat!("Size of: ", stringify!(Chuck_Event))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Event>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Event))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Event>())).m_queue as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Event),
                "::",
                stringify!(m_queue)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Event>())).m_queue_lock as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Event),
                "::",
                stringify!(m_queue_lock)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event6signalEv"]
        pub fn Chuck_Event_signal(this: *mut root::Chuck_Event);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event9broadcastEv"]
        pub fn Chuck_Event_broadcast(this: *mut root::Chuck_Event);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event4waitEP14Chuck_VM_ShredP8Chuck_VM"]
        pub fn Chuck_Event_wait(
            this: *mut root::Chuck_Event,
            shred: *mut root::Chuck_VM_Shred,
            vm: *mut root::Chuck_VM,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event6removeEP14Chuck_VM_Shred"]
        pub fn Chuck_Event_remove(
            this: *mut root::Chuck_Event,
            shred: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Event15queue_broadcastEP13CBufferSimple"]
        pub fn Chuck_Event_queue_broadcast(
            this: *mut root::Chuck_Event,
            event_buffer: *mut root::CBufferSimple,
        );
    }
    impl Default for Chuck_Event {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Event {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Event {{ m_queue: {:?}, m_queue_lock: {:?} }}",
                self.m_queue, self.m_queue_lock
            )
        }
    }
    impl Chuck_Event {
        #[inline]
        pub unsafe fn signal(&mut self) {
            Chuck_Event_signal(self)
        }
        #[inline]
        pub unsafe fn broadcast(&mut self) {
            Chuck_Event_broadcast(self)
        }
        #[inline]
        pub unsafe fn wait(&mut self, shred: *mut root::Chuck_VM_Shred, vm: *mut root::Chuck_VM) {
            Chuck_Event_wait(self, shred, vm)
        }
        #[inline]
        pub unsafe fn remove(&mut self, shred: *mut root::Chuck_VM_Shred) -> libc::c_ulong {
            Chuck_Event_remove(self, shred)
        }
        #[inline]
        pub unsafe fn queue_broadcast(&mut self, event_buffer: *mut root::CBufferSimple) {
            Chuck_Event_queue_broadcast(self, event_buffer)
        }
    }
    #[repr(C)]
    pub struct Chuck_String {
        pub _base: root::Chuck_Object,
        pub m_charptr: *const libc::c_char,
        pub m_str: root::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_String() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_String>(),
            112usize,
            concat!("Size of: ", stringify!(Chuck_String))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_String>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_String))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_String>())).m_charptr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_String),
                "::",
                stringify!(m_charptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_String>())).m_str as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_String),
                "::",
                stringify!(m_str)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_String3setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_String_set(
            this: *mut root::Chuck_String,
            s: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_String3strB5cxx11Ev"]
        pub fn Chuck_String_str(this: *mut root::Chuck_String)
            -> *const root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_String5c_strEv"]
        pub fn Chuck_String_c_str(this: *mut root::Chuck_String) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_String_Chuck_String(
            this: *mut root::Chuck_String,
            s: *const root::std::__cxx11::string,
        );
    }
    impl Default for Chuck_String {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_String {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_String {{ m_charptr: {:?}, m_str: {:?} }}",
                self.m_charptr, self.m_str
            )
        }
    }
    impl Chuck_String {
        #[inline]
        pub unsafe fn set(&mut self, s: *const root::std::__cxx11::string) {
            Chuck_String_set(self, s)
        }
        #[inline]
        pub unsafe fn str(&mut self) -> *const root::std::__cxx11::string {
            Chuck_String_str(self)
        }
        #[inline]
        pub unsafe fn c_str(&mut self) -> *const libc::c_char {
            Chuck_String_c_str(self)
        }
        #[inline]
        pub unsafe fn new(s: *const root::std::__cxx11::string) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_String_Chuck_String(&mut __bindgen_tmp, s);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12Chuck_StringD1Ev"]
        pub fn Chuck_String_Chuck_String_destructor(this: *mut root::Chuck_String);
    }
    #[repr(C)]
    pub struct Chuck_IO {
        pub _base: root::Chuck_Event,
        pub m_asyncEvent: *mut root::Chuck_Event,
        pub m_thread: *mut root::XThread,
    }
    #[repr(C)]
    pub struct Chuck_IO_async_args {
        pub fileio_obj: *mut root::Chuck_IO_File,
        pub RETURN: *mut libc::c_void,
        pub intArg: libc::c_long,
        pub floatArg: f64,
        pub stringArg: root::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO_async_args() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_IO_async_args>(),
            64usize,
            concat!("Size of: ", stringify!(Chuck_IO_async_args))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_IO_async_args>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO_async_args))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_IO_async_args>())).fileio_obj as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(fileio_obj)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_async_args>())).RETURN as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(RETURN)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_async_args>())).intArg as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(intArg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_IO_async_args>())).floatArg as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(floatArg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_IO_async_args>())).stringArg as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_async_args),
                "::",
                stringify!(stringArg)
            )
        );
    }
    impl Default for Chuck_IO_async_args {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_IO_async_args {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_IO_async_args {{ fileio_obj: {:?}, RETURN: {:?}, intArg: {:?}, floatArg: {:?}, stringArg: {:?} }}" , self . fileio_obj , self . RETURN , self . intArg , self . floatArg , self . stringArg )
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO5INT32E"]
        pub static Chuck_IO_INT32: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO5INT16E"]
        pub static Chuck_IO_INT16: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO4INT8E"]
        pub static Chuck_IO_INT8: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO9MODE_SYNCE"]
        pub static Chuck_IO_MODE_SYNC: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IO10MODE_ASYNCE"]
        pub static Chuck_IO_MODE_ASYNC: libc::c_long;
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_IO>(),
            208usize,
            concat!("Size of: ", stringify!(Chuck_IO))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_IO>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO>())).m_asyncEvent as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO),
                "::",
                stringify!(m_asyncEvent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO>())).m_thread as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO),
                "::",
                stringify!(m_thread)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IOC2Ev"]
        pub fn Chuck_IO_Chuck_IO(this: *mut root::Chuck_IO);
    }
    impl Default for Chuck_IO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_IO {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_IO {{ m_asyncEvent: {:?}, m_thread: {:?} }}",
                self.m_asyncEvent, self.m_thread
            )
        }
    }
    impl Chuck_IO {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_IO_Chuck_IO(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_IOD1Ev"]
        pub fn Chuck_IO_Chuck_IO_destructor(this: *mut root::Chuck_IO);
    }
    #[repr(C)]
    pub struct Chuck_IO_File {
        pub _base: root::Chuck_IO,
        pub m_flags: libc::c_long,
        pub m_iomode: libc::c_long,
        pub m_io: root::std::fstream,
        pub m_dir: *mut root::DIR,
        pub m_dir_start: libc::c_long,
        pub m_path: root::std::__cxx11::string,
        pub m_vmRef: *mut root::Chuck_VM,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File15FLAG_READ_WRITEE"]
        pub static Chuck_IO_File_FLAG_READ_WRITE: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File13FLAG_READONLYE"]
        pub static Chuck_IO_File_FLAG_READONLY: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File14FLAG_WRITEONLYE"]
        pub static Chuck_IO_File_FLAG_WRITEONLY: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File11FLAG_APPENDE"]
        pub static Chuck_IO_File_FLAG_APPEND: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File10TYPE_ASCIIE"]
        pub static Chuck_IO_File_TYPE_ASCII: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File11TYPE_BINARYE"]
        pub static Chuck_IO_File_TYPE_BINARY: libc::c_long;
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO_File() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_IO_File>(),
            808usize,
            concat!("Size of: ", stringify!(Chuck_IO_File))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_IO_File>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO_File))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_flags as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_iomode as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_iomode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_io as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_io)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_dir as *const _ as usize },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_dir)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_dir_start as *const _ as usize },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_dir_start)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_path as *const _ as usize },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_path)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_File>())).m_vmRef as *const _ as usize },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_File),
                "::",
                stringify!(m_vmRef)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File15writeStr_threadEPv"]
        pub fn Chuck_IO_File_writeStr_thread(data: *mut libc::c_void) -> root::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File15writeInt_threadEPv"]
        pub fn Chuck_IO_File_writeInt_thread(data: *mut libc::c_void) -> root::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File17writeFloat_threadEPv"]
        pub fn Chuck_IO_File_writeFloat_thread(data: *mut libc::c_void) -> root::THREAD_RETURN;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_FileC1EP8Chuck_VM"]
        pub fn Chuck_IO_File_Chuck_IO_File(this: *mut root::Chuck_IO_File, vm: *mut root::Chuck_VM);
    }
    impl Default for Chuck_IO_File {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_IO_File {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_IO_File {{ m_flags: {:?}, m_iomode: {:?}, m_io: {:?}, m_dir: {:?}, m_dir_start: {:?}, m_path: {:?}, m_vmRef: {:?} }}" , self . m_flags , self . m_iomode , self . m_io , self . m_dir , self . m_dir_start , self . m_path , self . m_vmRef )
        }
    }
    impl Chuck_IO_File {
        #[inline]
        pub unsafe fn writeStr_thread(data: *mut libc::c_void) -> root::THREAD_RETURN {
            Chuck_IO_File_writeStr_thread(data)
        }
        #[inline]
        pub unsafe fn writeInt_thread(data: *mut libc::c_void) -> root::THREAD_RETURN {
            Chuck_IO_File_writeInt_thread(data)
        }
        #[inline]
        pub unsafe fn writeFloat_thread(data: *mut libc::c_void) -> root::THREAD_RETURN {
            Chuck_IO_File_writeFloat_thread(data)
        }
        #[inline]
        pub unsafe fn new(vm: *mut root::Chuck_VM) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_IO_File_Chuck_IO_File(&mut __bindgen_tmp, vm);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_FileD1Ev"]
        pub fn Chuck_IO_File_Chuck_IO_File_destructor(this: *mut root::Chuck_IO_File);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4openERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn Chuck_IO_File_open(
            this: *mut libc::c_void,
            path: *const root::std::__cxx11::string,
            flags: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4goodEv"]
        pub fn Chuck_IO_File_good(this: *mut libc::c_void) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5closeEv"]
        pub fn Chuck_IO_File_close(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5flushEv"]
        pub fn Chuck_IO_File_flush(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4modeEv"]
        pub fn Chuck_IO_File_mode(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4modeEl"]
        pub fn Chuck_IO_File_mode1(this: *mut libc::c_void, flag: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4sizeEv"]
        pub fn Chuck_IO_File_size(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4seekEl"]
        pub fn Chuck_IO_File_seek(this: *mut libc::c_void, pos: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File4tellEv"]
        pub fn Chuck_IO_File_tell(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5isDirEv"]
        pub fn Chuck_IO_File_isDir(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File7dirListEv"]
        pub fn Chuck_IO_File_dirList(this: *mut libc::c_void) -> *mut root::Chuck_Array4;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File8readLineEv"]
        pub fn Chuck_IO_File_readLine(this: *mut libc::c_void) -> *mut root::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File7readIntEl"]
        pub fn Chuck_IO_File_readInt(this: *mut libc::c_void, flags: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File9readFloatEv"]
        pub fn Chuck_IO_File_readFloat(this: *mut libc::c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File10readStringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_File_readString(
            this: *mut libc::c_void,
            str: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File3eofEv"]
        pub fn Chuck_IO_File_eof(this: *mut libc::c_void) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5writeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_File_write(this: *mut libc::c_void, val: *const root::std::__cxx11::string);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5writeEl"]
        pub fn Chuck_IO_File_write1(this: *mut libc::c_void, val: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5writeEll"]
        pub fn Chuck_IO_File_write2(
            this: *mut libc::c_void,
            val: libc::c_long,
            flags: libc::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_IO_File5writeEd"]
        pub fn Chuck_IO_File_write3(this: *mut libc::c_void, val: f64);
    }
    #[repr(C)]
    pub struct Chuck_IO_Chout {
        pub _base: root::Chuck_IO,
        pub m_callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        // pub m_buffer: root::std::stringstream,
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO_Chout() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_IO_Chout>(),
            608usize,
            concat!("Size of: ", stringify!(Chuck_IO_Chout))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_IO_Chout>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO_Chout))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_Chout>())).m_callback as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_Chout),
                "::",
                stringify!(m_callback)
            )
        );
        // assert_eq!(
        //     unsafe { &(*(::std::ptr::null::<Chuck_IO_Chout>())).m_buffer as *const _ as usize },
        //     216usize,
        //     concat!(
        //         "Offset of field: ",
        //         stringify!(Chuck_IO_Chout),
        //         "::",
        //         stringify!(m_buffer)
        //     )
        // );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout19set_output_callbackEPFvPKcE"]
        pub fn Chuck_IO_Chout_set_output_callback(
            this: *mut root::Chuck_IO_Chout,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_ChoutC1EP13Chuck_Carrier"]
        pub fn Chuck_IO_Chout_Chuck_IO_Chout(
            this: *mut root::Chuck_IO_Chout,
            carrier: *mut root::Chuck_Carrier,
        );
    }
    impl Default for Chuck_IO_Chout {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // impl ::std::fmt::Debug for Chuck_IO_Chout {
    //     fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
    //         write!(
    //             f,
    //             "Chuck_IO_Chout {{ m_callback: {:?}, m_buffer: {:?} }}",
    //             self.m_callback, self.m_buffer
    //         )
    //     }
    // }
    impl Chuck_IO_Chout {
        #[inline]
        pub unsafe fn set_output_callback(
            &mut self,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) {
            Chuck_IO_Chout_set_output_callback(self, fp)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut root::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_IO_Chout_Chuck_IO_Chout(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_ChoutD1Ev"]
        pub fn Chuck_IO_Chout_Chuck_IO_Chout_destructor(this: *mut root::Chuck_IO_Chout);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout4goodEv"]
        pub fn Chuck_IO_Chout_good(this: *mut libc::c_void) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5closeEv"]
        pub fn Chuck_IO_Chout_close(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5flushEv"]
        pub fn Chuck_IO_Chout_flush(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout4modeEv"]
        pub fn Chuck_IO_Chout_mode(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout4modeEl"]
        pub fn Chuck_IO_Chout_mode1(this: *mut libc::c_void, flag: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout8readLineEv"]
        pub fn Chuck_IO_Chout_readLine(this: *mut libc::c_void) -> *mut root::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout7readIntEl"]
        pub fn Chuck_IO_Chout_readInt(this: *mut libc::c_void, flags: libc::c_long)
            -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout9readFloatEv"]
        pub fn Chuck_IO_Chout_readFloat(this: *mut libc::c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout10readStringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_Chout_readString(
            this: *mut libc::c_void,
            str: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout3eofEv"]
        pub fn Chuck_IO_Chout_eof(this: *mut libc::c_void) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5writeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_Chout_write(
            this: *mut libc::c_void,
            val: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5writeEl"]
        pub fn Chuck_IO_Chout_write1(this: *mut libc::c_void, val: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5writeEll"]
        pub fn Chuck_IO_Chout_write2(
            this: *mut libc::c_void,
            val: libc::c_long,
            flags: libc::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Chout5writeEd"]
        pub fn Chuck_IO_Chout_write3(this: *mut libc::c_void, val: f64);
    }
    #[repr(C)]
    pub struct Chuck_IO_Cherr {
        pub _base: root::Chuck_IO,
        pub m_callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        // pub m_buffer: root::std::stringstream,
    }
    #[test]
    fn bindgen_test_layout_Chuck_IO_Cherr() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_IO_Cherr>(),
            608usize,
            concat!("Size of: ", stringify!(Chuck_IO_Cherr))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_IO_Cherr>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_IO_Cherr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_IO_Cherr>())).m_callback as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_IO_Cherr),
                "::",
                stringify!(m_callback)
            )
        );
        // assert_eq!(
        //     unsafe { &(*(::std::ptr::null::<Chuck_IO_Cherr>())).m_buffer as *const _ as usize },
        //     216usize,
        //     concat!(
        //         "Offset of field: ",
        //         stringify!(Chuck_IO_Cherr),
        //         "::",
        //         stringify!(m_buffer)
        //     )
        // );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr19set_output_callbackEPFvPKcE"]
        pub fn Chuck_IO_Cherr_set_output_callback(
            this: *mut root::Chuck_IO_Cherr,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_CherrC1EP13Chuck_Carrier"]
        pub fn Chuck_IO_Cherr_Chuck_IO_Cherr(
            this: *mut root::Chuck_IO_Cherr,
            carrier: *mut root::Chuck_Carrier,
        );
    }
    impl Default for Chuck_IO_Cherr {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // impl ::std::fmt::Debug for Chuck_IO_Cherr {
    //     fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
    //         write!(
    //             f,
    //             "Chuck_IO_Cherr {{ m_callback: {:?}, m_buffer: {:?} }}",
    //             self.m_callback, self.m_buffer
    //         )
    //     }
    // }
    impl Chuck_IO_Cherr {
        #[inline]
        pub unsafe fn set_output_callback(
            &mut self,
            fp: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) {
            Chuck_IO_Cherr_set_output_callback(self, fp)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut root::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_IO_Cherr_Chuck_IO_Cherr(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_CherrD1Ev"]
        pub fn Chuck_IO_Cherr_Chuck_IO_Cherr_destructor(this: *mut root::Chuck_IO_Cherr);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr4goodEv"]
        pub fn Chuck_IO_Cherr_good(this: *mut libc::c_void) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5closeEv"]
        pub fn Chuck_IO_Cherr_close(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5flushEv"]
        pub fn Chuck_IO_Cherr_flush(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr4modeEv"]
        pub fn Chuck_IO_Cherr_mode(this: *mut libc::c_void) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr4modeEl"]
        pub fn Chuck_IO_Cherr_mode1(this: *mut libc::c_void, flag: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr8readLineEv"]
        pub fn Chuck_IO_Cherr_readLine(this: *mut libc::c_void) -> *mut root::Chuck_String;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr7readIntEl"]
        pub fn Chuck_IO_Cherr_readInt(this: *mut libc::c_void, flags: libc::c_long)
            -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr9readFloatEv"]
        pub fn Chuck_IO_Cherr_readFloat(this: *mut libc::c_void) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr10readStringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_Cherr_readString(
            this: *mut libc::c_void,
            str: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr3eofEv"]
        pub fn Chuck_IO_Cherr_eof(this: *mut libc::c_void) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5writeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_IO_Cherr_write(
            this: *mut libc::c_void,
            val: *const root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5writeEl"]
        pub fn Chuck_IO_Cherr_write1(this: *mut libc::c_void, val: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5writeEll"]
        pub fn Chuck_IO_Cherr_write2(
            this: *mut libc::c_void,
            val: libc::c_long,
            flags: libc::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_IO_Cherr5writeEd"]
        pub fn Chuck_IO_Cherr_write3(this: *mut libc::c_void, val: f64);
    }
    extern "C" {
        #[link_name = "\u{1}g_default_chugin_path"]
        pub static mut g_default_chugin_path: [libc::c_char; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}g_chugin_path_envvar"]
        pub static mut g_chugin_path_envvar: [libc::c_char; 0usize];
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_UAnaBlobProxy {
        _unused: [u8; 0],
    }
    pub mod Chuck_DL_Api {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type Object = *mut libc::c_void;
        pub type Type = *mut libc::c_void;
        pub type String = *mut libc::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct Api {
            pub vm: *mut root::Chuck_DL_Api::Api_VMApi,
            pub object: *mut root::Chuck_DL_Api::Api_ObjectApi,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct Api_VMApi {
            pub get_srate: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    arg2: *mut root::Chuck_VM_Shred,
                ) -> libc::c_ulong,
            >,
        }
        #[test]
        fn bindgen_test_layout_Api_VMApi() {
            assert_eq!(
                ::std::mem::size_of::<Api_VMApi>(),
                8usize,
                concat!("Size of: ", stringify!(Api_VMApi))
            );
            assert_eq!(
                ::std::mem::align_of::<Api_VMApi>(),
                8usize,
                concat!("Alignment of ", stringify!(Api_VMApi))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api_VMApi>())).get_srate as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_VMApi),
                    "::",
                    stringify!(get_srate)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN12Chuck_DL_Api3Api5VMApiC1Ev"]
            pub fn Api_VMApi_VMApi(this: *mut root::Chuck_DL_Api::Api_VMApi);
        }
        impl Api_VMApi {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                Api_VMApi_VMApi(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
        pub struct Api_ObjectApi {
            pub get_type: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    arg2: *mut root::Chuck_VM_Shred,
                    name: *mut root::std::__cxx11::string,
                ) -> root::Chuck_DL_Api::Type,
            >,
            pub create: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    arg2: *mut root::Chuck_VM_Shred,
                    type_: root::Chuck_DL_Api::Type,
                ) -> root::Chuck_DL_Api::Object,
            >,
            pub create_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    arg2: *mut root::Chuck_VM_Shred,
                    value: *mut root::std::__cxx11::string,
                ) -> root::Chuck_DL_Api::String,
            >,
            pub get_mvar_int: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut libc::c_long,
                ) -> libc::c_ulong,
            >,
            pub get_mvar_float: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut f64,
                ) -> libc::c_ulong,
            >,
            pub get_mvar_dur: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut f64,
                ) -> libc::c_ulong,
            >,
            pub get_mvar_time: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut f64,
                ) -> libc::c_ulong,
            >,
            pub get_mvar_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut root::Chuck_DL_Api::String,
                ) -> libc::c_ulong,
            >,
            pub get_mvar_object: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    object: root::Chuck_DL_Api::Object,
                    name: *mut root::std::__cxx11::string,
                    value: *mut root::Chuck_DL_Api::Object,
                ) -> libc::c_ulong,
            >,
            pub set_string: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::CK_DL_API,
                    string: root::Chuck_DL_Api::String,
                    value: *mut root::std::__cxx11::string,
                ) -> libc::c_ulong,
            >,
        }
        #[test]
        fn bindgen_test_layout_Api_ObjectApi() {
            assert_eq!(
                ::std::mem::size_of::<Api_ObjectApi>(),
                80usize,
                concat!("Size of: ", stringify!(Api_ObjectApi))
            );
            assert_eq!(
                ::std::mem::align_of::<Api_ObjectApi>(),
                8usize,
                concat!("Alignment of ", stringify!(Api_ObjectApi))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api_ObjectApi>())).get_type as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_type)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api_ObjectApi>())).create as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(create)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).create_string as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(create_string)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_int as *const _ as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_int)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_float as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_float)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_dur as *const _ as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_dur)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_time as *const _ as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_time)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_string as *const _ as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_string)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).get_mvar_object as *const _ as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(get_mvar_object)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<Api_ObjectApi>())).set_string as *const _ as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api_ObjectApi),
                    "::",
                    stringify!(set_string)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN12Chuck_DL_Api3Api9ObjectApiC1Ev"]
            pub fn Api_ObjectApi_ObjectApi(this: *mut root::Chuck_DL_Api::Api_ObjectApi);
        }
        impl Api_ObjectApi {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                Api_ObjectApi_ObjectApi(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
        extern "C" {
            #[link_name = "\u{1}_ZN12Chuck_DL_Api3Api5g_apiE"]
            pub static mut Api_g_api: root::Chuck_DL_Api::Api;
        }
        #[test]
        fn bindgen_test_layout_Api() {
            assert_eq!(
                ::std::mem::size_of::<Api>(),
                16usize,
                concat!("Size of: ", stringify!(Api))
            );
            assert_eq!(
                ::std::mem::align_of::<Api>(),
                8usize,
                concat!("Alignment of ", stringify!(Api))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api>())).vm as *const _ as usize },
                0usize,
                concat!("Offset of field: ", stringify!(Api), "::", stringify!(vm))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<Api>())).object as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(Api),
                    "::",
                    stringify!(object)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN12Chuck_DL_Api3Api8instanceEv"]
            pub fn Api_instance() -> *const root::Chuck_DL_Api::Api;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN12Chuck_DL_Api3ApiC1Ev"]
            pub fn Api_Api(this: *mut root::Chuck_DL_Api::Api);
        }
        impl Default for Api {
            fn default() -> Self {
                unsafe { ::std::mem::zeroed() }
            }
        }
        impl Api {
            #[inline]
            pub unsafe fn instance() -> *const root::Chuck_DL_Api::Api {
                Api_instance()
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::uninitialized();
                Api_Api(&mut __bindgen_tmp);
                __bindgen_tmp
            }
        }
    }
    pub type CK_DL_API = *const root::Chuck_DL_Api::Api;
    pub type f_ck_declversion = ::std::option::Option<unsafe extern "C" fn() -> libc::c_ulong>;
    pub type f_ck_query = ::std::option::Option<
        unsafe extern "C" fn(QUERY: *mut root::Chuck_DL_Query) -> libc::c_ulong,
    >;
    pub type f_alloc = ::std::option::Option<
        unsafe extern "C" fn(
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ) -> *mut root::Chuck_Object,
    >;
    pub type f_ctor = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            ARGS: *mut libc::c_void,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_dtor = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_mfun = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_sfun = ::std::option::Option<
        unsafe extern "C" fn(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_tick = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            in_: f32,
            out: *mut f32,
            API: root::CK_DL_API,
        ) -> libc::c_ulong,
    >;
    pub type f_tickf = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            in_: *mut f32,
            out: *mut f32,
            nframes: libc::c_ulong,
            API: root::CK_DL_API,
        ) -> libc::c_ulong,
    >;
    pub type f_ctrl = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_cget = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ),
    >;
    pub type f_pmsg = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            MSG: *const libc::c_char,
            ARGS: *mut libc::c_void,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        ) -> libc::c_ulong,
    >;
    pub type f_tock = ::std::option::Option<
        unsafe extern "C" fn(
            SELF: *mut root::Chuck_Object,
            UANA: *mut root::Chuck_UAna,
            BLOB: *mut root::Chuck_UAnaBlobProxy,
            API: root::CK_DL_API,
        ) -> libc::c_ulong,
    >;
    pub type f_mainthreadhook =
        ::std::option::Option<unsafe extern "C" fn(bindle: *mut libc::c_void) -> libc::c_ulong>;
    pub type f_mainthreadquit =
        ::std::option::Option<unsafe extern "C" fn(bindle: *mut libc::c_void) -> libc::c_ulong>;
    pub type f_setname = ::std::option::Option<
        unsafe extern "C" fn(query: *mut root::Chuck_DL_Query, name: *const libc::c_char),
    >;
    pub type f_begin_class = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            name: *const libc::c_char,
            parent: *const libc::c_char,
        ),
    >;
    pub type f_add_ctor = ::std::option::Option<
        unsafe extern "C" fn(query: *mut root::Chuck_DL_Query, ctor: root::f_ctor),
    >;
    pub type f_add_dtor = ::std::option::Option<
        unsafe extern "C" fn(query: *mut root::Chuck_DL_Query, dtor: root::f_dtor),
    >;
    pub type f_add_mfun = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            mfun: root::f_mfun,
            type_: *const libc::c_char,
            name: *const libc::c_char,
        ),
    >;
    pub type f_add_sfun = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            sfun: root::f_sfun,
            type_: *const libc::c_char,
            name: *const libc::c_char,
        ),
    >;
    pub type f_add_mvar = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            type_: *const libc::c_char,
            name: *const libc::c_char,
            is_const: libc::c_ulong,
        ) -> libc::c_ulong,
    >;
    pub type f_add_svar = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            type_: *const libc::c_char,
            name: *const libc::c_char,
            is_const: libc::c_ulong,
            static_addr: *mut libc::c_void,
        ),
    >;
    pub type f_add_arg = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            type_: *const libc::c_char,
            name: *const libc::c_char,
        ),
    >;
    pub type f_add_ugen_func = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            tick: root::f_tick,
            pmsg: root::f_pmsg,
            num_in: libc::c_ulong,
            num_out: libc::c_ulong,
        ),
    >;
    pub type f_add_ugen_funcf = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            tickf: root::f_tickf,
            pmsg: root::f_pmsg,
            num_in: libc::c_ulong,
            num_out: libc::c_ulong,
        ),
    >;
    pub type f_add_ugen_funcf_auto_num_channels = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            tickf: root::f_tickf,
            psmg: root::f_pmsg,
        ),
    >;
    pub type f_add_ugen_ctrl = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            ctrl: root::f_ctrl,
            cget: root::f_cget,
            type_: *const libc::c_char,
            name: *const libc::c_char,
        ),
    >;
    pub type f_end_class = ::std::option::Option<
        unsafe extern "C" fn(query: *mut root::Chuck_DL_Query) -> libc::c_ulong,
    >;
    pub type f_doc_class = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            doc: *const libc::c_char,
        ) -> libc::c_ulong,
    >;
    pub type f_add_example = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            ex: *const libc::c_char,
        ) -> libc::c_ulong,
    >;
    pub type f_doc_func = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            doc: *const libc::c_char,
        ) -> libc::c_ulong,
    >;
    pub type f_doc_var = ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut root::Chuck_DL_Query,
            doc: *const libc::c_char,
        ) -> libc::c_ulong,
    >;
    #[repr(C)]
    pub struct Chuck_DL_Query {
        pub m_carrier: *mut root::Chuck_Carrier,
        pub setname: root::f_setname,
        pub begin_class: root::f_begin_class,
        pub add_ctor: root::f_add_ctor,
        pub add_dtor: root::f_add_dtor,
        pub add_mfun: root::f_add_mfun,
        pub add_sfun: root::f_add_sfun,
        pub add_mvar: root::f_add_mvar,
        pub add_svar: root::f_add_svar,
        pub add_arg: root::f_add_arg,
        pub add_ugen_func: root::f_add_ugen_func,
        pub add_ugen_funcf: root::f_add_ugen_funcf,
        pub add_ugen_funcf_auto_num_channels: root::f_add_ugen_funcf_auto_num_channels,
        pub add_ugen_ctrl: root::f_add_ugen_ctrl,
        pub end_class: root::f_end_class,
        pub last_var: *mut root::Chuck_DL_Value,
        pub doc_class: root::f_doc_class,
        pub doc_func: root::f_doc_func,
        pub doc_var: root::f_doc_var,
        pub add_ex: root::f_add_example,
        pub dll_ref: *mut root::Chuck_DLL,
        pub reserved: *mut libc::c_void,
        pub srate: libc::c_ulong,
        pub linepos: libc::c_int,
        pub dll_name: root::std::__cxx11::string,
        pub curr_class: *mut root::Chuck_DL_Class,
        pub curr_func: *mut root::Chuck_DL_Func,
        pub name: root::std::__cxx11::string,
        pub classes: root::std::vector,
        pub stack: root::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Query() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_DL_Query>(),
            320usize,
            concat!("Size of: ", stringify!(Chuck_DL_Query))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_DL_Query>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Query))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).m_carrier as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).setname as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(setname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).begin_class as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(begin_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ctor as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ctor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_dtor as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_dtor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_mfun as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_mfun)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_sfun as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_sfun)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_mvar as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_mvar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_svar as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_svar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_arg as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_arg)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ugen_func as *const _ as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ugen_func)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ugen_funcf as *const _ as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ugen_funcf)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ugen_funcf_auto_num_channels
                    as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ugen_funcf_auto_num_channels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ugen_ctrl as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ugen_ctrl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).end_class as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(end_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).last_var as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(last_var)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).doc_class as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(doc_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).doc_func as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(doc_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).doc_var as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(doc_var)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).add_ex as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(add_ex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).dll_ref as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(dll_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).reserved as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(reserved)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).srate as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(srate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).linepos as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(linepos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).dll_name as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(dll_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).curr_class as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(curr_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).curr_func as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(curr_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).name as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).classes as *const _ as usize },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(classes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Query>())).stack as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Query),
                "::",
                stringify!(stack)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK14Chuck_DL_Query8compilerEv"]
        pub fn Chuck_DL_Query_compiler(
            this: *const root::Chuck_DL_Query,
        ) -> *mut root::Chuck_Compiler;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK14Chuck_DL_Query2vmEv"]
        pub fn Chuck_DL_Query_vm(this: *const root::Chuck_DL_Query) -> *mut root::Chuck_VM;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK14Chuck_DL_Query3envEv"]
        pub fn Chuck_DL_Query_env(this: *const root::Chuck_DL_Query) -> *mut root::Chuck_Env;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_Query5clearEv"]
        pub fn Chuck_DL_Query_clear(this: *mut root::Chuck_DL_Query);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_QueryC1EP13Chuck_Carrier"]
        pub fn Chuck_DL_Query_Chuck_DL_Query(
            this: *mut root::Chuck_DL_Query,
            carrier: *mut root::Chuck_Carrier,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_QueryD1Ev"]
        pub fn Chuck_DL_Query_Chuck_DL_Query_destructor(this: *mut root::Chuck_DL_Query);
    }
    impl Default for Chuck_DL_Query {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Query {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DL_Query {{ m_carrier: {:?}, setname: {:?}, begin_class: {:?}, add_ctor: {:?}, add_dtor: {:?}, add_mfun: {:?}, add_sfun: {:?}, add_mvar: {:?}, add_svar: {:?}, add_arg: {:?}, add_ugen_func: {:?}, add_ugen_funcf: {:?}, add_ugen_funcf_auto_num_channels: {:?}, add_ugen_ctrl: {:?}, end_class: {:?}, last_var: {:?}, doc_class: {:?}, doc_func: {:?}, doc_var: {:?}, add_ex: {:?}, dll_ref: {:?}, reserved: {:?}, srate: {:?}, linepos: {:?}, dll_name: {:?}, curr_class: {:?}, curr_func: {:?}, name: {:?}, classes: {:?}, stack: {:?} }}" , self . m_carrier , self . setname , self . begin_class , self . add_ctor , self . add_dtor , self . add_mfun , self . add_sfun , self . add_mvar , self . add_svar , self . add_arg , self . add_ugen_func , self . add_ugen_funcf , self . add_ugen_funcf_auto_num_channels , self . add_ugen_ctrl , self . end_class , self . last_var , self . doc_class , self . doc_func , self . doc_var , self . add_ex , self . dll_ref , self . reserved , self . srate , self . linepos , self . dll_name , self . curr_class , self . curr_func , self . name , self . classes , self . stack )
        }
    }
    impl Chuck_DL_Query {
        #[inline]
        pub unsafe fn compiler(&self) -> *mut root::Chuck_Compiler {
            Chuck_DL_Query_compiler(self)
        }
        #[inline]
        pub unsafe fn vm(&self) -> *mut root::Chuck_VM {
            Chuck_DL_Query_vm(self)
        }
        #[inline]
        pub unsafe fn env(&self) -> *mut root::Chuck_Env {
            Chuck_DL_Query_env(self)
        }
        #[inline]
        pub unsafe fn clear(&mut self) {
            Chuck_DL_Query_clear(self)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut root::Chuck_Carrier) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DL_Query_Chuck_DL_Query(&mut __bindgen_tmp, carrier);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_DL_Query_Chuck_DL_Query_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Class {
        pub name: root::std::__cxx11::string,
        pub parent: root::std::__cxx11::string,
        pub ctors: root::std::vector,
        pub dtor: *mut root::Chuck_DL_Func,
        pub mfuns: root::std::vector,
        pub sfuns: root::std::vector,
        pub mvars: root::std::vector,
        pub svars: root::std::vector,
        pub ugen_tick: root::f_tick,
        pub ugen_tickf: root::f_tickf,
        pub ugen_pmsg: root::f_pmsg,
        pub ugen_ctrl: root::std::vector,
        pub uana_tock: root::f_tock,
        pub classes: root::std::vector,
        pub current_mvar_offset: libc::c_ulong,
        pub ugen_num_in: libc::c_ulong,
        pub ugen_num_out: libc::c_ulong,
        pub doc: root::std::__cxx11::string,
        pub examples: root::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Class() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_DL_Class>(),
            352usize,
            concat!("Size of: ", stringify!(Chuck_DL_Class))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_DL_Class>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Class))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).parent as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ctors as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ctors)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).dtor as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(dtor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).mfuns as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(mfuns)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).sfuns as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(sfuns)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).mvars as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(mvars)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).svars as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(svars)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_tick as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_tickf as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_tickf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_pmsg as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_pmsg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_ctrl as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_ctrl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).uana_tock as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(uana_tock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).classes as *const _ as usize },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(classes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Class>())).current_mvar_offset as *const _ as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(current_mvar_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_num_in as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_num_in)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).ugen_num_out as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(ugen_num_out)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).doc as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(doc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Class>())).examples as *const _ as usize },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Class),
                "::",
                stringify!(examples)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_ClassC1Ev"]
        pub fn Chuck_DL_Class_Chuck_DL_Class(this: *mut root::Chuck_DL_Class);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_ClassD1Ev"]
        pub fn Chuck_DL_Class_Chuck_DL_Class_destructor(this: *mut root::Chuck_DL_Class);
    }
    impl Default for Chuck_DL_Class {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Class {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DL_Class {{ name: {:?}, parent: {:?}, ctors: {:?}, dtor: {:?}, mfuns: {:?}, sfuns: {:?}, mvars: {:?}, svars: {:?}, ugen_tick: {:?}, ugen_tickf: {:?}, ugen_pmsg: {:?}, ugen_ctrl: {:?}, uana_tock: {:?}, classes: {:?}, current_mvar_offset: {:?}, ugen_num_in: {:?}, ugen_num_out: {:?}, doc: {:?}, examples: {:?} }}" , self . name , self . parent , self . ctors , self . dtor , self . mfuns , self . sfuns , self . mvars , self . svars , self . ugen_tick , self . ugen_tickf , self . ugen_pmsg , self . ugen_ctrl , self . uana_tock , self . classes , self . current_mvar_offset , self . ugen_num_in , self . ugen_num_out , self . doc , self . examples )
        }
    }
    impl Chuck_DL_Class {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DL_Class_Chuck_DL_Class(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_DL_Class_Chuck_DL_Class_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Value {
        pub name: root::std::__cxx11::string,
        pub type_: root::std::__cxx11::string,
        pub is_const: libc::c_ulong,
        pub static_addr: *mut libc::c_void,
        pub doc: root::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Value() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_DL_Value>(),
            112usize,
            concat!("Size of: ", stringify!(Chuck_DL_Value))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_DL_Value>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Value))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).is_const as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(is_const)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).static_addr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(static_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Value>())).doc as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Value),
                "::",
                stringify!(doc)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_ValueC1Ev"]
        pub fn Chuck_DL_Value_Chuck_DL_Value(this: *mut root::Chuck_DL_Value);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_DL_ValueC1EPKcS1_mPv"]
        pub fn Chuck_DL_Value_Chuck_DL_Value1(
            this: *mut root::Chuck_DL_Value,
            t: *const libc::c_char,
            n: *const libc::c_char,
            c: libc::c_ulong,
            a: *mut libc::c_void,
        );
    }
    impl Default for Chuck_DL_Value {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Value {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DL_Value {{ name: {:?}, type: {:?}, is_const: {:?}, static_addr: {:?}, doc: {:?} }}" , self . name , self . type_ , self . is_const , self . static_addr , self . doc )
        }
    }
    impl Chuck_DL_Value {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DL_Value_Chuck_DL_Value(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            t: *const libc::c_char,
            n: *const libc::c_char,
            c: libc::c_ulong,
            a: *mut libc::c_void,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DL_Value_Chuck_DL_Value1(&mut __bindgen_tmp, t, n, c, a);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Func {
        pub name: root::std::__cxx11::string,
        pub type_: root::std::__cxx11::string,
        pub __bindgen_anon_1: root::Chuck_DL_Func__bindgen_ty_1,
        pub args: root::std::vector,
        pub doc: root::std::__cxx11::string,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_DL_Func__bindgen_ty_1 {
        pub ctor: root::f_ctor,
        pub dtor: root::f_dtor,
        pub mfun: root::f_mfun,
        pub sfun: root::f_sfun,
        pub addr: libc::c_ulong,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Func__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_DL_Func__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_DL_Func__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_DL_Func__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Func__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).ctor as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(ctor)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).dtor as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(dtor)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).mfun as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(mfun)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).sfun as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(sfun)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_DL_Func__bindgen_ty_1>())).addr as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func__bindgen_ty_1),
                "::",
                stringify!(addr)
            )
        );
    }
    impl Default for Chuck_DL_Func__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Func__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_DL_Func__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Func() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_DL_Func>(),
            128usize,
            concat!("Size of: ", stringify!(Chuck_DL_Func))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_DL_Func>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Func))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Func>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Func>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Func>())).args as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Func>())).doc as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Func),
                "::",
                stringify!(doc)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_DL_Func7add_argEPKcS1_"]
        pub fn Chuck_DL_Func_add_arg(
            this: *mut root::Chuck_DL_Func,
            t: *const libc::c_char,
            n: *const libc::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_DL_FuncC1Ev"]
        pub fn Chuck_DL_Func_Chuck_DL_Func(this: *mut root::Chuck_DL_Func);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_DL_FuncC1EPKcS1_m"]
        pub fn Chuck_DL_Func_Chuck_DL_Func1(
            this: *mut root::Chuck_DL_Func,
            t: *const libc::c_char,
            n: *const libc::c_char,
            a: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_DL_FuncD1Ev"]
        pub fn Chuck_DL_Func_Chuck_DL_Func_destructor(this: *mut root::Chuck_DL_Func);
    }
    impl Default for Chuck_DL_Func {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Func {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DL_Func {{ name: {:?}, type: {:?}, __bindgen_anon_1: {:?}, args: {:?}, doc: {:?} }}" , self . name , self . type_ , self . __bindgen_anon_1 , self . args , self . doc )
        }
    }
    impl Chuck_DL_Func {
        #[inline]
        pub unsafe fn add_arg(&mut self, t: *const libc::c_char, n: *const libc::c_char) {
            Chuck_DL_Func_add_arg(self, t, n)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DL_Func_Chuck_DL_Func(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn new1(
            t: *const libc::c_char,
            n: *const libc::c_char,
            a: libc::c_ulong,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DL_Func_Chuck_DL_Func1(&mut __bindgen_tmp, t, n, a);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_DL_Func_Chuck_DL_Func_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_DL_Ctrl {
        pub name: root::std::__cxx11::string,
        pub type_: root::std::__cxx11::string,
        pub types: root::std::vector,
        pub ctrl: root::f_ctrl,
        pub cget: root::f_cget,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Ctrl() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_DL_Ctrl>(),
            104usize,
            concat!("Size of: ", stringify!(Chuck_DL_Ctrl))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_DL_Ctrl>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Ctrl))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).type_ as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).types as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(types)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).ctrl as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(ctrl)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Ctrl>())).cget as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Ctrl),
                "::",
                stringify!(cget)
            )
        );
    }
    impl Default for Chuck_DL_Ctrl {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Ctrl {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_DL_Ctrl {{ name: {:?}, type: {:?}, types: {:?}, ctrl: {:?}, cget: {:?} }}",
                self.name, self.type_, self.types, self.ctrl, self.cget
            )
        }
    }
    extern "C" {
        #[link_name = "\u{1}_Z13make_new_mfunPKcS0_PFvP12Chuck_ObjectPvP15Chuck_DL_ReturnP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEE"]
        pub fn make_new_mfun(
            t: *const libc::c_char,
            n: *const libc::c_char,
            mfun: root::f_mfun,
        ) -> *mut root::Chuck_DL_Func;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13make_new_sfunPKcS0_PFvPvP15Chuck_DL_ReturnP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEE"]
        pub fn make_new_sfun(
            t: *const libc::c_char,
            n: *const libc::c_char,
            sfun: root::f_sfun,
        ) -> *mut root::Chuck_DL_Func;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12make_new_argPKcS0_"]
        pub fn make_new_arg(
            t: *const libc::c_char,
            n: *const libc::c_char,
        ) -> *mut root::Chuck_DL_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13make_new_mvarPKcS0_m"]
        pub fn make_new_mvar(
            t: *const libc::c_char,
            n: *const libc::c_char,
            c: libc::c_ulong,
        ) -> *mut root::Chuck_DL_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13make_new_svarPKcS0_mPv"]
        pub fn make_new_svar(
            t: *const libc::c_char,
            n: *const libc::c_char,
            c: libc::c_ulong,
            a: *mut libc::c_void,
        ) -> *mut root::Chuck_DL_Value;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_DL_Return {
        pub v_int: libc::c_long,
        pub v_uint: libc::c_ulong,
        pub v_float: f64,
        pub v_dur: f64,
        pub v_time: f64,
        pub v_complex: root::t_CKCOMPLEX,
        pub v_polar: root::t_CKPOLAR,
        pub v_vec3: root::t_CKVEC3,
        pub v_vec4: root::t_CKVEC4,
        pub v_object: *mut root::Chuck_Object,
        pub v_string: *mut root::Chuck_String,
        _bindgen_union_align: [u64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_Chuck_DL_Return() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_DL_Return>(),
            32usize,
            concat!("Size of: ", stringify!(Chuck_DL_Return))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_DL_Return>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DL_Return))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_int as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_int)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_uint as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_uint)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_float as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_float)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_dur as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_dur)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_time as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_complex as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_complex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_polar as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_polar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_vec3 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_vec3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_vec4 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_vec4)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_object as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_object)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DL_Return>())).v_string as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DL_Return),
                "::",
                stringify!(v_string)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_DL_ReturnC1Ev"]
        pub fn Chuck_DL_Return_Chuck_DL_Return(this: *mut root::Chuck_DL_Return);
    }
    impl Default for Chuck_DL_Return {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DL_Return {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_DL_Return {{ union }}")
        }
    }
    impl Chuck_DL_Return {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DL_Return_Chuck_DL_Return(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct Chuck_DLL {
        pub _base: root::Chuck_VM_Object,
        pub m_handle: *mut libc::c_void,
        pub m_last_error: root::std::__cxx11::string,
        pub m_filename: root::std::__cxx11::string,
        pub m_id: root::std::__cxx11::string,
        pub m_func: root::std::__cxx11::string,
        pub m_done_query: libc::c_ulong,
        pub m_version_func: root::f_ck_declversion,
        pub m_query_func: root::f_ck_query,
        pub m_query: root::Chuck_DL_Query,
    }
    #[test]
    fn bindgen_test_layout_Chuck_DLL() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_DLL>(),
            520usize,
            concat!("Size of: ", stringify!(Chuck_DLL))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_DLL>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_DLL))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_handle as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_handle)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_last_error as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_last_error)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_filename as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_filename)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_id as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_func as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_done_query as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_done_query)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_version_func as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_version_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_query_func as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_query_func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_DLL>())).m_query as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_DLL),
                "::",
                stringify!(m_query)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL4loadEPKcS1_m"]
        pub fn Chuck_DLL_load(
            this: *mut root::Chuck_DLL,
            filename: *const libc::c_char,
            func: *const libc::c_char,
            lazy: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL4loadEPFmP14Chuck_DL_QueryEm"]
        pub fn Chuck_DLL_load1(
            this: *mut root::Chuck_DLL,
            query_func: root::f_ck_query,
            lazy: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL8get_addrEPKc"]
        pub fn Chuck_DLL_get_addr(
            this: *mut root::Chuck_DLL,
            symbol: *const libc::c_char,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK9Chuck_DLL10last_errorEv"]
        pub fn Chuck_DLL_last_error(this: *const root::Chuck_DLL) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL6unloadEv"]
        pub fn Chuck_DLL_unload(this: *mut root::Chuck_DLL) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLL5queryEv"]
        pub fn Chuck_DLL_query(this: *mut root::Chuck_DLL) -> *const root::Chuck_DL_Query;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK9Chuck_DLL4goodEv"]
        pub fn Chuck_DLL_good(this: *const root::Chuck_DLL) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK9Chuck_DLL4nameEv"]
        pub fn Chuck_DLL_name(this: *const root::Chuck_DLL) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLLC1EP13Chuck_CarrierPKc"]
        pub fn Chuck_DLL_Chuck_DLL(
            this: *mut root::Chuck_DLL,
            carrier: *mut root::Chuck_Carrier,
            xid: *const libc::c_char,
        );
    }
    impl Default for Chuck_DLL {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_DLL {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_DLL {{ m_handle: {:?}, m_last_error: {:?}, m_filename: {:?}, m_id: {:?}, m_func: {:?}, m_done_query: {:?}, m_version_func: {:?}, m_query_func: {:?}, m_query: {:?} }}" , self . m_handle , self . m_last_error , self . m_filename , self . m_id , self . m_func , self . m_done_query , self . m_version_func , self . m_query_func , self . m_query )
        }
    }
    impl Chuck_DLL {
        #[inline]
        pub unsafe fn load(
            &mut self,
            filename: *const libc::c_char,
            func: *const libc::c_char,
            lazy: libc::c_ulong,
        ) -> libc::c_ulong {
            Chuck_DLL_load(self, filename, func, lazy)
        }
        #[inline]
        pub unsafe fn load1(
            &mut self,
            query_func: root::f_ck_query,
            lazy: libc::c_ulong,
        ) -> libc::c_ulong {
            Chuck_DLL_load1(self, query_func, lazy)
        }
        #[inline]
        pub unsafe fn get_addr(&mut self, symbol: *const libc::c_char) -> *mut libc::c_void {
            Chuck_DLL_get_addr(self, symbol)
        }
        #[inline]
        pub unsafe fn last_error(&self) -> *const libc::c_char {
            Chuck_DLL_last_error(self)
        }
        #[inline]
        pub unsafe fn unload(&mut self) -> libc::c_ulong {
            Chuck_DLL_unload(self)
        }
        #[inline]
        pub unsafe fn query(&mut self) -> *const root::Chuck_DL_Query {
            Chuck_DLL_query(self)
        }
        #[inline]
        pub unsafe fn good(&self) -> libc::c_ulong {
            Chuck_DLL_good(self)
        }
        #[inline]
        pub unsafe fn name(&self) -> *const libc::c_char {
            Chuck_DLL_name(self)
        }
        #[inline]
        pub unsafe fn new(carrier: *mut root::Chuck_Carrier, xid: *const libc::c_char) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_DLL_Chuck_DLL(&mut __bindgen_tmp, carrier, xid);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_DLLD1Ev"]
        pub fn Chuck_DLL_Chuck_DLL_destructor(this: *mut root::Chuck_DLL);
    }
    extern "C" {
        pub fn _dl_mcount_wrapper_check(__selfpc: *mut libc::c_void);
    }
    pub type Lmid_t = libc::c_long;
    extern "C" {
        pub fn dlopen(__file: *const libc::c_char, __mode: libc::c_int) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn dlclose(__handle: *mut libc::c_void) -> libc::c_int;
    }
    extern "C" {
        pub fn dlsym(__handle: *mut libc::c_void, __name: *const libc::c_char)
            -> *mut libc::c_void;
    }
    extern "C" {
        pub fn dlmopen(
            __nsid: root::Lmid_t,
            __file: *const libc::c_char,
            __mode: libc::c_int,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn dlvsym(
            __handle: *mut libc::c_void,
            __name: *const libc::c_char,
            __version: *const libc::c_char,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn dlerror() -> *mut libc::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Dl_info {
        pub dli_fname: *const libc::c_char,
        pub dli_fbase: *mut libc::c_void,
        pub dli_sname: *const libc::c_char,
        pub dli_saddr: *mut libc::c_void,
    }
    #[test]
    fn bindgen_test_layout_Dl_info() {
        assert_eq!(
            ::std::mem::size_of::<Dl_info>(),
            32usize,
            concat!("Size of: ", stringify!(Dl_info))
        );
        assert_eq!(
            ::std::mem::align_of::<Dl_info>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_info))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_fname as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_fname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_fbase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_fbase)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_sname as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_sname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_saddr as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_saddr)
            )
        );
    }
    impl Default for Dl_info {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn dladdr(__address: *const libc::c_void, __info: *mut root::Dl_info) -> libc::c_int;
    }
    extern "C" {
        pub fn dladdr1(
            __address: *const libc::c_void,
            __info: *mut root::Dl_info,
            __extra_info: *mut *mut libc::c_void,
            __flags: libc::c_int,
        ) -> libc::c_int;
    }
    pub const RTLD_DL_SYMENT: root::_bindgen_ty_47 = _bindgen_ty_47::RTLD_DL_SYMENT;
    pub const RTLD_DL_LINKMAP: root::_bindgen_ty_47 = _bindgen_ty_47::RTLD_DL_LINKMAP;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_47 {
        RTLD_DL_SYMENT = 1,
        RTLD_DL_LINKMAP = 2,
    }
    extern "C" {
        pub fn dlinfo(
            __handle: *mut libc::c_void,
            __request: libc::c_int,
            __arg: *mut libc::c_void,
        ) -> libc::c_int;
    }
    pub const RTLD_DI_LMID: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_LMID;
    pub const RTLD_DI_LINKMAP: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_LINKMAP;
    pub const RTLD_DI_CONFIGADDR: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_CONFIGADDR;
    pub const RTLD_DI_SERINFO: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_SERINFO;
    pub const RTLD_DI_SERINFOSIZE: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_SERINFOSIZE;
    pub const RTLD_DI_ORIGIN: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_ORIGIN;
    pub const RTLD_DI_PROFILENAME: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_PROFILENAME;
    pub const RTLD_DI_PROFILEOUT: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_PROFILEOUT;
    pub const RTLD_DI_TLS_MODID: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_TLS_MODID;
    pub const RTLD_DI_TLS_DATA: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_TLS_DATA;
    pub const RTLD_DI_MAX: root::_bindgen_ty_48 = _bindgen_ty_48::RTLD_DI_TLS_DATA;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_48 {
        RTLD_DI_LMID = 1,
        RTLD_DI_LINKMAP = 2,
        RTLD_DI_CONFIGADDR = 3,
        RTLD_DI_SERINFO = 4,
        RTLD_DI_SERINFOSIZE = 5,
        RTLD_DI_ORIGIN = 6,
        RTLD_DI_PROFILENAME = 7,
        RTLD_DI_PROFILEOUT = 8,
        RTLD_DI_TLS_MODID = 9,
        RTLD_DI_TLS_DATA = 10,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Dl_serpath {
        pub dls_name: *mut libc::c_char,
        pub dls_flags: libc::c_uint,
    }
    #[test]
    fn bindgen_test_layout_Dl_serpath() {
        assert_eq!(
            ::std::mem::size_of::<Dl_serpath>(),
            16usize,
            concat!("Size of: ", stringify!(Dl_serpath))
        );
        assert_eq!(
            ::std::mem::align_of::<Dl_serpath>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_serpath))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serpath>())).dls_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serpath),
                "::",
                stringify!(dls_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serpath>())).dls_flags as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serpath),
                "::",
                stringify!(dls_flags)
            )
        );
    }
    impl Default for Dl_serpath {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Dl_serinfo {
        pub dls_size: usize,
        pub dls_cnt: libc::c_uint,
        pub dls_serpath: [root::Dl_serpath; 1usize],
    }
    #[test]
    fn bindgen_test_layout_Dl_serinfo() {
        assert_eq!(
            ::std::mem::size_of::<Dl_serinfo>(),
            32usize,
            concat!("Size of: ", stringify!(Dl_serinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<Dl_serinfo>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_serinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_cnt as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_cnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_serpath as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_serpath)
            )
        );
    }
    impl Default for Dl_serinfo {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}EM_anyErrors"]
        pub static mut EM_anyErrors: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}EM_tokPos"]
        pub static mut EM_tokPos: libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}EM_lineNum"]
        pub static mut EM_lineNum: libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}EM_extLineNum"]
        pub static mut EM_extLineNum: libc::c_int;
    }
    extern "C" {
        pub fn EM_newline();
    }
    extern "C" {
        pub fn ck_fprintf_stdout(format: *const libc::c_char, ...);
    }
    extern "C" {
        pub fn ck_fprintf_stderr(format: *const libc::c_char, ...);
    }
    extern "C" {
        pub fn ck_fflush_stdout();
    }
    extern "C" {
        pub fn ck_fflush_stderr();
    }
    extern "C" {
        pub fn ck_vfprintf_stdout(format: *const libc::c_char, args: *mut root::__va_list_tag);
    }
    extern "C" {
        pub fn ck_vfprintf_stderr(format: *const libc::c_char, args: *mut root::__va_list_tag);
    }
    extern "C" {
        pub fn ck_set_stdout_callback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        );
    }
    extern "C" {
        pub fn ck_set_stderr_callback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        );
    }
    #[repr(C)]
    pub struct ChuckOutStream {
        // pub m_stream: root::std::stringstream,
        pub m_callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        pub m_isErr: bool,
    }
    #[test]
    fn bindgen_test_layout_ChuckOutStream() {
        assert_eq!(
            ::std::mem::size_of::<ChuckOutStream>(),
            408usize,
            concat!("Size of: ", stringify!(ChuckOutStream))
        );
        assert_eq!(
            ::std::mem::align_of::<ChuckOutStream>(),
            8usize,
            concat!("Alignment of ", stringify!(ChuckOutStream))
        );
        // assert_eq!(
        //     unsafe { &(*(::std::ptr::null::<ChuckOutStream>())).m_stream as *const _ as usize },
        //     0usize,
        //     concat!(
        //         "Offset of field: ",
        //         stringify!(ChuckOutStream),
        //         "::",
        //         stringify!(m_stream)
        //     )
        // );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChuckOutStream>())).m_callback as *const _ as usize },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(ChuckOutStream),
                "::",
                stringify!(m_callback)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChuckOutStream>())).m_isErr as *const _ as usize },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(ChuckOutStream),
                "::",
                stringify!(m_isErr)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14ChuckOutStream12set_callbackEPFvPKcE"]
        pub fn ChuckOutStream_set_callback(
            this: *mut root::ChuckOutStream,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14ChuckOutStreamC1Eb"]
        pub fn ChuckOutStream_ChuckOutStream(this: *mut root::ChuckOutStream, isErr: bool);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14ChuckOutStreamD1Ev"]
        pub fn ChuckOutStream_ChuckOutStream_destructor(this: *mut root::ChuckOutStream);
    }
    impl Default for ChuckOutStream {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    // impl ::std::fmt::Debug for ChuckOutStream {
    //     fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
    //         write!(
    //             f,
    //             "ChuckOutStream {{ m_stream: {:?}, m_callback: {:?}, m_isErr: {:?} }}",
    //             self.m_stream, self.m_callback, self.m_isErr
    //         )
    //     }
    // }
    impl ChuckOutStream {
        #[inline]
        pub unsafe fn set_callback(
            &mut self,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) {
            ChuckOutStream_set_callback(self, callback)
        }
        #[inline]
        pub unsafe fn new(isErr: bool) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ChuckOutStream_ChuckOutStream(&mut __bindgen_tmp, isErr);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ChuckOutStream_ChuckOutStream_destructor(self)
        }
    }
    extern "C" {
        #[link_name = "\u{1}g_ck_stdoutstream"]
        pub static mut g_ck_stdoutstream: root::ChuckOutStream;
    }
    extern "C" {
        #[link_name = "\u{1}g_ck_stderrstream"]
        pub static mut g_ck_stderrstream: root::ChuckOutStream;
    }
    extern "C" {
        pub fn EM_log(arg1: libc::c_long, arg2: root::c_constr, ...);
    }
    extern "C" {
        pub fn EM_setlog(arg1: libc::c_long);
    }
    extern "C" {
        pub fn EM_pushlog();
    }
    extern "C" {
        pub fn EM_poplog();
    }
    extern "C" {
        #[link_name = "\u{1}g_loglevel"]
        pub static mut g_loglevel: libc::c_long;
    }
    extern "C" {
        pub fn EM_error(arg1: libc::c_int, arg2: root::c_constr, ...);
    }
    extern "C" {
        pub fn EM_error2(arg1: libc::c_int, arg2: root::c_constr, ...);
    }
    extern "C" {
        pub fn EM_error2b(arg1: libc::c_int, arg2: root::c_constr, ...);
    }
    extern "C" {
        pub fn EM_error3(arg1: root::c_constr, ...);
    }
    extern "C" {
        pub fn EM_impossible(arg1: root::c_constr, ...);
    }
    extern "C" {
        pub fn EM_reset(filename: root::c_constr, fd: *mut root::FILE) -> libc::c_ulong;
    }
    extern "C" {
        pub fn EM_change_file(filename: root::c_constr);
    }
    extern "C" {
        pub fn EM_lasterror() -> *const libc::c_char;
    }
    extern "C" {
        pub fn EM_reset_msg();
    }
    extern "C" {
        pub fn mini(str: *const libc::c_char) -> *const libc::c_char;
    }
    extern "C" {
        pub fn mini_type(str: *const libc::c_char) -> *const libc::c_char;
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum te_Type {
        te_none = 0,
        te_int = 1,
        te_uint = 2,
        te_single = 3,
        te_float = 4,
        te_double = 5,
        te_time = 6,
        te_dur = 7,
        te_complex = 8,
        te_polar = 9,
        te_string = 10,
        te_thread = 11,
        te_shred = 12,
        te_class = 13,
        te_function = 14,
        te_object = 15,
        te_user = 16,
        te_array = 17,
        te_null = 18,
        te_ugen = 19,
        te_uana = 20,
        te_event = 21,
        te_void = 22,
        te_stdout = 23,
        te_stderr = 24,
        te_adc = 25,
        te_dac = 26,
        te_bunghole = 27,
        te_uanablob = 28,
        te_io = 29,
        te_fileio = 30,
        te_chout = 31,
        te_cherr = 32,
        te_multi = 33,
        te_vec3 = 34,
        te_vec4 = 35,
        te_vector = 36,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum te_GlobalType {
        te_globalInt = 0,
        te_globalFloat = 1,
        te_globalEvent = 2,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum te_HowMuch {
        te_do_all = 0,
        te_do_classes_only = 1,
        te_do_no_classes = 2,
    }
    #[repr(C)]
    pub struct Chuck_Scope {
        pub scope: root::std::vector,
        pub commit_map: root::std::map,
    }
    impl Default for Chuck_Scope {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Scope {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Scope {{ scope: {:?}, commit_map: {:?} }}",
                self.scope, self.commit_map
            )
        }
    }
    impl ::std::cmp::PartialEq for Chuck_Scope {
        fn eq(&self, other: &Chuck_Scope) -> bool {
            self.scope == other.scope && self.commit_map == other.commit_map
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Multi {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct Chuck_Namespace {
        pub _base: root::Chuck_VM_Object,
        pub type_: root::Chuck_Scope,
        pub value: root::Chuck_Scope,
        pub func: root::Chuck_Scope,
        pub obj_v_table: root::Chuck_VTable,
        pub class_data: *mut libc::c_uchar,
        pub class_data_size: libc::c_ulong,
        pub name: root::std::__cxx11::string,
        pub pre_ctor: *mut root::Chuck_VM_Code,
        pub dtor: *mut root::Chuck_VM_Code,
        pub parent: *mut root::Chuck_Namespace,
        pub offset: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Namespace() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Namespace>(),
            360usize,
            concat!("Size of: ", stringify!(Chuck_Namespace))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Namespace>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Namespace))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).type_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).value as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(value)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).func as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).obj_v_table as *const _ as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(obj_v_table)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).class_data as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(class_data)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Namespace>())).class_data_size as *const _ as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(class_data_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).name as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).pre_ctor as *const _ as usize },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(pre_ctor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).dtor as *const _ as usize },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(dtor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).parent as *const _ as usize },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Namespace>())).offset as *const _ as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Namespace),
                "::",
                stringify!(offset)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace11lookup_typeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn Chuck_Namespace_lookup_type(
            this: *mut root::Chuck_Namespace,
            name: *const root::std::__cxx11::string,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace11lookup_typeEP9S_Symbol_l"]
        pub fn Chuck_Namespace_lookup_type1(
            this: *mut root::Chuck_Namespace,
            name: root::S_Symbol,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace12lookup_valueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn Chuck_Namespace_lookup_value(
            this: *mut root::Chuck_Namespace,
            name: *const root::std::__cxx11::string,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace12lookup_valueEP9S_Symbol_l"]
        pub fn Chuck_Namespace_lookup_value1(
            this: *mut root::Chuck_Namespace,
            name: root::S_Symbol,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace11lookup_funcERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn Chuck_Namespace_lookup_func(
            this: *mut root::Chuck_Namespace,
            name: *const root::std::__cxx11::string,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Func;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace11lookup_funcEP9S_Symbol_l"]
        pub fn Chuck_Namespace_lookup_func1(
            this: *mut root::Chuck_Namespace,
            name: root::S_Symbol,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Func;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace6commitEv"]
        pub fn Chuck_Namespace_commit(this: *mut root::Chuck_Namespace);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace8rollbackEv"]
        pub fn Chuck_Namespace_rollback(this: *mut root::Chuck_Namespace);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace9get_typesERSt6vectorIP10Chuck_TypeSaIS2_EE"]
        pub fn Chuck_Namespace_get_types(
            this: *mut root::Chuck_Namespace,
            out: *mut root::std::vector,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace10get_valuesERSt6vectorIP11Chuck_ValueSaIS2_EE"]
        pub fn Chuck_Namespace_get_values(
            this: *mut root::Chuck_Namespace,
            out: *mut root::std::vector,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_Namespace9get_funcsERSt6vectorIP10Chuck_FuncSaIS2_EE"]
        pub fn Chuck_Namespace_get_funcs(
            this: *mut root::Chuck_Namespace,
            out: *mut root::std::vector,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_NamespaceC1Ev"]
        pub fn Chuck_Namespace_Chuck_Namespace(this: *mut root::Chuck_Namespace);
    }
    impl Default for Chuck_Namespace {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Namespace {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Namespace {{ type: {:?}, value: {:?}, func: {:?}, obj_v_table: {:?}, class_data: {:?}, class_data_size: {:?}, name: {:?}, pre_ctor: {:?}, dtor: {:?}, parent: {:?}, offset: {:?} }}" , self . type_ , self . value , self . func , self . obj_v_table , self . class_data , self . class_data_size , self . name , self . pre_ctor , self . dtor , self . parent , self . offset )
        }
    }
    impl Chuck_Namespace {
        #[inline]
        pub unsafe fn lookup_type(
            &mut self,
            name: *const root::std::__cxx11::string,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Type {
            Chuck_Namespace_lookup_type(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_type1(
            &mut self,
            name: root::S_Symbol,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Type {
            Chuck_Namespace_lookup_type1(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_value(
            &mut self,
            name: *const root::std::__cxx11::string,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Value {
            Chuck_Namespace_lookup_value(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_value1(
            &mut self,
            name: root::S_Symbol,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Value {
            Chuck_Namespace_lookup_value1(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_func(
            &mut self,
            name: *const root::std::__cxx11::string,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Func {
            Chuck_Namespace_lookup_func(self, name, climb)
        }
        #[inline]
        pub unsafe fn lookup_func1(
            &mut self,
            name: root::S_Symbol,
            climb: libc::c_long,
        ) -> *mut root::Chuck_Func {
            Chuck_Namespace_lookup_func1(self, name, climb)
        }
        #[inline]
        pub unsafe fn commit(&mut self) {
            Chuck_Namespace_commit(self)
        }
        #[inline]
        pub unsafe fn rollback(&mut self) {
            Chuck_Namespace_rollback(self)
        }
        #[inline]
        pub unsafe fn get_types(&mut self, out: *mut root::std::vector) {
            Chuck_Namespace_get_types(self, out)
        }
        #[inline]
        pub unsafe fn get_values(&mut self, out: *mut root::std::vector) {
            Chuck_Namespace_get_values(self, out)
        }
        #[inline]
        pub unsafe fn get_funcs(&mut self, out: *mut root::std::vector) {
            Chuck_Namespace_get_funcs(self, out)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Namespace_Chuck_Namespace(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_NamespaceD1Ev"]
        pub fn Chuck_Namespace_Chuck_Namespace_destructor(this: *mut root::Chuck_Namespace);
    }
    #[repr(C)]
    pub struct Chuck_Context {
        pub _base: root::Chuck_VM_Object,
        pub filename: root::std::__cxx11::string,
        pub full_path: root::std::__cxx11::string,
        pub parse_tree: root::a_Program,
        pub nspc: *mut root::Chuck_Namespace,
        pub public_class_def: root::a_Class_Def,
        pub has_error: libc::c_ulong,
        pub progress: libc::c_ulong,
        pub new_types: root::std::vector,
        pub new_values: root::std::vector,
        pub new_funcs: root::std::vector,
        pub new_nspc: root::std::vector,
        pub commit_map: root::std::map,
    }
    pub const Chuck_Context_P_NONE: root::Chuck_Context__bindgen_ty_1 =
        Chuck_Context__bindgen_ty_1::P_NONE;
    pub const Chuck_Context_P_CLASSES_ONLY: root::Chuck_Context__bindgen_ty_1 =
        Chuck_Context__bindgen_ty_1::P_CLASSES_ONLY;
    pub const Chuck_Context_P_ALL: root::Chuck_Context__bindgen_ty_1 =
        Chuck_Context__bindgen_ty_1::P_ALL;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum Chuck_Context__bindgen_ty_1 {
        P_NONE = 0,
        P_CLASSES_ONLY = 1,
        P_ALL = 2,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Context() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Context>(),
            288usize,
            concat!("Size of: ", stringify!(Chuck_Context))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Context>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Context))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).filename as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(filename)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).full_path as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(full_path)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).parse_tree as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(parse_tree)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).nspc as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(nspc)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Context>())).public_class_def as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(public_class_def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).has_error as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(has_error)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).progress as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(progress)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).new_types as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(new_types)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).new_values as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(new_values)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).new_funcs as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(new_funcs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).new_nspc as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(new_nspc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Context>())).commit_map as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Context),
                "::",
                stringify!(commit_map)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Context20add_commit_candidateEP15Chuck_Namespace"]
        pub fn Chuck_Context_add_commit_candidate(
            this: *mut root::Chuck_Context,
            nspc: *mut root::Chuck_Namespace,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Context6commitEv"]
        pub fn Chuck_Context_commit(this: *mut root::Chuck_Context);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Context8rollbackEv"]
        pub fn Chuck_Context_rollback(this: *mut root::Chuck_Context);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Context4codeEv"]
        pub fn Chuck_Context_code(this: *mut root::Chuck_Context) -> *mut root::Chuck_VM_Code;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Context14new_Chuck_TypeEP9Chuck_Env"]
        pub fn Chuck_Context_new_Chuck_Type(
            this: *mut root::Chuck_Context,
            env: *mut root::Chuck_Env,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Context15new_Chuck_ValueEP10Chuck_TypeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Context_new_Chuck_Value(
            this: *mut root::Chuck_Context,
            t: *mut root::Chuck_Type,
            name: *const root::std::__cxx11::string,
        ) -> *mut root::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Context14new_Chuck_FuncEv"]
        pub fn Chuck_Context_new_Chuck_Func(
            this: *mut root::Chuck_Context,
        ) -> *mut root::Chuck_Func;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Context19new_Chuck_NamespaceEv"]
        pub fn Chuck_Context_new_Chuck_Namespace(
            this: *mut root::Chuck_Context,
        ) -> *mut root::Chuck_Namespace;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_ContextC1Ev"]
        pub fn Chuck_Context_Chuck_Context(this: *mut root::Chuck_Context);
    }
    impl Default for Chuck_Context {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Context {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Context {{ filename: {:?}, full_path: {:?}, parse_tree: {:?}, nspc: {:?}, public_class_def: {:?}, has_error: {:?}, progress: {:?}, new_types: {:?}, new_values: {:?}, new_funcs: {:?}, new_nspc: {:?}, commit_map: {:?} }}" , self . filename , self . full_path , self . parse_tree , self . nspc , self . public_class_def , self . has_error , self . progress , self . new_types , self . new_values , self . new_funcs , self . new_nspc , self . commit_map )
        }
    }
    impl Chuck_Context {
        #[inline]
        pub unsafe fn add_commit_candidate(&mut self, nspc: *mut root::Chuck_Namespace) {
            Chuck_Context_add_commit_candidate(self, nspc)
        }
        #[inline]
        pub unsafe fn commit(&mut self) {
            Chuck_Context_commit(self)
        }
        #[inline]
        pub unsafe fn rollback(&mut self) {
            Chuck_Context_rollback(self)
        }
        #[inline]
        pub unsafe fn code(&mut self) -> *mut root::Chuck_VM_Code {
            Chuck_Context_code(self)
        }
        #[inline]
        pub unsafe fn new_Chuck_Type(
            &mut self,
            env: *mut root::Chuck_Env,
        ) -> *mut root::Chuck_Type {
            Chuck_Context_new_Chuck_Type(self, env)
        }
        #[inline]
        pub unsafe fn new_Chuck_Value(
            &mut self,
            t: *mut root::Chuck_Type,
            name: *const root::std::__cxx11::string,
        ) -> *mut root::Chuck_Value {
            Chuck_Context_new_Chuck_Value(self, t, name)
        }
        #[inline]
        pub unsafe fn new_Chuck_Func(&mut self) -> *mut root::Chuck_Func {
            Chuck_Context_new_Chuck_Func(self)
        }
        #[inline]
        pub unsafe fn new_Chuck_Namespace(&mut self) -> *mut root::Chuck_Namespace {
            Chuck_Context_new_Chuck_Namespace(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Context_Chuck_Context(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_ContextD1Ev"]
        pub fn Chuck_Context_Chuck_Context_destructor(this: *mut root::Chuck_Context);
    }
    #[repr(C)]
    pub struct Chuck_Env {
        pub _base: root::Chuck_VM_Object,
        pub m_carrier: *mut root::Chuck_Carrier,
        pub global_nspc: *mut root::Chuck_Namespace,
        pub global_context: root::Chuck_Context,
        pub user_nspc: *mut root::Chuck_Namespace,
        pub nspc_stack: root::std::vector,
        pub curr: *mut root::Chuck_Namespace,
        pub class_stack: root::std::vector,
        pub class_def: *mut root::Chuck_Type,
        pub func: *mut root::Chuck_Func,
        pub class_scope: libc::c_ulong,
        pub contexts: root::std::vector,
        pub context: *mut root::Chuck_Context,
        pub breaks: root::std::vector,
        pub key_words: root::std::map,
        pub key_types: root::std::map,
        pub key_values: root::std::map,
        pub deprecated: root::std::map,
        pub deprecate_level: libc::c_long,
        pub t_void: *mut root::Chuck_Type,
        pub t_int: *mut root::Chuck_Type,
        pub t_float: *mut root::Chuck_Type,
        pub t_time: *mut root::Chuck_Type,
        pub t_dur: *mut root::Chuck_Type,
        pub t_complex: *mut root::Chuck_Type,
        pub t_polar: *mut root::Chuck_Type,
        pub t_vec3: *mut root::Chuck_Type,
        pub t_vec4: *mut root::Chuck_Type,
        pub t_null: *mut root::Chuck_Type,
        pub t_function: *mut root::Chuck_Type,
        pub t_object: *mut root::Chuck_Type,
        pub t_array: *mut root::Chuck_Type,
        pub t_string: *mut root::Chuck_Type,
        pub t_event: *mut root::Chuck_Type,
        pub t_ugen: *mut root::Chuck_Type,
        pub t_uana: *mut root::Chuck_Type,
        pub t_uanablob: *mut root::Chuck_Type,
        pub t_shred: *mut root::Chuck_Type,
        pub t_io: *mut root::Chuck_Type,
        pub t_fileio: *mut root::Chuck_Type,
        pub t_chout: *mut root::Chuck_Type,
        pub t_cherr: *mut root::Chuck_Type,
        pub t_thread: *mut root::Chuck_Type,
        pub t_class: *mut root::Chuck_Type,
        pub t_dac: *mut root::Chuck_Type,
        pub t_adc: *mut root::Chuck_Type,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Env() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Env>(),
            904usize,
            concat!("Size of: ", stringify!(Chuck_Env))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Env>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Env))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).m_carrier as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).global_nspc as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(global_nspc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).global_context as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(global_context)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).user_nspc as *const _ as usize },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(user_nspc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).nspc_stack as *const _ as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(nspc_stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).curr as *const _ as usize },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(curr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).class_stack as *const _ as usize },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(class_stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).class_def as *const _ as usize },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(class_def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).func as *const _ as usize },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).class_scope as *const _ as usize },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(class_scope)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).contexts as *const _ as usize },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(contexts)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).context as *const _ as usize },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(context)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).breaks as *const _ as usize },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(breaks)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).key_words as *const _ as usize },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(key_words)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).key_types as *const _ as usize },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(key_types)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).key_values as *const _ as usize },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(key_values)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).deprecated as *const _ as usize },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(deprecated)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).deprecate_level as *const _ as usize },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(deprecate_level)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_void as *const _ as usize },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_void)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_int as *const _ as usize },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_int)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_float as *const _ as usize },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_float)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_time as *const _ as usize },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_dur as *const _ as usize },
            720usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_dur)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_complex as *const _ as usize },
            728usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_complex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_polar as *const _ as usize },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_polar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_vec3 as *const _ as usize },
            744usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_vec3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_vec4 as *const _ as usize },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_vec4)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_null as *const _ as usize },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_null)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_function as *const _ as usize },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_function)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_object as *const _ as usize },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_object)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_array as *const _ as usize },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_array)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_string as *const _ as usize },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_string)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_event as *const _ as usize },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_event)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_ugen as *const _ as usize },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_ugen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_uana as *const _ as usize },
            816usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_uana)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_uanablob as *const _ as usize },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_uanablob)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_shred as *const _ as usize },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_shred)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_io as *const _ as usize },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_io)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_fileio as *const _ as usize },
            848usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_fileio)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_chout as *const _ as usize },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_chout)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_cherr as *const _ as usize },
            864usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_cherr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_thread as *const _ as usize },
            872usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_thread)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_class as *const _ as usize },
            880usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_dac as *const _ as usize },
            888usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_dac)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Env>())).t_adc as *const _ as usize },
            896usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Env),
                "::",
                stringify!(t_adc)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env11set_carrierEP13Chuck_Carrier"]
        pub fn Chuck_Env_set_carrier(this: *mut root::Chuck_Env, carrier: *mut root::Chuck_Carrier);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env2vmEv"]
        pub fn Chuck_Env_vm(this: *mut root::Chuck_Env) -> *mut root::Chuck_VM;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env6globalEv"]
        pub fn Chuck_Env_global(this: *mut root::Chuck_Env) -> *mut root::Chuck_Namespace;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env4userEv"]
        pub fn Chuck_Env_user(this: *mut root::Chuck_Env) -> *mut root::Chuck_Namespace;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env5resetEv"]
        pub fn Chuck_Env_reset(this: *mut root::Chuck_Env);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env19load_user_namespaceEv"]
        pub fn Chuck_Env_load_user_namespace(this: *mut root::Chuck_Env);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env20clear_user_namespaceEv"]
        pub fn Chuck_Env_clear_user_namespace(this: *mut root::Chuck_Env);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env8nspc_topEv"]
        pub fn Chuck_Env_nspc_top(this: *mut root::Chuck_Env) -> *mut root::Chuck_Namespace;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env9class_topEv"]
        pub fn Chuck_Env_class_top(this: *mut root::Chuck_Env) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Env9is_globalEv"]
        pub fn Chuck_Env_is_global(this: *mut root::Chuck_Env) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_EnvC1Ev"]
        pub fn Chuck_Env_Chuck_Env(this: *mut root::Chuck_Env);
    }
    impl Default for Chuck_Env {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Env {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Env {{ m_carrier: {:?}, global_nspc: {:?}, global_context: {:?}, user_nspc: {:?}, nspc_stack: {:?}, curr: {:?}, class_stack: {:?}, class_def: {:?}, func: {:?}, class_scope: {:?}, contexts: {:?}, context: {:?}, breaks: {:?}, key_words: {:?}, key_types: {:?}, key_values: {:?}, deprecated: {:?}, deprecate_level: {:?}, t_void: {:?}, t_int: {:?}, t_float: {:?}, t_time: {:?}, t_dur: {:?}, t_complex: {:?}, t_polar: {:?}, t_vec3: {:?}, t_vec4: {:?}, t_null: {:?}, t_function: {:?}, t_object: {:?}, t_array: {:?}, t_string: {:?}, t_event: {:?}, t_ugen: {:?}, t_uana: {:?}, t_uanablob: {:?}, t_shred: {:?}, t_io: {:?}, t_fileio: {:?}, t_chout: {:?}, t_cherr: {:?}, t_thread: {:?}, t_class: {:?}, t_dac: {:?}, t_adc: {:?} }}" , self . m_carrier , self . global_nspc , self . global_context , self . user_nspc , self . nspc_stack , self . curr , self . class_stack , self . class_def , self . func , self . class_scope , self . contexts , self . context , self . breaks , self . key_words , self . key_types , self . key_values , self . deprecated , self . deprecate_level , self . t_void , self . t_int , self . t_float , self . t_time , self . t_dur , self . t_complex , self . t_polar , self . t_vec3 , self . t_vec4 , self . t_null , self . t_function , self . t_object , self . t_array , self . t_string , self . t_event , self . t_ugen , self . t_uana , self . t_uanablob , self . t_shred , self . t_io , self . t_fileio , self . t_chout , self . t_cherr , self . t_thread , self . t_class , self . t_dac , self . t_adc )
        }
    }
    impl Chuck_Env {
        #[inline]
        pub unsafe fn set_carrier(&mut self, carrier: *mut root::Chuck_Carrier) {
            Chuck_Env_set_carrier(self, carrier)
        }
        #[inline]
        pub unsafe fn vm(&mut self) -> *mut root::Chuck_VM {
            Chuck_Env_vm(self)
        }
        #[inline]
        pub unsafe fn global(&mut self) -> *mut root::Chuck_Namespace {
            Chuck_Env_global(self)
        }
        #[inline]
        pub unsafe fn user(&mut self) -> *mut root::Chuck_Namespace {
            Chuck_Env_user(self)
        }
        #[inline]
        pub unsafe fn reset(&mut self) {
            Chuck_Env_reset(self)
        }
        #[inline]
        pub unsafe fn load_user_namespace(&mut self) {
            Chuck_Env_load_user_namespace(self)
        }
        #[inline]
        pub unsafe fn clear_user_namespace(&mut self) {
            Chuck_Env_clear_user_namespace(self)
        }
        #[inline]
        pub unsafe fn nspc_top(&mut self) -> *mut root::Chuck_Namespace {
            Chuck_Env_nspc_top(self)
        }
        #[inline]
        pub unsafe fn class_top(&mut self) -> *mut root::Chuck_Type {
            Chuck_Env_class_top(self)
        }
        #[inline]
        pub unsafe fn is_global(&mut self) -> libc::c_ulong {
            Chuck_Env_is_global(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Env_Chuck_Env(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_EnvD1Ev"]
        pub fn Chuck_Env_Chuck_Env_destructor(this: *mut root::Chuck_Env);
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_UGen_Info {
        pub _base: root::Chuck_VM_Object,
        pub tick: root::f_tick,
        pub tickf: root::f_tickf,
        pub pmsg: root::f_pmsg,
        pub num_ins: libc::c_ulong,
        pub num_outs: libc::c_ulong,
        pub tock: root::f_tock,
        pub num_ins_ana: libc::c_ulong,
        pub num_outs_ana: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_UGen_Info() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_UGen_Info>(),
            104usize,
            concat!("Size of: ", stringify!(Chuck_UGen_Info))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_UGen_Info>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_UGen_Info))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).tick as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).tickf as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(tickf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).pmsg as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(pmsg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).num_ins as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(num_ins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).num_outs as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(num_outs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).tock as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(tock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen_Info>())).num_ins_ana as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(num_ins_ana)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_UGen_Info>())).num_outs_ana as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen_Info),
                "::",
                stringify!(num_outs_ana)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_UGen_InfoC1Ev"]
        pub fn Chuck_UGen_Info_Chuck_UGen_Info(this: *mut root::Chuck_UGen_Info);
    }
    impl Default for Chuck_UGen_Info {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Chuck_UGen_Info {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_UGen_Info_Chuck_UGen_Info(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct Chuck_Type {
        pub _base: root::Chuck_VM_Object,
        pub xid: root::te_Type,
        pub name: root::std::__cxx11::string,
        pub parent: *mut root::Chuck_Type,
        pub size: libc::c_ulong,
        pub owner: *mut root::Chuck_Namespace,
        pub __bindgen_anon_1: root::Chuck_Type__bindgen_ty_1,
        pub array_depth: libc::c_ulong,
        pub obj_size: libc::c_ulong,
        pub info: *mut root::Chuck_Namespace,
        pub func: *mut root::Chuck_Func,
        pub def: root::a_Class_Def,
        pub ugen_info: *mut root::Chuck_UGen_Info,
        pub is_copy: libc::c_ulong,
        pub is_complete: libc::c_ulong,
        pub has_constructor: libc::c_ulong,
        pub has_destructor: libc::c_ulong,
        pub allocator: root::f_alloc,
        pub doc: root::std::__cxx11::string,
        pub examples: root::std::vector,
        pub ret: root::std::__cxx11::string,
        pub m_env: *mut root::Chuck_Env,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_Type__bindgen_ty_1 {
        pub array_type: *mut root::Chuck_Type,
        pub actual_type: *mut root::Chuck_Type,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Type__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Type__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Type__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Type__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Type__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Type__bindgen_ty_1>())).array_type as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type__bindgen_ty_1),
                "::",
                stringify!(array_type)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Type__bindgen_ty_1>())).actual_type as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type__bindgen_ty_1),
                "::",
                stringify!(actual_type)
            )
        );
    }
    impl Default for Chuck_Type__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Type__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_Type__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_Chuck_Type() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Type>(),
            296usize,
            concat!("Size of: ", stringify!(Chuck_Type))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Type>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Type))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).xid as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).name as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).parent as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).size as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).owner as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).array_depth as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(array_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).obj_size as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(obj_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).info as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(info)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).func as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).def as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).ugen_info as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(ugen_info)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).is_copy as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(is_copy)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).is_complete as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(is_complete)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).has_constructor as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(has_constructor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).has_destructor as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(has_destructor)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).allocator as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(allocator)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).doc as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(doc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).examples as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(examples)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).ret as *const _ as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(ret)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Type>())).m_env as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Type),
                "::",
                stringify!(m_env)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_Type5resetEv"]
        pub fn Chuck_Type_reset(this: *mut root::Chuck_Type);
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK10Chuck_Type4copyEP9Chuck_Env"]
        pub fn Chuck_Type_copy(
            this: *const root::Chuck_Type,
            env: *mut root::Chuck_Env,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_Type3strB5cxx11Ev"]
        pub fn Chuck_Type_str(this: *mut root::Chuck_Type) -> *const root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_Type6c_nameEv"]
        pub fn Chuck_Type_c_name(this: *mut root::Chuck_Type) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_TypeC1EP9Chuck_Env7te_TypeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS_m"]
        pub fn Chuck_Type_Chuck_Type(
            this: *mut root::Chuck_Type,
            env: *mut root::Chuck_Env,
            _id: root::te_Type,
            _n: *const root::std::__cxx11::string,
            _p: *mut root::Chuck_Type,
            _s: libc::c_ulong,
        );
    }
    impl Default for Chuck_Type {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Type {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Type {{ xid: {:?}, name: {:?}, parent: {:?}, size: {:?}, owner: {:?}, __bindgen_anon_1: {:?}, array_depth: {:?}, obj_size: {:?}, info: {:?}, func: {:?}, def: {:?}, ugen_info: {:?}, is_copy: {:?}, is_complete: {:?}, has_constructor: {:?}, has_destructor: {:?}, allocator: {:?}, doc: {:?}, examples: {:?}, ret: {:?}, m_env: {:?} }}" , self . xid , self . name , self . parent , self . size , self . owner , self . __bindgen_anon_1 , self . array_depth , self . obj_size , self . info , self . func , self . def , self . ugen_info , self . is_copy , self . is_complete , self . has_constructor , self . has_destructor , self . allocator , self . doc , self . examples , self . ret , self . m_env )
        }
    }
    impl Chuck_Type {
        #[inline]
        pub unsafe fn reset(&mut self) {
            Chuck_Type_reset(self)
        }
        #[inline]
        pub unsafe fn copy(&self, env: *mut root::Chuck_Env) -> *mut root::Chuck_Type {
            Chuck_Type_copy(self, env)
        }
        #[inline]
        pub unsafe fn str(&mut self) -> *const root::std::__cxx11::string {
            Chuck_Type_str(self)
        }
        #[inline]
        pub unsafe fn c_name(&mut self) -> *const libc::c_char {
            Chuck_Type_c_name(self)
        }
        #[inline]
        pub unsafe fn new(
            env: *mut root::Chuck_Env,
            _id: root::te_Type,
            _n: *const root::std::__cxx11::string,
            _p: *mut root::Chuck_Type,
            _s: libc::c_ulong,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Type_Chuck_Type(&mut __bindgen_tmp, env, _id, _n, _p, _s);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_TypeD1Ev"]
        pub fn Chuck_Type_Chuck_Type_destructor(this: *mut root::Chuck_Type);
    }
    #[repr(C)]
    pub struct Chuck_Value {
        pub _base: root::Chuck_VM_Object,
        pub type_: *mut root::Chuck_Type,
        pub name: root::std::__cxx11::string,
        pub offset: libc::c_ulong,
        pub addr: *mut libc::c_void,
        pub is_const: libc::c_ulong,
        pub is_member: libc::c_ulong,
        pub is_static: libc::c_ulong,
        pub is_context_global: libc::c_ulong,
        pub is_decl_checked: libc::c_ulong,
        pub is_global: libc::c_ulong,
        pub access: libc::c_ulong,
        pub owner: *mut root::Chuck_Namespace,
        pub owner_class: *mut root::Chuck_Type,
        pub func_ref: *mut root::Chuck_Func,
        pub func_num_overloads: libc::c_long,
        pub doc: root::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Value() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Value>(),
            216usize,
            concat!("Size of: ", stringify!(Chuck_Value))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Value>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Value))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).type_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).name as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).offset as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).addr as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_const as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_const)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_member as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_member)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_static as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_static)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Value>())).is_context_global as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_context_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_decl_checked as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_decl_checked)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).is_global as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(is_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).access as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(access)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).owner as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).owner_class as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(owner_class)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).func_ref as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(func_ref)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Value>())).func_num_overloads as *const _ as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(func_num_overloads)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Value>())).doc as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Value),
                "::",
                stringify!(doc)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_ValueC1EP10Chuck_TypeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPvmmP15Chuck_NamespaceS1_m"]
        pub fn Chuck_Value_Chuck_Value(
            this: *mut root::Chuck_Value,
            t: *mut root::Chuck_Type,
            n: *const root::std::__cxx11::string,
            a: *mut libc::c_void,
            c: libc::c_ulong,
            acc: libc::c_ulong,
            o: *mut root::Chuck_Namespace,
            oc: *mut root::Chuck_Type,
            s: libc::c_ulong,
        );
    }
    impl Default for Chuck_Value {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Value {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Value {{ type: {:?}, name: {:?}, offset: {:?}, addr: {:?}, is_const: {:?}, is_member: {:?}, is_static: {:?}, is_context_global: {:?}, is_decl_checked: {:?}, is_global: {:?}, access: {:?}, owner: {:?}, owner_class: {:?}, func_ref: {:?}, func_num_overloads: {:?}, doc: {:?} }}" , self . type_ , self . name , self . offset , self . addr , self . is_const , self . is_member , self . is_static , self . is_context_global , self . is_decl_checked , self . is_global , self . access , self . owner , self . owner_class , self . func_ref , self . func_num_overloads , self . doc )
        }
    }
    impl Chuck_Value {
        #[inline]
        pub unsafe fn new(
            t: *mut root::Chuck_Type,
            n: *const root::std::__cxx11::string,
            a: *mut libc::c_void,
            c: libc::c_ulong,
            acc: libc::c_ulong,
            o: *mut root::Chuck_Namespace,
            oc: *mut root::Chuck_Type,
            s: libc::c_ulong,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Value_Chuck_Value(&mut __bindgen_tmp, t, n, a, c, acc, o, oc, s);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_ValueD1Ev"]
        pub fn Chuck_Value_Chuck_Value_destructor(this: *mut root::Chuck_Value);
    }
    #[repr(C)]
    pub struct Chuck_Func {
        pub _base: root::Chuck_VM_Object,
        pub name: root::std::__cxx11::string,
        pub def: root::a_Func_Def,
        pub code: *mut root::Chuck_VM_Code,
        pub is_member: libc::c_ulong,
        pub vt_index: libc::c_ulong,
        pub value_ref: *mut root::Chuck_Value,
        pub next: *mut root::Chuck_Func,
        pub up: *mut root::Chuck_Value,
        pub doc: root::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Func() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Func>(),
            160usize,
            concat!("Size of: ", stringify!(Chuck_Func))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Func>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Func))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).name as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).def as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(def)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).code as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).is_member as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(is_member)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).vt_index as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(vt_index)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).value_ref as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(value_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).next as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).up as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(up)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Func>())).doc as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Func),
                "::",
                stringify!(doc)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_FuncC1Ev"]
        pub fn Chuck_Func_Chuck_Func(this: *mut root::Chuck_Func);
    }
    impl Default for Chuck_Func {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Func {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Func {{ name: {:?}, def: {:?}, code: {:?}, is_member: {:?}, vt_index: {:?}, value_ref: {:?}, next: {:?}, up: {:?}, doc: {:?} }}" , self . name , self . def , self . code , self . is_member , self . vt_index , self . value_ref , self . next , self . up , self . doc )
        }
    }
    impl Chuck_Func {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Func_Chuck_Func(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_FuncD1Ev"]
        pub fn Chuck_Func_Chuck_Func_destructor(this: *mut root::Chuck_Func);
    }
    extern "C" {
        #[link_name = "\u{1}_Z16type_engine_initP13Chuck_Carrier"]
        pub fn type_engine_init(carrier: *mut root::Chuck_Carrier) -> *mut root::Chuck_Env;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20type_engine_shutdownP9Chuck_Env"]
        pub fn type_engine_shutdown(env: *mut root::Chuck_Env);
    }
    extern "C" {
        #[link_name = "\u{1}_Z24type_engine_load_contextP9Chuck_EnvP13Chuck_Context"]
        pub fn type_engine_load_context(
            env: *mut root::Chuck_Env,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26type_engine_unload_contextP9Chuck_Env"]
        pub fn type_engine_unload_context(env: *mut root::Chuck_Env) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22type_engine_check_progP9Chuck_EnvP10a_Program_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn type_engine_check_prog(
            env: *mut root::Chuck_Env,
            prog: root::a_Program,
            filename: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z24type_engine_make_contextP10a_Program_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn type_engine_make_context(
            prog: root::a_Program,
            filename: *const root::std::__cxx11::string,
        ) -> *mut root::Chuck_Context;
    }
    extern "C" {
        #[link_name = "\u{1}_Z25type_engine_check_contextP9Chuck_EnvP13Chuck_Context10te_HowMuch"]
        pub fn type_engine_check_context(
            env: *mut root::Chuck_Env,
            context: *mut root::Chuck_Context,
            how_much: root::te_HowMuch,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22type_engine_check_stmtP9Chuck_EnvP7a_Stmt_"]
        pub fn type_engine_check_stmt(
            env: *mut root::Chuck_Env,
            stmt: root::a_Stmt,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21type_engine_check_expP9Chuck_EnvP6a_Exp_"]
        pub fn type_engine_check_exp(env: *mut root::Chuck_Env, exp: root::a_Exp)
            -> root::t_CKTYPE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19type_engine_add_dllP9Chuck_EnvP9Chuck_DLLRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn type_engine_add_dll(
            env: *mut root::Chuck_Env,
            dll: *mut root::Chuck_DLL,
            nspc: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20type_engine_add_dll2P9Chuck_EnvP9Chuck_DLLRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn type_engine_add_dll2(
            env: *mut root::Chuck_Env,
            dll: *mut root::Chuck_DLL,
            dest: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z29type_engine_add_class_from_dlP9Chuck_EnvP14Chuck_DL_Class"]
        pub fn type_engine_add_class_from_dl(
            env: *mut root::Chuck_Env,
            c: *mut root::Chuck_DL_Class,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z6equalsP10Chuck_TypeS0_"]
        pub fn equals(lhs: *mut root::Chuck_Type, rhs: *mut root::Chuck_Type) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z3isaP10Chuck_TypeS0_"]
        pub fn isa(lhs: *mut root::Chuck_Type, rhs: *mut root::Chuck_Type) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z6isprimP9Chuck_EnvP10Chuck_Type"]
        pub fn isprim(env: *mut root::Chuck_Env, type_: *mut root::Chuck_Type) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z5isobjP9Chuck_EnvP10Chuck_Type"]
        pub fn isobj(env: *mut root::Chuck_Env, type_: *mut root::Chuck_Type) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z6isfuncP9Chuck_EnvP10Chuck_Type"]
        pub fn isfunc(env: *mut root::Chuck_Env, type_: *mut root::Chuck_Type) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11iskindofintP9Chuck_EnvP10Chuck_Type"]
        pub fn iskindofint(
            env: *mut root::Chuck_Env,
            type_: *mut root::Chuck_Type,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9getkindofP9Chuck_EnvP10Chuck_Type"]
        pub fn getkindof(env: *mut root::Chuck_Env, type_: *mut root::Chuck_Type) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z30type_engine_import_class_beginP9Chuck_EnvP10Chuck_TypeP15Chuck_NamespacePFvP12Chuck_ObjectPvP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEEPFvS6_S9_SB_SF_EPKc"]
        pub fn type_engine_import_class_begin(
            env: *mut root::Chuck_Env,
            type_: *mut root::Chuck_Type,
            where_: *mut root::Chuck_Namespace,
            pre_ctor: root::f_ctor,
            dtor: root::f_dtor,
            doc: *const libc::c_char,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z30type_engine_import_class_beginP9Chuck_EnvPKcS2_P15Chuck_NamespacePFvP12Chuck_ObjectPvP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEEPFvS6_S9_SB_SF_ES2_"]
        pub fn type_engine_import_class_begin1(
            env: *mut root::Chuck_Env,
            name: *const libc::c_char,
            parent: *const libc::c_char,
            where_: *mut root::Chuck_Namespace,
            pre_ctor: root::f_ctor,
            dtor: root::f_dtor,
            doc: *const libc::c_char,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z29type_engine_import_ugen_beginP9Chuck_EnvPKcS2_P15Chuck_NamespacePFvP12Chuck_ObjectPvP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEEPFvS6_S9_SB_SF_EPFmS6_fPfSF_EPFmS6_SK_SK_mSF_EPFmS6_S2_S7_S9_SB_SF_EmmS2_"]
        pub fn type_engine_import_ugen_begin(
            env: *mut root::Chuck_Env,
            name: *const libc::c_char,
            parent: *const libc::c_char,
            where_: *mut root::Chuck_Namespace,
            pre_ctor: root::f_ctor,
            dtor: root::f_dtor,
            tick: root::f_tick,
            tickf: root::f_tickf,
            pmsg: root::f_pmsg,
            num_ins: libc::c_ulong,
            num_outs: libc::c_ulong,
            doc: *const libc::c_char,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z29type_engine_import_ugen_beginP9Chuck_EnvPKcS2_P15Chuck_NamespacePFvP12Chuck_ObjectPvP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEEPFvS6_S9_SB_SF_EPFmS6_fPfSF_EPFmS6_S2_S7_S9_SB_SF_EmmS2_"]
        pub fn type_engine_import_ugen_begin1(
            env: *mut root::Chuck_Env,
            name: *const libc::c_char,
            parent: *const libc::c_char,
            where_: *mut root::Chuck_Namespace,
            pre_ctor: root::f_ctor,
            dtor: root::f_dtor,
            tick: root::f_tick,
            pmsg: root::f_pmsg,
            num_ins: libc::c_ulong,
            num_outs: libc::c_ulong,
            doc: *const libc::c_char,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z29type_engine_import_ugen_beginP9Chuck_EnvPKcS2_P15Chuck_NamespacePFvP12Chuck_ObjectPvP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEEPFvS6_S9_SB_SF_EPFmS6_fPfSF_EPFmS6_S2_S7_S9_SB_SF_ES2_"]
        pub fn type_engine_import_ugen_begin2(
            env: *mut root::Chuck_Env,
            name: *const libc::c_char,
            parent: *const libc::c_char,
            where_: *mut root::Chuck_Namespace,
            pre_ctor: root::f_ctor,
            dtor: root::f_dtor,
            tick: root::f_tick,
            pmsg: root::f_pmsg,
            doc: *const libc::c_char,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z29type_engine_import_uana_beginP9Chuck_EnvPKcS2_P15Chuck_NamespacePFvP12Chuck_ObjectPvP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEEPFvS6_S9_SB_SF_EPFmS6_fPfSF_EPFmS6_P10Chuck_UAnaP19Chuck_UAnaBlobProxySF_EPFmS6_S2_S7_S9_SB_SF_EmmmmS2_"]
        pub fn type_engine_import_uana_begin(
            env: *mut root::Chuck_Env,
            name: *const libc::c_char,
            parent: *const libc::c_char,
            where_: *mut root::Chuck_Namespace,
            pre_ctor: root::f_ctor,
            dtor: root::f_dtor,
            tick: root::f_tick,
            tock: root::f_tock,
            pmsg: root::f_pmsg,
            num_ins: libc::c_ulong,
            num_outs: libc::c_ulong,
            num_ins_ana: libc::c_ulong,
            num_outs_ana: libc::c_ulong,
            doc: *const libc::c_char,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23type_engine_import_mfunP9Chuck_EnvP13Chuck_DL_Func"]
        pub fn type_engine_import_mfun(
            env: *mut root::Chuck_Env,
            mfun: *mut root::Chuck_DL_Func,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23type_engine_import_sfunP9Chuck_EnvP13Chuck_DL_Func"]
        pub fn type_engine_import_sfun(
            env: *mut root::Chuck_Env,
            sfun: *mut root::Chuck_DL_Func,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23type_engine_import_mvarP9Chuck_EnvPKcS2_mS2_"]
        pub fn type_engine_import_mvar(
            env: *mut root::Chuck_Env,
            type_: *const libc::c_char,
            name: *const libc::c_char,
            is_const: libc::c_ulong,
            doc: *const libc::c_char,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23type_engine_import_svarP9Chuck_EnvPKcS2_mmS2_"]
        pub fn type_engine_import_svar(
            env: *mut root::Chuck_Env,
            type_: *const libc::c_char,
            name: *const libc::c_char,
            is_const: libc::c_ulong,
            addr: libc::c_ulong,
            doc: *const libc::c_char,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z28type_engine_import_ugen_ctrlP9Chuck_EnvPKcS2_PFvP12Chuck_ObjectPvP15Chuck_DL_ReturnP8Chuck_VMP14Chuck_VM_ShredPKN12Chuck_DL_Api3ApiEEmm"]
        pub fn type_engine_import_ugen_ctrl(
            env: *mut root::Chuck_Env,
            type_: *const libc::c_char,
            name: *const libc::c_char,
            ctrl: root::f_ctrl,
            write: libc::c_ulong,
            read: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z25type_engine_import_add_exP9Chuck_EnvPKc"]
        pub fn type_engine_import_add_ex(
            env: *mut root::Chuck_Env,
            ex: *const libc::c_char,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z28type_engine_import_class_endP9Chuck_Env"]
        pub fn type_engine_import_class_end(env: *mut root::Chuck_Env) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z30type_engine_register_deprecateP9Chuck_EnvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
        pub fn type_engine_register_deprecate(
            env: *mut root::Chuck_Env,
            former: *const root::std::__cxx11::string,
            latter: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26type_engine_check_reservedP9Chuck_EnvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
        pub fn type_engine_check_reserved(
            env: *mut root::Chuck_Env,
            xid: *const root::std::__cxx11::string,
            pos: libc::c_int,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26type_engine_check_reservedP9Chuck_EnvP9S_Symbol_i"]
        pub fn type_engine_check_reserved1(
            env: *mut root::Chuck_Env,
            xid: root::S_Symbol,
            pos: libc::c_int,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z27type_engine_check_primitiveP9Chuck_EnvP10Chuck_Type"]
        pub fn type_engine_check_primitive(
            env: *mut root::Chuck_Env,
            type_: *mut root::Chuck_Type,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23type_engine_compat_funcP11a_Func_Def_S0_iRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm"]
        pub fn type_engine_compat_func(
            lhs: root::a_Func_Def,
            rhs: root::a_Func_Def,
            pos: libc::c_int,
            err: *mut root::std::__cxx11::string,
            print: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z25type_engine_get_deprecateP9Chuck_EnvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS6_"]
        pub fn type_engine_get_deprecate(
            env: *mut root::Chuck_Env,
            from: *const root::std::__cxx11::string,
            to: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z27type_engine_find_common_ancP10Chuck_TypeS0_"]
        pub fn type_engine_find_common_anc(
            lhs: *mut root::Chuck_Type,
            rhs: *mut root::Chuck_Type,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21type_engine_find_typeP9Chuck_EnvP10a_Id_List_"]
        pub fn type_engine_find_type(
            env: *mut root::Chuck_Env,
            path: root::a_Id_List,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22type_engine_find_valueP10Chuck_TypeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn type_engine_find_value(
            type_: *mut root::Chuck_Type,
            xid: *const root::std::__cxx11::string,
        ) -> *mut root::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22type_engine_find_valueP10Chuck_TypeP9S_Symbol_"]
        pub fn type_engine_find_value1(
            type_: *mut root::Chuck_Type,
            xid: root::S_Symbol,
        ) -> *mut root::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22type_engine_find_valueP9Chuck_EnvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmi"]
        pub fn type_engine_find_value2(
            env: *mut root::Chuck_Env,
            xid: *const root::std::__cxx11::string,
            climb: libc::c_ulong,
            linepos: libc::c_int,
        ) -> *mut root::Chuck_Value;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21type_engine_find_nspcP9Chuck_EnvP10a_Id_List_"]
        pub fn type_engine_find_nspc(
            env: *mut root::Chuck_Env,
            path: root::a_Id_List,
        ) -> *mut root::Chuck_Namespace;
    }
    extern "C" {
        #[doc = " spencer: added this into function to provide the same logic path"]
        #[doc = " for type_engine_check_exp_decl() and ck_add_mvar() when they determine"]
        #[doc = " offsets for mvars -- added 1.3.0.0"]
        #[link_name = "\u{1}_Z23type_engine_next_offsetmP10Chuck_Type"]
        pub fn type_engine_next_offset(
            current_offset: libc::c_ulong,
            type_: *mut root::Chuck_Type,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12verify_arrayP12a_Array_Sub_"]
        pub fn verify_array(array: root::a_Array_Sub) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14new_array_typeP9Chuck_EnvP10Chuck_TypemS2_P15Chuck_Namespace"]
        pub fn new_array_type(
            env: *mut root::Chuck_Env,
            array_parent: *mut root::Chuck_Type,
            depth: libc::c_ulong,
            base_type: *mut root::Chuck_Type,
            owner_nspc: *mut root::Chuck_Namespace,
        ) -> *mut root::Chuck_Type;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9type_pathP10a_Id_List_"]
        pub fn type_path(path: root::a_Id_List) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z8str2listRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn str2list(path: *const root::std::__cxx11::string) -> root::a_Id_List;
    }
    extern "C" {
        #[link_name = "\u{1}_Z8str2listRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERm"]
        pub fn str2list1(
            path: *const root::std::__cxx11::string,
            is_array: *mut libc::c_ulong,
        ) -> root::a_Id_List;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11howmuch2str10te_HowMuch"]
        pub fn howmuch2str(how_much: root::te_HowMuch) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10escape_strPci"]
        pub fn escape_str(str_lit: *mut libc::c_char, linepos: libc::c_int) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z8str2charPKci"]
        pub fn str2char(char_lit: *const libc::c_char, linepos: libc::c_int) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22type_engine_scan0_progP9Chuck_EnvP10a_Program_10te_HowMuch"]
        pub fn type_engine_scan0_prog(
            env: *mut root::Chuck_Env,
            prog: root::a_Program,
            val: root::te_HowMuch,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z27type_engine_scan0_class_defP9Chuck_EnvP12a_Class_Def_"]
        pub fn type_engine_scan0_class_def(
            env: *mut root::Chuck_Env,
            def: root::a_Class_Def,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22type_engine_scan1_progP9Chuck_EnvP10a_Program_10te_HowMuch"]
        pub fn type_engine_scan1_prog(
            env: *mut root::Chuck_Env,
            prog: root::a_Program,
            val: root::te_HowMuch,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z27type_engine_scan1_class_defP9Chuck_EnvP12a_Class_Def_"]
        pub fn type_engine_scan1_class_def(
            env: *mut root::Chuck_Env,
            def: root::a_Class_Def,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26type_engine_scan1_func_defP9Chuck_EnvP11a_Func_Def_"]
        pub fn type_engine_scan1_func_def(
            env: *mut root::Chuck_Env,
            def: root::a_Func_Def,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26type_engine_scan1_exp_declP9Chuck_EnvP11a_Exp_Decl_"]
        pub fn type_engine_scan1_exp_decl(
            env: *mut root::Chuck_Env,
            decl: root::a_Exp_Decl,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22type_engine_scan2_progP9Chuck_EnvP10a_Program_10te_HowMuch"]
        pub fn type_engine_scan2_prog(
            env: *mut root::Chuck_Env,
            prog: root::a_Program,
            val: root::te_HowMuch,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z27type_engine_scan2_class_defP9Chuck_EnvP12a_Class_Def_"]
        pub fn type_engine_scan2_class_def(
            env: *mut root::Chuck_Env,
            def: root::a_Class_Def,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26type_engine_scan2_func_defP9Chuck_EnvP11a_Func_Def_"]
        pub fn type_engine_scan2_func_def(
            env: *mut root::Chuck_Env,
            def: root::a_Func_Def,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26type_engine_scan2_exp_declP9Chuck_EnvP11a_Exp_Decl_"]
        pub fn type_engine_scan2_exp_decl(
            env: *mut root::Chuck_Env,
            decl: root::a_Exp_Decl,
        ) -> libc::c_ulong;
    }
    #[repr(C)]
    pub struct Chuck_Local {
        pub name: root::std::__cxx11::string,
        pub size: libc::c_ulong,
        pub is_ref: libc::c_ulong,
        pub is_obj: libc::c_ulong,
        pub is_global: libc::c_ulong,
        pub offset: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Local() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Local>(),
            72usize,
            concat!("Size of: ", stringify!(Chuck_Local))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Local>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Local))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).size as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).is_ref as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(is_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).is_obj as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(is_obj)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).is_global as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(is_global)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Local>())).offset as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Local),
                "::",
                stringify!(offset)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_LocalC1Ev"]
        pub fn Chuck_Local_Chuck_Local(this: *mut root::Chuck_Local);
    }
    impl Default for Chuck_Local {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Local {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Local {{ name: {:?}, size: {:?}, is_ref: {:?}, is_obj: {:?}, is_global: {:?}, offset: {:?} }}" , self . name , self . size , self . is_ref , self . is_obj , self . is_global , self . offset )
        }
    }
    impl Chuck_Local {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Local_Chuck_Local(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct Chuck_Frame {
        pub name: root::std::__cxx11::string,
        pub curr_offset: libc::c_ulong,
        pub num_access: libc::c_ulong,
        pub stack: root::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Frame() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Frame>(),
            72usize,
            concat!("Size of: ", stringify!(Chuck_Frame))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Frame>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Frame))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Frame>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Frame),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Frame>())).curr_offset as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Frame),
                "::",
                stringify!(curr_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Frame>())).num_access as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Frame),
                "::",
                stringify!(num_access)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Frame>())).stack as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Frame),
                "::",
                stringify!(stack)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Frame10push_scopeEv"]
        pub fn Chuck_Frame_push_scope(this: *mut root::Chuck_Frame);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Frame11alloc_localEmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmmm"]
        pub fn Chuck_Frame_alloc_local(
            this: *mut root::Chuck_Frame,
            size: libc::c_ulong,
            name: *const root::std::__cxx11::string,
            is_ref: libc::c_ulong,
            is_obj: libc::c_ulong,
            is_global: libc::c_ulong,
        ) -> *mut root::Chuck_Local;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK11Chuck_Frame9get_scopeERSt6vectorIP11Chuck_LocalSaIS2_EE"]
        pub fn Chuck_Frame_get_scope(this: *const root::Chuck_Frame, out: *mut root::std::vector);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Frame9pop_scopeERSt6vectorIP11Chuck_LocalSaIS2_EE"]
        pub fn Chuck_Frame_pop_scope(this: *mut root::Chuck_Frame, out: *mut root::std::vector);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_FrameC1Ev"]
        pub fn Chuck_Frame_Chuck_Frame(this: *mut root::Chuck_Frame);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_FrameD1Ev"]
        pub fn Chuck_Frame_Chuck_Frame_destructor(this: *mut root::Chuck_Frame);
    }
    impl Default for Chuck_Frame {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Frame {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Frame {{ name: {:?}, curr_offset: {:?}, num_access: {:?}, stack: {:?} }}",
                self.name, self.curr_offset, self.num_access, self.stack
            )
        }
    }
    impl Chuck_Frame {
        #[inline]
        pub unsafe fn push_scope(&mut self) {
            Chuck_Frame_push_scope(self)
        }
        #[inline]
        pub unsafe fn alloc_local(
            &mut self,
            size: libc::c_ulong,
            name: *const root::std::__cxx11::string,
            is_ref: libc::c_ulong,
            is_obj: libc::c_ulong,
            is_global: libc::c_ulong,
        ) -> *mut root::Chuck_Local {
            Chuck_Frame_alloc_local(self, size, name, is_ref, is_obj, is_global)
        }
        #[inline]
        pub unsafe fn get_scope(&self, out: *mut root::std::vector) {
            Chuck_Frame_get_scope(self, out)
        }
        #[inline]
        pub unsafe fn pop_scope(&mut self, out: *mut root::std::vector) {
            Chuck_Frame_pop_scope(self, out)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Frame_Chuck_Frame(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_Frame_Chuck_Frame_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Instr {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Instr_Goto {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct Chuck_Code {
        pub name: root::std::__cxx11::string,
        pub stack_depth: libc::c_ulong,
        pub need_this: libc::c_ulong,
        pub frame: *mut root::Chuck_Frame,
        pub code: root::std::vector,
        pub stack_cont: root::std::vector,
        pub stack_break: root::std::vector,
        pub stack_return: root::std::vector,
        pub filename: root::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Code() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Code>(),
            184usize,
            concat!("Size of: ", stringify!(Chuck_Code))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Code>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Code))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).stack_depth as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(stack_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).need_this as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(need_this)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).frame as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(frame)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).code as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).stack_cont as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(stack_cont)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).stack_break as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(stack_break)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).stack_return as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(stack_return)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Code>())).filename as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Code),
                "::",
                stringify!(filename)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_CodeC1Ev"]
        pub fn Chuck_Code_Chuck_Code(this: *mut root::Chuck_Code);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_CodeD1Ev"]
        pub fn Chuck_Code_Chuck_Code_destructor(this: *mut root::Chuck_Code);
    }
    impl Default for Chuck_Code {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Code {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Code {{ name: {:?}, stack_depth: {:?}, need_this: {:?}, frame: {:?}, code: {:?}, stack_cont: {:?}, stack_break: {:?}, stack_return: {:?}, filename: {:?} }}" , self . name , self . stack_depth , self . need_this , self . frame , self . code , self . stack_cont , self . stack_break , self . stack_return , self . filename )
        }
    }
    impl Chuck_Code {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Code_Chuck_Code(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_Code_Chuck_Code_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_Emitter {
        pub _base: root::Chuck_VM_Object,
        pub env: *mut root::Chuck_Env,
        pub code: *mut root::Chuck_Code,
        pub context: *mut root::Chuck_Context,
        pub nspc: *mut root::Chuck_Namespace,
        pub func: *mut root::Chuck_Func,
        pub stack: root::std::vector,
        pub locals: root::std::vector,
        pub dump: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Emitter() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Emitter>(),
            136usize,
            concat!("Size of: ", stringify!(Chuck_Emitter))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Emitter>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Emitter))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).env as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(env)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).code as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).context as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(context)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).nspc as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(nspc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).func as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(func)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).stack as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).locals as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(locals)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Emitter>())).dump as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Emitter),
                "::",
                stringify!(dump)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Emitter6appendEP11Chuck_Instr"]
        pub fn Chuck_Emitter_append(this: *mut root::Chuck_Emitter, instr: *mut root::Chuck_Instr);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Emitter10next_indexEv"]
        pub fn Chuck_Emitter_next_index(this: *mut root::Chuck_Emitter) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Emitter10push_scopeEv"]
        pub fn Chuck_Emitter_push_scope(this: *mut root::Chuck_Emitter);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Emitter11alloc_localEmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmmm"]
        pub fn Chuck_Emitter_alloc_local(
            this: *mut root::Chuck_Emitter,
            size: libc::c_ulong,
            name: *const root::std::__cxx11::string,
            is_ref: libc::c_ulong,
            is_obj: libc::c_ulong,
            is_global: libc::c_ulong,
        ) -> *mut root::Chuck_Local;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Emitter15addref_on_scopeEv"]
        pub fn Chuck_Emitter_addref_on_scope(this: *mut root::Chuck_Emitter);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Emitter9pop_scopeEv"]
        pub fn Chuck_Emitter_pop_scope(this: *mut root::Chuck_Emitter);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_Emitter8find_durERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPd"]
        pub fn Chuck_Emitter_find_dur(
            this: *mut root::Chuck_Emitter,
            name: *const root::std::__cxx11::string,
            out: *mut f64,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_EmitterC1Ev"]
        pub fn Chuck_Emitter_Chuck_Emitter(this: *mut root::Chuck_Emitter);
    }
    impl Default for Chuck_Emitter {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Emitter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Emitter {{ env: {:?}, code: {:?}, context: {:?}, nspc: {:?}, func: {:?}, stack: {:?}, locals: {:?}, dump: {:?} }}" , self . env , self . code , self . context , self . nspc , self . func , self . stack , self . locals , self . dump )
        }
    }
    impl ::std::cmp::PartialEq for Chuck_Emitter {
        fn eq(&self, other: &Chuck_Emitter) -> bool {
            self._base == other._base
                && self.env == other.env
                && self.code == other.code
                && self.context == other.context
                && self.nspc == other.nspc
                && self.func == other.func
                && self.stack == other.stack
                && self.locals == other.locals
                && self.dump == other.dump
        }
    }
    impl Chuck_Emitter {
        #[inline]
        pub unsafe fn append(&mut self, instr: *mut root::Chuck_Instr) {
            Chuck_Emitter_append(self, instr)
        }
        #[inline]
        pub unsafe fn next_index(&mut self) -> libc::c_ulong {
            Chuck_Emitter_next_index(self)
        }
        #[inline]
        pub unsafe fn push_scope(&mut self) {
            Chuck_Emitter_push_scope(self)
        }
        #[inline]
        pub unsafe fn alloc_local(
            &mut self,
            size: libc::c_ulong,
            name: *const root::std::__cxx11::string,
            is_ref: libc::c_ulong,
            is_obj: libc::c_ulong,
            is_global: libc::c_ulong,
        ) -> *mut root::Chuck_Local {
            Chuck_Emitter_alloc_local(self, size, name, is_ref, is_obj, is_global)
        }
        #[inline]
        pub unsafe fn addref_on_scope(&mut self) {
            Chuck_Emitter_addref_on_scope(self)
        }
        #[inline]
        pub unsafe fn pop_scope(&mut self) {
            Chuck_Emitter_pop_scope(self)
        }
        #[inline]
        pub unsafe fn find_dur(
            &mut self,
            name: *const root::std::__cxx11::string,
            out: *mut f64,
        ) -> libc::c_ulong {
            Chuck_Emitter_find_dur(self, name, out)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Emitter_Chuck_Emitter(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_EmitterD1Ev"]
        pub fn Chuck_Emitter_Chuck_Emitter_destructor(this: *mut root::Chuck_Emitter);
    }
    extern "C" {
        #[link_name = "\u{1}_Z16emit_engine_initP9Chuck_Env"]
        pub fn emit_engine_init(env: *mut root::Chuck_Env) -> *mut root::Chuck_Emitter;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20emit_engine_shutdownRP13Chuck_Emitter"]
        pub fn emit_engine_shutdown(emit: *mut *mut root::Chuck_Emitter) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21emit_engine_emit_progP13Chuck_EmitterP10a_Program_10te_HowMuch"]
        pub fn emit_engine_emit_prog(
            emit: *mut root::Chuck_Emitter,
            prog: root::a_Program,
            how_much: root::te_HowMuch,
        ) -> *mut root::Chuck_VM_Code;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12emit_to_codeP10Chuck_CodeP13Chuck_VM_Codem"]
        pub fn emit_to_code(
            in_: *mut root::Chuck_Code,
            out: *mut root::Chuck_VM_Code,
            dump: libc::c_ulong,
        ) -> *mut root::Chuck_VM_Code;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20emit_engine_addr_mapP13Chuck_EmitterP14Chuck_VM_Shred"]
        pub fn emit_engine_addr_map(
            emit: *mut root::Chuck_Emitter,
            shred: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19emit_engine_resolvev"]
        pub fn emit_engine_resolve() -> libc::c_ulong;
    }
    #[repr(C)]
    #[derive(Debug, PartialOrd, PartialEq)]
    pub struct Chuck_UGen {
        pub _base: root::Chuck_Object,
        pub tick: root::f_tick,
        pub tickf: root::f_tickf,
        pub pmsg: root::f_pmsg,
        pub m_multi_chan: *mut *mut root::Chuck_UGen,
        pub m_multi_chan_size: libc::c_ulong,
        pub m_num_ins: libc::c_ulong,
        pub m_num_outs: libc::c_ulong,
        pub m_src_list: *mut *mut root::Chuck_UGen,
        pub m_src_cap: libc::c_ulong,
        pub m_num_src: libc::c_ulong,
        pub m_dest_list: *mut *mut root::Chuck_UGen,
        pub m_dest_cap: libc::c_ulong,
        pub m_num_dest: libc::c_ulong,
        pub m_src_uana_list: *mut *mut root::Chuck_UGen,
        pub m_src_uana_cap: libc::c_ulong,
        pub m_num_uana_src: libc::c_ulong,
        pub m_dest_uana_list: *mut *mut root::Chuck_UGen,
        pub m_dest_uana_cap: libc::c_ulong,
        pub m_num_uana_dest: libc::c_ulong,
        pub m_max_src: libc::c_ulong,
        pub m_time: f64,
        pub m_valid: libc::c_ulong,
        pub m_use_next: libc::c_ulong,
        pub m_sum: f32,
        pub m_current: f32,
        pub m_next: f32,
        pub m_last: f32,
        pub m_gain: f32,
        pub m_pan: f32,
        pub m_op: libc::c_long,
        pub m_max_block_size: libc::c_long,
        pub m_multi_in_v: *mut f32,
        pub m_multi_out_v: *mut f32,
        pub m_is_subgraph: libc::c_ulong,
        pub m_inlet: *mut root::Chuck_UGen,
        pub m_outlet: *mut root::Chuck_UGen,
        pub m_sum_v: *mut f32,
        pub m_current_v: *mut f32,
        pub shred: *mut root::Chuck_VM_Shred,
        pub vm: *mut root::Chuck_VM,
        pub owner: *mut root::Chuck_UGen,
        pub m_is_uana: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_UGen() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_UGen>(),
            384usize,
            concat!("Size of: ", stringify!(Chuck_UGen))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_UGen>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_UGen))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).tick as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(tick)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).tickf as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(tickf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).pmsg as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(pmsg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_multi_chan as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_multi_chan)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_UGen>())).m_multi_chan_size as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_multi_chan_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_ins as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_ins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_outs as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_outs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_src_list as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_src_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_src_cap as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_src_cap)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_src as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_src)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_dest_list as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_dest_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_dest_cap as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_dest_cap)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_dest as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_dest)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_src_uana_list as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_src_uana_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_src_uana_cap as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_src_uana_cap)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_uana_src as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_uana_src)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_dest_uana_list as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_dest_uana_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_dest_uana_cap as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_dest_uana_cap)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_num_uana_dest as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_num_uana_dest)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_max_src as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_max_src)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_time as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_valid as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_use_next as *const _ as usize },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_use_next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_sum as *const _ as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_sum)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_current as *const _ as usize },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_current)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_next as *const _ as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_last as *const _ as usize },
            268usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_last)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_gain as *const _ as usize },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_gain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_pan as *const _ as usize },
            276usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_pan)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_op as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_op)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_max_block_size as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_max_block_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_multi_in_v as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_multi_in_v)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_multi_out_v as *const _ as usize },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_multi_out_v)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_is_subgraph as *const _ as usize },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_is_subgraph)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_inlet as *const _ as usize },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_inlet)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_outlet as *const _ as usize },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_outlet)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_sum_v as *const _ as usize },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_sum_v)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_current_v as *const _ as usize },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_current_v)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).shred as *const _ as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(shred)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).vm as *const _ as usize },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).owner as *const _ as usize },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UGen>())).m_is_uana as *const _ as usize },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UGen),
                "::",
                stringify!(m_is_uana)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen3addEPS_m"]
        pub fn Chuck_UGen_add(
            this: *mut root::Chuck_UGen,
            src: *mut root::Chuck_UGen,
            isUpChuck: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen6removeEPS_"]
        pub fn Chuck_UGen_remove(
            this: *mut root::Chuck_UGen,
            src: *mut root::Chuck_UGen,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen10remove_allEv"]
        pub fn Chuck_UGen_remove_all(this: *mut root::Chuck_UGen);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen11set_max_srcEm"]
        pub fn Chuck_UGen_set_max_src(
            this: *mut root::Chuck_UGen,
            num: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen11get_num_srcEv"]
        pub fn Chuck_UGen_get_num_src(this: *mut root::Chuck_UGen) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen17is_connected_fromEPS_"]
        pub fn Chuck_UGen_is_connected_from(
            this: *mut root::Chuck_UGen,
            src: *mut root::Chuck_UGen,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen10disconnectEm"]
        pub fn Chuck_UGen_disconnect(
            this: *mut root::Chuck_UGen,
            recursive: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen11system_tickEd"]
        pub fn Chuck_UGen_system_tick(this: *mut root::Chuck_UGen, now: f64) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen13system_tick_vEdm"]
        pub fn Chuck_UGen_system_tick_v(
            this: *mut root::Chuck_UGen,
            now: f64,
            numFrames: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen7alloc_vEm"]
        pub fn Chuck_UGen_alloc_v(
            this: *mut root::Chuck_UGen,
            size: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen8src_chanEm"]
        pub fn Chuck_UGen_src_chan(
            this: *mut root::Chuck_UGen,
            chan: libc::c_ulong,
        ) -> *mut root::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen16dst_for_src_chanEm"]
        pub fn Chuck_UGen_dst_for_src_chan(
            this: *mut root::Chuck_UGen,
            chan: libc::c_ulong,
        ) -> *mut root::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen6add_byEPS_m"]
        pub fn Chuck_UGen_add_by(
            this: *mut root::Chuck_UGen,
            dest: *mut root::Chuck_UGen,
            isUpChuck: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen9remove_byEPS_"]
        pub fn Chuck_UGen_remove_by(this: *mut root::Chuck_UGen, dest: *mut root::Chuck_UGen);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen16alloc_multi_chanEmm"]
        pub fn Chuck_UGen_alloc_multi_chan(
            this: *mut root::Chuck_UGen,
            num_ins: libc::c_ulong,
            num_outs: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen13init_subgraphEv"]
        pub fn Chuck_UGen_init_subgraph(this: *mut root::Chuck_UGen);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen5inletEv"]
        pub fn Chuck_UGen_inlet(this: *mut root::Chuck_UGen) -> *mut root::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen6outletEv"]
        pub fn Chuck_UGen_outlet(this: *mut root::Chuck_UGen) -> *mut root::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGenC1Ev"]
        pub fn Chuck_UGen_Chuck_UGen(this: *mut root::Chuck_UGen);
    }
    impl Default for Chuck_UGen {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Chuck_UGen {
        #[inline]
        pub unsafe fn add(
            &mut self,
            src: *mut root::Chuck_UGen,
            isUpChuck: libc::c_ulong,
        ) -> libc::c_ulong {
            Chuck_UGen_add(self, src, isUpChuck)
        }
        #[inline]
        pub unsafe fn remove(&mut self, src: *mut root::Chuck_UGen) -> libc::c_ulong {
            Chuck_UGen_remove(self, src)
        }
        #[inline]
        pub unsafe fn remove_all(&mut self) {
            Chuck_UGen_remove_all(self)
        }
        #[inline]
        pub unsafe fn set_max_src(&mut self, num: libc::c_ulong) -> libc::c_ulong {
            Chuck_UGen_set_max_src(self, num)
        }
        #[inline]
        pub unsafe fn get_num_src(&mut self) -> libc::c_ulong {
            Chuck_UGen_get_num_src(self)
        }
        #[inline]
        pub unsafe fn is_connected_from(&mut self, src: *mut root::Chuck_UGen) -> libc::c_ulong {
            Chuck_UGen_is_connected_from(self, src)
        }
        #[inline]
        pub unsafe fn disconnect(&mut self, recursive: libc::c_ulong) -> libc::c_ulong {
            Chuck_UGen_disconnect(self, recursive)
        }
        #[inline]
        pub unsafe fn system_tick(&mut self, now: f64) -> libc::c_ulong {
            Chuck_UGen_system_tick(self, now)
        }
        #[inline]
        pub unsafe fn system_tick_v(
            &mut self,
            now: f64,
            numFrames: libc::c_ulong,
        ) -> libc::c_ulong {
            Chuck_UGen_system_tick_v(self, now, numFrames)
        }
        #[inline]
        pub unsafe fn alloc_v(&mut self, size: libc::c_ulong) -> libc::c_ulong {
            Chuck_UGen_alloc_v(self, size)
        }
        #[inline]
        pub unsafe fn src_chan(&mut self, chan: libc::c_ulong) -> *mut root::Chuck_UGen {
            Chuck_UGen_src_chan(self, chan)
        }
        #[inline]
        pub unsafe fn dst_for_src_chan(&mut self, chan: libc::c_ulong) -> *mut root::Chuck_UGen {
            Chuck_UGen_dst_for_src_chan(self, chan)
        }
        #[inline]
        pub unsafe fn add_by(&mut self, dest: *mut root::Chuck_UGen, isUpChuck: libc::c_ulong) {
            Chuck_UGen_add_by(self, dest, isUpChuck)
        }
        #[inline]
        pub unsafe fn remove_by(&mut self, dest: *mut root::Chuck_UGen) {
            Chuck_UGen_remove_by(self, dest)
        }
        #[inline]
        pub unsafe fn alloc_multi_chan(&mut self, num_ins: libc::c_ulong, num_outs: libc::c_ulong) {
            Chuck_UGen_alloc_multi_chan(self, num_ins, num_outs)
        }
        #[inline]
        pub unsafe fn init_subgraph(&mut self) {
            Chuck_UGen_init_subgraph(self)
        }
        #[inline]
        pub unsafe fn inlet(&mut self) -> *mut root::Chuck_UGen {
            Chuck_UGen_inlet(self)
        }
        #[inline]
        pub unsafe fn outlet(&mut self) -> *mut root::Chuck_UGen {
            Chuck_UGen_outlet(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_UGen_Chuck_UGen(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGenD1Ev"]
        pub fn Chuck_UGen_Chuck_UGen_destructor(this: *mut root::Chuck_UGen);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen4initEv"]
        pub fn Chuck_UGen_init(this: *mut libc::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UGen4doneEv"]
        pub fn Chuck_UGen_done(this: *mut libc::c_void);
    }
    #[repr(C)]
    #[derive(Debug, PartialOrd, PartialEq)]
    pub struct Chuck_UAna {
        pub _base: root::Chuck_UGen,
        pub tock: root::f_tock,
        pub m_uana_time: f64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_UAna() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_UAna>(),
            400usize,
            concat!("Size of: ", stringify!(Chuck_UAna))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_UAna>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_UAna))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UAna>())).tock as *const _ as usize },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UAna),
                "::",
                stringify!(tock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_UAna>())).m_uana_time as *const _ as usize },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_UAna),
                "::",
                stringify!(m_uana_time)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UAna11system_tockEd"]
        pub fn Chuck_UAna_system_tock(this: *mut root::Chuck_UAna, now: f64) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UAna20is_up_connected_fromEPS_"]
        pub fn Chuck_UAna_is_up_connected_from(
            this: *mut root::Chuck_UAna,
            src: *mut root::Chuck_UAna,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK10Chuck_UAna16numIncomingUAnaeEv"]
        pub fn Chuck_UAna_numIncomingUAnae(this: *const root::Chuck_UAna) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK10Chuck_UAna15getIncomingUAnaEm"]
        pub fn Chuck_UAna_getIncomingUAna(
            this: *const root::Chuck_UAna,
            index: libc::c_ulong,
        ) -> *mut root::Chuck_UAna;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK10Chuck_UAna15getIncomingBlobEm"]
        pub fn Chuck_UAna_getIncomingBlob(
            this: *const root::Chuck_UAna,
            index: libc::c_ulong,
        ) -> *mut root::Chuck_UAnaBlobProxy;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK10Chuck_UAna9blobProxyEv"]
        pub fn Chuck_UAna_blobProxy(
            this: *const root::Chuck_UAna,
        ) -> *mut root::Chuck_UAnaBlobProxy;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UAnaC1Ev"]
        pub fn Chuck_UAna_Chuck_UAna(this: *mut root::Chuck_UAna);
    }
    impl Default for Chuck_UAna {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Chuck_UAna {
        #[inline]
        pub unsafe fn system_tock(&mut self, now: f64) -> libc::c_ulong {
            Chuck_UAna_system_tock(self, now)
        }
        #[inline]
        pub unsafe fn is_up_connected_from(&mut self, src: *mut root::Chuck_UAna) -> libc::c_ulong {
            Chuck_UAna_is_up_connected_from(self, src)
        }
        #[inline]
        pub unsafe fn numIncomingUAnae(&self) -> libc::c_long {
            Chuck_UAna_numIncomingUAnae(self)
        }
        #[inline]
        pub unsafe fn getIncomingUAna(&self, index: libc::c_ulong) -> *mut root::Chuck_UAna {
            Chuck_UAna_getIncomingUAna(self, index)
        }
        #[inline]
        pub unsafe fn getIncomingBlob(
            &self,
            index: libc::c_ulong,
        ) -> *mut root::Chuck_UAnaBlobProxy {
            Chuck_UAna_getIncomingBlob(self, index)
        }
        #[inline]
        pub unsafe fn blobProxy(&self) -> *mut root::Chuck_UAnaBlobProxy {
            Chuck_UAna_blobProxy(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_UAna_Chuck_UAna(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10Chuck_UAnaD1Ev"]
        pub fn Chuck_UAna_Chuck_UAna_destructor(this: *mut root::Chuck_UAna);
    }
    extern "C" {
        #[link_name = "\u{1}_Z19ugen_generic_num_inP12Chuck_Objectm"]
        pub fn ugen_generic_num_in(
            obj: *mut root::Chuck_Object,
            isArray: libc::c_ulong,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20ugen_generic_get_srcP12Chuck_Objectlm"]
        pub fn ugen_generic_get_src(
            obj: *mut root::Chuck_Object,
            chan: libc::c_long,
            isArray: libc::c_ulong,
        ) -> *mut root::Chuck_UGen;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20ugen_generic_get_dstP12Chuck_Objectlm"]
        pub fn ugen_generic_get_dst(
            obj: *mut root::Chuck_Object,
            chan: libc::c_long,
            isArray: libc::c_ulong,
        ) -> *mut root::Chuck_UGen;
    }
    #[repr(C)]
    pub struct CBufferAdvance {
        pub m_data: *mut libc::c_uchar,
        pub m_data_width: libc::c_ulong,
        pub m_read_offsets: root::std::vector,
        pub m_free: root::std::queue<root::std::deque>,
        pub m_write_offset: libc::c_long,
        pub m_max_elem: libc::c_long,
        pub m_mutex: root::XMutex,
        pub m_event_buffer: *mut root::CBufferSimple,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct CBufferAdvance_ReadOffset {
        pub read_offset: libc::c_long,
        pub event: *mut root::Chuck_Event,
    }
    #[test]
    fn bindgen_test_layout_CBufferAdvance_ReadOffset() {
        assert_eq!(
            ::std::mem::size_of::<CBufferAdvance_ReadOffset>(),
            16usize,
            concat!("Size of: ", stringify!(CBufferAdvance_ReadOffset))
        );
        assert_eq!(
            ::std::mem::align_of::<CBufferAdvance_ReadOffset>(),
            8usize,
            concat!("Alignment of ", stringify!(CBufferAdvance_ReadOffset))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance_ReadOffset>())).read_offset as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance_ReadOffset),
                "::",
                stringify!(read_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance_ReadOffset>())).event as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance_ReadOffset),
                "::",
                stringify!(event)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvance10ReadOffsetC1ElP11Chuck_Event"]
        pub fn CBufferAdvance_ReadOffset_ReadOffset(
            this: *mut root::CBufferAdvance_ReadOffset,
            ro: libc::c_long,
            e: *mut root::Chuck_Event,
        );
    }
    impl Default for CBufferAdvance_ReadOffset {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl CBufferAdvance_ReadOffset {
        #[inline]
        pub unsafe fn new(ro: libc::c_long, e: *mut root::Chuck_Event) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            CBufferAdvance_ReadOffset_ReadOffset(&mut __bindgen_tmp, ro, e);
            __bindgen_tmp
        }
    }
    #[test]
    fn bindgen_test_layout_CBufferAdvance() {
        assert_eq!(
            ::std::mem::size_of::<CBufferAdvance>(),
            184usize,
            concat!("Size of: ", stringify!(CBufferAdvance))
        );
        assert_eq!(
            ::std::mem::align_of::<CBufferAdvance>(),
            8usize,
            concat!("Alignment of ", stringify!(CBufferAdvance))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_data_width as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_data_width)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance>())).m_read_offsets as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_read_offsets)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_free as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_free)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance>())).m_write_offset as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_write_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_max_elem as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_max_elem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferAdvance>())).m_mutex as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_mutex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferAdvance>())).m_event_buffer as *const _ as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferAdvance),
                "::",
                stringify!(m_event_buffer)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvance10initializeEmmP13CBufferSimple"]
        pub fn CBufferAdvance_initialize(
            this: *mut root::CBufferAdvance,
            num_elem: libc::c_ulong,
            width: libc::c_ulong,
            event_buffer: *mut root::CBufferSimple,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvance7cleanupEv"]
        pub fn CBufferAdvance_cleanup(this: *mut root::CBufferAdvance);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvance3getEPvmm"]
        pub fn CBufferAdvance_get(
            this: *mut root::CBufferAdvance,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
            read_offset_index: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvance3putEPvm"]
        pub fn CBufferAdvance_put(
            this: *mut root::CBufferAdvance,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvance5emptyEm"]
        pub fn CBufferAdvance_empty(
            this: *mut root::CBufferAdvance,
            read_offset_index: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvance4joinEP11Chuck_Event"]
        pub fn CBufferAdvance_join(
            this: *mut root::CBufferAdvance,
            event: *mut root::Chuck_Event,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvance6resignEm"]
        pub fn CBufferAdvance_resign(
            this: *mut root::CBufferAdvance,
            read_offset_index: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvanceC1Ev"]
        pub fn CBufferAdvance_CBufferAdvance(this: *mut root::CBufferAdvance);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14CBufferAdvanceD1Ev"]
        pub fn CBufferAdvance_CBufferAdvance_destructor(this: *mut root::CBufferAdvance);
    }
    impl Default for CBufferAdvance {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for CBufferAdvance {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "CBufferAdvance {{ m_data: {:?}, m_data_width: {:?}, m_read_offsets: {:?}, m_free: {:?}, m_write_offset: {:?}, m_max_elem: {:?}, m_mutex: {:?}, m_event_buffer: {:?} }}" , self . m_data , self . m_data_width , self . m_read_offsets , self . m_free , self . m_write_offset , self . m_max_elem , self . m_mutex , self . m_event_buffer )
        }
    }
    impl CBufferAdvance {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            num_elem: libc::c_ulong,
            width: libc::c_ulong,
            event_buffer: *mut root::CBufferSimple,
        ) -> libc::c_ulong {
            CBufferAdvance_initialize(self, num_elem, width, event_buffer)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            CBufferAdvance_cleanup(self)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
            read_offset_index: libc::c_ulong,
        ) -> libc::c_ulong {
            CBufferAdvance_get(self, data, num_elem, read_offset_index)
        }
        #[inline]
        pub unsafe fn put(&mut self, data: *mut libc::c_void, num_elem: libc::c_ulong) {
            CBufferAdvance_put(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn empty(&mut self, read_offset_index: libc::c_ulong) -> libc::c_ulong {
            CBufferAdvance_empty(self, read_offset_index)
        }
        #[inline]
        pub unsafe fn join(&mut self, event: *mut root::Chuck_Event) -> libc::c_ulong {
            CBufferAdvance_join(self, event)
        }
        #[inline]
        pub unsafe fn resign(&mut self, read_offset_index: libc::c_ulong) {
            CBufferAdvance_resign(self, read_offset_index)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            CBufferAdvance_CBufferAdvance(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            CBufferAdvance_CBufferAdvance_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct CBufferSimple {
        pub m_data: *mut libc::c_uchar,
        pub m_data_width: libc::c_ulong,
        pub m_read_offset: libc::c_ulong,
        pub m_write_offset: libc::c_ulong,
        pub m_max_elem: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_CBufferSimple() {
        assert_eq!(
            ::std::mem::size_of::<CBufferSimple>(),
            40usize,
            concat!("Size of: ", stringify!(CBufferSimple))
        );
        assert_eq!(
            ::std::mem::align_of::<CBufferSimple>(),
            8usize,
            concat!("Alignment of ", stringify!(CBufferSimple))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferSimple>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferSimple>())).m_data_width as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_data_width)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferSimple>())).m_read_offset as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_read_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<CBufferSimple>())).m_write_offset as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_write_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<CBufferSimple>())).m_max_elem as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(CBufferSimple),
                "::",
                stringify!(m_max_elem)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13CBufferSimple10initializeEmm"]
        pub fn CBufferSimple_initialize(
            this: *mut root::CBufferSimple,
            num_elem: libc::c_ulong,
            width: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13CBufferSimple7cleanupEv"]
        pub fn CBufferSimple_cleanup(this: *mut root::CBufferSimple);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13CBufferSimple3getEPvm"]
        pub fn CBufferSimple_get(
            this: *mut root::CBufferSimple,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13CBufferSimple3putEPvm"]
        pub fn CBufferSimple_put(
            this: *mut root::CBufferSimple,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13CBufferSimpleC1Ev"]
        pub fn CBufferSimple_CBufferSimple(this: *mut root::CBufferSimple);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13CBufferSimpleD1Ev"]
        pub fn CBufferSimple_CBufferSimple_destructor(this: *mut root::CBufferSimple);
    }
    impl Default for CBufferSimple {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl CBufferSimple {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            num_elem: libc::c_ulong,
            width: libc::c_ulong,
        ) -> libc::c_ulong {
            CBufferSimple_initialize(self, num_elem, width)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            CBufferSimple_cleanup(self)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
        ) -> libc::c_ulong {
            CBufferSimple_get(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn put(&mut self, data: *mut libc::c_void, num_elem: libc::c_ulong) {
            CBufferSimple_put(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            CBufferSimple_CBufferSimple(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            CBufferSimple_CBufferSimple_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct AccumBuffer {
        pub m_data: *mut f32,
        pub m_write_offset: libc::c_ulong,
        pub m_max_elem: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_AccumBuffer() {
        assert_eq!(
            ::std::mem::size_of::<AccumBuffer>(),
            24usize,
            concat!("Size of: ", stringify!(AccumBuffer))
        );
        assert_eq!(
            ::std::mem::align_of::<AccumBuffer>(),
            8usize,
            concat!("Alignment of ", stringify!(AccumBuffer))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<AccumBuffer>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(AccumBuffer),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<AccumBuffer>())).m_write_offset as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(AccumBuffer),
                "::",
                stringify!(m_write_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<AccumBuffer>())).m_max_elem as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(AccumBuffer),
                "::",
                stringify!(m_max_elem)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11AccumBuffer6resizeEl"]
        pub fn AccumBuffer_resize(
            this: *mut root::AccumBuffer,
            new_size: libc::c_long,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11AccumBuffer7cleanupEv"]
        pub fn AccumBuffer_cleanup(this: *mut root::AccumBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11AccumBuffer3putEf"]
        pub fn AccumBuffer_put(this: *mut root::AccumBuffer, next: f32);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11AccumBuffer3getEPfl"]
        pub fn AccumBuffer_get(
            this: *mut root::AccumBuffer,
            buffer: *mut f32,
            num_elem: libc::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11AccumBufferC1Ev"]
        pub fn AccumBuffer_AccumBuffer(this: *mut root::AccumBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11AccumBufferD1Ev"]
        pub fn AccumBuffer_AccumBuffer_destructor(this: *mut root::AccumBuffer);
    }
    impl Default for AccumBuffer {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl AccumBuffer {
        #[inline]
        pub unsafe fn resize(&mut self, new_size: libc::c_long) -> libc::c_long {
            AccumBuffer_resize(self, new_size)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            AccumBuffer_cleanup(self)
        }
        #[inline]
        pub unsafe fn put(&mut self, next: f32) {
            AccumBuffer_put(self, next)
        }
        #[inline]
        pub unsafe fn get(&mut self, buffer: *mut f32, num_elem: libc::c_long) {
            AccumBuffer_get(self, buffer, num_elem)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            AccumBuffer_AccumBuffer(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            AccumBuffer_AccumBuffer_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct DeccumBuffer {
        pub m_data: *mut f32,
        pub m_read_offset: libc::c_ulong,
        pub m_max_elem: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_DeccumBuffer() {
        assert_eq!(
            ::std::mem::size_of::<DeccumBuffer>(),
            24usize,
            concat!("Size of: ", stringify!(DeccumBuffer))
        );
        assert_eq!(
            ::std::mem::align_of::<DeccumBuffer>(),
            8usize,
            concat!("Alignment of ", stringify!(DeccumBuffer))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<DeccumBuffer>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(DeccumBuffer),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<DeccumBuffer>())).m_read_offset as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(DeccumBuffer),
                "::",
                stringify!(m_read_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<DeccumBuffer>())).m_max_elem as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(DeccumBuffer),
                "::",
                stringify!(m_max_elem)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12DeccumBuffer6resizeEl"]
        pub fn DeccumBuffer_resize(
            this: *mut root::DeccumBuffer,
            new_size: libc::c_long,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12DeccumBuffer7cleanupEv"]
        pub fn DeccumBuffer_cleanup(this: *mut root::DeccumBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12DeccumBuffer3putEPfl"]
        pub fn DeccumBuffer_put(
            this: *mut root::DeccumBuffer,
            next: *mut f32,
            num_elem: libc::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12DeccumBuffer3getEPf"]
        pub fn DeccumBuffer_get(this: *mut root::DeccumBuffer, out: *mut f32);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12DeccumBuffer3getEPfl"]
        pub fn DeccumBuffer_get1(
            this: *mut root::DeccumBuffer,
            buffer: *mut f32,
            num_elem: libc::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12DeccumBufferC1Ev"]
        pub fn DeccumBuffer_DeccumBuffer(this: *mut root::DeccumBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12DeccumBufferD1Ev"]
        pub fn DeccumBuffer_DeccumBuffer_destructor(this: *mut root::DeccumBuffer);
    }
    impl Default for DeccumBuffer {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl DeccumBuffer {
        #[inline]
        pub unsafe fn resize(&mut self, new_size: libc::c_long) -> libc::c_long {
            DeccumBuffer_resize(self, new_size)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            DeccumBuffer_cleanup(self)
        }
        #[inline]
        pub unsafe fn put(&mut self, next: *mut f32, num_elem: libc::c_long) {
            DeccumBuffer_put(self, next, num_elem)
        }
        #[inline]
        pub unsafe fn get(&mut self, out: *mut f32) {
            DeccumBuffer_get(self, out)
        }
        #[inline]
        pub unsafe fn get1(&mut self, buffer: *mut f32, num_elem: libc::c_long) {
            DeccumBuffer_get1(self, buffer, num_elem)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            DeccumBuffer_DeccumBuffer(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            DeccumBuffer_DeccumBuffer_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct CircularBuffer<T> {
        pub m_elements: *mut T,
        pub m_read: usize,
        pub m_write: usize,
        pub m_numElements: usize,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    impl<T> Default for CircularBuffer<T> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct FastCircularBuffer {
        pub m_data: *mut libc::c_uchar,
        pub m_data_width: libc::c_ulong,
        pub m_read_offset: libc::c_ulong,
        pub m_write_offset: libc::c_ulong,
        pub m_max_elem: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_FastCircularBuffer() {
        assert_eq!(
            ::std::mem::size_of::<FastCircularBuffer>(),
            40usize,
            concat!("Size of: ", stringify!(FastCircularBuffer))
        );
        assert_eq!(
            ::std::mem::align_of::<FastCircularBuffer>(),
            8usize,
            concat!("Alignment of ", stringify!(FastCircularBuffer))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<FastCircularBuffer>())).m_data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_data)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<FastCircularBuffer>())).m_data_width as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_data_width)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<FastCircularBuffer>())).m_read_offset as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_read_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<FastCircularBuffer>())).m_write_offset as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_write_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<FastCircularBuffer>())).m_max_elem as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(FastCircularBuffer),
                "::",
                stringify!(m_max_elem)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18FastCircularBuffer10initializeEmm"]
        pub fn FastCircularBuffer_initialize(
            this: *mut root::FastCircularBuffer,
            num_elem: libc::c_ulong,
            width: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18FastCircularBuffer7cleanupEv"]
        pub fn FastCircularBuffer_cleanup(this: *mut root::FastCircularBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18FastCircularBuffer3getEPvm"]
        pub fn FastCircularBuffer_get(
            this: *mut root::FastCircularBuffer,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18FastCircularBuffer3putEPvm"]
        pub fn FastCircularBuffer_put(
            this: *mut root::FastCircularBuffer,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18FastCircularBuffer7hasMoreEv"]
        pub fn FastCircularBuffer_hasMore(this: *mut root::FastCircularBuffer) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18FastCircularBuffer5clearEv"]
        pub fn FastCircularBuffer_clear(this: *mut root::FastCircularBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18FastCircularBufferC1Ev"]
        pub fn FastCircularBuffer_FastCircularBuffer(this: *mut root::FastCircularBuffer);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18FastCircularBufferD1Ev"]
        pub fn FastCircularBuffer_FastCircularBuffer_destructor(
            this: *mut root::FastCircularBuffer,
        );
    }
    impl Default for FastCircularBuffer {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl FastCircularBuffer {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            num_elem: libc::c_ulong,
            width: libc::c_ulong,
        ) -> libc::c_ulong {
            FastCircularBuffer_initialize(self, num_elem, width)
        }
        #[inline]
        pub unsafe fn cleanup(&mut self) {
            FastCircularBuffer_cleanup(self)
        }
        #[inline]
        pub unsafe fn get(
            &mut self,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
        ) -> libc::c_ulong {
            FastCircularBuffer_get(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn put(
            &mut self,
            data: *mut libc::c_void,
            num_elem: libc::c_ulong,
        ) -> libc::c_ulong {
            FastCircularBuffer_put(self, data, num_elem)
        }
        #[inline]
        pub unsafe fn hasMore(&mut self) -> bool {
            FastCircularBuffer_hasMore(self)
        }
        #[inline]
        pub unsafe fn clear(&mut self) {
            FastCircularBuffer_clear(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            FastCircularBuffer_FastCircularBuffer(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            FastCircularBuffer_FastCircularBuffer_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct XCircleBuffer<T> {
        pub m_buffer: *mut T,
        pub m_length: libc::c_long,
        pub m_writeIndex: libc::c_long,
        pub m_readIndex: libc::c_long,
        pub m_numElements: libc::c_long,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    impl<T> Default for XCircleBuffer<T> {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM_Func {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_VM_FTable {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_IO_Serial {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_VM_Stack {
        pub stack: *mut libc::c_uchar,
        pub sp: *mut libc::c_uchar,
        pub sp_max: *mut libc::c_uchar,
        pub prev: *mut root::Chuck_VM_Stack,
        pub next: *mut root::Chuck_VM_Stack,
        pub m_is_init: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Stack() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VM_Stack>(),
            48usize,
            concat!("Size of: ", stringify!(Chuck_VM_Stack))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VM_Stack>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Stack))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).stack as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(stack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).sp as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(sp)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).sp_max as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(sp_max)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).prev as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(prev)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).next as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Stack>())).m_is_init as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Stack),
                "::",
                stringify!(m_is_init)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Stack10initializeEm"]
        pub fn Chuck_VM_Stack_initialize(
            this: *mut root::Chuck_VM_Stack,
            size: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Stack8shutdownEv"]
        pub fn Chuck_VM_Stack_shutdown(this: *mut root::Chuck_VM_Stack) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_StackC1Ev"]
        pub fn Chuck_VM_Stack_Chuck_VM_Stack(this: *mut root::Chuck_VM_Stack);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_StackD1Ev"]
        pub fn Chuck_VM_Stack_Chuck_VM_Stack_destructor(this: *mut root::Chuck_VM_Stack);
    }
    impl Default for Chuck_VM_Stack {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Chuck_VM_Stack {
        #[inline]
        pub unsafe fn initialize(&mut self, size: libc::c_ulong) -> libc::c_ulong {
            Chuck_VM_Stack_initialize(self, size)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> libc::c_ulong {
            Chuck_VM_Stack_shutdown(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_VM_Stack_Chuck_VM_Stack(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_VM_Stack_Chuck_VM_Stack_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_VM_Code {
        pub _base: root::Chuck_Object,
        pub instr: *mut *mut root::Chuck_Instr,
        pub num_instr: libc::c_ulong,
        pub name: root::std::__cxx11::string,
        pub stack_depth: libc::c_ulong,
        pub need_this: libc::c_ulong,
        pub native_func: libc::c_ulong,
        pub native_func_type: libc::c_ulong,
        pub filename: root::std::__cxx11::string,
    }
    pub const Chuck_VM_Code_NATIVE_UNKNOWN: root::Chuck_VM_Code__bindgen_ty_1 =
        Chuck_VM_Code__bindgen_ty_1::NATIVE_UNKNOWN;
    pub const Chuck_VM_Code_NATIVE_CTOR: root::Chuck_VM_Code__bindgen_ty_1 =
        Chuck_VM_Code__bindgen_ty_1::NATIVE_CTOR;
    pub const Chuck_VM_Code_NATIVE_DTOR: root::Chuck_VM_Code__bindgen_ty_1 =
        Chuck_VM_Code__bindgen_ty_1::NATIVE_DTOR;
    pub const Chuck_VM_Code_NATIVE_MFUN: root::Chuck_VM_Code__bindgen_ty_1 =
        Chuck_VM_Code__bindgen_ty_1::NATIVE_MFUN;
    pub const Chuck_VM_Code_NATIVE_SFUN: root::Chuck_VM_Code__bindgen_ty_1 =
        Chuck_VM_Code__bindgen_ty_1::NATIVE_SFUN;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum Chuck_VM_Code__bindgen_ty_1 {
        NATIVE_UNKNOWN = 0,
        NATIVE_CTOR = 1,
        NATIVE_DTOR = 2,
        NATIVE_MFUN = 3,
        NATIVE_SFUN = 4,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Code() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VM_Code>(),
            184usize,
            concat!("Size of: ", stringify!(Chuck_VM_Code))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VM_Code>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Code))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).instr as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(instr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).num_instr as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(num_instr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).name as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).stack_depth as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(stack_depth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).need_this as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(need_this)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).native_func as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(native_func)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Code>())).native_func_type as *const _ as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(native_func_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Code>())).filename as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Code),
                "::",
                stringify!(filename)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_VM_CodeC1Ev"]
        pub fn Chuck_VM_Code_Chuck_VM_Code(this: *mut root::Chuck_VM_Code);
    }
    impl Default for Chuck_VM_Code {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Code {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM_Code {{ instr: {:?}, num_instr: {:?}, name: {:?}, stack_depth: {:?}, need_this: {:?}, native_func: {:?}, native_func_type: {:?}, filename: {:?} }}" , self . instr , self . num_instr , self . name , self . stack_depth , self . need_this , self . native_func , self . native_func_type , self . filename )
        }
    }
    impl Chuck_VM_Code {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_VM_Code_Chuck_VM_Code(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13Chuck_VM_CodeD1Ev"]
        pub fn Chuck_VM_Code_Chuck_VM_Code_destructor(this: *mut root::Chuck_VM_Code);
    }
    #[repr(C)]
    pub struct Chuck_VM_Shred {
        pub _base: root::Chuck_Object,
        pub mem: *mut root::Chuck_VM_Stack,
        pub reg: *mut root::Chuck_VM_Stack,
        pub base_ref: *mut root::Chuck_VM_Stack,
        pub code: *mut root::Chuck_VM_Code,
        pub code_orig: *mut root::Chuck_VM_Code,
        pub instr: *mut *mut root::Chuck_Instr,
        pub parent: *mut root::Chuck_VM_Shred,
        pub children: root::std::map,
        pub pc: libc::c_ulong,
        pub vm_ref: *mut root::Chuck_VM,
        pub now: f64,
        pub start: f64,
        pub wake_time: f64,
        pub next_pc: libc::c_ulong,
        pub is_done: libc::c_ulong,
        pub is_running: libc::c_ulong,
        pub is_abort: libc::c_ulong,
        pub is_dumped: libc::c_ulong,
        pub event: *mut root::Chuck_Event,
        pub m_ugen_map: root::std::map,
        pub m_parent_objects: root::std::vector,
        pub xid: libc::c_ulong,
        pub name: root::std::__cxx11::string,
        pub args: root::std::vector,
        pub prev: *mut root::Chuck_VM_Shred,
        pub next: *mut root::Chuck_VM_Shred,
        pub m_loopCounters: root::std::vector,
        pub m_serials: *mut root::std::__cxx11::list,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Shred() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VM_Shred>(),
            448usize,
            concat!("Size of: ", stringify!(Chuck_VM_Shred))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VM_Shred>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Shred))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).mem as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(mem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).reg as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(reg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).base_ref as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(base_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).code as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).code_orig as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(code_orig)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).instr as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(instr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).parent as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(parent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).children as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(children)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).pc as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(pc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).vm_ref as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(vm_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).now as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(now)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).start as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(start)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).wake_time as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(wake_time)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).next_pc as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(next_pc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).is_done as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(is_done)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).is_running as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(is_running)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).is_abort as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(is_abort)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).is_dumped as *const _ as usize },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(is_dumped)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).event as *const _ as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(event)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).m_ugen_map as *const _ as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(m_ugen_map)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shred>())).m_parent_objects as *const _ as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(m_parent_objects)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).xid as *const _ as usize },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).name as *const _ as usize },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).args as *const _ as usize },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(args)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).prev as *const _ as usize },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(prev)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).next as *const _ as usize },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shred>())).m_loopCounters as *const _ as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(m_loopCounters)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred>())).m_serials as *const _ as usize },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred),
                "::",
                stringify!(m_serials)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred10initializeEP13Chuck_VM_Codemm"]
        pub fn Chuck_VM_Shred_initialize(
            this: *mut root::Chuck_VM_Shred,
            c: *mut root::Chuck_VM_Code,
            mem_st_size: libc::c_ulong,
            reg_st_size: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred8shutdownEv"]
        pub fn Chuck_VM_Shred_shutdown(this: *mut root::Chuck_VM_Shred) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred3runEP8Chuck_VM"]
        pub fn Chuck_VM_Shred_run(
            this: *mut root::Chuck_VM_Shred,
            vm: *mut root::Chuck_VM,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred3addEP10Chuck_UGen"]
        pub fn Chuck_VM_Shred_add(
            this: *mut root::Chuck_VM_Shred,
            ugen: *mut root::Chuck_UGen,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred6removeEP10Chuck_UGen"]
        pub fn Chuck_VM_Shred_remove(
            this: *mut root::Chuck_VM_Shred,
            ugen: *mut root::Chuck_UGen,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred14add_parent_refEP12Chuck_Object"]
        pub fn Chuck_VM_Shred_add_parent_ref(
            this: *mut root::Chuck_VM_Shred,
            obj: *mut root::Chuck_Object,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred12add_serialioEP15Chuck_IO_Serial"]
        pub fn Chuck_VM_Shred_add_serialio(
            this: *mut root::Chuck_VM_Shred,
            serial: *mut root::Chuck_IO_Serial,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred15remove_serialioEP15Chuck_IO_Serial"]
        pub fn Chuck_VM_Shred_remove_serialio(
            this: *mut root::Chuck_VM_Shred,
            serial: *mut root::Chuck_IO_Serial,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred15pushLoopCounterEv"]
        pub fn Chuck_VM_Shred_pushLoopCounter(
            this: *mut root::Chuck_VM_Shred,
        ) -> *mut libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred18currentLoopCounterEv"]
        pub fn Chuck_VM_Shred_currentLoopCounter(
            this: *mut root::Chuck_VM_Shred,
        ) -> *mut libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_Shred14popLoopCounterEv"]
        pub fn Chuck_VM_Shred_popLoopCounter(this: *mut root::Chuck_VM_Shred) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_ShredC1Ev"]
        pub fn Chuck_VM_Shred_Chuck_VM_Shred(this: *mut root::Chuck_VM_Shred);
    }
    impl Default for Chuck_VM_Shred {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Shred {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM_Shred {{ mem: {:?}, reg: {:?}, base_ref: {:?}, code: {:?}, code_orig: {:?}, instr: {:?}, parent: {:?}, children: {:?}, pc: {:?}, vm_ref: {:?}, now: {:?}, start: {:?}, wake_time: {:?}, next_pc: {:?}, is_done: {:?}, is_running: {:?}, is_abort: {:?}, is_dumped: {:?}, event: {:?}, m_ugen_map: {:?}, m_parent_objects: {:?}, xid: {:?}, name: {:?}, args: {:?}, prev: {:?}, next: {:?}, m_loopCounters: {:?}, m_serials: {:?} }}" , self . mem , self . reg , self . base_ref , self . code , self . code_orig , self . instr , self . parent , self . children , self . pc , self . vm_ref , self . now , self . start , self . wake_time , self . next_pc , self . is_done , self . is_running , self . is_abort , self . is_dumped , self . event , self . m_ugen_map , self . m_parent_objects , self . xid , self . name , self . args , self . prev , self . next , self . m_loopCounters , self . m_serials )
        }
    }
    impl Chuck_VM_Shred {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            c: *mut root::Chuck_VM_Code,
            mem_st_size: libc::c_ulong,
            reg_st_size: libc::c_ulong,
        ) -> libc::c_ulong {
            Chuck_VM_Shred_initialize(self, c, mem_st_size, reg_st_size)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> libc::c_ulong {
            Chuck_VM_Shred_shutdown(self)
        }
        #[inline]
        pub unsafe fn run(&mut self, vm: *mut root::Chuck_VM) -> libc::c_ulong {
            Chuck_VM_Shred_run(self, vm)
        }
        #[inline]
        pub unsafe fn add(&mut self, ugen: *mut root::Chuck_UGen) -> libc::c_ulong {
            Chuck_VM_Shred_add(self, ugen)
        }
        #[inline]
        pub unsafe fn remove(&mut self, ugen: *mut root::Chuck_UGen) -> libc::c_ulong {
            Chuck_VM_Shred_remove(self, ugen)
        }
        #[inline]
        pub unsafe fn add_parent_ref(&mut self, obj: *mut root::Chuck_Object) {
            Chuck_VM_Shred_add_parent_ref(self, obj)
        }
        #[inline]
        pub unsafe fn add_serialio(&mut self, serial: *mut root::Chuck_IO_Serial) {
            Chuck_VM_Shred_add_serialio(self, serial)
        }
        #[inline]
        pub unsafe fn remove_serialio(&mut self, serial: *mut root::Chuck_IO_Serial) {
            Chuck_VM_Shred_remove_serialio(self, serial)
        }
        #[inline]
        pub unsafe fn pushLoopCounter(&mut self) -> *mut libc::c_ulong {
            Chuck_VM_Shred_pushLoopCounter(self)
        }
        #[inline]
        pub unsafe fn currentLoopCounter(&mut self) -> *mut libc::c_ulong {
            Chuck_VM_Shred_currentLoopCounter(self)
        }
        #[inline]
        pub unsafe fn popLoopCounter(&mut self) -> bool {
            Chuck_VM_Shred_popLoopCounter(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_VM_Shred_Chuck_VM_Shred(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_VM_ShredD1Ev"]
        pub fn Chuck_VM_Shred_Chuck_VM_Shred_destructor(this: *mut root::Chuck_VM_Shred);
    }
    #[repr(C)]
    pub struct Chuck_VM_Shred_Status {
        pub _base: root::Chuck_Object,
        pub xid: libc::c_ulong,
        pub name: root::std::__cxx11::string,
        pub start: f64,
        pub has_event: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Shred_Status() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VM_Shred_Status>(),
            128usize,
            concat!("Size of: ", stringify!(Chuck_VM_Shred_Status))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VM_Shred_Status>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Shred_Status))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred_Status>())).xid as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred_Status),
                "::",
                stringify!(xid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred_Status>())).name as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred_Status),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shred_Status>())).start as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred_Status),
                "::",
                stringify!(start)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shred_Status>())).has_event as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shred_Status),
                "::",
                stringify!(has_event)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN21Chuck_VM_Shred_StatusC1EmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdm"]
        pub fn Chuck_VM_Shred_Status_Chuck_VM_Shred_Status(
            this: *mut root::Chuck_VM_Shred_Status,
            _id: libc::c_ulong,
            n: *const root::std::__cxx11::string,
            _start: f64,
            e: libc::c_ulong,
        );
    }
    impl Default for Chuck_VM_Shred_Status {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Shred_Status {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_VM_Shred_Status {{ xid: {:?}, name: {:?}, start: {:?}, has_event: {:?} }}",
                self.xid, self.name, self.start, self.has_event
            )
        }
    }
    impl Chuck_VM_Shred_Status {
        #[inline]
        pub unsafe fn new(
            _id: libc::c_ulong,
            n: *const root::std::__cxx11::string,
            _start: f64,
            e: libc::c_ulong,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_VM_Shred_Status_Chuck_VM_Shred_Status(&mut __bindgen_tmp, _id, n, _start, e);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct Chuck_VM_Status {
        pub _base: root::Chuck_Object,
        pub srate: libc::c_ulong,
        pub now_system: f64,
        pub t_second: libc::c_ulong,
        pub t_minute: libc::c_ulong,
        pub t_hour: libc::c_ulong,
        pub list: root::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Status() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VM_Status>(),
            136usize,
            concat!("Size of: ", stringify!(Chuck_VM_Status))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VM_Status>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Status))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).srate as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(srate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).now_system as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(now_system)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).t_second as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(t_second)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).t_minute as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(t_minute)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).t_hour as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(t_hour)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Status>())).list as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Status),
                "::",
                stringify!(list)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_Status5clearEv"]
        pub fn Chuck_VM_Status_clear(this: *mut root::Chuck_VM_Status);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_StatusC1Ev"]
        pub fn Chuck_VM_Status_Chuck_VM_Status(this: *mut root::Chuck_VM_Status);
    }
    impl Default for Chuck_VM_Status {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Status {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM_Status {{ srate: {:?}, now_system: {:?}, t_second: {:?}, t_minute: {:?}, t_hour: {:?}, list: {:?} }}" , self . srate , self . now_system , self . t_second , self . t_minute , self . t_hour , self . list )
        }
    }
    impl ::std::cmp::PartialEq for Chuck_VM_Status {
        fn eq(&self, other: &Chuck_VM_Status) -> bool {
            self._base == other._base
                && self.srate == other.srate
                && self.now_system == other.now_system
                && self.t_second == other.t_second
                && self.t_minute == other.t_minute
                && self.t_hour == other.t_hour
                && self.list == other.list
        }
    }
    impl Chuck_VM_Status {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Chuck_VM_Status_clear(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_VM_Status_Chuck_VM_Status(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN15Chuck_VM_StatusD1Ev"]
        pub fn Chuck_VM_Status_Chuck_VM_Status_destructor(this: *mut root::Chuck_VM_Status);
    }
    #[repr(C)]
    pub struct Chuck_VM_Shreduler {
        pub _base: root::Chuck_Object,
        pub now_system: f64,
        pub rt_audio: libc::c_ulong,
        pub vm_ref: *mut root::Chuck_VM,
        pub shred_list: *mut root::Chuck_VM_Shred,
        pub blocked: root::std::map,
        pub m_current_shred: *mut root::Chuck_VM_Shred,
        pub m_dac: *mut root::Chuck_UGen,
        pub m_adc: *mut root::Chuck_UGen,
        pub m_bunghole: *mut root::Chuck_UGen,
        pub m_num_dac_channels: libc::c_ulong,
        pub m_num_adc_channels: libc::c_ulong,
        pub m_status: root::Chuck_VM_Status,
        pub m_max_block_size: libc::c_ulong,
        pub m_adaptive: libc::c_ulong,
        pub m_samps_until_next: f64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM_Shreduler() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VM_Shreduler>(),
            360usize,
            concat!("Size of: ", stringify!(Chuck_VM_Shreduler))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VM_Shreduler>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM_Shreduler))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).now_system as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(now_system)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).rt_audio as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(rt_audio)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).vm_ref as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(vm_ref)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).shred_list as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(shred_list)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).blocked as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(blocked)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_current_shred as *const _ as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_current_shred)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_dac as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_dac)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_adc as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_adc)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_bunghole as *const _ as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_bunghole)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_num_dac_channels as *const _
                    as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_num_dac_channels)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_num_adc_channels as *const _
                    as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_num_adc_channels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_status as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_status)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_max_block_size as *const _ as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_max_block_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_adaptive as *const _ as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_adaptive)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM_Shreduler>())).m_samps_until_next as *const _
                    as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM_Shreduler),
                "::",
                stringify!(m_samps_until_next)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler10initializeEv"]
        pub fn Chuck_VM_Shreduler_initialize(this: *mut root::Chuck_VM_Shreduler) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler8shutdownEv"]
        pub fn Chuck_VM_Shreduler_shutdown(this: *mut root::Chuck_VM_Shreduler) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler8shreduleEP14Chuck_VM_Shred"]
        pub fn Chuck_VM_Shreduler_shredule(
            this: *mut root::Chuck_VM_Shreduler,
            shred: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler8shreduleEP14Chuck_VM_Shredd"]
        pub fn Chuck_VM_Shreduler_shredule1(
            this: *mut root::Chuck_VM_Shreduler,
            shred: *mut root::Chuck_VM_Shred,
            wake_time: f64,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler3getEv"]
        pub fn Chuck_VM_Shreduler_get(
            this: *mut root::Chuck_VM_Shreduler,
        ) -> *mut root::Chuck_VM_Shred;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler7advanceEl"]
        pub fn Chuck_VM_Shreduler_advance(this: *mut root::Chuck_VM_Shreduler, N: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler9advance_vERlS0_"]
        pub fn Chuck_VM_Shreduler_advance_v(
            this: *mut root::Chuck_VM_Shreduler,
            num_left: *mut libc::c_long,
            offset: *mut libc::c_long,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler12set_adaptiveEm"]
        pub fn Chuck_VM_Shreduler_set_adaptive(
            this: *mut root::Chuck_VM_Shreduler,
            max_block_size: libc::c_ulong,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler6removeEP14Chuck_VM_Shred"]
        pub fn Chuck_VM_Shreduler_remove(
            this: *mut root::Chuck_VM_Shreduler,
            shred: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler7replaceEP14Chuck_VM_ShredS1_"]
        pub fn Chuck_VM_Shreduler_replace(
            this: *mut root::Chuck_VM_Shreduler,
            out: *mut root::Chuck_VM_Shred,
            in_: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler6lookupEm"]
        pub fn Chuck_VM_Shreduler_lookup(
            this: *mut root::Chuck_VM_Shreduler,
            xid: libc::c_ulong,
        ) -> *mut root::Chuck_VM_Shred;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler6statusEv"]
        pub fn Chuck_VM_Shreduler_status(this: *mut root::Chuck_VM_Shreduler);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler6statusEP15Chuck_VM_Status"]
        pub fn Chuck_VM_Shreduler_status1(
            this: *mut root::Chuck_VM_Shreduler,
            status: *mut root::Chuck_VM_Status,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler7highestEv"]
        pub fn Chuck_VM_Shreduler_highest(this: *mut root::Chuck_VM_Shreduler) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler11add_blockedEP14Chuck_VM_Shred"]
        pub fn Chuck_VM_Shreduler_add_blocked(
            this: *mut root::Chuck_VM_Shreduler,
            shred: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_Shreduler14remove_blockedEP14Chuck_VM_Shred"]
        pub fn Chuck_VM_Shreduler_remove_blocked(
            this: *mut root::Chuck_VM_Shreduler,
            shred: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_ShredulerC1Ev"]
        pub fn Chuck_VM_Shreduler_Chuck_VM_Shreduler(this: *mut root::Chuck_VM_Shreduler);
    }
    impl Default for Chuck_VM_Shreduler {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM_Shreduler {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM_Shreduler {{ now_system: {:?}, rt_audio: {:?}, vm_ref: {:?}, shred_list: {:?}, blocked: {:?}, m_current_shred: {:?}, m_dac: {:?}, m_adc: {:?}, m_bunghole: {:?}, m_num_dac_channels: {:?}, m_num_adc_channels: {:?}, m_status: {:?}, m_max_block_size: {:?}, m_adaptive: {:?}, m_samps_until_next: {:?} }}" , self . now_system , self . rt_audio , self . vm_ref , self . shred_list , self . blocked , self . m_current_shred , self . m_dac , self . m_adc , self . m_bunghole , self . m_num_dac_channels , self . m_num_adc_channels , self . m_status , self . m_max_block_size , self . m_adaptive , self . m_samps_until_next )
        }
    }
    impl ::std::cmp::PartialEq for Chuck_VM_Shreduler {
        fn eq(&self, other: &Chuck_VM_Shreduler) -> bool {
            self._base == other._base
                && self.now_system == other.now_system
                && self.rt_audio == other.rt_audio
                && self.vm_ref == other.vm_ref
                && self.shred_list == other.shred_list
                && self.blocked == other.blocked
                && self.m_current_shred == other.m_current_shred
                && self.m_dac == other.m_dac
                && self.m_adc == other.m_adc
                && self.m_bunghole == other.m_bunghole
                && self.m_num_dac_channels == other.m_num_dac_channels
                && self.m_num_adc_channels == other.m_num_adc_channels
                && self.m_status == other.m_status
                && self.m_max_block_size == other.m_max_block_size
                && self.m_adaptive == other.m_adaptive
                && self.m_samps_until_next == other.m_samps_until_next
        }
    }
    impl Chuck_VM_Shreduler {
        #[inline]
        pub unsafe fn initialize(&mut self) -> libc::c_ulong {
            Chuck_VM_Shreduler_initialize(self)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> libc::c_ulong {
            Chuck_VM_Shreduler_shutdown(self)
        }
        #[inline]
        pub unsafe fn shredule(&mut self, shred: *mut root::Chuck_VM_Shred) -> libc::c_ulong {
            Chuck_VM_Shreduler_shredule(self, shred)
        }
        #[inline]
        pub unsafe fn shredule1(
            &mut self,
            shred: *mut root::Chuck_VM_Shred,
            wake_time: f64,
        ) -> libc::c_ulong {
            Chuck_VM_Shreduler_shredule1(self, shred, wake_time)
        }
        #[inline]
        pub unsafe fn get(&mut self) -> *mut root::Chuck_VM_Shred {
            Chuck_VM_Shreduler_get(self)
        }
        #[inline]
        pub unsafe fn advance(&mut self, N: libc::c_long) {
            Chuck_VM_Shreduler_advance(self, N)
        }
        #[inline]
        pub unsafe fn advance_v(&mut self, num_left: *mut libc::c_long, offset: *mut libc::c_long) {
            Chuck_VM_Shreduler_advance_v(self, num_left, offset)
        }
        #[inline]
        pub unsafe fn set_adaptive(&mut self, max_block_size: libc::c_ulong) {
            Chuck_VM_Shreduler_set_adaptive(self, max_block_size)
        }
        #[inline]
        pub unsafe fn remove(&mut self, shred: *mut root::Chuck_VM_Shred) -> libc::c_ulong {
            Chuck_VM_Shreduler_remove(self, shred)
        }
        #[inline]
        pub unsafe fn replace(
            &mut self,
            out: *mut root::Chuck_VM_Shred,
            in_: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong {
            Chuck_VM_Shreduler_replace(self, out, in_)
        }
        #[inline]
        pub unsafe fn lookup(&mut self, xid: libc::c_ulong) -> *mut root::Chuck_VM_Shred {
            Chuck_VM_Shreduler_lookup(self, xid)
        }
        #[inline]
        pub unsafe fn status(&mut self) {
            Chuck_VM_Shreduler_status(self)
        }
        #[inline]
        pub unsafe fn status1(&mut self, status: *mut root::Chuck_VM_Status) {
            Chuck_VM_Shreduler_status1(self, status)
        }
        #[inline]
        pub unsafe fn highest(&mut self) -> libc::c_ulong {
            Chuck_VM_Shreduler_highest(self)
        }
        #[inline]
        pub unsafe fn add_blocked(&mut self, shred: *mut root::Chuck_VM_Shred) -> libc::c_ulong {
            Chuck_VM_Shreduler_add_blocked(self, shred)
        }
        #[inline]
        pub unsafe fn remove_blocked(&mut self, shred: *mut root::Chuck_VM_Shred) -> libc::c_ulong {
            Chuck_VM_Shreduler_remove_blocked(self, shred)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_VM_Shreduler_Chuck_VM_Shreduler(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN18Chuck_VM_ShredulerD1Ev"]
        pub fn Chuck_VM_Shreduler_Chuck_VM_Shreduler_destructor(
            this: *mut root::Chuck_VM_Shreduler,
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Set_Global_Int_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Get_Global_Int_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Set_Global_Float_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Get_Global_Float_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Signal_Global_Event_Request {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Global_Int_Container {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Global_Float_Container {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Chuck_Global_Event_Container {
        _unused: [u8; 0],
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum Chuck_Global_Request_Type {
        set_global_int_request = 0,
        get_global_int_request = 1,
        set_global_float_request = 2,
        get_global_float_request = 3,
        signal_global_event_request = 4,
        spork_shred_request = 5,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct Chuck_Global_Request {
        pub type_: root::Chuck_Global_Request_Type,
        pub __bindgen_anon_1: root::Chuck_Global_Request__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union Chuck_Global_Request__bindgen_ty_1 {
        pub setIntRequest: *mut root::Chuck_Set_Global_Int_Request,
        pub getIntRequest: *mut root::Chuck_Get_Global_Int_Request,
        pub setFloatRequest: *mut root::Chuck_Set_Global_Float_Request,
        pub getFloatRequest: *mut root::Chuck_Get_Global_Float_Request,
        pub signalEventRequest: *mut root::Chuck_Signal_Global_Event_Request,
        pub shred: *mut root::Chuck_VM_Shred,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Global_Request__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Global_Request__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Global_Request__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Global_Request__bindgen_ty_1>(),
            8usize,
            concat!(
                "Alignment of ",
                stringify!(Chuck_Global_Request__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).setIntRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(setIntRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).getIntRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(getIntRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).setFloatRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(setFloatRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).getFloatRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(getFloatRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).signalEventRequest
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(signalEventRequest)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Global_Request__bindgen_ty_1>())).shred as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request__bindgen_ty_1),
                "::",
                stringify!(shred)
            )
        );
    }
    impl Default for Chuck_Global_Request__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Global_Request__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "Chuck_Global_Request__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_Chuck_Global_Request() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Global_Request>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Global_Request))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Global_Request>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Global_Request))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Global_Request>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Global_Request),
                "::",
                stringify!(type_)
            )
        );
    }
    impl Default for Chuck_Global_Request {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Global_Request {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Global_Request {{ type: {:?}, __bindgen_anon_1: {:?} }}",
                self.type_, self.__bindgen_anon_1
            )
        }
    }
    #[repr(C)]
    pub struct Chuck_VM {
        pub _base: root::Chuck_Object,
        pub m_carrier: *mut root::Chuck_Carrier,
        pub m_adc: *mut root::Chuck_UGen,
        pub m_dac: *mut root::Chuck_UGen,
        pub m_bunghole: *mut root::Chuck_UGen,
        pub m_srate: libc::c_ulong,
        pub m_num_adc_channels: libc::c_ulong,
        pub m_num_dac_channels: libc::c_ulong,
        pub m_halt: libc::c_ulong,
        pub m_is_running: libc::c_ulong,
        pub m_input_ref: *const f32,
        pub m_output_ref: *mut f32,
        pub m_init: libc::c_ulong,
        pub m_last_error: root::std::__cxx11::string,
        pub m_shreds: *mut root::Chuck_VM_Shred,
        pub m_num_shreds: libc::c_ulong,
        pub m_shred_id: libc::c_ulong,
        pub m_shreduler: *mut root::Chuck_VM_Shreduler,
        pub m_shred_dump: root::std::vector,
        pub m_num_dumped_shreds: libc::c_ulong,
        pub m_msg_buffer: *mut root::CBufferSimple,
        pub m_reply_buffer: *mut root::CBufferSimple,
        pub m_event_buffer: *mut root::CBufferSimple,
        pub m_event_buffers: root::std::__cxx11::list,
        pub m_global_ints: root::std::map,
        pub m_global_floats: root::std::map,
        pub m_global_events: root::std::map,
        pub m_global_request_queue: root::XCircleBuffer<root::Chuck_Global_Request>,
    }
    #[test]
    fn bindgen_test_layout_Chuck_VM() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_VM>(),
            496usize,
            concat!("Size of: ", stringify!(Chuck_VM))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_VM>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_VM))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_carrier as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_adc as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_adc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_dac as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_dac)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_bunghole as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_bunghole)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_srate as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_srate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_num_adc_channels as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_num_adc_channels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_num_dac_channels as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_num_dac_channels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_halt as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_halt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_is_running as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_is_running)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_input_ref as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_input_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_output_ref as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_output_ref)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_init as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_init)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_last_error as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_last_error)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_shreds as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_shreds)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_num_shreds as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_num_shreds)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_shred_id as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_shred_id)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_shreduler as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_shreduler)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_shred_dump as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_shred_dump)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM>())).m_num_dumped_shreds as *const _ as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_num_dumped_shreds)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_msg_buffer as *const _ as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_msg_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_reply_buffer as *const _ as usize },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_reply_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_event_buffer as *const _ as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_event_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_event_buffers as *const _ as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_event_buffers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_global_ints as *const _ as usize },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_global_ints)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_global_floats as *const _ as usize },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_global_floats)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_VM>())).m_global_events as *const _ as usize },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_global_events)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_VM>())).m_global_request_queue as *const _ as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_VM),
                "::",
                stringify!(m_global_request_queue)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM10initializeEmmmmm"]
        pub fn Chuck_VM_initialize(
            this: *mut root::Chuck_VM,
            srate: libc::c_ulong,
            dac_chan: libc::c_ulong,
            adc_chan: libc::c_ulong,
            adaptive: libc::c_ulong,
            halt: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM20initialize_synthesisEv"]
        pub fn Chuck_VM_initialize_synthesis(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM10setCarrierEP13Chuck_Carrier"]
        pub fn Chuck_VM_setCarrier(
            this: *mut root::Chuck_VM,
            c: *mut root::Chuck_Carrier,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM8shutdownEv"]
        pub fn Chuck_VM_shutdown(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM8has_initEv"]
        pub fn Chuck_VM_has_init(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM5startEv"]
        pub fn Chuck_VM_start(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM7runningEv"]
        pub fn Chuck_VM_running(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM4stopEv"]
        pub fn Chuck_VM_stop(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM12runningStateEv"]
        pub fn Chuck_VM_runningState(this: *mut root::Chuck_VM) -> *mut libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM5sporkEP13Chuck_VM_CodeP14Chuck_VM_Shredm"]
        pub fn Chuck_VM_spork(
            this: *mut root::Chuck_VM,
            code: *mut root::Chuck_VM_Code,
            parent: *mut root::Chuck_VM_Shred,
            immediate: libc::c_ulong,
        ) -> *mut root::Chuck_VM_Shred;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK8Chuck_VM9shredulerEv"]
        pub fn Chuck_VM_shreduler(this: *const root::Chuck_VM) -> *mut root::Chuck_VM_Shreduler;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM7next_idEv"]
        pub fn Chuck_VM_next_id(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK8Chuck_VM5srateEv"]
        pub fn Chuck_VM_srate(this: *const root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM3runElPKfPf"]
        pub fn Chuck_VM_run(
            this: *mut root::Chuck_VM,
            numFrames: libc::c_long,
            input: *const f32,
            output: *mut f32,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM7computeEv"]
        pub fn Chuck_VM_compute(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM19abort_current_shredEv"]
        pub fn Chuck_VM_abort_current_shred(this: *mut root::Chuck_VM) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM13invoke_staticEP14Chuck_VM_Shred"]
        pub fn Chuck_VM_invoke_static(
            this: *mut root::Chuck_VM,
            shred: *mut root::Chuck_VM_Shred,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM2gcEv"]
        pub fn Chuck_VM_gc(this: *mut root::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM2gcEm"]
        pub fn Chuck_VM_gc1(this: *mut root::Chuck_VM, amount: libc::c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM9queue_msgEP9Chuck_Msgi"]
        pub fn Chuck_VM_queue_msg(
            this: *mut root::Chuck_VM,
            msg: *mut root::Chuck_Msg,
            num_msg: libc::c_int,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM11queue_eventEP11Chuck_EventiP13CBufferSimple"]
        pub fn Chuck_VM_queue_event(
            this: *mut root::Chuck_VM,
            event: *mut root::Chuck_Event,
            num_msg: libc::c_int,
            buffer: *mut root::CBufferSimple,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM11process_msgEP9Chuck_Msg"]
        pub fn Chuck_VM_process_msg(
            this: *mut root::Chuck_VM,
            msg: *mut root::Chuck_Msg,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM9get_replyEv"]
        pub fn Chuck_VM_get_reply(this: *mut root::Chuck_VM) -> *mut root::Chuck_Msg;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM19create_event_bufferEv"]
        pub fn Chuck_VM_create_event_buffer(this: *mut root::Chuck_VM) -> *mut root::CBufferSimple;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM20destroy_event_bufferEP13CBufferSimple"]
        pub fn Chuck_VM_destroy_event_buffer(
            this: *mut root::Chuck_VM,
            buffer: *mut root::CBufferSimple,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK8Chuck_VM10last_errorEv"]
        pub fn Chuck_VM_last_error(this: *const root::Chuck_VM) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM14get_global_intENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvlE"]
        pub fn Chuck_VM_get_global_int(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_long)>,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM14set_global_intENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn Chuck_VM_set_global_int(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
            val: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM16get_global_floatENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvdE"]
        pub fn Chuck_VM_get_global_float(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: f64)>,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM16set_global_floatENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd"]
        pub fn Chuck_VM_set_global_float(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
            val: f64,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM19signal_global_eventENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_signal_global_event(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM22broadcast_global_eventENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_broadcast_global_event(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM15init_global_intENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_init_global_int(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM20get_global_int_valueENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_get_global_int_value(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM21get_ptr_to_global_intENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_get_ptr_to_global_int(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> *mut libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM17init_global_floatENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_init_global_float(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM22get_global_float_valueENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_get_global_float_value(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM23get_ptr_to_global_floatENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_get_ptr_to_global_float(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> *mut f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM17init_global_eventENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP10Chuck_Type"]
        pub fn Chuck_VM_init_global_event(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
            type_: *mut root::Chuck_Type,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM16get_global_eventENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_get_global_event(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> *mut root::Chuck_Event;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM23get_ptr_to_global_eventENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_VM_get_ptr_to_global_event(
            this: *mut root::Chuck_VM,
            name: root::std::__cxx11::string,
        ) -> *mut *mut root::Chuck_Event;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM28handle_global_queue_messagesEv"]
        pub fn Chuck_VM_handle_global_queue_messages(this: *mut root::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK8Chuck_VM7carrierEv"]
        pub fn Chuck_VM_carrier(this: *const root::Chuck_VM) -> *mut root::Chuck_Carrier;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK8Chuck_VM3envEv"]
        pub fn Chuck_VM_env(this: *const root::Chuck_VM) -> *mut root::Chuck_Env;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK8Chuck_VM5choutEv"]
        pub fn Chuck_VM_chout(this: *const root::Chuck_VM) -> *mut root::Chuck_IO_Chout;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK8Chuck_VM5cherrEv"]
        pub fn Chuck_VM_cherr(this: *const root::Chuck_VM) -> *mut root::Chuck_IO_Cherr;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM9input_refEv"]
        pub fn Chuck_VM_input_ref(this: *mut root::Chuck_VM) -> *const f32;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM10output_refEv"]
        pub fn Chuck_VM_output_ref(this: *mut root::Chuck_VM) -> *mut f32;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM5sporkEP14Chuck_VM_Shred"]
        pub fn Chuck_VM_spork1(
            this: *mut root::Chuck_VM,
            shred: *mut root::Chuck_VM_Shred,
        ) -> *mut root::Chuck_VM_Shred;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM4freeEP14Chuck_VM_Shredmm"]
        pub fn Chuck_VM_free(
            this: *mut root::Chuck_VM,
            shred: *mut root::Chuck_VM_Shred,
            cascade: libc::c_ulong,
            dec: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM4dumpEP14Chuck_VM_Shred"]
        pub fn Chuck_VM_dump(this: *mut root::Chuck_VM, shred: *mut root::Chuck_VM_Shred);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VM12release_dumpEv"]
        pub fn Chuck_VM_release_dump(this: *mut root::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VMC1Ev"]
        pub fn Chuck_VM_Chuck_VM(this: *mut root::Chuck_VM);
    }
    impl Default for Chuck_VM {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_VM {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_VM {{ m_carrier: {:?}, m_adc: {:?}, m_dac: {:?}, m_bunghole: {:?}, m_srate: {:?}, m_num_adc_channels: {:?}, m_num_dac_channels: {:?}, m_halt: {:?}, m_is_running: {:?}, m_input_ref: {:?}, m_output_ref: {:?}, m_init: {:?}, m_last_error: {:?}, m_shreds: {:?}, m_num_shreds: {:?}, m_shred_id: {:?}, m_shreduler: {:?}, m_shred_dump: {:?}, m_num_dumped_shreds: {:?}, m_msg_buffer: {:?}, m_reply_buffer: {:?}, m_event_buffer: {:?}, m_event_buffers: {:?}, m_global_ints: {:?}, m_global_floats: {:?}, m_global_events: {:?}, m_global_request_queue: {:?} }}" , self . m_carrier , self . m_adc , self . m_dac , self . m_bunghole , self . m_srate , self . m_num_adc_channels , self . m_num_dac_channels , self . m_halt , self . m_is_running , self . m_input_ref , self . m_output_ref , self . m_init , self . m_last_error , self . m_shreds , self . m_num_shreds , self . m_shred_id , self . m_shreduler , self . m_shred_dump , self . m_num_dumped_shreds , self . m_msg_buffer , self . m_reply_buffer , self . m_event_buffer , self . m_event_buffers , self . m_global_ints , self . m_global_floats , self . m_global_events , self . m_global_request_queue )
        }
    }
    impl Chuck_VM {
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            srate: libc::c_ulong,
            dac_chan: libc::c_ulong,
            adc_chan: libc::c_ulong,
            adaptive: libc::c_ulong,
            halt: libc::c_ulong,
        ) -> libc::c_ulong {
            Chuck_VM_initialize(self, srate, dac_chan, adc_chan, adaptive, halt)
        }
        #[inline]
        pub unsafe fn initialize_synthesis(&mut self) -> libc::c_ulong {
            Chuck_VM_initialize_synthesis(self)
        }
        #[inline]
        pub unsafe fn setCarrier(&mut self, c: *mut root::Chuck_Carrier) -> libc::c_ulong {
            Chuck_VM_setCarrier(self, c)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> libc::c_ulong {
            Chuck_VM_shutdown(self)
        }
        #[inline]
        pub unsafe fn has_init(&mut self) -> libc::c_ulong {
            Chuck_VM_has_init(self)
        }
        #[inline]
        pub unsafe fn start(&mut self) -> libc::c_ulong {
            Chuck_VM_start(self)
        }
        #[inline]
        pub unsafe fn running(&mut self) -> libc::c_ulong {
            Chuck_VM_running(self)
        }
        #[inline]
        pub unsafe fn stop(&mut self) -> libc::c_ulong {
            Chuck_VM_stop(self)
        }
        #[inline]
        pub unsafe fn runningState(&mut self) -> *mut libc::c_ulong {
            Chuck_VM_runningState(self)
        }
        #[inline]
        pub unsafe fn spork(
            &mut self,
            code: *mut root::Chuck_VM_Code,
            parent: *mut root::Chuck_VM_Shred,
            immediate: libc::c_ulong,
        ) -> *mut root::Chuck_VM_Shred {
            Chuck_VM_spork(self, code, parent, immediate)
        }
        #[inline]
        pub unsafe fn shreduler(&self) -> *mut root::Chuck_VM_Shreduler {
            Chuck_VM_shreduler(self)
        }
        #[inline]
        pub unsafe fn next_id(&mut self) -> libc::c_ulong {
            Chuck_VM_next_id(self)
        }
        #[inline]
        pub unsafe fn srate(&self) -> libc::c_ulong {
            Chuck_VM_srate(self)
        }
        #[inline]
        pub unsafe fn run(
            &mut self,
            numFrames: libc::c_long,
            input: *const f32,
            output: *mut f32,
        ) -> libc::c_ulong {
            Chuck_VM_run(self, numFrames, input, output)
        }
        #[inline]
        pub unsafe fn compute(&mut self) -> libc::c_ulong {
            Chuck_VM_compute(self)
        }
        #[inline]
        pub unsafe fn abort_current_shred(&mut self) -> libc::c_ulong {
            Chuck_VM_abort_current_shred(self)
        }
        #[inline]
        pub unsafe fn invoke_static(&mut self, shred: *mut root::Chuck_VM_Shred) -> libc::c_ulong {
            Chuck_VM_invoke_static(self, shred)
        }
        #[inline]
        pub unsafe fn gc(&mut self) {
            Chuck_VM_gc(self)
        }
        #[inline]
        pub unsafe fn gc1(&mut self, amount: libc::c_ulong) {
            Chuck_VM_gc1(self, amount)
        }
        #[inline]
        pub unsafe fn queue_msg(
            &mut self,
            msg: *mut root::Chuck_Msg,
            num_msg: libc::c_int,
        ) -> libc::c_ulong {
            Chuck_VM_queue_msg(self, msg, num_msg)
        }
        #[inline]
        pub unsafe fn queue_event(
            &mut self,
            event: *mut root::Chuck_Event,
            num_msg: libc::c_int,
            buffer: *mut root::CBufferSimple,
        ) -> libc::c_ulong {
            Chuck_VM_queue_event(self, event, num_msg, buffer)
        }
        #[inline]
        pub unsafe fn process_msg(&mut self, msg: *mut root::Chuck_Msg) -> libc::c_ulong {
            Chuck_VM_process_msg(self, msg)
        }
        #[inline]
        pub unsafe fn get_reply(&mut self) -> *mut root::Chuck_Msg {
            Chuck_VM_get_reply(self)
        }
        #[inline]
        pub unsafe fn create_event_buffer(&mut self) -> *mut root::CBufferSimple {
            Chuck_VM_create_event_buffer(self)
        }
        #[inline]
        pub unsafe fn destroy_event_buffer(&mut self, buffer: *mut root::CBufferSimple) {
            Chuck_VM_destroy_event_buffer(self, buffer)
        }
        #[inline]
        pub unsafe fn last_error(&self) -> *const libc::c_char {
            Chuck_VM_last_error(self)
        }
        #[inline]
        pub unsafe fn get_global_int(
            &mut self,
            name: root::std::__cxx11::string,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_long)>,
        ) -> libc::c_ulong {
            Chuck_VM_get_global_int(self, name, callback)
        }
        #[inline]
        pub unsafe fn set_global_int(
            &mut self,
            name: root::std::__cxx11::string,
            val: libc::c_long,
        ) -> libc::c_ulong {
            Chuck_VM_set_global_int(self, name, val)
        }
        #[inline]
        pub unsafe fn get_global_float(
            &mut self,
            name: root::std::__cxx11::string,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: f64)>,
        ) -> libc::c_ulong {
            Chuck_VM_get_global_float(self, name, callback)
        }
        #[inline]
        pub unsafe fn set_global_float(
            &mut self,
            name: root::std::__cxx11::string,
            val: f64,
        ) -> libc::c_ulong {
            Chuck_VM_set_global_float(self, name, val)
        }
        #[inline]
        pub unsafe fn signal_global_event(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_VM_signal_global_event(self, name)
        }
        #[inline]
        pub unsafe fn broadcast_global_event(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_VM_broadcast_global_event(self, name)
        }
        #[inline]
        pub unsafe fn init_global_int(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_VM_init_global_int(self, name)
        }
        #[inline]
        pub unsafe fn get_global_int_value(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> libc::c_long {
            Chuck_VM_get_global_int_value(self, name)
        }
        #[inline]
        pub unsafe fn get_ptr_to_global_int(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> *mut libc::c_long {
            Chuck_VM_get_ptr_to_global_int(self, name)
        }
        #[inline]
        pub unsafe fn init_global_float(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_VM_init_global_float(self, name)
        }
        #[inline]
        pub unsafe fn get_global_float_value(&mut self, name: root::std::__cxx11::string) -> f64 {
            Chuck_VM_get_global_float_value(self, name)
        }
        #[inline]
        pub unsafe fn get_ptr_to_global_float(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> *mut f64 {
            Chuck_VM_get_ptr_to_global_float(self, name)
        }
        #[inline]
        pub unsafe fn init_global_event(
            &mut self,
            name: root::std::__cxx11::string,
            type_: *mut root::Chuck_Type,
        ) -> libc::c_ulong {
            Chuck_VM_init_global_event(self, name, type_)
        }
        #[inline]
        pub unsafe fn get_global_event(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> *mut root::Chuck_Event {
            Chuck_VM_get_global_event(self, name)
        }
        #[inline]
        pub unsafe fn get_ptr_to_global_event(
            &mut self,
            name: root::std::__cxx11::string,
        ) -> *mut *mut root::Chuck_Event {
            Chuck_VM_get_ptr_to_global_event(self, name)
        }
        #[inline]
        pub unsafe fn handle_global_queue_messages(&mut self) {
            Chuck_VM_handle_global_queue_messages(self)
        }
        #[inline]
        pub unsafe fn carrier(&self) -> *mut root::Chuck_Carrier {
            Chuck_VM_carrier(self)
        }
        #[inline]
        pub unsafe fn env(&self) -> *mut root::Chuck_Env {
            Chuck_VM_env(self)
        }
        #[inline]
        pub unsafe fn chout(&self) -> *mut root::Chuck_IO_Chout {
            Chuck_VM_chout(self)
        }
        #[inline]
        pub unsafe fn cherr(&self) -> *mut root::Chuck_IO_Cherr {
            Chuck_VM_cherr(self)
        }
        #[inline]
        pub unsafe fn input_ref(&mut self) -> *const f32 {
            Chuck_VM_input_ref(self)
        }
        #[inline]
        pub unsafe fn output_ref(&mut self) -> *mut f32 {
            Chuck_VM_output_ref(self)
        }
        #[inline]
        pub unsafe fn spork1(
            &mut self,
            shred: *mut root::Chuck_VM_Shred,
        ) -> *mut root::Chuck_VM_Shred {
            Chuck_VM_spork1(self, shred)
        }
        #[inline]
        pub unsafe fn free(
            &mut self,
            shred: *mut root::Chuck_VM_Shred,
            cascade: libc::c_ulong,
            dec: libc::c_ulong,
        ) -> libc::c_ulong {
            Chuck_VM_free(self, shred, cascade, dec)
        }
        #[inline]
        pub unsafe fn dump(&mut self, shred: *mut root::Chuck_VM_Shred) {
            Chuck_VM_dump(self, shred)
        }
        #[inline]
        pub unsafe fn release_dump(&mut self) {
            Chuck_VM_release_dump(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_VM_Chuck_VM(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8Chuck_VMD1Ev"]
        pub fn Chuck_VM_Chuck_VM_destructor(this: *mut root::Chuck_VM);
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum Chuck_Msg_Type {
        MSG_ADD = 1,
        MSG_REMOVE = 2,
        MSG_REMOVEALL = 3,
        MSG_REPLACE = 4,
        MSG_STATUS = 5,
        MSG_PAUSE = 6,
        MSG_KILL = 7,
        MSG_TIME = 8,
        MSG_RESET_ID = 9,
        MSG_DONE = 10,
        MSG_ABORT = 11,
        MSG_ERROR = 12,
        MSG_CLEARVM = 13,
    }
    pub type ck_msg_func = ::std::option::Option<unsafe extern "C" fn(msg: *const root::Chuck_Msg)>;
    #[repr(C)]
    #[derive(Debug, PartialOrd, PartialEq)]
    pub struct Chuck_Msg {
        pub type_: libc::c_ulong,
        pub param: libc::c_ulong,
        pub code: *mut root::Chuck_VM_Code,
        pub shred: *mut root::Chuck_VM_Shred,
        pub when: f64,
        pub user: *mut libc::c_void,
        pub reply: root::ck_msg_func,
        pub replyA: libc::c_ulong,
        pub replyB: libc::c_ulong,
        pub replyC: *mut libc::c_void,
        pub args: *mut root::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Msg() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Msg>(),
            88usize,
            concat!("Size of: ", stringify!(Chuck_Msg))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Msg>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Msg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).type_ as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).param as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(param)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).code as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).shred as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(shred)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).when as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(when)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).user as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(user)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).reply as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(reply)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).replyA as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(replyA)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).replyB as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(replyB)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).replyC as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(replyC)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Msg>())).args as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Msg),
                "::",
                stringify!(args)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Msg5clearEv"]
        pub fn Chuck_Msg_clear(this: *mut root::Chuck_Msg);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_Msg3setERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE"]
        pub fn Chuck_Msg_set(this: *mut root::Chuck_Msg, vargs: *const root::std::vector);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_MsgC1Ev"]
        pub fn Chuck_Msg_Chuck_Msg(this: *mut root::Chuck_Msg);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9Chuck_MsgD1Ev"]
        pub fn Chuck_Msg_Chuck_Msg_destructor(this: *mut root::Chuck_Msg);
    }
    impl Default for Chuck_Msg {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl Chuck_Msg {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Chuck_Msg_clear(self)
        }
        #[inline]
        pub unsafe fn set(&mut self, vargs: *const root::std::vector) {
            Chuck_Msg_set(self, vargs)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Msg_Chuck_Msg(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            Chuck_Msg_Chuck_Msg_destructor(self)
        }
    }
    #[repr(C)]
    pub struct Chuck_Compiler__bindgen_vtable(libc::c_void);
    #[repr(C)]
    pub struct Chuck_Compiler {
        pub vtable_: *const Chuck_Compiler__bindgen_vtable,
        pub m_carrier: *mut root::Chuck_Carrier,
        pub emitter: *mut root::Chuck_Emitter,
        pub code: *mut root::Chuck_VM_Code,
        pub m_auto_depend: libc::c_ulong,
        pub m_recent: root::std::map,
        pub m_dlls: root::std::__cxx11::list,
        pub m_cklibs_to_preload: root::std::__cxx11::list,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Compiler() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Compiler>(),
            136usize,
            concat!("Size of: ", stringify!(Chuck_Compiler))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Compiler>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Compiler))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).m_carrier as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).emitter as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(emitter)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).code as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Compiler>())).m_auto_depend as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_auto_depend)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).m_recent as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_recent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Compiler>())).m_dlls as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_dlls)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Compiler>())).m_cklibs_to_preload as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Compiler),
                "::",
                stringify!(m_cklibs_to_preload)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK14Chuck_Compiler3envEv"]
        pub fn Chuck_Compiler_env(this: *const root::Chuck_Compiler) -> *mut root::Chuck_Env;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK14Chuck_Compiler2vmEv"]
        pub fn Chuck_Compiler_vm(this: *const root::Chuck_Compiler) -> *mut root::Chuck_VM;
    }
    extern "C" {
        #[link_name = "\u{1}_ZNK14Chuck_Compiler7carrierEv"]
        pub fn Chuck_Compiler_carrier(
            this: *const root::Chuck_Compiler,
        ) -> *mut root::Chuck_Carrier;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler10setCarrierEP13Chuck_Carrier"]
        pub fn Chuck_Compiler_setCarrier(
            this: *mut root::Chuck_Compiler,
            c: *mut root::Chuck_Carrier,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler10initializeERNSt7__cxx114listINS0_12basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEES9_"]
        pub fn Chuck_Compiler_initialize(
            this: *mut root::Chuck_Compiler,
            chugin_search_paths: *mut root::std::__cxx11::list,
            named_dls: *mut root::std::__cxx11::list,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler8shutdownEv"]
        pub fn Chuck_Compiler_shutdown(this: *mut root::Chuck_Compiler);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler4bindEPFmP14Chuck_DL_QueryERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_"]
        pub fn Chuck_Compiler_bind(
            this: *mut root::Chuck_Compiler,
            query_func: root::f_ck_query,
            name: *const root::std::__cxx11::string,
            nspc: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler15set_auto_dependEm"]
        pub fn Chuck_Compiler_set_auto_depend(this: *mut root::Chuck_Compiler, v: libc::c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler2goERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8_IO_FILEPKcS7_"]
        pub fn Chuck_Compiler_go(
            this: *mut root::Chuck_Compiler,
            filename: *const root::std::__cxx11::string,
            fd: *mut root::FILE,
            str_src: *const libc::c_char,
            full_path: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler7resolveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Compiler_resolve(
            this: *mut root::Chuck_Compiler,
            type_: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler6outputEv"]
        pub fn Chuck_Compiler_output(this: *mut root::Chuck_Compiler) -> *mut root::Chuck_VM_Code;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler14do_entire_fileEP13Chuck_Context"]
        pub fn Chuck_Compiler_do_entire_file(
            this: *mut root::Chuck_Compiler,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler15do_only_classesEP13Chuck_Context"]
        pub fn Chuck_Compiler_do_only_classes(
            this: *mut root::Chuck_Compiler,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler21do_all_except_classesEP13Chuck_Context"]
        pub fn Chuck_Compiler_do_all_except_classes(
            this: *mut root::Chuck_Compiler,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler9do_normalERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8_IO_FILEPKcS7_"]
        pub fn Chuck_Compiler_do_normal(
            this: *mut root::Chuck_Compiler,
            path: *const root::std::__cxx11::string,
            fd: *mut root::FILE,
            str_src: *const libc::c_char,
            full_path: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler16find_recent_pathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Compiler_find_recent_path(
            this: *mut root::Chuck_Compiler,
            path: *const root::std::__cxx11::string,
        ) -> *mut root::Chuck_Context;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler16find_recent_typeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Compiler_find_recent_type(
            this: *mut root::Chuck_Compiler,
            type_: *const root::std::__cxx11::string,
        ) -> *mut root::Chuck_Context;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Compiler15add_recent_pathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13Chuck_Context"]
        pub fn Chuck_Compiler_add_recent_path(
            this: *mut root::Chuck_Compiler,
            path: *const root::std::__cxx11::string,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_CompilerC1Ev"]
        pub fn Chuck_Compiler_Chuck_Compiler(this: *mut root::Chuck_Compiler);
    }
    impl Default for Chuck_Compiler {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Compiler {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Compiler {{ m_carrier: {:?}, emitter: {:?}, code: {:?}, m_auto_depend: {:?}, m_recent: {:?}, m_dlls: {:?}, m_cklibs_to_preload: {:?} }}" , self . m_carrier , self . emitter , self . code , self . m_auto_depend , self . m_recent , self . m_dlls , self . m_cklibs_to_preload )
        }
    }
    impl Chuck_Compiler {
        #[inline]
        pub unsafe fn env(&self) -> *mut root::Chuck_Env {
            Chuck_Compiler_env(self)
        }
        #[inline]
        pub unsafe fn vm(&self) -> *mut root::Chuck_VM {
            Chuck_Compiler_vm(self)
        }
        #[inline]
        pub unsafe fn carrier(&self) -> *mut root::Chuck_Carrier {
            Chuck_Compiler_carrier(self)
        }
        #[inline]
        pub unsafe fn setCarrier(&mut self, c: *mut root::Chuck_Carrier) -> libc::c_ulong {
            Chuck_Compiler_setCarrier(self, c)
        }
        #[inline]
        pub unsafe fn initialize(
            &mut self,
            chugin_search_paths: *mut root::std::__cxx11::list,
            named_dls: *mut root::std::__cxx11::list,
        ) -> libc::c_ulong {
            Chuck_Compiler_initialize(self, chugin_search_paths, named_dls)
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) {
            Chuck_Compiler_shutdown(self)
        }
        #[inline]
        pub unsafe fn bind(
            &mut self,
            query_func: root::f_ck_query,
            name: *const root::std::__cxx11::string,
            nspc: *const root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_Compiler_bind(self, query_func, name, nspc)
        }
        #[inline]
        pub unsafe fn set_auto_depend(&mut self, v: libc::c_ulong) {
            Chuck_Compiler_set_auto_depend(self, v)
        }
        #[inline]
        pub unsafe fn go(
            &mut self,
            filename: *const root::std::__cxx11::string,
            fd: *mut root::FILE,
            str_src: *const libc::c_char,
            full_path: *const root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_Compiler_go(self, filename, fd, str_src, full_path)
        }
        #[inline]
        pub unsafe fn resolve(
            &mut self,
            type_: *const root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_Compiler_resolve(self, type_)
        }
        #[inline]
        pub unsafe fn output(&mut self) -> *mut root::Chuck_VM_Code {
            Chuck_Compiler_output(self)
        }
        #[inline]
        pub unsafe fn do_entire_file(
            &mut self,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong {
            Chuck_Compiler_do_entire_file(self, context)
        }
        #[inline]
        pub unsafe fn do_only_classes(
            &mut self,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong {
            Chuck_Compiler_do_only_classes(self, context)
        }
        #[inline]
        pub unsafe fn do_all_except_classes(
            &mut self,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong {
            Chuck_Compiler_do_all_except_classes(self, context)
        }
        #[inline]
        pub unsafe fn do_normal(
            &mut self,
            path: *const root::std::__cxx11::string,
            fd: *mut root::FILE,
            str_src: *const libc::c_char,
            full_path: *const root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_Compiler_do_normal(self, path, fd, str_src, full_path)
        }
        #[inline]
        pub unsafe fn find_recent_path(
            &mut self,
            path: *const root::std::__cxx11::string,
        ) -> *mut root::Chuck_Context {
            Chuck_Compiler_find_recent_path(self, path)
        }
        #[inline]
        pub unsafe fn find_recent_type(
            &mut self,
            type_: *const root::std::__cxx11::string,
        ) -> *mut root::Chuck_Context {
            Chuck_Compiler_find_recent_type(self, type_)
        }
        #[inline]
        pub unsafe fn add_recent_path(
            &mut self,
            path: *const root::std::__cxx11::string,
            context: *mut root::Chuck_Context,
        ) -> libc::c_ulong {
            Chuck_Compiler_add_recent_path(self, path, context)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Compiler_Chuck_Compiler(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_CompilerD1Ev"]
        pub fn Chuck_Compiler_Chuck_Compiler_destructor(this: *mut root::Chuck_Compiler);
    }
    pub type Chuck_Shell_Request = root::std::__cxx11::string;
    pub type Chuck_Shell_Response = root::std::__cxx11::string;
    #[repr(C)]
    pub struct Chuck_Shell__bindgen_vtable(libc::c_void);
    #[repr(C)]
    pub struct Chuck_Shell {
        pub vtable_: *const Chuck_Shell__bindgen_vtable,
        pub vms: root::std::vector,
        pub process_vm: *mut root::Chuck_VM,
        pub current_vm: *mut root::Chuck_Shell_VM,
        pub aliases: root::std::map,
        pub variables: root::std::map,
        pub commands: root::std::map,
        pub allocated_commands: root::std::vector,
        pub saved_code: root::std::map,
        pub code: root::std::__cxx11::string,
        pub ui: *mut root::Chuck_Shell_UI,
        pub initialized: libc::c_ulong,
        pub stop: libc::c_ulong,
        pub prompt: root::std::__cxx11::string,
        pub in_: root::std::__cxx11::string,
        pub code_entry_active: libc::c_ulong,
        pub scope: libc::c_ulong,
    }
    #[repr(C)]
    pub struct Chuck_Shell_Command__bindgen_vtable(libc::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command {
        pub vtable_: *const Chuck_Shell_Command__bindgen_vtable,
        pub caller: *mut root::Chuck_Shell,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell_Command>())).caller as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command),
                "::",
                stringify!(caller)
            )
        );
    }
    impl Default for Chuck_Shell_Command {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Shell_Command_VM {
        pub _base: root::Chuck_Shell_Command,
        pub commands: root::std::map,
        pub allocated_commands: root::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VM() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_VM>(),
            88usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VM))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_VM>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VM))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Command_VM>())).commands as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command_VM),
                "::",
                stringify!(commands)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Command_VM>())).allocated_commands as *const _
                    as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command_VM),
                "::",
                stringify!(allocated_commands)
            )
        );
    }
    impl Default for Chuck_Shell_Command_VM {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Shell_Command_VM {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Shell_Command_VM {{ commands: {:?}, allocated_commands: {:?} }}",
                self.commands, self.allocated_commands
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMAdd {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMAdd() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_VMAdd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMAdd))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_VMAdd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMAdd))
        );
    }
    impl Default for Chuck_Shell_Command_VMAdd {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMRemove {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMRemove() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_VMRemove>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMRemove))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_VMRemove>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMRemove))
        );
    }
    impl Default for Chuck_Shell_Command_VMRemove {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMAttach {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMAttach() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_VMAttach>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMAttach))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_VMAttach>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMAttach))
        );
    }
    impl Default for Chuck_Shell_Command_VMAttach {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMList {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMList() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_VMList>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMList))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_VMList>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMList))
        );
    }
    impl Default for Chuck_Shell_Command_VMList {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMSwap {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMSwap() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_VMSwap>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMSwap))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_VMSwap>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMSwap))
        );
    }
    impl Default for Chuck_Shell_Command_VMSwap {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_VMAttachAdd {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_VMAttachAdd() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_VMAttachAdd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_VMAttachAdd))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_VMAttachAdd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_VMAttachAdd))
        );
    }
    impl Default for Chuck_Shell_Command_VMAttachAdd {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Add {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Add() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Add>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Add))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Add>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Add))
        );
    }
    impl Default for Chuck_Shell_Command_Add {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Remove {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Remove() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Remove>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Remove))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Remove>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Remove))
        );
    }
    impl Default for Chuck_Shell_Command_Remove {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Status {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Status() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Status>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Status))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Status>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Status))
        );
    }
    impl Default for Chuck_Shell_Command_Status {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Removeall {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Removeall() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Removeall>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Removeall))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Removeall>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Removeall))
        );
    }
    impl Default for Chuck_Shell_Command_Removeall {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Removelast {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Removelast() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Removelast>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Removelast))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Removelast>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Removelast))
        );
    }
    impl Default for Chuck_Shell_Command_Removelast {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Replace {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Replace() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Replace>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Replace))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Replace>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Replace))
        );
    }
    impl Default for Chuck_Shell_Command_Replace {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Kill {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Kill() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Kill>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Kill))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Kill>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Kill))
        );
    }
    impl Default for Chuck_Shell_Command_Kill {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Close {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Close() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Close>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Close))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Close>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Close))
        );
    }
    impl Default for Chuck_Shell_Command_Close {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Exit {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Exit() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Exit>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Exit))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Exit>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Exit))
        );
    }
    impl Default for Chuck_Shell_Command_Exit {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Ls {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Ls() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Ls>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Ls))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Ls>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Ls))
        );
    }
    impl Default for Chuck_Shell_Command_Ls {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Cd {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Cd() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Cd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Cd))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Cd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Cd))
        );
    }
    impl Default for Chuck_Shell_Command_Cd {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Pwd {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Pwd() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Pwd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Pwd))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Pwd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Pwd))
        );
    }
    impl Default for Chuck_Shell_Command_Pwd {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Alias {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Alias() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Alias>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Alias))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Alias>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Alias))
        );
    }
    impl Default for Chuck_Shell_Command_Alias {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Unalias {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Unalias() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Unalias>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Unalias))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Unalias>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Unalias))
        );
    }
    impl Default for Chuck_Shell_Command_Unalias {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Source {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Source() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Source>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Source))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Source>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Source))
        );
    }
    impl Default for Chuck_Shell_Command_Source {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct Chuck_Shell_Command_Code {
        pub _base: root::Chuck_Shell_Command,
        pub commands: root::std::map,
        pub allocated_commands: root::std::vector,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Code() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Code>(),
            88usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Code))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Code>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Code))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Command_Code>())).commands as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command_Code),
                "::",
                stringify!(commands)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Command_Code>())).allocated_commands as *const _
                    as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Command_Code),
                "::",
                stringify!(allocated_commands)
            )
        );
    }
    impl Default for Chuck_Shell_Command_Code {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Shell_Command_Code {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Shell_Command_Code {{ commands: {:?}, allocated_commands: {:?} }}",
                self.commands, self.allocated_commands
            )
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeContext {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeContext() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_CodeContext>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeContext))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_CodeContext>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeContext))
        );
    }
    impl Default for Chuck_Shell_Command_CodeContext {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeSave {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeSave() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_CodeSave>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeSave))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_CodeSave>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeSave))
        );
    }
    impl Default for Chuck_Shell_Command_CodeSave {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeDelete {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeDelete() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_CodeDelete>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeDelete))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_CodeDelete>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeDelete))
        );
    }
    impl Default for Chuck_Shell_Command_CodeDelete {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeAdd {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeAdd() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_CodeAdd>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeAdd))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_CodeAdd>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeAdd))
        );
    }
    impl Default for Chuck_Shell_Command_CodeAdd {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeList {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeList() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_CodeList>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeList))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_CodeList>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeList))
        );
    }
    impl Default for Chuck_Shell_Command_CodeList {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodePrint {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodePrint() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_CodePrint>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodePrint))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_CodePrint>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodePrint))
        );
    }
    impl Default for Chuck_Shell_Command_CodePrint {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeWrite {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeWrite() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_CodeWrite>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeWrite))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_CodeWrite>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeWrite))
        );
    }
    impl Default for Chuck_Shell_Command_CodeWrite {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_CodeRead {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_CodeRead() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_CodeRead>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_CodeRead))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_CodeRead>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_CodeRead))
        );
    }
    impl Default for Chuck_Shell_Command_CodeRead {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_Command_Help {
        pub _base: root::Chuck_Shell_Command,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Command_Help() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Command_Help>(),
            16usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Command_Help))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Command_Help>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Command_Help))
        );
    }
    impl Default for Chuck_Shell_Command_Help {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell>(),
            400usize,
            concat!("Size of: ", stringify!(Chuck_Shell))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).vms as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(vms)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).process_vm as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(process_vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).current_vm as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(current_vm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).aliases as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(aliases)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).variables as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(variables)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).commands as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(commands)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell>())).allocated_commands as *const _ as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(allocated_commands)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).saved_code as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(saved_code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).code as *const _ as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(code)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).ui as *const _ as usize },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(ui)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).initialized as *const _ as usize },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(initialized)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).stop as *const _ as usize },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(stop)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).prompt as *const _ as usize },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(prompt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).in_ as *const _ as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(in_)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell>())).code_entry_active as *const _ as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(code_entry_active)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell>())).scope as *const _ as usize },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell),
                "::",
                stringify!(scope)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell4initEP8Chuck_VMP14Chuck_Shell_UI"]
        pub fn Chuck_Shell_init(
            this: *mut root::Chuck_Shell,
            process_vm: *mut root::Chuck_VM,
            arg1: *mut root::Chuck_Shell_UI,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell3runEv"]
        pub fn Chuck_Shell_run(this: *mut root::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell7executeERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_"]
        pub fn Chuck_Shell_execute(
            this: *mut root::Chuck_Shell,
            arg1: *mut root::std::__cxx11::string,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell5closeEv"]
        pub fn Chuck_Shell_close(this: *mut root::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell4exitEv"]
        pub fn Chuck_Shell_exit(this: *mut root::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell7do_globERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_RSt6vectorIS5_SaIS5_EE"]
        pub fn Chuck_Shell_do_glob(
            this: *mut root::Chuck_Shell,
            arg1: *const root::std::__cxx11::string,
            arg2: *mut root::std::__cxx11::string,
            arg3: *mut root::std::vector,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell7do_codeERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S5_"]
        pub fn Chuck_Shell_do_code(
            this: *mut root::Chuck_Shell,
            arg1: *mut root::std::__cxx11::string,
            arg2: *mut root::std::__cxx11::string,
            command: root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell15do_code_contextERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Shell_do_code_context(
            this: *mut root::Chuck_Shell,
            arg1: *mut root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell10do_aliasesEv"]
        pub fn Chuck_Shell_do_aliases(this: *mut root::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell12do_variablesEv"]
        pub fn Chuck_Shell_do_variables(this: *mut root::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell10start_codeEv"]
        pub fn Chuck_Shell_start_code(this: *mut root::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell13continue_codeERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Shell_continue_code(
            this: *mut root::Chuck_Shell,
            arg1: *mut root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell11string_hashERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_"]
        pub fn Chuck_Shell_string_hash(
            this: *mut root::Chuck_Shell,
            arg1: *mut root::std::__cxx11::string,
            arg2: *mut root::std::__cxx11::string,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_ShellC1Ev"]
        pub fn Chuck_Shell_Chuck_Shell(this: *mut root::Chuck_Shell);
    }
    impl Default for Chuck_Shell {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Shell {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Chuck_Shell {{ vms: {:?}, process_vm: {:?}, current_vm: {:?}, aliases: {:?}, variables: {:?}, commands: {:?}, allocated_commands: {:?}, saved_code: {:?}, code: {:?}, ui: {:?}, initialized: {:?}, stop: {:?}, prompt: {:?}, in: {:?}, code_entry_active: {:?}, scope: {:?} }}" , self . vms , self . process_vm , self . current_vm , self . aliases , self . variables , self . commands , self . allocated_commands , self . saved_code , self . code , self . ui , self . initialized , self . stop , self . prompt , self . in_ , self . code_entry_active , self . scope )
        }
    }
    impl Chuck_Shell {
        #[inline]
        pub unsafe fn init(
            &mut self,
            process_vm: *mut root::Chuck_VM,
            arg1: *mut root::Chuck_Shell_UI,
        ) -> libc::c_ulong {
            Chuck_Shell_init(self, process_vm, arg1)
        }
        #[inline]
        pub unsafe fn run(&mut self) {
            Chuck_Shell_run(self)
        }
        #[inline]
        pub unsafe fn execute(
            &mut self,
            arg1: *mut root::std::__cxx11::string,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong {
            Chuck_Shell_execute(self, arg1, arg2)
        }
        #[inline]
        pub unsafe fn close(&mut self) {
            Chuck_Shell_close(self)
        }
        #[inline]
        pub unsafe fn exit(&mut self) {
            Chuck_Shell_exit(self)
        }
        #[inline]
        pub unsafe fn do_glob(
            &mut self,
            arg1: *const root::std::__cxx11::string,
            arg2: *mut root::std::__cxx11::string,
            arg3: *mut root::std::vector,
        ) -> libc::c_ulong {
            Chuck_Shell_do_glob(self, arg1, arg2, arg3)
        }
        #[inline]
        pub unsafe fn do_code(
            &mut self,
            arg1: *mut root::std::__cxx11::string,
            arg2: *mut root::std::__cxx11::string,
            command: root::std::__cxx11::string,
        ) {
            Chuck_Shell_do_code(self, arg1, arg2, command)
        }
        #[inline]
        pub unsafe fn do_code_context(&mut self, arg1: *mut root::std::__cxx11::string) {
            Chuck_Shell_do_code_context(self, arg1)
        }
        #[inline]
        pub unsafe fn do_aliases(&mut self) {
            Chuck_Shell_do_aliases(self)
        }
        #[inline]
        pub unsafe fn do_variables(&mut self) {
            Chuck_Shell_do_variables(self)
        }
        #[inline]
        pub unsafe fn start_code(&mut self) {
            Chuck_Shell_start_code(self)
        }
        #[inline]
        pub unsafe fn continue_code(&mut self, arg1: *mut root::std::__cxx11::string) {
            Chuck_Shell_continue_code(self, arg1)
        }
        #[inline]
        pub unsafe fn string_hash(
            &mut self,
            arg1: *mut root::std::__cxx11::string,
            arg2: *mut root::std::__cxx11::string,
        ) {
            Chuck_Shell_string_hash(self, arg1, arg2)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Chuck_Shell_Chuck_Shell(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_ShellD1Ev"]
        pub fn Chuck_Shell_Chuck_Shell_destructor(this: *mut root::Chuck_Shell);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell7CommandD1Ev"]
        pub fn Chuck_Shell_Command_Command_destructor(this: *mut root::Chuck_Shell_Command);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell7Command4initEPS_"]
        pub fn Chuck_Shell_Command_init(
            this: *mut libc::c_void,
            arg1: *mut root::Chuck_Shell,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell7Command5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_usage(this: *mut libc::c_void) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell7Command10long_usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_long_usage(
            this: *mut libc::c_void,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell10Command_VMD1Ev"]
        pub fn Chuck_Shell_Command_VM_Command_VM_destructor(
            this: *mut root::Chuck_Shell_Command_VM,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell10Command_VM4initEPS_"]
        pub fn Chuck_Shell_Command_VM_init(
            this: *mut libc::c_void,
            arg1: *mut root::Chuck_Shell,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell10Command_VM7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_VM_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell10Command_VM5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_VM_usage(this: *mut libc::c_void) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell13Command_VMAdd7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_VMAdd_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell16Command_VMRemove7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_VMRemove_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell16Command_VMAttach7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_VMAttach_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell14Command_VMList7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_VMList_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell14Command_VMSwap7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_VMSwap_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell19Command_VMAttachAdd7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_VMAttachAdd_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell11Command_Add7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Add_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell11Command_Add5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_Add_usage(this: *mut libc::c_void)
            -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell14Command_Remove7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Remove_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell14Command_Remove5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_Remove_usage(
            this: *mut libc::c_void,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell14Command_Status7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Status_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell14Command_Status5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_Status_usage(
            this: *mut libc::c_void,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell17Command_Removeall7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Removeall_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell17Command_Removeall5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_Removeall_usage(
            this: *mut libc::c_void,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell18Command_Removelast7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Removelast_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell18Command_Removelast5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_Removelast_usage(
            this: *mut libc::c_void,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell15Command_Replace7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Replace_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell15Command_Replace5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_Replace_usage(
            this: *mut libc::c_void,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell12Command_Kill7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Kill_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell13Command_Close7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Close_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell12Command_Exit7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Exit_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell10Command_Ls7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Ls_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell10Command_Cd7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Cd_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell11Command_Pwd7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Pwd_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell13Command_Alias7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Alias_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell15Command_Unalias7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Unalias_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell14Command_Source7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Source_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell12Command_CodeD1Ev"]
        pub fn Chuck_Shell_Command_Code_Command_Code_destructor(
            this: *mut root::Chuck_Shell_Command_Code,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell12Command_Code4initEPS_"]
        pub fn Chuck_Shell_Command_Code_init(
            this: *mut libc::c_void,
            arg1: *mut root::Chuck_Shell,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell12Command_Code7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Code_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell12Command_Code5usageB5cxx11Ev"]
        pub fn Chuck_Shell_Command_Code_usage(
            this: *mut libc::c_void,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell19Command_CodeContext7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_CodeContext_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell16Command_CodeSave7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_CodeSave_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell18Command_CodeDelete7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_CodeDelete_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell15Command_CodeAdd7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_CodeAdd_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell16Command_CodeList7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_CodeList_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell17Command_CodePrint7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_CodePrint_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell17Command_CodeWrite7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_CodeWrite_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell16Command_CodeRead7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_CodeRead_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN11Chuck_Shell12Command_Help7executeERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERS7_"]
        pub fn Chuck_Shell_Command_Help_execute(
            this: *mut libc::c_void,
            arg1: *mut root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    #[repr(C)]
    pub struct Chuck_Shell_VM__bindgen_vtable(libc::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_VM {
        pub vtable_: *const Chuck_Shell_VM__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_VM() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_VM>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Shell_VM))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_VM>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_VM))
        );
    }
    impl Default for Chuck_Shell_VM {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Shell_VMD1Ev"]
        pub fn Chuck_Shell_VM_Chuck_Shell_VM_destructor(this: *mut root::Chuck_Shell_VM);
    }
    #[repr(C)]
    pub struct Chuck_Shell_Network_VM {
        pub _base: root::Chuck_Shell_VM,
        pub hostname: root::std::__cxx11::string,
        pub port: libc::c_long,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_Network_VM() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_Network_VM>(),
            48usize,
            concat!("Size of: ", stringify!(Chuck_Shell_Network_VM))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_Network_VM>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_Network_VM))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<Chuck_Shell_Network_VM>())).hostname as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Network_VM),
                "::",
                stringify!(hostname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Chuck_Shell_Network_VM>())).port as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Chuck_Shell_Network_VM),
                "::",
                stringify!(port)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM4initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn Chuck_Shell_Network_VM_init(
            this: *mut root::Chuck_Shell_Network_VM,
            arg1: *const root::std::__cxx11::string,
            arg2: libc::c_long,
        ) -> libc::c_ulong;
    }
    impl Default for Chuck_Shell_Network_VM {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Chuck_Shell_Network_VM {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "Chuck_Shell_Network_VM {{ hostname: {:?}, port: {:?} }}",
                self.hostname, self.port
            )
        }
    }
    impl Chuck_Shell_Network_VM {
        #[inline]
        pub unsafe fn init(
            &mut self,
            arg1: *const root::std::__cxx11::string,
            arg2: libc::c_long,
        ) -> libc::c_ulong {
            Chuck_Shell_Network_VM_init(self, arg1, arg2)
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VMD1Ev"]
        pub fn Chuck_Shell_Network_VM_Chuck_Shell_Network_VM_destructor(
            this: *mut root::Chuck_Shell_Network_VM,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM4copyEv"]
        pub fn Chuck_Shell_Network_VM_copy(this: *mut libc::c_void) -> *mut root::Chuck_Shell_VM;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM9add_shredERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EERS6_"]
        pub fn Chuck_Shell_Network_VM_add_shred(
            this: *mut libc::c_void,
            arg1: *const root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM12remove_shredERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EERS6_"]
        pub fn Chuck_Shell_Network_VM_remove_shred(
            this: *mut libc::c_void,
            arg1: *const root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM10remove_allERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Shell_Network_VM_remove_all(
            this: *mut libc::c_void,
            arg1: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM11remove_lastERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Shell_Network_VM_remove_last(
            this: *mut libc::c_void,
            arg1: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM13replace_shredERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EERS6_"]
        pub fn Chuck_Shell_Network_VM_replace_shred(
            this: *mut libc::c_void,
            arg1: *const root::std::vector,
            arg2: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM6statusERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Shell_Network_VM_status(
            this: *mut libc::c_void,
            arg1: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM4killERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn Chuck_Shell_Network_VM_kill(
            this: *mut libc::c_void,
            arg1: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN22Chuck_Shell_Network_VM8fullnameB5cxx11Ev"]
        pub fn Chuck_Shell_Network_VM_fullname(
            this: *mut libc::c_void,
        ) -> root::std::__cxx11::string;
    }
    #[repr(C)]
    pub struct Chuck_Shell_UI__bindgen_vtable(libc::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct Chuck_Shell_UI {
        pub vtable_: *const Chuck_Shell_UI__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_Chuck_Shell_UI() {
        assert_eq!(
            ::std::mem::size_of::<Chuck_Shell_UI>(),
            8usize,
            concat!("Size of: ", stringify!(Chuck_Shell_UI))
        );
        assert_eq!(
            ::std::mem::align_of::<Chuck_Shell_UI>(),
            8usize,
            concat!("Alignment of ", stringify!(Chuck_Shell_UI))
        );
    }
    impl Default for Chuck_Shell_UI {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Shell_UID1Ev"]
        pub fn Chuck_Shell_UI_Chuck_Shell_UI_destructor(this: *mut root::Chuck_Shell_UI);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14Chuck_Shell_UI4initEv"]
        pub fn Chuck_Shell_UI_init(this: *mut libc::c_void) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z8shell_cbPv"]
        pub fn shell_cb(p: *mut libc::c_void) -> *mut libc::c_void;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct iovec {
        pub iov_base: *mut libc::c_void,
        pub iov_len: usize,
    }
    #[test]
    fn bindgen_test_layout_iovec() {
        assert_eq!(
            ::std::mem::size_of::<iovec>(),
            16usize,
            concat!("Size of: ", stringify!(iovec))
        );
        assert_eq!(
            ::std::mem::align_of::<iovec>(),
            8usize,
            concat!("Alignment of ", stringify!(iovec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iovec),
                "::",
                stringify!(iov_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(iovec),
                "::",
                stringify!(iov_len)
            )
        );
    }
    impl Default for iovec {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type socklen_t = root::__socklen_t;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum __socket_type {
        SOCK_STREAM = 1,
        SOCK_DGRAM = 2,
        SOCK_RAW = 3,
        SOCK_RDM = 4,
        SOCK_SEQPACKET = 5,
        SOCK_DCCP = 6,
        SOCK_PACKET = 10,
        SOCK_CLOEXEC = 524288,
        SOCK_NONBLOCK = 2048,
    }
    pub type sa_family_t = libc::c_ushort;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sockaddr {
        pub sa_family: root::sa_family_t,
        pub sa_data: [libc::c_char; 14usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(sockaddr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr),
                "::",
                stringify!(sa_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr),
                "::",
                stringify!(sa_data)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_storage {
        pub ss_family: root::sa_family_t,
        pub __ss_padding: [libc::c_char; 118usize],
        pub __ss_align: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_storage() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_storage>(),
            128usize,
            concat!("Size of: ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_storage>(),
            8usize,
            concat!("Alignment of ", stringify!(sockaddr_storage))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(ss_family)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(__ss_padding)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_storage),
                "::",
                stringify!(__ss_align)
            )
        );
    }
    impl Default for sockaddr_storage {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for sockaddr_storage {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "sockaddr_storage {{ ss_family: {:?}, __ss_padding: [{}], __ss_align: {:?} }}",
                self.ss_family,
                self.__ss_padding
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>(),
                self.__ss_align
            )
        }
    }
    impl ::std::cmp::PartialEq for sockaddr_storage {
        fn eq(&self, other: &sockaddr_storage) -> bool {
            self.ss_family == other.ss_family
                && &self.__ss_padding[..] == &other.__ss_padding[..]
                && self.__ss_align == other.__ss_align
        }
    }
    pub const MSG_OOB: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_OOB;
    pub const MSG_PEEK: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_PEEK;
    pub const MSG_DONTROUTE: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_DONTROUTE;
    pub const MSG_TRYHARD: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_DONTROUTE;
    pub const MSG_CTRUNC: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_CTRUNC;
    pub const MSG_PROXY: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_PROXY;
    pub const MSG_TRUNC: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_TRUNC;
    pub const MSG_DONTWAIT: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_DONTWAIT;
    pub const MSG_EOR: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_EOR;
    pub const MSG_WAITALL: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_WAITALL;
    pub const MSG_FIN: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_FIN;
    pub const MSG_SYN: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_SYN;
    pub const MSG_CONFIRM: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_CONFIRM;
    pub const MSG_RST: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_RST;
    pub const MSG_ERRQUEUE: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_ERRQUEUE;
    pub const MSG_NOSIGNAL: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_NOSIGNAL;
    pub const MSG_MORE: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_MORE;
    pub const MSG_WAITFORONE: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_WAITFORONE;
    pub const MSG_BATCH: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_BATCH;
    pub const MSG_ZEROCOPY: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_ZEROCOPY;
    pub const MSG_FASTOPEN: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_FASTOPEN;
    pub const MSG_CMSG_CLOEXEC: root::_bindgen_ty_49 = _bindgen_ty_49::MSG_CMSG_CLOEXEC;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_49 {
        MSG_OOB = 1,
        MSG_PEEK = 2,
        MSG_DONTROUTE = 4,
        MSG_CTRUNC = 8,
        MSG_PROXY = 16,
        MSG_TRUNC = 32,
        MSG_DONTWAIT = 64,
        MSG_EOR = 128,
        MSG_WAITALL = 256,
        MSG_FIN = 512,
        MSG_SYN = 1024,
        MSG_CONFIRM = 2048,
        MSG_RST = 4096,
        MSG_ERRQUEUE = 8192,
        MSG_NOSIGNAL = 16384,
        MSG_MORE = 32768,
        MSG_WAITFORONE = 65536,
        MSG_BATCH = 262144,
        MSG_ZEROCOPY = 67108864,
        MSG_FASTOPEN = 536870912,
        MSG_CMSG_CLOEXEC = 1073741824,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct msghdr {
        pub msg_name: *mut libc::c_void,
        pub msg_namelen: root::socklen_t,
        pub msg_iov: *mut root::iovec,
        pub msg_iovlen: usize,
        pub msg_control: *mut libc::c_void,
        pub msg_controllen: usize,
        pub msg_flags: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_msghdr() {
        assert_eq!(
            ::std::mem::size_of::<msghdr>(),
            56usize,
            concat!("Size of: ", stringify!(msghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<msghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(msghdr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_namelen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_iov)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_iovlen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_control)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_controllen)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(msghdr),
                "::",
                stringify!(msg_flags)
            )
        );
    }
    impl Default for msghdr {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default)]
    pub struct cmsghdr {
        pub cmsg_len: usize,
        pub cmsg_level: libc::c_int,
        pub cmsg_type: libc::c_int,
        pub __cmsg_data: root::__IncompleteArrayField<libc::c_uchar>,
    }
    #[test]
    fn bindgen_test_layout_cmsghdr() {
        assert_eq!(
            ::std::mem::size_of::<cmsghdr>(),
            16usize,
            concat!("Size of: ", stringify!(cmsghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<cmsghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(cmsghdr))
        );
    }
    extern "C" {
        pub fn __cmsg_nxthdr(
            __mhdr: *mut root::msghdr,
            __cmsg: *mut root::cmsghdr,
        ) -> *mut root::cmsghdr;
    }
    pub const SCM_RIGHTS: root::_bindgen_ty_50 = _bindgen_ty_50::SCM_RIGHTS;
    pub const SCM_CREDENTIALS: root::_bindgen_ty_50 = _bindgen_ty_50::SCM_CREDENTIALS;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_50 {
        SCM_RIGHTS = 1,
        SCM_CREDENTIALS = 2,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ucred {
        pub pid: root::pid_t,
        pub uid: root::uid_t,
        pub gid: root::gid_t,
    }
    #[test]
    fn bindgen_test_layout_ucred() {
        assert_eq!(
            ::std::mem::size_of::<ucred>(),
            12usize,
            concat!("Size of: ", stringify!(ucred))
        );
        assert_eq!(
            ::std::mem::align_of::<ucred>(),
            4usize,
            concat!("Alignment of ", stringify!(ucred))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucred>())).pid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ucred),
                "::",
                stringify!(pid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucred>())).uid as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ucred),
                "::",
                stringify!(uid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ucred>())).gid as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ucred),
                "::",
                stringify!(gid)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct linger {
        pub l_onoff: libc::c_int,
        pub l_linger: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_linger() {
        assert_eq!(
            ::std::mem::size_of::<linger>(),
            8usize,
            concat!("Size of: ", stringify!(linger))
        );
        assert_eq!(
            ::std::mem::align_of::<linger>(),
            4usize,
            concat!("Alignment of ", stringify!(linger))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(linger),
                "::",
                stringify!(l_onoff)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(linger),
                "::",
                stringify!(l_linger)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct osockaddr {
        pub sa_family: libc::c_ushort,
        pub sa_data: [libc::c_uchar; 14usize],
    }
    #[test]
    fn bindgen_test_layout_osockaddr() {
        assert_eq!(
            ::std::mem::size_of::<osockaddr>(),
            16usize,
            concat!("Size of: ", stringify!(osockaddr))
        );
        assert_eq!(
            ::std::mem::align_of::<osockaddr>(),
            2usize,
            concat!("Alignment of ", stringify!(osockaddr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(osockaddr),
                "::",
                stringify!(sa_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(osockaddr),
                "::",
                stringify!(sa_data)
            )
        );
    }
    pub const SHUT_RD: root::_bindgen_ty_51 = _bindgen_ty_51::SHUT_RD;
    pub const SHUT_WR: root::_bindgen_ty_51 = _bindgen_ty_51::SHUT_WR;
    pub const SHUT_RDWR: root::_bindgen_ty_51 = _bindgen_ty_51::SHUT_RDWR;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_51 {
        SHUT_RD = 0,
        SHUT_WR = 1,
        SHUT_RDWR = 2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct mmsghdr {
        pub msg_hdr: root::msghdr,
        pub msg_len: libc::c_uint,
    }
    #[test]
    fn bindgen_test_layout_mmsghdr() {
        assert_eq!(
            ::std::mem::size_of::<mmsghdr>(),
            64usize,
            concat!("Size of: ", stringify!(mmsghdr))
        );
        assert_eq!(
            ::std::mem::align_of::<mmsghdr>(),
            8usize,
            concat!("Alignment of ", stringify!(mmsghdr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<mmsghdr>())).msg_hdr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmsghdr),
                "::",
                stringify!(msg_hdr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<mmsghdr>())).msg_len as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mmsghdr),
                "::",
                stringify!(msg_len)
            )
        );
    }
    impl Default for mmsghdr {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    extern "C" {
        pub fn socket(
            __domain: libc::c_int,
            __type: libc::c_int,
            __protocol: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn socketpair(
            __domain: libc::c_int,
            __type: libc::c_int,
            __protocol: libc::c_int,
            __fds: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn bind(
            __fd: libc::c_int,
            __addr: *const root::sockaddr,
            __len: root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getsockname(
            __fd: libc::c_int,
            __addr: *mut root::sockaddr,
            __len: *mut root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn connect(
            __fd: libc::c_int,
            __addr: *const root::sockaddr,
            __len: root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getpeername(
            __fd: libc::c_int,
            __addr: *mut root::sockaddr,
            __len: *mut root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn send(
            __fd: libc::c_int,
            __buf: *const libc::c_void,
            __n: usize,
            __flags: libc::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn recv(
            __fd: libc::c_int,
            __buf: *mut libc::c_void,
            __n: usize,
            __flags: libc::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn sendto(
            __fd: libc::c_int,
            __buf: *const libc::c_void,
            __n: usize,
            __flags: libc::c_int,
            __addr: *const root::sockaddr,
            __addr_len: root::socklen_t,
        ) -> isize;
    }
    extern "C" {
        pub fn recvfrom(
            __fd: libc::c_int,
            __buf: *mut libc::c_void,
            __n: usize,
            __flags: libc::c_int,
            __addr: *mut root::sockaddr,
            __addr_len: *mut root::socklen_t,
        ) -> isize;
    }
    extern "C" {
        pub fn sendmsg(
            __fd: libc::c_int,
            __message: *const root::msghdr,
            __flags: libc::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn sendmmsg(
            __fd: libc::c_int,
            __vmessages: *mut root::mmsghdr,
            __vlen: libc::c_uint,
            __flags: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn recvmsg(
            __fd: libc::c_int,
            __message: *mut root::msghdr,
            __flags: libc::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn recvmmsg(
            __fd: libc::c_int,
            __vmessages: *mut root::mmsghdr,
            __vlen: libc::c_uint,
            __flags: libc::c_int,
            __tmo: *mut root::timespec,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getsockopt(
            __fd: libc::c_int,
            __level: libc::c_int,
            __optname: libc::c_int,
            __optval: *mut libc::c_void,
            __optlen: *mut root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn setsockopt(
            __fd: libc::c_int,
            __level: libc::c_int,
            __optname: libc::c_int,
            __optval: *const libc::c_void,
            __optlen: root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn listen(__fd: libc::c_int, __n: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn accept(
            __fd: libc::c_int,
            __addr: *mut root::sockaddr,
            __addr_len: *mut root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn accept4(
            __fd: libc::c_int,
            __addr: *mut root::sockaddr,
            __addr_len: *mut root::socklen_t,
            __flags: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn shutdown(__fd: libc::c_int, __how: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn sockatmark(__fd: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn isfdtype(__fd: libc::c_int, __fdtype: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn __recv_chk(
            __fd: libc::c_int,
            __buf: *mut libc::c_void,
            __n: usize,
            __buflen: usize,
            __flags: libc::c_int,
        ) -> isize;
    }
    extern "C" {
        pub fn __recvfrom_chk(
            __fd: libc::c_int,
            __buf: *mut libc::c_void,
            __n: usize,
            __buflen: usize,
            __flags: libc::c_int,
            __addr: *mut root::sockaddr,
            __addr_len: *mut root::socklen_t,
        ) -> isize;
    }
    pub type in_addr_t = u32;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_addr {
        pub s_addr: root::in_addr_t,
    }
    #[test]
    fn bindgen_test_layout_in_addr() {
        assert_eq!(
            ::std::mem::size_of::<in_addr>(),
            4usize,
            concat!("Size of: ", stringify!(in_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<in_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(in_addr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in_addr),
                "::",
                stringify!(s_addr)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ip_opts {
        pub ip_dst: root::in_addr,
        pub ip_opts: [libc::c_char; 40usize],
    }
    #[test]
    fn bindgen_test_layout_ip_opts() {
        assert_eq!(
            ::std::mem::size_of::<ip_opts>(),
            44usize,
            concat!("Size of: ", stringify!(ip_opts))
        );
        assert_eq!(
            ::std::mem::align_of::<ip_opts>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_opts))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_opts),
                "::",
                stringify!(ip_dst)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_opts),
                "::",
                stringify!(ip_opts)
            )
        );
    }
    impl Default for ip_opts {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for ip_opts {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ip_opts {{ ip_dst: {:?}, ip_opts: [{}] }}",
                self.ip_dst,
                self.ip_opts
                    .iter()
                    .enumerate()
                    .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                    .collect::<String>()
            )
        }
    }
    impl ::std::cmp::PartialEq for ip_opts {
        fn eq(&self, other: &ip_opts) -> bool {
            self.ip_dst == other.ip_dst && &self.ip_opts[..] == &other.ip_opts[..]
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ip_mreqn {
        pub imr_multiaddr: root::in_addr,
        pub imr_address: root::in_addr,
        pub imr_ifindex: libc::c_int,
    }
    #[test]
    fn bindgen_test_layout_ip_mreqn() {
        assert_eq!(
            ::std::mem::size_of::<ip_mreqn>(),
            12usize,
            concat!("Size of: ", stringify!(ip_mreqn))
        );
        assert_eq!(
            ::std::mem::align_of::<ip_mreqn>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_mreqn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreqn),
                "::",
                stringify!(imr_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreqn),
                "::",
                stringify!(imr_address)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreqn),
                "::",
                stringify!(imr_ifindex)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct in_pktinfo {
        pub ipi_ifindex: libc::c_int,
        pub ipi_spec_dst: root::in_addr,
        pub ipi_addr: root::in_addr,
    }
    #[test]
    fn bindgen_test_layout_in_pktinfo() {
        assert_eq!(
            ::std::mem::size_of::<in_pktinfo>(),
            12usize,
            concat!("Size of: ", stringify!(in_pktinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<in_pktinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(in_pktinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in_pktinfo),
                "::",
                stringify!(ipi_ifindex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(in_pktinfo),
                "::",
                stringify!(ipi_spec_dst)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(in_pktinfo),
                "::",
                stringify!(ipi_addr)
            )
        );
    }
    pub const IPPROTO_IP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_IP;
    pub const IPPROTO_ICMP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_ICMP;
    pub const IPPROTO_IGMP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_IGMP;
    pub const IPPROTO_IPIP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_IPIP;
    pub const IPPROTO_TCP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_TCP;
    pub const IPPROTO_EGP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_EGP;
    pub const IPPROTO_PUP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_PUP;
    pub const IPPROTO_UDP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_UDP;
    pub const IPPROTO_IDP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_IDP;
    pub const IPPROTO_TP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_TP;
    pub const IPPROTO_DCCP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_DCCP;
    pub const IPPROTO_IPV6: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_IPV6;
    pub const IPPROTO_RSVP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_RSVP;
    pub const IPPROTO_GRE: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_GRE;
    pub const IPPROTO_ESP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_ESP;
    pub const IPPROTO_AH: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_AH;
    pub const IPPROTO_MTP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_MTP;
    pub const IPPROTO_BEETPH: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_BEETPH;
    pub const IPPROTO_ENCAP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_ENCAP;
    pub const IPPROTO_PIM: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_PIM;
    pub const IPPROTO_COMP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_COMP;
    pub const IPPROTO_SCTP: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_SCTP;
    pub const IPPROTO_UDPLITE: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_UDPLITE;
    pub const IPPROTO_MPLS: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_MPLS;
    pub const IPPROTO_RAW: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_RAW;
    pub const IPPROTO_MAX: root::_bindgen_ty_52 = _bindgen_ty_52::IPPROTO_MAX;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_52 {
        IPPROTO_IP = 0,
        IPPROTO_ICMP = 1,
        IPPROTO_IGMP = 2,
        IPPROTO_IPIP = 4,
        IPPROTO_TCP = 6,
        IPPROTO_EGP = 8,
        IPPROTO_PUP = 12,
        IPPROTO_UDP = 17,
        IPPROTO_IDP = 22,
        IPPROTO_TP = 29,
        IPPROTO_DCCP = 33,
        IPPROTO_IPV6 = 41,
        IPPROTO_RSVP = 46,
        IPPROTO_GRE = 47,
        IPPROTO_ESP = 50,
        IPPROTO_AH = 51,
        IPPROTO_MTP = 92,
        IPPROTO_BEETPH = 94,
        IPPROTO_ENCAP = 98,
        IPPROTO_PIM = 103,
        IPPROTO_COMP = 108,
        IPPROTO_SCTP = 132,
        IPPROTO_UDPLITE = 136,
        IPPROTO_MPLS = 137,
        IPPROTO_RAW = 255,
        IPPROTO_MAX = 256,
    }
    pub const IPPROTO_HOPOPTS: root::_bindgen_ty_53 = _bindgen_ty_53::IPPROTO_HOPOPTS;
    pub const IPPROTO_ROUTING: root::_bindgen_ty_53 = _bindgen_ty_53::IPPROTO_ROUTING;
    pub const IPPROTO_FRAGMENT: root::_bindgen_ty_53 = _bindgen_ty_53::IPPROTO_FRAGMENT;
    pub const IPPROTO_ICMPV6: root::_bindgen_ty_53 = _bindgen_ty_53::IPPROTO_ICMPV6;
    pub const IPPROTO_NONE: root::_bindgen_ty_53 = _bindgen_ty_53::IPPROTO_NONE;
    pub const IPPROTO_DSTOPTS: root::_bindgen_ty_53 = _bindgen_ty_53::IPPROTO_DSTOPTS;
    pub const IPPROTO_MH: root::_bindgen_ty_53 = _bindgen_ty_53::IPPROTO_MH;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_53 {
        IPPROTO_HOPOPTS = 0,
        IPPROTO_ROUTING = 43,
        IPPROTO_FRAGMENT = 44,
        IPPROTO_ICMPV6 = 58,
        IPPROTO_NONE = 59,
        IPPROTO_DSTOPTS = 60,
        IPPROTO_MH = 135,
    }
    pub type in_port_t = u16;
    pub const IPPORT_ECHO: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_ECHO;
    pub const IPPORT_DISCARD: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_DISCARD;
    pub const IPPORT_SYSTAT: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_SYSTAT;
    pub const IPPORT_DAYTIME: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_DAYTIME;
    pub const IPPORT_NETSTAT: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_NETSTAT;
    pub const IPPORT_FTP: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_FTP;
    pub const IPPORT_TELNET: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_TELNET;
    pub const IPPORT_SMTP: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_SMTP;
    pub const IPPORT_TIMESERVER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_TIMESERVER;
    pub const IPPORT_NAMESERVER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_NAMESERVER;
    pub const IPPORT_WHOIS: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_WHOIS;
    pub const IPPORT_MTP: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_MTP;
    pub const IPPORT_TFTP: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_TFTP;
    pub const IPPORT_RJE: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_RJE;
    pub const IPPORT_FINGER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_FINGER;
    pub const IPPORT_TTYLINK: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_TTYLINK;
    pub const IPPORT_SUPDUP: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_SUPDUP;
    pub const IPPORT_EXECSERVER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_EXECSERVER;
    pub const IPPORT_LOGINSERVER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_LOGINSERVER;
    pub const IPPORT_CMDSERVER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_CMDSERVER;
    pub const IPPORT_EFSSERVER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_EFSSERVER;
    pub const IPPORT_BIFFUDP: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_EXECSERVER;
    pub const IPPORT_WHOSERVER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_LOGINSERVER;
    pub const IPPORT_ROUTESERVER: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_EFSSERVER;
    pub const IPPORT_RESERVED: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_RESERVED;
    pub const IPPORT_USERRESERVED: root::_bindgen_ty_54 = _bindgen_ty_54::IPPORT_USERRESERVED;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_54 {
        IPPORT_ECHO = 7,
        IPPORT_DISCARD = 9,
        IPPORT_SYSTAT = 11,
        IPPORT_DAYTIME = 13,
        IPPORT_NETSTAT = 15,
        IPPORT_FTP = 21,
        IPPORT_TELNET = 23,
        IPPORT_SMTP = 25,
        IPPORT_TIMESERVER = 37,
        IPPORT_NAMESERVER = 42,
        IPPORT_WHOIS = 43,
        IPPORT_MTP = 57,
        IPPORT_TFTP = 69,
        IPPORT_RJE = 77,
        IPPORT_FINGER = 79,
        IPPORT_TTYLINK = 87,
        IPPORT_SUPDUP = 95,
        IPPORT_EXECSERVER = 512,
        IPPORT_LOGINSERVER = 513,
        IPPORT_CMDSERVER = 514,
        IPPORT_EFSSERVER = 520,
        IPPORT_RESERVED = 1024,
        IPPORT_USERRESERVED = 5000,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct in6_addr {
        pub __in6_u: root::in6_addr__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union in6_addr__bindgen_ty_1 {
        pub __u6_addr8: [u8; 16usize],
        pub __u6_addr16: [u16; 8usize],
        pub __u6_addr32: [u32; 4usize],
        _bindgen_union_align: [u32; 4usize],
    }
    #[test]
    fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
            16usize,
            concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr8)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr16)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr__bindgen_ty_1),
                "::",
                stringify!(__u6_addr32)
            )
        );
    }
    impl Default for in6_addr__bindgen_ty_1 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_addr__bindgen_ty_1 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "in6_addr__bindgen_ty_1 {{ union }}")
        }
    }
    #[test]
    fn bindgen_test_layout_in6_addr() {
        assert_eq!(
            ::std::mem::size_of::<in6_addr>(),
            16usize,
            concat!("Size of: ", stringify!(in6_addr))
        );
        assert_eq!(
            ::std::mem::align_of::<in6_addr>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_addr))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_addr),
                "::",
                stringify!(__in6_u)
            )
        );
    }
    impl Default for in6_addr {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_addr {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "in6_addr {{ __in6_u: {:?} }}", self.__in6_u)
        }
    }
    extern "C" {
        #[link_name = "\u{1}in6addr_any"]
        pub static in6addr_any: root::in6_addr;
    }
    extern "C" {
        #[link_name = "\u{1}in6addr_loopback"]
        pub static in6addr_loopback: root::in6_addr;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct sockaddr_in {
        pub sin_family: root::sa_family_t,
        pub sin_port: root::in_port_t,
        pub sin_addr: root::in_addr,
        pub sin_zero: [libc::c_uchar; 8usize],
    }
    #[test]
    fn bindgen_test_layout_sockaddr_in() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_in>(),
            16usize,
            concat!("Size of: ", stringify!(sockaddr_in))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_in>(),
            4usize,
            concat!("Alignment of ", stringify!(sockaddr_in))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in),
                "::",
                stringify!(sin_zero)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sockaddr_in6 {
        pub sin6_family: root::sa_family_t,
        pub sin6_port: root::in_port_t,
        pub sin6_flowinfo: u32,
        pub sin6_addr: root::in6_addr,
        pub sin6_scope_id: u32,
    }
    #[test]
    fn bindgen_test_layout_sockaddr_in6() {
        assert_eq!(
            ::std::mem::size_of::<sockaddr_in6>(),
            28usize,
            concat!("Size of: ", stringify!(sockaddr_in6))
        );
        assert_eq!(
            ::std::mem::align_of::<sockaddr_in6>(),
            4usize,
            concat!("Alignment of ", stringify!(sockaddr_in6))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_family)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_port)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_flowinfo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sockaddr_in6),
                "::",
                stringify!(sin6_scope_id)
            )
        );
    }
    impl Default for sockaddr_in6 {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for sockaddr_in6 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "sockaddr_in6 {{ sin6_family: {:?}, sin6_port: {:?}, sin6_flowinfo: {:?}, sin6_addr: {:?}, sin6_scope_id: {:?} }}" , self . sin6_family , self . sin6_port , self . sin6_flowinfo , self . sin6_addr , self . sin6_scope_id )
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ip_mreq {
        pub imr_multiaddr: root::in_addr,
        pub imr_interface: root::in_addr,
    }
    #[test]
    fn bindgen_test_layout_ip_mreq() {
        assert_eq!(
            ::std::mem::size_of::<ip_mreq>(),
            8usize,
            concat!("Size of: ", stringify!(ip_mreq))
        );
        assert_eq!(
            ::std::mem::align_of::<ip_mreq>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_mreq))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq),
                "::",
                stringify!(imr_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq),
                "::",
                stringify!(imr_interface)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ip_mreq_source {
        pub imr_multiaddr: root::in_addr,
        pub imr_interface: root::in_addr,
        pub imr_sourceaddr: root::in_addr,
    }
    #[test]
    fn bindgen_test_layout_ip_mreq_source() {
        assert_eq!(
            ::std::mem::size_of::<ip_mreq_source>(),
            12usize,
            concat!("Size of: ", stringify!(ip_mreq_source))
        );
        assert_eq!(
            ::std::mem::align_of::<ip_mreq_source>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_mreq_source))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq_source),
                "::",
                stringify!(imr_multiaddr)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq_source),
                "::",
                stringify!(imr_interface)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_mreq_source),
                "::",
                stringify!(imr_sourceaddr)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ipv6_mreq {
        pub ipv6mr_multiaddr: root::in6_addr,
        pub ipv6mr_interface: libc::c_uint,
    }
    #[test]
    fn bindgen_test_layout_ipv6_mreq() {
        assert_eq!(
            ::std::mem::size_of::<ipv6_mreq>(),
            20usize,
            concat!("Size of: ", stringify!(ipv6_mreq))
        );
        assert_eq!(
            ::std::mem::align_of::<ipv6_mreq>(),
            4usize,
            concat!("Alignment of ", stringify!(ipv6_mreq))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ipv6_mreq),
                "::",
                stringify!(ipv6mr_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ipv6_mreq),
                "::",
                stringify!(ipv6mr_interface)
            )
        );
    }
    impl Default for ipv6_mreq {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for ipv6_mreq {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ipv6_mreq {{ ipv6mr_multiaddr: {:?}, ipv6mr_interface: {:?} }}",
                self.ipv6mr_multiaddr, self.ipv6mr_interface
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct group_req {
        pub gr_interface: u32,
        pub gr_group: root::sockaddr_storage,
    }
    #[test]
    fn bindgen_test_layout_group_req() {
        assert_eq!(
            ::std::mem::size_of::<group_req>(),
            136usize,
            concat!("Size of: ", stringify!(group_req))
        );
        assert_eq!(
            ::std::mem::align_of::<group_req>(),
            8usize,
            concat!("Alignment of ", stringify!(group_req))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(group_req),
                "::",
                stringify!(gr_interface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(group_req),
                "::",
                stringify!(gr_group)
            )
        );
    }
    impl Default for group_req {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for group_req {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "group_req {{ gr_interface: {:?}, gr_group: {:?} }}",
                self.gr_interface, self.gr_group
            )
        }
    }
    impl ::std::cmp::PartialEq for group_req {
        fn eq(&self, other: &group_req) -> bool {
            self.gr_interface == other.gr_interface && self.gr_group == other.gr_group
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct group_source_req {
        pub gsr_interface: u32,
        pub gsr_group: root::sockaddr_storage,
        pub gsr_source: root::sockaddr_storage,
    }
    #[test]
    fn bindgen_test_layout_group_source_req() {
        assert_eq!(
            ::std::mem::size_of::<group_source_req>(),
            264usize,
            concat!("Size of: ", stringify!(group_source_req))
        );
        assert_eq!(
            ::std::mem::align_of::<group_source_req>(),
            8usize,
            concat!("Alignment of ", stringify!(group_source_req))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(group_source_req),
                "::",
                stringify!(gsr_interface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(group_source_req),
                "::",
                stringify!(gsr_group)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(group_source_req),
                "::",
                stringify!(gsr_source)
            )
        );
    }
    impl Default for group_source_req {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for group_source_req {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "group_source_req {{ gsr_interface: {:?}, gsr_group: {:?}, gsr_source: {:?} }}",
                self.gsr_interface, self.gsr_group, self.gsr_source
            )
        }
    }
    impl ::std::cmp::PartialEq for group_source_req {
        fn eq(&self, other: &group_source_req) -> bool {
            self.gsr_interface == other.gsr_interface
                && self.gsr_group == other.gsr_group
                && self.gsr_source == other.gsr_source
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ip_msfilter {
        pub imsf_multiaddr: root::in_addr,
        pub imsf_interface: root::in_addr,
        pub imsf_fmode: u32,
        pub imsf_numsrc: u32,
        pub imsf_slist: [root::in_addr; 1usize],
    }
    #[test]
    fn bindgen_test_layout_ip_msfilter() {
        assert_eq!(
            ::std::mem::size_of::<ip_msfilter>(),
            20usize,
            concat!("Size of: ", stringify!(ip_msfilter))
        );
        assert_eq!(
            ::std::mem::align_of::<ip_msfilter>(),
            4usize,
            concat!("Alignment of ", stringify!(ip_msfilter))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_multiaddr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_interface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_fmode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_numsrc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ip_msfilter),
                "::",
                stringify!(imsf_slist)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct group_filter {
        pub gf_interface: u32,
        pub gf_group: root::sockaddr_storage,
        pub gf_fmode: u32,
        pub gf_numsrc: u32,
        pub gf_slist: [root::sockaddr_storage; 1usize],
    }
    #[test]
    fn bindgen_test_layout_group_filter() {
        assert_eq!(
            ::std::mem::size_of::<group_filter>(),
            272usize,
            concat!("Size of: ", stringify!(group_filter))
        );
        assert_eq!(
            ::std::mem::align_of::<group_filter>(),
            8usize,
            concat!("Alignment of ", stringify!(group_filter))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_interface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_group)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_fmode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_numsrc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(group_filter),
                "::",
                stringify!(gf_slist)
            )
        );
    }
    impl Default for group_filter {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for group_filter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "group_filter {{ gf_interface: {:?}, gf_group: {:?}, gf_fmode: {:?}, gf_numsrc: {:?}, gf_slist: {:?} }}" , self . gf_interface , self . gf_group , self . gf_fmode , self . gf_numsrc , self . gf_slist )
        }
    }
    extern "C" {
        pub fn ntohl(__netlong: u32) -> u32;
    }
    extern "C" {
        pub fn ntohs(__netshort: u16) -> u16;
    }
    extern "C" {
        pub fn htonl(__hostlong: u32) -> u32;
    }
    extern "C" {
        pub fn htons(__hostshort: u16) -> u16;
    }
    extern "C" {
        pub fn bindresvport(
            __sockfd: libc::c_int,
            __sock_in: *mut root::sockaddr_in,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn bindresvport6(
            __sockfd: libc::c_int,
            __sock_in: *mut root::sockaddr_in6,
        ) -> libc::c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct in6_pktinfo {
        pub ipi6_addr: root::in6_addr,
        pub ipi6_ifindex: libc::c_uint,
    }
    #[test]
    fn bindgen_test_layout_in6_pktinfo() {
        assert_eq!(
            ::std::mem::size_of::<in6_pktinfo>(),
            20usize,
            concat!("Size of: ", stringify!(in6_pktinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<in6_pktinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(in6_pktinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in6_pktinfo>())).ipi6_addr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_pktinfo),
                "::",
                stringify!(ipi6_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<in6_pktinfo>())).ipi6_ifindex as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(in6_pktinfo),
                "::",
                stringify!(ipi6_ifindex)
            )
        );
    }
    impl Default for in6_pktinfo {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for in6_pktinfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "in6_pktinfo {{ ipi6_addr: {:?}, ipi6_ifindex: {:?} }}",
                self.ipi6_addr, self.ipi6_ifindex
            )
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ip6_mtuinfo {
        pub ip6m_addr: root::sockaddr_in6,
        pub ip6m_mtu: u32,
    }
    #[test]
    fn bindgen_test_layout_ip6_mtuinfo() {
        assert_eq!(
            ::std::mem::size_of::<ip6_mtuinfo>(),
            32usize,
            concat!("Size of: ", stringify!(ip6_mtuinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<ip6_mtuinfo>(),
            4usize,
            concat!("Alignment of ", stringify!(ip6_mtuinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip6_mtuinfo>())).ip6m_addr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ip6_mtuinfo),
                "::",
                stringify!(ip6m_addr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ip6_mtuinfo>())).ip6m_mtu as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ip6_mtuinfo),
                "::",
                stringify!(ip6m_mtu)
            )
        );
    }
    impl Default for ip6_mtuinfo {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for ip6_mtuinfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ip6_mtuinfo {{ ip6m_addr: {:?}, ip6m_mtu: {:?} }}",
                self.ip6m_addr, self.ip6m_mtu
            )
        }
    }
    extern "C" {
        pub fn inet6_option_space(__nbytes: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_option_init(
            __bp: *mut libc::c_void,
            __cmsgp: *mut *mut root::cmsghdr,
            __type: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_option_append(
            __cmsg: *mut root::cmsghdr,
            __typep: *const u8,
            __multx: libc::c_int,
            __plusy: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_option_alloc(
            __cmsg: *mut root::cmsghdr,
            __datalen: libc::c_int,
            __multx: libc::c_int,
            __plusy: libc::c_int,
        ) -> *mut u8;
    }
    extern "C" {
        pub fn inet6_option_next(
            __cmsg: *const root::cmsghdr,
            __tptrp: *mut *mut u8,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_option_find(
            __cmsg: *const root::cmsghdr,
            __tptrp: *mut *mut u8,
            __type: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_opt_init(
            __extbuf: *mut libc::c_void,
            __extlen: root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_opt_append(
            __extbuf: *mut libc::c_void,
            __extlen: root::socklen_t,
            __offset: libc::c_int,
            __type: u8,
            __len: root::socklen_t,
            __align: u8,
            __databufp: *mut *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_opt_finish(
            __extbuf: *mut libc::c_void,
            __extlen: root::socklen_t,
            __offset: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_opt_set_val(
            __databuf: *mut libc::c_void,
            __offset: libc::c_int,
            __val: *mut libc::c_void,
            __vallen: root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_opt_next(
            __extbuf: *mut libc::c_void,
            __extlen: root::socklen_t,
            __offset: libc::c_int,
            __typep: *mut u8,
            __lenp: *mut root::socklen_t,
            __databufp: *mut *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_opt_find(
            __extbuf: *mut libc::c_void,
            __extlen: root::socklen_t,
            __offset: libc::c_int,
            __type: u8,
            __lenp: *mut root::socklen_t,
            __databufp: *mut *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_opt_get_val(
            __databuf: *mut libc::c_void,
            __offset: libc::c_int,
            __val: *mut libc::c_void,
            __vallen: root::socklen_t,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_rth_space(__type: libc::c_int, __segments: libc::c_int) -> root::socklen_t;
    }
    extern "C" {
        pub fn inet6_rth_init(
            __bp: *mut libc::c_void,
            __bp_len: root::socklen_t,
            __type: libc::c_int,
            __segments: libc::c_int,
        ) -> *mut libc::c_void;
    }
    extern "C" {
        pub fn inet6_rth_add(__bp: *mut libc::c_void, __addr: *const root::in6_addr)
            -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_rth_reverse(
            __in: *const libc::c_void,
            __out: *mut libc::c_void,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_rth_segments(__bp: *const libc::c_void) -> libc::c_int;
    }
    extern "C" {
        pub fn inet6_rth_getaddr(
            __bp: *const libc::c_void,
            __index: libc::c_int,
        ) -> *mut root::in6_addr;
    }
    extern "C" {
        pub fn getipv4sourcefilter(
            __s: libc::c_int,
            __interface_addr: root::in_addr,
            __group: root::in_addr,
            __fmode: *mut u32,
            __numsrc: *mut u32,
            __slist: *mut root::in_addr,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn setipv4sourcefilter(
            __s: libc::c_int,
            __interface_addr: root::in_addr,
            __group: root::in_addr,
            __fmode: u32,
            __numsrc: u32,
            __slist: *const root::in_addr,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getsourcefilter(
            __s: libc::c_int,
            __interface_addr: u32,
            __group: *const root::sockaddr,
            __grouplen: root::socklen_t,
            __fmode: *mut u32,
            __numsrc: *mut u32,
            __slist: *mut root::sockaddr_storage,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn setsourcefilter(
            __s: libc::c_int,
            __interface_addr: u32,
            __group: *const root::sockaddr,
            __grouplen: root::socklen_t,
            __fmode: u32,
            __numsrc: u32,
            __slist: *const root::sockaddr_storage,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_udp_create() -> root::ck_socket;
    }
    extern "C" {
        pub fn ck_tcp_create(flags: libc::c_int) -> root::ck_socket;
    }
    extern "C" {
        pub fn ck_connect(
            sock: root::ck_socket,
            hostname: *const libc::c_char,
            port: libc::c_int,
        ) -> libc::c_ulong;
    }
    extern "C" {
        pub fn ck_connect2(
            sock: root::ck_socket,
            serv_addr: *const root::sockaddr,
            addrlen: libc::c_int,
        ) -> libc::c_ulong;
    }
    extern "C" {
        pub fn ck_bind(sock: root::ck_socket, port: libc::c_int) -> libc::c_ulong;
    }
    extern "C" {
        pub fn ck_listen(sock: root::ck_socket, backlog: libc::c_int) -> libc::c_ulong;
    }
    extern "C" {
        pub fn ck_accept(sock: root::ck_socket) -> root::ck_socket;
    }
    extern "C" {
        pub fn ck_send(
            sock: root::ck_socket,
            buffer: *const libc::c_char,
            len: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_send2(
            sock: root::ck_socket,
            buffer: *const libc::c_char,
            len: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_sendto(
            sock: root::ck_socket,
            buffer: *const libc::c_char,
            len: libc::c_int,
            to: *const root::sockaddr,
            tolen: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_recv(
            sock: root::ck_socket,
            buffer: *mut libc::c_char,
            len: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_recv2(
            sock: root::ck_socket,
            buffer: *mut libc::c_char,
            len: libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_recvfrom(
            sock: root::ck_socket,
            buffer: *mut libc::c_char,
            len: libc::c_int,
            from: *mut root::sockaddr,
            fromlen: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_send_timeout(
            sock: root::ck_socket,
            sec: libc::c_long,
            usec: libc::c_long,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_recv_timeout(
            sock: root::ck_socket,
            sec: libc::c_long,
            usec: libc::c_long,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn ck_close(sock: root::ck_socket);
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct Net_Msg {
        pub header: libc::c_ulong,
        pub type_: libc::c_ulong,
        pub param: libc::c_ulong,
        pub param2: libc::c_ulong,
        pub param3: libc::c_ulong,
        pub length: libc::c_ulong,
        pub buffer: [libc::c_char; 512usize],
    }
    #[test]
    fn bindgen_test_layout_Net_Msg() {
        assert_eq!(
            ::std::mem::size_of::<Net_Msg>(),
            560usize,
            concat!("Size of: ", stringify!(Net_Msg))
        );
        assert_eq!(
            ::std::mem::align_of::<Net_Msg>(),
            8usize,
            concat!("Alignment of ", stringify!(Net_Msg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).header as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(header)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).type_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).param as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(param)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).param2 as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(param2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).param3 as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(param3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).length as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(length)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Net_Msg>())).buffer as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Net_Msg),
                "::",
                stringify!(buffer)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Net_Msg5clearEv"]
        pub fn Net_Msg_clear(this: *mut root::Net_Msg);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7Net_MsgC1Ev"]
        pub fn Net_Msg_Net_Msg(this: *mut root::Net_Msg);
    }
    impl Default for Net_Msg {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for Net_Msg {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "Net_Msg {{ header: {:?}, type: {:?}, param: {:?}, param2: {:?}, param3: {:?}, length: {:?}, buffer: [{}] }}" , self . header , self . type_ , self . param , self . param2 , self . param3 , self . length , self . buffer . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
        }
    }
    impl ::std::cmp::PartialEq for Net_Msg {
        fn eq(&self, other: &Net_Msg) -> bool {
            self.header == other.header
                && self.type_ == other.type_
                && self.param == other.param
                && self.param2 == other.param2
                && self.param3 == other.param3
                && self.length == other.length
                && &self.buffer[..] == &other.buffer[..]
        }
    }
    impl Net_Msg {
        #[inline]
        pub unsafe fn clear(&mut self) {
            Net_Msg_clear(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            Net_Msg_Net_Msg(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_Z8otf_htonP7Net_Msg"]
        pub fn otf_hton(msg: *mut root::Net_Msg);
    }
    extern "C" {
        #[link_name = "\u{1}_Z8otf_ntohP7Net_Msg"]
        pub fn otf_ntoh(msg: *mut root::Net_Msg);
    }
    extern "C" {
        #[link_name = "\u{1}_Z15otf_process_msgP8Chuck_VMP14Chuck_CompilerP7Net_MsgmPv"]
        pub fn otf_process_msg(
            vm: *mut root::Chuck_VM,
            compiler: *mut root::Chuck_Compiler,
            msg: *mut root::Net_Msg,
            immediate: libc::c_ulong,
            data: *mut libc::c_void,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12otf_send_cmdiPPKcRlS0_iPi"]
        pub fn otf_send_cmd(
            argc: libc::c_int,
            argv: *mut *const libc::c_char,
            i: *mut libc::c_long,
            host: *const libc::c_char,
            port: libc::c_int,
            is_otf: *mut libc::c_int,
        ) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13otf_send_filePKcR7Net_MsgS0_P10ck_socket_"]
        pub fn otf_send_file(
            filename: *const libc::c_char,
            msg: *mut root::Net_Msg,
            op: *const libc::c_char,
            sock: root::ck_socket,
        ) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16otf_send_connectPKci"]
        pub fn otf_send_connect(host: *const libc::c_char, port: libc::c_int) -> root::ck_socket;
    }
    extern "C" {
        #[link_name = "\u{1}_Z6otf_cbPv"]
        pub fn otf_cb(p: *mut libc::c_void) -> *mut libc::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_Z2uhv"]
        pub fn uh();
    }
    extern "C" {
        #[link_name = "\u{1}poop"]
        pub static mut poop: [*const libc::c_char; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}poop_size"]
        pub static mut poop_size: libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}g_otf_log"]
        pub static mut g_otf_log: libc::c_ulong;
    }
    extern "C" {
        pub fn machine_query(QUERY: *mut root::Chuck_DL_Query) -> libc::c_ulong;
    }
    pub type proc_msg_func = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut root::Chuck_VM,
            arg2: *mut root::Chuck_Compiler,
            arg3: *mut root::Net_Msg,
            arg4: libc::c_ulong,
            arg5: *mut libc::c_void,
        ) -> libc::c_ulong,
    >;
    extern "C" {
        #[link_name = "\u{1}_Z12machine_initP14Chuck_CompilerPFmP8Chuck_VMS0_P7Net_MsgmPvE"]
        pub fn machine_init(
            compiler: *mut root::Chuck_Compiler,
            func: root::proc_msg_func,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15machine_intsizev"]
        pub fn machine_intsize() -> libc::c_ulong;
    }
    extern "C" {
        pub fn machine_crash_impl(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_add_impl(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_spork_impl(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_remove_impl(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_replace_impl(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_status_impl(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_intsize_impl(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        );
    }
    extern "C" {
        pub fn machine_shreds_impl(
            ARGS: *mut libc::c_void,
            RETURN: *mut root::Chuck_DL_Return,
            VM: *mut root::Chuck_VM,
            SHRED: *mut root::Chuck_VM_Shred,
            API: root::CK_DL_API,
        );
    }
    pub type float_t = f32;
    pub type double_t = f64;
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_55 {
        FP_INT_UPWARD = 0,
        FP_INT_DOWNWARD = 1,
        FP_INT_TOWARDZERO = 2,
        FP_INT_TONEARESTFROMZERO = 3,
        FP_INT_TONEAREST = 4,
    }
    extern "C" {
        pub fn __fpclassify(__value: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn __signbit(__value: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn __isinf(__value: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn __finite(__value: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn __isnan(__value: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn __iseqsig(__x: f64, __y: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn __issignaling(__value: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn acos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __acos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn asin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __asin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __atan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atan2(__y: f64, __x: f64) -> f64;
    }
    extern "C" {
        pub fn __atan2(__y: f64, __x: f64) -> f64;
    }
    extern "C" {
        pub fn cos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cos(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sin(__x: f64) -> f64;
    }
    extern "C" {
        pub fn tan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __tan(__x: f64) -> f64;
    }
    extern "C" {
        pub fn cosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn tanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __tanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
    }
    extern "C" {
        pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
    }
    extern "C" {
        pub fn acosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __acosh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn asinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __asinh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn atanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __atanh(__x: f64) -> f64;
    }
    extern "C" {
        pub fn exp(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp(__x: f64) -> f64;
    }
    extern "C" {
        pub fn frexp(__x: f64, __exponent: *mut libc::c_int) -> f64;
    }
    extern "C" {
        pub fn __frexp(__x: f64, __exponent: *mut libc::c_int) -> f64;
    }
    extern "C" {
        pub fn ldexp(__x: f64, __exponent: libc::c_int) -> f64;
    }
    extern "C" {
        pub fn __ldexp(__x: f64, __exponent: libc::c_int) -> f64;
    }
    extern "C" {
        pub fn log(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
    }
    extern "C" {
        pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
    }
    extern "C" {
        pub fn exp10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp10(__x: f64) -> f64;
    }
    extern "C" {
        pub fn expm1(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __expm1(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log1p(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log1p(__x: f64) -> f64;
    }
    extern "C" {
        pub fn logb(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __logb(__x: f64) -> f64;
    }
    extern "C" {
        pub fn exp2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __exp2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn log2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __log2(__x: f64) -> f64;
    }
    extern "C" {
        pub fn pow(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __pow(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn sqrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __sqrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn hypot(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __hypot(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn cbrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __cbrt(__x: f64) -> f64;
    }
    extern "C" {
        pub fn ceil(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __ceil(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fabs(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __fabs(__x: f64) -> f64;
    }
    extern "C" {
        pub fn floor(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __floor(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fmod(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmod(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn finite(__value: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn drem(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __drem(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn significand(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __significand(__x: f64) -> f64;
    }
    extern "C" {
        pub fn copysign(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __copysign(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nan(__tagb: *const libc::c_char) -> f64;
    }
    extern "C" {
        pub fn __nan(__tagb: *const libc::c_char) -> f64;
    }
    extern "C" {
        pub fn j0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __j0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn j1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __j1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn jn(arg1: libc::c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn __jn(arg1: libc::c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn y0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __y0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn y1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __y1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn yn(arg1: libc::c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn __yn(arg1: libc::c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn erf(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __erf(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __erfc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __lgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __tgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn gamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __gamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgamma_r(arg1: f64, __signgamp: *mut libc::c_int) -> f64;
    }
    extern "C" {
        pub fn __lgamma_r(arg1: f64, __signgamp: *mut libc::c_int) -> f64;
    }
    extern "C" {
        pub fn rint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __rint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn nextafter(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __nextafter(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn nexttoward(__x: f64, __y: u128) -> f64;
    }
    extern "C" {
        pub fn __nexttoward(__x: f64, __y: u128) -> f64;
    }
    extern "C" {
        pub fn nextdown(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nextdown(__x: f64) -> f64;
    }
    extern "C" {
        pub fn nextup(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nextup(__x: f64) -> f64;
    }
    extern "C" {
        pub fn remainder(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __remainder(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn scalbn(__x: f64, __n: libc::c_int) -> f64;
    }
    extern "C" {
        pub fn __scalbn(__x: f64, __n: libc::c_int) -> f64;
    }
    extern "C" {
        pub fn ilogb(__x: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn __ilogb(__x: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn llogb(__x: f64) -> libc::c_long;
    }
    extern "C" {
        pub fn __llogb(__x: f64) -> libc::c_long;
    }
    extern "C" {
        pub fn scalbln(__x: f64, __n: libc::c_long) -> f64;
    }
    extern "C" {
        pub fn __scalbln(__x: f64, __n: libc::c_long) -> f64;
    }
    extern "C" {
        pub fn nearbyint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __nearbyint(__x: f64) -> f64;
    }
    extern "C" {
        pub fn round(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __round(__x: f64) -> f64;
    }
    extern "C" {
        pub fn trunc(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __trunc(__x: f64) -> f64;
    }
    extern "C" {
        pub fn remquo(__x: f64, __y: f64, __quo: *mut libc::c_int) -> f64;
    }
    extern "C" {
        pub fn __remquo(__x: f64, __y: f64, __quo: *mut libc::c_int) -> f64;
    }
    extern "C" {
        pub fn lrint(__x: f64) -> libc::c_long;
    }
    extern "C" {
        pub fn __lrint(__x: f64) -> libc::c_long;
    }
    extern "C" {
        pub fn llrint(__x: f64) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llrint(__x: f64) -> libc::c_longlong;
    }
    extern "C" {
        pub fn lround(__x: f64) -> libc::c_long;
    }
    extern "C" {
        pub fn __lround(__x: f64) -> libc::c_long;
    }
    extern "C" {
        pub fn llround(__x: f64) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llround(__x: f64) -> libc::c_longlong;
    }
    extern "C" {
        pub fn fdim(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fdim(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fmax(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmax(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fmin(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmin(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
    }
    extern "C" {
        pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
    }
    extern "C" {
        pub fn roundeven(__x: f64) -> f64;
    }
    extern "C" {
        pub fn __roundeven(__x: f64) -> f64;
    }
    extern "C" {
        pub fn fromfp(__x: f64, __round: libc::c_int, __width: libc::c_uint) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfp(__x: f64, __round: libc::c_int, __width: libc::c_uint) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfp(__x: f64, __round: libc::c_int, __width: libc::c_uint) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfp(
            __x: f64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpx(__x: f64, __round: libc::c_int, __width: libc::c_uint) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpx(__x: f64, __round: libc::c_int, __width: libc::c_uint)
            -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpx(__x: f64, __round: libc::c_int, __width: libc::c_uint)
            -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpx(
            __x: f64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmag(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fmaxmag(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn fminmag(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn __fminmag(__x: f64, __y: f64) -> f64;
    }
    extern "C" {
        pub fn totalorder(__x: f64, __y: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn totalordermag(__x: f64, __y: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> libc::c_int;
    }
    extern "C" {
        pub fn getpayload(__x: *const f64) -> f64;
    }
    extern "C" {
        pub fn __getpayload(__x: *const f64) -> f64;
    }
    extern "C" {
        pub fn setpayload(__x: *mut f64, __payload: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn setpayloadsig(__x: *mut f64, __payload: f64) -> libc::c_int;
    }
    extern "C" {
        pub fn scalb(__x: f64, __n: f64) -> f64;
    }
    extern "C" {
        pub fn __scalb(__x: f64, __n: f64) -> f64;
    }
    extern "C" {
        pub fn __fpclassifyf(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn __signbitf(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn __isinff(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn __finitef(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn __isnanf(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn __iseqsigf(__x: f32, __y: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn __issignalingf(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn acosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __acosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn asinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __asinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __atanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atan2f(__y: f32, __x: f32) -> f32;
    }
    extern "C" {
        pub fn __atan2f(__y: f32, __x: f32) -> f32;
    }
    extern "C" {
        pub fn cosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __cosf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn sinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sinf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn tanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __tanf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn coshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __coshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn sinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn tanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __tanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
    }
    extern "C" {
        pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
    }
    extern "C" {
        pub fn acoshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __acoshf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn asinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __asinhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn atanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __atanhf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn expf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __expf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn frexpf(__x: f32, __exponent: *mut libc::c_int) -> f32;
    }
    extern "C" {
        pub fn __frexpf(__x: f32, __exponent: *mut libc::c_int) -> f32;
    }
    extern "C" {
        pub fn ldexpf(__x: f32, __exponent: libc::c_int) -> f32;
    }
    extern "C" {
        pub fn __ldexpf(__x: f32, __exponent: libc::c_int) -> f32;
    }
    extern "C" {
        pub fn logf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __logf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
    }
    extern "C" {
        pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
    }
    extern "C" {
        pub fn exp10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __exp10f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn expm1f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __expm1f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log1pf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log1pf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn logbf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __logbf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn exp2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __exp2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn log2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __log2f(__x: f32) -> f32;
    }
    extern "C" {
        pub fn powf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __powf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn sqrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __sqrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn hypotf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __hypotf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn cbrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __cbrtf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn ceilf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __ceilf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn fabsf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __fabsf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn floorf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __floorf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn fmodf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fmodf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn isinff(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn finitef(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn dremf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __dremf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn significandf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __significandf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn copysignf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __copysignf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn nanf(__tagb: *const libc::c_char) -> f32;
    }
    extern "C" {
        pub fn __nanf(__tagb: *const libc::c_char) -> f32;
    }
    extern "C" {
        pub fn isnanf(__value: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn j0f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __j0f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn j1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __j1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn jnf(arg1: libc::c_int, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn __jnf(arg1: libc::c_int, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn y0f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __y0f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn y1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __y1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn ynf(arg1: libc::c_int, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn __ynf(arg1: libc::c_int, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn erff(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __erff(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn erfcf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __erfcf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn lgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __lgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn tgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __tgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn gammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __gammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn lgammaf_r(arg1: f32, __signgamp: *mut libc::c_int) -> f32;
    }
    extern "C" {
        pub fn __lgammaf_r(arg1: f32, __signgamp: *mut libc::c_int) -> f32;
    }
    extern "C" {
        pub fn rintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __rintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn nextafterf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __nextafterf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn nexttowardf(__x: f32, __y: u128) -> f32;
    }
    extern "C" {
        pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
    }
    extern "C" {
        pub fn nextdownf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __nextdownf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn nextupf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __nextupf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn remainderf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __remainderf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn scalbnf(__x: f32, __n: libc::c_int) -> f32;
    }
    extern "C" {
        pub fn __scalbnf(__x: f32, __n: libc::c_int) -> f32;
    }
    extern "C" {
        pub fn ilogbf(__x: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn __ilogbf(__x: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn llogbf(__x: f32) -> libc::c_long;
    }
    extern "C" {
        pub fn __llogbf(__x: f32) -> libc::c_long;
    }
    extern "C" {
        pub fn scalblnf(__x: f32, __n: libc::c_long) -> f32;
    }
    extern "C" {
        pub fn __scalblnf(__x: f32, __n: libc::c_long) -> f32;
    }
    extern "C" {
        pub fn nearbyintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __nearbyintf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn roundf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __roundf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn truncf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __truncf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn remquof(__x: f32, __y: f32, __quo: *mut libc::c_int) -> f32;
    }
    extern "C" {
        pub fn __remquof(__x: f32, __y: f32, __quo: *mut libc::c_int) -> f32;
    }
    extern "C" {
        pub fn lrintf(__x: f32) -> libc::c_long;
    }
    extern "C" {
        pub fn __lrintf(__x: f32) -> libc::c_long;
    }
    extern "C" {
        pub fn llrintf(__x: f32) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llrintf(__x: f32) -> libc::c_longlong;
    }
    extern "C" {
        pub fn lroundf(__x: f32) -> libc::c_long;
    }
    extern "C" {
        pub fn __lroundf(__x: f32) -> libc::c_long;
    }
    extern "C" {
        pub fn llroundf(__x: f32) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llroundf(__x: f32) -> libc::c_longlong;
    }
    extern "C" {
        pub fn fdimf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fdimf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fmaxf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fmaxf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fminf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fminf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    }
    extern "C" {
        pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    }
    extern "C" {
        pub fn roundevenf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn __roundevenf(__x: f32) -> f32;
    }
    extern "C" {
        pub fn fromfpf(__x: f32, __round: libc::c_int, __width: libc::c_uint) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf(__x: f32, __round: libc::c_int, __width: libc::c_uint)
            -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf(__x: f32, __round: libc::c_int, __width: libc::c_uint)
            -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf(
            __x: f32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf(__x: f32, __round: libc::c_int, __width: libc::c_uint) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf(
            __x: f32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf(
            __x: f32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf(
            __x: f32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fmaxmagf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn fminmagf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn __fminmagf(__x: f32, __y: f32) -> f32;
    }
    extern "C" {
        pub fn totalorderf(__x: f32, __y: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn totalordermagf(__x: f32, __y: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> libc::c_int;
    }
    extern "C" {
        pub fn getpayloadf(__x: *const f32) -> f32;
    }
    extern "C" {
        pub fn __getpayloadf(__x: *const f32) -> f32;
    }
    extern "C" {
        pub fn setpayloadf(__x: *mut f32, __payload: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn setpayloadsigf(__x: *mut f32, __payload: f32) -> libc::c_int;
    }
    extern "C" {
        pub fn scalbf(__x: f32, __n: f32) -> f32;
    }
    extern "C" {
        pub fn __scalbf(__x: f32, __n: f32) -> f32;
    }
    extern "C" {
        pub fn __fpclassifyl(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn __signbitl(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn __isinfl(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn __finitel(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn __isnanl(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn __iseqsigl(__x: u128, __y: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn __issignalingl(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn acosl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __acosl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn asinl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __asinl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn atanl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __atanl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn atan2l(__y: u128, __x: u128) -> u128;
    }
    extern "C" {
        pub fn __atan2l(__y: u128, __x: u128) -> u128;
    }
    extern "C" {
        pub fn cosl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __cosl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn sinl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __sinl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn tanl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __tanl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn coshl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __coshl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn sinhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __sinhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn tanhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __tanhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
    }
    extern "C" {
        pub fn __sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
    }
    extern "C" {
        pub fn acoshl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __acoshl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn asinhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __asinhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn atanhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __atanhl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn expl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __expl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn frexpl(__x: u128, __exponent: *mut libc::c_int) -> u128;
    }
    extern "C" {
        pub fn __frexpl(__x: u128, __exponent: *mut libc::c_int) -> u128;
    }
    extern "C" {
        pub fn ldexpl(__x: u128, __exponent: libc::c_int) -> u128;
    }
    extern "C" {
        pub fn __ldexpl(__x: u128, __exponent: libc::c_int) -> u128;
    }
    extern "C" {
        pub fn logl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __logl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn log10l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __log10l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
    }
    extern "C" {
        pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
    }
    extern "C" {
        pub fn exp10l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __exp10l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn expm1l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __expm1l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn log1pl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __log1pl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn logbl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __logbl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn exp2l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __exp2l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn log2l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __log2l(__x: u128) -> u128;
    }
    extern "C" {
        pub fn powl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __powl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn sqrtl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __sqrtl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn hypotl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __hypotl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn cbrtl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __cbrtl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn ceill(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __ceill(__x: u128) -> u128;
    }
    extern "C" {
        pub fn fabsl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __fabsl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn floorl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __floorl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn fmodl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fmodl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn isinfl(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn finitel(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn dreml(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __dreml(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn significandl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __significandl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn copysignl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __copysignl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn nanl(__tagb: *const libc::c_char) -> u128;
    }
    extern "C" {
        pub fn __nanl(__tagb: *const libc::c_char) -> u128;
    }
    extern "C" {
        pub fn isnanl(__value: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn j0l(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __j0l(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn j1l(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __j1l(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn jnl(arg1: libc::c_int, arg2: u128) -> u128;
    }
    extern "C" {
        pub fn __jnl(arg1: libc::c_int, arg2: u128) -> u128;
    }
    extern "C" {
        pub fn y0l(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __y0l(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn y1l(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __y1l(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn ynl(arg1: libc::c_int, arg2: u128) -> u128;
    }
    extern "C" {
        pub fn __ynl(arg1: libc::c_int, arg2: u128) -> u128;
    }
    extern "C" {
        pub fn erfl(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __erfl(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn erfcl(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __erfcl(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn lgammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __lgammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn tgammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __tgammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn gammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn __gammal(arg1: u128) -> u128;
    }
    extern "C" {
        pub fn lgammal_r(arg1: u128, __signgamp: *mut libc::c_int) -> u128;
    }
    extern "C" {
        pub fn __lgammal_r(arg1: u128, __signgamp: *mut libc::c_int) -> u128;
    }
    extern "C" {
        pub fn rintl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __rintl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn nextafterl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __nextafterl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn nexttowardl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn nextdownl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __nextdownl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn nextupl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __nextupl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn remainderl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __remainderl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn scalbnl(__x: u128, __n: libc::c_int) -> u128;
    }
    extern "C" {
        pub fn __scalbnl(__x: u128, __n: libc::c_int) -> u128;
    }
    extern "C" {
        pub fn ilogbl(__x: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn __ilogbl(__x: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn llogbl(__x: u128) -> libc::c_long;
    }
    extern "C" {
        pub fn __llogbl(__x: u128) -> libc::c_long;
    }
    extern "C" {
        pub fn scalblnl(__x: u128, __n: libc::c_long) -> u128;
    }
    extern "C" {
        pub fn __scalblnl(__x: u128, __n: libc::c_long) -> u128;
    }
    extern "C" {
        pub fn nearbyintl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __nearbyintl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn roundl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __roundl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn truncl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __truncl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn remquol(__x: u128, __y: u128, __quo: *mut libc::c_int) -> u128;
    }
    extern "C" {
        pub fn __remquol(__x: u128, __y: u128, __quo: *mut libc::c_int) -> u128;
    }
    extern "C" {
        pub fn lrintl(__x: u128) -> libc::c_long;
    }
    extern "C" {
        pub fn __lrintl(__x: u128) -> libc::c_long;
    }
    extern "C" {
        pub fn llrintl(__x: u128) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llrintl(__x: u128) -> libc::c_longlong;
    }
    extern "C" {
        pub fn lroundl(__x: u128) -> libc::c_long;
    }
    extern "C" {
        pub fn __lroundl(__x: u128) -> libc::c_long;
    }
    extern "C" {
        pub fn llroundl(__x: u128) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llroundl(__x: u128) -> libc::c_longlong;
    }
    extern "C" {
        pub fn fdiml(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fdiml(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn fmaxl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fmaxl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn fminl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fminl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
    }
    extern "C" {
        pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
    }
    extern "C" {
        pub fn roundevenl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn __roundevenl(__x: u128) -> u128;
    }
    extern "C" {
        pub fn fromfpl(__x: u128, __round: libc::c_int, __width: libc::c_uint) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpl(
            __x: u128,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpl(
            __x: u128,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpl(
            __x: u128,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxl(__x: u128, __round: libc::c_int, __width: libc::c_uint)
            -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxl(
            __x: u128,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxl(
            __x: u128,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxl(
            __x: u128,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fmaxmagl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn fminmagl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn __fminmagl(__x: u128, __y: u128) -> u128;
    }
    extern "C" {
        pub fn totalorderl(__x: u128, __y: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn totalordermagl(__x: u128, __y: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn canonicalizel(__cx: *mut u128, __x: *const u128) -> libc::c_int;
    }
    extern "C" {
        pub fn getpayloadl(__x: *const u128) -> u128;
    }
    extern "C" {
        pub fn __getpayloadl(__x: *const u128) -> u128;
    }
    extern "C" {
        pub fn setpayloadl(__x: *mut u128, __payload: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn setpayloadsigl(__x: *mut u128, __payload: u128) -> libc::c_int;
    }
    extern "C" {
        pub fn scalbl(__x: u128, __n: u128) -> u128;
    }
    extern "C" {
        pub fn __scalbl(__x: u128, __n: u128) -> u128;
    }
    extern "C" {
        pub fn acosf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __acosf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn asinf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __asinf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn atanf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __atanf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn atan2f32(__y: root::_Float32, __x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __atan2f32(__y: root::_Float32, __x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn cosf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __cosf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn sinf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __sinf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn tanf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __tanf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn coshf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __coshf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn sinhf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __sinhf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn tanhf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __tanhf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn sincosf32(
            __x: root::_Float32,
            __sinx: *mut root::_Float32,
            __cosx: *mut root::_Float32,
        );
    }
    extern "C" {
        pub fn __sincosf32(
            __x: root::_Float32,
            __sinx: *mut root::_Float32,
            __cosx: *mut root::_Float32,
        );
    }
    extern "C" {
        pub fn acoshf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __acoshf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn asinhf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __asinhf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn atanhf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __atanhf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn expf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __expf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn frexpf32(__x: root::_Float32, __exponent: *mut libc::c_int) -> root::_Float32;
    }
    extern "C" {
        pub fn __frexpf32(__x: root::_Float32, __exponent: *mut libc::c_int) -> root::_Float32;
    }
    extern "C" {
        pub fn ldexpf32(__x: root::_Float32, __exponent: libc::c_int) -> root::_Float32;
    }
    extern "C" {
        pub fn __ldexpf32(__x: root::_Float32, __exponent: libc::c_int) -> root::_Float32;
    }
    extern "C" {
        pub fn logf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __logf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn log10f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __log10f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn modff32(__x: root::_Float32, __iptr: *mut root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __modff32(__x: root::_Float32, __iptr: *mut root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn exp10f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __exp10f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn expm1f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __expm1f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn log1pf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __log1pf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn logbf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __logbf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn exp2f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __exp2f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn log2f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __log2f32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn powf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __powf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn sqrtf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __sqrtf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn hypotf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __hypotf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn cbrtf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __cbrtf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn ceilf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __ceilf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn fabsf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __fabsf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn floorf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __floorf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn fmodf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __fmodf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn copysignf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __copysignf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn nanf32(__tagb: *const libc::c_char) -> root::_Float32;
    }
    extern "C" {
        pub fn __nanf32(__tagb: *const libc::c_char) -> root::_Float32;
    }
    extern "C" {
        pub fn j0f32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __j0f32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn j1f32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __j1f32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn jnf32(arg1: libc::c_int, arg2: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __jnf32(arg1: libc::c_int, arg2: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn y0f32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __y0f32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn y1f32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __y1f32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn ynf32(arg1: libc::c_int, arg2: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __ynf32(arg1: libc::c_int, arg2: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn erff32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __erff32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn erfcf32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __erfcf32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn lgammaf32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __lgammaf32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn tgammaf32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __tgammaf32(arg1: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn lgammaf32_r(arg1: root::_Float32, __signgamp: *mut libc::c_int) -> root::_Float32;
    }
    extern "C" {
        pub fn __lgammaf32_r(arg1: root::_Float32, __signgamp: *mut libc::c_int) -> root::_Float32;
    }
    extern "C" {
        pub fn rintf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __rintf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn nextafterf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __nextafterf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn nextdownf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __nextdownf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn nextupf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __nextupf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn remainderf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __remainderf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn scalbnf32(__x: root::_Float32, __n: libc::c_int) -> root::_Float32;
    }
    extern "C" {
        pub fn __scalbnf32(__x: root::_Float32, __n: libc::c_int) -> root::_Float32;
    }
    extern "C" {
        pub fn ilogbf32(__x: root::_Float32) -> libc::c_int;
    }
    extern "C" {
        pub fn __ilogbf32(__x: root::_Float32) -> libc::c_int;
    }
    extern "C" {
        pub fn llogbf32(__x: root::_Float32) -> libc::c_long;
    }
    extern "C" {
        pub fn __llogbf32(__x: root::_Float32) -> libc::c_long;
    }
    extern "C" {
        pub fn scalblnf32(__x: root::_Float32, __n: libc::c_long) -> root::_Float32;
    }
    extern "C" {
        pub fn __scalblnf32(__x: root::_Float32, __n: libc::c_long) -> root::_Float32;
    }
    extern "C" {
        pub fn nearbyintf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __nearbyintf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn roundf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __roundf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn truncf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __truncf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn remquof32(
            __x: root::_Float32,
            __y: root::_Float32,
            __quo: *mut libc::c_int,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn __remquof32(
            __x: root::_Float32,
            __y: root::_Float32,
            __quo: *mut libc::c_int,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn lrintf32(__x: root::_Float32) -> libc::c_long;
    }
    extern "C" {
        pub fn __lrintf32(__x: root::_Float32) -> libc::c_long;
    }
    extern "C" {
        pub fn llrintf32(__x: root::_Float32) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llrintf32(__x: root::_Float32) -> libc::c_longlong;
    }
    extern "C" {
        pub fn lroundf32(__x: root::_Float32) -> libc::c_long;
    }
    extern "C" {
        pub fn __lroundf32(__x: root::_Float32) -> libc::c_long;
    }
    extern "C" {
        pub fn llroundf32(__x: root::_Float32) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llroundf32(__x: root::_Float32) -> libc::c_longlong;
    }
    extern "C" {
        pub fn fdimf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __fdimf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn fmaxf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __fmaxf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn fminf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __fminf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn fmaf32(
            __x: root::_Float32,
            __y: root::_Float32,
            __z: root::_Float32,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn __fmaf32(
            __x: root::_Float32,
            __y: root::_Float32,
            __z: root::_Float32,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn roundevenf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __roundevenf32(__x: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn fromfpf32(
            __x: root::_Float32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf32(
            __x: root::_Float32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf32(
            __x: root::_Float32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf32(
            __x: root::_Float32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf32(
            __x: root::_Float32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf32(
            __x: root::_Float32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf32(
            __x: root::_Float32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf32(
            __x: root::_Float32,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __fmaxmagf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn fminmagf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __fminmagf32(__x: root::_Float32, __y: root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn totalorderf32(__x: root::_Float32, __y: root::_Float32) -> libc::c_int;
    }
    extern "C" {
        pub fn totalordermagf32(__x: root::_Float32, __y: root::_Float32) -> libc::c_int;
    }
    extern "C" {
        pub fn canonicalizef32(
            __cx: *mut root::_Float32,
            __x: *const root::_Float32,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getpayloadf32(__x: *const root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn __getpayloadf32(__x: *const root::_Float32) -> root::_Float32;
    }
    extern "C" {
        pub fn setpayloadf32(__x: *mut root::_Float32, __payload: root::_Float32) -> libc::c_int;
    }
    extern "C" {
        pub fn setpayloadsigf32(__x: *mut root::_Float32, __payload: root::_Float32)
            -> libc::c_int;
    }
    extern "C" {
        pub fn acosf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __acosf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn asinf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __asinf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn atanf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __atanf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn atan2f64(__y: root::_Float64, __x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __atan2f64(__y: root::_Float64, __x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn cosf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __cosf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn sinf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __sinf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn tanf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __tanf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn coshf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __coshf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn sinhf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __sinhf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn tanhf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __tanhf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn sincosf64(
            __x: root::_Float64,
            __sinx: *mut root::_Float64,
            __cosx: *mut root::_Float64,
        );
    }
    extern "C" {
        pub fn __sincosf64(
            __x: root::_Float64,
            __sinx: *mut root::_Float64,
            __cosx: *mut root::_Float64,
        );
    }
    extern "C" {
        pub fn acoshf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __acoshf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn asinhf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __asinhf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn atanhf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __atanhf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn expf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __expf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn frexpf64(__x: root::_Float64, __exponent: *mut libc::c_int) -> root::_Float64;
    }
    extern "C" {
        pub fn __frexpf64(__x: root::_Float64, __exponent: *mut libc::c_int) -> root::_Float64;
    }
    extern "C" {
        pub fn ldexpf64(__x: root::_Float64, __exponent: libc::c_int) -> root::_Float64;
    }
    extern "C" {
        pub fn __ldexpf64(__x: root::_Float64, __exponent: libc::c_int) -> root::_Float64;
    }
    extern "C" {
        pub fn logf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __logf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn log10f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __log10f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn modff64(__x: root::_Float64, __iptr: *mut root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __modff64(__x: root::_Float64, __iptr: *mut root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn exp10f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __exp10f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn expm1f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __expm1f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn log1pf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __log1pf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn logbf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __logbf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn exp2f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __exp2f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn log2f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __log2f64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn powf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __powf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn sqrtf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __sqrtf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn hypotf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __hypotf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn cbrtf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __cbrtf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn ceilf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __ceilf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn fabsf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __fabsf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn floorf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __floorf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn fmodf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __fmodf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn copysignf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __copysignf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn nanf64(__tagb: *const libc::c_char) -> root::_Float64;
    }
    extern "C" {
        pub fn __nanf64(__tagb: *const libc::c_char) -> root::_Float64;
    }
    extern "C" {
        pub fn j0f64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __j0f64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn j1f64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __j1f64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn jnf64(arg1: libc::c_int, arg2: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __jnf64(arg1: libc::c_int, arg2: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn y0f64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __y0f64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn y1f64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __y1f64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn ynf64(arg1: libc::c_int, arg2: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __ynf64(arg1: libc::c_int, arg2: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn erff64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __erff64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn erfcf64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __erfcf64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn lgammaf64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __lgammaf64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn tgammaf64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __tgammaf64(arg1: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn lgammaf64_r(arg1: root::_Float64, __signgamp: *mut libc::c_int) -> root::_Float64;
    }
    extern "C" {
        pub fn __lgammaf64_r(arg1: root::_Float64, __signgamp: *mut libc::c_int) -> root::_Float64;
    }
    extern "C" {
        pub fn rintf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __rintf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn nextafterf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __nextafterf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn nextdownf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __nextdownf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn nextupf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __nextupf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn remainderf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __remainderf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn scalbnf64(__x: root::_Float64, __n: libc::c_int) -> root::_Float64;
    }
    extern "C" {
        pub fn __scalbnf64(__x: root::_Float64, __n: libc::c_int) -> root::_Float64;
    }
    extern "C" {
        pub fn ilogbf64(__x: root::_Float64) -> libc::c_int;
    }
    extern "C" {
        pub fn __ilogbf64(__x: root::_Float64) -> libc::c_int;
    }
    extern "C" {
        pub fn llogbf64(__x: root::_Float64) -> libc::c_long;
    }
    extern "C" {
        pub fn __llogbf64(__x: root::_Float64) -> libc::c_long;
    }
    extern "C" {
        pub fn scalblnf64(__x: root::_Float64, __n: libc::c_long) -> root::_Float64;
    }
    extern "C" {
        pub fn __scalblnf64(__x: root::_Float64, __n: libc::c_long) -> root::_Float64;
    }
    extern "C" {
        pub fn nearbyintf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __nearbyintf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn roundf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __roundf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn truncf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __truncf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn remquof64(
            __x: root::_Float64,
            __y: root::_Float64,
            __quo: *mut libc::c_int,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn __remquof64(
            __x: root::_Float64,
            __y: root::_Float64,
            __quo: *mut libc::c_int,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn lrintf64(__x: root::_Float64) -> libc::c_long;
    }
    extern "C" {
        pub fn __lrintf64(__x: root::_Float64) -> libc::c_long;
    }
    extern "C" {
        pub fn llrintf64(__x: root::_Float64) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llrintf64(__x: root::_Float64) -> libc::c_longlong;
    }
    extern "C" {
        pub fn lroundf64(__x: root::_Float64) -> libc::c_long;
    }
    extern "C" {
        pub fn __lroundf64(__x: root::_Float64) -> libc::c_long;
    }
    extern "C" {
        pub fn llroundf64(__x: root::_Float64) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llroundf64(__x: root::_Float64) -> libc::c_longlong;
    }
    extern "C" {
        pub fn fdimf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __fdimf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn fmaxf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __fmaxf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn fminf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __fminf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn fmaf64(
            __x: root::_Float64,
            __y: root::_Float64,
            __z: root::_Float64,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn __fmaf64(
            __x: root::_Float64,
            __y: root::_Float64,
            __z: root::_Float64,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn roundevenf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __roundevenf64(__x: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn fromfpf64(
            __x: root::_Float64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf64(
            __x: root::_Float64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf64(
            __x: root::_Float64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf64(
            __x: root::_Float64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf64(
            __x: root::_Float64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf64(
            __x: root::_Float64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf64(
            __x: root::_Float64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf64(
            __x: root::_Float64,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __fmaxmagf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn fminmagf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __fminmagf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn totalorderf64(__x: root::_Float64, __y: root::_Float64) -> libc::c_int;
    }
    extern "C" {
        pub fn totalordermagf64(__x: root::_Float64, __y: root::_Float64) -> libc::c_int;
    }
    extern "C" {
        pub fn canonicalizef64(
            __cx: *mut root::_Float64,
            __x: *const root::_Float64,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getpayloadf64(__x: *const root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn __getpayloadf64(__x: *const root::_Float64) -> root::_Float64;
    }
    extern "C" {
        pub fn setpayloadf64(__x: *mut root::_Float64, __payload: root::_Float64) -> libc::c_int;
    }
    extern "C" {
        pub fn setpayloadsigf64(__x: *mut root::_Float64, __payload: root::_Float64)
            -> libc::c_int;
    }
    extern "C" {
        pub fn acosf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __acosf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn asinf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __asinf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn atanf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __atanf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn atan2f32x(__y: root::_Float32x, __x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __atan2f32x(__y: root::_Float32x, __x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn cosf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __cosf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn sinf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __sinf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn tanf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __tanf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn coshf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __coshf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn sinhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __sinhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn tanhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __tanhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn sincosf32x(
            __x: root::_Float32x,
            __sinx: *mut root::_Float32x,
            __cosx: *mut root::_Float32x,
        );
    }
    extern "C" {
        pub fn __sincosf32x(
            __x: root::_Float32x,
            __sinx: *mut root::_Float32x,
            __cosx: *mut root::_Float32x,
        );
    }
    extern "C" {
        pub fn acoshf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __acoshf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn asinhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __asinhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn atanhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __atanhf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn expf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __expf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn frexpf32x(__x: root::_Float32x, __exponent: *mut libc::c_int) -> root::_Float32x;
    }
    extern "C" {
        pub fn __frexpf32x(__x: root::_Float32x, __exponent: *mut libc::c_int) -> root::_Float32x;
    }
    extern "C" {
        pub fn ldexpf32x(__x: root::_Float32x, __exponent: libc::c_int) -> root::_Float32x;
    }
    extern "C" {
        pub fn __ldexpf32x(__x: root::_Float32x, __exponent: libc::c_int) -> root::_Float32x;
    }
    extern "C" {
        pub fn logf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __logf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn log10f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __log10f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn modff32x(__x: root::_Float32x, __iptr: *mut root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __modff32x(__x: root::_Float32x, __iptr: *mut root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn exp10f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __exp10f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn expm1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __expm1f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn log1pf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __log1pf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn logbf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __logbf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn exp2f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __exp2f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn log2f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __log2f32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn powf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __powf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn sqrtf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __sqrtf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn hypotf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __hypotf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn cbrtf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __cbrtf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn ceilf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __ceilf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn fabsf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __fabsf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn floorf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __floorf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn fmodf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __fmodf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn copysignf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __copysignf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn nanf32x(__tagb: *const libc::c_char) -> root::_Float32x;
    }
    extern "C" {
        pub fn __nanf32x(__tagb: *const libc::c_char) -> root::_Float32x;
    }
    extern "C" {
        pub fn j0f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __j0f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn j1f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __j1f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn jnf32x(arg1: libc::c_int, arg2: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __jnf32x(arg1: libc::c_int, arg2: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn y0f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __y0f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn y1f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __y1f32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn ynf32x(arg1: libc::c_int, arg2: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __ynf32x(arg1: libc::c_int, arg2: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn erff32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __erff32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn erfcf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __erfcf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn lgammaf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __lgammaf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn tgammaf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __tgammaf32x(arg1: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn lgammaf32x_r(arg1: root::_Float32x, __signgamp: *mut libc::c_int)
            -> root::_Float32x;
    }
    extern "C" {
        pub fn __lgammaf32x_r(
            arg1: root::_Float32x,
            __signgamp: *mut libc::c_int,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn rintf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __rintf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn nextafterf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __nextafterf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn nextdownf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __nextdownf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn nextupf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __nextupf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn remainderf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __remainderf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn scalbnf32x(__x: root::_Float32x, __n: libc::c_int) -> root::_Float32x;
    }
    extern "C" {
        pub fn __scalbnf32x(__x: root::_Float32x, __n: libc::c_int) -> root::_Float32x;
    }
    extern "C" {
        pub fn ilogbf32x(__x: root::_Float32x) -> libc::c_int;
    }
    extern "C" {
        pub fn __ilogbf32x(__x: root::_Float32x) -> libc::c_int;
    }
    extern "C" {
        pub fn llogbf32x(__x: root::_Float32x) -> libc::c_long;
    }
    extern "C" {
        pub fn __llogbf32x(__x: root::_Float32x) -> libc::c_long;
    }
    extern "C" {
        pub fn scalblnf32x(__x: root::_Float32x, __n: libc::c_long) -> root::_Float32x;
    }
    extern "C" {
        pub fn __scalblnf32x(__x: root::_Float32x, __n: libc::c_long) -> root::_Float32x;
    }
    extern "C" {
        pub fn nearbyintf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __nearbyintf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn roundf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __roundf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn truncf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __truncf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn remquof32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __quo: *mut libc::c_int,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn __remquof32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __quo: *mut libc::c_int,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn lrintf32x(__x: root::_Float32x) -> libc::c_long;
    }
    extern "C" {
        pub fn __lrintf32x(__x: root::_Float32x) -> libc::c_long;
    }
    extern "C" {
        pub fn llrintf32x(__x: root::_Float32x) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llrintf32x(__x: root::_Float32x) -> libc::c_longlong;
    }
    extern "C" {
        pub fn lroundf32x(__x: root::_Float32x) -> libc::c_long;
    }
    extern "C" {
        pub fn __lroundf32x(__x: root::_Float32x) -> libc::c_long;
    }
    extern "C" {
        pub fn llroundf32x(__x: root::_Float32x) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llroundf32x(__x: root::_Float32x) -> libc::c_longlong;
    }
    extern "C" {
        pub fn fdimf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __fdimf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn fmaxf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __fmaxf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn fminf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __fminf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn fmaf32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __z: root::_Float32x,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn __fmaf32x(
            __x: root::_Float32x,
            __y: root::_Float32x,
            __z: root::_Float32x,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn roundevenf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __roundevenf32x(__x: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn fromfpf32x(
            __x: root::_Float32x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf32x(
            __x: root::_Float32x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf32x(
            __x: root::_Float32x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf32x(
            __x: root::_Float32x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf32x(
            __x: root::_Float32x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf32x(
            __x: root::_Float32x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf32x(
            __x: root::_Float32x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf32x(
            __x: root::_Float32x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __fmaxmagf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn fminmagf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __fminmagf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn totalorderf32x(__x: root::_Float32x, __y: root::_Float32x) -> libc::c_int;
    }
    extern "C" {
        pub fn totalordermagf32x(__x: root::_Float32x, __y: root::_Float32x) -> libc::c_int;
    }
    extern "C" {
        pub fn canonicalizef32x(
            __cx: *mut root::_Float32x,
            __x: *const root::_Float32x,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getpayloadf32x(__x: *const root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn __getpayloadf32x(__x: *const root::_Float32x) -> root::_Float32x;
    }
    extern "C" {
        pub fn setpayloadf32x(__x: *mut root::_Float32x, __payload: root::_Float32x)
            -> libc::c_int;
    }
    extern "C" {
        pub fn setpayloadsigf32x(
            __x: *mut root::_Float32x,
            __payload: root::_Float32x,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn acosf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __acosf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn asinf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __asinf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn atanf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __atanf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn atan2f64x(__y: root::_Float64x, __x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __atan2f64x(__y: root::_Float64x, __x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn cosf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __cosf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn sinf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __sinf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn tanf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __tanf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn coshf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __coshf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn sinhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __sinhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn tanhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __tanhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn sincosf64x(
            __x: root::_Float64x,
            __sinx: *mut root::_Float64x,
            __cosx: *mut root::_Float64x,
        );
    }
    extern "C" {
        pub fn __sincosf64x(
            __x: root::_Float64x,
            __sinx: *mut root::_Float64x,
            __cosx: *mut root::_Float64x,
        );
    }
    extern "C" {
        pub fn acoshf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __acoshf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn asinhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __asinhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn atanhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __atanhf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn expf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __expf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn frexpf64x(__x: root::_Float64x, __exponent: *mut libc::c_int) -> root::_Float64x;
    }
    extern "C" {
        pub fn __frexpf64x(__x: root::_Float64x, __exponent: *mut libc::c_int) -> root::_Float64x;
    }
    extern "C" {
        pub fn ldexpf64x(__x: root::_Float64x, __exponent: libc::c_int) -> root::_Float64x;
    }
    extern "C" {
        pub fn __ldexpf64x(__x: root::_Float64x, __exponent: libc::c_int) -> root::_Float64x;
    }
    extern "C" {
        pub fn logf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __logf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn log10f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __log10f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn modff64x(__x: root::_Float64x, __iptr: *mut root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __modff64x(__x: root::_Float64x, __iptr: *mut root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn exp10f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __exp10f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn expm1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __expm1f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn log1pf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __log1pf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn logbf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __logbf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn exp2f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __exp2f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn log2f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __log2f64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn powf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __powf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn sqrtf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __sqrtf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn hypotf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __hypotf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn cbrtf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __cbrtf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn ceilf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __ceilf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn fabsf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __fabsf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn floorf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __floorf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn fmodf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __fmodf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn copysignf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __copysignf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn nanf64x(__tagb: *const libc::c_char) -> root::_Float64x;
    }
    extern "C" {
        pub fn __nanf64x(__tagb: *const libc::c_char) -> root::_Float64x;
    }
    extern "C" {
        pub fn j0f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __j0f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn j1f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __j1f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn jnf64x(arg1: libc::c_int, arg2: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __jnf64x(arg1: libc::c_int, arg2: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn y0f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __y0f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn y1f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __y1f64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn ynf64x(arg1: libc::c_int, arg2: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __ynf64x(arg1: libc::c_int, arg2: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn erff64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __erff64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn erfcf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __erfcf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn lgammaf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __lgammaf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn tgammaf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __tgammaf64x(arg1: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn lgammaf64x_r(arg1: root::_Float64x, __signgamp: *mut libc::c_int)
            -> root::_Float64x;
    }
    extern "C" {
        pub fn __lgammaf64x_r(
            arg1: root::_Float64x,
            __signgamp: *mut libc::c_int,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn rintf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __rintf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn nextafterf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __nextafterf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn nextdownf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __nextdownf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn nextupf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __nextupf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn remainderf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __remainderf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn scalbnf64x(__x: root::_Float64x, __n: libc::c_int) -> root::_Float64x;
    }
    extern "C" {
        pub fn __scalbnf64x(__x: root::_Float64x, __n: libc::c_int) -> root::_Float64x;
    }
    extern "C" {
        pub fn ilogbf64x(__x: root::_Float64x) -> libc::c_int;
    }
    extern "C" {
        pub fn __ilogbf64x(__x: root::_Float64x) -> libc::c_int;
    }
    extern "C" {
        pub fn llogbf64x(__x: root::_Float64x) -> libc::c_long;
    }
    extern "C" {
        pub fn __llogbf64x(__x: root::_Float64x) -> libc::c_long;
    }
    extern "C" {
        pub fn scalblnf64x(__x: root::_Float64x, __n: libc::c_long) -> root::_Float64x;
    }
    extern "C" {
        pub fn __scalblnf64x(__x: root::_Float64x, __n: libc::c_long) -> root::_Float64x;
    }
    extern "C" {
        pub fn nearbyintf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __nearbyintf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn roundf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __roundf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn truncf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __truncf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn remquof64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __quo: *mut libc::c_int,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn __remquof64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __quo: *mut libc::c_int,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn lrintf64x(__x: root::_Float64x) -> libc::c_long;
    }
    extern "C" {
        pub fn __lrintf64x(__x: root::_Float64x) -> libc::c_long;
    }
    extern "C" {
        pub fn llrintf64x(__x: root::_Float64x) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llrintf64x(__x: root::_Float64x) -> libc::c_longlong;
    }
    extern "C" {
        pub fn lroundf64x(__x: root::_Float64x) -> libc::c_long;
    }
    extern "C" {
        pub fn __lroundf64x(__x: root::_Float64x) -> libc::c_long;
    }
    extern "C" {
        pub fn llroundf64x(__x: root::_Float64x) -> libc::c_longlong;
    }
    extern "C" {
        pub fn __llroundf64x(__x: root::_Float64x) -> libc::c_longlong;
    }
    extern "C" {
        pub fn fdimf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __fdimf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn fmaxf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __fmaxf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn fminf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __fminf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn fmaf64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __z: root::_Float64x,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn __fmaf64x(
            __x: root::_Float64x,
            __y: root::_Float64x,
            __z: root::_Float64x,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn roundevenf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __roundevenf64x(__x: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn fromfpf64x(
            __x: root::_Float64x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpf64x(
            __x: root::_Float64x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpf64x(
            __x: root::_Float64x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpf64x(
            __x: root::_Float64x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fromfpxf64x(
            __x: root::_Float64x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn __fromfpxf64x(
            __x: root::_Float64x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__intmax_t;
    }
    extern "C" {
        pub fn ufromfpxf64x(
            __x: root::_Float64x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn __ufromfpxf64x(
            __x: root::_Float64x,
            __round: libc::c_int,
            __width: libc::c_uint,
        ) -> root::__uintmax_t;
    }
    extern "C" {
        pub fn fmaxmagf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __fmaxmagf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn fminmagf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __fminmagf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn totalorderf64x(__x: root::_Float64x, __y: root::_Float64x) -> libc::c_int;
    }
    extern "C" {
        pub fn totalordermagf64x(__x: root::_Float64x, __y: root::_Float64x) -> libc::c_int;
    }
    extern "C" {
        pub fn canonicalizef64x(
            __cx: *mut root::_Float64x,
            __x: *const root::_Float64x,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn getpayloadf64x(__x: *const root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn __getpayloadf64x(__x: *const root::_Float64x) -> root::_Float64x;
    }
    extern "C" {
        pub fn setpayloadf64x(__x: *mut root::_Float64x, __payload: root::_Float64x)
            -> libc::c_int;
    }
    extern "C" {
        pub fn setpayloadsigf64x(
            __x: *mut root::_Float64x,
            __payload: root::_Float64x,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn fadd(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fdiv(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fmul(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn fsub(__x: f64, __y: f64) -> f32;
    }
    extern "C" {
        pub fn faddl(__x: u128, __y: u128) -> f32;
    }
    extern "C" {
        pub fn fdivl(__x: u128, __y: u128) -> f32;
    }
    extern "C" {
        pub fn fmull(__x: u128, __y: u128) -> f32;
    }
    extern "C" {
        pub fn fsubl(__x: u128, __y: u128) -> f32;
    }
    extern "C" {
        pub fn daddl(__x: u128, __y: u128) -> f64;
    }
    extern "C" {
        pub fn ddivl(__x: u128, __y: u128) -> f64;
    }
    extern "C" {
        pub fn dmull(__x: u128, __y: u128) -> f64;
    }
    extern "C" {
        pub fn dsubl(__x: u128, __y: u128) -> f64;
    }
    extern "C" {
        pub fn f32addf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32;
    }
    extern "C" {
        pub fn f32divf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32;
    }
    extern "C" {
        pub fn f32mulf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32;
    }
    extern "C" {
        pub fn f32subf32x(__x: root::_Float32x, __y: root::_Float32x) -> root::_Float32;
    }
    extern "C" {
        pub fn f32addf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32;
    }
    extern "C" {
        pub fn f32divf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32;
    }
    extern "C" {
        pub fn f32mulf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32;
    }
    extern "C" {
        pub fn f32subf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32;
    }
    extern "C" {
        pub fn f32addf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32;
    }
    extern "C" {
        pub fn f32divf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32;
    }
    extern "C" {
        pub fn f32mulf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32;
    }
    extern "C" {
        pub fn f32subf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32;
    }
    extern "C" {
        pub fn f32xaddf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32x;
    }
    extern "C" {
        pub fn f32xdivf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32x;
    }
    extern "C" {
        pub fn f32xmulf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32x;
    }
    extern "C" {
        pub fn f32xsubf64(__x: root::_Float64, __y: root::_Float64) -> root::_Float32x;
    }
    extern "C" {
        pub fn f32xaddf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32x;
    }
    extern "C" {
        pub fn f32xdivf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32x;
    }
    extern "C" {
        pub fn f32xmulf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32x;
    }
    extern "C" {
        pub fn f32xsubf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float32x;
    }
    extern "C" {
        pub fn f64addf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64;
    }
    extern "C" {
        pub fn f64divf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64;
    }
    extern "C" {
        pub fn f64mulf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64;
    }
    extern "C" {
        pub fn f64subf64x(__x: root::_Float64x, __y: root::_Float64x) -> root::_Float64;
    }
    extern "C" {
        #[link_name = "\u{1}signgam"]
        pub static mut signgam: libc::c_int;
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum _bindgen_ty_56 {
        FP_NAN = 0,
        FP_INFINITE = 1,
        FP_ZERO = 2,
        FP_SUBNORMAL = 3,
        FP_NORMAL = 4,
    }
    extern "C" {
        pub fn __iscanonicall(__x: u128) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11iscanonicalf"]
        pub fn iscanonical(__val: f32) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11iscanonicald"]
        pub fn iscanonical1(__val: f64) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11iscanonicale"]
        pub fn iscanonical2(__val: u128) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11issignalingf"]
        pub fn issignaling(__val: f32) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11issignalingd"]
        pub fn issignaling1(__val: f64) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11issignalinge"]
        pub fn issignaling2(__val: u128) -> libc::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __iseqsig_type {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout___iseqsig_type_open0_float_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout___iseqsig_type_open0_double_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout___iseqsig_type_open0_long_double_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::__iseqsig_type>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::__iseqsig_type)
            )
        );
    }
    extern "C" {
        pub fn mtof(f: f64) -> f64;
    }
    extern "C" {
        pub fn ftom(f: f64) -> f64;
    }
    extern "C" {
        pub fn powtodb(f: f64) -> f64;
    }
    extern "C" {
        pub fn rmstodb(f: f64) -> f64;
    }
    extern "C" {
        pub fn dbtopow(f: f64) -> f64;
    }
    extern "C" {
        pub fn dbtorms(f: f64) -> f64;
    }
    extern "C" {
        pub fn nextpow2(i: libc::c_ulong) -> libc::c_ulong;
    }
    extern "C" {
        pub fn ensurepow2(i: libc::c_ulong) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z4itoaB5cxx11l"]
        pub fn itoa(val: libc::c_long) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z4ftoaB5cxx11dm"]
        pub fn ftoa(val: f64, precision: libc::c_ulong) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z7tolowerRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn tolower1(val: *const root::std::__cxx11::string) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z7toupperRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn toupper1(val: *const root::std::__cxx11::string) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z4trimRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn trim(val: *const root::std::__cxx11::string) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z5ltrimRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn ltrim(val: *const root::std::__cxx11::string) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z5rtrimRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn rtrim(val: *const root::std::__cxx11::string) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12extract_argsRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS4_RSt6vectorIS4_SaIS4_EE"]
        pub fn extract_args(
            token: *const root::std::__cxx11::string,
            filename: *mut root::std::__cxx11::string,
            args: *mut root::std::vector,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9dir_go_upRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn dir_go_up(
            dir: *const root::std::__cxx11::string,
            numUp: libc::c_long,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13get_full_pathRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn get_full_path(fp: *const root::std::__cxx11::string) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15expand_filepathRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn expand_filepath(fp: *mut root::std::__cxx11::string) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20extract_filepath_dirRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn extract_filepath_dir(
            filepath: *mut root::std::__cxx11::string,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z29normalize_directory_separatorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn normalize_directory_separator(
            filepath: *const root::std::__cxx11::string,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10str_endsinPKcS0_"]
        pub fn str_endsin(str: *const libc::c_char, end: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15parse_path_listRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_4listIS4_SaIS4_EEE"]
        pub fn parse_path_list(
            str: *mut root::std::__cxx11::string,
            lst: *mut root::std::__cxx11::list,
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
    pub struct HidMsg {
        pub device_type: libc::c_long,
        pub device_num: libc::c_long,
        pub type_: libc::c_long,
        pub eid: libc::c_long,
        pub idata: [libc::c_long; 4usize],
        pub fdata: [f64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_HidMsg() {
        assert_eq!(
            ::std::mem::size_of::<HidMsg>(),
            96usize,
            concat!("Size of: ", stringify!(HidMsg))
        );
        assert_eq!(
            ::std::mem::align_of::<HidMsg>(),
            8usize,
            concat!("Alignment of ", stringify!(HidMsg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).device_type as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(device_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).device_num as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).type_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).eid as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(eid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).idata as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(idata)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidMsg>())).fdata as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(HidMsg),
                "::",
                stringify!(fdata)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidMsg5clearEv"]
        pub fn HidMsg_clear(this: *mut root::HidMsg);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidMsgC1Ev"]
        pub fn HidMsg_HidMsg(this: *mut root::HidMsg);
    }
    impl HidMsg {
        #[inline]
        pub unsafe fn clear(&mut self) {
            HidMsg_clear(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            HidMsg_HidMsg(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_NONE"]
        pub static CK_HID_DEV_NONE: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_JOYSTICK"]
        pub static CK_HID_DEV_JOYSTICK: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_MOUSE"]
        pub static CK_HID_DEV_MOUSE: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_KEYBOARD"]
        pub static CK_HID_DEV_KEYBOARD: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_WIIREMOTE"]
        pub static CK_HID_DEV_WIIREMOTE: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_TILTSENSOR"]
        pub static CK_HID_DEV_TILTSENSOR: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_TABLET"]
        pub static CK_HID_DEV_TABLET: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_MULTITOUCH"]
        pub static CK_HID_DEV_MULTITOUCH: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEV_COUNT"]
        pub static CK_HID_DEV_COUNT: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_JOYSTICK_AXIS"]
        pub static CK_HID_JOYSTICK_AXIS: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_BUTTON_DOWN"]
        pub static CK_HID_BUTTON_DOWN: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_BUTTON_UP"]
        pub static CK_HID_BUTTON_UP: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_JOYSTICK_HAT"]
        pub static CK_HID_JOYSTICK_HAT: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_JOYSTICK_BALL"]
        pub static CK_HID_JOYSTICK_BALL: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_MOUSE_MOTION"]
        pub static CK_HID_MOUSE_MOTION: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_MOUSE_WHEEL"]
        pub static CK_HID_MOUSE_WHEEL: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEVICE_CONNECTED"]
        pub static CK_HID_DEVICE_CONNECTED: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_DEVICE_DISCONNECTED"]
        pub static CK_HID_DEVICE_DISCONNECTED: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_ACCELEROMETER"]
        pub static CK_HID_ACCELEROMETER: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_WIIREMOTE_IR"]
        pub static CK_HID_WIIREMOTE_IR: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_LED"]
        pub static CK_HID_LED: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_FORCE_FEEDBACK"]
        pub static CK_HID_FORCE_FEEDBACK: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_SPEAKER"]
        pub static CK_HID_SPEAKER: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_TABLET_PRESSURE"]
        pub static CK_HID_TABLET_PRESSURE: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_TABLET_MOTION"]
        pub static CK_HID_TABLET_MOTION: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_TABLET_ROTATION"]
        pub static CK_HID_TABLET_ROTATION: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_MULTITOUCH_TOUCH"]
        pub static CK_HID_MULTITOUCH_TOUCH: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}CK_HID_MSG_COUNT"]
        pub static CK_HID_MSG_COUNT: libc::c_ulong;
    }
    #[repr(i32)]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum HidResult {
        HID_GENERALERROR = -1,
        HID_NOERROR = 0,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _Chuck_Hid_Driver {
        pub init: ::std::option::Option<unsafe extern "C" fn()>,
        pub quit: ::std::option::Option<unsafe extern "C" fn()>,
        pub poll: ::std::option::Option<unsafe extern "C" fn()>,
        pub probe: ::std::option::Option<unsafe extern "C" fn()>,
        pub count: ::std::option::Option<unsafe extern "C" fn() -> libc::c_int>,
        pub count_elements: ::std::option::Option<
            unsafe extern "C" fn(arg1: libc::c_int, arg2: libc::c_int) -> libc::c_int,
        >,
        pub open: ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_int) -> libc::c_int>,
        pub open_async:
            ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_int) -> libc::c_int>,
        pub close: ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_int) -> libc::c_int>,
        pub send: ::std::option::Option<
            unsafe extern "C" fn(arg1: libc::c_int, arg2: *const root::HidMsg) -> libc::c_int,
        >,
        pub read: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: libc::c_int,
                arg2: libc::c_int,
                arg3: libc::c_int,
                arg4: *mut root::HidMsg,
            ) -> libc::c_int,
        >,
        pub name:
            ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_int) -> *const libc::c_char>,
        pub driver_name: *const libc::c_char,
    }
    #[test]
    fn bindgen_test_layout__Chuck_Hid_Driver() {
        assert_eq!(
            ::std::mem::size_of::<_Chuck_Hid_Driver>(),
            104usize,
            concat!("Size of: ", stringify!(_Chuck_Hid_Driver))
        );
        assert_eq!(
            ::std::mem::align_of::<_Chuck_Hid_Driver>(),
            8usize,
            concat!("Alignment of ", stringify!(_Chuck_Hid_Driver))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).init as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(init)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).quit as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(quit)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).poll as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(poll)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).probe as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(probe)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).count as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(count)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).count_elements as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(count_elements)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).open as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(open)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).open_async as *const _ as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(open_async)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).close as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(close)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).send as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(send)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).read as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(read)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).name as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_Chuck_Hid_Driver>())).driver_name as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_Chuck_Hid_Driver),
                "::",
                stringify!(driver_name)
            )
        );
    }
    impl Default for _Chuck_Hid_Driver {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type Chuck_Hid_Driver = root::_Chuck_Hid_Driver;
    extern "C" {
        #[link_name = "\u{1}_Z8Hid_initv"]
        pub fn Hid_init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z8Hid_pollv"]
        pub fn Hid_poll();
    }
    extern "C" {
        #[link_name = "\u{1}_Z8Hid_quitv"]
        pub fn Hid_quit();
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_initv"]
        pub fn Joystick_init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_pollv"]
        pub fn Joystick_poll();
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_quitv"]
        pub fn Joystick_quit();
    }
    extern "C" {
        #[link_name = "\u{1}_Z14Joystick_probev"]
        pub fn Joystick_probe();
    }
    extern "C" {
        #[link_name = "\u{1}_Z14Joystick_countv"]
        pub fn Joystick_count() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23Joystick_count_elementsii"]
        pub fn Joystick_count_elements(js: libc::c_int, type_: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_openi"]
        pub fn Joystick_open(js: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19Joystick_open_asynci"]
        pub fn Joystick_open_async(js: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_openPKc"]
        pub fn Joystick_open1(name: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14Joystick_closei"]
        pub fn Joystick_close(js: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_sendiPK6HidMsg"]
        pub fn Joystick_send(js: libc::c_int, msg: *const root::HidMsg) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_namei"]
        pub fn Joystick_name(js: libc::c_int) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_axesi"]
        pub fn Joystick_axes(js: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16Joystick_buttonsi"]
        pub fn Joystick_buttons(js: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Joystick_hatsi"]
        pub fn Joystick_hats(js: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10Mouse_initv"]
        pub fn Mouse_init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z10Mouse_pollv"]
        pub fn Mouse_poll();
    }
    extern "C" {
        #[link_name = "\u{1}_Z10Mouse_quitv"]
        pub fn Mouse_quit();
    }
    extern "C" {
        #[link_name = "\u{1}_Z11Mouse_probev"]
        pub fn Mouse_probe();
    }
    extern "C" {
        #[link_name = "\u{1}_Z11Mouse_countv"]
        pub fn Mouse_count() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20Mouse_count_elementsii"]
        pub fn Mouse_count_elements(js: libc::c_int, type_: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10Mouse_openi"]
        pub fn Mouse_open(m: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10Mouse_openPKc"]
        pub fn Mouse_open1(name: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11Mouse_closei"]
        pub fn Mouse_close(m: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10Mouse_sendiPK6HidMsg"]
        pub fn Mouse_send(m: libc::c_int, msg: *const root::HidMsg) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10Mouse_namei"]
        pub fn Mouse_name(m: libc::c_int) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Mouse_buttonsi"]
        pub fn Mouse_buttons(m: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z24Mouse_start_cursor_trackv"]
        pub fn Mouse_start_cursor_track() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23Mouse_stop_cursor_trackv"]
        pub fn Mouse_stop_cursor_track() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Keyboard_initv"]
        pub fn Keyboard_init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Keyboard_pollv"]
        pub fn Keyboard_poll();
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Keyboard_quitv"]
        pub fn Keyboard_quit();
    }
    extern "C" {
        #[link_name = "\u{1}_Z14Keyboard_probev"]
        pub fn Keyboard_probe();
    }
    extern "C" {
        #[link_name = "\u{1}_Z14Keyboard_countv"]
        pub fn Keyboard_count() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23Keyboard_count_elementsii"]
        pub fn Keyboard_count_elements(js: libc::c_int, type_: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Keyboard_openi"]
        pub fn Keyboard_open(kb: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Keyboard_openPKc"]
        pub fn Keyboard_open1(name: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14Keyboard_closei"]
        pub fn Keyboard_close(kb: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Keyboard_sendiPK6HidMsg"]
        pub fn Keyboard_send(kb: libc::c_int, msg: *const root::HidMsg) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13Keyboard_namei"]
        pub fn Keyboard_name(kb: libc::c_int) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14WiiRemote_initv"]
        pub fn WiiRemote_init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z14WiiRemote_pollv"]
        pub fn WiiRemote_poll();
    }
    extern "C" {
        #[link_name = "\u{1}_Z14WiiRemote_quitv"]
        pub fn WiiRemote_quit();
    }
    extern "C" {
        #[link_name = "\u{1}_Z15WiiRemote_probev"]
        pub fn WiiRemote_probe();
    }
    extern "C" {
        #[link_name = "\u{1}_Z15WiiRemote_countv"]
        pub fn WiiRemote_count() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14WiiRemote_openi"]
        pub fn WiiRemote_open(wr: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14WiiRemote_openPKc"]
        pub fn WiiRemote_open1(name: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15WiiRemote_closei"]
        pub fn WiiRemote_close(wr: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14WiiRemote_sendiPK6HidMsg"]
        pub fn WiiRemote_send(wr: libc::c_int, msg: *const root::HidMsg) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14WiiRemote_namei"]
        pub fn WiiRemote_name(wr: libc::c_int) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15TiltSensor_initv"]
        pub fn TiltSensor_init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z15TiltSensor_quitv"]
        pub fn TiltSensor_quit();
    }
    extern "C" {
        #[link_name = "\u{1}_Z16TiltSensor_probev"]
        pub fn TiltSensor_probe();
    }
    extern "C" {
        #[link_name = "\u{1}_Z16TiltSensor_countv"]
        pub fn TiltSensor_count() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15TiltSensor_openi"]
        pub fn TiltSensor_open(ts: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16TiltSensor_closei"]
        pub fn TiltSensor_close(ts: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15TiltSensor_readiiiP6HidMsg"]
        pub fn TiltSensor_read(
            ts: libc::c_int,
            type_: libc::c_int,
            num: libc::c_int,
            msg: *mut root::HidMsg,
        ) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15TiltSensor_namei"]
        pub fn TiltSensor_name(ts: libc::c_int) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22TiltSensor_setPollRatel"]
        pub fn TiltSensor_setPollRate(usec: libc::c_long) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22TiltSensor_getPollRatev"]
        pub fn TiltSensor_getPollRate() -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21MultiTouchDevice_initv"]
        pub fn MultiTouchDevice_init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z21MultiTouchDevice_quitv"]
        pub fn MultiTouchDevice_quit();
    }
    extern "C" {
        #[link_name = "\u{1}_Z22MultiTouchDevice_probev"]
        pub fn MultiTouchDevice_probe();
    }
    extern "C" {
        #[link_name = "\u{1}_Z22MultiTouchDevice_countv"]
        pub fn MultiTouchDevice_count() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21MultiTouchDevice_openi"]
        pub fn MultiTouchDevice_open(ts: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22MultiTouchDevice_closei"]
        pub fn MultiTouchDevice_close(ts: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21MultiTouchDevice_namei"]
        pub fn MultiTouchDevice_name(ts: libc::c_int) -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11Tablet_initv"]
        pub fn Tablet_init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z11Tablet_quitv"]
        pub fn Tablet_quit();
    }
    extern "C" {
        #[link_name = "\u{1}_Z12Tablet_probev"]
        pub fn Tablet_probe();
    }
    extern "C" {
        #[link_name = "\u{1}_Z12Tablet_countv"]
        pub fn Tablet_count() -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11Tablet_openi"]
        pub fn Tablet_open(ts: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12Tablet_closei"]
        pub fn Tablet_close(ts: libc::c_int) -> libc::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11Tablet_namei"]
        pub fn Tablet_name(ts: libc::c_int) -> *const libc::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PhyHidDevIn {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PhyHidDevOut {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct HidOut {
        pub phout: *mut root::PhyHidDevOut,
        pub m_msg: root::std::vector,
        pub m_device_num: libc::c_ulong,
        pub m_valid: libc::c_ulong,
        pub m_suppress_output: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_HidOut() {
        assert_eq!(
            ::std::mem::size_of::<HidOut>(),
            56usize,
            concat!("Size of: ", stringify!(HidOut))
        );
        assert_eq!(
            ::std::mem::align_of::<HidOut>(),
            8usize,
            concat!("Alignment of ", stringify!(HidOut))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).phout as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(phout)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).m_msg as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(m_msg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).m_device_num as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(m_device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).m_valid as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidOut>())).m_suppress_output as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(HidOut),
                "::",
                stringify!(m_suppress_output)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOut4openEm"]
        pub fn HidOut_open(this: *mut root::HidOut, device_num: libc::c_ulong) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOut5closeEv"]
        pub fn HidOut_close(this: *mut root::HidOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOut4goodEv"]
        pub fn HidOut_good(this: *mut root::HidOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOut3numEv"]
        pub fn HidOut_num(this: *mut root::HidOut) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOut12set_suppressEm"]
        pub fn HidOut_set_suppress(this: *mut root::HidOut, print_or_not: libc::c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOut12get_suppressEv"]
        pub fn HidOut_get_suppress(this: *mut root::HidOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOut4sendEPK6HidMsg"]
        pub fn HidOut_send(this: *mut root::HidOut, msg: *const root::HidMsg) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOutC1Ev"]
        pub fn HidOut_HidOut(this: *mut root::HidOut);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6HidOutD1Ev"]
        pub fn HidOut_HidOut_destructor(this: *mut root::HidOut);
    }
    impl Default for HidOut {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for HidOut {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "HidOut {{ phout: {:?}, m_msg: {:?}, m_device_num: {:?}, m_valid: {:?}, m_suppress_output: {:?} }}" , self . phout , self . m_msg , self . m_device_num , self . m_valid , self . m_suppress_output )
        }
    }
    impl ::std::cmp::PartialEq for HidOut {
        fn eq(&self, other: &HidOut) -> bool {
            self.phout == other.phout
                && self.m_msg == other.m_msg
                && self.m_device_num == other.m_device_num
                && self.m_valid == other.m_valid
                && self.m_suppress_output == other.m_suppress_output
        }
    }
    impl HidOut {
        #[inline]
        pub unsafe fn open(&mut self, device_num: libc::c_ulong) -> libc::c_ulong {
            HidOut_open(self, device_num)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> libc::c_ulong {
            HidOut_close(self)
        }
        #[inline]
        pub unsafe fn good(&mut self) -> libc::c_ulong {
            HidOut_good(self)
        }
        #[inline]
        pub unsafe fn num(&mut self) -> libc::c_long {
            HidOut_num(self)
        }
        #[inline]
        pub unsafe fn set_suppress(&mut self, print_or_not: libc::c_ulong) {
            HidOut_set_suppress(self, print_or_not)
        }
        #[inline]
        pub unsafe fn get_suppress(&mut self) -> libc::c_ulong {
            HidOut_get_suppress(self)
        }
        #[inline]
        pub unsafe fn send(&mut self, msg: *const root::HidMsg) -> libc::c_ulong {
            HidOut_send(self, msg)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            HidOut_HidOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            HidOut_HidOut_destructor(self)
        }
    }
    #[repr(C)]
    pub struct HidIn {
        pub _base: root::Chuck_Event,
        pub phin: *mut root::PhyHidDevIn,
        pub m_buffer: *mut root::CBufferAdvance,
        pub m_read_index: libc::c_ulong,
        pub m_valid: libc::c_ulong,
        pub m_device_num: libc::c_long,
        pub SELF: *mut root::Chuck_Object,
        pub m_suppress_output: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_HidIn() {
        assert_eq!(
            ::std::mem::size_of::<HidIn>(),
            248usize,
            concat!("Size of: ", stringify!(HidIn))
        );
        assert_eq!(
            ::std::mem::align_of::<HidIn>(),
            8usize,
            concat!("Alignment of ", stringify!(HidIn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).phin as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(phin)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_buffer as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_read_index as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_read_index)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_valid as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_device_num as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).SELF as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(SELF)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HidIn>())).m_suppress_output as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(HidIn),
                "::",
                stringify!(m_suppress_output)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn4openEP8Chuck_VMll"]
        pub fn HidIn_open(
            this: *mut root::HidIn,
            vm: *mut root::Chuck_VM,
            device_type: libc::c_long,
            device_num: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn4openEP8Chuck_VMRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm"]
        pub fn HidIn_open1(
            this: *mut root::HidIn,
            vm: *mut root::Chuck_VM,
            name: *mut root::std::__cxx11::string,
            device_type: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn5closeEv"]
        pub fn HidIn_close(this: *mut root::HidIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn4readEllP6HidMsg"]
        pub fn HidIn_read(
            this: *mut root::HidIn,
            type_: libc::c_long,
            num: libc::c_long,
            msg: *mut root::HidMsg,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn4sendEPK6HidMsg"]
        pub fn HidIn_send(this: *mut root::HidIn, msg: *const root::HidMsg) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn4goodEv"]
        pub fn HidIn_good(this: *mut root::HidIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn3numEv"]
        pub fn HidIn_num(this: *mut root::HidIn) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn12set_suppressEm"]
        pub fn HidIn_set_suppress(this: *mut root::HidIn, print_or_not: libc::c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn12get_suppressEv"]
        pub fn HidIn_get_suppress(this: *mut root::HidIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn5emptyEv"]
        pub fn HidIn_empty(this: *mut root::HidIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn4recvEP6HidMsg"]
        pub fn HidIn_recv(this: *mut root::HidIn, msg: *mut root::HidMsg) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidIn4nameB5cxx11Ev"]
        pub fn HidIn_name(this: *mut root::HidIn) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidInC1Ev"]
        pub fn HidIn_HidIn(this: *mut root::HidIn);
    }
    impl Default for HidIn {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for HidIn {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "HidIn {{ phin: {:?}, m_buffer: {:?}, m_read_index: {:?}, m_valid: {:?}, m_device_num: {:?}, SELF: {:?}, m_suppress_output: {:?} }}" , self . phin , self . m_buffer , self . m_read_index , self . m_valid , self . m_device_num , self . SELF , self . m_suppress_output )
        }
    }
    impl HidIn {
        #[inline]
        pub unsafe fn open(
            &mut self,
            vm: *mut root::Chuck_VM,
            device_type: libc::c_long,
            device_num: libc::c_long,
        ) -> libc::c_ulong {
            HidIn_open(self, vm, device_type, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            &mut self,
            vm: *mut root::Chuck_VM,
            name: *mut root::std::__cxx11::string,
            device_type: libc::c_ulong,
        ) -> libc::c_ulong {
            HidIn_open1(self, vm, name, device_type)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> libc::c_ulong {
            HidIn_close(self)
        }
        #[inline]
        pub unsafe fn read(
            &mut self,
            type_: libc::c_long,
            num: libc::c_long,
            msg: *mut root::HidMsg,
        ) -> libc::c_ulong {
            HidIn_read(self, type_, num, msg)
        }
        #[inline]
        pub unsafe fn send(&mut self, msg: *const root::HidMsg) -> libc::c_ulong {
            HidIn_send(self, msg)
        }
        #[inline]
        pub unsafe fn good(&mut self) -> libc::c_ulong {
            HidIn_good(self)
        }
        #[inline]
        pub unsafe fn num(&mut self) -> libc::c_long {
            HidIn_num(self)
        }
        #[inline]
        pub unsafe fn set_suppress(&mut self, print_or_not: libc::c_ulong) {
            HidIn_set_suppress(self, print_or_not)
        }
        #[inline]
        pub unsafe fn get_suppress(&mut self) -> libc::c_ulong {
            HidIn_get_suppress(self)
        }
        #[inline]
        pub unsafe fn empty(&mut self) -> libc::c_ulong {
            HidIn_empty(self)
        }
        #[inline]
        pub unsafe fn recv(&mut self, msg: *mut root::HidMsg) -> libc::c_ulong {
            HidIn_recv(self, msg)
        }
        #[inline]
        pub unsafe fn name(&mut self) -> root::std::__cxx11::string {
            HidIn_name(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            HidIn_HidIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5HidInD1Ev"]
        pub fn HidIn_HidIn_destructor(this: *mut root::HidIn);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct HidInManager {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager15m_event_buffersE"]
        pub static mut HidInManager_m_event_buffers: root::std::map;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager10the_matrixE"]
        pub static mut HidInManager_the_matrix: root::std::vector;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager10the_threadE"]
        pub static mut HidInManager_the_thread: *mut root::XThread;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager10msg_bufferE"]
        pub static mut HidInManager_msg_buffer: *mut root::CBufferSimple;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager12thread_goingE"]
        pub static mut HidInManager_thread_going: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager8has_initE"]
        pub static mut HidInManager_has_init: libc::c_ulong;
    }
    #[test]
    fn bindgen_test_layout_HidInManager() {
        assert_eq!(
            ::std::mem::size_of::<HidInManager>(),
            1usize,
            concat!("Size of: ", stringify!(HidInManager))
        );
        assert_eq!(
            ::std::mem::align_of::<HidInManager>(),
            1usize,
            concat!("Alignment of ", stringify!(HidInManager))
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager4initEv"]
        pub fn HidInManager_init();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager20init_default_driversEv"]
        pub fn HidInManager_init_default_drivers();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager7cleanupEv"]
        pub fn HidInManager_cleanup();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager4openEP5HidInP8Chuck_VMll"]
        pub fn HidInManager_open(
            hin: *mut root::HidIn,
            vm: *mut root::Chuck_VM,
            device_type: libc::c_long,
            device_num: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager4openEP5HidInP8Chuck_VMlRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn HidInManager_open1(
            hin: *mut root::HidIn,
            vm: *mut root::Chuck_VM,
            device_type: libc::c_long,
            device_name: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager5closeEP5HidIn"]
        pub fn HidInManager_close(hin: *mut root::HidIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager14cleanup_bufferEP8Chuck_VM"]
        pub fn HidInManager_cleanup_buffer(vm: *mut root::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager10probeHidInEv"]
        pub fn HidInManager_probeHidIn();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager11probeHidOutEv"]
        pub fn HidInManager_probeHidOut();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager12cb_hid_inputEPv"]
        pub fn HidInManager_cb_hid_input(arg1: *mut libc::c_void) -> *mut libc::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN12HidInManager12push_messageER6HidMsg"]
        pub fn HidInManager_push_message(msg: *mut root::HidMsg);
    }
    impl HidInManager {
        #[inline]
        pub unsafe fn init() {
            HidInManager_init()
        }
        #[inline]
        pub unsafe fn init_default_drivers() {
            HidInManager_init_default_drivers()
        }
        #[inline]
        pub unsafe fn cleanup() {
            HidInManager_cleanup()
        }
        #[inline]
        pub unsafe fn open(
            hin: *mut root::HidIn,
            vm: *mut root::Chuck_VM,
            device_type: libc::c_long,
            device_num: libc::c_long,
        ) -> libc::c_ulong {
            HidInManager_open(hin, vm, device_type, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            hin: *mut root::HidIn,
            vm: *mut root::Chuck_VM,
            device_type: libc::c_long,
            device_name: *mut root::std::__cxx11::string,
        ) -> libc::c_ulong {
            HidInManager_open1(hin, vm, device_type, device_name)
        }
        #[inline]
        pub unsafe fn close(hin: *mut root::HidIn) -> libc::c_ulong {
            HidInManager_close(hin)
        }
        #[inline]
        pub unsafe fn cleanup_buffer(vm: *mut root::Chuck_VM) {
            HidInManager_cleanup_buffer(vm)
        }
        #[inline]
        pub unsafe fn probeHidIn() {
            HidInManager_probeHidIn()
        }
        #[inline]
        pub unsafe fn probeHidOut() {
            HidInManager_probeHidOut()
        }
        #[inline]
        pub unsafe fn cb_hid_input(arg1: *mut libc::c_void) -> *mut libc::c_void {
            HidInManager_cb_hid_input(arg1)
        }
        #[inline]
        pub unsafe fn push_message(msg: *mut root::HidMsg) {
            HidInManager_push_message(msg)
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct HidOutManager {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13HidOutManager10the_phoutsE"]
        pub static mut HidOutManager_the_phouts: root::std::vector;
    }
    #[test]
    fn bindgen_test_layout_HidOutManager() {
        assert_eq!(
            ::std::mem::size_of::<HidOutManager>(),
            1usize,
            concat!("Size of: ", stringify!(HidOutManager))
        );
        assert_eq!(
            ::std::mem::align_of::<HidOutManager>(),
            1usize,
            concat!("Alignment of ", stringify!(HidOutManager))
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13HidOutManager4openEP6HidOutl"]
        pub fn HidOutManager_open(
            hout: *mut root::HidOut,
            device_num: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13HidOutManager5closeEP6HidOut"]
        pub fn HidOutManager_close(hout: *mut root::HidOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13HidOutManagerC1Ev"]
        pub fn HidOutManager_HidOutManager(this: *mut root::HidOutManager);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13HidOutManagerD1Ev"]
        pub fn HidOutManager_HidOutManager_destructor(this: *mut root::HidOutManager);
    }
    impl HidOutManager {
        #[inline]
        pub unsafe fn open(hout: *mut root::HidOut, device_num: libc::c_long) -> libc::c_ulong {
            HidOutManager_open(hout, device_num)
        }
        #[inline]
        pub unsafe fn close(hout: *mut root::HidOut) -> libc::c_ulong {
            HidOutManager_close(hout)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            HidOutManager_HidOutManager(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            HidOutManager_HidOutManager_destructor(self)
        }
    }
    extern "C" {
        #[link_name = "\u{1}default_drivers"]
        pub static mut default_drivers: *mut root::Chuck_Hid_Driver;
    }
    #[repr(C)]
    pub struct RtMidiError {
        pub _base: root::std::exception,
        pub message_: root::std::__cxx11::string,
        pub type_: root::RtMidiError_Type,
    }
    #[repr(u32)]
    #[doc = "! Defined RtMidiError types."]
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
    pub enum RtMidiError_Type {
        #[doc = "< A non-critical error."]
        WARNING = 0,
        #[doc = "< A non-critical error which might be useful for debugging."]
        DEBUG_WARNING = 1,
        #[doc = "< The default, unspecified error type."]
        UNSPECIFIED = 2,
        #[doc = "< No devices found on system."]
        NO_DEVICES_FOUND = 3,
        #[doc = "< An invalid device ID was specified."]
        INVALID_DEVICE = 4,
        #[doc = "< An error occured during memory allocation."]
        MEMORY_ERROR = 5,
        #[doc = "< An invalid parameter was specified to a function."]
        INVALID_PARAMETER = 6,
        #[doc = "< The function was called incorrectly."]
        INVALID_USE = 7,
        #[doc = "< A system driver error occured."]
        DRIVER_ERROR = 8,
        #[doc = "< A system error occured."]
        SYSTEM_ERROR = 9,
        #[doc = "< A thread error occured."]
        THREAD_ERROR = 10,
    }
    #[test]
    fn bindgen_test_layout_RtMidiError() {
        assert_eq!(
            ::std::mem::size_of::<RtMidiError>(),
            48usize,
            concat!("Size of: ", stringify!(RtMidiError))
        );
        assert_eq!(
            ::std::mem::align_of::<RtMidiError>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiError))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiError>())).message_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiError),
                "::",
                stringify!(message_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiError>())).type_ as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiError),
                "::",
                stringify!(type_)
            )
        );
    }
    extern "C" {
        #[doc = "! The constructor."]
        #[link_name = "\u{1}_ZN11RtMidiErrorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeE"]
        pub fn RtMidiError_RtMidiError(
            this: *mut root::RtMidiError,
            message: *const root::std::__cxx11::string,
            type_: root::RtMidiError_Type,
        );
    }
    impl Default for RtMidiError {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "RtMidiError {{ message_: {:?}, type_: {:?} }}",
                self.message_, self.type_
            )
        }
    }
    impl RtMidiError {
        #[inline]
        pub unsafe fn new(
            message: *const root::std::__cxx11::string,
            type_: root::RtMidiError_Type,
        ) -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            RtMidiError_RtMidiError(&mut __bindgen_tmp, message, type_);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! The destructor."]
        #[link_name = "\u{1}_ZN11RtMidiErrorD1Ev"]
        pub fn RtMidiError_RtMidiError_destructor(this: *mut root::RtMidiError);
    }
    extern "C" {
        #[doc = "! Prints thrown error message to stderr."]
        #[link_name = "\u{1}_ZNK11RtMidiError12printMessageEv"]
        pub fn RtMidiError_printMessage(this: *mut libc::c_void);
    }
    extern "C" {
        #[doc = "! Returns the thrown error message type."]
        #[link_name = "\u{1}_ZNK11RtMidiError7getTypeEv"]
        pub fn RtMidiError_getType(this: *mut libc::c_void) -> *const root::RtMidiError_Type;
    }
    extern "C" {
        #[doc = "! Returns the thrown error message string."]
        #[link_name = "\u{1}_ZNK11RtMidiError10getMessageB5cxx11Ev"]
        pub fn RtMidiError_getMessage(this: *mut libc::c_void)
            -> *const root::std::__cxx11::string;
    }
    extern "C" {
        #[doc = "! Returns the thrown error message as a c-style string."]
        #[link_name = "\u{1}_ZNK11RtMidiError4whatEv"]
        pub fn RtMidiError_what(this: *mut libc::c_void) -> *const libc::c_char;
    }
    #[repr(C)]
    pub struct RtMidi__bindgen_vtable(libc::c_void);
    #[repr(C)]
    pub struct RtMidi {
        pub vtable_: *const RtMidi__bindgen_vtable,
        pub apiData_: *mut libc::c_void,
        pub connected_: bool,
        pub errorString_: root::std::__cxx11::string,
    }
    #[test]
    fn bindgen_test_layout_RtMidi() {
        assert_eq!(
            ::std::mem::size_of::<RtMidi>(),
            56usize,
            concat!("Size of: ", stringify!(RtMidi))
        );
        assert_eq!(
            ::std::mem::align_of::<RtMidi>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidi))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidi>())).apiData_ as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidi),
                "::",
                stringify!(apiData_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidi>())).connected_ as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidi),
                "::",
                stringify!(connected_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidi>())).errorString_ as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidi),
                "::",
                stringify!(errorString_)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6RtMidi5errorEN11RtMidiError4TypeE"]
        pub fn RtMidi_error(this: *mut root::RtMidi, type_: root::RtMidiError_Type);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6RtMidiC2Ev"]
        pub fn RtMidi_RtMidi(this: *mut root::RtMidi);
    }
    impl Default for RtMidi {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidi {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "RtMidi {{ apiData_: {:?}, connected_: {:?}, errorString_: {:?} }}",
                self.apiData_, self.connected_, self.errorString_
            )
        }
    }
    impl RtMidi {
        #[inline]
        pub unsafe fn error(&mut self, type_: root::RtMidiError_Type) {
            RtMidi_error(self, type_)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            RtMidi_RtMidi(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6RtMidiD1Ev"]
        pub fn RtMidi_RtMidi_destructor(this: *mut root::RtMidi);
    }
    #[repr(C)]
    pub struct RtMidiIn {
        pub _base: root::RtMidi,
        pub inputData_: root::RtMidiIn_RtMidiInData,
    }
    #[doc = "! User callback function type definition."]
    pub type RtMidiIn_RtMidiCallback = ::std::option::Option<
        unsafe extern "C" fn(
            timeStamp: f64,
            message: *mut root::std::vector,
            userData: *mut libc::c_void,
        ),
    >;
    #[repr(C)]
    pub struct RtMidiIn_MidiMessage {
        pub bytes: root::std::vector,
        pub timeStamp: f64,
    }
    #[test]
    fn bindgen_test_layout_RtMidiIn_MidiMessage() {
        assert_eq!(
            ::std::mem::size_of::<RtMidiIn_MidiMessage>(),
            32usize,
            concat!("Size of: ", stringify!(RtMidiIn_MidiMessage))
        );
        assert_eq!(
            ::std::mem::align_of::<RtMidiIn_MidiMessage>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiIn_MidiMessage))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiIn_MidiMessage>())).bytes as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_MidiMessage),
                "::",
                stringify!(bytes)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_MidiMessage>())).timeStamp as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_MidiMessage),
                "::",
                stringify!(timeStamp)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8RtMidiIn11MidiMessageC1Ev"]
        pub fn RtMidiIn_MidiMessage_MidiMessage(this: *mut root::RtMidiIn_MidiMessage);
    }
    impl Default for RtMidiIn_MidiMessage {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiIn_MidiMessage {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "RtMidiIn_MidiMessage {{ bytes: {:?}, timeStamp: {:?} }}",
                self.bytes, self.timeStamp
            )
        }
    }
    impl ::std::cmp::PartialEq for RtMidiIn_MidiMessage {
        fn eq(&self, other: &RtMidiIn_MidiMessage) -> bool {
            self.bytes == other.bytes && self.timeStamp == other.timeStamp
        }
    }
    impl RtMidiIn_MidiMessage {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            RtMidiIn_MidiMessage_MidiMessage(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[repr(C)]
    pub struct RtMidiIn_RtMidiInData {
        pub queue: root::std::queue<root::std::deque>,
        pub queueLimit: libc::c_uint,
        pub ignoreFlags: libc::c_uchar,
        pub doInput: bool,
        pub firstMessage: bool,
        pub apiData: *mut libc::c_void,
        pub usingCallback: bool,
        pub userCallback: *mut libc::c_void,
        pub userData: *mut libc::c_void,
    }
    #[test]
    fn bindgen_test_layout_RtMidiIn_RtMidiInData() {
        assert_eq!(
            ::std::mem::size_of::<RtMidiIn_RtMidiInData>(),
            120usize,
            concat!("Size of: ", stringify!(RtMidiIn_RtMidiInData))
        );
        assert_eq!(
            ::std::mem::align_of::<RtMidiIn_RtMidiInData>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiIn_RtMidiInData))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).queue as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(queue)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).queueLimit as *const _ as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(queueLimit)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).ignoreFlags as *const _ as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(ignoreFlags)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).doInput as *const _ as usize
            },
            85usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(doInput)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).firstMessage as *const _ as usize
            },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(firstMessage)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).apiData as *const _ as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(apiData)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).usingCallback as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(usingCallback)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).userCallback as *const _ as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(userCallback)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<RtMidiIn_RtMidiInData>())).userData as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn_RtMidiInData),
                "::",
                stringify!(userData)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN8RtMidiIn12RtMidiInDataC1Ev"]
        pub fn RtMidiIn_RtMidiInData_RtMidiInData(this: *mut root::RtMidiIn_RtMidiInData);
    }
    impl Default for RtMidiIn_RtMidiInData {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiIn_RtMidiInData {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "RtMidiIn_RtMidiInData {{ queue: {:?}, queueLimit: {:?}, ignoreFlags: {:?}, doInput: {:?}, firstMessage: {:?}, apiData: {:?}, usingCallback: {:?}, userCallback: {:?}, userData: {:?} }}" , self . queue , self . queueLimit , self . ignoreFlags , self . doInput , self . firstMessage , self . apiData , self . usingCallback , self . userCallback , self . userData )
        }
    }
    impl ::std::cmp::PartialEq for RtMidiIn_RtMidiInData {
        fn eq(&self, other: &RtMidiIn_RtMidiInData) -> bool {
            self.queue == other.queue
                && self.queueLimit == other.queueLimit
                && self.ignoreFlags == other.ignoreFlags
                && self.doInput == other.doInput
                && self.firstMessage == other.firstMessage
                && self.apiData == other.apiData
                && self.usingCallback == other.usingCallback
                && self.userCallback == other.userCallback
                && self.userData == other.userData
        }
    }
    impl RtMidiIn_RtMidiInData {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            RtMidiIn_RtMidiInData_RtMidiInData(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    #[test]
    fn bindgen_test_layout_RtMidiIn() {
        assert_eq!(
            ::std::mem::size_of::<RtMidiIn>(),
            176usize,
            concat!("Size of: ", stringify!(RtMidiIn))
        );
        assert_eq!(
            ::std::mem::align_of::<RtMidiIn>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiIn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RtMidiIn>())).inputData_ as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RtMidiIn),
                "::",
                stringify!(inputData_)
            )
        );
    }
    extern "C" {
        #[doc = "! Set a callback function to be invoked for incoming MIDI messages."]
        #[doc = "*!"]
        #[doc = "The callback function will be called whenever an incoming MIDI"]
        #[doc = "message is received.  While not absolutely necessary, it is best"]
        #[doc = "to set the callback function before opening a MIDI port to avoid"]
        #[doc = "leaving some messages in the queue."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiIn11setCallbackEPFvdPSt6vectorIhSaIhEEPvES4_"]
        pub fn RtMidiIn_setCallback(
            this: *mut root::RtMidiIn,
            callback: root::RtMidiIn_RtMidiCallback,
            userData: *mut libc::c_void,
        );
    }
    extern "C" {
        #[doc = "! Cancel use of the current callback function (if one exists)."]
        #[doc = "*!"]
        #[doc = "Subsequent incoming MIDI messages will be written to the queue"]
        #[doc = "and can be retrieved with the \\e getMessage function."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiIn14cancelCallbackEv"]
        pub fn RtMidiIn_cancelCallback(this: *mut root::RtMidiIn);
    }
    extern "C" {
        #[doc = "! Set the maximum number of MIDI messages to be saved in the queue."]
        #[doc = "*!"]
        #[doc = "If the queue size limit is reached, incoming messages will be"]
        #[doc = "ignored.  The default limit is 1024."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiIn17setQueueSizeLimitEj"]
        pub fn RtMidiIn_setQueueSizeLimit(this: *mut root::RtMidiIn, queueSize: libc::c_uint);
    }
    extern "C" {
        #[doc = "! Specify whether certain MIDI message types should be queued or ignored during input."]
        #[doc = "*!"]
        #[doc = "By default, active sensing messages are ignored"]
        #[doc = "during message input because of their relative high data rates."]
        #[doc = "MIDI sysex messages are ignored by default as well.  Variable"]
        #[doc = "values of \"true\" imply that the respective message type will be"]
        #[doc = "ignored."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiIn11ignoreTypesEbbb"]
        pub fn RtMidiIn_ignoreTypes(
            this: *mut root::RtMidiIn,
            midiSysex: bool,
            midiTime: bool,
            midiSense: bool,
        );
    }
    extern "C" {
        #[doc = "! Fill the user-provided vector with the data bytes for the next available MIDI message in the input queue and return the event delta-time in seconds."]
        #[doc = "*!"]
        #[doc = "This function returns immediately whether a new message is"]
        #[doc = "available or not.  A valid message is indicated by a non-zero"]
        #[doc = "vector size.  An exception is thrown if an error occurs during"]
        #[doc = "message retrieval or an input connection was not previously"]
        #[doc = "established."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiIn10getMessageEPSt6vectorIhSaIhEE"]
        pub fn RtMidiIn_getMessage(
            this: *mut root::RtMidiIn,
            message: *mut root::std::vector,
        ) -> f64;
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[doc = "*!"]
        #[doc = "An exception will be thrown if a MIDI system initialization error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiInC1Ev"]
        pub fn RtMidiIn_RtMidiIn(this: *mut root::RtMidiIn);
    }
    impl Default for RtMidiIn {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiIn {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "RtMidiIn {{ inputData_: {:?} }}", self.inputData_)
        }
    }
    impl RtMidiIn {
        #[inline]
        pub unsafe fn setCallback(
            &mut self,
            callback: root::RtMidiIn_RtMidiCallback,
            userData: *mut libc::c_void,
        ) {
            RtMidiIn_setCallback(self, callback, userData)
        }
        #[inline]
        pub unsafe fn cancelCallback(&mut self) {
            RtMidiIn_cancelCallback(self)
        }
        #[inline]
        pub unsafe fn setQueueSizeLimit(&mut self, queueSize: libc::c_uint) {
            RtMidiIn_setQueueSizeLimit(self, queueSize)
        }
        #[inline]
        pub unsafe fn ignoreTypes(&mut self, midiSysex: bool, midiTime: bool, midiSense: bool) {
            RtMidiIn_ignoreTypes(self, midiSysex, midiTime, midiSense)
        }
        #[inline]
        pub unsafe fn getMessage(&mut self, message: *mut root::std::vector) -> f64 {
            RtMidiIn_getMessage(self, message)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            RtMidiIn_RtMidiIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! If a MIDI connection is still open, it will be closed by the destructor."]
        #[link_name = "\u{1}_ZN8RtMidiInD1Ev"]
        pub fn RtMidiIn_RtMidiIn_destructor(this: *mut root::RtMidiIn);
    }
    extern "C" {
        #[doc = "! Open a MIDI input connection."]
        #[doc = "*!"]
        #[doc = "An optional port number greater than 0 can be specified."]
        #[doc = "Otherwise, the default or first port found is opened."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiIn8openPortEj"]
        pub fn RtMidiIn_openPort(this: *mut libc::c_void, portNumber: libc::c_uint);
    }
    extern "C" {
        #[doc = "! Create a virtual input port to allow software connections (OS X and ALSA only)."]
        #[doc = "*!"]
        #[doc = "This function creates a virtual MIDI input port to which other"]
        #[doc = "software applications can connect.  This type of functionality"]
        #[doc = "is currently only supported by the Macintosh OS-X and Linux ALSA"]
        #[doc = "APIs (the function does nothing for the other APIs)."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiIn15openVirtualPortEv"]
        pub fn RtMidiIn_openVirtualPort(this: *mut libc::c_void);
    }
    extern "C" {
        #[doc = "! Close an open MIDI connection (if one exists)."]
        #[link_name = "\u{1}_ZN8RtMidiIn9closePortEv"]
        pub fn RtMidiIn_closePort(this: *mut libc::c_void);
    }
    extern "C" {
        #[doc = "! Return the number of available MIDI input ports."]
        #[link_name = "\u{1}_ZN8RtMidiIn12getPortCountEv"]
        pub fn RtMidiIn_getPortCount(this: *mut libc::c_void) -> libc::c_uint;
    }
    extern "C" {
        #[doc = "! Return a string identifier for the specified MIDI input port number."]
        #[doc = "*!"]
        #[doc = "An exception is thrown if an invalid port specifier is provided."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN8RtMidiIn11getPortNameB5cxx11Ej"]
        pub fn RtMidiIn_getPortName(
            this: *mut libc::c_void,
            portNumber: libc::c_uint,
        ) -> root::std::__cxx11::string;
    }
    #[doc = "\\brief A realtime MIDI output class."]
    #[doc = ""]
    #[doc = "This class provides a common, platform-independent API for MIDI"]
    #[doc = "output.  It allows one to probe available MIDI output ports, to"]
    #[doc = "connect to one such port, and to send MIDI bytes immediately over"]
    #[doc = "the connection.  Create multiple instances of this class to"]
    #[doc = "connect to more than one MIDI device at the same time."]
    #[doc = ""]
    #[doc = "by Gary P. Scavone, 2003-2004."]
    #[repr(C)]
    pub struct RtMidiOut {
        pub _base: root::RtMidi,
    }
    #[test]
    fn bindgen_test_layout_RtMidiOut() {
        assert_eq!(
            ::std::mem::size_of::<RtMidiOut>(),
            56usize,
            concat!("Size of: ", stringify!(RtMidiOut))
        );
        assert_eq!(
            ::std::mem::align_of::<RtMidiOut>(),
            8usize,
            concat!("Alignment of ", stringify!(RtMidiOut))
        );
    }
    extern "C" {
        #[doc = "! Immediately send a single message out an open MIDI output port."]
        #[doc = "*!"]
        #[doc = "An exception is thrown if an error occurs during output or an"]
        #[doc = "output connection was not previously established."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9RtMidiOut11sendMessageEPSt6vectorIhSaIhEE"]
        pub fn RtMidiOut_sendMessage(this: *mut root::RtMidiOut, message: *mut root::std::vector);
    }
    extern "C" {
        #[doc = "! Default constructor."]
        #[doc = "*!"]
        #[doc = "An exception will be thrown if a MIDI system initialization error occurs."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9RtMidiOutC1Ev"]
        pub fn RtMidiOut_RtMidiOut(this: *mut root::RtMidiOut);
    }
    impl Default for RtMidiOut {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for RtMidiOut {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "RtMidiOut {{  }}")
        }
    }
    impl RtMidiOut {
        #[inline]
        pub unsafe fn sendMessage(&mut self, message: *mut root::std::vector) {
            RtMidiOut_sendMessage(self, message)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            RtMidiOut_RtMidiOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[doc = "! The destructor closes any open MIDI connections."]
        #[link_name = "\u{1}_ZN9RtMidiOutD1Ev"]
        pub fn RtMidiOut_RtMidiOut_destructor(this: *mut root::RtMidiOut);
    }
    extern "C" {
        #[doc = "! Open a MIDI output connection."]
        #[doc = "*!"]
        #[doc = "An optional port number greater than 0 can be specified."]
        #[doc = "Otherwise, the default or first port found is opened.  An"]
        #[doc = "exception is thrown if an error occurs while attempting to make"]
        #[doc = "the port connection."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9RtMidiOut8openPortEj"]
        pub fn RtMidiOut_openPort(this: *mut libc::c_void, portNumber: libc::c_uint);
    }
    extern "C" {
        #[doc = "! Close an open MIDI connection (if one exists)."]
        #[link_name = "\u{1}_ZN9RtMidiOut9closePortEv"]
        pub fn RtMidiOut_closePort(this: *mut libc::c_void);
    }
    extern "C" {
        #[doc = "! Create a virtual output port to allow software connections (OS X and ALSA only)."]
        #[doc = "*!"]
        #[doc = "This function creates a virtual MIDI output port to which other"]
        #[doc = "software applications can connect.  This type of functionality"]
        #[doc = "is currently only supported by the Macintosh OS-X and Linux ALSA"]
        #[doc = "APIs (the function does nothing with the other APIs).  An"]
        #[doc = "exception is thrown if an error occurs while attempting to create"]
        #[doc = "the virtual port."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9RtMidiOut15openVirtualPortEv"]
        pub fn RtMidiOut_openVirtualPort(this: *mut libc::c_void);
    }
    extern "C" {
        #[doc = "! Return the number of available MIDI output ports."]
        #[link_name = "\u{1}_ZN9RtMidiOut12getPortCountEv"]
        pub fn RtMidiOut_getPortCount(this: *mut libc::c_void) -> libc::c_uint;
    }
    extern "C" {
        #[doc = "! Return a string identifier for the specified MIDI port type and number."]
        #[doc = "*!"]
        #[doc = "An exception is thrown if an invalid port specifier is provided."]
        #[doc = "*/"]
        #[link_name = "\u{1}_ZN9RtMidiOut11getPortNameB5cxx11Ej"]
        pub fn RtMidiOut_getPortName(
            this: *mut libc::c_void,
            portNumber: libc::c_uint,
        ) -> root::std::__cxx11::string;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union MidiMsg {
        pub data: [libc::c_uchar; 4usize],
        _bindgen_union_align: [u8; 4usize],
    }
    #[test]
    fn bindgen_test_layout_MidiMsg() {
        assert_eq!(
            ::std::mem::size_of::<MidiMsg>(),
            4usize,
            concat!("Size of: ", stringify!(MidiMsg))
        );
        assert_eq!(
            ::std::mem::align_of::<MidiMsg>(),
            1usize,
            concat!("Alignment of ", stringify!(MidiMsg))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiMsg>())).data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiMsg),
                "::",
                stringify!(data)
            )
        );
    }
    impl Default for MidiMsg {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for MidiMsg {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "MidiMsg {{ union }}")
        }
    }
    #[repr(C)]
    pub struct MidiOut {
        pub mout: *mut root::RtMidiOut,
        pub m_msg: root::std::vector,
        pub m_device_num: libc::c_ulong,
        pub m_valid: libc::c_ulong,
        pub m_suppress_output: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_MidiOut() {
        assert_eq!(
            ::std::mem::size_of::<MidiOut>(),
            56usize,
            concat!("Size of: ", stringify!(MidiOut))
        );
        assert_eq!(
            ::std::mem::align_of::<MidiOut>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiOut))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).mout as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(mout)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).m_msg as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(m_msg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).m_device_num as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(m_device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).m_valid as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiOut>())).m_suppress_output as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiOut),
                "::",
                stringify!(m_suppress_output)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut4openEm"]
        pub fn MidiOut_open(this: *mut root::MidiOut, device_num: libc::c_ulong) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut4openERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn MidiOut_open1(
            this: *mut root::MidiOut,
            name: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut5closeEv"]
        pub fn MidiOut_close(this: *mut root::MidiOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut4goodEv"]
        pub fn MidiOut_good(this: *mut root::MidiOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut3numEv"]
        pub fn MidiOut_num(this: *mut root::MidiOut) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut12set_suppressEm"]
        pub fn MidiOut_set_suppress(this: *mut root::MidiOut, print_or_not: libc::c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut12get_suppressEv"]
        pub fn MidiOut_get_suppress(this: *mut root::MidiOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut4sendEh"]
        pub fn MidiOut_send(this: *mut root::MidiOut, status: libc::c_uchar) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut4sendEhh"]
        pub fn MidiOut_send1(
            this: *mut root::MidiOut,
            status: libc::c_uchar,
            data1: libc::c_uchar,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut4sendEhhh"]
        pub fn MidiOut_send2(
            this: *mut root::MidiOut,
            status: libc::c_uchar,
            data1: libc::c_uchar,
            data2: libc::c_uchar,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut4sendEPK7MidiMsg"]
        pub fn MidiOut_send3(this: *mut root::MidiOut, msg: *const root::MidiMsg) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut6noteonEmmm"]
        pub fn MidiOut_noteon(
            this: *mut root::MidiOut,
            channel: libc::c_ulong,
            note: libc::c_ulong,
            velocity: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut7noteoffEmmm"]
        pub fn MidiOut_noteoff(
            this: *mut root::MidiOut,
            channel: libc::c_ulong,
            note: libc::c_ulong,
            velocity: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut9polypressEmmm"]
        pub fn MidiOut_polypress(
            this: *mut root::MidiOut,
            channel: libc::c_ulong,
            note: libc::c_ulong,
            pressure: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut10ctrlchangeEmmm"]
        pub fn MidiOut_ctrlchange(
            this: *mut root::MidiOut,
            channel: libc::c_ulong,
            ctrl_num: libc::c_ulong,
            ctrl_val: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut10progchangeEmm"]
        pub fn MidiOut_progchange(
            this: *mut root::MidiOut,
            channel: libc::c_ulong,
            patch: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut9chanpressEmm"]
        pub fn MidiOut_chanpress(
            this: *mut root::MidiOut,
            channel: libc::c_ulong,
            pressure: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut9pitchbendEmm"]
        pub fn MidiOut_pitchbend(
            this: *mut root::MidiOut,
            channel: libc::c_ulong,
            bend_val: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOut11allnotesoffEm"]
        pub fn MidiOut_allnotesoff(
            this: *mut root::MidiOut,
            channel: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOutC1Ev"]
        pub fn MidiOut_MidiOut(this: *mut root::MidiOut);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN7MidiOutD1Ev"]
        pub fn MidiOut_MidiOut_destructor(this: *mut root::MidiOut);
    }
    impl Default for MidiOut {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for MidiOut {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "MidiOut {{ mout: {:?}, m_msg: {:?}, m_device_num: {:?}, m_valid: {:?}, m_suppress_output: {:?} }}" , self . mout , self . m_msg , self . m_device_num , self . m_valid , self . m_suppress_output )
        }
    }
    impl ::std::cmp::PartialEq for MidiOut {
        fn eq(&self, other: &MidiOut) -> bool {
            self.mout == other.mout
                && self.m_msg == other.m_msg
                && self.m_device_num == other.m_device_num
                && self.m_valid == other.m_valid
                && self.m_suppress_output == other.m_suppress_output
        }
    }
    impl MidiOut {
        #[inline]
        pub unsafe fn open(&mut self, device_num: libc::c_ulong) -> libc::c_ulong {
            MidiOut_open(self, device_num)
        }
        #[inline]
        pub unsafe fn open1(&mut self, name: *const root::std::__cxx11::string) -> libc::c_ulong {
            MidiOut_open1(self, name)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> libc::c_ulong {
            MidiOut_close(self)
        }
        #[inline]
        pub unsafe fn good(&mut self) -> libc::c_ulong {
            MidiOut_good(self)
        }
        #[inline]
        pub unsafe fn num(&mut self) -> libc::c_long {
            MidiOut_num(self)
        }
        #[inline]
        pub unsafe fn set_suppress(&mut self, print_or_not: libc::c_ulong) {
            MidiOut_set_suppress(self, print_or_not)
        }
        #[inline]
        pub unsafe fn get_suppress(&mut self) -> libc::c_ulong {
            MidiOut_get_suppress(self)
        }
        #[inline]
        pub unsafe fn send(&mut self, status: libc::c_uchar) -> libc::c_ulong {
            MidiOut_send(self, status)
        }
        #[inline]
        pub unsafe fn send1(
            &mut self,
            status: libc::c_uchar,
            data1: libc::c_uchar,
        ) -> libc::c_ulong {
            MidiOut_send1(self, status, data1)
        }
        #[inline]
        pub unsafe fn send2(
            &mut self,
            status: libc::c_uchar,
            data1: libc::c_uchar,
            data2: libc::c_uchar,
        ) -> libc::c_ulong {
            MidiOut_send2(self, status, data1, data2)
        }
        #[inline]
        pub unsafe fn send3(&mut self, msg: *const root::MidiMsg) -> libc::c_ulong {
            MidiOut_send3(self, msg)
        }
        #[inline]
        pub unsafe fn noteon(
            &mut self,
            channel: libc::c_ulong,
            note: libc::c_ulong,
            velocity: libc::c_ulong,
        ) -> libc::c_ulong {
            MidiOut_noteon(self, channel, note, velocity)
        }
        #[inline]
        pub unsafe fn noteoff(
            &mut self,
            channel: libc::c_ulong,
            note: libc::c_ulong,
            velocity: libc::c_ulong,
        ) -> libc::c_ulong {
            MidiOut_noteoff(self, channel, note, velocity)
        }
        #[inline]
        pub unsafe fn polypress(
            &mut self,
            channel: libc::c_ulong,
            note: libc::c_ulong,
            pressure: libc::c_ulong,
        ) -> libc::c_ulong {
            MidiOut_polypress(self, channel, note, pressure)
        }
        #[inline]
        pub unsafe fn ctrlchange(
            &mut self,
            channel: libc::c_ulong,
            ctrl_num: libc::c_ulong,
            ctrl_val: libc::c_ulong,
        ) -> libc::c_ulong {
            MidiOut_ctrlchange(self, channel, ctrl_num, ctrl_val)
        }
        #[inline]
        pub unsafe fn progchange(
            &mut self,
            channel: libc::c_ulong,
            patch: libc::c_ulong,
        ) -> libc::c_ulong {
            MidiOut_progchange(self, channel, patch)
        }
        #[inline]
        pub unsafe fn chanpress(
            &mut self,
            channel: libc::c_ulong,
            pressure: libc::c_ulong,
        ) -> libc::c_ulong {
            MidiOut_chanpress(self, channel, pressure)
        }
        #[inline]
        pub unsafe fn pitchbend(
            &mut self,
            channel: libc::c_ulong,
            bend_val: libc::c_ulong,
        ) -> libc::c_ulong {
            MidiOut_pitchbend(self, channel, bend_val)
        }
        #[inline]
        pub unsafe fn allnotesoff(&mut self, channel: libc::c_ulong) -> libc::c_ulong {
            MidiOut_allnotesoff(self, channel)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MidiOut_MidiOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiOut_MidiOut_destructor(self)
        }
    }
    #[repr(C)]
    pub struct MidiIn {
        pub _base: root::Chuck_Event,
        pub m_buffer: *mut root::CBufferAdvance,
        pub m_read_index: libc::c_ulong,
        pub min: *mut root::RtMidiIn,
        pub m_valid: libc::c_ulong,
        pub m_device_num: libc::c_ulong,
        pub SELF: *mut root::Chuck_Object,
        pub m_suppress_output: libc::c_ulong,
    }
    #[test]
    fn bindgen_test_layout_MidiIn() {
        assert_eq!(
            ::std::mem::size_of::<MidiIn>(),
            248usize,
            concat!("Size of: ", stringify!(MidiIn))
        );
        assert_eq!(
            ::std::mem::align_of::<MidiIn>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiIn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_buffer as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_buffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_read_index as *const _ as usize },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_read_index)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).min as *const _ as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(min)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_valid as *const _ as usize },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_device_num as *const _ as usize },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_device_num)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).SELF as *const _ as usize },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(SELF)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiIn>())).m_suppress_output as *const _ as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiIn),
                "::",
                stringify!(m_suppress_output)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn4openEP8Chuck_VMm"]
        pub fn MidiIn_open(
            this: *mut root::MidiIn,
            vm: *mut root::Chuck_VM,
            device_num: libc::c_ulong,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn4openEP8Chuck_VMRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn MidiIn_open1(
            this: *mut root::MidiIn,
            vm: *mut root::Chuck_VM,
            name: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn5closeEv"]
        pub fn MidiIn_close(this: *mut root::MidiIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn4goodEv"]
        pub fn MidiIn_good(this: *mut root::MidiIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn3numEv"]
        pub fn MidiIn_num(this: *mut root::MidiIn) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn12set_suppressEm"]
        pub fn MidiIn_set_suppress(this: *mut root::MidiIn, print_or_not: libc::c_ulong);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn12get_suppressEv"]
        pub fn MidiIn_get_suppress(this: *mut root::MidiIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn5emptyEv"]
        pub fn MidiIn_empty(this: *mut root::MidiIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiIn4recvEP7MidiMsg"]
        pub fn MidiIn_recv(this: *mut root::MidiIn, msg: *mut root::MidiMsg) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiInC1Ev"]
        pub fn MidiIn_MidiIn(this: *mut root::MidiIn);
    }
    impl Default for MidiIn {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for MidiIn {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write ! ( f , "MidiIn {{ m_buffer: {:?}, m_read_index: {:?}, min: {:?}, m_valid: {:?}, m_device_num: {:?}, SELF: {:?}, m_suppress_output: {:?} }}" , self . m_buffer , self . m_read_index , self . min , self . m_valid , self . m_device_num , self . SELF , self . m_suppress_output )
        }
    }
    impl MidiIn {
        #[inline]
        pub unsafe fn open(
            &mut self,
            vm: *mut root::Chuck_VM,
            device_num: libc::c_ulong,
        ) -> libc::c_ulong {
            MidiIn_open(self, vm, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            &mut self,
            vm: *mut root::Chuck_VM,
            name: *const root::std::__cxx11::string,
        ) -> libc::c_ulong {
            MidiIn_open1(self, vm, name)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> libc::c_ulong {
            MidiIn_close(self)
        }
        #[inline]
        pub unsafe fn good(&mut self) -> libc::c_ulong {
            MidiIn_good(self)
        }
        #[inline]
        pub unsafe fn num(&mut self) -> libc::c_long {
            MidiIn_num(self)
        }
        #[inline]
        pub unsafe fn set_suppress(&mut self, print_or_not: libc::c_ulong) {
            MidiIn_set_suppress(self, print_or_not)
        }
        #[inline]
        pub unsafe fn get_suppress(&mut self) -> libc::c_ulong {
            MidiIn_get_suppress(self)
        }
        #[inline]
        pub unsafe fn empty(&mut self) -> libc::c_ulong {
            MidiIn_empty(self)
        }
        #[inline]
        pub unsafe fn recv(&mut self, msg: *mut root::MidiMsg) -> libc::c_ulong {
            MidiIn_recv(self, msg)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MidiIn_MidiIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiInD1Ev"]
        pub fn MidiIn_MidiIn_destructor(this: *mut root::MidiIn);
    }
    extern "C" {
        #[link_name = "\u{1}_Z11probeMidiInv"]
        pub fn probeMidiIn();
    }
    extern "C" {
        #[link_name = "\u{1}_Z12probeMidiOutv"]
        pub fn probeMidiOut();
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiInManager {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManager8the_minsE"]
        pub static mut MidiInManager_the_mins: root::std::vector;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManager8the_bufsE"]
        pub static mut MidiInManager_the_bufs: root::std::vector;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManager15m_event_buffersE"]
        pub static mut MidiInManager_m_event_buffers: root::std::map;
    }
    #[test]
    fn bindgen_test_layout_MidiInManager() {
        assert_eq!(
            ::std::mem::size_of::<MidiInManager>(),
            1usize,
            concat!("Size of: ", stringify!(MidiInManager))
        );
        assert_eq!(
            ::std::mem::align_of::<MidiInManager>(),
            1usize,
            concat!("Alignment of ", stringify!(MidiInManager))
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManager4openEP6MidiInP8Chuck_VMl"]
        pub fn MidiInManager_open(
            min: *mut root::MidiIn,
            vm: *mut root::Chuck_VM,
            device_num: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManager4openEP6MidiInP8Chuck_VMRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn MidiInManager_open1(
            min: *mut root::MidiIn,
            vm: *mut root::Chuck_VM,
            name: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManager5closeEP6MidiIn"]
        pub fn MidiInManager_close(min: *mut root::MidiIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManager14cleanup_bufferEP8Chuck_VM"]
        pub fn MidiInManager_cleanup_buffer(vm: *mut root::Chuck_VM);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManager13cb_midi_inputEdPSt6vectorIhSaIhEEPv"]
        pub fn MidiInManager_cb_midi_input(
            deltatime: f64,
            msg: *mut root::std::vector,
            userData: *mut libc::c_void,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManagerC1Ev"]
        pub fn MidiInManager_MidiInManager(this: *mut root::MidiInManager);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN13MidiInManagerD1Ev"]
        pub fn MidiInManager_MidiInManager_destructor(this: *mut root::MidiInManager);
    }
    impl MidiInManager {
        #[inline]
        pub unsafe fn open(
            min: *mut root::MidiIn,
            vm: *mut root::Chuck_VM,
            device_num: libc::c_long,
        ) -> libc::c_ulong {
            MidiInManager_open(min, vm, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            min: *mut root::MidiIn,
            vm: *mut root::Chuck_VM,
            name: *const root::std::__cxx11::string,
        ) -> libc::c_ulong {
            MidiInManager_open1(min, vm, name)
        }
        #[inline]
        pub unsafe fn close(min: *mut root::MidiIn) -> libc::c_ulong {
            MidiInManager_close(min)
        }
        #[inline]
        pub unsafe fn cleanup_buffer(vm: *mut root::Chuck_VM) {
            MidiInManager_cleanup_buffer(vm)
        }
        #[inline]
        pub unsafe fn cb_midi_input(
            deltatime: f64,
            msg: *mut root::std::vector,
            userData: *mut libc::c_void,
        ) {
            MidiInManager_cb_midi_input(deltatime, msg, userData)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MidiInManager_MidiInManager(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiInManager_MidiInManager_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiOutManager {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14MidiOutManager9the_moutsE"]
        pub static mut MidiOutManager_the_mouts: root::std::vector;
    }
    #[test]
    fn bindgen_test_layout_MidiOutManager() {
        assert_eq!(
            ::std::mem::size_of::<MidiOutManager>(),
            1usize,
            concat!("Size of: ", stringify!(MidiOutManager))
        );
        assert_eq!(
            ::std::mem::align_of::<MidiOutManager>(),
            1usize,
            concat!("Alignment of ", stringify!(MidiOutManager))
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14MidiOutManager4openEP7MidiOutl"]
        pub fn MidiOutManager_open(
            mout: *mut root::MidiOut,
            device_num: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14MidiOutManager4openEP7MidiOutRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn MidiOutManager_open1(
            mout: *mut root::MidiOut,
            name: *const root::std::__cxx11::string,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14MidiOutManager5closeEP7MidiOut"]
        pub fn MidiOutManager_close(mout: *mut root::MidiOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14MidiOutManagerC1Ev"]
        pub fn MidiOutManager_MidiOutManager(this: *mut root::MidiOutManager);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN14MidiOutManagerD1Ev"]
        pub fn MidiOutManager_MidiOutManager_destructor(this: *mut root::MidiOutManager);
    }
    impl MidiOutManager {
        #[inline]
        pub unsafe fn open(mout: *mut root::MidiOut, device_num: libc::c_long) -> libc::c_ulong {
            MidiOutManager_open(mout, device_num)
        }
        #[inline]
        pub unsafe fn open1(
            mout: *mut root::MidiOut,
            name: *const root::std::__cxx11::string,
        ) -> libc::c_ulong {
            MidiOutManager_open1(mout, name)
        }
        #[inline]
        pub unsafe fn close(mout: *mut root::MidiOut) -> libc::c_ulong {
            MidiOutManager_close(mout)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MidiOutManager_MidiOutManager(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiOutManager_MidiOutManager_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiRW {
        pub file: *mut root::FILE,
    }
    #[test]
    fn bindgen_test_layout_MidiRW() {
        assert_eq!(
            ::std::mem::size_of::<MidiRW>(),
            8usize,
            concat!("Size of: ", stringify!(MidiRW))
        );
        assert_eq!(
            ::std::mem::align_of::<MidiRW>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiRW))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiRW>())).file as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiRW),
                "::",
                stringify!(file)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiRW4openEPKc"]
        pub fn MidiRW_open(this: *mut root::MidiRW, filename: *const libc::c_char)
            -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiRW5closeEv"]
        pub fn MidiRW_close(this: *mut root::MidiRW) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiRW4readEP7MidiMsgPd"]
        pub fn MidiRW_read(
            this: *mut root::MidiRW,
            msg: *mut root::MidiMsg,
            time: *mut f64,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiRW5writeEP7MidiMsgPd"]
        pub fn MidiRW_write(
            this: *mut root::MidiRW,
            msg: *mut root::MidiMsg,
            time: *mut f64,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiRWC1Ev"]
        pub fn MidiRW_MidiRW(this: *mut root::MidiRW);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN6MidiRWD1Ev"]
        pub fn MidiRW_MidiRW_destructor(this: *mut root::MidiRW);
    }
    impl Default for MidiRW {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl MidiRW {
        #[inline]
        pub unsafe fn open(&mut self, filename: *const libc::c_char) -> libc::c_ulong {
            MidiRW_open(self, filename)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> libc::c_ulong {
            MidiRW_close(self)
        }
        #[inline]
        pub unsafe fn read(&mut self, msg: *mut root::MidiMsg, time: *mut f64) -> libc::c_ulong {
            MidiRW_read(self, msg, time)
        }
        #[inline]
        pub unsafe fn write(&mut self, msg: *mut root::MidiMsg, time: *mut f64) -> libc::c_ulong {
            MidiRW_write(self, msg, time)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MidiRW_MidiRW(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiRW_MidiRW_destructor(self)
        }
    }
    extern "C" {
        #[link_name = "\u{1}_Z13midirw_detachv"]
        pub fn midirw_detach() -> libc::c_ulong;
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiMsgOut {
        pub file: *mut root::FILE,
    }
    #[test]
    fn bindgen_test_layout_MidiMsgOut() {
        assert_eq!(
            ::std::mem::size_of::<MidiMsgOut>(),
            8usize,
            concat!("Size of: ", stringify!(MidiMsgOut))
        );
        assert_eq!(
            ::std::mem::align_of::<MidiMsgOut>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiMsgOut))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiMsgOut>())).file as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiMsgOut),
                "::",
                stringify!(file)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10MidiMsgOut4openEPKc"]
        pub fn MidiMsgOut_open(
            this: *mut root::MidiMsgOut,
            filename: *const libc::c_char,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10MidiMsgOut5closeEv"]
        pub fn MidiMsgOut_close(this: *mut root::MidiMsgOut) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10MidiMsgOut5writeEP7MidiMsgPd"]
        pub fn MidiMsgOut_write(
            this: *mut root::MidiMsgOut,
            msg: *mut root::MidiMsg,
            time: *mut f64,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10MidiMsgOutC1Ev"]
        pub fn MidiMsgOut_MidiMsgOut(this: *mut root::MidiMsgOut);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN10MidiMsgOutD1Ev"]
        pub fn MidiMsgOut_MidiMsgOut_destructor(this: *mut root::MidiMsgOut);
    }
    impl Default for MidiMsgOut {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl MidiMsgOut {
        #[inline]
        pub unsafe fn open(&mut self, filename: *const libc::c_char) -> libc::c_ulong {
            MidiMsgOut_open(self, filename)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> libc::c_ulong {
            MidiMsgOut_close(self)
        }
        #[inline]
        pub unsafe fn write(&mut self, msg: *mut root::MidiMsg, time: *mut f64) -> libc::c_ulong {
            MidiMsgOut_write(self, msg, time)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MidiMsgOut_MidiMsgOut(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiMsgOut_MidiMsgOut_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct MidiMsgIn {
        pub file: *mut root::FILE,
    }
    #[test]
    fn bindgen_test_layout_MidiMsgIn() {
        assert_eq!(
            ::std::mem::size_of::<MidiMsgIn>(),
            8usize,
            concat!("Size of: ", stringify!(MidiMsgIn))
        );
        assert_eq!(
            ::std::mem::align_of::<MidiMsgIn>(),
            8usize,
            concat!("Alignment of ", stringify!(MidiMsgIn))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MidiMsgIn>())).file as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MidiMsgIn),
                "::",
                stringify!(file)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9MidiMsgIn4openEPKc"]
        pub fn MidiMsgIn_open(
            this: *mut root::MidiMsgIn,
            filename: *const libc::c_char,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9MidiMsgIn5closeEv"]
        pub fn MidiMsgIn_close(this: *mut root::MidiMsgIn) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9MidiMsgIn4readEP7MidiMsgPd"]
        pub fn MidiMsgIn_read(
            this: *mut root::MidiMsgIn,
            msg: *mut root::MidiMsg,
            time: *mut f64,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9MidiMsgInC1Ev"]
        pub fn MidiMsgIn_MidiMsgIn(this: *mut root::MidiMsgIn);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN9MidiMsgInD1Ev"]
        pub fn MidiMsgIn_MidiMsgIn_destructor(this: *mut root::MidiMsgIn);
    }
    impl Default for MidiMsgIn {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl MidiMsgIn {
        #[inline]
        pub unsafe fn open(&mut self, filename: *const libc::c_char) -> libc::c_ulong {
            MidiMsgIn_open(self, filename)
        }
        #[inline]
        pub unsafe fn close(&mut self) -> libc::c_ulong {
            MidiMsgIn_close(self)
        }
        #[inline]
        pub unsafe fn read(&mut self, msg: *mut root::MidiMsg, time: *mut f64) -> libc::c_ulong {
            MidiMsgIn_read(self, msg, time)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            MidiMsgIn_MidiMsgIn(&mut __bindgen_tmp);
            __bindgen_tmp
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            MidiMsgIn_MidiMsgIn_destructor(self)
        }
    }
    #[repr(C)]
    pub struct ChucK__bindgen_vtable(libc::c_void);
    #[repr(C)]
    pub struct ChucK {
        pub vtable_: *const ChucK__bindgen_vtable,
        pub m_carrier: *mut root::Chuck_Carrier,
        pub m_params: root::std::map,
        pub m_listParams: root::std::map,
        pub m_init: libc::c_ulong,
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK14o_isGlobalInitE"]
        pub static mut ChucK_o_isGlobalInit: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK16enableSystemCallE"]
        pub static mut ChucK_enableSystemCall: libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK7VERSIONE"]
        pub static mut ChucK_VERSION: [libc::c_char; 0usize];
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK8o_numVMsE"]
        pub static mut ChucK_o_numVMs: libc::c_ulong;
    }
    #[test]
    fn bindgen_test_layout_ChucK() {
        assert_eq!(
            ::std::mem::size_of::<ChucK>(),
            120usize,
            concat!("Size of: ", stringify!(ChucK))
        );
        assert_eq!(
            ::std::mem::align_of::<ChucK>(),
            8usize,
            concat!("Alignment of ", stringify!(ChucK))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChucK>())).m_carrier as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ChucK),
                "::",
                stringify!(m_carrier)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChucK>())).m_params as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ChucK),
                "::",
                stringify!(m_params)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChucK>())).m_listParams as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ChucK),
                "::",
                stringify!(m_listParams)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ChucK>())).m_init as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ChucK),
                "::",
                stringify!(m_init)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK8setParamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl"]
        pub fn ChucK_setParam(
            this: *mut root::ChucK,
            name: *const root::std::__cxx11::string,
            value: libc::c_long,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK13setParamFloatERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd"]
        pub fn ChucK_setParamFloat(
            this: *mut root::ChucK,
            name: *const root::std::__cxx11::string,
            value: f64,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK8setParamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_"]
        pub fn ChucK_setParam1(
            this: *mut root::ChucK,
            name: *const root::std::__cxx11::string,
            value: *const root::std::__cxx11::string,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK8setParamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4listIS5_SaIS5_EEE"]
        pub fn ChucK_setParam2(
            this: *mut root::ChucK,
            name: *const root::std::__cxx11::string,
            value: *const root::std::__cxx11::list,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK11getParamIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn ChucK_getParamInt(
            this: *mut root::ChucK,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK13getParamFloatERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn ChucK_getParamFloat(
            this: *mut root::ChucK,
            key: *const root::std::__cxx11::string,
        ) -> f64;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK14getParamStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn ChucK_getParamString(
            this: *mut root::ChucK,
            key: *const root::std::__cxx11::string,
        ) -> root::std::__cxx11::string;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK18getParamStringListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn ChucK_getParamStringList(
            this: *mut root::ChucK,
            key: *const root::std::__cxx11::string,
        ) -> root::std::__cxx11::list;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK11compileFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_i"]
        pub fn ChucK_compileFile(
            this: *mut root::ChucK,
            path: *const root::std::__cxx11::string,
            argsTogether: *const root::std::__cxx11::string,
            count: libc::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK11compileCodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_i"]
        pub fn ChucK_compileCode(
            this: *mut root::ChucK,
            code: *const root::std::__cxx11::string,
            argsTogether: *const root::std::__cxx11::string,
            count: libc::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK4initEv"]
        pub fn ChucK_init(this: *mut root::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK5startEv"]
        pub fn ChucK_start(this: *mut root::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK3runEPfS0_i"]
        pub fn ChucK_run(
            this: *mut root::ChucK,
            input: *mut f32,
            output: *mut f32,
            numFrames: libc::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK7runningEv"]
        pub fn ChucK_running(this: *mut root::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK4bindEPFmP14Chuck_DL_QueryERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
        pub fn ChucK_bind(
            this: *mut root::ChucK,
            queryFunc: root::f_ck_query,
            name: *const root::std::__cxx11::string,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK2vmEv"]
        pub fn ChucK_vm(this: *mut root::ChucK) -> *mut root::Chuck_VM;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK8compilerEv"]
        pub fn ChucK_compiler(this: *mut root::ChucK) -> *mut root::Chuck_Compiler;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK12setGlobalIntEPKcl"]
        pub fn ChucK_setGlobalInt(
            this: *mut root::ChucK,
            name: *const libc::c_char,
            val: libc::c_long,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK12getGlobalIntEPKcPFvlE"]
        pub fn ChucK_getGlobalInt(
            this: *mut root::ChucK,
            name: *const libc::c_char,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_long)>,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK14setGlobalFloatEPKcd"]
        pub fn ChucK_setGlobalFloat(
            this: *mut root::ChucK,
            name: *const libc::c_char,
            val: f64,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK14getGlobalFloatEPKcPFvdE"]
        pub fn ChucK_getGlobalFloat(
            this: *mut root::ChucK,
            name: *const libc::c_char,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: f64)>,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK17signalGlobalEventEPKc"]
        pub fn ChucK_signalGlobalEvent(
            this: *mut root::ChucK,
            name: *const libc::c_char,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK20broadcastGlobalEventEPKc"]
        pub fn ChucK_broadcastGlobalEvent(
            this: *mut root::ChucK,
            name: *const libc::c_char,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK16setChoutCallbackEPFvPKcE"]
        pub fn ChucK_setChoutCallback(
            this: *mut root::ChucK,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK16setCherrCallbackEPFvPKcE"]
        pub fn ChucK_setCherrCallback(
            this: *mut root::ChucK,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK17setStdoutCallbackEPFvPKcE"]
        pub fn ChucK_setStdoutCallback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK17setStderrCallbackEPFvPKcE"]
        pub fn ChucK_setStderrCallback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK10globalInitEv"]
        pub fn ChucK_globalInit() -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK13globalCleanupEv"]
        pub fn ChucK_globalCleanup();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK8shutdownEv"]
        pub fn ChucK_shutdown(this: *mut root::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK7versionEv"]
        pub fn ChucK_version() -> *const libc::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK7intSizeEv"]
        pub fn ChucK_intSize() -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK6numVMsEv"]
        pub fn ChucK_numVMs() -> libc::c_ulong;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK4poopEv"]
        pub fn ChucK_poop();
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK11setLogLevelEl"]
        pub fn ChucK_setLogLevel(level: libc::c_long);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK11getLogLevelEv"]
        pub fn ChucK_getLogLevel() -> libc::c_long;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK17initDefaultParamsEv"]
        pub fn ChucK_initDefaultParams(this: *mut root::ChucK);
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK6initVMEv"]
        pub fn ChucK_initVM(this: *mut root::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK12initCompilerEv"]
        pub fn ChucK_initCompiler(this: *mut root::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK11initChuginsEv"]
        pub fn ChucK_initChugins(this: *mut root::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucK7initOTFEv"]
        pub fn ChucK_initOTF(this: *mut root::ChucK) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucKC1Ev"]
        pub fn ChucK_ChucK(this: *mut root::ChucK);
    }
    impl Default for ChucK {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    impl ::std::fmt::Debug for ChucK {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "ChucK {{ m_carrier: {:?}, m_params: {:?}, m_listParams: {:?}, m_init: {:?} }}",
                self.m_carrier, self.m_params, self.m_listParams, self.m_init
            )
        }
    }
    impl ChucK {
        /// setParam int by name
        #[inline]
        pub unsafe fn setParam(
            &mut self,
            name: *const root::std::__cxx11::string,
            value: libc::c_long,
        ) -> bool {
            ChucK_setParam(self, name, value)
        }
        /// setParam float by name
        #[inline]
        pub unsafe fn setParamFloat(
            &mut self,
            name: *const root::std::__cxx11::string,
            value: f64,
        ) -> bool {
            ChucK_setParamFloat(self, name, value)
        }
        /// setParam string by name
        #[inline]
        pub unsafe fn setParam1(
            &mut self,
            name: *const root::std::__cxx11::string,
            value: *const root::std::__cxx11::string,
        ) -> bool {
            ChucK_setParam1(self, name, value)
        }
        /// setParam string list by name
        #[inline]
        pub unsafe fn setParam2(
            &mut self,
            name: *const root::std::__cxx11::string,
            value: *const root::std::__cxx11::list,
        ) -> bool {
            ChucK_setParam2(self, name, value)
        }
        /// get int param
        #[inline]
        pub unsafe fn getParamInt(
            &mut self,
            key: *const root::std::__cxx11::string,
        ) -> libc::c_long {
            ChucK_getParamInt(self, key)
        }
        /// get float param
        #[inline]
        pub unsafe fn getParamFloat(&mut self, key: *const root::std::__cxx11::string) -> f64 {
            ChucK_getParamFloat(self, key)
        }
        /// get string param
        #[inline]
        pub unsafe fn getParamString(
            &mut self,
            key: *const root::std::__cxx11::string,
        ) -> root::std::__cxx11::string {
            ChucK_getParamString(self, key)
        }
        /// get string list param
        #[inline]
        pub unsafe fn getParamStringList(
            &mut self,
            key: *const root::std::__cxx11::string,
        ) -> root::std::__cxx11::list {
            ChucK_getParamStringList(self, key)
        }
        #[inline]
        pub unsafe fn compileFile(
            &mut self,
            path: *const root::std::__cxx11::string,
            argsTogether: *const root::std::__cxx11::string,
            count: libc::c_int,
        ) -> bool {
            ChucK_compileFile(self, path, argsTogether, count)
        }
        #[inline]
        pub unsafe fn compileCode(
            &mut self,
            code: *const root::std::__cxx11::string,
            argsTogether: *const root::std::__cxx11::string,
            count: libc::c_int,
        ) -> bool {
            ChucK_compileCode(self, code, argsTogether, count)
        }
        #[inline]
        pub unsafe fn init(&mut self) -> bool {
            ChucK_init(self)
        }
        #[inline]
        pub unsafe fn start(&mut self) -> bool {
            ChucK_start(self)
        }
        #[inline]
        pub unsafe fn run(&mut self, input: *mut f32, output: *mut f32, numFrames: libc::c_int) {
            ChucK_run(self, input, output, numFrames)
        }
        #[inline]
        pub unsafe fn running(&mut self) -> bool {
            ChucK_running(self)
        }
        #[inline]
        pub unsafe fn bind(
            &mut self,
            queryFunc: root::f_ck_query,
            name: *const root::std::__cxx11::string,
        ) -> bool {
            ChucK_bind(self, queryFunc, name)
        }
        #[inline]
        pub unsafe fn vm(&mut self) -> *mut root::Chuck_VM {
            ChucK_vm(self)
        }
        #[inline]
        pub unsafe fn compiler(&mut self) -> *mut root::Chuck_Compiler {
            ChucK_compiler(self)
        }
        #[inline]
        pub unsafe fn setGlobalInt(
            &mut self,
            name: *const libc::c_char,
            val: libc::c_long,
        ) -> libc::c_ulong {
            ChucK_setGlobalInt(self, name, val)
        }
        #[inline]
        pub unsafe fn getGlobalInt(
            &mut self,
            name: *const libc::c_char,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_long)>,
        ) -> libc::c_ulong {
            ChucK_getGlobalInt(self, name, callback)
        }
        #[inline]
        pub unsafe fn setGlobalFloat(
            &mut self,
            name: *const libc::c_char,
            val: f64,
        ) -> libc::c_ulong {
            ChucK_setGlobalFloat(self, name, val)
        }
        #[inline]
        pub unsafe fn getGlobalFloat(
            &mut self,
            name: *const libc::c_char,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: f64)>,
        ) -> libc::c_ulong {
            ChucK_getGlobalFloat(self, name, callback)
        }
        #[inline]
        pub unsafe fn signalGlobalEvent(&mut self, name: *const libc::c_char) -> libc::c_ulong {
            ChucK_signalGlobalEvent(self, name)
        }
        #[inline]
        pub unsafe fn broadcastGlobalEvent(&mut self, name: *const libc::c_char) -> libc::c_ulong {
            ChucK_broadcastGlobalEvent(self, name)
        }
        #[inline]
        pub unsafe fn setChoutCallback(
            &mut self,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) -> libc::c_ulong {
            ChucK_setChoutCallback(self, callback)
        }
        #[inline]
        pub unsafe fn setCherrCallback(
            &mut self,
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) -> libc::c_ulong {
            ChucK_setCherrCallback(self, callback)
        }
        #[inline]
        pub unsafe fn setStdoutCallback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) -> libc::c_ulong {
            ChucK_setStdoutCallback(callback)
        }
        #[inline]
        pub unsafe fn setStderrCallback(
            callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const libc::c_char)>,
        ) -> libc::c_ulong {
            ChucK_setStderrCallback(callback)
        }
        #[inline]
        pub unsafe fn globalInit() -> libc::c_ulong {
            ChucK_globalInit()
        }
        #[inline]
        pub unsafe fn globalCleanup() {
            ChucK_globalCleanup()
        }
        #[inline]
        pub unsafe fn shutdown(&mut self) -> bool {
            ChucK_shutdown(self)
        }
        #[inline]
        pub unsafe fn version() -> *const libc::c_char {
            ChucK_version()
        }
        #[inline]
        pub unsafe fn intSize() -> libc::c_ulong {
            ChucK_intSize()
        }
        #[inline]
        pub unsafe fn numVMs() -> libc::c_ulong {
            ChucK_numVMs()
        }
        #[inline]
        pub unsafe fn poop() {
            ChucK_poop()
        }
        #[inline]
        pub unsafe fn setLogLevel(level: libc::c_long) {
            ChucK_setLogLevel(level)
        }
        #[inline]
        pub unsafe fn getLogLevel() -> libc::c_long {
            ChucK_getLogLevel()
        }
        #[inline]
        pub unsafe fn initDefaultParams(&mut self) {
            ChucK_initDefaultParams(self)
        }
        #[inline]
        pub unsafe fn initVM(&mut self) -> bool {
            ChucK_initVM(self)
        }
        #[inline]
        pub unsafe fn initCompiler(&mut self) -> bool {
            ChucK_initCompiler(self)
        }
        #[inline]
        pub unsafe fn initChugins(&mut self) -> bool {
            ChucK_initChugins(self)
        }
        #[inline]
        pub unsafe fn initOTF(&mut self) -> bool {
            ChucK_initOTF(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::uninitialized();
            ChucK_ChucK(&mut __bindgen_tmp);
            __bindgen_tmp
        }
    }
    extern "C" {
        #[link_name = "\u{1}_ZN5ChucKD1Ev"]
        pub fn ChucK_ChucK_destructor(this: *mut root::ChucK);
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __locale_data {
        pub _address: u8,
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct __va_list_tag {
        pub gp_offset: libc::c_uint,
        pub fp_offset: libc::c_uint,
        pub overflow_arg_area: *mut libc::c_void,
        pub reg_save_area: *mut libc::c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            ::std::mem::size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    impl Default for __va_list_tag {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_2 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_3 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_4 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_5 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_6 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_7 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_8 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_9 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_10 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_11 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_12 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_13 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_14 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_15 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_16 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_17 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_18 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_19 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_20 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_21 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_22 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_23 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_24 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_25 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_26 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_27 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_28 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_29 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_30 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ios_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ios<libc::c_char>>(),
            264usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ios<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ios<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ios<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<libc::c_char>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<libc::c_char>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ostream<libc::c_char>>(),
            272usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ostream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ostream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ostream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringbuf_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_stringbuf<libc::c_char>>(),
            104usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringbuf<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_stringbuf<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringbuf<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_istringstream<libc::c_char>>(),
            384usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_istringstream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_istringstream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_istringstream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostringstream_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_ostringstream<libc::c_char>>(),
            376usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_ostringstream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_ostringstream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_ostringstream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_filebuf_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_filebuf<libc::c_char>>(),
            240usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_filebuf<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_filebuf<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_filebuf<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ifstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ifstream<libc::c_char>>(),
            520usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ifstream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ifstream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ifstream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ofstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ofstream<libc::c_char>>(),
            512usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ofstream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ofstream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ofstream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_fstream_open0_char_char_traits_open1_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_fstream<libc::c_char>>(),
            528usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_fstream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_fstream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_fstream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_13() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ios_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ios<u32>>(),
            264usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ios<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ios<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ios<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ostream<u32>>(),
            272usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ostream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ostream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ostream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_stringbuf_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_stringbuf<u32>>(),
            104usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringbuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_stringbuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_stringbuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_istringstream<u32>>(),
            384usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_istringstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_istringstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_istringstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ostringstream_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
            376usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_ostringstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_ostringstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_ostringstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_filebuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_filebuf<u32>>(),
            240usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_filebuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_filebuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_filebuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ifstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ifstream<u32>>(),
            520usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ifstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ifstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ifstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_ofstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_ofstream<u32>>(),
            512usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_ofstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_ofstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_ofstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_fstream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_fstream<u32>>(),
            528usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_fstream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_fstream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_fstream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_13() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_42 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<libc::c_char>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_14() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_15() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<libc::c_char>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_16() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_14() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_15() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_istream_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_istream<u32>>(),
            280usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_istream<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_istream<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_16() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_long_double_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_17() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_18() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_17() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_wchar_t_char_traits_open2_wchar_t_close2_allocator_open2_wchar_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_wchar_t_char_traits_open1_wchar_t_close1_allocator_open1_wchar_t_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_18() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_7() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char16_t_char_traits_open2_char16_t_close2_allocator_open2_char16_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char16_t_char_traits_open1_char16_t_close1_allocator_open1_char16_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u16>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u16>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u16>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char16_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char16_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_hash_open0_basic_string_open1_char32_t_char_traits_open2_char32_t_close2_allocator_open2_char32_t_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::hash>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::hash)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::hash>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::hash)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char32_t_char_traits_open1_char32_t_close1_allocator_open1_char32_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<u32>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char32_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char32_t_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_19() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_19() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_8() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    pub type size_type = usize;
    #[test]
    fn __bindgen_test_layout_iterator_open0_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    pub type iterator = root::std::_Bit_iterator;
    #[test]
    fn __bindgen_test_layout_vector_open0_SyntaxToken_allocator_open1_SyntaxToken_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_SyntaxToken_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    pub type SyntaxTokenList_size_type = usize;
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_20() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_43 {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct _bindgen_ty_44 {
        pub _address: u8,
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_WvOut_ptr_WvOut__bindgen_ty_id_75153_open1_ptr_WvOut_close1_allocator_open1_pair_open2_ptr_WvOut_ptr_WvOut_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_WvOut_ptr_WvOut_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_WvOut_ptr_WvOut_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::pair<*mut root::WvOut, *mut root::WvOut>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut root::WvOut, *mut root::WvOut>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::pair<*mut root::WvOut, *mut root::WvOut>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut root::WvOut, *mut root::WvOut>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<libc::c_char>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_21() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_char_char_traits_open1_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<libc::c_char>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_22() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_20() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_streambuf_open0_wchar_t_char_traits_open1_wchar_t_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::basic_streambuf<u32>>(),
            64usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::basic_streambuf<u32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::basic_streambuf<u32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_21() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_23() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_22() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_iterator_open0_output_iterator_tag_void_void_void_void_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::iterator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::iterator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_24() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_25() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_23() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_24() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_26() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_25() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_27() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_26() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    pub type char_type = libc::c_char;
    pub type int_type = libc::c_int;
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_28() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_29() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_27() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_28() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout___basic_file_open0_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::__basic_file>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__basic_file)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__basic_file>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__basic_file)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_30() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_31() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_32() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_33() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_29() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_30() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_31() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_32() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_34() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_35() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_36() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_37() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_13() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_33() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_9() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_34() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_10() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_35() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_11() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_wchar_t_close0_instantiation_36() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_wchar_t_close0_instantiation_12() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Func_allocator_open1_ptr_Chuck_Func_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Func_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_long_allocator_open1_unsigned_long_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_long_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_unsigned_long_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_long_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_38() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_14() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_long_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_39() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_15() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_double_allocator_open1_double_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_double_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_double_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_double_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_40() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_16() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_double_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_41() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_17() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_t_CKCOMPLEX_allocator_open1_t_CKCOMPLEX_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_t_CKCOMPLEX_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_t_CKCOMPLEX_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_t_CKCOMPLEX_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_42() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_18() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_t_CKCOMPLEX_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_43() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_19() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_t_CKVEC3_allocator_open1_t_CKVEC3_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_t_CKVEC3_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_t_CKVEC3_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_t_CKVEC3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_44() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_20() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_t_CKVEC3_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_12(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_45() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_21() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_t_CKVEC4_allocator_open1_t_CKVEC4_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_t_CKVEC4_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_t_CKVEC4_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_t_CKVEC4_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_13(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_46() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_22() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_t_CKVEC4_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_14(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_47() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_23() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_queue_open0_ptr_Chuck_VM_Shred_deque_open1_ptr_Chuck_VM_Shred_allocator_open2_ptr_Chuck_VM_Shred_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::queue<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::queue<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_ptr_Chuck_VM_Shred_allocator_open1_ptr_Chuck_VM_Shred_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Shred_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Class_allocator_open1_ptr_Chuck_DL_Class_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Class_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Class_allocator_open1_ptr_Chuck_DL_Class_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Class_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Func_allocator_open1_ptr_Chuck_DL_Func_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Func_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Func_allocator_open1_ptr_Chuck_DL_Func_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Func_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Func_allocator_open1_ptr_Chuck_DL_Func_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Func_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Value_allocator_open1_ptr_Chuck_DL_Value_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Value_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Value_allocator_open1_ptr_Chuck_DL_Value_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Value_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Ctrl_allocator_open1_ptr_Chuck_DL_Ctrl_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Ctrl_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Class_allocator_open1_ptr_Chuck_DL_Class_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Class_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_15(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_48() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_24() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_DL_Value_allocator_open1_ptr_Chuck_DL_Value_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DL_Value_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_16(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_49() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_25() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_map_allocator_open1_ptr_map_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_S_Symbol_ptr_Chuck_VM_Object__bindgen_ty_id_78284_open1_ptr_S_Symbol__close1_allocator_open1_pair_open2_ptr_S_Symbol__ptr_Chuck_VM_Object_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_S_Symbol__ptr_Chuck_VM_Object_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_S_Symbol__ptr_Chuck_VM_Object_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>>(
            ),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>>(
            ),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_map_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_S_Symbol__ptr_Chuck_VM_Object__bindgen_ty_id_78304_open1_ptr_S_Symbol__close1_allocator_open1_pair_open2_ptr_S_Symbol__ptr_Chuck_VM_Object_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_S_Symbol__ptr_Chuck_VM_Object_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_S_Symbol__ptr_Chuck_VM_Object_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>>(
            ),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>>(
            ),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_S_Symbol_ptr_Chuck_VM_Object__bindgen_ty_id_78323_open1_ptr_S_Symbol__close1_allocator_open1_pair_open2_ptr_S_Symbol__ptr_Chuck_VM_Object_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_S_Symbol__ptr_Chuck_VM_Object_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_S_Symbol__ptr_Chuck_VM_Object_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>>(
            ),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>>(
            ),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut root::S_Symbol_, *mut root::Chuck_VM_Object>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Chuck_Scope_open0_ptr_Chuck_Type_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::Chuck_Scope>(),
            72usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::Chuck_Scope>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Chuck_Scope_open0_ptr_Chuck_Value_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::Chuck_Scope>(),
            72usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::Chuck_Scope>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_Chuck_Scope_open0_ptr_Chuck_Func_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::Chuck_Scope>(),
            72usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::Chuck_Scope>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::Chuck_Scope)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Type_allocator_open1_ptr_Chuck_Type_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Type_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Func_allocator_open1_ptr_Chuck_Func_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Func_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Object_allocator_open1_ptr_Chuck_VM_Object_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Object_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_Chuck_Namespace_ptr_Chuck_Namespace__bindgen_ty_id_78446_open1_ptr_Chuck_Namespace_close1_allocator_open1_pair_open2_ptr_Chuck_Namespace_ptr_Chuck_Namespace_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_Chuck_Namespace_ptr_Chuck_Namespace_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_pair_open0_ptr_Chuck_Namespace_ptr_Chuck_Namespace_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<
                root::std::pair<*mut root::Chuck_Namespace, *mut root::Chuck_Namespace>,
            >(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::pair<*mut root::Chuck_Namespace, *mut root::Chuck_Namespace>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<
                root::std::pair<*mut root::Chuck_Namespace, *mut root::Chuck_Namespace>,
            >(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::pair<*mut root::Chuck_Namespace, *mut root::Chuck_Namespace>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Namespace_allocator_open1_ptr_Chuck_Namespace_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Namespace_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Type_allocator_open1_ptr_Chuck_Type_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Type_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Context_allocator_open1_ptr_Chuck_Context_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Context_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_a_Stmt_allocator_open1_ptr_a_Stmt__close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_a_Stmt__close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_unsigned_long_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_long_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_17(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_50() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_26() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_long_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_18(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_51() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_27() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_unsigned_long_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_long_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_19(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_52() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_28() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_long_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_20(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_53() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_29() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_unsigned_long_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_unsigned_long_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_21(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_54() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_30() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_unsigned_long_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_22(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_55() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_31() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_23(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_56() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_32() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_24(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_57() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_33() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_25(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_58() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_34() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_26(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_59() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_35() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Local_allocator_open1_ptr_Chuck_Local_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Local_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Local_allocator_open1_ptr_Chuck_Local_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Local_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Local_allocator_open1_ptr_Chuck_Local_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Local_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Instr_allocator_open1_ptr_Chuck_Instr_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Instr_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Instr_Goto_allocator_open1_ptr_Chuck_Instr_Goto_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Instr_Goto_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Instr_Goto_allocator_open1_ptr_Chuck_Instr_Goto_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Instr_Goto_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Instr_Goto_allocator_open1_ptr_Chuck_Instr_Goto_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Instr_Goto_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Code_allocator_open1_ptr_Chuck_Code_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Code_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Local_allocator_open1_ptr_Chuck_Local_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Local_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_CBufferAdvance_ReadOffset_allocator_open1_CBufferAdvance_ReadOffset_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_CBufferAdvance_ReadOffset_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_queue_open0_unsigned_long_deque_open1_unsigned_long_allocator_open2_unsigned_long_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::queue<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::queue<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_unsigned_long_allocator_open1_unsigned_long_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_long_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_unsigned_long_ptr_Chuck_VM_Shred_less_open1_unsigned_long_close1_allocator_open1_pair_open2_const_unsigned_long_ptr_Chuck_VM_Shred_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_unsigned_long_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_const_unsigned_long_ptr_Chuck_VM_Shred_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_Chuck_UGen_ptr_Chuck_UGen__bindgen_ty_id_79600_open1_ptr_Chuck_UGen_close1_allocator_open1_pair_open2_ptr_Chuck_UGen_ptr_Chuck_UGen_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_Chuck_UGen_ptr_Chuck_UGen_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Object_allocator_open1_ptr_Chuck_Object_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Object_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_27(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_60() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_36() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_unsigned_long_allocator_open1_ptr_unsigned_long_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_unsigned_long_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Shred_Status_allocator_open1_ptr_Chuck_VM_Shred_Status_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Shred_Status_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_ptr_Chuck_VM_Shred_ptr_Chuck_VM_Shred__bindgen_ty_id_79712_open1_ptr_Chuck_VM_Shred_close1_allocator_open1_pair_open2_ptr_Chuck_VM_Shred_ptr_Chuck_VM_Shred_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_ptr_Chuck_VM_Shred_ptr_Chuck_VM_Shred_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_VM_Shred_allocator_open1_ptr_Chuck_VM_Shred_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_VM_Shred_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_ptr_CBufferSimple_allocator_open1_ptr_CBufferSimple_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_CBufferSimple_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Chuck_Global_Int_Container_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Chuck_Global_Int_Container_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_28(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_61() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_37() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Chuck_Global_Int_Container_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_29(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_62() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_38() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Chuck_Global_Float_Container_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Chuck_Global_Float_Container_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_30(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_63() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_39() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Chuck_Global_Float_Container_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_31(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_64() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_40() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Chuck_Global_Event_Container_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Chuck_Global_Event_Container_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_32(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_65() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_41() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Chuck_Global_Event_Container_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_33(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_66() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_42() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_XCircleBuffer_open0_Chuck_Global_Request_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::XCircleBuffer<root::Chuck_Global_Request>>(),
            40usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::XCircleBuffer<root::Chuck_Global_Request>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::XCircleBuffer<root::Chuck_Global_Request>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::XCircleBuffer<root::Chuck_Global_Request>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_34(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_67() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_43() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_35(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_68() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_44() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Chuck_Context_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Chuck_Context_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_12(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_36(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_69() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_45() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Chuck_Context_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_37(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_70() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_46() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_ptr_Chuck_DLL_allocator_open1_ptr_Chuck_DLL_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_DLL_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_38(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_71() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_47() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_39(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_72() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_48() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_40(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_73() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_49() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Chuck_Shell_VM_allocator_open1_ptr_Chuck_Shell_VM_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Chuck_Shell_VM_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_13(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_41(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_74() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_50() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_42(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_75() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_51() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_43(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_76() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_52() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_14(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_44(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_77() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_53() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_45(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_78() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_54() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_46(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_79() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_55() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Command_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Command_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_15(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_47(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_80() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_56() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Command_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_48(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_81() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_57() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Command_allocator_open1_ptr_Command_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Command_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_16(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_49(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_82() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_58() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_50(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_83() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_59() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_51(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_84() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_60() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_52(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_85() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_61() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_7(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_53(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_86() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_62() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_8(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_54(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_87() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_63() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Command_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Command_close2_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_17(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_55(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_88() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_64() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Command_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_56(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_89() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_65() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Command_allocator_open1_ptr_Command_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Command_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_9(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_12(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_57(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_90() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_66() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_10(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_13(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_58(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_91() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_67() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_11(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_14(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_59(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_92() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_68() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_12(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_15(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_60(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_93() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_69() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_13(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_16(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_61(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_94() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_70() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_14(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_17(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_62(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_95() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_71() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_15(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_18(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_63(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_96() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_72() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_16(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_19(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_64(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_97() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_73() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_17(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_20(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_65(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_98() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_74() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_18(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_21(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_66(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_99() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_75() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_19(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_22(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_67(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_100() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_76() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_20(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_23(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_68(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_101() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_77() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_21(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_24(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_69(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_102() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_78() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_22(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_25(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_70(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_103() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_79() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_23(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_26(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_71(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_104() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_80() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_24(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_27(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_72(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_105() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_81() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_25(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_28(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_73(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_106() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_82() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_26(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_29(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_74(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_107() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_83() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_27(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_30(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_75(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_108() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_84() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_28(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_31(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_76(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_109() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_85() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_29(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_32(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_77(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_110() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_86() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_30(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_33(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_78(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_111() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_87() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_ptr_Command_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_ptr_Command_close2_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_18(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_79(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_112() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_88() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_ptr_Command_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_80(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_113() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_89() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_ptr_Command_allocator_open1_ptr_Command_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_ptr_Command_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_31(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_34(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_81(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_114() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_90() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_32(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_35(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_82(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_115() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_91() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_33(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_36(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_83(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_116() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_92() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_34(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_37(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_84(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_117() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_93() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_35(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_38(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_85(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_118() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_94() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_36(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_39(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_86(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_119() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_95() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_37(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_40(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_87(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_120() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_96() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_38(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_41(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_88(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_121() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_97() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_39(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_42(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_89(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_122() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_98() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_40(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_43(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_90(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_123() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_99() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_41(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_44(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_91(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_124() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_100() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_42(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_45(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_92(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_125() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_101() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_43(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_46(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_93(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_126() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_102() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_44(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_47(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_94(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_127() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_103() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_45(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_48(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_95(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_128() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_104() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_46(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_49(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_96(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_129() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_105() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_50(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_97(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_130() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_106() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_1(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_2(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_2() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_3(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_3() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_queue_open0_RtMidiIn_MidiMessage_deque_open1_RtMidiIn_MidiMessage_allocator_open2_RtMidiIn_MidiMessage_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::queue<root::std::deque>>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::queue<root::std::deque>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::queue<root::std::deque>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_deque_open0_RtMidiIn_MidiMessage_allocator_open1_RtMidiIn_MidiMessage_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::deque>(),
            80usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::deque)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::deque>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::deque)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_RtMidiIn_MidiMessage_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_4() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_5() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_vector_open0_unsigned_char_allocator_open1_unsigned_char_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::vector>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::vector)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::vector>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::vector)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_unsigned_char_close0_instantiation_6() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_51(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_98(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_131() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_107() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_5(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_52(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_99(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_132() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_108() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_string_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_19(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_100(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_133() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_109() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_4(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_101(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_134() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_110() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_102(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_135() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_111() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_map_open0_string_list_open1_string_allocator_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_close2_close1_less_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_allocator_open1_pair_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_list_open3_basic_string_open4_char_char_traits_open5_char_close5_allocator_open5_char_close5_close4_allocator_open4_basic_string_open5_char_char_traits_open6_char_close6_allocator_open6_char_close6_close5_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::map>(),
            48usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::map)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::map>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::map)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_string_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation_6(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_53(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_103(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_136() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_112() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_less_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_20(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::less>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::less)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::less>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::less)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_104(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_137() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_113() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_pair_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_list_open2_basic_string_open3_char_char_traits_open4_char_close4_allocator_open4_char_close4_close3_allocator_open3_basic_string_open4_char_char_traits_open5_char_close5_allocator_open5_char_close5_close4_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_105(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_138() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_114() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_list_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_allocator_open1_basic_string_open2_char_char_traits_open3_char_close3_allocator_open3_char_close3_close2_close1_close0_instantiation(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::list>(),
            24usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::list>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::list)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_106(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_139() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_115() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_basic_string_open1_char_char_traits_open2_char_close2_allocator_open2_char_close2_close1_close0_instantiation_54(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_basic_string_open0_char_char_traits_open1_char_close1_allocator_open1_char_close1_close0_instantiation_107(
    ) {
        assert_eq!(
            ::std::mem::size_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            32usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::__cxx11::basic_string<libc::c_char>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::__cxx11::basic_string<libc::c_char>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_char_traits_open0_char_close0_instantiation_140() {
        assert_eq!(
            ::std::mem::size_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::char_traits>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::char_traits)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_allocator_open0_char_close0_instantiation_116() {
        assert_eq!(
            ::std::mem::size_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::std::allocator>(),
            1usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::std::allocator)
            )
        );
    }
}
